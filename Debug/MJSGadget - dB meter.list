
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000226c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b58  08022788  08022788  00023788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080252e0  080252e0  00027420  2**0
                  CONTENTS
  4 .ARM          00000008  080252e0  080252e0  000262e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080252e8  080252e8  00027420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080252e8  080252e8  000262e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080252ec  080252ec  000262ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  080252f0  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e4  20000420  08025710  00027420  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003904  08025710  00027904  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033d4a  00000000  00000000  00027448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009356  00000000  00000000  0005b192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a70  00000000  00000000  000644e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f72  00000000  00000000  00066f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022871  00000000  00000000  00068eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041450  00000000  00000000  0008b73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0354  00000000  00000000  000ccb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016cedf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ace0  00000000  00000000  0016cf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00177c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00177cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017a259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802276c 	.word	0x0802276c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	0802276c 	.word	0x0802276c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080244f8 	.word	0x080244f8
 8000e0c:	08024538 	.word	0x08024538
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08024574 	.word	0x08024574
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fec2 	bl	800f3ec <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b ff19 	bl	800f4bc <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fecc 	bl	800f448 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b fe48 	bl	800f3ec <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fe77 	bl	800f464 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fe5b 	bl	800f448 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a fde2 	bl	800e380 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000994 	.word	0x20000994

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fcb6 	bl	8006148 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fd13 	bl	800620c <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a8 	.word	0x200009a8
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b4 	.word	0x200009b4
 8003864:	200009b8 	.word	0x200009b8

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009bc 	.word	0x200009bc
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009dc 	.word	0x200009dc
 80038d0:	200009e0 	.word	0x200009e0

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setHIDS>:
void setHIDS(float temp, float humid){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <setHIDS+0x20>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <setHIDS+0x24>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000564 	.word	0x20000564
 8003920:	20000568 	.word	0x20000568

08003924 <setVOC>:
void setVOC(uint16_t voc){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setVOC+0x1c>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	801a      	strh	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000574 	.word	0x20000574

08003944 <setMic>:
void setMic(float dB){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <setMic+0x18>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	20000578 	.word	0x20000578

08003960 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	1dbb      	adds	r3, r7, #6
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	1c0a      	adds	r2, r1, #0
 8003970:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003972:	1dbb      	adds	r3, r7, #6
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	0018      	movs	r0, r3
 8003978:	f7fd fe2a 	bl	80015d0 <__aeabi_i2f>
 800397c:	1c03      	adds	r3, r0, #0
 800397e:	490d      	ldr	r1, [pc, #52]	@ (80039b4 <setPMs+0x54>)
 8003980:	1c18      	adds	r0, r3, #0
 8003982:	f7fd f927 	bl	8000bd4 <__aeabi_fdiv>
 8003986:	1c03      	adds	r3, r0, #0
 8003988:	1c1a      	adds	r2, r3, #0
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <setPMs+0x58>)
 800398c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd fe1c 	bl	80015d0 <__aeabi_i2f>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <setPMs+0x54>)
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	f7fd f919 	bl	8000bd4 <__aeabi_fdiv>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c1a      	adds	r2, r3, #0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <setPMs+0x5c>)
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	41200000 	.word	0x41200000
 80039b8:	2000057c 	.word	0x2000057c
 80039bc:	20000580 	.word	0x20000580

080039c0 <SetConfigMode>:

void SetConfigMode(){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039c4:	4b02      	ldr	r3, [pc, #8]	@ (80039d0 <SetConfigMode+0x10>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000054b 	.word	0x2000054b

080039d4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039d8:	f00a fd1c 	bl	800e414 <HAL_GetUIDw0>
 80039dc:	0002      	movs	r2, r0
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <ESP_GetUID+0x28>)
 80039e0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039e2:	f00a fd21 	bl	800e428 <HAL_GetUIDw1>
 80039e6:	0002      	movs	r2, r0
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <ESP_GetUID+0x28>)
 80039ea:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ec:	f00a fd26 	bl	800e43c <HAL_GetUIDw2>
 80039f0:	0002      	movs	r2, r0
 80039f2:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <ESP_GetUID+0x28>)
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000550 	.word	0x20000550

08003a00 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <ESP_Init+0x2c>)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <ESP_Init+0x30>)
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a14:	f7ff ffde 	bl	80039d4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a18:	f7ff fef0 	bl	80037fc <checkEEprom>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	001a      	movs	r2, r3
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <ESP_Init+0x34>)
 8003a22:	701a      	strb	r2, [r3, #0]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000440 	.word	0x20000440
 8003a30:	20000028 	.word	0x20000028
 8003a34:	2000054e 	.word	0x2000054e

08003a38 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	000a      	movs	r2, r1
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <ESP_Send+0x54>)
 8003a4a:	4911      	ldr	r1, [pc, #68]	@ (8003a90 <ESP_Send+0x58>)
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	f00a f841 	bl	800dad4 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <ESP_Send+0x5c>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	250f      	movs	r5, #15
 8003a58:	197c      	adds	r4, r7, r5
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0019      	movs	r1, r3
 8003a62:	f012 ffb7 	bl	80169d4 <HAL_UART_Transmit_DMA>
 8003a66:	0003      	movs	r3, r0
 8003a68:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a6a:	197b      	adds	r3, r7, r5
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a72:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <ESP_Send+0x60>)
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <ESP_Send+0x64>)
 8003a76:	0019      	movs	r1, r3
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f00a f82b 	bl	800dad4 <CreateLine>
    return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <ESP_Send+0x4c>
  }
  return true;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08022788 	.word	0x08022788
 8003a90:	08022798 	.word	0x08022798
 8003a94:	20000440 	.word	0x20000440
 8003a98:	0802279c 	.word	0x0802279c
 8003a9c:	080227bc 	.word	0x080227bc

08003aa0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003aae:	4b55      	ldr	r3, [pc, #340]	@ (8003c04 <ESP_Receive+0x164>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003ab4:	260f      	movs	r6, #15
 8003ab6:	19bb      	adds	r3, r7, r6
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003abc:	4b52      	ldr	r3, [pc, #328]	@ (8003c08 <ESP_Receive+0x168>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	250e      	movs	r5, #14
 8003ac2:	197c      	adds	r4, r7, r5
 8003ac4:	1cbb      	adds	r3, r7, #2
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	0019      	movs	r1, r3
 8003acc:	f013 f812 	bl	8016af4 <HAL_UART_Receive_DMA>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003ad4:	002c      	movs	r4, r5
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d100      	bne.n	8003ae0 <ESP_Receive+0x40>
 8003ade:	e08c      	b.n	8003bfa <ESP_Receive+0x15a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ae0:	4b49      	ldr	r3, [pc, #292]	@ (8003c08 <ESP_Receive+0x168>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2284      	movs	r2, #132	@ 0x84
 8003ae6:	589b      	ldr	r3, [r3, r2]
 8003ae8:	4a48      	ldr	r2, [pc, #288]	@ (8003c0c <ESP_Receive+0x16c>)
 8003aea:	4949      	ldr	r1, [pc, #292]	@ (8003c10 <ESP_Receive+0x170>)
 8003aec:	2001      	movs	r0, #1
 8003aee:	f009 fff1 	bl	800dad4 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003af2:	193b      	adds	r3, r7, r4
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4013      	ands	r3, r2
 8003afa:	d008      	beq.n	8003b0e <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003afc:	4a45      	ldr	r2, [pc, #276]	@ (8003c14 <ESP_Receive+0x174>)
 8003afe:	4b44      	ldr	r3, [pc, #272]	@ (8003c10 <ESP_Receive+0x170>)
 8003b00:	0019      	movs	r1, r3
 8003b02:	2001      	movs	r0, #1
 8003b04:	f009 ffe6 	bl	800dad4 <CreateLine>
      reset = true;
 8003b08:	19bb      	adds	r3, r7, r6
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003b0e:	230e      	movs	r3, #14
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2202      	movs	r2, #2
 8003b16:	4013      	ands	r3, r2
 8003b18:	d005      	beq.n	8003b26 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c18 <ESP_Receive+0x178>)
 8003b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c10 <ESP_Receive+0x170>)
 8003b1e:	0019      	movs	r1, r3
 8003b20:	2001      	movs	r0, #1
 8003b22:	f009 ffd7 	bl	800dad4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b26:	230e      	movs	r3, #14
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d005      	beq.n	8003b3e <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003b32:	4a3a      	ldr	r2, [pc, #232]	@ (8003c1c <ESP_Receive+0x17c>)
 8003b34:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <ESP_Receive+0x170>)
 8003b36:	0019      	movs	r1, r3
 8003b38:	2001      	movs	r0, #1
 8003b3a:	f009 ffcb 	bl	800dad4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b3e:	230e      	movs	r3, #14
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2208      	movs	r2, #8
 8003b46:	4013      	ands	r3, r2
 8003b48:	d005      	beq.n	8003b56 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b4a:	4a35      	ldr	r2, [pc, #212]	@ (8003c20 <ESP_Receive+0x180>)
 8003b4c:	4b30      	ldr	r3, [pc, #192]	@ (8003c10 <ESP_Receive+0x170>)
 8003b4e:	0019      	movs	r1, r3
 8003b50:	2001      	movs	r0, #1
 8003b52:	f009 ffbf 	bl	800dad4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b56:	230e      	movs	r3, #14
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d005      	beq.n	8003b6e <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b62:	4a30      	ldr	r2, [pc, #192]	@ (8003c24 <ESP_Receive+0x184>)
 8003b64:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <ESP_Receive+0x170>)
 8003b66:	0019      	movs	r1, r3
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f009 ffb3 	bl	800dad4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b6e:	230e      	movs	r3, #14
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2220      	movs	r2, #32
 8003b76:	4013      	ands	r3, r2
 8003b78:	d005      	beq.n	8003b86 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8003c28 <ESP_Receive+0x188>)
 8003b7c:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <ESP_Receive+0x170>)
 8003b7e:	0019      	movs	r1, r3
 8003b80:	2001      	movs	r0, #1
 8003b82:	f009 ffa7 	bl	800dad4 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b86:	230e      	movs	r3, #14
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2240      	movs	r2, #64	@ 0x40
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d005      	beq.n	8003b9e <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b92:	4a26      	ldr	r2, [pc, #152]	@ (8003c2c <ESP_Receive+0x18c>)
 8003b94:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <ESP_Receive+0x170>)
 8003b96:	0019      	movs	r1, r3
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f009 ff9b 	bl	800dad4 <CreateLine>
    }
#endif
    if (reset) {
 8003b9e:	230f      	movs	r3, #15
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d023      	beq.n	8003bf0 <ESP_Receive+0x150>
    // Fire all LEDs to red independent of usertoggle or power status and reboot
      TIM2 -> CCR1 = 4000;
 8003ba8:	2380      	movs	r3, #128	@ 0x80
 8003baa:	05db      	lsls	r3, r3, #23
 8003bac:	22fa      	movs	r2, #250	@ 0xfa
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	05db      	lsls	r3, r3, #23
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 0;
 8003bba:	2380      	movs	r3, #128	@ 0x80
 8003bbc:	05db      	lsls	r3, r3, #23
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40
      TIM3 -> CCR1 = 4000;
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c30 <ESP_Receive+0x190>)
 8003bc4:	22fa      	movs	r2, #250	@ 0xfa
 8003bc6:	0112      	lsls	r2, r2, #4
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8003bca:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <ESP_Receive+0x190>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8003bd0:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <ESP_Receive+0x190>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 8003bd6:	4b17      	ldr	r3, [pc, #92]	@ (8003c34 <ESP_Receive+0x194>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2101      	movs	r1, #1
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f00b fe60 	bl	800f8a2 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003be2:	23fa      	movs	r3, #250	@ 0xfa
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	0018      	movs	r0, r3
 8003be8:	f00a fbd4 	bl	800e394 <HAL_Delay>
      HAL_NVIC_SystemReset();
 8003bec:	f00b f891 	bl	800ed12 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <ESP_Receive+0x164>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]
    return false;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <ESP_Receive+0x15c>
  }
  return true;
 8003bfa:	2301      	movs	r3, #1
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b005      	add	sp, #20
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c04:	20000444 	.word	0x20000444
 8003c08:	20000440 	.word	0x20000440
 8003c0c:	080227c0 	.word	0x080227c0
 8003c10:	080227bc 	.word	0x080227bc
 8003c14:	080227f0 	.word	0x080227f0
 8003c18:	08022814 	.word	0x08022814
 8003c1c:	08022838 	.word	0x08022838
 8003c20:	0802285c 	.word	0x0802285c
 8003c24:	08022880 	.word	0x08022880
 8003c28:	080228ac 	.word	0x080228ac
 8003c2c:	080228dc 	.word	0x080228dc
 8003c30:	40000400 	.word	0x40000400
 8003c34:	50000400 	.word	0x50000400

08003c38 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003c40:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_UART_ErrorCallback+0x34>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d10c      	bne.n	8003c64 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2284      	movs	r2, #132	@ 0x84
 8003c4e:	589b      	ldr	r3, [r3, r2]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d007      	beq.n	8003c64 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2284      	movs	r2, #132	@ 0x84
 8003c58:	589b      	ldr	r3, [r3, r2]
 8003c5a:	4a05      	ldr	r2, [pc, #20]	@ (8003c70 <HAL_UART_ErrorCallback+0x38>)
 8003c5c:	4905      	ldr	r1, [pc, #20]	@ (8003c74 <HAL_UART_ErrorCallback+0x3c>)
 8003c5e:	2003      	movs	r0, #3
 8003c60:	f009 ff38 	bl	800dad4 <CreateLine>
    }
  }
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000440 	.word	0x20000440
 8003c70:	0802290c 	.word	0x0802290c
 8003c74:	08022798 	.word	0x08022798

08003c78 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e010      	b.n	8003caa <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1898      	adds	r0, r3, r2
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <uint8ArrayToString+0x44>)
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	f01b fc82 	bl	801f5a8 <siprintf>
  for (int i = 0; i < 12; i++)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b0b      	cmp	r3, #11
 8003cae:	ddeb      	ble.n	8003c88 <uint8ArrayToString+0x10>
  }
}
 8003cb0:	46c0      	nop			@ (mov r8, r8)
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b004      	add	sp, #16
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	08022938 	.word	0x08022938

08003cc0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af04      	add	r7, sp, #16
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003ccc:	4be5      	ldr	r3, [pc, #916]	@ (8004064 <CreateMessage+0x3a4>)
 8003cce:	48e6      	ldr	r0, [pc, #920]	@ (8004068 <CreateMessage+0x3a8>)
 8003cd0:	220c      	movs	r2, #12
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	f7ff fd10 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003cd8:	4be4      	ldr	r3, [pc, #912]	@ (800406c <CreateMessage+0x3ac>)
 8003cda:	48e5      	ldr	r0, [pc, #916]	@ (8004070 <CreateMessage+0x3b0>)
 8003cdc:	220c      	movs	r2, #12
 8003cde:	0019      	movs	r1, r3
 8003ce0:	f7ff fd0a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003ce4:	4be3      	ldr	r3, [pc, #908]	@ (8004074 <CreateMessage+0x3b4>)
 8003ce6:	48e4      	ldr	r0, [pc, #912]	@ (8004078 <CreateMessage+0x3b8>)
 8003ce8:	220c      	movs	r2, #12
 8003cea:	0019      	movs	r1, r3
 8003cec:	f7ff fd04 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003cf0:	4be2      	ldr	r3, [pc, #904]	@ (800407c <CreateMessage+0x3bc>)
 8003cf2:	48e3      	ldr	r0, [pc, #908]	@ (8004080 <CreateMessage+0x3c0>)
 8003cf4:	220c      	movs	r2, #12
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	f7ff fcfe 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003cfc:	4be1      	ldr	r3, [pc, #900]	@ (8004084 <CreateMessage+0x3c4>)
 8003cfe:	48e2      	ldr	r0, [pc, #904]	@ (8004088 <CreateMessage+0x3c8>)
 8003d00:	220c      	movs	r2, #12
 8003d02:	0019      	movs	r1, r3
 8003d04:	f7ff fcf8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003d08:	4be0      	ldr	r3, [pc, #896]	@ (800408c <CreateMessage+0x3cc>)
 8003d0a:	48e1      	ldr	r0, [pc, #900]	@ (8004090 <CreateMessage+0x3d0>)
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	0019      	movs	r1, r3
 8003d10:	f7ff fcf2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003d14:	4bdf      	ldr	r3, [pc, #892]	@ (8004094 <CreateMessage+0x3d4>)
 8003d16:	48e0      	ldr	r0, [pc, #896]	@ (8004098 <CreateMessage+0x3d8>)
 8003d18:	220c      	movs	r2, #12
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	f7ff fcec 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003d20:	4bde      	ldr	r3, [pc, #888]	@ (800409c <CreateMessage+0x3dc>)
 8003d22:	48df      	ldr	r0, [pc, #892]	@ (80040a0 <CreateMessage+0x3e0>)
 8003d24:	220c      	movs	r2, #12
 8003d26:	0019      	movs	r1, r3
 8003d28:	f7ff fce6 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003d2c:	f7ff fd9c 	bl	8003868 <checkName>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d006      	beq.n	8003d42 <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003d34:	4bdb      	ldr	r3, [pc, #876]	@ (80040a4 <CreateMessage+0x3e4>)
 8003d36:	48dc      	ldr	r0, [pc, #880]	@ (80040a8 <CreateMessage+0x3e8>)
 8003d38:	221e      	movs	r2, #30
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	f7ff fcdc 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003d40:	e005      	b.n	8003d4e <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003d42:	4bd8      	ldr	r3, [pc, #864]	@ (80040a4 <CreateMessage+0x3e4>)
 8003d44:	4ad9      	ldr	r2, [pc, #868]	@ (80040ac <CreateMessage+0x3ec>)
 8003d46:	6811      	ldr	r1, [r2, #0]
 8003d48:	6019      	str	r1, [r3, #0]
 8003d4a:	7912      	ldrb	r2, [r2, #4]
 8003d4c:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003d4e:	f7ff fd41 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	00da      	lsls	r2, r3, #3
 8003d56:	4bd6      	ldr	r3, [pc, #856]	@ (80040b0 <CreateMessage+0x3f0>)
 8003d58:	2100      	movs	r1, #0
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f01b fd68 	bl	801f830 <memset>
  uint16_t index = 0;
 8003d60:	260e      	movs	r6, #14
 8003d62:	19bb      	adds	r3, r7, r6
 8003d64:	2200      	movs	r2, #0
 8003d66:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003d68:	19bb      	adds	r3, r7, r6
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	4bd0      	ldr	r3, [pc, #832]	@ (80040b0 <CreateMessage+0x3f0>)
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	4ad0      	ldr	r2, [pc, #832]	@ (80040b4 <CreateMessage+0x3f4>)
 8003d72:	0011      	movs	r1, r2
 8003d74:	0018      	movs	r0, r3
 8003d76:	f01b fc17 	bl	801f5a8 <siprintf>
  index = strlen(message);
 8003d7a:	4bcd      	ldr	r3, [pc, #820]	@ (80040b0 <CreateMessage+0x3f0>)
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fc f9f5 	bl	800016c <strlen>
 8003d82:	0002      	movs	r2, r0
 8003d84:	19bb      	adds	r3, r7, r6
 8003d86:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003d88:	4ab6      	ldr	r2, [pc, #728]	@ (8004064 <CreateMessage+0x3a4>)
 8003d8a:	4bcb      	ldr	r3, [pc, #812]	@ (80040b8 <CreateMessage+0x3f8>)
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff ff72 	bl	8003c78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003d94:	19bb      	adds	r3, r7, r6
 8003d96:	881a      	ldrh	r2, [r3, #0]
 8003d98:	4bc5      	ldr	r3, [pc, #788]	@ (80040b0 <CreateMessage+0x3f0>)
 8003d9a:	18d4      	adds	r4, r2, r3
 8003d9c:	4bc7      	ldr	r3, [pc, #796]	@ (80040bc <CreateMessage+0x3fc>)
 8003d9e:	689d      	ldr	r5, [r3, #8]
 8003da0:	4bc7      	ldr	r3, [pc, #796]	@ (80040c0 <CreateMessage+0x400>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	1c18      	adds	r0, r3, #0
 8003da6:	f7ff fb5d 	bl	8003464 <__aeabi_f2d>
 8003daa:	0002      	movs	r2, r0
 8003dac:	000b      	movs	r3, r1
 8003dae:	48bd      	ldr	r0, [pc, #756]	@ (80040a4 <CreateMessage+0x3e4>)
 8003db0:	49c4      	ldr	r1, [pc, #784]	@ (80040c4 <CreateMessage+0x404>)
 8003db2:	9202      	str	r2, [sp, #8]
 8003db4:	9303      	str	r3, [sp, #12]
 8003db6:	4bc0      	ldr	r3, [pc, #768]	@ (80040b8 <CreateMessage+0x3f8>)
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	0003      	movs	r3, r0
 8003dbc:	002a      	movs	r2, r5
 8003dbe:	0020      	movs	r0, r4
 8003dc0:	f01b fbf2 	bl	801f5a8 <siprintf>
  index = strlen(message);
 8003dc4:	4bba      	ldr	r3, [pc, #744]	@ (80040b0 <CreateMessage+0x3f0>)
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7fc f9d0 	bl	800016c <strlen>
 8003dcc:	0002      	movs	r2, r0
 8003dce:	19bb      	adds	r3, r7, r6
 8003dd0:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003dd2:	4aa6      	ldr	r2, [pc, #664]	@ (800406c <CreateMessage+0x3ac>)
 8003dd4:	4bb8      	ldr	r3, [pc, #736]	@ (80040b8 <CreateMessage+0x3f8>)
 8003dd6:	0011      	movs	r1, r2
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff ff4d 	bl	8003c78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003dde:	19bb      	adds	r3, r7, r6
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	4bb3      	ldr	r3, [pc, #716]	@ (80040b0 <CreateMessage+0x3f0>)
 8003de4:	18d4      	adds	r4, r2, r3
 8003de6:	4bb5      	ldr	r3, [pc, #724]	@ (80040bc <CreateMessage+0x3fc>)
 8003de8:	689d      	ldr	r5, [r3, #8]
 8003dea:	4bb7      	ldr	r3, [pc, #732]	@ (80040c8 <CreateMessage+0x408>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1c18      	adds	r0, r3, #0
 8003df0:	f7ff fb38 	bl	8003464 <__aeabi_f2d>
 8003df4:	0002      	movs	r2, r0
 8003df6:	000b      	movs	r3, r1
 8003df8:	48aa      	ldr	r0, [pc, #680]	@ (80040a4 <CreateMessage+0x3e4>)
 8003dfa:	49b4      	ldr	r1, [pc, #720]	@ (80040cc <CreateMessage+0x40c>)
 8003dfc:	9202      	str	r2, [sp, #8]
 8003dfe:	9303      	str	r3, [sp, #12]
 8003e00:	4bad      	ldr	r3, [pc, #692]	@ (80040b8 <CreateMessage+0x3f8>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	0003      	movs	r3, r0
 8003e06:	002a      	movs	r2, r5
 8003e08:	0020      	movs	r0, r4
 8003e0a:	f01b fbcd 	bl	801f5a8 <siprintf>
  index = strlen(message);
 8003e0e:	4ba8      	ldr	r3, [pc, #672]	@ (80040b0 <CreateMessage+0x3f0>)
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fc f9ab 	bl	800016c <strlen>
 8003e16:	0002      	movs	r2, r0
 8003e18:	19bb      	adds	r3, r7, r6
 8003e1a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003e1c:	4a95      	ldr	r2, [pc, #596]	@ (8004074 <CreateMessage+0x3b4>)
 8003e1e:	4ba6      	ldr	r3, [pc, #664]	@ (80040b8 <CreateMessage+0x3f8>)
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f7ff ff28 	bl	8003c78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003e28:	19bb      	adds	r3, r7, r6
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80040b0 <CreateMessage+0x3f0>)
 8003e2e:	18d4      	adds	r4, r2, r3
 8003e30:	4ba2      	ldr	r3, [pc, #648]	@ (80040bc <CreateMessage+0x3fc>)
 8003e32:	689d      	ldr	r5, [r3, #8]
 8003e34:	4ba6      	ldr	r3, [pc, #664]	@ (80040d0 <CreateMessage+0x410>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	1c18      	adds	r0, r3, #0
 8003e3a:	f7ff fb13 	bl	8003464 <__aeabi_f2d>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	000b      	movs	r3, r1
 8003e42:	4898      	ldr	r0, [pc, #608]	@ (80040a4 <CreateMessage+0x3e4>)
 8003e44:	49a3      	ldr	r1, [pc, #652]	@ (80040d4 <CreateMessage+0x414>)
 8003e46:	9202      	str	r2, [sp, #8]
 8003e48:	9303      	str	r3, [sp, #12]
 8003e4a:	4b9b      	ldr	r3, [pc, #620]	@ (80040b8 <CreateMessage+0x3f8>)
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	0003      	movs	r3, r0
 8003e50:	002a      	movs	r2, r5
 8003e52:	0020      	movs	r0, r4
 8003e54:	f01b fba8 	bl	801f5a8 <siprintf>
  index = strlen(message);
 8003e58:	4b95      	ldr	r3, [pc, #596]	@ (80040b0 <CreateMessage+0x3f0>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7fc f986 	bl	800016c <strlen>
 8003e60:	0002      	movs	r2, r0
 8003e62:	19bb      	adds	r3, r7, r6
 8003e64:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003e66:	4a85      	ldr	r2, [pc, #532]	@ (800407c <CreateMessage+0x3bc>)
 8003e68:	4b93      	ldr	r3, [pc, #588]	@ (80040b8 <CreateMessage+0x3f8>)
 8003e6a:	0011      	movs	r1, r2
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7ff ff03 	bl	8003c78 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003e72:	19bb      	adds	r3, r7, r6
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	4b8e      	ldr	r3, [pc, #568]	@ (80040b0 <CreateMessage+0x3f0>)
 8003e78:	18d0      	adds	r0, r2, r3
 8003e7a:	4b90      	ldr	r3, [pc, #576]	@ (80040bc <CreateMessage+0x3fc>)
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	4b96      	ldr	r3, [pc, #600]	@ (80040d8 <CreateMessage+0x418>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	4c88      	ldr	r4, [pc, #544]	@ (80040a4 <CreateMessage+0x3e4>)
 8003e84:	4995      	ldr	r1, [pc, #596]	@ (80040dc <CreateMessage+0x41c>)
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	4b8b      	ldr	r3, [pc, #556]	@ (80040b8 <CreateMessage+0x3f8>)
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	0023      	movs	r3, r4
 8003e8e:	f01b fb8b 	bl	801f5a8 <siprintf>
  index = strlen(message);
 8003e92:	4b87      	ldr	r3, [pc, #540]	@ (80040b0 <CreateMessage+0x3f0>)
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7fc f969 	bl	800016c <strlen>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	19bb      	adds	r3, r7, r6
 8003e9e:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	4053      	eors	r3, r2
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d100      	bne.n	8003eb0 <CreateMessage+0x1f0>
 8003eae:	e094      	b.n	8003fda <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003eb0:	4a74      	ldr	r2, [pc, #464]	@ (8004084 <CreateMessage+0x3c4>)
 8003eb2:	4b81      	ldr	r3, [pc, #516]	@ (80040b8 <CreateMessage+0x3f8>)
 8003eb4:	0011      	movs	r1, r2
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff fede 	bl	8003c78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003ebc:	19bb      	adds	r3, r7, r6
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80040b0 <CreateMessage+0x3f0>)
 8003ec2:	18d4      	adds	r4, r2, r3
 8003ec4:	4b7d      	ldr	r3, [pc, #500]	@ (80040bc <CreateMessage+0x3fc>)
 8003ec6:	689d      	ldr	r5, [r3, #8]
 8003ec8:	4b85      	ldr	r3, [pc, #532]	@ (80040e0 <CreateMessage+0x420>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1c18      	adds	r0, r3, #0
 8003ece:	f7ff fac9 	bl	8003464 <__aeabi_f2d>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	000b      	movs	r3, r1
 8003ed6:	4873      	ldr	r0, [pc, #460]	@ (80040a4 <CreateMessage+0x3e4>)
 8003ed8:	4982      	ldr	r1, [pc, #520]	@ (80040e4 <CreateMessage+0x424>)
 8003eda:	9202      	str	r2, [sp, #8]
 8003edc:	9303      	str	r3, [sp, #12]
 8003ede:	4b76      	ldr	r3, [pc, #472]	@ (80040b8 <CreateMessage+0x3f8>)
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	002a      	movs	r2, r5
 8003ee6:	0020      	movs	r0, r4
 8003ee8:	f01b fb5e 	bl	801f5a8 <siprintf>
    index = strlen(message);
 8003eec:	4b70      	ldr	r3, [pc, #448]	@ (80040b0 <CreateMessage+0x3f0>)
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7fc f93c 	bl	800016c <strlen>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	19bb      	adds	r3, r7, r6
 8003ef8:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003efa:	4a64      	ldr	r2, [pc, #400]	@ (800408c <CreateMessage+0x3cc>)
 8003efc:	4b6e      	ldr	r3, [pc, #440]	@ (80040b8 <CreateMessage+0x3f8>)
 8003efe:	0011      	movs	r1, r2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff feb9 	bl	8003c78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003f06:	19bb      	adds	r3, r7, r6
 8003f08:	881a      	ldrh	r2, [r3, #0]
 8003f0a:	4b69      	ldr	r3, [pc, #420]	@ (80040b0 <CreateMessage+0x3f0>)
 8003f0c:	18d4      	adds	r4, r2, r3
 8003f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80040bc <CreateMessage+0x3fc>)
 8003f10:	689d      	ldr	r5, [r3, #8]
 8003f12:	4b75      	ldr	r3, [pc, #468]	@ (80040e8 <CreateMessage+0x428>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1c18      	adds	r0, r3, #0
 8003f18:	f7ff faa4 	bl	8003464 <__aeabi_f2d>
 8003f1c:	0002      	movs	r2, r0
 8003f1e:	000b      	movs	r3, r1
 8003f20:	4860      	ldr	r0, [pc, #384]	@ (80040a4 <CreateMessage+0x3e4>)
 8003f22:	4972      	ldr	r1, [pc, #456]	@ (80040ec <CreateMessage+0x42c>)
 8003f24:	9202      	str	r2, [sp, #8]
 8003f26:	9303      	str	r3, [sp, #12]
 8003f28:	4b63      	ldr	r3, [pc, #396]	@ (80040b8 <CreateMessage+0x3f8>)
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	002a      	movs	r2, r5
 8003f30:	0020      	movs	r0, r4
 8003f32:	f01b fb39 	bl	801f5a8 <siprintf>
    index = strlen(message);
 8003f36:	4b5e      	ldr	r3, [pc, #376]	@ (80040b0 <CreateMessage+0x3f0>)
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fc f917 	bl	800016c <strlen>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	19bb      	adds	r3, r7, r6
 8003f42:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003f44:	4a53      	ldr	r2, [pc, #332]	@ (8004094 <CreateMessage+0x3d4>)
 8003f46:	4b5c      	ldr	r3, [pc, #368]	@ (80040b8 <CreateMessage+0x3f8>)
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff fe94 	bl	8003c78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003f50:	19bb      	adds	r3, r7, r6
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	4b56      	ldr	r3, [pc, #344]	@ (80040b0 <CreateMessage+0x3f0>)
 8003f56:	18d4      	adds	r4, r2, r3
 8003f58:	4b58      	ldr	r3, [pc, #352]	@ (80040bc <CreateMessage+0x3fc>)
 8003f5a:	689d      	ldr	r5, [r3, #8]
 8003f5c:	4b64      	ldr	r3, [pc, #400]	@ (80040f0 <CreateMessage+0x430>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1c18      	adds	r0, r3, #0
 8003f62:	f7ff fa7f 	bl	8003464 <__aeabi_f2d>
 8003f66:	0002      	movs	r2, r0
 8003f68:	000b      	movs	r3, r1
 8003f6a:	484e      	ldr	r0, [pc, #312]	@ (80040a4 <CreateMessage+0x3e4>)
 8003f6c:	4961      	ldr	r1, [pc, #388]	@ (80040f4 <CreateMessage+0x434>)
 8003f6e:	9202      	str	r2, [sp, #8]
 8003f70:	9303      	str	r3, [sp, #12]
 8003f72:	4b51      	ldr	r3, [pc, #324]	@ (80040b8 <CreateMessage+0x3f8>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	0003      	movs	r3, r0
 8003f78:	002a      	movs	r2, r5
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	f01b fb14 	bl	801f5a8 <siprintf>
    index = strlen(message);
 8003f80:	4b4b      	ldr	r3, [pc, #300]	@ (80040b0 <CreateMessage+0x3f0>)
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7fc f8f2 	bl	800016c <strlen>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	19bb      	adds	r3, r7, r6
 8003f8c:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003f8e:	4a43      	ldr	r2, [pc, #268]	@ (800409c <CreateMessage+0x3dc>)
 8003f90:	4b49      	ldr	r3, [pc, #292]	@ (80040b8 <CreateMessage+0x3f8>)
 8003f92:	0011      	movs	r1, r2
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff fe6f 	bl	8003c78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003f9a:	19bb      	adds	r3, r7, r6
 8003f9c:	881a      	ldrh	r2, [r3, #0]
 8003f9e:	4b44      	ldr	r3, [pc, #272]	@ (80040b0 <CreateMessage+0x3f0>)
 8003fa0:	18d4      	adds	r4, r2, r3
 8003fa2:	4b46      	ldr	r3, [pc, #280]	@ (80040bc <CreateMessage+0x3fc>)
 8003fa4:	689d      	ldr	r5, [r3, #8]
 8003fa6:	4b54      	ldr	r3, [pc, #336]	@ (80040f8 <CreateMessage+0x438>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c18      	adds	r0, r3, #0
 8003fac:	f7ff fa5a 	bl	8003464 <__aeabi_f2d>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	000b      	movs	r3, r1
 8003fb4:	483b      	ldr	r0, [pc, #236]	@ (80040a4 <CreateMessage+0x3e4>)
 8003fb6:	4951      	ldr	r1, [pc, #324]	@ (80040fc <CreateMessage+0x43c>)
 8003fb8:	9202      	str	r2, [sp, #8]
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80040b8 <CreateMessage+0x3f8>)
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	002a      	movs	r2, r5
 8003fc4:	0020      	movs	r0, r4
 8003fc6:	f01b faef 	bl	801f5a8 <siprintf>
    index = strlen(message);
 8003fca:	4b39      	ldr	r3, [pc, #228]	@ (80040b0 <CreateMessage+0x3f0>)
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7fc f8cd 	bl	800016c <strlen>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	19bb      	adds	r3, r7, r6
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e025      	b.n	8004026 <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003fda:	4a2a      	ldr	r2, [pc, #168]	@ (8004084 <CreateMessage+0x3c4>)
 8003fdc:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <CreateMessage+0x3f8>)
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7ff fe49 	bl	8003c78 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003fe6:	260e      	movs	r6, #14
 8003fe8:	19bb      	adds	r3, r7, r6
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	4b30      	ldr	r3, [pc, #192]	@ (80040b0 <CreateMessage+0x3f0>)
 8003fee:	18d4      	adds	r4, r2, r3
 8003ff0:	4b32      	ldr	r3, [pc, #200]	@ (80040bc <CreateMessage+0x3fc>)
 8003ff2:	689d      	ldr	r5, [r3, #8]
 8003ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80040e0 <CreateMessage+0x420>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1c18      	adds	r0, r3, #0
 8003ffa:	f7ff fa33 	bl	8003464 <__aeabi_f2d>
 8003ffe:	0002      	movs	r2, r0
 8004000:	000b      	movs	r3, r1
 8004002:	4828      	ldr	r0, [pc, #160]	@ (80040a4 <CreateMessage+0x3e4>)
 8004004:	493e      	ldr	r1, [pc, #248]	@ (8004100 <CreateMessage+0x440>)
 8004006:	9202      	str	r2, [sp, #8]
 8004008:	9303      	str	r3, [sp, #12]
 800400a:	4b2b      	ldr	r3, [pc, #172]	@ (80040b8 <CreateMessage+0x3f8>)
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	0003      	movs	r3, r0
 8004010:	002a      	movs	r2, r5
 8004012:	0020      	movs	r0, r4
 8004014:	f01b fac8 	bl	801f5a8 <siprintf>
    index = strlen(message);
 8004018:	4b25      	ldr	r3, [pc, #148]	@ (80040b0 <CreateMessage+0x3f0>)
 800401a:	0018      	movs	r0, r3
 800401c:	f7fc f8a6 	bl	800016c <strlen>
 8004020:	0002      	movs	r2, r0
 8004022:	19bb      	adds	r3, r7, r6
 8004024:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8004026:	240e      	movs	r4, #14
 8004028:	193b      	adds	r3, r7, r4
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	4a35      	ldr	r2, [pc, #212]	@ (8004104 <CreateMessage+0x444>)
 800402e:	4936      	ldr	r1, [pc, #216]	@ (8004108 <CreateMessage+0x448>)
 8004030:	2003      	movs	r0, #3
 8004032:	f009 fd4f 	bl	800dad4 <CreateLine>
  index = sprintf(&message[index], "]");
 8004036:	193b      	adds	r3, r7, r4
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <CreateMessage+0x3f0>)
 800403c:	18d3      	adds	r3, r2, r3
 800403e:	4a33      	ldr	r2, [pc, #204]	@ (800410c <CreateMessage+0x44c>)
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f01b fab0 	bl	801f5a8 <siprintf>
 8004048:	0002      	movs	r2, r0
 800404a:	193b      	adds	r3, r7, r4
 800404c:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 800404e:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <CreateMessage+0x3f0>)
 8004050:	0018      	movs	r0, r3
 8004052:	f7fc f88b 	bl	800016c <strlen>
 8004056:	0003      	movs	r3, r0
 8004058:	b29b      	uxth	r3, r3
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b005      	add	sp, #20
 8004060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	200009e4 	.word	0x200009e4
 8004068:	0808000c 	.word	0x0808000c
 800406c:	200009f0 	.word	0x200009f0
 8004070:	08080018 	.word	0x08080018
 8004074:	200009fc 	.word	0x200009fc
 8004078:	08080048 	.word	0x08080048
 800407c:	20000a08 	.word	0x20000a08
 8004080:	08080030 	.word	0x08080030
 8004084:	20000a14 	.word	0x20000a14
 8004088:	0808006c 	.word	0x0808006c
 800408c:	20000a20 	.word	0x20000a20
 8004090:	08080078 	.word	0x08080078
 8004094:	20000a2c 	.word	0x20000a2c
 8004098:	08080054 	.word	0x08080054
 800409c:	20000a38 	.word	0x20000a38
 80040a0:	08080060 	.word	0x08080060
 80040a4:	20000a44 	.word	0x20000a44
 80040a8:	08080090 	.word	0x08080090
 80040ac:	080245d4 	.word	0x080245d4
 80040b0:	20000584 	.word	0x20000584
 80040b4:	08022940 	.word	0x08022940
 80040b8:	20000a64 	.word	0x20000a64
 80040bc:	20000550 	.word	0x20000550
 80040c0:	20000564 	.word	0x20000564
 80040c4:	08022944 	.word	0x08022944
 80040c8:	20000568 	.word	0x20000568
 80040cc:	08022998 	.word	0x08022998
 80040d0:	20000578 	.word	0x20000578
 80040d4:	080229f0 	.word	0x080229f0
 80040d8:	20000574 	.word	0x20000574
 80040dc:	08022a4c 	.word	0x08022a4c
 80040e0:	2000056c 	.word	0x2000056c
 80040e4:	08022aa0 	.word	0x08022aa0
 80040e8:	20000570 	.word	0x20000570
 80040ec:	08022b00 	.word	0x08022b00
 80040f0:	2000057c 	.word	0x2000057c
 80040f4:	08022b60 	.word	0x08022b60
 80040f8:	20000580 	.word	0x20000580
 80040fc:	08022bbc 	.word	0x08022bbc
 8004100:	08022c14 	.word	0x08022c14
 8004104:	08022c6c 	.word	0x08022c6c
 8004108:	08022798 	.word	0x08022798
 800410c:	08022c84 	.word	0x08022c84

08004110 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8004114:	2064      	movs	r0, #100	@ 0x64
 8004116:	f00a f93d 	bl	800e394 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800411a:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <StartProg+0x60>)
 800411c:	2200      	movs	r2, #0
 800411e:	2101      	movs	r1, #1
 8004120:	0018      	movs	r0, r3
 8004122:	f00b fbbe 	bl	800f8a2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004126:	2064      	movs	r0, #100	@ 0x64
 8004128:	f00a f934 	bl	800e394 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800412c:	4b10      	ldr	r3, [pc, #64]	@ (8004170 <StartProg+0x60>)
 800412e:	2200      	movs	r2, #0
 8004130:	2102      	movs	r1, #2
 8004132:	0018      	movs	r0, r3
 8004134:	f00b fbb5 	bl	800f8a2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004138:	23fa      	movs	r3, #250	@ 0xfa
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	0018      	movs	r0, r3
 800413e:	f00a f929 	bl	800e394 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004142:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <StartProg+0x60>)
 8004144:	2201      	movs	r2, #1
 8004146:	2101      	movs	r1, #1
 8004148:	0018      	movs	r0, r3
 800414a:	f00b fbaa 	bl	800f8a2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800414e:	23fa      	movs	r3, #250	@ 0xfa
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	0018      	movs	r0, r3
 8004154:	f00a f91e 	bl	800e394 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <StartProg+0x60>)
 800415a:	2201      	movs	r2, #1
 800415c:	2102      	movs	r1, #2
 800415e:	0018      	movs	r0, r3
 8004160:	f00b fb9f 	bl	800f8a2 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004164:	2028      	movs	r0, #40	@ 0x28
 8004166:	f00a f915 	bl	800e394 <HAL_Delay>
}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	50001c00 	.word	0x50001c00

08004174 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	b0d9      	sub	sp, #356	@ 0x164
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	0008      	movs	r0, r1
 800417e:	0011      	movs	r1, r2
 8004180:	4ba4      	ldr	r3, [pc, #656]	@ (8004414 <ParseBuffer+0x2a0>)
 8004182:	24b0      	movs	r4, #176	@ 0xb0
 8004184:	0064      	lsls	r4, r4, #1
 8004186:	191b      	adds	r3, r3, r4
 8004188:	19db      	adds	r3, r3, r7
 800418a:	1c02      	adds	r2, r0, #0
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	4ba2      	ldr	r3, [pc, #648]	@ (8004418 <ParseBuffer+0x2a4>)
 8004190:	191b      	adds	r3, r3, r4
 8004192:	19db      	adds	r3, r3, r7
 8004194:	1c0a      	adds	r2, r1, #0
 8004196:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	005a      	lsls	r2, r3, #1
 800419c:	2348      	movs	r3, #72	@ 0x48
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2100      	movs	r1, #0
 80041a2:	0018      	movs	r0, r3
 80041a4:	f01b fb44 	bl	801f830 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80041a8:	2360      	movs	r3, #96	@ 0x60
 80041aa:	33ff      	adds	r3, #255	@ 0xff
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2203      	movs	r2, #3
 80041b0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80041b2:	23ae      	movs	r3, #174	@ 0xae
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	2200      	movs	r2, #0
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	e013      	b.n	80041e6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80041be:	20ae      	movs	r0, #174	@ 0xae
 80041c0:	0040      	lsls	r0, r0, #1
 80041c2:	183b      	adds	r3, r7, r0
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	18d2      	adds	r2, r2, r3
 80041ca:	183b      	adds	r3, r7, r0
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	7811      	ldrb	r1, [r2, #0]
 80041d0:	4a92      	ldr	r2, [pc, #584]	@ (800441c <ParseBuffer+0x2a8>)
 80041d2:	24b0      	movs	r4, #176	@ 0xb0
 80041d4:	0064      	lsls	r4, r4, #1
 80041d6:	1912      	adds	r2, r2, r4
 80041d8:	19d2      	adds	r2, r2, r7
 80041da:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	183b      	adds	r3, r7, r0
 80041e2:	3201      	adds	r2, #1
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	23ae      	movs	r3, #174	@ 0xae
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	18fa      	adds	r2, r7, r3
 80041ec:	4b89      	ldr	r3, [pc, #548]	@ (8004414 <ParseBuffer+0x2a0>)
 80041ee:	21b0      	movs	r1, #176	@ 0xb0
 80041f0:	0049      	lsls	r1, r1, #1
 80041f2:	185b      	adds	r3, r3, r1
 80041f4:	19db      	adds	r3, r3, r7
 80041f6:	8812      	ldrh	r2, [r2, #0]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d3df      	bcc.n	80041be <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80041fe:	4b85      	ldr	r3, [pc, #532]	@ (8004414 <ParseBuffer+0x2a0>)
 8004200:	185b      	adds	r3, r3, r1
 8004202:	19db      	adds	r3, r3, r7
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	4a85      	ldr	r2, [pc, #532]	@ (800441c <ParseBuffer+0x2a8>)
 8004208:	1852      	adds	r2, r2, r1
 800420a:	19d2      	adds	r2, r2, r7
 800420c:	2100      	movs	r1, #0
 800420e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() > VERBOSE_ALL) {
 8004210:	f009 fcda 	bl	800dbc8 <GetVerboseLevel>
 8004214:	0003      	movs	r3, r0
 8004216:	2b03      	cmp	r3, #3
 8004218:	d906      	bls.n	8004228 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 800421a:	2348      	movs	r3, #72	@ 0x48
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	4a80      	ldr	r2, [pc, #512]	@ (8004420 <ParseBuffer+0x2ac>)
 8004220:	4980      	ldr	r1, [pc, #512]	@ (8004424 <ParseBuffer+0x2b0>)
 8004222:	2003      	movs	r0, #3
 8004224:	f009 fc56 	bl	800dad4 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	26ac      	movs	r6, #172	@ 0xac
 800422c:	0076      	lsls	r6, r6, #1
 800422e:	19ba      	adds	r2, r7, r6
 8004230:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004232:	4b7d      	ldr	r3, [pc, #500]	@ (8004428 <ParseBuffer+0x2b4>)
 8004234:	25b0      	movs	r5, #176	@ 0xb0
 8004236:	006d      	lsls	r5, r5, #1
 8004238:	195b      	adds	r3, r3, r5
 800423a:	19db      	adds	r3, r3, r7
 800423c:	4a7b      	ldr	r2, [pc, #492]	@ (800442c <ParseBuffer+0x2b8>)
 800423e:	8811      	ldrh	r1, [r2, #0]
 8004240:	8019      	strh	r1, [r3, #0]
 8004242:	7892      	ldrb	r2, [r2, #2]
 8004244:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004246:	4b7a      	ldr	r3, [pc, #488]	@ (8004430 <ParseBuffer+0x2bc>)
 8004248:	195b      	adds	r3, r3, r5
 800424a:	19db      	adds	r3, r3, r7
 800424c:	4a79      	ldr	r2, [pc, #484]	@ (8004434 <ParseBuffer+0x2c0>)
 800424e:	6811      	ldr	r1, [r2, #0]
 8004250:	6019      	str	r1, [r3, #0]
 8004252:	8892      	ldrh	r2, [r2, #4]
 8004254:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004256:	4b78      	ldr	r3, [pc, #480]	@ (8004438 <ParseBuffer+0x2c4>)
 8004258:	195b      	adds	r3, r3, r5
 800425a:	19db      	adds	r3, r3, r7
 800425c:	4a77      	ldr	r2, [pc, #476]	@ (800443c <ParseBuffer+0x2c8>)
 800425e:	6811      	ldr	r1, [r2, #0]
 8004260:	6019      	str	r1, [r3, #0]
 8004262:	7912      	ldrb	r2, [r2, #4]
 8004264:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004266:	4b76      	ldr	r3, [pc, #472]	@ (8004440 <ParseBuffer+0x2cc>)
 8004268:	195b      	adds	r3, r3, r5
 800426a:	19db      	adds	r3, r3, r7
 800426c:	4a75      	ldr	r2, [pc, #468]	@ (8004444 <ParseBuffer+0x2d0>)
 800426e:	6811      	ldr	r1, [r2, #0]
 8004270:	6019      	str	r1, [r3, #0]
 8004272:	8892      	ldrh	r2, [r2, #4]
 8004274:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004276:	4b74      	ldr	r3, [pc, #464]	@ (8004448 <ParseBuffer+0x2d4>)
 8004278:	195b      	adds	r3, r3, r5
 800427a:	19db      	adds	r3, r3, r7
 800427c:	223e      	movs	r2, #62	@ 0x3e
 800427e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004280:	4b72      	ldr	r3, [pc, #456]	@ (800444c <ParseBuffer+0x2d8>)
 8004282:	195b      	adds	r3, r3, r5
 8004284:	19db      	adds	r3, r3, r7
 8004286:	4a72      	ldr	r2, [pc, #456]	@ (8004450 <ParseBuffer+0x2dc>)
 8004288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800428a:	c313      	stmia	r3!, {r0, r1, r4}
 800428c:	8811      	ldrh	r1, [r2, #0]
 800428e:	8019      	strh	r1, [r3, #0]
 8004290:	7892      	ldrb	r2, [r2, #2]
 8004292:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004294:	4b6f      	ldr	r3, [pc, #444]	@ (8004454 <ParseBuffer+0x2e0>)
 8004296:	195b      	adds	r3, r3, r5
 8004298:	19db      	adds	r3, r3, r7
 800429a:	4a6f      	ldr	r2, [pc, #444]	@ (8004458 <ParseBuffer+0x2e4>)
 800429c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800429e:	c313      	stmia	r3!, {r0, r1, r4}
 80042a0:	8812      	ldrh	r2, [r2, #0]
 80042a2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80042a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004418 <ParseBuffer+0x2a4>)
 80042a6:	195b      	adds	r3, r3, r5
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80042b0:	2344      	movs	r3, #68	@ 0x44
 80042b2:	18fa      	adds	r2, r7, r3
 80042b4:	2348      	movs	r3, #72	@ 0x48
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	0011      	movs	r1, r2
 80042ba:	0018      	movs	r0, r3
 80042bc:	f01b faf3 	bl	801f8a6 <strstr>
 80042c0:	0003      	movs	r3, r0
 80042c2:	19ba      	adds	r2, r7, r6
 80042c4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80042c6:	4b54      	ldr	r3, [pc, #336]	@ (8004418 <ParseBuffer+0x2a4>)
 80042c8:	22b0      	movs	r2, #176	@ 0xb0
 80042ca:	0052      	lsls	r2, r2, #1
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10c      	bne.n	80042f0 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80042d6:	232c      	movs	r3, #44	@ 0x2c
 80042d8:	18fa      	adds	r2, r7, r3
 80042da:	2348      	movs	r3, #72	@ 0x48
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	0011      	movs	r1, r2
 80042e0:	0018      	movs	r0, r3
 80042e2:	f01b fae0 	bl	801f8a6 <strstr>
 80042e6:	0003      	movs	r3, r0
 80042e8:	22ac      	movs	r2, #172	@ 0xac
 80042ea:	0052      	lsls	r2, r2, #1
 80042ec:	18ba      	adds	r2, r7, r2
 80042ee:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80042f0:	4b49      	ldr	r3, [pc, #292]	@ (8004418 <ParseBuffer+0x2a4>)
 80042f2:	22b0      	movs	r2, #176	@ 0xb0
 80042f4:	0052      	lsls	r2, r2, #1
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	19db      	adds	r3, r3, r7
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d10c      	bne.n	800431a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004300:	2328      	movs	r3, #40	@ 0x28
 8004302:	18fa      	adds	r2, r7, r3
 8004304:	2348      	movs	r3, #72	@ 0x48
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f01b facb 	bl	801f8a6 <strstr>
 8004310:	0003      	movs	r3, r0
 8004312:	22ac      	movs	r2, #172	@ 0xac
 8004314:	0052      	lsls	r2, r2, #1
 8004316:	18ba      	adds	r2, r7, r2
 8004318:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800431a:	4b3f      	ldr	r3, [pc, #252]	@ (8004418 <ParseBuffer+0x2a4>)
 800431c:	22b0      	movs	r2, #176	@ 0xb0
 800431e:	0052      	lsls	r2, r2, #1
 8004320:	189b      	adds	r3, r3, r2
 8004322:	19db      	adds	r3, r3, r7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10c      	bne.n	8004344 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800432a:	2308      	movs	r3, #8
 800432c:	18fa      	adds	r2, r7, r3
 800432e:	2348      	movs	r3, #72	@ 0x48
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	0011      	movs	r1, r2
 8004334:	0018      	movs	r0, r3
 8004336:	f01b fab6 	bl	801f8a6 <strstr>
 800433a:	0003      	movs	r3, r0
 800433c:	22ac      	movs	r2, #172	@ 0xac
 800433e:	0052      	lsls	r2, r2, #1
 8004340:	18ba      	adds	r2, r7, r2
 8004342:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004344:	233c      	movs	r3, #60	@ 0x3c
 8004346:	18fa      	adds	r2, r7, r3
 8004348:	2448      	movs	r4, #72	@ 0x48
 800434a:	193b      	adds	r3, r7, r4
 800434c:	0011      	movs	r1, r2
 800434e:	0018      	movs	r0, r3
 8004350:	f01b faa9 	bl	801f8a6 <strstr>
 8004354:	0003      	movs	r3, r0
 8004356:	22aa      	movs	r2, #170	@ 0xaa
 8004358:	0052      	lsls	r2, r2, #1
 800435a:	18ba      	adds	r2, r7, r2
 800435c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800435e:	2318      	movs	r3, #24
 8004360:	18fa      	adds	r2, r7, r3
 8004362:	193b      	adds	r3, r7, r4
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f01b fa9d 	bl	801f8a6 <strstr>
 800436c:	0003      	movs	r3, r0
 800436e:	22a8      	movs	r2, #168	@ 0xa8
 8004370:	0052      	lsls	r2, r2, #1
 8004372:	18ba      	adds	r2, r7, r2
 8004374:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004376:	4a39      	ldr	r2, [pc, #228]	@ (800445c <ParseBuffer+0x2e8>)
 8004378:	193b      	adds	r3, r7, r4
 800437a:	0011      	movs	r1, r2
 800437c:	0018      	movs	r0, r3
 800437e:	f01b fa92 	bl	801f8a6 <strstr>
 8004382:	0003      	movs	r3, r0
 8004384:	22a6      	movs	r2, #166	@ 0xa6
 8004386:	0052      	lsls	r2, r2, #1
 8004388:	18ba      	adds	r2, r7, r2
 800438a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800438c:	2334      	movs	r3, #52	@ 0x34
 800438e:	18fa      	adds	r2, r7, r3
 8004390:	193b      	adds	r3, r7, r4
 8004392:	0011      	movs	r1, r2
 8004394:	0018      	movs	r0, r3
 8004396:	f01b fa86 	bl	801f8a6 <strstr>
 800439a:	0003      	movs	r3, r0
 800439c:	22a4      	movs	r2, #164	@ 0xa4
 800439e:	0052      	lsls	r2, r2, #1
 80043a0:	18ba      	adds	r2, r7, r2
 80043a2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80043a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <ParseBuffer+0x2a0>)
 80043a6:	21b0      	movs	r1, #176	@ 0xb0
 80043a8:	0049      	lsls	r1, r1, #1
 80043aa:	185b      	adds	r3, r3, r1
 80043ac:	19db      	adds	r3, r3, r7
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d800      	bhi.n	80043b6 <ParseBuffer+0x242>
 80043b4:	e0c1      	b.n	800453a <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80043b6:	22ac      	movs	r2, #172	@ 0xac
 80043b8:	0052      	lsls	r2, r2, #1
 80043ba:	18bb      	adds	r3, r7, r2
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d054      	beq.n	800446c <ParseBuffer+0x2f8>
 80043c2:	18bb      	adds	r3, r7, r2
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80043ca:	d14f      	bne.n	800446c <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80043cc:	2360      	movs	r3, #96	@ 0x60
 80043ce:	33ff      	adds	r3, #255	@ 0xff
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80043d6:	4b22      	ldr	r3, [pc, #136]	@ (8004460 <ParseBuffer+0x2ec>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b12      	cmp	r3, #18
 80043dc:	d146      	bne.n	800446c <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <ParseBuffer+0x2a0>)
 80043e0:	185b      	adds	r3, r3, r1
 80043e2:	19db      	adds	r3, r3, r7
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80043e8:	d10b      	bne.n	8004402 <ParseBuffer+0x28e>
 80043ea:	4b0c      	ldr	r3, [pc, #48]	@ (800441c <ParseBuffer+0x2a8>)
 80043ec:	185b      	adds	r3, r3, r1
 80043ee:	19db      	adds	r3, r3, r7
 80043f0:	2221      	movs	r2, #33	@ 0x21
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	2b32      	cmp	r3, #50	@ 0x32
 80043f6:	d104      	bne.n	8004402 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80043f8:	193b      	adds	r3, r7, r4
 80043fa:	0018      	movs	r0, r3
 80043fc:	f002 f8d6 	bl	80065ac <ParseTime>
 8004400:	e034      	b.n	800446c <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 8004402:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <ParseBuffer+0x2f0>)
 8004404:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <ParseBuffer+0x2f4>)
 8004406:	0019      	movs	r1, r3
 8004408:	2001      	movs	r0, #1
 800440a:	f009 fb63 	bl	800dad4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800440e:	2306      	movs	r3, #6
 8004410:	e097      	b.n	8004542 <ParseBuffer+0x3ce>
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	fffffea2 	.word	0xfffffea2
 8004418:	fffffea1 	.word	0xfffffea1
 800441c:	fffffee8 	.word	0xfffffee8
 8004420:	08022c88 	.word	0x08022c88
 8004424:	08022798 	.word	0x08022798
 8004428:	fffffee4 	.word	0xfffffee4
 800442c:	08022cb4 	.word	0x08022cb4
 8004430:	fffffedc 	.word	0xfffffedc
 8004434:	08022cb8 	.word	0x08022cb8
 8004438:	fffffed4 	.word	0xfffffed4
 800443c:	08022cc0 	.word	0x08022cc0
 8004440:	fffffecc 	.word	0xfffffecc
 8004444:	08022cc8 	.word	0x08022cc8
 8004448:	fffffec8 	.word	0xfffffec8
 800444c:	fffffeb8 	.word	0xfffffeb8
 8004450:	08022cd0 	.word	0x08022cd0
 8004454:	fffffea8 	.word	0xfffffea8
 8004458:	08022ce0 	.word	0x08022ce0
 800445c:	080245b4 	.word	0x080245b4
 8004460:	200009a2 	.word	0x200009a2
 8004464:	08022ca0 	.word	0x08022ca0
 8004468:	080227bc 	.word	0x080227bc
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800446c:	22ac      	movs	r2, #172	@ 0xac
 800446e:	0052      	lsls	r2, r2, #1
 8004470:	18bb      	adds	r3, r7, r2
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <ParseBuffer+0x318>
 8004478:	18bb      	adds	r3, r7, r2
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b72      	cmp	r3, #114	@ 0x72
 8004480:	d104      	bne.n	800448c <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 8004482:	2360      	movs	r3, #96	@ 0x60
 8004484:	33ff      	adds	r3, #255	@ 0xff
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2202      	movs	r2, #2
 800448a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800448c:	22ac      	movs	r2, #172	@ 0xac
 800448e:	0052      	lsls	r2, r2, #1
 8004490:	18bb      	adds	r3, r7, r2
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <ParseBuffer+0x338>
 8004498:	18bb      	adds	r3, r7, r2
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b3e      	cmp	r3, #62	@ 0x3e
 80044a0:	d104      	bne.n	80044ac <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80044a2:	2360      	movs	r3, #96	@ 0x60
 80044a4:	33ff      	adds	r3, #255	@ 0xff
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2205      	movs	r2, #5
 80044aa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80044ac:	22ac      	movs	r2, #172	@ 0xac
 80044ae:	0052      	lsls	r2, r2, #1
 80044b0:	18bb      	adds	r3, r7, r2
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <ParseBuffer+0x358>
 80044b8:	18bb      	adds	r3, r7, r2
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b2b      	cmp	r3, #43	@ 0x2b
 80044c0:	d104      	bne.n	80044cc <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 80044c2:	2360      	movs	r3, #96	@ 0x60
 80044c4:	33ff      	adds	r3, #255	@ 0xff
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	220b      	movs	r2, #11
 80044ca:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80044cc:	22aa      	movs	r2, #170	@ 0xaa
 80044ce:	0052      	lsls	r2, r2, #1
 80044d0:	18bb      	adds	r3, r7, r2
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <ParseBuffer+0x36e>
 80044d8:	18bb      	adds	r3, r7, r2
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b45      	cmp	r3, #69	@ 0x45
 80044e0:	d00a      	beq.n	80044f8 <ParseBuffer+0x384>
 80044e2:	22a4      	movs	r2, #164	@ 0xa4
 80044e4:	0052      	lsls	r2, r2, #1
 80044e6:	18bb      	adds	r3, r7, r2
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <ParseBuffer+0x38e>
 80044ee:	18bb      	adds	r3, r7, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b46      	cmp	r3, #70	@ 0x46
 80044f6:	d104      	bne.n	8004502 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 80044f8:	2360      	movs	r3, #96	@ 0x60
 80044fa:	33ff      	adds	r3, #255	@ 0xff
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004502:	22a8      	movs	r2, #168	@ 0xa8
 8004504:	0052      	lsls	r2, r2, #1
 8004506:	18bb      	adds	r3, r7, r2
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <ParseBuffer+0x3aa>
 800450e:	18bb      	adds	r3, r7, r2
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b57      	cmp	r3, #87	@ 0x57
 8004516:	d102      	bne.n	800451e <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004518:	4b0c      	ldr	r3, [pc, #48]	@ (800454c <ParseBuffer+0x3d8>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800451e:	22a6      	movs	r2, #166	@ 0xa6
 8004520:	0052      	lsls	r2, r2, #1
 8004522:	18bb      	adds	r3, r7, r2
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <ParseBuffer+0x3c6>
 800452a:	18bb      	adds	r3, r7, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b32      	cmp	r3, #50	@ 0x32
 8004532:	d102      	bne.n	800453a <ParseBuffer+0x3c6>
      beurs = true;
 8004534:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <ParseBuffer+0x3dc>)
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800453a:	2360      	movs	r3, #96	@ 0x60
 800453c:	33ff      	adds	r3, #255	@ 0xff
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	781b      	ldrb	r3, [r3, #0]

}
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b059      	add	sp, #356	@ 0x164
 8004548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	2000054c 	.word	0x2000054c
 8004550:	2000054e 	.word	0x2000054e

08004554 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800455a:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <PollAwake+0x34>)
 800455c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f7fb fe03 	bl	800016c <strlen>
 8004566:	0003      	movs	r3, r0
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f7ff fa62 	bl	8003a38 <ESP_Send>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d001      	beq.n	800457c <PollAwake+0x28>
    return true;
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <PollAwake+0x2a>
  }
  else{
    return false;
 800457c:	2300      	movs	r3, #0
  }
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b002      	add	sp, #8
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	08022cf0 	.word	0x08022cf0

0800458c <RFPower>:
bool RFPower(){
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004592:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <RFPower+0x34>)
 8004594:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f7fb fde7 	bl	800016c <strlen>
 800459e:	0003      	movs	r3, r0
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	0011      	movs	r1, r2
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7ff fa46 	bl	8003a38 <ESP_Send>
 80045ac:	1e03      	subs	r3, r0, #0
 80045ae:	d001      	beq.n	80045b4 <RFPower+0x28>
    return true;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <RFPower+0x2a>
  }
  else{
    return false;
 80045b4:	2300      	movs	r3, #0
  }
}
 80045b6:	0018      	movs	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b002      	add	sp, #8
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	08022cf8 	.word	0x08022cf8

080045c4 <CheckRFPower>:
bool CheckRFPower(){
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80045ca:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <CheckRFPower+0x34>)
 80045cc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7fb fdcb 	bl	800016c <strlen>
 80045d6:	0003      	movs	r3, r0
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0011      	movs	r1, r2
 80045de:	0018      	movs	r0, r3
 80045e0:	f7ff fa2a 	bl	8003a38 <ESP_Send>
 80045e4:	1e03      	subs	r3, r0, #0
 80045e6:	d001      	beq.n	80045ec <CheckRFPower+0x28>
    return true;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <CheckRFPower+0x2a>
  }
  else{
    return false;
 80045ec:	2300      	movs	r3, #0
  }
}
 80045ee:	0018      	movs	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	08022d08 	.word	0x08022d08

080045fc <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004602:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <ATRestore+0x34>)
 8004604:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f7fb fdaf 	bl	800016c <strlen>
 800460e:	0003      	movs	r3, r0
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0011      	movs	r1, r2
 8004616:	0018      	movs	r0, r3
 8004618:	f7ff fa0e 	bl	8003a38 <ESP_Send>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d001      	beq.n	8004624 <ATRestore+0x28>
    return true;
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <ATRestore+0x2a>
  }
  else{
    return false;
 8004624:	2300      	movs	r3, #0
  }
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	08022d18 	.word	0x08022d18

08004634 <CWINIT>:
bool CWINIT(){
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800463a:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <CWINIT+0x34>)
 800463c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	f7fb fd93 	bl	800016c <strlen>
 8004646:	0003      	movs	r3, r0
 8004648:	b29a      	uxth	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0011      	movs	r1, r2
 800464e:	0018      	movs	r0, r3
 8004650:	f7ff f9f2 	bl	8003a38 <ESP_Send>
 8004654:	1e03      	subs	r3, r0, #0
 8004656:	d001      	beq.n	800465c <CWINIT+0x28>
    return true;
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <CWINIT+0x2a>
  }
  else{
    return false;
 800465c:	2300      	movs	r3, #0
  }
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b002      	add	sp, #8
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	08022d28 	.word	0x08022d28

0800466c <CWMODE1>:
bool CWMODE1(){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004672:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <CWMODE1+0x34>)
 8004674:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f7fb fd77 	bl	800016c <strlen>
 800467e:	0003      	movs	r3, r0
 8004680:	b29a      	uxth	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0011      	movs	r1, r2
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff f9d6 	bl	8003a38 <ESP_Send>
 800468c:	1e03      	subs	r3, r0, #0
 800468e:	d001      	beq.n	8004694 <CWMODE1+0x28>
    return true;
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004694:	2300      	movs	r3, #0
  }
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	08022d38 	.word	0x08022d38

080046a4 <CWMODE2>:
bool CWMODE2(){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <CWMODE2+0x34>)
 80046ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fb fd5b 	bl	800016c <strlen>
 80046b6:	0003      	movs	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0011      	movs	r1, r2
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff f9ba 	bl	8003a38 <ESP_Send>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d001      	beq.n	80046cc <CWMODE2+0x28>
    return true;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <CWMODE2+0x2a>
  }
  else{
    return false;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	08022d48 	.word	0x08022d48

080046dc <CWAUTOCONN>:
bool CWAUTOCONN(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <CWAUTOCONN+0x34>)
 80046e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7fb fd3f 	bl	800016c <strlen>
 80046ee:	0003      	movs	r3, r0
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0011      	movs	r1, r2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff f99e 	bl	8003a38 <ESP_Send>
 80046fc:	1e03      	subs	r3, r0, #0
 80046fe:	d001      	beq.n	8004704 <CWAUTOCONN+0x28>
    return true;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004704:	2300      	movs	r3, #0
  }
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	08022d58 	.word	0x08022d58

08004714 <CWJAP>:
bool CWJAP(){
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004716:	46c6      	mov	lr, r8
 8004718:	b500      	push	{lr}
 800471a:	b0a2      	sub	sp, #136	@ 0x88
 800471c:	af00      	add	r7, sp, #0
 800471e:	466b      	mov	r3, sp
 8004720:	4698      	mov	r8, r3
  beursTest = true;
 8004722:	4b39      	ldr	r3, [pc, #228]	@ (8004808 <CWJAP+0xf4>)
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004728:	2618      	movs	r6, #24
 800472a:	19bb      	adds	r3, r7, r6
 800472c:	2264      	movs	r2, #100	@ 0x64
 800472e:	2100      	movs	r1, #0
 8004730:	0018      	movs	r0, r3
 8004732:	f01b f87d 	bl	801f830 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004736:	4b35      	ldr	r3, [pc, #212]	@ (800480c <CWJAP+0xf8>)
 8004738:	4a35      	ldr	r2, [pc, #212]	@ (8004810 <CWJAP+0xfc>)
 800473a:	4936      	ldr	r1, [pc, #216]	@ (8004814 <CWJAP+0x100>)
 800473c:	19b8      	adds	r0, r7, r6
 800473e:	f01a ff33 	bl	801f5a8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004742:	19bb      	adds	r3, r7, r6
 8004744:	0018      	movs	r0, r3
 8004746:	f7fb fd11 	bl	800016c <strlen>
 800474a:	0002      	movs	r2, r0
 800474c:	216f      	movs	r1, #111	@ 0x6f
 800474e:	0030      	movs	r0, r6
 8004750:	180b      	adds	r3, r1, r0
 8004752:	19db      	adds	r3, r3, r7
 8004754:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004756:	180b      	adds	r3, r1, r0
 8004758:	19db      	adds	r3, r3, r7
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	2180      	movs	r1, #128	@ 0x80
 8004762:	1879      	adds	r1, r7, r1
 8004764:	600a      	str	r2, [r1, #0]
 8004766:	001a      	movs	r2, r3
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	60fa      	str	r2, [r7, #12]
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	68f9      	ldr	r1, [r7, #12]
 8004772:	0002      	movs	r2, r0
 8004774:	0f52      	lsrs	r2, r2, #29
 8004776:	000e      	movs	r6, r1
 8004778:	00f6      	lsls	r6, r6, #3
 800477a:	617e      	str	r6, [r7, #20]
 800477c:	697e      	ldr	r6, [r7, #20]
 800477e:	4316      	orrs	r6, r2
 8004780:	617e      	str	r6, [r7, #20]
 8004782:	0002      	movs	r2, r0
 8004784:	00d2      	lsls	r2, r2, #3
 8004786:	613a      	str	r2, [r7, #16]
 8004788:	001a      	movs	r2, r3
 800478a:	603a      	str	r2, [r7, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	6838      	ldr	r0, [r7, #0]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	0002      	movs	r2, r0
 8004796:	0f52      	lsrs	r2, r2, #29
 8004798:	000e      	movs	r6, r1
 800479a:	00f5      	lsls	r5, r6, #3
 800479c:	4315      	orrs	r5, r2
 800479e:	0002      	movs	r2, r0
 80047a0:	00d4      	lsls	r4, r2, #3
 80047a2:	3307      	adds	r3, #7
 80047a4:	08db      	lsrs	r3, r3, #3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	466a      	mov	r2, sp
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	469d      	mov	sp, r3
 80047ae:	466b      	mov	r3, sp
 80047b0:	3300      	adds	r3, #0
 80047b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80047b4:	246f      	movs	r4, #111	@ 0x6f
 80047b6:	2518      	movs	r5, #24
 80047b8:	1963      	adds	r3, r4, r5
 80047ba:	19db      	adds	r3, r3, r7
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	3301      	adds	r3, #1
 80047c0:	001a      	movs	r2, r3
 80047c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047c4:	2100      	movs	r1, #0
 80047c6:	0018      	movs	r0, r3
 80047c8:	f01b f832 	bl	801f830 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80047cc:	1963      	adds	r3, r4, r5
 80047ce:	19db      	adds	r3, r3, r7
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	1979      	adds	r1, r7, r5
 80047d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047d6:	0018      	movs	r0, r3
 80047d8:	f01b f851 	bl	801f87e <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80047dc:	1963      	adds	r3, r4, r5
 80047de:	19db      	adds	r3, r3, r7
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e6:	0011      	movs	r1, r2
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7ff f925 	bl	8003a38 <ESP_Send>
 80047ee:	1e03      	subs	r3, r0, #0
 80047f0:	d001      	beq.n	80047f6 <CWJAP+0xe2>
    return true;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <CWJAP+0xe4>
  }
  else{
    return false;
 80047f6:	2300      	movs	r3, #0
 80047f8:	46c5      	mov	sp, r8
  }
}
 80047fa:	0018      	movs	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b022      	add	sp, #136	@ 0x88
 8004800:	bc80      	pop	{r7}
 8004802:	46b8      	mov	r8, r7
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	2000054d 	.word	0x2000054d
 800480c:	080245c0 	.word	0x080245c0
 8004810:	080245b4 	.word	0x080245b4
 8004814:	08022d6c 	.word	0x08022d6c

08004818 <CWMODE3>:
bool CWMODE3(){
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800481e:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <CWMODE3+0x34>)
 8004820:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f7fb fca1 	bl	800016c <strlen>
 800482a:	0003      	movs	r3, r0
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0011      	movs	r1, r2
 8004832:	0018      	movs	r0, r3
 8004834:	f7ff f900 	bl	8003a38 <ESP_Send>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d001      	beq.n	8004840 <CWMODE3+0x28>
    return true;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004840:	2300      	movs	r3, #0
  }
}
 8004842:	0018      	movs	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	b002      	add	sp, #8
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	08022d84 	.word	0x08022d84

08004850 <CWSTATE>:
bool CWSTATE(){
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <CWSTATE+0x34>)
 8004858:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f7fb fc85 	bl	800016c <strlen>
 8004862:	0003      	movs	r3, r0
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0011      	movs	r1, r2
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff f8e4 	bl	8003a38 <ESP_Send>
 8004870:	1e03      	subs	r3, r0, #0
 8004872:	d001      	beq.n	8004878 <CWSTATE+0x28>
    return true;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004878:	2300      	movs	r3, #0
  }
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b002      	add	sp, #8
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	08022d94 	.word	0x08022d94

08004888 <CWSAP>:
bool CWSAP(){
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800488e:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <CWSAP+0x34>)
 8004890:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f7fb fc69 	bl	800016c <strlen>
 800489a:	0003      	movs	r3, r0
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0011      	movs	r1, r2
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7ff f8c8 	bl	8003a38 <ESP_Send>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d001      	beq.n	80048b0 <CWSAP+0x28>
    return true;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <CWSAP+0x2a>
  }
  else{
    return false;
 80048b0:	2300      	movs	r3, #0
  }
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	08022da4 	.word	0x08022da4

080048c0 <CIPMUX>:
bool CIPMUX(){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <CIPMUX+0x34>)
 80048c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7fb fc4d 	bl	800016c <strlen>
 80048d2:	0003      	movs	r3, r0
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0011      	movs	r1, r2
 80048da:	0018      	movs	r0, r3
 80048dc:	f7ff f8ac 	bl	8003a38 <ESP_Send>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d001      	beq.n	80048e8 <CIPMUX+0x28>
    return true;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <CIPMUX+0x2a>
  }
  else{
    return false;
 80048e8:	2300      	movs	r3, #0
  }
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b002      	add	sp, #8
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	08022dc8 	.word	0x08022dc8

080048f8 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <WEBSERVER+0x34>)
 8004900:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f7fb fc31 	bl	800016c <strlen>
 800490a:	0003      	movs	r3, r0
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f7ff f890 	bl	8003a38 <ESP_Send>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d001      	beq.n	8004920 <WEBSERVER+0x28>
    return true;
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004920:	2300      	movs	r3, #0
  }
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b002      	add	sp, #8
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	08022dd8 	.word	0x08022dd8

08004930 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b0c5      	sub	sp, #276	@ 0x114
 8004934:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004936:	2380      	movs	r3, #128	@ 0x80
 8004938:	005a      	lsls	r2, r3, #1
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	2100      	movs	r1, #0
 800493e:	0018      	movs	r0, r3
 8004940:	f01a ff76 	bl	801f830 <memset>
  uint16_t length = CreateMessage(beurs);
 8004944:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <HTTPCPOST+0xa0>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	1dfc      	adds	r4, r7, #7
 800494a:	34ff      	adds	r4, #255	@ 0xff
 800494c:	0018      	movs	r0, r3
 800494e:	f7ff f9b7 	bl	8003cc0 <CreateMessage>
 8004952:	0003      	movs	r3, r0
 8004954:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004956:	4b1e      	ldr	r3, [pc, #120]	@ (80049d0 <HTTPCPOST+0xa0>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 800495e:	1dfb      	adds	r3, r7, #7
 8004960:	33ff      	adds	r3, #255	@ 0xff
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	4a1b      	ldr	r2, [pc, #108]	@ (80049d4 <HTTPCPOST+0xa4>)
 8004966:	491c      	ldr	r1, [pc, #112]	@ (80049d8 <HTTPCPOST+0xa8>)
 8004968:	1d38      	adds	r0, r7, #4
 800496a:	f01a fe1d 	bl	801f5a8 <siprintf>
 800496e:	e016      	b.n	800499e <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004970:	4b1a      	ldr	r3, [pc, #104]	@ (80049dc <HTTPCPOST+0xac>)
 8004972:	481b      	ldr	r0, [pc, #108]	@ (80049e0 <HTTPCPOST+0xb0>)
 8004974:	220c      	movs	r2, #12
 8004976:	0019      	movs	r1, r3
 8004978:	f7fe febe 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800497c:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <HTTPCPOST+0xac>)
 800497e:	4b19      	ldr	r3, [pc, #100]	@ (80049e4 <HTTPCPOST+0xb4>)
 8004980:	0011      	movs	r1, r2
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff f978 	bl	8003c78 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004988:	1dfb      	adds	r3, r7, #7
 800498a:	33ff      	adds	r3, #255	@ 0xff
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	4c15      	ldr	r4, [pc, #84]	@ (80049e4 <HTTPCPOST+0xb4>)
 8004990:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <HTTPCPOST+0xb8>)
 8004992:	4916      	ldr	r1, [pc, #88]	@ (80049ec <HTTPCPOST+0xbc>)
 8004994:	1d38      	adds	r0, r7, #4
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	0023      	movs	r3, r4
 800499a:	f01a fe05 	bl	801f5a8 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800499e:	1d3b      	adds	r3, r7, #4
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fb fbe3 	bl	800016c <strlen>
 80049a6:	0002      	movs	r2, r0
 80049a8:	1d7b      	adds	r3, r7, #5
 80049aa:	33ff      	adds	r3, #255	@ 0xff
 80049ac:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 80049ae:	1d7b      	adds	r3, r7, #5
 80049b0:	33ff      	adds	r3, #255	@ 0xff
 80049b2:	881a      	ldrh	r2, [r3, #0]
 80049b4:	1d3b      	adds	r3, r7, #4
 80049b6:	0011      	movs	r1, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7ff f83d 	bl	8003a38 <ESP_Send>
 80049be:	1e03      	subs	r3, r0, #0
 80049c0:	d001      	beq.n	80049c6 <HTTPCPOST+0x96>
    return true;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <HTTPCPOST+0x98>
  }
  else{
    return false;
 80049c6:	2300      	movs	r3, #0
  }
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b043      	add	sp, #268	@ 0x10c
 80049ce:	bd90      	pop	{r4, r7, pc}
 80049d0:	2000054e 	.word	0x2000054e
 80049d4:	080245dc 	.word	0x080245dc
 80049d8:	08022df0 	.word	0x08022df0
 80049dc:	20000a80 	.word	0x20000a80
 80049e0:	08080000 	.word	0x08080000
 80049e4:	20000a8c 	.word	0x20000a8c
 80049e8:	08024618 	.word	0x08024618
 80049ec:	08022e28 	.word	0x08022e28

080049f0 <SENDDATA>:
bool SENDDATA(){
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <SENDDATA+0x34>)
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fb fbb7 	bl	800016c <strlen>
 80049fe:	0002      	movs	r2, r0
 8004a00:	1dbb      	adds	r3, r7, #6
 8004a02:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004a04:	1dbb      	adds	r3, r7, #6
 8004a06:	881a      	ldrh	r2, [r3, #0]
 8004a08:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <SENDDATA+0x34>)
 8004a0a:	0011      	movs	r1, r2
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7ff f813 	bl	8003a38 <ESP_Send>
 8004a12:	1e03      	subs	r3, r0, #0
 8004a14:	d001      	beq.n	8004a1a <SENDDATA+0x2a>
    return true;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <SENDDATA+0x2c>
  }
  else{
    return false;
 8004a1a:	2300      	movs	r3, #0
  }
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b002      	add	sp, #8
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000584 	.word	0x20000584

08004a28 <SLEEP>:
bool SLEEP(){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <SLEEP+0x34>)
 8004a30:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fb fb99 	bl	800016c <strlen>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	0011      	movs	r1, r2
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7fe fff8 	bl	8003a38 <ESP_Send>
 8004a48:	1e03      	subs	r3, r0, #0
 8004a4a:	d001      	beq.n	8004a50 <SLEEP+0x28>
    return true;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <SLEEP+0x2a>
  }
  else{
    return false;
 8004a50:	2300      	movs	r3, #0
  }
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	08022e68 	.word	0x08022e68

08004a60 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <CIPSNTPCFG+0x3c>)
 8004a68:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fb fb7d 	bl	800016c <strlen>
 8004a72:	0003      	movs	r3, r0
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0011      	movs	r1, r2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fe ffdc 	bl	8003a38 <ESP_Send>
 8004a80:	1e03      	subs	r3, r0, #0
 8004a82:	d006      	beq.n	8004a92 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004a84:	23fa      	movs	r3, #250	@ 0xfa
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f009 fc83 	bl	800e394 <HAL_Delay>
    return true;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004a92:	2300      	movs	r3, #0
  }
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	08022e78 	.word	0x08022e78

08004aa0 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <CIPSNTPTIME+0x34>)
 8004aa8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7fb fb5d 	bl	800016c <strlen>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0011      	movs	r1, r2
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7fe ffbc 	bl	8003a38 <ESP_Send>
 8004ac0:	1e03      	subs	r3, r0, #0
 8004ac2:	d001      	beq.n	8004ac8 <CIPSNTPTIME+0x28>
    return true;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004ac8:	2300      	movs	r3, #0
  }
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	08022ec8 	.word	0x08022ec8

08004ad8 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004ade:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <CIPSNTPINTV+0x34>)
 8004ae0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fb fb41 	bl	800016c <strlen>
 8004aea:	0003      	movs	r3, r0
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fe ffa0 	bl	8003a38 <ESP_Send>
 8004af8:	1e03      	subs	r3, r0, #0
 8004afa:	d001      	beq.n	8004b00 <CIPSNTPINTV+0x28>
    return true;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004b00:	2300      	movs	r3, #0
  }
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	08022edc 	.word	0x08022edc

08004b10 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004b10:	b5b0      	push	{r4, r5, r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	0002      	movs	r2, r0
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8004cd0 <DMA_ProcessBuffer+0x1c0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	200e      	movs	r0, #14
 8004b26:	183b      	adds	r3, r7, r0
 8004b28:	2180      	movs	r1, #128	@ 0x80
 8004b2a:	0049      	lsls	r1, r1, #1
 8004b2c:	1a8a      	subs	r2, r1, r2
 8004b2e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004b30:	230d      	movs	r3, #13
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2203      	movs	r2, #3
 8004b36:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004b38:	183b      	adds	r3, r7, r0
 8004b3a:	881a      	ldrh	r2, [r3, #0]
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d903      	bls.n	8004b4c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004b44:	183b      	adds	r3, r7, r0
 8004b46:	2280      	movs	r2, #128	@ 0x80
 8004b48:	0052      	lsls	r2, r2, #1
 8004b4a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004b4c:	4b61      	ldr	r3, [pc, #388]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	001a      	movs	r2, r3
 8004b54:	230e      	movs	r3, #14
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d131      	bne.n	8004bc2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8004cd8 <DMA_ProcessBuffer+0x1c8>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b14      	cmp	r3, #20
 8004b64:	d91b      	bls.n	8004b9e <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004b66:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd8 <DMA_ProcessBuffer+0x1c8>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004b6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cdc <DMA_ProcessBuffer+0x1cc>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <DMA_ProcessBuffer+0x74>
 8004b74:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce0 <DMA_ProcessBuffer+0x1d0>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004b7c:	230d      	movs	r3, #13
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	2207      	movs	r2, #7
 8004b82:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004b84:	4b55      	ldr	r3, [pc, #340]	@ (8004cdc <DMA_ProcessBuffer+0x1cc>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d103      	bne.n	8004b94 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004b8c:	4b55      	ldr	r3, [pc, #340]	@ (8004ce4 <DMA_ProcessBuffer+0x1d4>)
 8004b8e:	220b      	movs	r2, #11
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e016      	b.n	8004bc2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004b94:	230d      	movs	r3, #13
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	2206      	movs	r2, #6
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e011      	b.n	8004bc2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8004cd8 <DMA_ProcessBuffer+0x1c8>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd8 <DMA_ProcessBuffer+0x1c8>)
 8004ba8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004baa:	f009 fbe9 	bl	800e380 <HAL_GetTick>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	33f5      	adds	r3, #245	@ 0xf5
 8004bb2:	33ff      	adds	r3, #255	@ 0xff
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce8 <DMA_ProcessBuffer+0x1d8>)
 8004bb8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004bba:	230d      	movs	r3, #13
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004bc2:	4b44      	ldr	r3, [pc, #272]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	001a      	movs	r2, r3
 8004bca:	210e      	movs	r1, #14
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <DMA_ProcessBuffer+0xc6>
 8004bd4:	e075      	b.n	8004cc2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004bd6:	4b40      	ldr	r3, [pc, #256]	@ (8004cd8 <DMA_ProcessBuffer+0x1c8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004bdc:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <DMA_ProcessBuffer+0x1dc>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d109      	bne.n	8004c00 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004bec:	187b      	adds	r3, r7, r1
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cec <DMA_ProcessBuffer+0x1dc>)
 8004bf4:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004bf6:	230d      	movs	r3, #13
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	220a      	movs	r2, #10
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e060      	b.n	8004cc2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004c00:	4b3a      	ldr	r3, [pc, #232]	@ (8004cec <DMA_ProcessBuffer+0x1dc>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	210e      	movs	r1, #14
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004c12:	187b      	adds	r3, r7, r1
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	4b34      	ldr	r3, [pc, #208]	@ (8004cec <DMA_ProcessBuffer+0x1dc>)
 8004c1a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004c1c:	230d      	movs	r3, #13
 8004c1e:	18fb      	adds	r3, r7, r3
 8004c20:	220a      	movs	r2, #10
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e04d      	b.n	8004cc2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004c26:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	210e      	movs	r1, #14
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d917      	bls.n	8004c68 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004c38:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	001a      	movs	r2, r3
 8004c40:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf0 <DMA_ProcessBuffer+0x1e0>)
 8004c42:	18d0      	adds	r0, r2, r3
 8004c44:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	001a      	movs	r2, r3
 8004c4c:	187b      	adds	r3, r7, r1
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	b299      	uxth	r1, r3
 8004c54:	230d      	movs	r3, #13
 8004c56:	18fc      	adds	r4, r7, r3
 8004c58:	1dfb      	adds	r3, r7, #7
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	f7ff fa89 	bl	8004174 <ParseBuffer>
 8004c62:	0003      	movs	r3, r0
 8004c64:	7023      	strb	r3, [r4, #0]
 8004c66:	e026      	b.n	8004cb6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004c68:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	001a      	movs	r2, r3
 8004c70:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf0 <DMA_ProcessBuffer+0x1e0>)
 8004c72:	18d0      	adds	r0, r2, r3
 8004c74:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	b299      	uxth	r1, r3
 8004c84:	250d      	movs	r5, #13
 8004c86:	197c      	adds	r4, r7, r5
 8004c88:	1dfb      	adds	r3, r7, #7
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	f7ff fa71 	bl	8004174 <ParseBuffer>
 8004c92:	0003      	movs	r3, r0
 8004c94:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004c96:	210e      	movs	r1, #14
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004ca0:	197c      	adds	r4, r7, r5
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	8819      	ldrh	r1, [r3, #0]
 8004caa:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <DMA_ProcessBuffer+0x1e0>)
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff fa61 	bl	8004174 <ParseBuffer>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	7023      	strb	r3, [r4, #0]
              }
          }
//          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
          OldPos = pos;
 8004cb6:	230e      	movs	r3, #14
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <DMA_ProcessBuffer+0x1c4>)
 8004cc0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004cc2:	230d      	movs	r3, #13
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b004      	add	sp, #16
 8004cce:	bdb0      	pop	{r4, r5, r7, pc}
 8004cd0:	20002448 	.word	0x20002448
 8004cd4:	20000aa5 	.word	0x20000aa5
 8004cd8:	200009a0 	.word	0x200009a0
 8004cdc:	200009a2 	.word	0x200009a2
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000028 	.word	0x20000028
 8004ce8:	20000994 	.word	0x20000994
 8004cec:	20000aa6 	.word	0x20000aa6
 8004cf0:	20000448 	.word	0x20000448

08004cf4 <clearDMABuffer>:

void clearDMABuffer(){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004cf8:	2380      	movs	r3, #128	@ 0x80
 8004cfa:	005a      	lsls	r2, r3, #1
 8004cfc:	4b03      	ldr	r3, [pc, #12]	@ (8004d0c <clearDMABuffer+0x18>)
 8004cfe:	2100      	movs	r1, #0
 8004d00:	0018      	movs	r0, r3
 8004d02:	f01a fd95 	bl	801f830 <memset>
}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000448 	.word	0x20000448

08004d10 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	0002      	movs	r2, r0
 8004d18:	1dfb      	adds	r3, r7, #7
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	1dbb      	adds	r3, r7, #6
 8004d1e:	1c0a      	adds	r2, r1, #0
 8004d20:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004d22:	210f      	movs	r1, #15
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004d2a:	1dbb      	adds	r3, r7, #6
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d105      	bne.n	8004d3e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	1dfa      	adds	r2, r7, #7
 8004d36:	7812      	ldrb	r2, [r2, #0]
 8004d38:	4251      	negs	r1, r2
 8004d3a:	414a      	adcs	r2, r1
 8004d3c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004d3e:	1dbb      	adds	r3, r7, #6
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004d46:	230f      	movs	r3, #15
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	1dfa      	adds	r2, r7, #7
 8004d4c:	7812      	ldrb	r2, [r2, #0]
 8004d4e:	3a02      	subs	r2, #2
 8004d50:	4251      	negs	r1, r2
 8004d52:	414a      	adcs	r2, r1
 8004d54:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004d56:	1dbb      	adds	r3, r7, #6
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d107      	bne.n	8004d6e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004d5e:	230f      	movs	r3, #15
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	1dfa      	adds	r2, r7, #7
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	3a05      	subs	r2, #5
 8004d68:	4251      	negs	r1, r2
 8004d6a:	414a      	adcs	r2, r1
 8004d6c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004d6e:	1dbb      	adds	r3, r7, #6
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d107      	bne.n	8004d86 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004d76:	230f      	movs	r3, #15
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	1dfa      	adds	r2, r7, #7
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	3a0b      	subs	r2, #11
 8004d80:	4251      	negs	r1, r2
 8004d82:	414a      	adcs	r2, r1
 8004d84:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004d86:	230f      	movs	r3, #15
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	781b      	ldrb	r3, [r3, #0]
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b004      	add	sp, #16
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	1dfb      	adds	r3, r7, #7
 8004d9e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004da0:	230f      	movs	r3, #15
 8004da2:	18fb      	adds	r3, r7, r3
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b14      	cmp	r3, #20
 8004dae:	d900      	bls.n	8004db2 <AT_Send+0x1e>
 8004db0:	e18c      	b.n	80050cc <AT_Send+0x338>
 8004db2:	009a      	lsls	r2, r3, #2
 8004db4:	4bc9      	ldr	r3, [pc, #804]	@ (80050dc <AT_Send+0x348>)
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004dbc:	4bc8      	ldr	r3, [pc, #800]	@ (80050e0 <AT_Send+0x34c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f008 fe31 	bl	800da28 <TimestampIsReached>
 8004dc6:	1e03      	subs	r3, r0, #0
 8004dc8:	d100      	bne.n	8004dcc <AT_Send+0x38>
 8004dca:	e17e      	b.n	80050ca <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004dcc:	230f      	movs	r3, #15
 8004dce:	18fc      	adds	r4, r7, r3
 8004dd0:	f7ff fbc0 	bl	8004554 <PollAwake>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004dd8:	f009 fad2 	bl	800e380 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	3332      	adds	r3, #50	@ 0x32
 8004de0:	001a      	movs	r2, r3
 8004de2:	4bbf      	ldr	r3, [pc, #764]	@ (80050e0 <AT_Send+0x34c>)
 8004de4:	601a      	str	r2, [r3, #0]
  }
  break;
 8004de6:	e170      	b.n	80050ca <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004de8:	4abe      	ldr	r2, [pc, #760]	@ (80050e4 <AT_Send+0x350>)
 8004dea:	4bbf      	ldr	r3, [pc, #764]	@ (80050e8 <AT_Send+0x354>)
 8004dec:	0019      	movs	r1, r3
 8004dee:	2003      	movs	r0, #3
 8004df0:	f008 fe70 	bl	800dad4 <CreateLine>
    ATCommandSend = RFPower();
 8004df4:	230f      	movs	r3, #15
 8004df6:	18fc      	adds	r4, r7, r3
 8004df8:	f7ff fbc8 	bl	800458c <RFPower>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e00:	f009 fabe 	bl	800e380 <HAL_GetTick>
 8004e04:	0003      	movs	r3, r0
 8004e06:	330a      	adds	r3, #10
 8004e08:	001a      	movs	r2, r3
 8004e0a:	4bb5      	ldr	r3, [pc, #724]	@ (80050e0 <AT_Send+0x34c>)
 8004e0c:	601a      	str	r2, [r3, #0]
    break;
 8004e0e:	e15d      	b.n	80050cc <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004e10:	4ab6      	ldr	r2, [pc, #728]	@ (80050ec <AT_Send+0x358>)
 8004e12:	4bb5      	ldr	r3, [pc, #724]	@ (80050e8 <AT_Send+0x354>)
 8004e14:	0019      	movs	r1, r3
 8004e16:	2003      	movs	r0, #3
 8004e18:	f008 fe5c 	bl	800dad4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004e1c:	230f      	movs	r3, #15
 8004e1e:	18fc      	adds	r4, r7, r3
 8004e20:	f7ff fbd0 	bl	80045c4 <CheckRFPower>
 8004e24:	0003      	movs	r3, r0
 8004e26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e28:	f009 faaa 	bl	800e380 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	330a      	adds	r3, #10
 8004e30:	001a      	movs	r2, r3
 8004e32:	4bab      	ldr	r3, [pc, #684]	@ (80050e0 <AT_Send+0x34c>)
 8004e34:	601a      	str	r2, [r3, #0]
    break;
 8004e36:	e149      	b.n	80050cc <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004e38:	4aad      	ldr	r2, [pc, #692]	@ (80050f0 <AT_Send+0x35c>)
 8004e3a:	4bab      	ldr	r3, [pc, #684]	@ (80050e8 <AT_Send+0x354>)
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	2003      	movs	r0, #3
 8004e40:	f008 fe48 	bl	800dad4 <CreateLine>
    ATCommandSend = ATRestore();
 8004e44:	230f      	movs	r3, #15
 8004e46:	18fc      	adds	r4, r7, r3
 8004e48:	f7ff fbd8 	bl	80045fc <ATRestore>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e50:	f009 fa96 	bl	800e380 <HAL_GetTick>
 8004e54:	0003      	movs	r3, r0
 8004e56:	3332      	adds	r3, #50	@ 0x32
 8004e58:	001a      	movs	r2, r3
 8004e5a:	4ba1      	ldr	r3, [pc, #644]	@ (80050e0 <AT_Send+0x34c>)
 8004e5c:	601a      	str	r2, [r3, #0]
    break;
 8004e5e:	e135      	b.n	80050cc <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004e60:	4aa4      	ldr	r2, [pc, #656]	@ (80050f4 <AT_Send+0x360>)
 8004e62:	4ba1      	ldr	r3, [pc, #644]	@ (80050e8 <AT_Send+0x354>)
 8004e64:	0019      	movs	r1, r3
 8004e66:	2003      	movs	r0, #3
 8004e68:	f008 fe34 	bl	800dad4 <CreateLine>
    ATCommandSend = CWINIT();
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	18fc      	adds	r4, r7, r3
 8004e70:	f7ff fbe0 	bl	8004634 <CWINIT>
 8004e74:	0003      	movs	r3, r0
 8004e76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e78:	f009 fa82 	bl	800e380 <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	33f5      	adds	r3, #245	@ 0xf5
 8004e80:	33ff      	adds	r3, #255	@ 0xff
 8004e82:	001a      	movs	r2, r3
 8004e84:	4b96      	ldr	r3, [pc, #600]	@ (80050e0 <AT_Send+0x34c>)
 8004e86:	601a      	str	r2, [r3, #0]
    break;
 8004e88:	e120      	b.n	80050cc <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004e8a:	4a9b      	ldr	r2, [pc, #620]	@ (80050f8 <AT_Send+0x364>)
 8004e8c:	4b96      	ldr	r3, [pc, #600]	@ (80050e8 <AT_Send+0x354>)
 8004e8e:	0019      	movs	r1, r3
 8004e90:	2003      	movs	r0, #3
 8004e92:	f008 fe1f 	bl	800dad4 <CreateLine>
    ATCommandSend = CWSTATE();
 8004e96:	230f      	movs	r3, #15
 8004e98:	18fc      	adds	r4, r7, r3
 8004e9a:	f7ff fcd9 	bl	8004850 <CWSTATE>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ea2:	f009 fa6d 	bl	800e380 <HAL_GetTick>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	33f5      	adds	r3, #245	@ 0xf5
 8004eaa:	33ff      	adds	r3, #255	@ 0xff
 8004eac:	001a      	movs	r2, r3
 8004eae:	4b8c      	ldr	r3, [pc, #560]	@ (80050e0 <AT_Send+0x34c>)
 8004eb0:	601a      	str	r2, [r3, #0]
    break;
 8004eb2:	e10b      	b.n	80050cc <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004eb4:	4a91      	ldr	r2, [pc, #580]	@ (80050fc <AT_Send+0x368>)
 8004eb6:	4b8c      	ldr	r3, [pc, #560]	@ (80050e8 <AT_Send+0x354>)
 8004eb8:	0019      	movs	r1, r3
 8004eba:	2003      	movs	r0, #3
 8004ebc:	f008 fe0a 	bl	800dad4 <CreateLine>
    ATCommandSend = CWMODE1();
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fc      	adds	r4, r7, r3
 8004ec4:	f7ff fbd2 	bl	800466c <CWMODE1>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ecc:	f009 fa58 	bl	800e380 <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	330a      	adds	r3, #10
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	4b82      	ldr	r3, [pc, #520]	@ (80050e0 <AT_Send+0x34c>)
 8004ed8:	601a      	str	r2, [r3, #0]
    break;
 8004eda:	e0f7      	b.n	80050cc <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004edc:	4a87      	ldr	r2, [pc, #540]	@ (80050fc <AT_Send+0x368>)
 8004ede:	4b82      	ldr	r3, [pc, #520]	@ (80050e8 <AT_Send+0x354>)
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	f008 fdf6 	bl	800dad4 <CreateLine>
    ATCommandSend = CWMODE2();
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fc      	adds	r4, r7, r3
 8004eec:	f7ff fbda 	bl	80046a4 <CWMODE2>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ef4:	f009 fa44 	bl	800e380 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	330a      	adds	r3, #10
 8004efc:	001a      	movs	r2, r3
 8004efe:	4b78      	ldr	r3, [pc, #480]	@ (80050e0 <AT_Send+0x34c>)
 8004f00:	601a      	str	r2, [r3, #0]
    break;
 8004f02:	e0e3      	b.n	80050cc <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004f04:	4a7e      	ldr	r2, [pc, #504]	@ (8005100 <AT_Send+0x36c>)
 8004f06:	4b78      	ldr	r3, [pc, #480]	@ (80050e8 <AT_Send+0x354>)
 8004f08:	0019      	movs	r1, r3
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f008 fde2 	bl	800dad4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004f10:	230f      	movs	r3, #15
 8004f12:	18fc      	adds	r4, r7, r3
 8004f14:	f7ff fbe2 	bl	80046dc <CWAUTOCONN>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f1c:	f009 fa30 	bl	800e380 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	330a      	adds	r3, #10
 8004f24:	001a      	movs	r2, r3
 8004f26:	4b6e      	ldr	r3, [pc, #440]	@ (80050e0 <AT_Send+0x34c>)
 8004f28:	601a      	str	r2, [r3, #0]
    break;
 8004f2a:	e0cf      	b.n	80050cc <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004f2c:	4a75      	ldr	r2, [pc, #468]	@ (8005104 <AT_Send+0x370>)
 8004f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80050e8 <AT_Send+0x354>)
 8004f30:	0019      	movs	r1, r3
 8004f32:	2003      	movs	r0, #3
 8004f34:	f008 fdce 	bl	800dad4 <CreateLine>
    ATCommandSend = CWJAP();
 8004f38:	230f      	movs	r3, #15
 8004f3a:	18fc      	adds	r4, r7, r3
 8004f3c:	f7ff fbea 	bl	8004714 <CWJAP>
 8004f40:	0003      	movs	r3, r0
 8004f42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f44:	f009 fa1c 	bl	800e380 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	3332      	adds	r3, #50	@ 0x32
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	4b64      	ldr	r3, [pc, #400]	@ (80050e0 <AT_Send+0x34c>)
 8004f50:	601a      	str	r2, [r3, #0]
    break;
 8004f52:	e0bb      	b.n	80050cc <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004f54:	4a6c      	ldr	r2, [pc, #432]	@ (8005108 <AT_Send+0x374>)
 8004f56:	4b64      	ldr	r3, [pc, #400]	@ (80050e8 <AT_Send+0x354>)
 8004f58:	0019      	movs	r1, r3
 8004f5a:	2003      	movs	r0, #3
 8004f5c:	f008 fdba 	bl	800dad4 <CreateLine>
    ATCommandSend = CWMODE3();
 8004f60:	230f      	movs	r3, #15
 8004f62:	18fc      	adds	r4, r7, r3
 8004f64:	f7ff fc58 	bl	8004818 <CWMODE3>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f6c:	f009 fa08 	bl	800e380 <HAL_GetTick>
 8004f70:	0003      	movs	r3, r0
 8004f72:	330a      	adds	r3, #10
 8004f74:	001a      	movs	r2, r3
 8004f76:	4b5a      	ldr	r3, [pc, #360]	@ (80050e0 <AT_Send+0x34c>)
 8004f78:	601a      	str	r2, [r3, #0]
    break;
 8004f7a:	e0a7      	b.n	80050cc <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004f7c:	4a63      	ldr	r2, [pc, #396]	@ (800510c <AT_Send+0x378>)
 8004f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80050e8 <AT_Send+0x354>)
 8004f80:	0019      	movs	r1, r3
 8004f82:	2003      	movs	r0, #3
 8004f84:	f008 fda6 	bl	800dad4 <CreateLine>
    ATCommandSend = CWSAP();
 8004f88:	230f      	movs	r3, #15
 8004f8a:	18fc      	adds	r4, r7, r3
 8004f8c:	f7ff fc7c 	bl	8004888 <CWSAP>
 8004f90:	0003      	movs	r3, r0
 8004f92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f94:	f009 f9f4 	bl	800e380 <HAL_GetTick>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	330a      	adds	r3, #10
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	4b50      	ldr	r3, [pc, #320]	@ (80050e0 <AT_Send+0x34c>)
 8004fa0:	601a      	str	r2, [r3, #0]
    break;
 8004fa2:	e093      	b.n	80050cc <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004fa4:	230f      	movs	r3, #15
 8004fa6:	18fc      	adds	r4, r7, r3
 8004fa8:	f7ff fc8a 	bl	80048c0 <CIPMUX>
 8004fac:	0003      	movs	r3, r0
 8004fae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fb0:	f009 f9e6 	bl	800e380 <HAL_GetTick>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	330a      	adds	r3, #10
 8004fb8:	001a      	movs	r2, r3
 8004fba:	4b49      	ldr	r3, [pc, #292]	@ (80050e0 <AT_Send+0x34c>)
 8004fbc:	601a      	str	r2, [r3, #0]
    break;
 8004fbe:	e085      	b.n	80050cc <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	18fc      	adds	r4, r7, r3
 8004fc4:	f7ff fc98 	bl	80048f8 <WEBSERVER>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fcc:	f009 f9d8 	bl	800e380 <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	330a      	adds	r3, #10
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <AT_Send+0x34c>)
 8004fd8:	601a      	str	r2, [r3, #0]
    break;
 8004fda:	e077      	b.n	80050cc <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004fdc:	230f      	movs	r3, #15
 8004fde:	18fc      	adds	r4, r7, r3
 8004fe0:	f7ff fca6 	bl	8004930 <HTTPCPOST>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fe8:	f009 f9ca 	bl	800e380 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	33f5      	adds	r3, #245	@ 0xf5
 8004ff0:	33ff      	adds	r3, #255	@ 0xff
 8004ff2:	001a      	movs	r2, r3
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80050e0 <AT_Send+0x34c>)
 8004ff6:	601a      	str	r2, [r3, #0]
    break;
 8004ff8:	e068      	b.n	80050cc <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 8004ffa:	4a45      	ldr	r2, [pc, #276]	@ (8005110 <AT_Send+0x37c>)
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80050e8 <AT_Send+0x354>)
 8004ffe:	0019      	movs	r1, r3
 8005000:	2003      	movs	r0, #3
 8005002:	f008 fd67 	bl	800dad4 <CreateLine>
    ATCommandSend = SENDDATA();
 8005006:	230f      	movs	r3, #15
 8005008:	18fc      	adds	r4, r7, r3
 800500a:	f7ff fcf1 	bl	80049f0 <SENDDATA>
 800500e:	0003      	movs	r3, r0
 8005010:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005012:	f009 f9b5 	bl	800e380 <HAL_GetTick>
 8005016:	0003      	movs	r3, r0
 8005018:	33f5      	adds	r3, #245	@ 0xf5
 800501a:	33ff      	adds	r3, #255	@ 0xff
 800501c:	001a      	movs	r2, r3
 800501e:	4b30      	ldr	r3, [pc, #192]	@ (80050e0 <AT_Send+0x34c>)
 8005020:	601a      	str	r2, [r3, #0]
    break;
 8005022:	e053      	b.n	80050cc <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005024:	4a3b      	ldr	r2, [pc, #236]	@ (8005114 <AT_Send+0x380>)
 8005026:	4b30      	ldr	r3, [pc, #192]	@ (80050e8 <AT_Send+0x354>)
 8005028:	0019      	movs	r1, r3
 800502a:	2003      	movs	r0, #3
 800502c:	f008 fd52 	bl	800dad4 <CreateLine>
    ATCommandSend = SLEEP();
 8005030:	230f      	movs	r3, #15
 8005032:	18fc      	adds	r4, r7, r3
 8005034:	f7ff fcf8 	bl	8004a28 <SLEEP>
 8005038:	0003      	movs	r3, r0
 800503a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800503c:	f009 f9a0 	bl	800e380 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	330a      	adds	r3, #10
 8005044:	001a      	movs	r2, r3
 8005046:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <AT_Send+0x34c>)
 8005048:	601a      	str	r2, [r3, #0]
    break;
 800504a:	e03f      	b.n	80050cc <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800504c:	4a32      	ldr	r2, [pc, #200]	@ (8005118 <AT_Send+0x384>)
 800504e:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <AT_Send+0x354>)
 8005050:	0019      	movs	r1, r3
 8005052:	2003      	movs	r0, #3
 8005054:	f008 fd3e 	bl	800dad4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005058:	230f      	movs	r3, #15
 800505a:	18fc      	adds	r4, r7, r3
 800505c:	f7ff fd00 	bl	8004a60 <CIPSNTPCFG>
 8005060:	0003      	movs	r3, r0
 8005062:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005064:	f009 f98c 	bl	800e380 <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	330a      	adds	r3, #10
 800506c:	001a      	movs	r2, r3
 800506e:	4b1c      	ldr	r3, [pc, #112]	@ (80050e0 <AT_Send+0x34c>)
 8005070:	601a      	str	r2, [r3, #0]
    break;
 8005072:	e02b      	b.n	80050cc <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005074:	4a29      	ldr	r2, [pc, #164]	@ (800511c <AT_Send+0x388>)
 8005076:	4b1c      	ldr	r3, [pc, #112]	@ (80050e8 <AT_Send+0x354>)
 8005078:	0019      	movs	r1, r3
 800507a:	2003      	movs	r0, #3
 800507c:	f008 fd2a 	bl	800dad4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005080:	230f      	movs	r3, #15
 8005082:	18fc      	adds	r4, r7, r3
 8005084:	f7ff fd0c 	bl	8004aa0 <CIPSNTPTIME>
 8005088:	0003      	movs	r3, r0
 800508a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800508c:	f009 f978 	bl	800e380 <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	33f5      	adds	r3, #245	@ 0xf5
 8005094:	33ff      	adds	r3, #255	@ 0xff
 8005096:	001a      	movs	r2, r3
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <AT_Send+0x34c>)
 800509a:	601a      	str	r2, [r3, #0]
    break;
 800509c:	e016      	b.n	80050cc <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800509e:	4a20      	ldr	r2, [pc, #128]	@ (8005120 <AT_Send+0x38c>)
 80050a0:	4b11      	ldr	r3, [pc, #68]	@ (80050e8 <AT_Send+0x354>)
 80050a2:	0019      	movs	r1, r3
 80050a4:	2003      	movs	r0, #3
 80050a6:	f008 fd15 	bl	800dad4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80050aa:	230f      	movs	r3, #15
 80050ac:	18fc      	adds	r4, r7, r3
 80050ae:	f7ff fd13 	bl	8004ad8 <CIPSNTPINTV>
 80050b2:	0003      	movs	r3, r0
 80050b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050b6:	f009 f963 	bl	800e380 <HAL_GetTick>
 80050ba:	0003      	movs	r3, r0
 80050bc:	330a      	adds	r3, #10
 80050be:	001a      	movs	r2, r3
 80050c0:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <AT_Send+0x34c>)
 80050c2:	601a      	str	r2, [r3, #0]
    break;
 80050c4:	e002      	b.n	80050cc <AT_Send+0x338>
  case AT_END:
    break;
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	e000      	b.n	80050cc <AT_Send+0x338>
  break;
 80050ca:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80050cc:	230f      	movs	r3, #15
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	781b      	ldrb	r3, [r3, #0]
}
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b005      	add	sp, #20
 80050d8:	bd90      	pop	{r4, r7, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	08024640 	.word	0x08024640
 80050e0:	20000994 	.word	0x20000994
 80050e4:	08022ef4 	.word	0x08022ef4
 80050e8:	08022798 	.word	0x08022798
 80050ec:	08022f08 	.word	0x08022f08
 80050f0:	08022f1c 	.word	0x08022f1c
 80050f4:	08022f2c 	.word	0x08022f2c
 80050f8:	08022f40 	.word	0x08022f40
 80050fc:	08022f58 	.word	0x08022f58
 8005100:	08022f70 	.word	0x08022f70
 8005104:	08022f88 	.word	0x08022f88
 8005108:	08022f9c 	.word	0x08022f9c
 800510c:	08022fb8 	.word	0x08022fb8
 8005110:	08022fd4 	.word	0x08022fd4
 8005114:	08022fe4 	.word	0x08022fe4
 8005118:	08023008 	.word	0x08023008
 800511c:	0802301c 	.word	0x0802301c
 8005120:	08023034 	.word	0x08023034

08005124 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005124:	b590      	push	{r4, r7, lr}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005130:	4b7a      	ldr	r3, [pc, #488]	@ (800531c <ESP_WakeTest+0x1f8>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b05      	cmp	r3, #5
 8005136:	d900      	bls.n	800513a <ESP_WakeTest+0x16>
 8005138:	e0d6      	b.n	80052e8 <ESP_WakeTest+0x1c4>
 800513a:	009a      	lsls	r2, r3, #2
 800513c:	4b78      	ldr	r3, [pc, #480]	@ (8005320 <ESP_WakeTest+0x1fc>)
 800513e:	18d3      	adds	r3, r2, r3
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 8005144:	4b77      	ldr	r3, [pc, #476]	@ (8005324 <ESP_WakeTest+0x200>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	4053      	eors	r3, r2
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d036      	beq.n	80051c0 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	4874      	ldr	r0, [pc, #464]	@ (8005328 <ESP_WakeTest+0x204>)
 8005158:	2200      	movs	r2, #0
 800515a:	0019      	movs	r1, r3
 800515c:	f00a fba1 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005160:	2032      	movs	r0, #50	@ 0x32
 8005162:	f009 f917 	bl	800e394 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005166:	2380      	movs	r3, #128	@ 0x80
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	486f      	ldr	r0, [pc, #444]	@ (8005328 <ESP_WakeTest+0x204>)
 800516c:	2201      	movs	r2, #1
 800516e:	0019      	movs	r1, r3
 8005170:	f00a fb97 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005174:	200a      	movs	r0, #10
 8005176:	f009 f90d 	bl	800e394 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800517a:	4b6c      	ldr	r3, [pc, #432]	@ (800532c <ESP_WakeTest+0x208>)
 800517c:	2200      	movs	r2, #0
 800517e:	2101      	movs	r1, #1
 8005180:	0018      	movs	r0, r3
 8005182:	f00a fb8e 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005186:	200a      	movs	r0, #10
 8005188:	f009 f904 	bl	800e394 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800518c:	4b67      	ldr	r3, [pc, #412]	@ (800532c <ESP_WakeTest+0x208>)
 800518e:	2201      	movs	r2, #1
 8005190:	2102      	movs	r1, #2
 8005192:	0018      	movs	r0, r3
 8005194:	f00a fb85 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005198:	200a      	movs	r0, #10
 800519a:	f009 f8fb 	bl	800e394 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800519e:	4b63      	ldr	r3, [pc, #396]	@ (800532c <ESP_WakeTest+0x208>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	2101      	movs	r1, #1
 80051a4:	0018      	movs	r0, r3
 80051a6:	f00a fb7c 	bl	800f8a2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80051aa:	f009 f8e9 	bl	800e380 <HAL_GetTick>
 80051ae:	0003      	movs	r3, r0
 80051b0:	22af      	movs	r2, #175	@ 0xaf
 80051b2:	0092      	lsls	r2, r2, #2
 80051b4:	189a      	adds	r2, r3, r2
 80051b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005330 <ESP_WakeTest+0x20c>)
 80051b8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80051ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005324 <ESP_WakeTest+0x200>)
 80051bc:	2201      	movs	r2, #1
 80051be:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	005a      	lsls	r2, r3, #1
 80051c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005334 <ESP_WakeTest+0x210>)
 80051c6:	0011      	movs	r1, r2
 80051c8:	0018      	movs	r0, r3
 80051ca:	f7fe fc69 	bl	8003aa0 <ESP_Receive>
 80051ce:	1e03      	subs	r3, r0, #0
 80051d0:	d100      	bne.n	80051d4 <ESP_WakeTest+0xb0>
 80051d2:	e099      	b.n	8005308 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 80051d4:	4b51      	ldr	r3, [pc, #324]	@ (800531c <ESP_WakeTest+0x1f8>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80051da:	e095      	b.n	8005308 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 80051dc:	4b54      	ldr	r3, [pc, #336]	@ (8005330 <ESP_WakeTest+0x20c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f008 fc21 	bl	800da28 <TimestampIsReached>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d100      	bne.n	80051ec <ESP_WakeTest+0xc8>
 80051ea:	e08f      	b.n	800530c <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 80051ec:	4b52      	ldr	r3, [pc, #328]	@ (8005338 <ESP_WakeTest+0x214>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	1dfc      	adds	r4, r7, #7
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7ff fdce 	bl	8004d94 <AT_Send>
 80051f8:	0003      	movs	r3, r0
 80051fa:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80051fc:	1dfb      	adds	r3, r7, #7
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d100      	bne.n	8005206 <ESP_WakeTest+0xe2>
 8005204:	e082      	b.n	800530c <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8005206:	4b45      	ldr	r3, [pc, #276]	@ (800531c <ESP_WakeTest+0x1f8>)
 8005208:	2202      	movs	r2, #2
 800520a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800520c:	e07e      	b.n	800530c <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 800520e:	4b48      	ldr	r3, [pc, #288]	@ (8005330 <ESP_WakeTest+0x20c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	0018      	movs	r0, r3
 8005214:	f008 fc08 	bl	800da28 <TimestampIsReached>
 8005218:	1e03      	subs	r3, r0, #0
 800521a:	d100      	bne.n	800521e <ESP_WakeTest+0xfa>
 800521c:	e078      	b.n	8005310 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800521e:	4b47      	ldr	r3, [pc, #284]	@ (800533c <ESP_WakeTest+0x218>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff fc74 	bl	8004b10 <DMA_ProcessBuffer>
 8005228:	0003      	movs	r3, r0
 800522a:	001a      	movs	r2, r3
 800522c:	4b44      	ldr	r3, [pc, #272]	@ (8005340 <ESP_WakeTest+0x21c>)
 800522e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005230:	4b43      	ldr	r3, [pc, #268]	@ (8005340 <ESP_WakeTest+0x21c>)
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	4b41      	ldr	r3, [pc, #260]	@ (800533c <ESP_WakeTest+0x218>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	1dbc      	adds	r4, r7, #6
 800523a:	0019      	movs	r1, r3
 800523c:	0010      	movs	r0, r2
 800523e:	f7ff fd67 	bl	8004d10 <ATCompare>
 8005242:	0003      	movs	r3, r0
 8005244:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005246:	4b3e      	ldr	r3, [pc, #248]	@ (8005340 <ESP_WakeTest+0x21c>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d102      	bne.n	8005254 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800524e:	4b33      	ldr	r3, [pc, #204]	@ (800531c <ESP_WakeTest+0x1f8>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005254:	4b3a      	ldr	r3, [pc, #232]	@ (8005340 <ESP_WakeTest+0x21c>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b07      	cmp	r3, #7
 800525a:	d104      	bne.n	8005266 <ESP_WakeTest+0x142>
          StartProg();
 800525c:	f7fe ff58 	bl	8004110 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005260:	4b2e      	ldr	r3, [pc, #184]	@ (800531c <ESP_WakeTest+0x1f8>)
 8005262:	2205      	movs	r2, #5
 8005264:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005266:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <ESP_WakeTest+0x21c>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d109      	bne.n	8005282 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800526e:	f009 f887 	bl	800e380 <HAL_GetTick>
 8005272:	0003      	movs	r3, r0
 8005274:	3332      	adds	r3, #50	@ 0x32
 8005276:	001a      	movs	r2, r3
 8005278:	4b2d      	ldr	r3, [pc, #180]	@ (8005330 <ESP_WakeTest+0x20c>)
 800527a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800527c:	4b27      	ldr	r3, [pc, #156]	@ (800531c <ESP_WakeTest+0x1f8>)
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8005282:	1dbb      	adds	r3, r7, #6
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d042      	beq.n	8005310 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <ESP_WakeTest+0x1f8>)
 800528c:	2203      	movs	r2, #3
 800528e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005290:	e03e      	b.n	8005310 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005292:	4b2c      	ldr	r3, [pc, #176]	@ (8005344 <ESP_WakeTest+0x220>)
 8005294:	22fa      	movs	r2, #250	@ 0xfa
 8005296:	0112      	lsls	r2, r2, #4
 8005298:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800529a:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <ESP_WakeTest+0x220>)
 800529c:	4a2a      	ldr	r2, [pc, #168]	@ (8005348 <ESP_WakeTest+0x224>)
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80052a0:	4b28      	ldr	r3, [pc, #160]	@ (8005344 <ESP_WakeTest+0x220>)
 80052a2:	22fa      	movs	r2, #250	@ 0xfa
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80052a8:	4b1c      	ldr	r3, [pc, #112]	@ (800531c <ESP_WakeTest+0x1f8>)
 80052aa:	2204      	movs	r2, #4
 80052ac:	701a      	strb	r2, [r3, #0]

      break;
 80052ae:	e030      	b.n	8005312 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 80052b0:	4b26      	ldr	r3, [pc, #152]	@ (800534c <ESP_WakeTest+0x228>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80052b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005324 <ESP_WakeTest+0x200>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052bc:	4b1b      	ldr	r3, [pc, #108]	@ (800532c <ESP_WakeTest+0x208>)
 80052be:	2200      	movs	r2, #0
 80052c0:	2101      	movs	r1, #1
 80052c2:	0018      	movs	r0, r3
 80052c4:	f00a faed 	bl	800f8a2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	4816      	ldr	r0, [pc, #88]	@ (8005328 <ESP_WakeTest+0x204>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	0019      	movs	r1, r3
 80052d2:	f00a fae6 	bl	800f8a2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80052d6:	4b15      	ldr	r3, [pc, #84]	@ (800532c <ESP_WakeTest+0x208>)
 80052d8:	2200      	movs	r2, #0
 80052da:	2102      	movs	r1, #2
 80052dc:	0018      	movs	r0, r3
 80052de:	f00a fae0 	bl	800f8a2 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80052e2:	f002 fecf 	bl	8008084 <SetESPMeasurementDone>
      break;
 80052e6:	e014      	b.n	8005312 <ESP_WakeTest+0x1ee>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 80052e8:	4b0c      	ldr	r3, [pc, #48]	@ (800531c <ESP_WakeTest+0x1f8>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
      break;
 80052ee:	e010      	b.n	8005312 <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 80052f0:	4b14      	ldr	r3, [pc, #80]	@ (8005344 <ESP_WakeTest+0x220>)
 80052f2:	22fa      	movs	r2, #250	@ 0xfa
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80052f8:	4b12      	ldr	r3, [pc, #72]	@ (8005344 <ESP_WakeTest+0x220>)
 80052fa:	22fa      	movs	r2, #250	@ 0xfa
 80052fc:	0112      	lsls	r2, r2, #4
 80052fe:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005300:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <ESP_WakeTest+0x220>)
 8005302:	2200      	movs	r2, #0
 8005304:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8005306:	e004      	b.n	8005312 <ESP_WakeTest+0x1ee>
      break;
 8005308:	46c0      	nop			@ (mov r8, r8)
 800530a:	e002      	b.n	8005312 <ESP_WakeTest+0x1ee>
      break;
 800530c:	46c0      	nop			@ (mov r8, r8)
 800530e:	e000      	b.n	8005312 <ESP_WakeTest+0x1ee>
      break;
 8005310:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	46bd      	mov	sp, r7
 8005316:	b003      	add	sp, #12
 8005318:	bd90      	pop	{r4, r7, pc}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	200009a4 	.word	0x200009a4
 8005320:	08024694 	.word	0x08024694
 8005324:	20000548 	.word	0x20000548
 8005328:	50000800 	.word	0x50000800
 800532c:	50001c00 	.word	0x50001c00
 8005330:	20000994 	.word	0x20000994
 8005334:	20000448 	.word	0x20000448
 8005338:	200009a2 	.word	0x200009a2
 800533c:	200009a1 	.word	0x200009a1
 8005340:	20000029 	.word	0x20000029
 8005344:	40000400 	.word	0x40000400
 8005348:	00000bb8 	.word	0x00000bb8
 800534c:	20000000 	.word	0x20000000

08005350 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005350:	b5b0      	push	{r4, r5, r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005356:	1dfb      	adds	r3, r7, #7
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() > VERBOSE_ALL)) {
 800535c:	4be3      	ldr	r3, [pc, #908]	@ (80056ec <ESP_Upkeep+0x39c>)
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	4be3      	ldr	r3, [pc, #908]	@ (80056f0 <ESP_Upkeep+0x3a0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d024      	beq.n	80053b2 <ESP_Upkeep+0x62>
 8005368:	f008 fc2e 	bl	800dbc8 <GetVerboseLevel>
 800536c:	0003      	movs	r3, r0
 800536e:	2b03      	cmp	r3, #3
 8005370:	d91f      	bls.n	80053b2 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8005372:	4bde      	ldr	r3, [pc, #888]	@ (80056ec <ESP_Upkeep+0x39c>)
 8005374:	781a      	ldrb	r2, [r3, #0]
 8005376:	4bde      	ldr	r3, [pc, #888]	@ (80056f0 <ESP_Upkeep+0x3a0>)
 8005378:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800537a:	4bdd      	ldr	r3, [pc, #884]	@ (80056f0 <ESP_Upkeep+0x3a0>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b03      	cmp	r3, #3
 8005380:	d103      	bne.n	800538a <ESP_Upkeep+0x3a>
 8005382:	4bdc      	ldr	r3, [pc, #880]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b0e      	cmp	r3, #14
 8005388:	d013      	beq.n	80053b2 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800538a:	4bd9      	ldr	r3, [pc, #868]	@ (80056f0 <ESP_Upkeep+0x3a0>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	001d      	movs	r5, r3
 8005390:	4bd8      	ldr	r3, [pc, #864]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	0018      	movs	r0, r3
 8005396:	4bd8      	ldr	r3, [pc, #864]	@ (80056f8 <ESP_Upkeep+0x3a8>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	001c      	movs	r4, r3
 800539c:	4bd7      	ldr	r3, [pc, #860]	@ (80056fc <ESP_Upkeep+0x3ac>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	4ad7      	ldr	r2, [pc, #860]	@ (8005700 <ESP_Upkeep+0x3b0>)
 80053a2:	49d8      	ldr	r1, [pc, #864]	@ (8005704 <ESP_Upkeep+0x3b4>)
 80053a4:	9302      	str	r3, [sp, #8]
 80053a6:	9401      	str	r4, [sp, #4]
 80053a8:	9000      	str	r0, [sp, #0]
 80053aa:	002b      	movs	r3, r5
 80053ac:	2003      	movs	r0, #3
 80053ae:	f008 fb91 	bl	800dad4 <CreateLine>
    }
  }
  switch (EspState) {
 80053b2:	4bce      	ldr	r3, [pc, #824]	@ (80056ec <ESP_Upkeep+0x39c>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d901      	bls.n	80053be <ESP_Upkeep+0x6e>
 80053ba:	f000 fc0c 	bl	8005bd6 <ESP_Upkeep+0x886>
 80053be:	009a      	lsls	r2, r3, #2
 80053c0:	4bd1      	ldr	r3, [pc, #836]	@ (8005708 <ESP_Upkeep+0x3b8>)
 80053c2:	18d3      	adds	r3, r2, r3
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80053c8:	4bc8      	ldr	r3, [pc, #800]	@ (80056ec <ESP_Upkeep+0x39c>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
      break;
 80053ce:	f000 fc1b 	bl	8005c08 <ESP_Upkeep+0x8b8>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 80053d2:	4bce      	ldr	r3, [pc, #824]	@ (800570c <ESP_Upkeep+0x3bc>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	4053      	eors	r3, r2
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d036      	beq.n	800544e <ESP_Upkeep+0xfe>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	48ca      	ldr	r0, [pc, #808]	@ (8005710 <ESP_Upkeep+0x3c0>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	0019      	movs	r1, r3
 80053ea:	f00a fa5a 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053ee:	2001      	movs	r0, #1
 80053f0:	f008 ffd0 	bl	800e394 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	48c5      	ldr	r0, [pc, #788]	@ (8005710 <ESP_Upkeep+0x3c0>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	0019      	movs	r1, r3
 80053fe:	f00a fa50 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005402:	2001      	movs	r0, #1
 8005404:	f008 ffc6 	bl	800e394 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005408:	4bc2      	ldr	r3, [pc, #776]	@ (8005714 <ESP_Upkeep+0x3c4>)
 800540a:	2200      	movs	r2, #0
 800540c:	2101      	movs	r1, #1
 800540e:	0018      	movs	r0, r3
 8005410:	f00a fa47 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005414:	2001      	movs	r0, #1
 8005416:	f008 ffbd 	bl	800e394 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800541a:	4bbe      	ldr	r3, [pc, #760]	@ (8005714 <ESP_Upkeep+0x3c4>)
 800541c:	2201      	movs	r2, #1
 800541e:	2102      	movs	r1, #2
 8005420:	0018      	movs	r0, r3
 8005422:	f00a fa3e 	bl	800f8a2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005426:	2001      	movs	r0, #1
 8005428:	f008 ffb4 	bl	800e394 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800542c:	4bb9      	ldr	r3, [pc, #740]	@ (8005714 <ESP_Upkeep+0x3c4>)
 800542e:	2201      	movs	r2, #1
 8005430:	2101      	movs	r1, #1
 8005432:	0018      	movs	r0, r3
 8005434:	f00a fa35 	bl	800f8a2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005438:	f008 ffa2 	bl	800e380 <HAL_GetTick>
 800543c:	0003      	movs	r3, r0
 800543e:	22af      	movs	r2, #175	@ 0xaf
 8005440:	0092      	lsls	r2, r2, #2
 8005442:	189a      	adds	r2, r3, r2
 8005444:	4bb4      	ldr	r3, [pc, #720]	@ (8005718 <ESP_Upkeep+0x3c8>)
 8005446:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005448:	4bb0      	ldr	r3, [pc, #704]	@ (800570c <ESP_Upkeep+0x3bc>)
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	005a      	lsls	r2, r3, #1
 8005452:	4bb2      	ldr	r3, [pc, #712]	@ (800571c <ESP_Upkeep+0x3cc>)
 8005454:	0011      	movs	r1, r2
 8005456:	0018      	movs	r0, r3
 8005458:	f7fe fb22 	bl	8003aa0 <ESP_Receive>
 800545c:	1e03      	subs	r3, r0, #0
 800545e:	d101      	bne.n	8005464 <ESP_Upkeep+0x114>
 8005460:	f000 fbc5 	bl	8005bee <ESP_Upkeep+0x89e>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005464:	4ba1      	ldr	r3, [pc, #644]	@ (80056ec <ESP_Upkeep+0x39c>)
 8005466:	220f      	movs	r2, #15
 8005468:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800546a:	f008 ff89 	bl	800e380 <HAL_GetTick>
 800546e:	0003      	movs	r3, r0
 8005470:	22fa      	movs	r2, #250	@ 0xfa
 8005472:	00d2      	lsls	r2, r2, #3
 8005474:	189a      	adds	r2, r3, r2
 8005476:	4baa      	ldr	r3, [pc, #680]	@ (8005720 <ESP_Upkeep+0x3d0>)
 8005478:	601a      	str	r2, [r3, #0]
      }
      break;
 800547a:	f000 fbb8 	bl	8005bee <ESP_Upkeep+0x89e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800547e:	2001      	movs	r0, #1
 8005480:	f7ff fb46 	bl	8004b10 <DMA_ProcessBuffer>
 8005484:	0003      	movs	r3, r0
 8005486:	001a      	movs	r2, r3
 8005488:	4ba6      	ldr	r3, [pc, #664]	@ (8005724 <ESP_Upkeep+0x3d4>)
 800548a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800548c:	4ba5      	ldr	r3, [pc, #660]	@ (8005724 <ESP_Upkeep+0x3d4>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	1dbc      	adds	r4, r7, #6
 8005492:	2101      	movs	r1, #1
 8005494:	0018      	movs	r0, r3
 8005496:	f7ff fc3b 	bl	8004d10 <ATCompare>
 800549a:	0003      	movs	r3, r0
 800549c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800549e:	1dbb      	adds	r3, r7, #6
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <ESP_Upkeep+0x168>
 80054a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005720 <ESP_Upkeep+0x3d0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f008 fabc 	bl	800da28 <TimestampIsReached>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d101      	bne.n	80054b8 <ESP_Upkeep+0x168>
 80054b4:	f000 fb9d 	bl	8005bf2 <ESP_Upkeep+0x8a2>
          EspState = ESP_STATE_MODE_SELECT;
 80054b8:	4b8c      	ldr	r3, [pc, #560]	@ (80056ec <ESP_Upkeep+0x39c>)
 80054ba:	220b      	movs	r2, #11
 80054bc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80054be:	f000 fb98 	bl	8005bf2 <ESP_Upkeep+0x8a2>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 80054c2:	4b99      	ldr	r3, [pc, #612]	@ (8005728 <ESP_Upkeep+0x3d8>)
 80054c4:	2209      	movs	r2, #9
 80054c6:	2114      	movs	r1, #20
 80054c8:	0018      	movs	r0, r3
 80054ca:	f01a f9b1 	bl	801f830 <memset>
      if(!InitIsDone || WifiReset){
 80054ce:	4b97      	ldr	r3, [pc, #604]	@ (800572c <ESP_Upkeep+0x3dc>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2201      	movs	r2, #1
 80054d4:	4053      	eors	r3, r2
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <ESP_Upkeep+0x194>
 80054dc:	4b94      	ldr	r3, [pc, #592]	@ (8005730 <ESP_Upkeep+0x3e0>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01a      	beq.n	800551a <ESP_Upkeep+0x1ca>
        memcpy(ATCommandArray, AT_INIT, 7);
 80054e4:	4b90      	ldr	r3, [pc, #576]	@ (8005728 <ESP_Upkeep+0x3d8>)
 80054e6:	4a93      	ldr	r2, [pc, #588]	@ (8005734 <ESP_Upkeep+0x3e4>)
 80054e8:	6811      	ldr	r1, [r2, #0]
 80054ea:	6019      	str	r1, [r3, #0]
 80054ec:	8891      	ldrh	r1, [r2, #4]
 80054ee:	8099      	strh	r1, [r3, #4]
 80054f0:	7992      	ldrb	r2, [r2, #6]
 80054f2:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80054f4:	4b7d      	ldr	r3, [pc, #500]	@ (80056ec <ESP_Upkeep+0x39c>)
 80054f6:	2204      	movs	r2, #4
 80054f8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005738 <ESP_Upkeep+0x3e8>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005500:	4b7d      	ldr	r3, [pc, #500]	@ (80056f8 <ESP_Upkeep+0x3a8>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005506:	4b8c      	ldr	r3, [pc, #560]	@ (8005738 <ESP_Upkeep+0x3e8>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	001a      	movs	r2, r3
 800550c:	4b86      	ldr	r3, [pc, #536]	@ (8005728 <ESP_Upkeep+0x3d8>)
 800550e:	5c9a      	ldrb	r2, [r3, r2]
 8005510:	4b78      	ldr	r3, [pc, #480]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 8005512:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005514:	4b79      	ldr	r3, [pc, #484]	@ (80056fc <ESP_Upkeep+0x3ac>)
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800551a:	4b84      	ldr	r3, [pc, #528]	@ (800572c <ESP_Upkeep+0x3dc>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01f      	beq.n	8005562 <ESP_Upkeep+0x212>
 8005522:	4b86      	ldr	r3, [pc, #536]	@ (800573c <ESP_Upkeep+0x3ec>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	4053      	eors	r3, r2
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d018      	beq.n	8005562 <ESP_Upkeep+0x212>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005530:	4b7d      	ldr	r3, [pc, #500]	@ (8005728 <ESP_Upkeep+0x3d8>)
 8005532:	4a83      	ldr	r2, [pc, #524]	@ (8005740 <ESP_Upkeep+0x3f0>)
 8005534:	6811      	ldr	r1, [r2, #0]
 8005536:	6019      	str	r1, [r3, #0]
 8005538:	8892      	ldrh	r2, [r2, #4]
 800553a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800553c:	4b6b      	ldr	r3, [pc, #428]	@ (80056ec <ESP_Upkeep+0x39c>)
 800553e:	2204      	movs	r2, #4
 8005540:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005542:	4b7d      	ldr	r3, [pc, #500]	@ (8005738 <ESP_Upkeep+0x3e8>)
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005548:	4b6b      	ldr	r3, [pc, #428]	@ (80056f8 <ESP_Upkeep+0x3a8>)
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800554e:	4b7a      	ldr	r3, [pc, #488]	@ (8005738 <ESP_Upkeep+0x3e8>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	001a      	movs	r2, r3
 8005554:	4b74      	ldr	r3, [pc, #464]	@ (8005728 <ESP_Upkeep+0x3d8>)
 8005556:	5c9a      	ldrb	r2, [r3, r2]
 8005558:	4b66      	ldr	r3, [pc, #408]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 800555a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800555c:	4b67      	ldr	r3, [pc, #412]	@ (80056fc <ESP_Upkeep+0x3ac>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005562:	4b72      	ldr	r3, [pc, #456]	@ (800572c <ESP_Upkeep+0x3dc>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d021      	beq.n	80055ae <ESP_Upkeep+0x25e>
 800556a:	4b74      	ldr	r3, [pc, #464]	@ (800573c <ESP_Upkeep+0x3ec>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01d      	beq.n	80055ae <ESP_Upkeep+0x25e>
 8005572:	4b74      	ldr	r3, [pc, #464]	@ (8005744 <ESP_Upkeep+0x3f4>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2201      	movs	r2, #1
 8005578:	4053      	eors	r3, r2
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d016      	beq.n	80055ae <ESP_Upkeep+0x25e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005580:	4b71      	ldr	r3, [pc, #452]	@ (8005748 <ESP_Upkeep+0x3f8>)
 8005582:	881a      	ldrh	r2, [r3, #0]
 8005584:	4b68      	ldr	r3, [pc, #416]	@ (8005728 <ESP_Upkeep+0x3d8>)
 8005586:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005588:	4b58      	ldr	r3, [pc, #352]	@ (80056ec <ESP_Upkeep+0x39c>)
 800558a:	2204      	movs	r2, #4
 800558c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800558e:	4b6a      	ldr	r3, [pc, #424]	@ (8005738 <ESP_Upkeep+0x3e8>)
 8005590:	2200      	movs	r2, #0
 8005592:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005594:	4b58      	ldr	r3, [pc, #352]	@ (80056f8 <ESP_Upkeep+0x3a8>)
 8005596:	2204      	movs	r2, #4
 8005598:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800559a:	4b67      	ldr	r3, [pc, #412]	@ (8005738 <ESP_Upkeep+0x3e8>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	001a      	movs	r2, r3
 80055a0:	4b61      	ldr	r3, [pc, #388]	@ (8005728 <ESP_Upkeep+0x3d8>)
 80055a2:	5c9a      	ldrb	r2, [r3, r2]
 80055a4:	4b53      	ldr	r3, [pc, #332]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 80055a6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055a8:	4b54      	ldr	r3, [pc, #336]	@ (80056fc <ESP_Upkeep+0x3ac>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80055ae:	4b5f      	ldr	r3, [pc, #380]	@ (800572c <ESP_Upkeep+0x3dc>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02e      	beq.n	8005614 <ESP_Upkeep+0x2c4>
 80055b6:	4b61      	ldr	r3, [pc, #388]	@ (800573c <ESP_Upkeep+0x3ec>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02a      	beq.n	8005614 <ESP_Upkeep+0x2c4>
 80055be:	4b61      	ldr	r3, [pc, #388]	@ (8005744 <ESP_Upkeep+0x3f4>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d026      	beq.n	8005614 <ESP_Upkeep+0x2c4>
 80055c6:	4b61      	ldr	r3, [pc, #388]	@ (800574c <ESP_Upkeep+0x3fc>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	4053      	eors	r3, r2
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01f      	beq.n	8005614 <ESP_Upkeep+0x2c4>
        memcpy(ATCommandArray, AT_SEND, 3);
 80055d4:	4b54      	ldr	r3, [pc, #336]	@ (8005728 <ESP_Upkeep+0x3d8>)
 80055d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005750 <ESP_Upkeep+0x400>)
 80055d8:	8811      	ldrh	r1, [r2, #0]
 80055da:	8019      	strh	r1, [r3, #0]
 80055dc:	7892      	ldrb	r2, [r2, #2]
 80055de:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80055e0:	4b42      	ldr	r3, [pc, #264]	@ (80056ec <ESP_Upkeep+0x39c>)
 80055e2:	2204      	movs	r2, #4
 80055e4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80055e6:	4b54      	ldr	r3, [pc, #336]	@ (8005738 <ESP_Upkeep+0x3e8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80055ec:	4b42      	ldr	r3, [pc, #264]	@ (80056f8 <ESP_Upkeep+0x3a8>)
 80055ee:	2202      	movs	r2, #2
 80055f0:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80055f2:	f008 fec5 	bl	800e380 <HAL_GetTick>
 80055f6:	0002      	movs	r2, r0
 80055f8:	4b56      	ldr	r3, [pc, #344]	@ (8005754 <ESP_Upkeep+0x404>)
 80055fa:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80055fc:	f007 fba8 	bl	800cd50 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005600:	4b4d      	ldr	r3, [pc, #308]	@ (8005738 <ESP_Upkeep+0x3e8>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	001a      	movs	r2, r3
 8005606:	4b48      	ldr	r3, [pc, #288]	@ (8005728 <ESP_Upkeep+0x3d8>)
 8005608:	5c9a      	ldrb	r2, [r3, r2]
 800560a:	4b3a      	ldr	r3, [pc, #232]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 800560c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800560e:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <ESP_Upkeep+0x3ac>)
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005614:	4b50      	ldr	r3, [pc, #320]	@ (8005758 <ESP_Upkeep+0x408>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d022      	beq.n	8005662 <ESP_Upkeep+0x312>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800561c:	4b42      	ldr	r3, [pc, #264]	@ (8005728 <ESP_Upkeep+0x3d8>)
 800561e:	4a4f      	ldr	r2, [pc, #316]	@ (800575c <ESP_Upkeep+0x40c>)
 8005620:	6811      	ldr	r1, [r2, #0]
 8005622:	6019      	str	r1, [r3, #0]
 8005624:	7912      	ldrb	r2, [r2, #4]
 8005626:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8005628:	4a4d      	ldr	r2, [pc, #308]	@ (8005760 <ESP_Upkeep+0x410>)
 800562a:	4b36      	ldr	r3, [pc, #216]	@ (8005704 <ESP_Upkeep+0x3b4>)
 800562c:	0019      	movs	r1, r3
 800562e:	2003      	movs	r0, #3
 8005630:	f008 fa50 	bl	800dad4 <CreateLine>
        DisableConnectedDevices();
 8005634:	f002 ff58 	bl	80084e8 <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 8005638:	4b2c      	ldr	r3, [pc, #176]	@ (80056ec <ESP_Upkeep+0x39c>)
 800563a:	2204      	movs	r2, #4
 800563c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800563e:	4b3e      	ldr	r3, [pc, #248]	@ (8005738 <ESP_Upkeep+0x3e8>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005644:	4b2c      	ldr	r3, [pc, #176]	@ (80056f8 <ESP_Upkeep+0x3a8>)
 8005646:	2203      	movs	r2, #3
 8005648:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800564a:	f007 fb81 	bl	800cd50 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800564e:	4b3a      	ldr	r3, [pc, #232]	@ (8005738 <ESP_Upkeep+0x3e8>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	001a      	movs	r2, r3
 8005654:	4b34      	ldr	r3, [pc, #208]	@ (8005728 <ESP_Upkeep+0x3d8>)
 8005656:	5c9a      	ldrb	r2, [r3, r2]
 8005658:	4b26      	ldr	r3, [pc, #152]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 800565a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800565c:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <ESP_Upkeep+0x3ac>)
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005662:	4b32      	ldr	r3, [pc, #200]	@ (800572c <ESP_Upkeep+0x3dc>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d100      	bne.n	800566c <ESP_Upkeep+0x31c>
 800566a:	e2c4      	b.n	8005bf6 <ESP_Upkeep+0x8a6>
 800566c:	4b33      	ldr	r3, [pc, #204]	@ (800573c <ESP_Upkeep+0x3ec>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d100      	bne.n	8005676 <ESP_Upkeep+0x326>
 8005674:	e2bf      	b.n	8005bf6 <ESP_Upkeep+0x8a6>
 8005676:	4b33      	ldr	r3, [pc, #204]	@ (8005744 <ESP_Upkeep+0x3f4>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d100      	bne.n	8005680 <ESP_Upkeep+0x330>
 800567e:	e2ba      	b.n	8005bf6 <ESP_Upkeep+0x8a6>
 8005680:	4b32      	ldr	r3, [pc, #200]	@ (800574c <ESP_Upkeep+0x3fc>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d100      	bne.n	800568a <ESP_Upkeep+0x33a>
 8005688:	e2b5      	b.n	8005bf6 <ESP_Upkeep+0x8a6>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800568a:	4b36      	ldr	r3, [pc, #216]	@ (8005764 <ESP_Upkeep+0x414>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b26      	ldr	r3, [pc, #152]	@ (8005728 <ESP_Upkeep+0x3d8>)
 8005690:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005692:	4b16      	ldr	r3, [pc, #88]	@ (80056ec <ESP_Upkeep+0x39c>)
 8005694:	2204      	movs	r2, #4
 8005696:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005698:	4b27      	ldr	r3, [pc, #156]	@ (8005738 <ESP_Upkeep+0x3e8>)
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 800569e:	4b16      	ldr	r3, [pc, #88]	@ (80056f8 <ESP_Upkeep+0x3a8>)
 80056a0:	2205      	movs	r2, #5
 80056a2:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80056a4:	f008 fe6c 	bl	800e380 <HAL_GetTick>
 80056a8:	0002      	movs	r2, r0
 80056aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005754 <ESP_Upkeep+0x404>)
 80056ac:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80056ae:	f007 fb4f 	bl	800cd50 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80056b2:	4b21      	ldr	r3, [pc, #132]	@ (8005738 <ESP_Upkeep+0x3e8>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	001a      	movs	r2, r3
 80056b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <ESP_Upkeep+0x3d8>)
 80056ba:	5c9a      	ldrb	r2, [r3, r2]
 80056bc:	4b0d      	ldr	r3, [pc, #52]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 80056be:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056c0:	4b0e      	ldr	r3, [pc, #56]	@ (80056fc <ESP_Upkeep+0x3ac>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
      }
    break;
 80056c6:	e296      	b.n	8005bf6 <ESP_Upkeep+0x8a6>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 80056c8:	4b0a      	ldr	r3, [pc, #40]	@ (80056f4 <ESP_Upkeep+0x3a4>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	1dfc      	adds	r4, r7, #7
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7ff fb60 	bl	8004d94 <AT_Send>
 80056d4:	0003      	movs	r3, r0
 80056d6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d100      	bne.n	80056e2 <ESP_Upkeep+0x392>
 80056e0:	e28b      	b.n	8005bfa <ESP_Upkeep+0x8aa>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80056e2:	4b02      	ldr	r3, [pc, #8]	@ (80056ec <ESP_Upkeep+0x39c>)
 80056e4:	2203      	movs	r2, #3
 80056e6:	701a      	strb	r2, [r3, #0]
        }
    break;
 80056e8:	e287      	b.n	8005bfa <ESP_Upkeep+0x8aa>
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	20000028 	.word	0x20000028
 80056f0:	20000002 	.word	0x20000002
 80056f4:	200009a2 	.word	0x200009a2
 80056f8:	200009a3 	.word	0x200009a3
 80056fc:	200009a1 	.word	0x200009a1
 8005700:	08023054 	.word	0x08023054
 8005704:	08022798 	.word	0x08022798
 8005708:	080246ac 	.word	0x080246ac
 800570c:	20000548 	.word	0x20000548
 8005710:	50000800 	.word	0x50000800
 8005714:	50001c00 	.word	0x50001c00
 8005718:	20000994 	.word	0x20000994
 800571c:	20000448 	.word	0x20000448
 8005720:	20000aa8 	.word	0x20000aa8
 8005724:	2000002a 	.word	0x2000002a
 8005728:	20000984 	.word	0x20000984
 800572c:	20000549 	.word	0x20000549
 8005730:	2000054a 	.word	0x2000054a
 8005734:	20000004 	.word	0x20000004
 8005738:	2000098e 	.word	0x2000098e
 800573c:	2000054c 	.word	0x2000054c
 8005740:	20000014 	.word	0x20000014
 8005744:	2000054d 	.word	0x2000054d
 8005748:	20000010 	.word	0x20000010
 800574c:	20000001 	.word	0x20000001
 8005750:	2000000c 	.word	0x2000000c
 8005754:	2000055c 	.word	0x2000055c
 8005758:	2000054b 	.word	0x2000054b
 800575c:	2000001c 	.word	0x2000001c
 8005760:	08023080 	.word	0x08023080
 8005764:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005768:	4be0      	ldr	r3, [pc, #896]	@ (8005aec <ESP_Upkeep+0x79c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0018      	movs	r0, r3
 800576e:	f008 f95b 	bl	800da28 <TimestampIsReached>
 8005772:	1e03      	subs	r3, r0, #0
 8005774:	d100      	bne.n	8005778 <ESP_Upkeep+0x428>
 8005776:	e242      	b.n	8005bfe <ESP_Upkeep+0x8ae>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005778:	4bdd      	ldr	r3, [pc, #884]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	0018      	movs	r0, r3
 800577e:	f7ff f9c7 	bl	8004b10 <DMA_ProcessBuffer>
 8005782:	0003      	movs	r3, r0
 8005784:	001a      	movs	r2, r3
 8005786:	4bdb      	ldr	r3, [pc, #876]	@ (8005af4 <ESP_Upkeep+0x7a4>)
 8005788:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800578a:	4bda      	ldr	r3, [pc, #872]	@ (8005af4 <ESP_Upkeep+0x7a4>)
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	4bd8      	ldr	r3, [pc, #864]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	1d7c      	adds	r4, r7, #5
 8005794:	0019      	movs	r1, r3
 8005796:	0010      	movs	r0, r2
 8005798:	f7ff faba 	bl	8004d10 <ATCompare>
 800579c:	0003      	movs	r3, r0
 800579e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80057a0:	4bd4      	ldr	r3, [pc, #848]	@ (8005af4 <ESP_Upkeep+0x7a4>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d139      	bne.n	800581c <ESP_Upkeep+0x4cc>
          if(ATCommand == AT_SENDDATA){
 80057a8:	4bd3      	ldr	r3, [pc, #844]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b0f      	cmp	r3, #15
 80057ae:	d108      	bne.n	80057c2 <ESP_Upkeep+0x472>
            ATCommand = AT_HTTPCPOST;
 80057b0:	4bd1      	ldr	r3, [pc, #836]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 80057b2:	220e      	movs	r2, #14
 80057b4:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80057b6:	4bce      	ldr	r3, [pc, #824]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 80057b8:	2202      	movs	r2, #2
 80057ba:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80057bc:	4bcf      	ldr	r3, [pc, #828]	@ (8005afc <ESP_Upkeep+0x7ac>)
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80057c2:	4bcf      	ldr	r3, [pc, #828]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 80057c4:	2204      	movs	r2, #4
 80057c6:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 80057c8:	4bce      	ldr	r3, [pc, #824]	@ (8005b04 <ESP_Upkeep+0x7b4>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	4bcc      	ldr	r3, [pc, #816]	@ (8005b04 <ESP_Upkeep+0x7b4>)
 80057d2:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 80057d4:	4bcb      	ldr	r3, [pc, #812]	@ (8005b04 <ESP_Upkeep+0x7b4>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d11f      	bne.n	800581c <ESP_Upkeep+0x4cc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80057dc:	f008 fdd0 	bl	800e380 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	4ac9      	ldr	r2, [pc, #804]	@ (8005b08 <ESP_Upkeep+0x7b8>)
 80057e4:	189a      	adds	r2, r3, r2
 80057e6:	4bc1      	ldr	r3, [pc, #772]	@ (8005aec <ESP_Upkeep+0x79c>)
 80057e8:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80057ea:	4bc8      	ldr	r3, [pc, #800]	@ (8005b0c <ESP_Upkeep+0x7bc>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80057f0:	f007 fac6 	bl	800cd80 <ResetESPIndicator>
            clearDMABuffer();
 80057f4:	f7ff fa7e 	bl	8004cf4 <clearDMABuffer>
            stop = HAL_GetTick();
 80057f8:	f008 fdc2 	bl	800e380 <HAL_GetTick>
 80057fc:	0002      	movs	r2, r0
 80057fe:	4bc4      	ldr	r3, [pc, #784]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 8005800:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005802:	4bc3      	ldr	r3, [pc, #780]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4bc3      	ldr	r3, [pc, #780]	@ (8005b14 <ESP_Upkeep+0x7c4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	4ac2      	ldr	r2, [pc, #776]	@ (8005b18 <ESP_Upkeep+0x7c8>)
 800580e:	49c3      	ldr	r1, [pc, #780]	@ (8005b1c <ESP_Upkeep+0x7cc>)
 8005810:	2001      	movs	r0, #1
 8005812:	f008 f95f 	bl	800dad4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005816:	4bba      	ldr	r3, [pc, #744]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005818:	220d      	movs	r2, #13
 800581a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800581c:	4bb5      	ldr	r3, [pc, #724]	@ (8005af4 <ESP_Upkeep+0x7a4>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d106      	bne.n	8005832 <ESP_Upkeep+0x4e2>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005824:	f008 fdac 	bl	800e380 <HAL_GetTick>
 8005828:	0003      	movs	r3, r0
 800582a:	330a      	adds	r3, #10
 800582c:	001a      	movs	r2, r3
 800582e:	4baf      	ldr	r3, [pc, #700]	@ (8005aec <ESP_Upkeep+0x79c>)
 8005830:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005832:	4bb0      	ldr	r3, [pc, #704]	@ (8005af4 <ESP_Upkeep+0x7a4>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b0a      	cmp	r3, #10
 8005838:	d106      	bne.n	8005848 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 800583a:	f008 fda1 	bl	800e380 <HAL_GetTick>
 800583e:	0003      	movs	r3, r0
 8005840:	330a      	adds	r3, #10
 8005842:	001a      	movs	r2, r3
 8005844:	4ba9      	ldr	r3, [pc, #676]	@ (8005aec <ESP_Upkeep+0x79c>)
 8005846:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005848:	4baa      	ldr	r3, [pc, #680]	@ (8005af4 <ESP_Upkeep+0x7a4>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b06      	cmp	r3, #6
 800584e:	d146      	bne.n	80058de <ESP_Upkeep+0x58e>
          timeoutcntr++;
 8005850:	4bb3      	ldr	r3, [pc, #716]	@ (8005b20 <ESP_Upkeep+0x7d0>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	4bb1      	ldr	r3, [pc, #708]	@ (8005b20 <ESP_Upkeep+0x7d0>)
 800585a:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 800585c:	4bb0      	ldr	r3, [pc, #704]	@ (8005b20 <ESP_Upkeep+0x7d0>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d125      	bne.n	80058b0 <ESP_Upkeep+0x560>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005864:	f008 fd8c 	bl	800e380 <HAL_GetTick>
 8005868:	0003      	movs	r3, r0
 800586a:	4aa7      	ldr	r2, [pc, #668]	@ (8005b08 <ESP_Upkeep+0x7b8>)
 800586c:	189a      	adds	r2, r3, r2
 800586e:	4b9f      	ldr	r3, [pc, #636]	@ (8005aec <ESP_Upkeep+0x79c>)
 8005870:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005872:	4ba6      	ldr	r3, [pc, #664]	@ (8005b0c <ESP_Upkeep+0x7bc>)
 8005874:	2201      	movs	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005878:	f007 fa82 	bl	800cd80 <ResetESPIndicator>
            clearDMABuffer();
 800587c:	f7ff fa3a 	bl	8004cf4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005880:	f008 fd7e 	bl	800e380 <HAL_GetTick>
 8005884:	0002      	movs	r2, r0
 8005886:	4ba2      	ldr	r3, [pc, #648]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 8005888:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800588a:	4ba1      	ldr	r3, [pc, #644]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4ba1      	ldr	r3, [pc, #644]	@ (8005b14 <ESP_Upkeep+0x7c4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	4aa3      	ldr	r2, [pc, #652]	@ (8005b24 <ESP_Upkeep+0x7d4>)
 8005896:	49a1      	ldr	r1, [pc, #644]	@ (8005b1c <ESP_Upkeep+0x7cc>)
 8005898:	2001      	movs	r0, #1
 800589a:	f008 f91b 	bl	800dad4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800589e:	4b98      	ldr	r3, [pc, #608]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 80058a0:	220d      	movs	r2, #13
 80058a2:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 80058a4:	4b94      	ldr	r3, [pc, #592]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 80058a6:	2214      	movs	r2, #20
 80058a8:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 80058aa:	4b91      	ldr	r3, [pc, #580]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
          }
          if(ATCommand != AT_SENDDATA){
 80058b0:	4b91      	ldr	r3, [pc, #580]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b0f      	cmp	r3, #15
 80058b6:	d003      	beq.n	80058c0 <ESP_Upkeep+0x570>
            EspState = ESP_STATE_SEND;
 80058b8:	4b91      	ldr	r3, [pc, #580]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 80058ba:	2204      	movs	r2, #4
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e00e      	b.n	80058de <ESP_Upkeep+0x58e>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 80058c0:	4b8d      	ldr	r3, [pc, #564]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 80058c2:	220e      	movs	r2, #14
 80058c4:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 80058c6:	4b8d      	ldr	r3, [pc, #564]	@ (8005afc <ESP_Upkeep+0x7ac>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	4b8b      	ldr	r3, [pc, #556]	@ (8005afc <ESP_Upkeep+0x7ac>)
 80058d0:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80058d2:	4b87      	ldr	r3, [pc, #540]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 80058d4:	2202      	movs	r2, #2
 80058d6:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80058d8:	4b89      	ldr	r3, [pc, #548]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 80058da:	2204      	movs	r2, #4
 80058dc:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80058de:	1d7b      	adds	r3, r7, #5
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d100      	bne.n	80058e8 <ESP_Upkeep+0x598>
 80058e6:	e18a      	b.n	8005bfe <ESP_Upkeep+0x8ae>
          EspState = ESP_STATE_NEXT_AT;
 80058e8:	4b85      	ldr	r3, [pc, #532]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 80058ea:	2205      	movs	r2, #5
 80058ec:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80058ee:	e186      	b.n	8005bfe <ESP_Upkeep+0x8ae>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 80058f0:	4b82      	ldr	r3, [pc, #520]	@ (8005afc <ESP_Upkeep+0x7ac>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	4b80      	ldr	r3, [pc, #512]	@ (8005afc <ESP_Upkeep+0x7ac>)
 80058fa:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80058fc:	4b7f      	ldr	r3, [pc, #508]	@ (8005afc <ESP_Upkeep+0x7ac>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	001a      	movs	r2, r3
 8005902:	4b89      	ldr	r3, [pc, #548]	@ (8005b28 <ESP_Upkeep+0x7d8>)
 8005904:	5c9a      	ldrb	r2, [r3, r2]
 8005906:	4b7c      	ldr	r3, [pc, #496]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 8005908:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 800590a:	4b7b      	ldr	r3, [pc, #492]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d102      	bne.n	8005918 <ESP_Upkeep+0x5c8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005912:	4b77      	ldr	r3, [pc, #476]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005918:	4b77      	ldr	r3, [pc, #476]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b0e      	cmp	r3, #14
 800591e:	d102      	bne.n	8005926 <ESP_Upkeep+0x5d6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005920:	4b73      	ldr	r3, [pc, #460]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 8005922:	2202      	movs	r2, #2
 8005924:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005926:	4b74      	ldr	r3, [pc, #464]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b0e      	cmp	r3, #14
 800592c:	d006      	beq.n	800593c <ESP_Upkeep+0x5ec>
 800592e:	4b72      	ldr	r3, [pc, #456]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d002      	beq.n	800593c <ESP_Upkeep+0x5ec>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005936:	4b6e      	ldr	r3, [pc, #440]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 800593c:	4b6e      	ldr	r3, [pc, #440]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b11      	cmp	r3, #17
 8005942:	d102      	bne.n	800594a <ESP_Upkeep+0x5fa>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005944:	4b6a      	ldr	r3, [pc, #424]	@ (8005af0 <ESP_Upkeep+0x7a0>)
 8005946:	2205      	movs	r2, #5
 8005948:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 800594a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 800594c:	2204      	movs	r2, #4
 800594e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005950:	4b69      	ldr	r3, [pc, #420]	@ (8005af8 <ESP_Upkeep+0x7a8>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b14      	cmp	r3, #20
 8005956:	d000      	beq.n	800595a <ESP_Upkeep+0x60a>
 8005958:	e153      	b.n	8005c02 <ESP_Upkeep+0x8b2>
        if(Mode == AT_MODE_SEND){
 800595a:	4b74      	ldr	r3, [pc, #464]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d122      	bne.n	80059a8 <ESP_Upkeep+0x658>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005962:	f008 fd0d 	bl	800e380 <HAL_GetTick>
 8005966:	0003      	movs	r3, r0
 8005968:	4a67      	ldr	r2, [pc, #412]	@ (8005b08 <ESP_Upkeep+0x7b8>)
 800596a:	189a      	adds	r2, r3, r2
 800596c:	4b5f      	ldr	r3, [pc, #380]	@ (8005aec <ESP_Upkeep+0x79c>)
 800596e:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005970:	f007 fa06 	bl	800cd80 <ResetESPIndicator>
          clearDMABuffer();
 8005974:	f7ff f9be 	bl	8004cf4 <clearDMABuffer>
          stop = HAL_GetTick();
 8005978:	f008 fd02 	bl	800e380 <HAL_GetTick>
 800597c:	0002      	movs	r2, r0
 800597e:	4b64      	ldr	r3, [pc, #400]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 8005980:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005982:	4b63      	ldr	r3, [pc, #396]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b63      	ldr	r3, [pc, #396]	@ (8005b14 <ESP_Upkeep+0x7c4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	4a68      	ldr	r2, [pc, #416]	@ (8005b30 <ESP_Upkeep+0x7e0>)
 800598e:	4969      	ldr	r1, [pc, #420]	@ (8005b34 <ESP_Upkeep+0x7e4>)
 8005990:	2002      	movs	r0, #2
 8005992:	f008 f89f 	bl	800dad4 <CreateLine>
          showTime();
 8005996:	f000 fccd 	bl	8006334 <showTime>
          ESPTransmitDone = true;
 800599a:	4b5c      	ldr	r3, [pc, #368]	@ (8005b0c <ESP_Upkeep+0x7bc>)
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 80059a0:	4b57      	ldr	r3, [pc, #348]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 80059a2:	220d      	movs	r2, #13
 80059a4:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80059a6:	e12c      	b.n	8005c02 <ESP_Upkeep+0x8b2>
        else if (Mode == AT_MODE_GETTIME) {
 80059a8:	4b60      	ldr	r3, [pc, #384]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	d12e      	bne.n	8005a0e <ESP_Upkeep+0x6be>
            setTime = false;
 80059b0:	4b61      	ldr	r3, [pc, #388]	@ (8005b38 <ESP_Upkeep+0x7e8>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every  hour
 80059b6:	f008 fce3 	bl	800e380 <HAL_GetTick>
 80059ba:	0003      	movs	r3, r0
 80059bc:	4a5f      	ldr	r2, [pc, #380]	@ (8005b3c <ESP_Upkeep+0x7ec>)
 80059be:	189a      	adds	r2, r3, r2
 80059c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005b40 <ESP_Upkeep+0x7f0>)
 80059c2:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 80059c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b40 <ESP_Upkeep+0x7f0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005b44 <ESP_Upkeep+0x7f4>)
 80059ca:	495a      	ldr	r1, [pc, #360]	@ (8005b34 <ESP_Upkeep+0x7e4>)
 80059cc:	2002      	movs	r0, #2
 80059ce:	f008 f881 	bl	800dad4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 80059d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005b48 <ESP_Upkeep+0x7f8>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b45      	ldr	r3, [pc, #276]	@ (8005aec <ESP_Upkeep+0x79c>)
 80059d8:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 80059da:	f007 f9d1 	bl	800cd80 <ResetESPIndicator>
            clearDMABuffer();
 80059de:	f7ff f989 	bl	8004cf4 <clearDMABuffer>
            stop = HAL_GetTick();
 80059e2:	f008 fccd 	bl	800e380 <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	4b49      	ldr	r3, [pc, #292]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 80059ea:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 80059ec:	4b48      	ldr	r3, [pc, #288]	@ (8005b10 <ESP_Upkeep+0x7c0>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b48      	ldr	r3, [pc, #288]	@ (8005b14 <ESP_Upkeep+0x7c4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	4a55      	ldr	r2, [pc, #340]	@ (8005b4c <ESP_Upkeep+0x7fc>)
 80059f8:	494e      	ldr	r1, [pc, #312]	@ (8005b34 <ESP_Upkeep+0x7e4>)
 80059fa:	2002      	movs	r0, #2
 80059fc:	f008 f86a 	bl	800dad4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005a00:	4b3f      	ldr	r3, [pc, #252]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005a02:	220d      	movs	r2, #13
 8005a04:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005a06:	4b49      	ldr	r3, [pc, #292]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 8005a08:	2202      	movs	r2, #2
 8005a0a:	701a      	strb	r2, [r3, #0]
    break;
 8005a0c:	e0f9      	b.n	8005c02 <ESP_Upkeep+0x8b2>
          EspState = ESP_STATE_RESET;
 8005a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005a10:	2209      	movs	r2, #9
 8005a12:	701a      	strb	r2, [r3, #0]
    break;
 8005a14:	e0f5      	b.n	8005c02 <ESP_Upkeep+0x8b2>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005a16:	4b4e      	ldr	r3, [pc, #312]	@ (8005b50 <ESP_Upkeep+0x800>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b54 <ESP_Upkeep+0x804>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2101      	movs	r1, #1
 8005a22:	0018      	movs	r0, r3
 8005a24:	f009 ff3d 	bl	800f8a2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f008 fcb3 	bl	800e394 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	4849      	ldr	r0, [pc, #292]	@ (8005b58 <ESP_Upkeep+0x808>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	0019      	movs	r1, r3
 8005a38:	f009 ff33 	bl	800f8a2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	f008 fca9 	bl	800e394 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005a42:	4b44      	ldr	r3, [pc, #272]	@ (8005b54 <ESP_Upkeep+0x804>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	2102      	movs	r1, #2
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f009 ff2a 	bl	800f8a2 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005a50:	2209      	movs	r2, #9
 8005a52:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005a54:	2001      	movs	r0, #1
 8005a56:	f008 fc9d 	bl	800e394 <HAL_Delay>
      errorcntr = 0;
 8005a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005b04 <ESP_Upkeep+0x7b4>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
      break;
 8005a60:	e0d2      	b.n	8005c08 <ESP_Upkeep+0x8b8>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005a62:	4b22      	ldr	r3, [pc, #136]	@ (8005aec <ESP_Upkeep+0x79c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f007 ffde 	bl	800da28 <TimestampIsReached>
 8005a6c:	1e03      	subs	r3, r0, #0
 8005a6e:	d104      	bne.n	8005a7a <ESP_Upkeep+0x72a>
 8005a70:	4b3a      	ldr	r3, [pc, #232]	@ (8005b5c <ESP_Upkeep+0x80c>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d100      	bne.n	8005a7a <ESP_Upkeep+0x72a>
 8005a78:	e07c      	b.n	8005b74 <ESP_Upkeep+0x824>
        ESPTransmitDone = false;
 8005a7a:	4b24      	ldr	r3, [pc, #144]	@ (8005b0c <ESP_Upkeep+0x7bc>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005a80:	4b2a      	ldr	r3, [pc, #168]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <ESP_Upkeep+0x744>
          InitIsDone = true;
 8005a88:	4b35      	ldr	r3, [pc, #212]	@ (8005b60 <ESP_Upkeep+0x810>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005a90:	220b      	movs	r2, #11
 8005a92:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005a94:	4b25      	ldr	r3, [pc, #148]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d108      	bne.n	8005aae <ESP_Upkeep+0x75e>
          ConnectionMade = true;
 8005a9c:	4b31      	ldr	r3, [pc, #196]	@ (8005b64 <ESP_Upkeep+0x814>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005aa2:	4b31      	ldr	r3, [pc, #196]	@ (8005b68 <ESP_Upkeep+0x818>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005aa8:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005aaa:	220b      	movs	r2, #11
 8005aac:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005aae:	4b1f      	ldr	r3, [pc, #124]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d102      	bne.n	8005abc <ESP_Upkeep+0x76c>
          EspState = ESP_STATE_INIT;
 8005ab6:	4b12      	ldr	r3, [pc, #72]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005ab8:	2202      	movs	r2, #2
 8005aba:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005abc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d108      	bne.n	8005ad6 <ESP_Upkeep+0x786>
          EspState = ESP_STATE_CONFIG;
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005ac6:	220e      	movs	r2, #14
 8005ac8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005aca:	4a28      	ldr	r2, [pc, #160]	@ (8005b6c <ESP_Upkeep+0x81c>)
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <ESP_Upkeep+0x7e4>)
 8005ace:	0019      	movs	r1, r3
 8005ad0:	2002      	movs	r0, #2
 8005ad2:	f007 ffff 	bl	800dad4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005ad6:	4b15      	ldr	r3, [pc, #84]	@ (8005b2c <ESP_Upkeep+0x7dc>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d163      	bne.n	8005ba6 <ESP_Upkeep+0x856>
          EspState = ESP_STATE_MODE_SELECT;
 8005ade:	4b08      	ldr	r3, [pc, #32]	@ (8005b00 <ESP_Upkeep+0x7b0>)
 8005ae0:	220b      	movs	r2, #11
 8005ae2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005ae4:	4b22      	ldr	r3, [pc, #136]	@ (8005b70 <ESP_Upkeep+0x820>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005aea:	e05c      	b.n	8005ba6 <ESP_Upkeep+0x856>
 8005aec:	20000994 	.word	0x20000994
 8005af0:	200009a1 	.word	0x200009a1
 8005af4:	2000002a 	.word	0x2000002a
 8005af8:	200009a2 	.word	0x200009a2
 8005afc:	2000098e 	.word	0x2000098e
 8005b00:	20000028 	.word	0x20000028
 8005b04:	2000098f 	.word	0x2000098f
 8005b08:	000493e0 	.word	0x000493e0
 8005b0c:	2000054f 	.word	0x2000054f
 8005b10:	20000560 	.word	0x20000560
 8005b14:	2000055c 	.word	0x2000055c
 8005b18:	080230b0 	.word	0x080230b0
 8005b1c:	080227bc 	.word	0x080227bc
 8005b20:	20000990 	.word	0x20000990
 8005b24:	080230e4 	.word	0x080230e4
 8005b28:	20000984 	.word	0x20000984
 8005b2c:	200009a3 	.word	0x200009a3
 8005b30:	08023114 	.word	0x08023114
 8005b34:	0802312c 	.word	0x0802312c
 8005b38:	20000001 	.word	0x20000001
 8005b3c:	001096de 	.word	0x001096de
 8005b40:	20000998 	.word	0x20000998
 8005b44:	08023130 	.word	0x08023130
 8005b48:	2000099c 	.word	0x2000099c
 8005b4c:	08023174 	.word	0x08023174
 8005b50:	20000548 	.word	0x20000548
 8005b54:	50001c00 	.word	0x50001c00
 8005b58:	50000800 	.word	0x50000800
 8005b5c:	2000054b 	.word	0x2000054b
 8005b60:	20000549 	.word	0x20000549
 8005b64:	2000054c 	.word	0x2000054c
 8005b68:	2000054e 	.word	0x2000054e
 8005b6c:	08023194 	.word	0x08023194
 8005b70:	2000054d 	.word	0x2000054d
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005b74:	4b27      	ldr	r3, [pc, #156]	@ (8005c14 <ESP_Upkeep+0x8c4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f007 ff55 	bl	800da28 <TimestampIsReached>
 8005b7e:	1e03      	subs	r3, r0, #0
 8005b80:	d041      	beq.n	8005c06 <ESP_Upkeep+0x8b6>
        if(Mode == AT_MODE_SEND ) {
 8005b82:	4b25      	ldr	r3, [pc, #148]	@ (8005c18 <ESP_Upkeep+0x8c8>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d13d      	bne.n	8005c06 <ESP_Upkeep+0x8b6>
            Mode = AT_MODE_GETTIME;
 8005b8a:	4b23      	ldr	r3, [pc, #140]	@ (8005c18 <ESP_Upkeep+0x8c8>)
 8005b8c:	2205      	movs	r2, #5
 8005b8e:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005b90:	4b22      	ldr	r3, [pc, #136]	@ (8005c1c <ESP_Upkeep+0x8cc>)
 8005b92:	2202      	movs	r2, #2
 8005b94:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005b96:	4b22      	ldr	r3, [pc, #136]	@ (8005c20 <ESP_Upkeep+0x8d0>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <ESP_Upkeep+0x8d4>)
 8005b9c:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005b9e:	4b22      	ldr	r3, [pc, #136]	@ (8005c28 <ESP_Upkeep+0x8d8>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
 //        Debug("setTime to true");
        }
      }
      break;
 8005ba4:	e02f      	b.n	8005c06 <ESP_Upkeep+0x8b6>
 8005ba6:	e02e      	b.n	8005c06 <ESP_Upkeep+0x8b6>

    case ESP_STATE_CONFIG:
      Info("Do nothing until reset");
 8005ba8:	4a20      	ldr	r2, [pc, #128]	@ (8005c2c <ESP_Upkeep+0x8dc>)
 8005baa:	4b21      	ldr	r3, [pc, #132]	@ (8005c30 <ESP_Upkeep+0x8e0>)
 8005bac:	0019      	movs	r1, r3
 8005bae:	2002      	movs	r0, #2
 8005bb0:	f007 ff90 	bl	800dad4 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005bb4:	f016 fc24 	bl	801c400 <GetUsbRxPointer>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f8b2 	bl	8005d24 <Process_PC_Config>
      break;
 8005bc0:	e022      	b.n	8005c08 <ESP_Upkeep+0x8b8>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <ESP_Upkeep+0x8e4>)
 8005bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c38 <ESP_Upkeep+0x8e8>)
 8005bc6:	0019      	movs	r1, r3
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f007 ff83 	bl	800dad4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005bce:	4b13      	ldr	r3, [pc, #76]	@ (8005c1c <ESP_Upkeep+0x8cc>)
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	701a      	strb	r2, [r3, #0]
      break;
 8005bd4:	e018      	b.n	8005c08 <ESP_Upkeep+0x8b8>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005bd6:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <ESP_Upkeep+0x8ec>)
 8005bd8:	4b17      	ldr	r3, [pc, #92]	@ (8005c38 <ESP_Upkeep+0x8e8>)
 8005bda:	0019      	movs	r1, r3
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f007 ff79 	bl	800dad4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005be2:	4b0e      	ldr	r3, [pc, #56]	@ (8005c1c <ESP_Upkeep+0x8cc>)
 8005be4:	2207      	movs	r2, #7
 8005be6:	701a      	strb	r2, [r3, #0]
      break;
 8005be8:	e00e      	b.n	8005c08 <ESP_Upkeep+0x8b8>
      break;
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	e00c      	b.n	8005c08 <ESP_Upkeep+0x8b8>
      break;
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	e00a      	b.n	8005c08 <ESP_Upkeep+0x8b8>
        break;
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	e008      	b.n	8005c08 <ESP_Upkeep+0x8b8>
    break;
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	e006      	b.n	8005c08 <ESP_Upkeep+0x8b8>
    break;
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	e004      	b.n	8005c08 <ESP_Upkeep+0x8b8>
      break;
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	e002      	b.n	8005c08 <ESP_Upkeep+0x8b8>
    break;
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	e000      	b.n	8005c08 <ESP_Upkeep+0x8b8>
      break;
 8005c06:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005c08:	4b04      	ldr	r3, [pc, #16]	@ (8005c1c <ESP_Upkeep+0x8cc>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b002      	add	sp, #8
 8005c12:	bdb0      	pop	{r4, r5, r7, pc}
 8005c14:	20000998 	.word	0x20000998
 8005c18:	200009a3 	.word	0x200009a3
 8005c1c:	20000028 	.word	0x20000028
 8005c20:	20000994 	.word	0x20000994
 8005c24:	2000099c 	.word	0x2000099c
 8005c28:	20000001 	.word	0x20000001
 8005c2c:	08023194 	.word	0x08023194
 8005c30:	0802312c 	.word	0x0802312c
 8005c34:	080231ac 	.word	0x080231ac
 8005c38:	080227bc 	.word	0x080227bc
 8005c3c:	080231c0 	.word	0x080231c0

08005c40 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005c48:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <I2CSensors_Init+0x30>)
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005c4e:	4a09      	ldr	r2, [pc, #36]	@ (8005c74 <I2CSensors_Init+0x34>)
 8005c50:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <I2CSensors_Init+0x38>)
 8005c52:	0011      	movs	r1, r2
 8005c54:	0018      	movs	r0, r3
 8005c56:	f008 f8a1 	bl	800dd9c <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005c5a:	4a06      	ldr	r2, [pc, #24]	@ (8005c74 <I2CSensors_Init+0x34>)
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <I2CSensors_Init+0x38>)
 8005c5e:	0011      	movs	r1, r2
 8005c60:	0018      	movs	r0, r3
 8005c62:	f005 fa13 	bl	800b08c <SGP_Init>
}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	20000aac 	.word	0x20000aac
 8005c74:	08005cd1 	.word	0x08005cd1
 8005c78:	08005c7d 	.word	0x08005c7d

08005c7c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c7c:	b5b0      	push	{r4, r5, r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6039      	str	r1, [r7, #0]
 8005c84:	0011      	movs	r1, r2
 8005c86:	1dfb      	adds	r3, r7, #7
 8005c88:	1c02      	adds	r2, r0, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	1dbb      	adds	r3, r7, #6
 8005c8e:	1c0a      	adds	r2, r1, #0
 8005c90:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c92:	4b0e      	ldr	r3, [pc, #56]	@ (8005ccc <ReadI2C+0x50>)
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	1dfb      	adds	r3, r7, #7
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	18db      	adds	r3, r3, r3
 8005c9e:	b299      	uxth	r1, r3
 8005ca0:	1dbb      	adds	r3, r7, #6
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	250f      	movs	r5, #15
 8005ca8:	197c      	adds	r4, r7, r5
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	f00a f9de 	bl	801006c <HAL_I2C_Master_Receive_DMA>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005cb4:	197b      	adds	r3, r7, r5
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <ReadI2C+0x44>
        return false;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <ReadI2C+0x46>
    }
    return true;
 8005cc0:	2301      	movs	r3, #1
}
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b004      	add	sp, #16
 8005cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	20000aac 	.word	0x20000aac

08005cd0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005cd0:	b5b0      	push	{r4, r5, r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6039      	str	r1, [r7, #0]
 8005cd8:	0011      	movs	r1, r2
 8005cda:	1dfb      	adds	r3, r7, #7
 8005cdc:	1c02      	adds	r2, r0, #0
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	1dbb      	adds	r3, r7, #6
 8005ce2:	1c0a      	adds	r2, r1, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d20 <WriteI2C+0x50>)
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	1dfb      	adds	r3, r7, #7
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	18db      	adds	r3, r3, r3
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	1dbb      	adds	r3, r7, #6
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	250f      	movs	r5, #15
 8005cfc:	197c      	adds	r4, r7, r5
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	f00a f8ae 	bl	800fe60 <HAL_I2C_Master_Transmit_DMA>
 8005d04:	0003      	movs	r3, r0
 8005d06:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005d08:	197b      	adds	r3, r7, r5
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <WriteI2C+0x44>
        return false;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <WriteI2C+0x46>
    }
    return true;
 8005d14:	2301      	movs	r3, #1
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b004      	add	sp, #16
 8005d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	20000aac 	.word	0x20000aac

08005d24 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b0c3      	sub	sp, #268	@ 0x10c
 8005d28:	af3e      	add	r7, sp, #248	@ 0xf8
 8005d2a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005d2c:	f016 fb88 	bl	801c440 <GetUsbRxDataSize>
 8005d30:	0003      	movs	r3, r0
 8005d32:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d971      	bls.n	8005e1e <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2123      	movs	r1, #35	@ 0x23
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f019 fd7e 	bl	801f840 <strchr>
 8005d44:	0003      	movs	r3, r0
 8005d46:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d065      	beq.n	8005e1a <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785a      	ldrb	r2, [r3, #1]
 8005d52:	4b34      	ldr	r3, [pc, #208]	@ (8005e24 <Process_PC_Config+0x100>)
 8005d54:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	789a      	ldrb	r2, [r3, #2]
 8005d5a:	4b32      	ldr	r3, [pc, #200]	@ (8005e24 <Process_PC_Config+0x100>)
 8005d5c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005d5e:	4b31      	ldr	r3, [pc, #196]	@ (8005e24 <Process_PC_Config+0x100>)
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	3305      	adds	r3, #5
 8005d64:	001a      	movs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d351      	bcc.n	8005e10 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1cd9      	adds	r1, r3, #3
 8005d70:	4b2c      	ldr	r3, [pc, #176]	@ (8005e24 <Process_PC_Config+0x100>)
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	001a      	movs	r2, r3
 8005d76:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <Process_PC_Config+0x104>)
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f019 fe35 	bl	801f9e8 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005d7e:	4b29      	ldr	r3, [pc, #164]	@ (8005e24 <Process_PC_Config+0x100>)
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	3303      	adds	r3, #3
 8005d84:	001a      	movs	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	189b      	adds	r3, r3, r2
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	b21a      	sxth	r2, r3
 8005d90:	4b24      	ldr	r3, [pc, #144]	@ (8005e24 <Process_PC_Config+0x100>)
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	3304      	adds	r3, #4
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	18cb      	adds	r3, r1, r3
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	b21b      	sxth	r3, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b21b      	sxth	r3, r3
 8005da2:	b299      	uxth	r1, r3
 8005da4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e24 <Process_PC_Config+0x100>)
 8005da6:	2381      	movs	r3, #129	@ 0x81
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <Process_PC_Config+0x100>)
 8005dae:	2381      	movs	r3, #129	@ 0x81
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	5ad4      	ldrh	r4, [r2, r3]
 8005db4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e24 <Process_PC_Config+0x100>)
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	3303      	adds	r3, #3
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	0011      	movs	r1, r2
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 f975 	bl	80060b0 <CRC16_ARC>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d007      	beq.n	8005ddc <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005dcc:	4b15      	ldr	r3, [pc, #84]	@ (8005e24 <Process_PC_Config+0x100>)
 8005dce:	785a      	ldrb	r2, [r3, #1]
 8005dd0:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <Process_PC_Config+0x104>)
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	f000 f919 	bl	800600c <Create_Message>
 8005dda:	e016      	b.n	8005e0a <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005ddc:	4c11      	ldr	r4, [pc, #68]	@ (8005e24 <Process_PC_Config+0x100>)
 8005dde:	466b      	mov	r3, sp
 8005de0:	0018      	movs	r0, r3
 8005de2:	0023      	movs	r3, r4
 8005de4:	3310      	adds	r3, #16
 8005de6:	22f4      	movs	r2, #244	@ 0xf4
 8005de8:	0019      	movs	r1, r3
 8005dea:	f019 fdfd 	bl	801f9e8 <memcpy>
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	6861      	ldr	r1, [r4, #4]
 8005df2:	68a2      	ldr	r2, [r4, #8]
 8005df4:	68e3      	ldr	r3, [r4, #12]
 8005df6:	f000 f819 	bl	8005e2c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <Process_PC_Config+0x100>)
 8005dfc:	7818      	ldrb	r0, [r3, #0]
 8005dfe:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <Process_PC_Config+0x100>)
 8005e00:	785a      	ldrb	r2, [r3, #1]
 8005e02:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <Process_PC_Config+0x104>)
 8005e04:	0019      	movs	r1, r3
 8005e06:	f000 f901 	bl	800600c <Create_Message>
                }
                ResetUsbRxDataSize();
 8005e0a:	f016 fb01 	bl	801c410 <ResetUsbRxDataSize>
                return;
 8005e0e:	e006      	b.n	8005e1e <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f016 fb1e 	bl	801c454 <GetUsbRxNextChunk>
 8005e18:	e001      	b.n	8005e1e <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005e1a:	f016 faf9 	bl	801c410 <ResetUsbRxDataSize>
        }
    }
}
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b005      	add	sp, #20
 8005e22:	bd90      	pop	{r4, r7, pc}
 8005e24:	20000ab0 	.word	0x20000ab0
 8005e28:	20000ab2 	.word	0x20000ab2

08005e2c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	b5b0      	push	{r4, r5, r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	2518      	movs	r5, #24
 8005e36:	197c      	adds	r4, r7, r5
 8005e38:	6020      	str	r0, [r4, #0]
 8005e3a:	6061      	str	r1, [r4, #4]
 8005e3c:	60a2      	str	r2, [r4, #8]
 8005e3e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005e40:	197b      	adds	r3, r7, r5
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2bfe      	cmp	r3, #254	@ 0xfe
 8005e46:	d100      	bne.n	8005e4a <ProcessCmd+0x1e>
 8005e48:	e09c      	b.n	8005f84 <ProcessCmd+0x158>
 8005e4a:	dd00      	ble.n	8005e4e <ProcessCmd+0x22>
 8005e4c:	e0bc      	b.n	8005fc8 <ProcessCmd+0x19c>
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	dc0a      	bgt.n	8005e68 <ProcessCmd+0x3c>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da00      	bge.n	8005e58 <ProcessCmd+0x2c>
 8005e56:	e0b7      	b.n	8005fc8 <ProcessCmd+0x19c>
 8005e58:	2b0c      	cmp	r3, #12
 8005e5a:	d900      	bls.n	8005e5e <ProcessCmd+0x32>
 8005e5c:	e0b4      	b.n	8005fc8 <ProcessCmd+0x19c>
 8005e5e:	009a      	lsls	r2, r3, #2
 8005e60:	4b5d      	ldr	r3, [pc, #372]	@ (8005fd8 <ProcessCmd+0x1ac>)
 8005e62:	18d3      	adds	r3, r2, r3
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	469f      	mov	pc, r3
 8005e68:	2bfd      	cmp	r3, #253	@ 0xfd
 8005e6a:	d100      	bne.n	8005e6e <ProcessCmd+0x42>
 8005e6c:	e084      	b.n	8005f78 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005e6e:	e0ab      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e70:	2118      	movs	r1, #24
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	001a      	movs	r2, r3
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	1c99      	adds	r1, r3, #2
 8005e7c:	4857      	ldr	r0, [pc, #348]	@ (8005fdc <ProcessCmd+0x1b0>)
 8005e7e:	230c      	movs	r3, #12
 8005e80:	f7fd fc1e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e84:	e0a0      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e86:	2118      	movs	r1, #24
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	001a      	movs	r2, r3
 8005e8e:	187b      	adds	r3, r7, r1
 8005e90:	1c99      	adds	r1, r3, #2
 8005e92:	4853      	ldr	r0, [pc, #332]	@ (8005fe0 <ProcessCmd+0x1b4>)
 8005e94:	230c      	movs	r3, #12
 8005e96:	f7fd fc13 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e9a:	e095      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e9c:	2118      	movs	r1, #24
 8005e9e:	187b      	adds	r3, r7, r1
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	001a      	movs	r2, r3
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	1c99      	adds	r1, r3, #2
 8005ea8:	484e      	ldr	r0, [pc, #312]	@ (8005fe4 <ProcessCmd+0x1b8>)
 8005eaa:	230c      	movs	r3, #12
 8005eac:	f7fd fc08 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005eb0:	e08a      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005eb2:	2118      	movs	r1, #24
 8005eb4:	187b      	adds	r3, r7, r1
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	001a      	movs	r2, r3
 8005eba:	187b      	adds	r3, r7, r1
 8005ebc:	1c99      	adds	r1, r3, #2
 8005ebe:	484a      	ldr	r0, [pc, #296]	@ (8005fe8 <ProcessCmd+0x1bc>)
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	f7fd fbfd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ec6:	e07f      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ec8:	2118      	movs	r1, #24
 8005eca:	187b      	adds	r3, r7, r1
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	001a      	movs	r2, r3
 8005ed0:	187b      	adds	r3, r7, r1
 8005ed2:	1c99      	adds	r1, r3, #2
 8005ed4:	4845      	ldr	r0, [pc, #276]	@ (8005fec <ProcessCmd+0x1c0>)
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	f7fd fbf2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005edc:	e074      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ede:	2118      	movs	r1, #24
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	187b      	adds	r3, r7, r1
 8005ee8:	1c99      	adds	r1, r3, #2
 8005eea:	4841      	ldr	r0, [pc, #260]	@ (8005ff0 <ProcessCmd+0x1c4>)
 8005eec:	230c      	movs	r3, #12
 8005eee:	f7fd fbe7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ef2:	e069      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ef4:	2118      	movs	r1, #24
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	001a      	movs	r2, r3
 8005efc:	187b      	adds	r3, r7, r1
 8005efe:	1c99      	adds	r1, r3, #2
 8005f00:	483c      	ldr	r0, [pc, #240]	@ (8005ff4 <ProcessCmd+0x1c8>)
 8005f02:	230c      	movs	r3, #12
 8005f04:	f7fd fbdc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f08:	e05e      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005f0a:	2118      	movs	r1, #24
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	001a      	movs	r2, r3
 8005f12:	187b      	adds	r3, r7, r1
 8005f14:	1c99      	adds	r1, r3, #2
 8005f16:	4838      	ldr	r0, [pc, #224]	@ (8005ff8 <ProcessCmd+0x1cc>)
 8005f18:	231e      	movs	r3, #30
 8005f1a:	f7fd fbd1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f1e:	e053      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f20:	2118      	movs	r1, #24
 8005f22:	187b      	adds	r3, r7, r1
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	001a      	movs	r2, r3
 8005f28:	187b      	adds	r3, r7, r1
 8005f2a:	1c99      	adds	r1, r3, #2
 8005f2c:	4833      	ldr	r0, [pc, #204]	@ (8005ffc <ProcessCmd+0x1d0>)
 8005f2e:	230c      	movs	r3, #12
 8005f30:	f7fd fbc6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f34:	e048      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f36:	2118      	movs	r1, #24
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	001a      	movs	r2, r3
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	1c99      	adds	r1, r3, #2
 8005f42:	482f      	ldr	r0, [pc, #188]	@ (8006000 <ProcessCmd+0x1d4>)
 8005f44:	230c      	movs	r3, #12
 8005f46:	f7fd fbbb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f4a:	e03d      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f4c:	2118      	movs	r1, #24
 8005f4e:	187b      	adds	r3, r7, r1
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	001a      	movs	r2, r3
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	1c99      	adds	r1, r3, #2
 8005f58:	482a      	ldr	r0, [pc, #168]	@ (8006004 <ProcessCmd+0x1d8>)
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	f7fd fbb0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f60:	e032      	b.n	8005fc8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005f62:	2118      	movs	r1, #24
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	001a      	movs	r2, r3
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	1c99      	adds	r1, r3, #2
 8005f6e:	4826      	ldr	r0, [pc, #152]	@ (8006008 <ProcessCmd+0x1dc>)
 8005f70:	230c      	movs	r3, #12
 8005f72:	f7fd fba5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f76:	e027      	b.n	8005fc8 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005f78:	4b18      	ldr	r3, [pc, #96]	@ (8005fdc <ProcessCmd+0x1b0>)
 8005f7a:	21ba      	movs	r1, #186	@ 0xba
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7fd fbe4 	bl	800374a <ClearEEprom>
        break;
 8005f82:	e021      	b.n	8005fc8 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005f84:	2118      	movs	r1, #24
 8005f86:	187b      	adds	r3, r7, r1
 8005f88:	789b      	ldrb	r3, [r3, #2]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	b21a      	sxth	r2, r3
 8005f8e:	187b      	adds	r3, r7, r1
 8005f90:	78db      	ldrb	r3, [r3, #3]
 8005f92:	b21b      	sxth	r3, r3
 8005f94:	4313      	orrs	r3, r2
 8005f96:	b21a      	sxth	r2, r3
 8005f98:	1dbb      	adds	r3, r7, #6
 8005f9a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	23c0      	movs	r3, #192	@ 0xc0
 8005fa2:	015b      	lsls	r3, r3, #5
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d207      	bcs.n	8005fb8 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005fa8:	1dbb      	adds	r3, r7, #6
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	4a0b      	ldr	r2, [pc, #44]	@ (8005fdc <ProcessCmd+0x1b0>)
 8005fae:	0019      	movs	r1, r3
 8005fb0:	0010      	movs	r0, r2
 8005fb2:	f7fd fbca 	bl	800374a <ClearEEprom>
            break;
 8005fb6:	e006      	b.n	8005fc6 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005fb8:	23c0      	movs	r3, #192	@ 0xc0
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	4a07      	ldr	r2, [pc, #28]	@ (8005fdc <ProcessCmd+0x1b0>)
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	0010      	movs	r0, r2
 8005fc2:	f7fd fbc2 	bl	800374a <ClearEEprom>
            break;
 8005fc6:	46c0      	nop			@ (mov r8, r8)
}
 8005fc8:	46c0      	nop			@ (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b002      	add	sp, #8
 8005fce:	bcb0      	pop	{r4, r5, r7}
 8005fd0:	bc08      	pop	{r3}
 8005fd2:	b004      	add	sp, #16
 8005fd4:	4718      	bx	r3
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	080246ec 	.word	0x080246ec
 8005fdc:	08080000 	.word	0x08080000
 8005fe0:	0808000c 	.word	0x0808000c
 8005fe4:	08080018 	.word	0x08080018
 8005fe8:	08080024 	.word	0x08080024
 8005fec:	08080030 	.word	0x08080030
 8005ff0:	0808003c 	.word	0x0808003c
 8005ff4:	08080048 	.word	0x08080048
 8005ff8:	08080090 	.word	0x08080090
 8005ffc:	08080078 	.word	0x08080078
 8006000:	0808006c 	.word	0x0808006c
 8006004:	08080060 	.word	0x08080060
 8006008:	08080054 	.word	0x08080054

0800600c <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 800600c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6039      	str	r1, [r7, #0]
 8006014:	0011      	movs	r1, r2
 8006016:	1dfb      	adds	r3, r7, #7
 8006018:	1c02      	adds	r2, r0, #0
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	1dbb      	adds	r3, r7, #6
 800601e:	1c0a      	adds	r2, r1, #0
 8006020:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8006022:	2223      	movs	r2, #35	@ 0x23
 8006024:	4b20      	ldr	r3, [pc, #128]	@ (80060a8 <Create_Message+0x9c>)
 8006026:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8006028:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <Create_Message+0x9c>)
 800602a:	1dfa      	adds	r2, r7, #7
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8006030:	4b1d      	ldr	r3, [pc, #116]	@ (80060a8 <Create_Message+0x9c>)
 8006032:	1dba      	adds	r2, r7, #6
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8006038:	1dbb      	adds	r3, r7, #6
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	4b1b      	ldr	r3, [pc, #108]	@ (80060ac <Create_Message+0xa0>)
 8006040:	0018      	movs	r0, r3
 8006042:	f019 fcd1 	bl	801f9e8 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8006046:	1dbb      	adds	r3, r7, #6
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	b29a      	uxth	r2, r3
 800604c:	250e      	movs	r5, #14
 800604e:	197b      	adds	r3, r7, r5
 8006050:	3203      	adds	r2, #3
 8006052:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006054:	260c      	movs	r6, #12
 8006056:	19bc      	adds	r4, r7, r6
 8006058:	197b      	adds	r3, r7, r5
 800605a:	881a      	ldrh	r2, [r3, #0]
 800605c:	4b12      	ldr	r3, [pc, #72]	@ (80060a8 <Create_Message+0x9c>)
 800605e:	0011      	movs	r1, r2
 8006060:	0018      	movs	r0, r3
 8006062:	f000 f825 	bl	80060b0 <CRC16_ARC>
 8006066:	0003      	movs	r3, r0
 8006068:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800606a:	0030      	movs	r0, r6
 800606c:	183b      	adds	r3, r7, r0
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	b29a      	uxth	r2, r3
 8006074:	197b      	adds	r3, r7, r5
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b2d1      	uxtb	r1, r2
 800607a:	4a0b      	ldr	r2, [pc, #44]	@ (80060a8 <Create_Message+0x9c>)
 800607c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800607e:	197b      	adds	r3, r7, r5
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	183a      	adds	r2, r7, r0
 8006086:	8812      	ldrh	r2, [r2, #0]
 8006088:	b2d1      	uxtb	r1, r2
 800608a:	4a07      	ldr	r2, [pc, #28]	@ (80060a8 <Create_Message+0x9c>)
 800608c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800608e:	197b      	adds	r3, r7, r5
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	3302      	adds	r3, #2
 8006094:	b29a      	uxth	r2, r3
 8006096:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <Create_Message+0x9c>)
 8006098:	0011      	movs	r1, r2
 800609a:	0018      	movs	r0, r3
 800609c:	f016 f976 	bl	801c38c <CDC_Transmit_FS>
}
 80060a0:	46c0      	nop			@ (mov r8, r8)
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b005      	add	sp, #20
 80060a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a8:	20000bb4 	.word	0x20000bb4
 80060ac:	20000bb7 	.word	0x20000bb7

080060b0 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	000a      	movs	r2, r1
 80060ba:	1cbb      	adds	r3, r7, #2
 80060bc:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80060be:	2316      	movs	r3, #22
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	2200      	movs	r2, #0
 80060c4:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e02e      	b.n	800612a <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	0019      	movs	r1, r3
 80060d6:	2216      	movs	r2, #22
 80060d8:	18bb      	adds	r3, r7, r2
 80060da:	18ba      	adds	r2, r7, r2
 80060dc:	8812      	ldrh	r2, [r2, #0]
 80060de:	404a      	eors	r2, r1
 80060e0:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e01a      	b.n	800611e <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80060e8:	2116      	movs	r1, #22
 80060ea:	187b      	adds	r3, r7, r1
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	2201      	movs	r2, #1
 80060f0:	4013      	ands	r3, r2
 80060f2:	d00b      	beq.n	800610c <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80060f4:	187b      	adds	r3, r7, r1
 80060f6:	187a      	adds	r2, r7, r1
 80060f8:	8812      	ldrh	r2, [r2, #0]
 80060fa:	0852      	lsrs	r2, r2, #1
 80060fc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	187a      	adds	r2, r7, r1
 8006102:	8812      	ldrh	r2, [r2, #0]
 8006104:	490f      	ldr	r1, [pc, #60]	@ (8006144 <CRC16_ARC+0x94>)
 8006106:	404a      	eors	r2, r1
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e005      	b.n	8006118 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 800610c:	2216      	movs	r2, #22
 800610e:	18bb      	adds	r3, r7, r2
 8006110:	18ba      	adds	r2, r7, r2
 8006112:	8812      	ldrh	r2, [r2, #0]
 8006114:	0852      	lsrs	r2, r2, #1
 8006116:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b07      	cmp	r3, #7
 8006122:	dde1      	ble.n	80060e8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	3301      	adds	r3, #1
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	1cbb      	adds	r3, r7, #2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	dbcb      	blt.n	80060cc <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8006134:	2316      	movs	r3, #22
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	881b      	ldrh	r3, [r3, #0]
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b006      	add	sp, #24
 8006140:	bd80      	pop	{r7, pc}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	ffffa001 	.word	0xffffa001

08006148 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 800614c:	4b26      	ldr	r3, [pc, #152]	@ (80061e8 <ReadBatteryVoltage+0xa0>)
 800614e:	4a27      	ldr	r2, [pc, #156]	@ (80061ec <ReadBatteryVoltage+0xa4>)
 8006150:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006152:	4b25      	ldr	r3, [pc, #148]	@ (80061e8 <ReadBatteryVoltage+0xa0>)
 8006154:	2280      	movs	r2, #128	@ 0x80
 8006156:	0152      	lsls	r2, r2, #5
 8006158:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800615a:	4a23      	ldr	r2, [pc, #140]	@ (80061e8 <ReadBatteryVoltage+0xa0>)
 800615c:	4b24      	ldr	r3, [pc, #144]	@ (80061f0 <ReadBatteryVoltage+0xa8>)
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f008 fbe5 	bl	800e930 <HAL_ADC_ConfigChannel>
 8006166:	1e03      	subs	r3, r0, #0
 8006168:	d001      	beq.n	800616e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800616a:	f001 ff5b 	bl	8008024 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800616e:	4b20      	ldr	r3, [pc, #128]	@ (80061f0 <ReadBatteryVoltage+0xa8>)
 8006170:	0018      	movs	r0, r3
 8006172:	f008 fae1 	bl	800e738 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006176:	4b1e      	ldr	r3, [pc, #120]	@ (80061f0 <ReadBatteryVoltage+0xa8>)
 8006178:	2101      	movs	r1, #1
 800617a:	0018      	movs	r0, r3
 800617c:	f008 fb30 	bl	800e7e0 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006180:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <ReadBatteryVoltage+0xa8>)
 8006182:	0018      	movs	r0, r3
 8006184:	f008 fbc8 	bl	800e918 <HAL_ADC_GetValue>
 8006188:	0002      	movs	r2, r0
 800618a:	4b1a      	ldr	r3, [pc, #104]	@ (80061f4 <ReadBatteryVoltage+0xac>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4353      	muls	r3, r2
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4919      	ldr	r1, [pc, #100]	@ (80061f8 <ReadBatteryVoltage+0xb0>)
 8006194:	0018      	movs	r0, r3
 8006196:	f7fa f805 	bl	80001a4 <__udivsi3>
 800619a:	0003      	movs	r3, r0
 800619c:	001a      	movs	r2, r3
 800619e:	4b17      	ldr	r3, [pc, #92]	@ (80061fc <ReadBatteryVoltage+0xb4>)
 80061a0:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 80061a2:	4b16      	ldr	r3, [pc, #88]	@ (80061fc <ReadBatteryVoltage+0xb4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f7fb fa5e 	bl	8001668 <__aeabi_ui2f>
 80061ac:	1c03      	adds	r3, r0, #0
 80061ae:	4914      	ldr	r1, [pc, #80]	@ (8006200 <ReadBatteryVoltage+0xb8>)
 80061b0:	1c18      	adds	r0, r3, #0
 80061b2:	f7fa fd0f 	bl	8000bd4 <__aeabi_fdiv>
 80061b6:	1c03      	adds	r3, r0, #0
 80061b8:	1c1a      	adds	r2, r3, #0
 80061ba:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <ReadBatteryVoltage+0xbc>)
 80061bc:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 80061be:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <ReadBatteryVoltage+0xa0>)
 80061c0:	4a0a      	ldr	r2, [pc, #40]	@ (80061ec <ReadBatteryVoltage+0xa4>)
 80061c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80061c4:	4b08      	ldr	r3, [pc, #32]	@ (80061e8 <ReadBatteryVoltage+0xa0>)
 80061c6:	4a10      	ldr	r2, [pc, #64]	@ (8006208 <ReadBatteryVoltage+0xc0>)
 80061c8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80061ca:	4a07      	ldr	r2, [pc, #28]	@ (80061e8 <ReadBatteryVoltage+0xa0>)
 80061cc:	4b08      	ldr	r3, [pc, #32]	@ (80061f0 <ReadBatteryVoltage+0xa8>)
 80061ce:	0011      	movs	r1, r2
 80061d0:	0018      	movs	r0, r3
 80061d2:	f008 fbad 	bl	800e930 <HAL_ADC_ConfigChannel>
 80061d6:	1e03      	subs	r3, r0, #0
 80061d8:	d001      	beq.n	80061de <ReadBatteryVoltage+0x96>
    Error_Handler();
 80061da:	f001 ff23 	bl	8008024 <Error_Handler>
  }
  return trueValue;
 80061de:	4b09      	ldr	r3, [pc, #36]	@ (8006204 <ReadBatteryVoltage+0xbc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 }
 80061e2:	1c18      	adds	r0, r3, #0
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000cbc 	.word	0x20000cbc
 80061ec:	38004000 	.word	0x38004000
 80061f0:	20000cfc 	.word	0x20000cfc
 80061f4:	2000002c 	.word	0x2000002c
 80061f8:	00000fff 	.word	0x00000fff
 80061fc:	20000cc4 	.word	0x20000cc4
 8006200:	447a0000 	.word	0x447a0000
 8006204:	20000cc8 	.word	0x20000cc8
 8006208:	00001001 	.word	0x00001001

0800620c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006210:	4b27      	ldr	r3, [pc, #156]	@ (80062b0 <ReadSolarVoltage+0xa4>)
 8006212:	4a28      	ldr	r2, [pc, #160]	@ (80062b4 <ReadSolarVoltage+0xa8>)
 8006214:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006216:	4b26      	ldr	r3, [pc, #152]	@ (80062b0 <ReadSolarVoltage+0xa4>)
 8006218:	2280      	movs	r2, #128	@ 0x80
 800621a:	0152      	lsls	r2, r2, #5
 800621c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800621e:	4a24      	ldr	r2, [pc, #144]	@ (80062b0 <ReadSolarVoltage+0xa4>)
 8006220:	4b25      	ldr	r3, [pc, #148]	@ (80062b8 <ReadSolarVoltage+0xac>)
 8006222:	0011      	movs	r1, r2
 8006224:	0018      	movs	r0, r3
 8006226:	f008 fb83 	bl	800e930 <HAL_ADC_ConfigChannel>
 800622a:	1e03      	subs	r3, r0, #0
 800622c:	d001      	beq.n	8006232 <ReadSolarVoltage+0x26>
    Error_Handler();
 800622e:	f001 fef9 	bl	8008024 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006232:	4b21      	ldr	r3, [pc, #132]	@ (80062b8 <ReadSolarVoltage+0xac>)
 8006234:	0018      	movs	r0, r3
 8006236:	f008 fa7f 	bl	800e738 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800623a:	4b1f      	ldr	r3, [pc, #124]	@ (80062b8 <ReadSolarVoltage+0xac>)
 800623c:	2101      	movs	r1, #1
 800623e:	0018      	movs	r0, r3
 8006240:	f008 face 	bl	800e7e0 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006244:	4b1c      	ldr	r3, [pc, #112]	@ (80062b8 <ReadSolarVoltage+0xac>)
 8006246:	0018      	movs	r0, r3
 8006248:	f008 fb66 	bl	800e918 <HAL_ADC_GetValue>
 800624c:	0002      	movs	r2, r0
 800624e:	4b1b      	ldr	r3, [pc, #108]	@ (80062bc <ReadSolarVoltage+0xb0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	435a      	muls	r2, r3
 8006254:	0013      	movs	r3, r2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	189b      	adds	r3, r3, r2
 800625a:	4919      	ldr	r1, [pc, #100]	@ (80062c0 <ReadSolarVoltage+0xb4>)
 800625c:	0018      	movs	r0, r3
 800625e:	f7f9 ffa1 	bl	80001a4 <__udivsi3>
 8006262:	0003      	movs	r3, r0
 8006264:	001a      	movs	r2, r3
 8006266:	4b17      	ldr	r3, [pc, #92]	@ (80062c4 <ReadSolarVoltage+0xb8>)
 8006268:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 800626a:	4b16      	ldr	r3, [pc, #88]	@ (80062c4 <ReadSolarVoltage+0xb8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	0018      	movs	r0, r3
 8006270:	f7fb f9fa 	bl	8001668 <__aeabi_ui2f>
 8006274:	1c03      	adds	r3, r0, #0
 8006276:	4914      	ldr	r1, [pc, #80]	@ (80062c8 <ReadSolarVoltage+0xbc>)
 8006278:	1c18      	adds	r0, r3, #0
 800627a:	f7fa fcab 	bl	8000bd4 <__aeabi_fdiv>
 800627e:	1c03      	adds	r3, r0, #0
 8006280:	1c1a      	adds	r2, r3, #0
 8006282:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <ReadSolarVoltage+0xc0>)
 8006284:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006286:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <ReadSolarVoltage+0xa4>)
 8006288:	4a0a      	ldr	r2, [pc, #40]	@ (80062b4 <ReadSolarVoltage+0xa8>)
 800628a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800628c:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <ReadSolarVoltage+0xa4>)
 800628e:	4a10      	ldr	r2, [pc, #64]	@ (80062d0 <ReadSolarVoltage+0xc4>)
 8006290:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006292:	4a07      	ldr	r2, [pc, #28]	@ (80062b0 <ReadSolarVoltage+0xa4>)
 8006294:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <ReadSolarVoltage+0xac>)
 8006296:	0011      	movs	r1, r2
 8006298:	0018      	movs	r0, r3
 800629a:	f008 fb49 	bl	800e930 <HAL_ADC_ConfigChannel>
 800629e:	1e03      	subs	r3, r0, #0
 80062a0:	d001      	beq.n	80062a6 <ReadSolarVoltage+0x9a>
    Error_Handler();
 80062a2:	f001 febf 	bl	8008024 <Error_Handler>
  }
  return trueValue;
 80062a6:	4b09      	ldr	r3, [pc, #36]	@ (80062cc <ReadSolarVoltage+0xc0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 }
 80062aa:	1c18      	adds	r0, r3, #0
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20000cbc 	.word	0x20000cbc
 80062b4:	3c008000 	.word	0x3c008000
 80062b8:	20000cfc 	.word	0x20000cfc
 80062bc:	2000002c 	.word	0x2000002c
 80062c0:	00000fff 	.word	0x00000fff
 80062c4:	20000ccc 	.word	0x20000ccc
 80062c8:	447a0000 	.word	0x447a0000
 80062cc:	20000cd0 	.word	0x20000cd0
 80062d0:	00001001 	.word	0x00001001

080062d4 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80062d8:	23a0      	movs	r3, #160	@ 0xa0
 80062da:	05db      	lsls	r3, r3, #23
 80062dc:	2180      	movs	r1, #128	@ 0x80
 80062de:	0018      	movs	r0, r3
 80062e0:	f009 fac2 	bl	800f868 <HAL_GPIO_ReadPin>
 80062e4:	0003      	movs	r3, r0
 80062e6:	1e5a      	subs	r2, r3, #1
 80062e8:	4193      	sbcs	r3, r2
 80062ea:	b2db      	uxtb	r3, r3
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80062f2:	b580      	push	{r7, lr}
 80062f4:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80062f6:	2380      	movs	r3, #128	@ 0x80
 80062f8:	021a      	lsls	r2, r3, #8
 80062fa:	23a0      	movs	r3, #160	@ 0xa0
 80062fc:	05db      	lsls	r3, r3, #23
 80062fe:	0011      	movs	r1, r2
 8006300:	0018      	movs	r0, r3
 8006302:	f009 fab1 	bl	800f868 <HAL_GPIO_ReadPin>
 8006306:	0003      	movs	r3, r0
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	4193      	sbcs	r3, r2
 800630c:	b2db      	uxtb	r3, r3
}
 800630e:	0018      	movs	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006318:	4b05      	ldr	r3, [pc, #20]	@ (8006330 <UserButton_Pressed+0x1c>)
 800631a:	2104      	movs	r1, #4
 800631c:	0018      	movs	r0, r3
 800631e:	f009 faa3 	bl	800f868 <HAL_GPIO_ReadPin>
 8006322:	0003      	movs	r3, r0
 8006324:	425a      	negs	r2, r3
 8006326:	4153      	adcs	r3, r2
 8006328:	b2db      	uxtb	r3, r3
}
 800632a:	0018      	movs	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	50000c00 	.word	0x50000c00

08006334 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006336:	46d6      	mov	lr, sl
 8006338:	464f      	mov	r7, r9
 800633a:	4646      	mov	r6, r8
 800633c:	b5c0      	push	{r6, r7, lr}
 800633e:	b08e      	sub	sp, #56	@ 0x38
 8006340:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8006342:	4b21      	ldr	r3, [pc, #132]	@ (80063c8 <showTime+0x94>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d036      	beq.n	80063b8 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800634a:	003a      	movs	r2, r7
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f000 fa2b 	bl	80067ac <RTC_GetTime>
  UpdateSystemUptime();
 8006356:	f000 f83f 	bl	80063d8 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800635a:	003b      	movs	r3, r7
 800635c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800635e:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006360:	003b      	movs	r3, r7
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006366:	4b19      	ldr	r3, [pc, #100]	@ (80063cc <showTime+0x98>)
 8006368:	0092      	lsls	r2, r2, #2
 800636a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800636c:	003b      	movs	r3, r7
 800636e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006370:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006376:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006378:	1d3b      	adds	r3, r7, #4
 800637a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800637c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006382:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006384:	4b12      	ldr	r3, [pc, #72]	@ (80063d0 <showTime+0x9c>)
 8006386:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006388:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800638a:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <showTime+0x9c>)
 800638c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800638e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006390:	4b0f      	ldr	r3, [pc, #60]	@ (80063d0 <showTime+0x9c>)
 8006392:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006394:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006396:	4b0e      	ldr	r3, [pc, #56]	@ (80063d0 <showTime+0x9c>)
 8006398:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800639a:	480e      	ldr	r0, [pc, #56]	@ (80063d4 <showTime+0xa0>)
 800639c:	9306      	str	r3, [sp, #24]
 800639e:	4643      	mov	r3, r8
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	4663      	mov	r3, ip
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	9603      	str	r6, [sp, #12]
 80063a8:	9502      	str	r5, [sp, #8]
 80063aa:	9401      	str	r4, [sp, #4]
 80063ac:	9100      	str	r1, [sp, #0]
 80063ae:	4653      	mov	r3, sl
 80063b0:	4649      	mov	r1, r9
 80063b2:	f019 f889 	bl	801f4c8 <iprintf>
 80063b6:	e000      	b.n	80063ba <showTime+0x86>
    return;
 80063b8:	46c0      	nop			@ (mov r8, r8)
}
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b006      	add	sp, #24
 80063be:	bce0      	pop	{r5, r6, r7}
 80063c0:	46ba      	mov	sl, r7
 80063c2:	46b1      	mov	r9, r6
 80063c4:	46a8      	mov	r8, r5
 80063c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c8:	20000ce0 	.word	0x20000ce0
 80063cc:	2000004c 	.word	0x2000004c
 80063d0:	20000cd4 	.word	0x20000cd4
 80063d4:	0802323c 	.word	0x0802323c

080063d8 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80063de:	003a      	movs	r2, r7
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	0011      	movs	r1, r2
 80063e4:	0018      	movs	r0, r3
 80063e6:	f000 f9e1 	bl	80067ac <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80063ea:	1d3a      	adds	r2, r7, #4
 80063ec:	003b      	movs	r3, r7
 80063ee:	0011      	movs	r1, r2
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 fb91 	bl	8006b18 <makeTime>
 80063f6:	0002      	movs	r2, r0
 80063f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006474 <UpdateSystemUptime+0x9c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	213c      	movs	r1, #60	@ 0x3c
 8006408:	0018      	movs	r0, r3
 800640a:	f7f9 ff51 	bl	80002b0 <__aeabi_uidivmod>
 800640e:	000b      	movs	r3, r1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	4b19      	ldr	r3, [pc, #100]	@ (8006478 <UpdateSystemUptime+0xa0>)
 8006414:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	213c      	movs	r1, #60	@ 0x3c
 800641a:	0018      	movs	r0, r3
 800641c:	f7f9 fec2 	bl	80001a4 <__udivsi3>
 8006420:	0003      	movs	r3, r0
 8006422:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	213c      	movs	r1, #60	@ 0x3c
 8006428:	0018      	movs	r0, r3
 800642a:	f7f9 ff41 	bl	80002b0 <__aeabi_uidivmod>
 800642e:	000b      	movs	r3, r1
 8006430:	b2da      	uxtb	r2, r3
 8006432:	4b11      	ldr	r3, [pc, #68]	@ (8006478 <UpdateSystemUptime+0xa0>)
 8006434:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	213c      	movs	r1, #60	@ 0x3c
 800643a:	0018      	movs	r0, r3
 800643c:	f7f9 feb2 	bl	80001a4 <__udivsi3>
 8006440:	0003      	movs	r3, r0
 8006442:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2118      	movs	r1, #24
 8006448:	0018      	movs	r0, r3
 800644a:	f7f9 ff31 	bl	80002b0 <__aeabi_uidivmod>
 800644e:	000b      	movs	r3, r1
 8006450:	b2da      	uxtb	r2, r3
 8006452:	4b09      	ldr	r3, [pc, #36]	@ (8006478 <UpdateSystemUptime+0xa0>)
 8006454:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2118      	movs	r1, #24
 800645a:	0018      	movs	r0, r3
 800645c:	f7f9 fea2 	bl	80001a4 <__udivsi3>
 8006460:	0003      	movs	r3, r0
 8006462:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	b29a      	uxth	r2, r3
 8006468:	4b03      	ldr	r3, [pc, #12]	@ (8006478 <UpdateSystemUptime+0xa0>)
 800646a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800646c:	46c0      	nop			@ (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b008      	add	sp, #32
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000ce0 	.word	0x20000ce0
 8006478:	20000cd4 	.word	0x20000cd4

0800647c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	0008      	movs	r0, r1
 8006486:	0011      	movs	r1, r2
 8006488:	1cfb      	adds	r3, r7, #3
 800648a:	1c02      	adds	r2, r0, #0
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	1cbb      	adds	r3, r7, #2
 8006490:	1c0a      	adds	r2, r1, #0
 8006492:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006494:	230e      	movs	r3, #14
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800649c:	230f      	movs	r3, #15
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	1cfa      	adds	r2, r7, #3
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e015      	b.n	80064d4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80064a8:	200f      	movs	r0, #15
 80064aa:	183b      	adds	r3, r7, r0
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	18d2      	adds	r2, r2, r3
 80064b2:	240e      	movs	r4, #14
 80064b4:	193b      	adds	r3, r7, r4
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	7811      	ldrb	r1, [r2, #0]
 80064ba:	2208      	movs	r2, #8
 80064bc:	18ba      	adds	r2, r7, r2
 80064be:	54d1      	strb	r1, [r2, r3]
    pos++;
 80064c0:	193b      	adds	r3, r7, r4
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	193b      	adds	r3, r7, r4
 80064c6:	3201      	adds	r2, #1
 80064c8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80064ca:	183b      	adds	r3, r7, r0
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	183b      	adds	r3, r7, r0
 80064d0:	3201      	adds	r2, #1
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	200f      	movs	r0, #15
 80064d6:	183a      	adds	r2, r7, r0
 80064d8:	1cbb      	adds	r3, r7, #2
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d9e2      	bls.n	80064a8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80064e2:	230e      	movs	r3, #14
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2208      	movs	r2, #8
 80064ea:	18ba      	adds	r2, r7, r2
 80064ec:	2100      	movs	r1, #0
 80064ee:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80064f0:	1cfb      	adds	r3, r7, #3
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b13      	cmp	r3, #19
 80064f6:	d849      	bhi.n	800658c <aBuff2int+0x110>
    if (start == 17) { //month
 80064f8:	1cfb      	adds	r3, r7, #3
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b11      	cmp	r3, #17
 80064fe:	d122      	bne.n	8006546 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006500:	183b      	adds	r3, r7, r0
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e018      	b.n	800653a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006508:	240f      	movs	r4, #15
 800650a:	193b      	adds	r3, r7, r4
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	4b25      	ldr	r3, [pc, #148]	@ (80065a4 <aBuff2int+0x128>)
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	58d2      	ldr	r2, [r2, r3]
 8006514:	2308      	movs	r3, #8
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	0011      	movs	r1, r2
 800651a:	0018      	movs	r0, r3
 800651c:	f7f9 fe1c 	bl	8000158 <strcmp>
 8006520:	1e03      	subs	r3, r0, #0
 8006522:	d104      	bne.n	800652e <aBuff2int+0xb2>
          return i+1;
 8006524:	193b      	adds	r3, r7, r4
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e035      	b.n	800659a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800652e:	210f      	movs	r1, #15
 8006530:	187b      	adds	r3, r7, r1
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	187b      	adds	r3, r7, r1
 8006536:	3201      	adds	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	230f      	movs	r3, #15
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b0b      	cmp	r3, #11
 8006542:	d9e1      	bls.n	8006508 <aBuff2int+0x8c>
 8006544:	e022      	b.n	800658c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006546:	230f      	movs	r3, #15
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e018      	b.n	8006582 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006550:	240f      	movs	r4, #15
 8006552:	193b      	adds	r3, r7, r4
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	4b14      	ldr	r3, [pc, #80]	@ (80065a8 <aBuff2int+0x12c>)
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	58d2      	ldr	r2, [r2, r3]
 800655c:	2308      	movs	r3, #8
 800655e:	18fb      	adds	r3, r7, r3
 8006560:	0011      	movs	r1, r2
 8006562:	0018      	movs	r0, r3
 8006564:	f7f9 fdf8 	bl	8000158 <strcmp>
 8006568:	1e03      	subs	r3, r0, #0
 800656a:	d104      	bne.n	8006576 <aBuff2int+0xfa>
          return i+1;
 800656c:	193b      	adds	r3, r7, r4
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	e011      	b.n	800659a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006576:	210f      	movs	r1, #15
 8006578:	187b      	adds	r3, r7, r1
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	187b      	adds	r3, r7, r1
 800657e:	3201      	adds	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	230f      	movs	r3, #15
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b06      	cmp	r3, #6
 800658a:	d9e1      	bls.n	8006550 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800658c:	2308      	movs	r3, #8
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	0018      	movs	r0, r3
 8006592:	f017 fbbe 	bl	801dd12 <atoi>
 8006596:	0003      	movs	r3, r0
 8006598:	b2db      	uxtb	r3, r3
}
 800659a:	0018      	movs	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	b005      	add	sp, #20
 80065a0:	bd90      	pop	{r4, r7, pc}
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	2000004c 	.word	0x2000004c
 80065a8:	20000030 	.word	0x20000030

080065ac <ParseTime>:

void ParseTime(char* buffer) {
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	b08b      	sub	sp, #44	@ 0x2c
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80065b4:	2408      	movs	r4, #8
 80065b6:	193a      	adds	r2, r7, r4
 80065b8:	260c      	movs	r6, #12
 80065ba:	19bb      	adds	r3, r7, r6
 80065bc:	0011      	movs	r1, r2
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 f8f4 	bl	80067ac <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2219      	movs	r2, #25
 80065c8:	2118      	movs	r1, #24
 80065ca:	0018      	movs	r0, r3
 80065cc:	f7ff ff56 	bl	800647c <aBuff2int>
 80065d0:	0003      	movs	r3, r0
 80065d2:	001a      	movs	r2, r3
 80065d4:	19bb      	adds	r3, r7, r6
 80065d6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	221c      	movs	r2, #28
 80065dc:	211b      	movs	r1, #27
 80065de:	0018      	movs	r0, r3
 80065e0:	f7ff ff4c 	bl	800647c <aBuff2int>
 80065e4:	0003      	movs	r3, r0
 80065e6:	001a      	movs	r2, r3
 80065e8:	19bb      	adds	r3, r7, r6
 80065ea:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	221f      	movs	r2, #31
 80065f0:	211e      	movs	r1, #30
 80065f2:	0018      	movs	r0, r3
 80065f4:	f7ff ff42 	bl	800647c <aBuff2int>
 80065f8:	0003      	movs	r3, r0
 80065fa:	001a      	movs	r2, r3
 80065fc:	19bb      	adds	r3, r7, r6
 80065fe:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2224      	movs	r2, #36	@ 0x24
 8006604:	2123      	movs	r1, #35	@ 0x23
 8006606:	0018      	movs	r0, r3
 8006608:	f7ff ff38 	bl	800647c <aBuff2int>
 800660c:	0003      	movs	r3, r0
 800660e:	001a      	movs	r2, r3
 8006610:	0025      	movs	r5, r4
 8006612:	197b      	adds	r3, r7, r5
 8006614:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2213      	movs	r2, #19
 800661a:	2111      	movs	r1, #17
 800661c:	0018      	movs	r0, r3
 800661e:	f7ff ff2d 	bl	800647c <aBuff2int>
 8006622:	0003      	movs	r3, r0
 8006624:	001a      	movs	r2, r3
 8006626:	197b      	adds	r3, r7, r5
 8006628:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2216      	movs	r2, #22
 800662e:	2115      	movs	r1, #21
 8006630:	0018      	movs	r0, r3
 8006632:	f7ff ff23 	bl	800647c <aBuff2int>
 8006636:	0003      	movs	r3, r0
 8006638:	001a      	movs	r2, r3
 800663a:	197b      	adds	r3, r7, r5
 800663c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	220f      	movs	r2, #15
 8006642:	210d      	movs	r1, #13
 8006644:	0018      	movs	r0, r3
 8006646:	f7ff ff19 	bl	800647c <aBuff2int>
 800664a:	0003      	movs	r3, r0
 800664c:	001a      	movs	r2, r3
 800664e:	197b      	adds	r3, r7, r5
 8006650:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006652:	19bb      	adds	r3, r7, r6
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	001c      	movs	r4, r3
 8006658:	19bb      	adds	r3, r7, r6
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	0018      	movs	r0, r3
 800665e:	19bb      	adds	r3, r7, r6
 8006660:	789b      	ldrb	r3, [r3, #2]
 8006662:	4a1c      	ldr	r2, [pc, #112]	@ (80066d4 <ParseTime+0x128>)
 8006664:	491c      	ldr	r1, [pc, #112]	@ (80066d8 <ParseTime+0x12c>)
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	9000      	str	r0, [sp, #0]
 800666a:	0023      	movs	r3, r4
 800666c:	2003      	movs	r0, #3
 800666e:	f007 fa31 	bl	800dad4 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006672:	197b      	adds	r3, r7, r5
 8006674:	789b      	ldrb	r3, [r3, #2]
 8006676:	001c      	movs	r4, r3
 8006678:	197b      	adds	r3, r7, r5
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	0018      	movs	r0, r3
 800667e:	197b      	adds	r3, r7, r5
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	4a16      	ldr	r2, [pc, #88]	@ (80066dc <ParseTime+0x130>)
 8006684:	4914      	ldr	r1, [pc, #80]	@ (80066d8 <ParseTime+0x12c>)
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	9000      	str	r0, [sp, #0]
 800668a:	0023      	movs	r3, r4
 800668c:	2003      	movs	r0, #3
 800668e:	f007 fa21 	bl	800dad4 <CreateLine>
  RTC_SetTime(&currentTime);
 8006692:	19bb      	adds	r3, r7, r6
 8006694:	0018      	movs	r0, r3
 8006696:	f000 f825 	bl	80066e4 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800669a:	197b      	adds	r3, r7, r5
 800669c:	0018      	movs	r0, r3
 800669e:	f000 f847 	bl	8006730 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80066a2:	197b      	adds	r3, r7, r5
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d101      	bne.n	80066ae <ParseTime+0x102>
    reset_fanCleaningDone();
 80066aa:	f002 fb5d 	bl	8008d68 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 80066ae:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <ParseTime+0x134>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80066b6:	230c      	movs	r3, #12
 80066b8:	18fa      	adds	r2, r7, r3
 80066ba:	2308      	movs	r3, #8
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	0011      	movs	r1, r2
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 fa29 	bl	8006b18 <makeTime>
 80066c6:	0002      	movs	r2, r0
 80066c8:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <ParseTime+0x134>)
 80066ca:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 80066cc:	46c0      	nop			@ (mov r8, r8)
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b009      	add	sp, #36	@ 0x24
 80066d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d4:	08023294 	.word	0x08023294
 80066d8:	080232cc 	.word	0x080232cc
 80066dc:	080232d0 	.word	0x080232d0
 80066e0:	20000ce0 	.word	0x20000ce0

080066e4 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80066fe:	4b09      	ldr	r3, [pc, #36]	@ (8006724 <RTC_SetTime+0x40>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	0018      	movs	r0, r3
 8006708:	f00e ff5a 	bl	80155c0 <HAL_RTC_SetTime>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d005      	beq.n	800671c <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006710:	4a05      	ldr	r2, [pc, #20]	@ (8006728 <RTC_SetTime+0x44>)
 8006712:	4b06      	ldr	r3, [pc, #24]	@ (800672c <RTC_SetTime+0x48>)
 8006714:	0019      	movs	r1, r3
 8006716:	2001      	movs	r0, #1
 8006718:	f007 f9dc 	bl	800dad4 <CreateLine>
    }
}
 800671c:	46c0      	nop			@ (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000cdc 	.word	0x20000cdc
 8006728:	08023304 	.word	0x08023304
 800672c:	08023320 	.word	0x08023320

08006730 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006738:	4b16      	ldr	r3, [pc, #88]	@ (8006794 <RTC_SetDate+0x64>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	0018      	movs	r0, r3
 8006742:	f00f f845 	bl	80157d0 <HAL_RTC_SetDate>
 8006746:	1e03      	subs	r3, r0, #0
 8006748:	d005      	beq.n	8006756 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 800674a:	4a13      	ldr	r2, [pc, #76]	@ (8006798 <RTC_SetDate+0x68>)
 800674c:	4b13      	ldr	r3, [pc, #76]	@ (800679c <RTC_SetDate+0x6c>)
 800674e:	0019      	movs	r1, r3
 8006750:	2001      	movs	r0, #1
 8006752:	f007 f9bf 	bl	800dad4 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8006756:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <RTC_SetDate+0x64>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2101      	movs	r1, #1
 800675c:	0018      	movs	r0, r3
 800675e:	f00f fb7d 	bl	8015e5c <HAL_RTCEx_BKUPRead>
 8006762:	0003      	movs	r3, r0
 8006764:	4a0e      	ldr	r2, [pc, #56]	@ (80067a0 <RTC_SetDate+0x70>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d010      	beq.n	800678c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800676a:	4a0e      	ldr	r2, [pc, #56]	@ (80067a4 <RTC_SetDate+0x74>)
 800676c:	4b0e      	ldr	r3, [pc, #56]	@ (80067a8 <RTC_SetDate+0x78>)
 800676e:	0019      	movs	r1, r3
 8006770:	2003      	movs	r0, #3
 8006772:	f007 f9af 	bl	800dad4 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006776:	f00d fea3 	bl	80144c0 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800677a:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <RTC_SetDate+0x64>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a08      	ldr	r2, [pc, #32]	@ (80067a0 <RTC_SetDate+0x70>)
 8006780:	2101      	movs	r1, #1
 8006782:	0018      	movs	r0, r3
 8006784:	f00f fb52 	bl	8015e2c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006788:	f00d fea8 	bl	80144dc <HAL_PWR_DisableBkUpAccess>
    }
}
 800678c:	46c0      	nop			@ (mov r8, r8)
 800678e:	46bd      	mov	sp, r7
 8006790:	b002      	add	sp, #8
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000cdc 	.word	0x20000cdc
 8006798:	08023324 	.word	0x08023324
 800679c:	08023320 	.word	0x08023320
 80067a0:	0000bebe 	.word	0x0000bebe
 80067a4:	08023340 	.word	0x08023340
 80067a8:	080232cc 	.word	0x080232cc

080067ac <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80067ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 80067b6:	250f      	movs	r5, #15
 80067b8:	197b      	adds	r3, r7, r5
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 80067be:	230e      	movs	r3, #14
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 80067c6:	260c      	movs	r6, #12
 80067c8:	19bc      	adds	r4, r7, r6
 80067ca:	f006 fb0b 	bl	800cde4 <powerCheck>
 80067ce:	0003      	movs	r3, r0
 80067d0:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 80067d2:	19bb      	adds	r3, r7, r6
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 80067da:	197b      	adds	r3, r7, r5
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	197b      	adds	r3, r7, r5
 80067e0:	3201      	adds	r2, #1
 80067e2:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80067e4:	230d      	movs	r3, #13
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	e039      	b.n	8006862 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80067ee:	4b23      	ldr	r3, [pc, #140]	@ (800687c <RTC_GetTime+0xd0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	0018      	movs	r0, r3
 80067f8:	f00e ff8c 	bl	8015714 <HAL_RTC_GetTime>
 80067fc:	1e03      	subs	r3, r0, #0
 80067fe:	d005      	beq.n	800680c <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006800:	4a1f      	ldr	r2, [pc, #124]	@ (8006880 <RTC_GetTime+0xd4>)
 8006802:	4b20      	ldr	r3, [pc, #128]	@ (8006884 <RTC_GetTime+0xd8>)
 8006804:	0019      	movs	r1, r3
 8006806:	2001      	movs	r0, #1
 8006808:	f007 f964 	bl	800dad4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800680c:	4b1b      	ldr	r3, [pc, #108]	@ (800687c <RTC_GetTime+0xd0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	0018      	movs	r0, r3
 8006816:	f00f f86f 	bl	80158f8 <HAL_RTC_GetDate>
 800681a:	1e03      	subs	r3, r0, #0
 800681c:	d005      	beq.n	800682a <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800681e:	4a1a      	ldr	r2, [pc, #104]	@ (8006888 <RTC_GetTime+0xdc>)
 8006820:	4b18      	ldr	r3, [pc, #96]	@ (8006884 <RTC_GetTime+0xd8>)
 8006822:	0019      	movs	r1, r3
 8006824:	2001      	movs	r0, #1
 8006826:	f007 f955 	bl	800dad4 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800682a:	230c      	movs	r3, #12
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d110      	bne.n	8006856 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	210e      	movs	r1, #14
 800683a:	187a      	adds	r2, r7, r1
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d018      	beq.n	8006874 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8006842:	187b      	adds	r3, r7, r1
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	7812      	ldrb	r2, [r2, #0]
 8006848:	701a      	strb	r2, [r3, #0]
        t++;
 800684a:	210f      	movs	r1, #15
 800684c:	187b      	adds	r3, r7, r1
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	187b      	adds	r3, r7, r1
 8006852:	3201      	adds	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8006856:	210d      	movs	r1, #13
 8006858:	187b      	adds	r3, r7, r1
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	187b      	adds	r3, r7, r1
 800685e:	3201      	adds	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	230d      	movs	r3, #13
 8006864:	18fa      	adds	r2, r7, r3
 8006866:	230f      	movs	r3, #15
 8006868:	18fb      	adds	r3, r7, r3
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d3bd      	bcc.n	80067ee <RTC_GetTime+0x42>
 8006872:	e000      	b.n	8006876 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006874:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006876:	46bd      	mov	sp, r7
 8006878:	b005      	add	sp, #20
 800687a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687c:	20000cdc 	.word	0x20000cdc
 8006880:	08023358 	.word	0x08023358
 8006884:	08023320 	.word	0x08023320
 8006888:	08023374 	.word	0x08023374

0800688c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006892:	003a      	movs	r2, r7
 8006894:	1d3b      	adds	r3, r7, #4
 8006896:	0011      	movs	r1, r2
 8006898:	0018      	movs	r0, r3
 800689a:	f7ff ff87 	bl	80067ac <RTC_GetTime>
  return currentDate.WeekDay;
 800689e:	003b      	movs	r3, r7
 80068a0:	781b      	ldrb	r3, [r3, #0]
}
 80068a2:	0018      	movs	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b006      	add	sp, #24
 80068a8:	bd80      	pop	{r7, pc}

080068aa <getPosixTime>:

uint32_t getPosixTime(void) {
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b086      	sub	sp, #24
 80068ae:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80068b0:	003a      	movs	r2, r7
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	0011      	movs	r1, r2
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7ff ff78 	bl	80067ac <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 80068bc:	1d3a      	adds	r2, r7, #4
 80068be:	003b      	movs	r3, r7
 80068c0:	0011      	movs	r1, r2
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 f928 	bl	8006b18 <makeTime>
 80068c8:	0003      	movs	r3, r0
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b006      	add	sp, #24
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 80068d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d6:	b08d      	sub	sp, #52	@ 0x34
 80068d8:	af04      	add	r7, sp, #16
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 80068de:	240c      	movs	r4, #12
 80068e0:	193a      	adds	r2, r7, r4
 80068e2:	2508      	movs	r5, #8
 80068e4:	1979      	adds	r1, r7, r5
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	0018      	movs	r0, r3
 80068ea:	f000 f9df 	bl	8006cac <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80068ee:	002a      	movs	r2, r5
 80068f0:	18bb      	adds	r3, r7, r2
 80068f2:	789b      	ldrb	r3, [r3, #2]
 80068f4:	001e      	movs	r6, r3
 80068f6:	18bb      	adds	r3, r7, r2
 80068f8:	785b      	ldrb	r3, [r3, #1]
 80068fa:	469c      	mov	ip, r3
 80068fc:	18bb      	adds	r3, r7, r2
 80068fe:	78db      	ldrb	r3, [r3, #3]
 8006900:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006902:	0021      	movs	r1, r4
 8006904:	187b      	adds	r3, r7, r1
 8006906:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006908:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800690a:	187b      	adds	r3, r7, r1
 800690c:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800690e:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006910:	187b      	adds	r3, r7, r1
 8006912:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006914:	4906      	ldr	r1, [pc, #24]	@ (8006930 <getUTCfromPosixTime+0x5c>)
 8006916:	6838      	ldr	r0, [r7, #0]
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	9502      	str	r5, [sp, #8]
 800691c:	9401      	str	r4, [sp, #4]
 800691e:	9200      	str	r2, [sp, #0]
 8006920:	4663      	mov	r3, ip
 8006922:	0032      	movs	r2, r6
 8006924:	f018 fe40 	bl	801f5a8 <siprintf>
}
 8006928:	46c0      	nop			@ (mov r8, r8)
 800692a:	46bd      	mov	sp, r7
 800692c:	b009      	add	sp, #36	@ 0x24
 800692e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006930:	08023390 	.word	0x08023390

08006934 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800693c:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <RTC_SetWakeUpTimer+0x4c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	0018      	movs	r0, r3
 8006942:	f00f f9d7 	bl	8015cf4 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006946:	4b0e      	ldr	r3, [pc, #56]	@ (8006980 <RTC_SetWakeUpTimer+0x4c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	22ff      	movs	r2, #255	@ 0xff
 8006950:	401a      	ands	r2, r3
 8006952:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <RTC_SetWakeUpTimer+0x4c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	490a      	ldr	r1, [pc, #40]	@ (8006984 <RTC_SetWakeUpTimer+0x50>)
 800695a:	430a      	orrs	r2, r1
 800695c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800695e:	4b0a      	ldr	r3, [pc, #40]	@ (8006988 <RTC_SetWakeUpTimer+0x54>)
 8006960:	2280      	movs	r2, #128	@ 0x80
 8006962:	0352      	lsls	r2, r2, #13
 8006964:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <RTC_SetWakeUpTimer+0x4c>)
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3b01      	subs	r3, #1
 800696e:	2204      	movs	r2, #4
 8006970:	0019      	movs	r1, r3
 8006972:	f00f f8e7 	bl	8015b44 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006976:	46c0      	nop			@ (mov r8, r8)
 8006978:	46bd      	mov	sp, r7
 800697a:	b002      	add	sp, #8
 800697c:	bd80      	pop	{r7, pc}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	20000cdc 	.word	0x20000cdc
 8006984:	fffffb7f 	.word	0xfffffb7f
 8006988:	40010400 	.word	0x40010400

0800698c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006990:	4a0c      	ldr	r2, [pc, #48]	@ (80069c4 <Enter_Standby_Mode+0x38>)
 8006992:	4b0d      	ldr	r3, [pc, #52]	@ (80069c8 <Enter_Standby_Mode+0x3c>)
 8006994:	0019      	movs	r1, r3
 8006996:	2003      	movs	r0, #3
 8006998:	f007 f89c 	bl	800dad4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 800699c:	2064      	movs	r0, #100	@ 0x64
 800699e:	f007 fcf9 	bl	800e394 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80069a2:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <Enter_Standby_Mode+0x40>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	0018      	movs	r0, r3
 80069a8:	f00f f9a4 	bl	8015cf4 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 80069ac:	f007 fd16 	bl	800e3dc <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 80069b0:	f00d fe00 	bl	80145b4 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 80069b4:	f001 f9ec 	bl	8007d90 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 80069b8:	f007 fd1e 	bl	800e3f8 <HAL_ResumeTick>
}
 80069bc:	46c0      	nop			@ (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	080233e4 	.word	0x080233e4
 80069c8:	080232cc 	.word	0x080232cc
 80069cc:	20000cdc 	.word	0x20000cdc

080069d0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	0002      	movs	r2, r0
 80069d8:	1dbb      	adds	r3, r7, #6
 80069da:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 80069dc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad8 <Enter_Stop_Mode+0x108>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 80069e4:	f002 f9a2 	bl	8008d2c <sen5x_Power_Off>
  }
  // restart the SGP40 with a soft reset to enter idle mode
  SGP_SoftReset();
 80069e8:	f004 ffce 	bl	800b988 <SGP_SoftReset>
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 80069ec:	f7ff fbac 	bl	8006148 <ReadBatteryVoltage>
 80069f0:	1c03      	adds	r3, r0, #0
 80069f2:	1c18      	adds	r0, r3, #0
 80069f4:	f7fc fd36 	bl	8003464 <__aeabi_f2d>
 80069f8:	0002      	movs	r2, r0
 80069fa:	000b      	movs	r3, r1
 80069fc:	4837      	ldr	r0, [pc, #220]	@ (8006adc <Enter_Stop_Mode+0x10c>)
 80069fe:	4938      	ldr	r1, [pc, #224]	@ (8006ae0 <Enter_Stop_Mode+0x110>)
 8006a00:	9200      	str	r2, [sp, #0]
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	0002      	movs	r2, r0
 8006a06:	2002      	movs	r0, #2
 8006a08:	f007 f864 	bl	800dad4 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006a0c:	1dbb      	adds	r3, r7, #6
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	4a34      	ldr	r2, [pc, #208]	@ (8006ae4 <Enter_Stop_Mode+0x114>)
 8006a12:	4935      	ldr	r1, [pc, #212]	@ (8006ae8 <Enter_Stop_Mode+0x118>)
 8006a14:	2003      	movs	r0, #3
 8006a16:	f007 f85d 	bl	800dad4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006a1a:	f7ff ff46 	bl	80068aa <getPosixTime>
 8006a1e:	0002      	movs	r2, r0
 8006a20:	1dbb      	adds	r3, r7, #6
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	18d3      	adds	r3, r2, r3
 8006a26:	4a31      	ldr	r2, [pc, #196]	@ (8006aec <Enter_Stop_Mode+0x11c>)
 8006a28:	0011      	movs	r1, r2
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7ff ff52 	bl	80068d4 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006a30:	4b2e      	ldr	r3, [pc, #184]	@ (8006aec <Enter_Stop_Mode+0x11c>)
 8006a32:	4a2f      	ldr	r2, [pc, #188]	@ (8006af0 <Enter_Stop_Mode+0x120>)
 8006a34:	492a      	ldr	r1, [pc, #168]	@ (8006ae0 <Enter_Stop_Mode+0x110>)
 8006a36:	2002      	movs	r0, #2
 8006a38:	f007 f84c 	bl	800dad4 <CreateLine>
  HAL_Delay(100);
 8006a3c:	2064      	movs	r0, #100	@ 0x64
 8006a3e:	f007 fca9 	bl	800e394 <HAL_Delay>
  HAL_SuspendTick();
 8006a42:	f007 fccb 	bl	800e3dc <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006a46:	1dbb      	adds	r3, r7, #6
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff ff72 	bl	8006934 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006a50:	2101      	movs	r1, #1
 8006a52:	2001      	movs	r0, #1
 8006a54:	f00d fd52 	bl	80144fc <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006a58:	f001 f99a 	bl	8007d90 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006a5c:	1dbb      	adds	r3, r7, #6
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f002 f8e7 	bl	8008c34 <sen5x_enable>
 8006a66:	1e03      	subs	r3, r0, #0
 8006a68:	d01e      	beq.n	8006aa8 <Enter_Stop_Mode+0xd8>
    showTime();
 8006a6a:	f7ff fc63 	bl	8006334 <showTime>
    set_light_on_state();
 8006a6e:	f002 fd2f 	bl	80094d0 <set_light_on_state>
    if (!userToggle) {
 8006a72:	4b20      	ldr	r3, [pc, #128]	@ (8006af4 <Enter_Stop_Mode+0x124>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2201      	movs	r2, #1
 8006a78:	4053      	eors	r3, r2
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d013      	beq.n	8006aa8 <Enter_Stop_Mode+0xd8>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006a80:	201b      	movs	r0, #27
 8006a82:	f7ff ff57 	bl	8006934 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006a86:	4a17      	ldr	r2, [pc, #92]	@ (8006ae4 <Enter_Stop_Mode+0x114>)
 8006a88:	4917      	ldr	r1, [pc, #92]	@ (8006ae8 <Enter_Stop_Mode+0x118>)
 8006a8a:	231b      	movs	r3, #27
 8006a8c:	2003      	movs	r0, #3
 8006a8e:	f007 f821 	bl	800dad4 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006a92:	2101      	movs	r1, #1
 8006a94:	2001      	movs	r0, #1
 8006a96:	f00d fd31 	bl	80144fc <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006a9a:	f001 f979 	bl	8007d90 <SystemClock_Config>
      setsen5xReadTimer(2000);
 8006a9e:	23fa      	movs	r3, #250	@ 0xfa
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f002 f8b4 	bl	8008c10 <setsen5xReadTimer>

    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006aa8:	f007 fca6 	bl	800e3f8 <HAL_ResumeTick>
  showTime();
 8006aac:	f7ff fc42 	bl	8006334 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006ab0:	f001 fd40 	bl	8008534 <ResetDBACalculator>
//  setMeasStamp(300);
//  ESPTransmitDone = false;
  setESPTimeStamp(3000);
 8006ab4:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <Enter_Stop_Mode+0x128>)
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7fc fe7a 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006abc:	2000      	movs	r0, #0
 8006abe:	f004 ffeb 	bl	800ba98 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f007 f9ca 	bl	800de5c <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006ac8:	2000      	movs	r0, #0
 8006aca:	f001 fd21 	bl	8008510 <setMICTimeStamp>
}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b002      	add	sp, #8
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	200011c9 	.word	0x200011c9
 8006adc:	08023408 	.word	0x08023408
 8006ae0:	08023420 	.word	0x08023420
 8006ae4:	08023424 	.word	0x08023424
 8006ae8:	080232cc 	.word	0x080232cc
 8006aec:	20000ce4 	.word	0x20000ce4
 8006af0:	08023448 	.word	0x08023448
 8006af4:	20002152 	.word	0x20002152
 8006af8:	00000bb8 	.word	0x00000bb8

08006afc <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006b04:	4b03      	ldr	r3, [pc, #12]	@ (8006b14 <InitClock+0x18>)
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	601a      	str	r2, [r3, #0]
}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b002      	add	sp, #8
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			@ (mov r8, r8)
 8006b14:	20000cdc 	.word	0x20000cdc

08006b18 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	78db      	ldrb	r3, [r3, #3]
 8006b26:	001a      	movs	r2, r3
 8006b28:	0013      	movs	r3, r2
 8006b2a:	025b      	lsls	r3, r3, #9
 8006b2c:	189b      	adds	r3, r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	189b      	adds	r3, r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	189b      	adds	r3, r3, r2
 8006b36:	011a      	lsls	r2, r3, #4
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	01d3      	lsls	r3, r2, #7
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e028      	b.n	8006b98 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4a53      	ldr	r2, [pc, #332]	@ (8006c98 <makeTime+0x180>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	db21      	blt.n	8006b92 <makeTime+0x7a>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a52      	ldr	r2, [pc, #328]	@ (8006c9c <makeTime+0x184>)
 8006b52:	4694      	mov	ip, r2
 8006b54:	4463      	add	r3, ip
 8006b56:	001a      	movs	r2, r3
 8006b58:	2303      	movs	r3, #3
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d119      	bne.n	8006b92 <makeTime+0x7a>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a4e      	ldr	r2, [pc, #312]	@ (8006c9c <makeTime+0x184>)
 8006b62:	4694      	mov	ip, r2
 8006b64:	4463      	add	r3, ip
 8006b66:	2164      	movs	r1, #100	@ 0x64
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7f9 fc8b 	bl	8000484 <__aeabi_idivmod>
 8006b6e:	1e0b      	subs	r3, r1, #0
 8006b70:	d10a      	bne.n	8006b88 <makeTime+0x70>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4a49      	ldr	r2, [pc, #292]	@ (8006c9c <makeTime+0x184>)
 8006b76:	4694      	mov	ip, r2
 8006b78:	4463      	add	r3, ip
 8006b7a:	22c8      	movs	r2, #200	@ 0xc8
 8006b7c:	0051      	lsls	r1, r2, #1
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7f9 fc80 	bl	8000484 <__aeabi_idivmod>
 8006b84:	1e0b      	subs	r3, r1, #0
 8006b86:	d104      	bne.n	8006b92 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4a45      	ldr	r2, [pc, #276]	@ (8006ca0 <makeTime+0x188>)
 8006b8c:	4694      	mov	ip, r2
 8006b8e:	4463      	add	r3, ip
 8006b90:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	78db      	ldrb	r3, [r3, #3]
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	dbd0      	blt.n	8006b46 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e03c      	b.n	8006c24 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d125      	bne.n	8006bfc <makeTime+0xe4>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	4a39      	ldr	r2, [pc, #228]	@ (8006c9c <makeTime+0x184>)
 8006bb6:	4694      	mov	ip, r2
 8006bb8:	4463      	add	r3, ip
 8006bba:	001a      	movs	r2, r3
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	d11c      	bne.n	8006bfc <makeTime+0xe4>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	78db      	ldrb	r3, [r3, #3]
 8006bc6:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <makeTime+0x184>)
 8006bc8:	4694      	mov	ip, r2
 8006bca:	4463      	add	r3, ip
 8006bcc:	2164      	movs	r1, #100	@ 0x64
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7f9 fc58 	bl	8000484 <__aeabi_idivmod>
 8006bd4:	1e0b      	subs	r3, r1, #0
 8006bd6:	d10b      	bne.n	8006bf0 <makeTime+0xd8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	78db      	ldrb	r3, [r3, #3]
 8006bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8006c9c <makeTime+0x184>)
 8006bde:	4694      	mov	ip, r2
 8006be0:	4463      	add	r3, ip
 8006be2:	22c8      	movs	r2, #200	@ 0xc8
 8006be4:	0051      	lsls	r1, r2, #1
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7f9 fc4c 	bl	8000484 <__aeabi_idivmod>
 8006bec:	1e0b      	subs	r3, r1, #0
 8006bee:	d105      	bne.n	8006bfc <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca4 <makeTime+0x18c>)
 8006bf4:	4694      	mov	ip, r2
 8006bf6:	4463      	add	r3, ip
 8006bf8:	60bb      	str	r3, [r7, #8]
 8006bfa:	e010      	b.n	8006c1e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	4a29      	ldr	r2, [pc, #164]	@ (8006ca8 <makeTime+0x190>)
 8006c02:	5cd3      	ldrb	r3, [r2, r3]
 8006c04:	001a      	movs	r2, r3
 8006c06:	0013      	movs	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	011a      	lsls	r2, r3, #4
 8006c0e:	1ad2      	subs	r2, r2, r3
 8006c10:	0113      	lsls	r3, r2, #4
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	01db      	lsls	r3, r3, #7
 8006c16:	001a      	movs	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	001a      	movs	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	dbbc      	blt.n	8006baa <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	789b      	ldrb	r3, [r3, #2]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	001a      	movs	r2, r3
 8006c38:	0013      	movs	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	189b      	adds	r3, r3, r2
 8006c3e:	011a      	lsls	r2, r3, #4
 8006c40:	1ad2      	subs	r2, r2, r3
 8006c42:	0113      	lsls	r3, r2, #4
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	01db      	lsls	r3, r3, #7
 8006c48:	001a      	movs	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	189b      	adds	r3, r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	001a      	movs	r2, r3
 8006c56:	0013      	movs	r3, r2
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	011a      	lsls	r2, r3, #4
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	0113      	lsls	r3, r2, #4
 8006c62:	001a      	movs	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	189b      	adds	r3, r3, r2
 8006c68:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	001a      	movs	r2, r3
 8006c70:	0013      	movs	r3, r2
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	001a      	movs	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	189b      	adds	r3, r3, r2
 8006c7e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	789b      	ldrb	r3, [r3, #2]
 8006c84:	001a      	movs	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
}
 8006c8e:	0018      	movs	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	b004      	add	sp, #16
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	46c0      	nop			@ (mov r8, r8)
 8006c98:	fffff84f 	.word	0xfffff84f
 8006c9c:	000007b2 	.word	0x000007b2
 8006ca0:	00015180 	.word	0x00015180
 8006ca4:	00263b80 	.word	0x00263b80
 8006ca8:	08024720 	.word	0x08024720

08006cac <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b089      	sub	sp, #36	@ 0x24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	213c      	movs	r1, #60	@ 0x3c
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7f9 faf5 	bl	80002b0 <__aeabi_uidivmod>
 8006cc6:	000b      	movs	r3, r1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	213c      	movs	r1, #60	@ 0x3c
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f7f9 fa66 	bl	80001a4 <__udivsi3>
 8006cd8:	0003      	movs	r3, r0
 8006cda:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	213c      	movs	r1, #60	@ 0x3c
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7f9 fae5 	bl	80002b0 <__aeabi_uidivmod>
 8006ce6:	000b      	movs	r3, r1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	213c      	movs	r1, #60	@ 0x3c
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f7f9 fa56 	bl	80001a4 <__udivsi3>
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2118      	movs	r1, #24
 8006d00:	0018      	movs	r0, r3
 8006d02:	f7f9 fad5 	bl	80002b0 <__aeabi_uidivmod>
 8006d06:	000b      	movs	r3, r1
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2118      	movs	r1, #24
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7f9 fa46 	bl	80001a4 <__udivsi3>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	2107      	movs	r1, #7
 8006d22:	0018      	movs	r0, r3
 8006d24:	f7f9 fac4 	bl	80002b0 <__aeabi_uidivmod>
 8006d28:	000b      	movs	r3, r1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006d34:	231f      	movs	r3, #31
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006d40:	e005      	b.n	8006d4e <breakPosixTime+0xa2>
    year++;
 8006d42:	211f      	movs	r1, #31
 8006d44:	187b      	adds	r3, r7, r1
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	187b      	adds	r3, r7, r1
 8006d4a:	3201      	adds	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006d4e:	241f      	movs	r4, #31
 8006d50:	193b      	adds	r3, r7, r4
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	4a64      	ldr	r2, [pc, #400]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006d56:	4694      	mov	ip, r2
 8006d58:	4463      	add	r3, ip
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d119      	bne.n	8006d96 <breakPosixTime+0xea>
 8006d62:	193b      	adds	r3, r7, r4
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	4a60      	ldr	r2, [pc, #384]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006d68:	4694      	mov	ip, r2
 8006d6a:	4463      	add	r3, ip
 8006d6c:	2164      	movs	r1, #100	@ 0x64
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f7f9 fb88 	bl	8000484 <__aeabi_idivmod>
 8006d74:	1e0b      	subs	r3, r1, #0
 8006d76:	d10b      	bne.n	8006d90 <breakPosixTime+0xe4>
 8006d78:	193b      	adds	r3, r7, r4
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	22c8      	movs	r2, #200	@ 0xc8
 8006d84:	0051      	lsls	r1, r2, #1
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7f9 fb7c 	bl	8000484 <__aeabi_idivmod>
 8006d8c:	1e0b      	subs	r3, r1, #0
 8006d8e:	d102      	bne.n	8006d96 <breakPosixTime+0xea>
 8006d90:	23b7      	movs	r3, #183	@ 0xb7
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	e001      	b.n	8006d9a <breakPosixTime+0xee>
 8006d96:	236e      	movs	r3, #110	@ 0x6e
 8006d98:	33ff      	adds	r3, #255	@ 0xff
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	18d3      	adds	r3, r2, r3
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d9cc      	bls.n	8006d42 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	241f      	movs	r4, #31
 8006dac:	193a      	adds	r2, r7, r4
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006db2:	193b      	adds	r3, r7, r4
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	4a4c      	ldr	r2, [pc, #304]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006db8:	4694      	mov	ip, r2
 8006dba:	4463      	add	r3, ip
 8006dbc:	001a      	movs	r2, r3
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d119      	bne.n	8006df8 <breakPosixTime+0x14c>
 8006dc4:	193b      	adds	r3, r7, r4
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	4a47      	ldr	r2, [pc, #284]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006dca:	4694      	mov	ip, r2
 8006dcc:	4463      	add	r3, ip
 8006dce:	2164      	movs	r1, #100	@ 0x64
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f7f9 fb57 	bl	8000484 <__aeabi_idivmod>
 8006dd6:	1e0b      	subs	r3, r1, #0
 8006dd8:	d10b      	bne.n	8006df2 <breakPosixTime+0x146>
 8006dda:	193b      	adds	r3, r7, r4
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	4a42      	ldr	r2, [pc, #264]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006de0:	4694      	mov	ip, r2
 8006de2:	4463      	add	r3, ip
 8006de4:	22c8      	movs	r2, #200	@ 0xc8
 8006de6:	0051      	lsls	r1, r2, #1
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7f9 fb4b 	bl	8000484 <__aeabi_idivmod>
 8006dee:	1e0b      	subs	r3, r1, #0
 8006df0:	d102      	bne.n	8006df8 <breakPosixTime+0x14c>
 8006df2:	23b7      	movs	r3, #183	@ 0xb7
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	e001      	b.n	8006dfc <breakPosixTime+0x150>
 8006df8:	236e      	movs	r3, #110	@ 0x6e
 8006dfa:	33ff      	adds	r3, #255	@ 0xff
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	61bb      	str	r3, [r7, #24]

  days=0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
  month=0;
 8006e0e:	211e      	movs	r1, #30
 8006e10:	187b      	adds	r3, r7, r1
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006e16:	231d      	movs	r3, #29
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006e1e:	187b      	adds	r3, r7, r1
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	e048      	b.n	8006eb8 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006e26:	231e      	movs	r3, #30
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d12a      	bne.n	8006e86 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006e30:	241f      	movs	r4, #31
 8006e32:	193b      	adds	r3, r7, r4
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006e38:	4694      	mov	ip, r2
 8006e3a:	4463      	add	r3, ip
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	2303      	movs	r3, #3
 8006e40:	4013      	ands	r3, r2
 8006e42:	d11b      	bne.n	8006e7c <breakPosixTime+0x1d0>
 8006e44:	193b      	adds	r3, r7, r4
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	4a27      	ldr	r2, [pc, #156]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006e4a:	4694      	mov	ip, r2
 8006e4c:	4463      	add	r3, ip
 8006e4e:	2164      	movs	r1, #100	@ 0x64
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7f9 fb17 	bl	8000484 <__aeabi_idivmod>
 8006e56:	1e0b      	subs	r3, r1, #0
 8006e58:	d10b      	bne.n	8006e72 <breakPosixTime+0x1c6>
 8006e5a:	193b      	adds	r3, r7, r4
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	4a22      	ldr	r2, [pc, #136]	@ (8006ee8 <breakPosixTime+0x23c>)
 8006e60:	4694      	mov	ip, r2
 8006e62:	4463      	add	r3, ip
 8006e64:	22c8      	movs	r2, #200	@ 0xc8
 8006e66:	0051      	lsls	r1, r2, #1
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7f9 fb0b 	bl	8000484 <__aeabi_idivmod>
 8006e6e:	1e0b      	subs	r3, r1, #0
 8006e70:	d104      	bne.n	8006e7c <breakPosixTime+0x1d0>
        monthLength=29;
 8006e72:	231d      	movs	r3, #29
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	221d      	movs	r2, #29
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e00c      	b.n	8006e96 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006e7c:	231d      	movs	r3, #29
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	221c      	movs	r2, #28
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	e007      	b.n	8006e96 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006e86:	231e      	movs	r3, #30
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	781a      	ldrb	r2, [r3, #0]
 8006e8c:	231d      	movs	r3, #29
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	4916      	ldr	r1, [pc, #88]	@ (8006eec <breakPosixTime+0x240>)
 8006e92:	5c8a      	ldrb	r2, [r1, r2]
 8006e94:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006e96:	211d      	movs	r1, #29
 8006e98:	187b      	adds	r3, r7, r1
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d310      	bcc.n	8006ec4 <breakPosixTime+0x218>
      time -= monthLength;
 8006ea2:	187b      	adds	r3, r7, r1
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006eac:	211e      	movs	r1, #30
 8006eae:	187b      	adds	r3, r7, r1
 8006eb0:	781a      	ldrb	r2, [r3, #0]
 8006eb2:	187b      	adds	r3, r7, r1
 8006eb4:	3201      	adds	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	231e      	movs	r3, #30
 8006eba:	18fb      	adds	r3, r7, r3
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b0b      	cmp	r3, #11
 8006ec0:	d9b1      	bls.n	8006e26 <breakPosixTime+0x17a>
 8006ec2:	e000      	b.n	8006ec6 <breakPosixTime+0x21a>
    } else {
        break;
 8006ec4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006ec6:	231e      	movs	r3, #30
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006ee0:	46c0      	nop			@ (mov r8, r8)
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b009      	add	sp, #36	@ 0x24
 8006ee6:	bd90      	pop	{r4, r7, pc}
 8006ee8:	000007b2 	.word	0x000007b2
 8006eec:	08024720 	.word	0x08024720

08006ef0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006ef6:	003b      	movs	r3, r7
 8006ef8:	0018      	movs	r0, r3
 8006efa:	2308      	movs	r3, #8
 8006efc:	001a      	movs	r2, r3
 8006efe:	2100      	movs	r1, #0
 8006f00:	f018 fc96 	bl	801f830 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006f04:	4b30      	ldr	r3, [pc, #192]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f06:	4a31      	ldr	r2, [pc, #196]	@ (8006fcc <MX_ADC_Init+0xdc>)
 8006f08:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006f10:	4b2d      	ldr	r3, [pc, #180]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f12:	22c0      	movs	r2, #192	@ 0xc0
 8006f14:	0612      	lsls	r2, r2, #24
 8006f16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006f18:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006f24:	4b28      	ldr	r3, [pc, #160]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006f2a:	4b27      	ldr	r3, [pc, #156]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006f30:	4b25      	ldr	r3, [pc, #148]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f32:	2220      	movs	r2, #32
 8006f34:	2100      	movs	r1, #0
 8006f36:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006f38:	4b23      	ldr	r3, [pc, #140]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f3a:	2221      	movs	r2, #33	@ 0x21
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006f40:	4b21      	ldr	r3, [pc, #132]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006f46:	4b20      	ldr	r3, [pc, #128]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f48:	22c2      	movs	r2, #194	@ 0xc2
 8006f4a:	32ff      	adds	r2, #255	@ 0xff
 8006f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f50:	222c      	movs	r2, #44	@ 0x2c
 8006f52:	2100      	movs	r1, #0
 8006f54:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006f56:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f58:	2204      	movs	r2, #4
 8006f5a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006f62:	4b19      	ldr	r3, [pc, #100]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006f68:	4b17      	ldr	r3, [pc, #92]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006f6e:	4b16      	ldr	r3, [pc, #88]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006f74:	4b14      	ldr	r3, [pc, #80]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f76:	0018      	movs	r0, r3
 8006f78:	f007 fa6a 	bl	800e450 <HAL_ADC_Init>
 8006f7c:	1e03      	subs	r3, r0, #0
 8006f7e:	d001      	beq.n	8006f84 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006f80:	f001 f850 	bl	8008024 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006f84:	003b      	movs	r3, r7
 8006f86:	4a12      	ldr	r2, [pc, #72]	@ (8006fd0 <MX_ADC_Init+0xe0>)
 8006f88:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006f8a:	003b      	movs	r3, r7
 8006f8c:	2280      	movs	r2, #128	@ 0x80
 8006f8e:	0152      	lsls	r2, r2, #5
 8006f90:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006f92:	003a      	movs	r2, r7
 8006f94:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006f96:	0011      	movs	r1, r2
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f007 fcc9 	bl	800e930 <HAL_ADC_ConfigChannel>
 8006f9e:	1e03      	subs	r3, r0, #0
 8006fa0:	d001      	beq.n	8006fa6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006fa2:	f001 f83f 	bl	8008024 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006fa6:	003b      	movs	r3, r7
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd4 <MX_ADC_Init+0xe4>)
 8006faa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006fac:	003a      	movs	r2, r7
 8006fae:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <MX_ADC_Init+0xd8>)
 8006fb0:	0011      	movs	r1, r2
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f007 fcbc 	bl	800e930 <HAL_ADC_ConfigChannel>
 8006fb8:	1e03      	subs	r3, r0, #0
 8006fba:	d001      	beq.n	8006fc0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8006fbc:	f001 f832 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006fc0:	46c0      	nop			@ (mov r8, r8)
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b002      	add	sp, #8
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000cfc 	.word	0x20000cfc
 8006fcc:	40012400 	.word	0x40012400
 8006fd0:	38004000 	.word	0x38004000
 8006fd4:	3c008000 	.word	0x3c008000

08006fd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b089      	sub	sp, #36	@ 0x24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fe0:	240c      	movs	r4, #12
 8006fe2:	193b      	adds	r3, r7, r4
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	2314      	movs	r3, #20
 8006fe8:	001a      	movs	r2, r3
 8006fea:	2100      	movs	r1, #0
 8006fec:	f018 fc20 	bl	801f830 <memset>
  if(adcHandle->Instance==ADC1)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	@ (8007048 <HAL_ADC_MspInit+0x70>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d121      	bne.n	800703e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006ffa:	4b14      	ldr	r3, [pc, #80]	@ (800704c <HAL_ADC_MspInit+0x74>)
 8006ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ffe:	4b13      	ldr	r3, [pc, #76]	@ (800704c <HAL_ADC_MspInit+0x74>)
 8007000:	2180      	movs	r1, #128	@ 0x80
 8007002:	0089      	lsls	r1, r1, #2
 8007004:	430a      	orrs	r2, r1
 8007006:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007008:	4b10      	ldr	r3, [pc, #64]	@ (800704c <HAL_ADC_MspInit+0x74>)
 800700a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700c:	4b0f      	ldr	r3, [pc, #60]	@ (800704c <HAL_ADC_MspInit+0x74>)
 800700e:	2104      	movs	r1, #4
 8007010:	430a      	orrs	r2, r1
 8007012:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007014:	4b0d      	ldr	r3, [pc, #52]	@ (800704c <HAL_ADC_MspInit+0x74>)
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	2204      	movs	r2, #4
 800701a:	4013      	ands	r3, r2
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007020:	193b      	adds	r3, r7, r4
 8007022:	2230      	movs	r2, #48	@ 0x30
 8007024:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007026:	193b      	adds	r3, r7, r4
 8007028:	2203      	movs	r2, #3
 800702a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702c:	193b      	adds	r3, r7, r4
 800702e:	2200      	movs	r2, #0
 8007030:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007032:	193b      	adds	r3, r7, r4
 8007034:	4a06      	ldr	r2, [pc, #24]	@ (8007050 <HAL_ADC_MspInit+0x78>)
 8007036:	0019      	movs	r1, r3
 8007038:	0010      	movs	r0, r2
 800703a:	f008 fa97 	bl	800f56c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800703e:	46c0      	nop			@ (mov r8, r8)
 8007040:	46bd      	mov	sp, r7
 8007042:	b009      	add	sp, #36	@ 0x24
 8007044:	bd90      	pop	{r4, r7, pc}
 8007046:	46c0      	nop			@ (mov r8, r8)
 8007048:	40012400 	.word	0x40012400
 800704c:	40021000 	.word	0x40021000
 8007050:	50000800 	.word	0x50000800

08007054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <MX_DMA_Init+0x48>)
 800705c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800705e:	4b0f      	ldr	r3, [pc, #60]	@ (800709c <MX_DMA_Init+0x48>)
 8007060:	2101      	movs	r1, #1
 8007062:	430a      	orrs	r2, r1
 8007064:	631a      	str	r2, [r3, #48]	@ 0x30
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <MX_DMA_Init+0x48>)
 8007068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706a:	2201      	movs	r2, #1
 800706c:	4013      	ands	r3, r2
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007072:	2200      	movs	r2, #0
 8007074:	2100      	movs	r1, #0
 8007076:	200a      	movs	r0, #10
 8007078:	f007 fe26 	bl	800ecc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800707c:	200a      	movs	r0, #10
 800707e:	f007 fe38 	bl	800ecf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007082:	2200      	movs	r2, #0
 8007084:	2103      	movs	r1, #3
 8007086:	200b      	movs	r0, #11
 8007088:	f007 fe1e 	bl	800ecc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800708c:	200b      	movs	r0, #11
 800708e:	f007 fe30 	bl	800ecf2 <HAL_NVIC_EnableIRQ>

}
 8007092:	46c0      	nop			@ (mov r8, r8)
 8007094:	46bd      	mov	sp, r7
 8007096:	b002      	add	sp, #8
 8007098:	bd80      	pop	{r7, pc}
 800709a:	46c0      	nop			@ (mov r8, r8)
 800709c:	40021000 	.word	0x40021000

080070a0 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80070b0:	d901      	bls.n	80070b6 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80070b2:	237f      	movs	r3, #127	@ 0x7f
 80070b4:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80070b6:	2017      	movs	r0, #23
 80070b8:	183b      	adds	r3, r7, r0
 80070ba:	490d      	ldr	r1, [pc, #52]	@ (80070f0 <accessLUT10log10+0x50>)
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	188a      	adds	r2, r1, r2
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80070c4:	0001      	movs	r1, r0
 80070c6:	187b      	adds	r3, r7, r1
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2206      	movs	r2, #6
 80070cc:	4113      	asrs	r3, r2
 80070ce:	001a      	movs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80070d4:	187b      	adds	r3, r7, r1
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2106      	movs	r1, #6
 80070de:	408b      	lsls	r3, r1
 80070e0:	1ad2      	subs	r2, r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	601a      	str	r2, [r3, #0]
}
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b006      	add	sp, #24
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	46c0      	nop			@ (mov r8, r8)
 80070f0:	0802472c 	.word	0x0802472c

080070f4 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80070f4:	b5b0      	push	{r4, r5, r7, lr}
 80070f6:	b090      	sub	sp, #64	@ 0x40
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6138      	str	r0, [r7, #16]
 80070fc:	6179      	str	r1, [r7, #20]
 80070fe:	60fa      	str	r2, [r7, #12]
 8007100:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8007102:	2308      	movs	r3, #8
 8007104:	001a      	movs	r2, r3
 8007106:	3a20      	subs	r2, #32
 8007108:	2a00      	cmp	r2, #0
 800710a:	db03      	blt.n	8007114 <efficient10log10+0x20>
 800710c:	2101      	movs	r1, #1
 800710e:	4091      	lsls	r1, r2
 8007110:	000d      	movs	r5, r1
 8007112:	e008      	b.n	8007126 <efficient10log10+0x32>
 8007114:	2220      	movs	r2, #32
 8007116:	1ad2      	subs	r2, r2, r3
 8007118:	2101      	movs	r1, #1
 800711a:	40d1      	lsrs	r1, r2
 800711c:	000a      	movs	r2, r1
 800711e:	2100      	movs	r1, #0
 8007120:	4099      	lsls	r1, r3
 8007122:	000d      	movs	r5, r1
 8007124:	4315      	orrs	r5, r2
 8007126:	2201      	movs	r2, #1
 8007128:	409a      	lsls	r2, r3
 800712a:	0014      	movs	r4, r2
 800712c:	2201      	movs	r2, #1
 800712e:	4252      	negs	r2, r2
 8007130:	17d3      	asrs	r3, r2, #31
 8007132:	1912      	adds	r2, r2, r4
 8007134:	416b      	adcs	r3, r5
 8007136:	633a      	str	r2, [r7, #48]	@ 0x30
 8007138:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800713a:	2336      	movs	r3, #54	@ 0x36
 800713c:	2208      	movs	r2, #8
 800713e:	189b      	adds	r3, r3, r2
 8007140:	19db      	adds	r3, r3, r7
 8007142:	2200      	movs	r2, #0
 8007144:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007146:	e017      	b.n	8007178 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	07db      	lsls	r3, r3, #31
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	0852      	lsrs	r2, r2, #1
 8007150:	603a      	str	r2, [r7, #0]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	431a      	orrs	r2, r3
 8007156:	603a      	str	r2, [r7, #0]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	687c      	ldr	r4, [r7, #4]
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	617c      	str	r4, [r7, #20]
        bShift++;
 8007166:	2136      	movs	r1, #54	@ 0x36
 8007168:	2008      	movs	r0, #8
 800716a:	180b      	adds	r3, r1, r0
 800716c:	19db      	adds	r3, r3, r7
 800716e:	881a      	ldrh	r2, [r3, #0]
 8007170:	180b      	adds	r3, r1, r0
 8007172:	19db      	adds	r3, r3, r7
 8007174:	3201      	adds	r2, #1
 8007176:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717c:	429a      	cmp	r2, r3
 800717e:	d8e3      	bhi.n	8007148 <efficient10log10+0x54>
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007184:	429a      	cmp	r2, r3
 8007186:	d103      	bne.n	8007190 <efficient10log10+0x9c>
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	429a      	cmp	r2, r3
 800718e:	d8db      	bhi.n	8007148 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	2308      	movs	r3, #8
 8007194:	3b01      	subs	r3, #1
 8007196:	2101      	movs	r1, #1
 8007198:	4099      	lsls	r1, r3
 800719a:	000b      	movs	r3, r1
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80071a8:	231c      	movs	r3, #28
 80071aa:	2408      	movs	r4, #8
 80071ac:	191b      	adds	r3, r3, r4
 80071ae:	19da      	adds	r2, r3, r7
 80071b0:	2320      	movs	r3, #32
 80071b2:	191b      	adds	r3, r3, r4
 80071b4:	19d9      	adds	r1, r3, r7
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7ff ff71 	bl	80070a0 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80071be:	2215      	movs	r2, #21
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80071c4:	2036      	movs	r0, #54	@ 0x36
 80071c6:	1902      	adds	r2, r0, r4
 80071c8:	19d2      	adds	r2, r2, r7
 80071ca:	8812      	ldrh	r2, [r2, #0]
 80071cc:	2103      	movs	r1, #3
 80071ce:	434a      	muls	r2, r1
 80071d0:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80071d2:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80071d4:	0021      	movs	r1, r4
 80071d6:	1843      	adds	r3, r0, r1
 80071d8:	19db      	adds	r3, r3, r7
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	2201      	movs	r2, #1
 80071de:	4353      	muls	r3, r2
 80071e0:	2203      	movs	r2, #3
 80071e2:	4113      	asrs	r3, r2
 80071e4:	001a      	movs	r2, r3
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80071ea:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80071ec:	2314      	movs	r3, #20
 80071ee:	185b      	adds	r3, r3, r1
 80071f0:	19da      	adds	r2, r3, r7
 80071f2:	2318      	movs	r3, #24
 80071f4:	185b      	adds	r3, r3, r1
 80071f6:	19db      	adds	r3, r3, r7
 80071f8:	0011      	movs	r1, r2
 80071fa:	0018      	movs	r0, r3
 80071fc:	f000 f80a 	bl	8007214 <correctIntFracNumber>
    integerPart[0] = intPart;
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	601a      	str	r2, [r3, #0]
}
 800720c:	46c0      	nop			@ (mov r8, r8)
 800720e:	46bd      	mov	sp, r7
 8007210:	b010      	add	sp, #64	@ 0x40
 8007212:	bdb0      	pop	{r4, r5, r7, pc}

08007214 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800721e:	e00a      	b.n	8007236 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3b0a      	subs	r3, #10
 8007230:	001a      	movs	r2, r3
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b09      	cmp	r3, #9
 800723c:	dcf0      	bgt.n	8007220 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800723e:	e00a      	b.n	8007256 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	1e5a      	subs	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330a      	adds	r3, #10
 8007250:	001a      	movs	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3309      	adds	r3, #9
 800725c:	dbf0      	blt.n	8007240 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	da0f      	bge.n	8007286 <correctIntFracNumber+0x72>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	dd0b      	ble.n	8007286 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b0a      	subs	r3, #10
 800727e:	001a      	movs	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007284:	e012      	b.n	80072ac <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	dd0e      	ble.n	80072ac <correctIntFracNumber+0x98>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da0a      	bge.n	80072ac <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	1e5a      	subs	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330a      	adds	r3, #10
 80072a6:	001a      	movs	r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	601a      	str	r2, [r3, #0]
}
 80072ac:	46c0      	nop			@ (mov r8, r8)
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b002      	add	sp, #8
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b08b      	sub	sp, #44	@ 0x2c
 80072b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ba:	2414      	movs	r4, #20
 80072bc:	193b      	adds	r3, r7, r4
 80072be:	0018      	movs	r0, r3
 80072c0:	2314      	movs	r3, #20
 80072c2:	001a      	movs	r2, r3
 80072c4:	2100      	movs	r1, #0
 80072c6:	f018 fab3 	bl	801f830 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072ca:	4b8a      	ldr	r3, [pc, #552]	@ (80074f4 <MX_GPIO_Init+0x240>)
 80072cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ce:	4b89      	ldr	r3, [pc, #548]	@ (80074f4 <MX_GPIO_Init+0x240>)
 80072d0:	2104      	movs	r1, #4
 80072d2:	430a      	orrs	r2, r1
 80072d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072d6:	4b87      	ldr	r3, [pc, #540]	@ (80074f4 <MX_GPIO_Init+0x240>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	2204      	movs	r2, #4
 80072dc:	4013      	ands	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80072e2:	4b84      	ldr	r3, [pc, #528]	@ (80074f4 <MX_GPIO_Init+0x240>)
 80072e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e6:	4b83      	ldr	r3, [pc, #524]	@ (80074f4 <MX_GPIO_Init+0x240>)
 80072e8:	2180      	movs	r1, #128	@ 0x80
 80072ea:	430a      	orrs	r2, r1
 80072ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072ee:	4b81      	ldr	r3, [pc, #516]	@ (80074f4 <MX_GPIO_Init+0x240>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f2:	2280      	movs	r2, #128	@ 0x80
 80072f4:	4013      	ands	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fa:	4b7e      	ldr	r3, [pc, #504]	@ (80074f4 <MX_GPIO_Init+0x240>)
 80072fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fe:	4b7d      	ldr	r3, [pc, #500]	@ (80074f4 <MX_GPIO_Init+0x240>)
 8007300:	2101      	movs	r1, #1
 8007302:	430a      	orrs	r2, r1
 8007304:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007306:	4b7b      	ldr	r3, [pc, #492]	@ (80074f4 <MX_GPIO_Init+0x240>)
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	2201      	movs	r2, #1
 800730c:	4013      	ands	r3, r2
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007312:	4b78      	ldr	r3, [pc, #480]	@ (80074f4 <MX_GPIO_Init+0x240>)
 8007314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007316:	4b77      	ldr	r3, [pc, #476]	@ (80074f4 <MX_GPIO_Init+0x240>)
 8007318:	2102      	movs	r1, #2
 800731a:	430a      	orrs	r2, r1
 800731c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800731e:	4b75      	ldr	r3, [pc, #468]	@ (80074f4 <MX_GPIO_Init+0x240>)
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	2202      	movs	r2, #2
 8007324:	4013      	ands	r3, r2
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800732a:	4b72      	ldr	r3, [pc, #456]	@ (80074f4 <MX_GPIO_Init+0x240>)
 800732c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732e:	4b71      	ldr	r3, [pc, #452]	@ (80074f4 <MX_GPIO_Init+0x240>)
 8007330:	2108      	movs	r1, #8
 8007332:	430a      	orrs	r2, r1
 8007334:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007336:	4b6f      	ldr	r3, [pc, #444]	@ (80074f4 <MX_GPIO_Init+0x240>)
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	2208      	movs	r2, #8
 800733c:	4013      	ands	r3, r2
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007342:	4b6d      	ldr	r3, [pc, #436]	@ (80074f8 <MX_GPIO_Init+0x244>)
 8007344:	2201      	movs	r2, #1
 8007346:	2101      	movs	r1, #1
 8007348:	0018      	movs	r0, r3
 800734a:	f008 faaa 	bl	800f8a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800734e:	4b6a      	ldr	r3, [pc, #424]	@ (80074f8 <MX_GPIO_Init+0x244>)
 8007350:	2200      	movs	r2, #0
 8007352:	2102      	movs	r1, #2
 8007354:	0018      	movs	r0, r3
 8007356:	f008 faa4 	bl	800f8a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800735a:	4968      	ldr	r1, [pc, #416]	@ (80074fc <MX_GPIO_Init+0x248>)
 800735c:	4b68      	ldr	r3, [pc, #416]	@ (8007500 <MX_GPIO_Init+0x24c>)
 800735e:	2201      	movs	r2, #1
 8007360:	0018      	movs	r0, r3
 8007362:	f008 fa9e 	bl	800f8a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007366:	2380      	movs	r3, #128	@ 0x80
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	4866      	ldr	r0, [pc, #408]	@ (8007504 <MX_GPIO_Init+0x250>)
 800736c:	2201      	movs	r2, #1
 800736e:	0019      	movs	r1, r3
 8007370:	f008 fa97 	bl	800f8a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007374:	2380      	movs	r3, #128	@ 0x80
 8007376:	015b      	lsls	r3, r3, #5
 8007378:	4862      	ldr	r0, [pc, #392]	@ (8007504 <MX_GPIO_Init+0x250>)
 800737a:	2200      	movs	r2, #0
 800737c:	0019      	movs	r1, r3
 800737e:	f008 fa90 	bl	800f8a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007382:	193b      	adds	r3, r7, r4
 8007384:	4a60      	ldr	r2, [pc, #384]	@ (8007508 <MX_GPIO_Init+0x254>)
 8007386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007388:	193b      	adds	r3, r7, r4
 800738a:	2203      	movs	r2, #3
 800738c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738e:	193b      	adds	r3, r7, r4
 8007390:	2200      	movs	r2, #0
 8007392:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007394:	193b      	adds	r3, r7, r4
 8007396:	4a5b      	ldr	r2, [pc, #364]	@ (8007504 <MX_GPIO_Init+0x250>)
 8007398:	0019      	movs	r1, r3
 800739a:	0010      	movs	r0, r2
 800739c:	f008 f8e6 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80073a0:	193b      	adds	r3, r7, r4
 80073a2:	2203      	movs	r2, #3
 80073a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073a6:	193b      	adds	r3, r7, r4
 80073a8:	2201      	movs	r2, #1
 80073aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ac:	193b      	adds	r3, r7, r4
 80073ae:	2200      	movs	r2, #0
 80073b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b2:	193b      	adds	r3, r7, r4
 80073b4:	2200      	movs	r2, #0
 80073b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80073b8:	193b      	adds	r3, r7, r4
 80073ba:	4a4f      	ldr	r2, [pc, #316]	@ (80074f8 <MX_GPIO_Init+0x244>)
 80073bc:	0019      	movs	r1, r3
 80073be:	0010      	movs	r0, r2
 80073c0:	f008 f8d4 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80073c4:	193b      	adds	r3, r7, r4
 80073c6:	2270      	movs	r2, #112	@ 0x70
 80073c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073ca:	193b      	adds	r3, r7, r4
 80073cc:	2203      	movs	r2, #3
 80073ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d0:	193b      	adds	r3, r7, r4
 80073d2:	2200      	movs	r2, #0
 80073d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073d6:	193a      	adds	r2, r7, r4
 80073d8:	23a0      	movs	r3, #160	@ 0xa0
 80073da:	05db      	lsls	r3, r3, #23
 80073dc:	0011      	movs	r1, r2
 80073de:	0018      	movs	r0, r3
 80073e0:	f008 f8c4 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80073e4:	193b      	adds	r3, r7, r4
 80073e6:	22c0      	movs	r2, #192	@ 0xc0
 80073e8:	0052      	lsls	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ec:	193b      	adds	r3, r7, r4
 80073ee:	2200      	movs	r2, #0
 80073f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f2:	193b      	adds	r3, r7, r4
 80073f4:	2200      	movs	r2, #0
 80073f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073f8:	193a      	adds	r2, r7, r4
 80073fa:	23a0      	movs	r3, #160	@ 0xa0
 80073fc:	05db      	lsls	r3, r3, #23
 80073fe:	0011      	movs	r1, r2
 8007400:	0018      	movs	r0, r3
 8007402:	f008 f8b3 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8007406:	193b      	adds	r3, r7, r4
 8007408:	4a3c      	ldr	r2, [pc, #240]	@ (80074fc <MX_GPIO_Init+0x248>)
 800740a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800740c:	193b      	adds	r3, r7, r4
 800740e:	2201      	movs	r2, #1
 8007410:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007412:	193b      	adds	r3, r7, r4
 8007414:	2200      	movs	r2, #0
 8007416:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007418:	193b      	adds	r3, r7, r4
 800741a:	2200      	movs	r2, #0
 800741c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800741e:	193b      	adds	r3, r7, r4
 8007420:	4a37      	ldr	r2, [pc, #220]	@ (8007500 <MX_GPIO_Init+0x24c>)
 8007422:	0019      	movs	r1, r3
 8007424:	0010      	movs	r0, r2
 8007426:	f008 f8a1 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800742a:	193b      	adds	r3, r7, r4
 800742c:	4a37      	ldr	r2, [pc, #220]	@ (800750c <MX_GPIO_Init+0x258>)
 800742e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007430:	193b      	adds	r3, r7, r4
 8007432:	2203      	movs	r2, #3
 8007434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007436:	193b      	adds	r3, r7, r4
 8007438:	2200      	movs	r2, #0
 800743a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800743c:	193b      	adds	r3, r7, r4
 800743e:	4a30      	ldr	r2, [pc, #192]	@ (8007500 <MX_GPIO_Init+0x24c>)
 8007440:	0019      	movs	r1, r3
 8007442:	0010      	movs	r0, r2
 8007444:	f008 f892 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007448:	0021      	movs	r1, r4
 800744a:	187b      	adds	r3, r7, r1
 800744c:	2280      	movs	r2, #128	@ 0x80
 800744e:	0092      	lsls	r2, r2, #2
 8007450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007452:	000c      	movs	r4, r1
 8007454:	193b      	adds	r3, r7, r4
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745a:	193b      	adds	r3, r7, r4
 800745c:	2200      	movs	r2, #0
 800745e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007460:	193b      	adds	r3, r7, r4
 8007462:	4a28      	ldr	r2, [pc, #160]	@ (8007504 <MX_GPIO_Init+0x250>)
 8007464:	0019      	movs	r1, r3
 8007466:	0010      	movs	r0, r2
 8007468:	f008 f880 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800746c:	193b      	adds	r3, r7, r4
 800746e:	2280      	movs	r2, #128	@ 0x80
 8007470:	0212      	lsls	r2, r2, #8
 8007472:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007474:	193b      	adds	r3, r7, r4
 8007476:	2288      	movs	r2, #136	@ 0x88
 8007478:	0352      	lsls	r2, r2, #13
 800747a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747c:	193b      	adds	r3, r7, r4
 800747e:	2200      	movs	r2, #0
 8007480:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007482:	193a      	adds	r2, r7, r4
 8007484:	23a0      	movs	r3, #160	@ 0xa0
 8007486:	05db      	lsls	r3, r3, #23
 8007488:	0011      	movs	r1, r2
 800748a:	0018      	movs	r0, r3
 800748c:	f008 f86e 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007490:	0021      	movs	r1, r4
 8007492:	187b      	adds	r3, r7, r1
 8007494:	22c0      	movs	r2, #192	@ 0xc0
 8007496:	0152      	lsls	r2, r2, #5
 8007498:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800749a:	000c      	movs	r4, r1
 800749c:	193b      	adds	r3, r7, r4
 800749e:	2201      	movs	r2, #1
 80074a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a2:	193b      	adds	r3, r7, r4
 80074a4:	2200      	movs	r2, #0
 80074a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074a8:	193b      	adds	r3, r7, r4
 80074aa:	2200      	movs	r2, #0
 80074ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074ae:	193b      	adds	r3, r7, r4
 80074b0:	4a14      	ldr	r2, [pc, #80]	@ (8007504 <MX_GPIO_Init+0x250>)
 80074b2:	0019      	movs	r1, r3
 80074b4:	0010      	movs	r0, r2
 80074b6:	f008 f859 	bl	800f56c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80074ba:	0021      	movs	r1, r4
 80074bc:	187b      	adds	r3, r7, r1
 80074be:	2204      	movs	r2, #4
 80074c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074c2:	187b      	adds	r3, r7, r1
 80074c4:	2200      	movs	r2, #0
 80074c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074c8:	187b      	adds	r3, r7, r1
 80074ca:	2201      	movs	r2, #1
 80074cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80074ce:	187b      	adds	r3, r7, r1
 80074d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007510 <MX_GPIO_Init+0x25c>)
 80074d2:	0019      	movs	r1, r3
 80074d4:	0010      	movs	r0, r2
 80074d6:	f008 f849 	bl	800f56c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	2007      	movs	r0, #7
 80074e0:	f007 fbf2 	bl	800ecc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80074e4:	2007      	movs	r0, #7
 80074e6:	f007 fc04 	bl	800ecf2 <HAL_NVIC_EnableIRQ>

}
 80074ea:	46c0      	nop			@ (mov r8, r8)
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b00b      	add	sp, #44	@ 0x2c
 80074f0:	bd90      	pop	{r4, r7, pc}
 80074f2:	46c0      	nop			@ (mov r8, r8)
 80074f4:	40021000 	.word	0x40021000
 80074f8:	50001c00 	.word	0x50001c00
 80074fc:	00000301 	.word	0x00000301
 8007500:	50000400 	.word	0x50000400
 8007504:	50000800 	.word	0x50000800
 8007508:	0000200c 	.word	0x0000200c
 800750c:	0000403e 	.word	0x0000403e
 8007510:	50000c00 	.word	0x50000c00

08007514 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2100      	movs	r1, #0
 8007522:	0018      	movs	r0, r3
 8007524:	f00e fd98 	bl	8016058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2108      	movs	r1, #8
 800752c:	0018      	movs	r0, r3
 800752e:	f00e fd93 	bl	8016058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	210c      	movs	r1, #12
 8007536:	0018      	movs	r0, r3
 8007538:	f00e fd8e 	bl	8016058 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800753c:	2380      	movs	r3, #128	@ 0x80
 800753e:	05db      	lsls	r3, r3, #23
 8007540:	22fa      	movs	r2, #250	@ 0xfa
 8007542:	0112      	lsls	r2, r2, #4
 8007544:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007546:	2380      	movs	r3, #128	@ 0x80
 8007548:	05db      	lsls	r3, r3, #23
 800754a:	22fa      	movs	r2, #250	@ 0xfa
 800754c:	0112      	lsls	r2, r2, #4
 800754e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007550:	2380      	movs	r3, #128	@ 0x80
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	22fa      	movs	r2, #250	@ 0xfa
 8007556:	0112      	lsls	r2, r2, #4
 8007558:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800755a:	2380      	movs	r3, #128	@ 0x80
 800755c:	05db      	lsls	r3, r3, #23
 800755e:	22fa      	movs	r2, #250	@ 0xfa
 8007560:	0112      	lsls	r2, r2, #4
 8007562:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2100      	movs	r1, #0
 8007568:	0018      	movs	r0, r3
 800756a:	f00e fd75 	bl	8016058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2104      	movs	r1, #4
 8007572:	0018      	movs	r0, r3
 8007574:	f00e fd70 	bl	8016058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2108      	movs	r1, #8
 800757c:	0018      	movs	r0, r3
 800757e:	f00e fd6b 	bl	8016058 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007582:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <GPIO_InitPWMLEDs+0x98>)
 8007584:	22fa      	movs	r2, #250	@ 0xfa
 8007586:	0112      	lsls	r2, r2, #4
 8007588:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800758a:	4b08      	ldr	r3, [pc, #32]	@ (80075ac <GPIO_InitPWMLEDs+0x98>)
 800758c:	22fa      	movs	r2, #250	@ 0xfa
 800758e:	0112      	lsls	r2, r2, #4
 8007590:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007592:	4b06      	ldr	r3, [pc, #24]	@ (80075ac <GPIO_InitPWMLEDs+0x98>)
 8007594:	22fa      	movs	r2, #250	@ 0xfa
 8007596:	0112      	lsls	r2, r2, #4
 8007598:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800759a:	4b04      	ldr	r3, [pc, #16]	@ (80075ac <GPIO_InitPWMLEDs+0x98>)
 800759c:	22fa      	movs	r2, #250	@ 0xfa
 800759e:	0112      	lsls	r2, r2, #4
 80075a0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b002      	add	sp, #8
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	46c0      	nop			@ (mov r8, r8)
 80075ac:	40000400 	.word	0x40000400

080075b0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80075b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007628 <MX_I2C1_Init+0x78>)
 80075b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80075ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075bc:	4a1b      	ldr	r2, [pc, #108]	@ (800762c <MX_I2C1_Init+0x7c>)
 80075be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80075c0:	4b18      	ldr	r3, [pc, #96]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80075c6:	4b17      	ldr	r3, [pc, #92]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80075cc:	4b15      	ldr	r3, [pc, #84]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80075d2:	4b14      	ldr	r3, [pc, #80]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80075d8:	4b12      	ldr	r3, [pc, #72]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075da:	2200      	movs	r2, #0
 80075dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075de:	4b11      	ldr	r3, [pc, #68]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075ec:	0018      	movs	r0, r3
 80075ee:	f008 f991 	bl	800f914 <HAL_I2C_Init>
 80075f2:	1e03      	subs	r3, r0, #0
 80075f4:	d001      	beq.n	80075fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80075f6:	f000 fd15 	bl	8008024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80075fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007624 <MX_I2C1_Init+0x74>)
 80075fc:	2100      	movs	r1, #0
 80075fe:	0018      	movs	r0, r3
 8007600:	f00a fd62 	bl	80120c8 <HAL_I2CEx_ConfigAnalogFilter>
 8007604:	1e03      	subs	r3, r0, #0
 8007606:	d001      	beq.n	800760c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007608:	f000 fd0c 	bl	8008024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800760c:	4b05      	ldr	r3, [pc, #20]	@ (8007624 <MX_I2C1_Init+0x74>)
 800760e:	2100      	movs	r1, #0
 8007610:	0018      	movs	r0, r3
 8007612:	f00a fda5 	bl	8012160 <HAL_I2CEx_ConfigDigitalFilter>
 8007616:	1e03      	subs	r3, r0, #0
 8007618:	d001      	beq.n	800761e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800761a:	f000 fd03 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800761e:	46c0      	nop			@ (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000d58 	.word	0x20000d58
 8007628:	40005400 	.word	0x40005400
 800762c:	00503d58 	.word	0x00503d58

08007630 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007634:	4b1b      	ldr	r3, [pc, #108]	@ (80076a4 <MX_I2C2_Init+0x74>)
 8007636:	4a1c      	ldr	r2, [pc, #112]	@ (80076a8 <MX_I2C2_Init+0x78>)
 8007638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800763a:	4b1a      	ldr	r3, [pc, #104]	@ (80076a4 <MX_I2C2_Init+0x74>)
 800763c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ac <MX_I2C2_Init+0x7c>)
 800763e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007640:	4b18      	ldr	r3, [pc, #96]	@ (80076a4 <MX_I2C2_Init+0x74>)
 8007642:	2200      	movs	r2, #0
 8007644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007646:	4b17      	ldr	r3, [pc, #92]	@ (80076a4 <MX_I2C2_Init+0x74>)
 8007648:	2201      	movs	r2, #1
 800764a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800764c:	4b15      	ldr	r3, [pc, #84]	@ (80076a4 <MX_I2C2_Init+0x74>)
 800764e:	2200      	movs	r2, #0
 8007650:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007652:	4b14      	ldr	r3, [pc, #80]	@ (80076a4 <MX_I2C2_Init+0x74>)
 8007654:	2200      	movs	r2, #0
 8007656:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007658:	4b12      	ldr	r3, [pc, #72]	@ (80076a4 <MX_I2C2_Init+0x74>)
 800765a:	2200      	movs	r2, #0
 800765c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800765e:	4b11      	ldr	r3, [pc, #68]	@ (80076a4 <MX_I2C2_Init+0x74>)
 8007660:	2200      	movs	r2, #0
 8007662:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007664:	4b0f      	ldr	r3, [pc, #60]	@ (80076a4 <MX_I2C2_Init+0x74>)
 8007666:	2200      	movs	r2, #0
 8007668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800766a:	4b0e      	ldr	r3, [pc, #56]	@ (80076a4 <MX_I2C2_Init+0x74>)
 800766c:	0018      	movs	r0, r3
 800766e:	f008 f951 	bl	800f914 <HAL_I2C_Init>
 8007672:	1e03      	subs	r3, r0, #0
 8007674:	d001      	beq.n	800767a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007676:	f000 fcd5 	bl	8008024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800767a:	4b0a      	ldr	r3, [pc, #40]	@ (80076a4 <MX_I2C2_Init+0x74>)
 800767c:	2100      	movs	r1, #0
 800767e:	0018      	movs	r0, r3
 8007680:	f00a fd22 	bl	80120c8 <HAL_I2CEx_ConfigAnalogFilter>
 8007684:	1e03      	subs	r3, r0, #0
 8007686:	d001      	beq.n	800768c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007688:	f000 fccc 	bl	8008024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800768c:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <MX_I2C2_Init+0x74>)
 800768e:	2100      	movs	r1, #0
 8007690:	0018      	movs	r0, r3
 8007692:	f00a fd65 	bl	8012160 <HAL_I2CEx_ConfigDigitalFilter>
 8007696:	1e03      	subs	r3, r0, #0
 8007698:	d001      	beq.n	800769e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800769a:	f000 fcc3 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000dac 	.word	0x20000dac
 80076a8:	40005800 	.word	0x40005800
 80076ac:	00503d58 	.word	0x00503d58

080076b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b08b      	sub	sp, #44	@ 0x2c
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076b8:	2414      	movs	r4, #20
 80076ba:	193b      	adds	r3, r7, r4
 80076bc:	0018      	movs	r0, r3
 80076be:	2314      	movs	r3, #20
 80076c0:	001a      	movs	r2, r3
 80076c2:	2100      	movs	r1, #0
 80076c4:	f018 f8b4 	bl	801f830 <memset>
  if(i2cHandle->Instance==I2C1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a5d      	ldr	r2, [pc, #372]	@ (8007844 <HAL_I2C_MspInit+0x194>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d000      	beq.n	80076d4 <HAL_I2C_MspInit+0x24>
 80076d2:	e083      	b.n	80077dc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076d4:	4b5c      	ldr	r3, [pc, #368]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 80076d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d8:	4b5b      	ldr	r3, [pc, #364]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 80076da:	2102      	movs	r1, #2
 80076dc:	430a      	orrs	r2, r1
 80076de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076e0:	4b59      	ldr	r3, [pc, #356]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	2202      	movs	r2, #2
 80076e6:	4013      	ands	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076ec:	0021      	movs	r1, r4
 80076ee:	187b      	adds	r3, r7, r1
 80076f0:	22c0      	movs	r2, #192	@ 0xc0
 80076f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076f4:	187b      	adds	r3, r7, r1
 80076f6:	2212      	movs	r2, #18
 80076f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076fa:	187b      	adds	r3, r7, r1
 80076fc:	2200      	movs	r2, #0
 80076fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007700:	187b      	adds	r3, r7, r1
 8007702:	2203      	movs	r2, #3
 8007704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007706:	187b      	adds	r3, r7, r1
 8007708:	2201      	movs	r2, #1
 800770a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800770c:	187b      	adds	r3, r7, r1
 800770e:	4a4f      	ldr	r2, [pc, #316]	@ (800784c <HAL_I2C_MspInit+0x19c>)
 8007710:	0019      	movs	r1, r3
 8007712:	0010      	movs	r0, r2
 8007714:	f007 ff2a 	bl	800f56c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007718:	4b4b      	ldr	r3, [pc, #300]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 800771a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800771c:	4b4a      	ldr	r3, [pc, #296]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 800771e:	2180      	movs	r1, #128	@ 0x80
 8007720:	0389      	lsls	r1, r1, #14
 8007722:	430a      	orrs	r2, r1
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007726:	4b4a      	ldr	r3, [pc, #296]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007728:	4a4a      	ldr	r2, [pc, #296]	@ (8007854 <HAL_I2C_MspInit+0x1a4>)
 800772a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800772c:	4b48      	ldr	r3, [pc, #288]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 800772e:	2206      	movs	r2, #6
 8007730:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007732:	4b47      	ldr	r3, [pc, #284]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007734:	2200      	movs	r2, #0
 8007736:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007738:	4b45      	ldr	r3, [pc, #276]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 800773a:	2200      	movs	r2, #0
 800773c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800773e:	4b44      	ldr	r3, [pc, #272]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007740:	2280      	movs	r2, #128	@ 0x80
 8007742:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007744:	4b42      	ldr	r3, [pc, #264]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007746:	2200      	movs	r2, #0
 8007748:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800774a:	4b41      	ldr	r3, [pc, #260]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 800774c:	2200      	movs	r2, #0
 800774e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007750:	4b3f      	ldr	r3, [pc, #252]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007752:	2200      	movs	r2, #0
 8007754:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007756:	4b3e      	ldr	r3, [pc, #248]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007758:	2200      	movs	r2, #0
 800775a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800775c:	4b3c      	ldr	r3, [pc, #240]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 800775e:	0018      	movs	r0, r3
 8007760:	f007 fae8 	bl	800ed34 <HAL_DMA_Init>
 8007764:	1e03      	subs	r3, r0, #0
 8007766:	d001      	beq.n	800776c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007768:	f000 fc5c 	bl	8008024 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a38      	ldr	r2, [pc, #224]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007770:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007772:	4b37      	ldr	r3, [pc, #220]	@ (8007850 <HAL_I2C_MspInit+0x1a0>)
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007778:	4b37      	ldr	r3, [pc, #220]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 800777a:	4a38      	ldr	r2, [pc, #224]	@ (800785c <HAL_I2C_MspInit+0x1ac>)
 800777c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800777e:	4b36      	ldr	r3, [pc, #216]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 8007780:	2206      	movs	r2, #6
 8007782:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007784:	4b34      	ldr	r3, [pc, #208]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 8007786:	2210      	movs	r2, #16
 8007788:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800778a:	4b33      	ldr	r3, [pc, #204]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 800778c:	2200      	movs	r2, #0
 800778e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007790:	4b31      	ldr	r3, [pc, #196]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 8007792:	2280      	movs	r2, #128	@ 0x80
 8007794:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007796:	4b30      	ldr	r3, [pc, #192]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 8007798:	2200      	movs	r2, #0
 800779a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800779c:	4b2e      	ldr	r3, [pc, #184]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 800779e:	2200      	movs	r2, #0
 80077a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80077a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80077a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80077ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 80077b0:	0018      	movs	r0, r3
 80077b2:	f007 fabf 	bl	800ed34 <HAL_DMA_Init>
 80077b6:	1e03      	subs	r3, r0, #0
 80077b8:	d001      	beq.n	80077be <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80077ba:	f000 fc33 	bl	8008024 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a25      	ldr	r2, [pc, #148]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 80077c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80077c4:	4b24      	ldr	r3, [pc, #144]	@ (8007858 <HAL_I2C_MspInit+0x1a8>)
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80077ca:	2200      	movs	r2, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	2017      	movs	r0, #23
 80077d0:	f007 fa7a 	bl	800ecc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80077d4:	2017      	movs	r0, #23
 80077d6:	f007 fa8c 	bl	800ecf2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80077da:	e02e      	b.n	800783a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007860 <HAL_I2C_MspInit+0x1b0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d129      	bne.n	800783a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e6:	4b18      	ldr	r3, [pc, #96]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4b17      	ldr	r3, [pc, #92]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 80077ec:	2102      	movs	r1, #2
 80077ee:	430a      	orrs	r2, r1
 80077f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077f2:	4b15      	ldr	r3, [pc, #84]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	2202      	movs	r2, #2
 80077f8:	4013      	ands	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80077fe:	2114      	movs	r1, #20
 8007800:	187b      	adds	r3, r7, r1
 8007802:	22c0      	movs	r2, #192	@ 0xc0
 8007804:	0112      	lsls	r2, r2, #4
 8007806:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007808:	187b      	adds	r3, r7, r1
 800780a:	2212      	movs	r2, #18
 800780c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800780e:	187b      	adds	r3, r7, r1
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007814:	187b      	adds	r3, r7, r1
 8007816:	2203      	movs	r2, #3
 8007818:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800781a:	187b      	adds	r3, r7, r1
 800781c:	2206      	movs	r2, #6
 800781e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007820:	187b      	adds	r3, r7, r1
 8007822:	4a0a      	ldr	r2, [pc, #40]	@ (800784c <HAL_I2C_MspInit+0x19c>)
 8007824:	0019      	movs	r1, r3
 8007826:	0010      	movs	r0, r2
 8007828:	f007 fea0 	bl	800f56c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 800782e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007830:	4b05      	ldr	r3, [pc, #20]	@ (8007848 <HAL_I2C_MspInit+0x198>)
 8007832:	2180      	movs	r1, #128	@ 0x80
 8007834:	03c9      	lsls	r1, r1, #15
 8007836:	430a      	orrs	r2, r1
 8007838:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800783a:	46c0      	nop			@ (mov r8, r8)
 800783c:	46bd      	mov	sp, r7
 800783e:	b00b      	add	sp, #44	@ 0x2c
 8007840:	bd90      	pop	{r4, r7, pc}
 8007842:	46c0      	nop			@ (mov r8, r8)
 8007844:	40005400 	.word	0x40005400
 8007848:	40021000 	.word	0x40021000
 800784c:	50000400 	.word	0x50000400
 8007850:	20000e00 	.word	0x20000e00
 8007854:	40020030 	.word	0x40020030
 8007858:	20000e48 	.word	0x20000e48
 800785c:	4002001c 	.word	0x4002001c
 8007860:	40005800 	.word	0x40005800

08007864 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007868:	4b10      	ldr	r3, [pc, #64]	@ (80078ac <MX_I2S2_Init+0x48>)
 800786a:	4a11      	ldr	r2, [pc, #68]	@ (80078b0 <MX_I2S2_Init+0x4c>)
 800786c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800786e:	4b0f      	ldr	r3, [pc, #60]	@ (80078ac <MX_I2S2_Init+0x48>)
 8007870:	22c0      	movs	r2, #192	@ 0xc0
 8007872:	0092      	lsls	r2, r2, #2
 8007874:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007876:	4b0d      	ldr	r3, [pc, #52]	@ (80078ac <MX_I2S2_Init+0x48>)
 8007878:	2200      	movs	r2, #0
 800787a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800787c:	4b0b      	ldr	r3, [pc, #44]	@ (80078ac <MX_I2S2_Init+0x48>)
 800787e:	2203      	movs	r2, #3
 8007880:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007882:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <MX_I2S2_Init+0x48>)
 8007884:	2200      	movs	r2, #0
 8007886:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007888:	4b08      	ldr	r3, [pc, #32]	@ (80078ac <MX_I2S2_Init+0x48>)
 800788a:	22fa      	movs	r2, #250	@ 0xfa
 800788c:	0192      	lsls	r2, r2, #6
 800788e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007890:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <MX_I2S2_Init+0x48>)
 8007892:	2200      	movs	r2, #0
 8007894:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007896:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <MX_I2S2_Init+0x48>)
 8007898:	0018      	movs	r0, r3
 800789a:	f00a fcad 	bl	80121f8 <HAL_I2S_Init>
 800789e:	1e03      	subs	r3, r0, #0
 80078a0:	d001      	beq.n	80078a6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80078a2:	f000 fbbf 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000e90 	.word	0x20000e90
 80078b0:	40003800 	.word	0x40003800

080078b4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b089      	sub	sp, #36	@ 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078bc:	240c      	movs	r4, #12
 80078be:	193b      	adds	r3, r7, r4
 80078c0:	0018      	movs	r0, r3
 80078c2:	2314      	movs	r3, #20
 80078c4:	001a      	movs	r2, r3
 80078c6:	2100      	movs	r1, #0
 80078c8:	f017 ffb2 	bl	801f830 <memset>
  if(i2sHandle->Instance==SPI2)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007988 <HAL_I2S_MspInit+0xd4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d154      	bne.n	8007980 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80078d6:	4b2d      	ldr	r3, [pc, #180]	@ (800798c <HAL_I2S_MspInit+0xd8>)
 80078d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078da:	4b2c      	ldr	r3, [pc, #176]	@ (800798c <HAL_I2S_MspInit+0xd8>)
 80078dc:	2180      	movs	r1, #128	@ 0x80
 80078de:	01c9      	lsls	r1, r1, #7
 80078e0:	430a      	orrs	r2, r1
 80078e2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078e4:	4b29      	ldr	r3, [pc, #164]	@ (800798c <HAL_I2S_MspInit+0xd8>)
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	4b28      	ldr	r3, [pc, #160]	@ (800798c <HAL_I2S_MspInit+0xd8>)
 80078ea:	2102      	movs	r1, #2
 80078ec:	430a      	orrs	r2, r1
 80078ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078f0:	4b26      	ldr	r3, [pc, #152]	@ (800798c <HAL_I2S_MspInit+0xd8>)
 80078f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f4:	2202      	movs	r2, #2
 80078f6:	4013      	ands	r3, r2
 80078f8:	60bb      	str	r3, [r7, #8]
 80078fa:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80078fc:	193b      	adds	r3, r7, r4
 80078fe:	22b0      	movs	r2, #176	@ 0xb0
 8007900:	0212      	lsls	r2, r2, #8
 8007902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007904:	0021      	movs	r1, r4
 8007906:	187b      	adds	r3, r7, r1
 8007908:	2202      	movs	r2, #2
 800790a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790c:	187b      	adds	r3, r7, r1
 800790e:	2200      	movs	r2, #0
 8007910:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007912:	187b      	adds	r3, r7, r1
 8007914:	2200      	movs	r2, #0
 8007916:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007918:	187b      	adds	r3, r7, r1
 800791a:	2200      	movs	r2, #0
 800791c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800791e:	187b      	adds	r3, r7, r1
 8007920:	4a1b      	ldr	r2, [pc, #108]	@ (8007990 <HAL_I2S_MspInit+0xdc>)
 8007922:	0019      	movs	r1, r3
 8007924:	0010      	movs	r0, r2
 8007926:	f007 fe21 	bl	800f56c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800792a:	4b1a      	ldr	r3, [pc, #104]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 800792c:	4a1a      	ldr	r2, [pc, #104]	@ (8007998 <HAL_I2S_MspInit+0xe4>)
 800792e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007930:	4b18      	ldr	r3, [pc, #96]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 8007932:	2202      	movs	r2, #2
 8007934:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007936:	4b17      	ldr	r3, [pc, #92]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 8007938:	2200      	movs	r2, #0
 800793a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800793c:	4b15      	ldr	r3, [pc, #84]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 800793e:	2200      	movs	r2, #0
 8007940:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007942:	4b14      	ldr	r3, [pc, #80]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 8007944:	2280      	movs	r2, #128	@ 0x80
 8007946:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007948:	4b12      	ldr	r3, [pc, #72]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 800794a:	2280      	movs	r2, #128	@ 0x80
 800794c:	0052      	lsls	r2, r2, #1
 800794e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007950:	4b10      	ldr	r3, [pc, #64]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 8007952:	2280      	movs	r2, #128	@ 0x80
 8007954:	00d2      	lsls	r2, r2, #3
 8007956:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007958:	4b0e      	ldr	r3, [pc, #56]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 800795a:	2220      	movs	r2, #32
 800795c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 8007960:	2200      	movs	r2, #0
 8007962:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007964:	4b0b      	ldr	r3, [pc, #44]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 8007966:	0018      	movs	r0, r3
 8007968:	f007 f9e4 	bl	800ed34 <HAL_DMA_Init>
 800796c:	1e03      	subs	r3, r0, #0
 800796e:	d001      	beq.n	8007974 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007970:	f000 fb58 	bl	8008024 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a07      	ldr	r2, [pc, #28]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 8007978:	631a      	str	r2, [r3, #48]	@ 0x30
 800797a:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <HAL_I2S_MspInit+0xe0>)
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007980:	46c0      	nop			@ (mov r8, r8)
 8007982:	46bd      	mov	sp, r7
 8007984:	b009      	add	sp, #36	@ 0x24
 8007986:	bd90      	pop	{r4, r7, pc}
 8007988:	40003800 	.word	0x40003800
 800798c:	40021000 	.word	0x40021000
 8007990:	50000400 	.word	0x50000400
 8007994:	20000ecc 	.word	0x20000ecc
 8007998:	40020044 	.word	0x40020044

0800799c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  testDone = true;
 80079a0:	4b1e      	ldr	r3, [pc, #120]	@ (8007a1c <SetTestDone+0x80>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 80079a6:	23fa      	movs	r3, #250	@ 0xfa
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	0018      	movs	r0, r3
 80079ac:	f006 fcf2 	bl	800e394 <HAL_Delay>
  SetDBLED(false, false, true);
 80079b0:	2201      	movs	r2, #1
 80079b2:	2100      	movs	r1, #0
 80079b4:	2000      	movs	r0, #0
 80079b6:	f005 f8b9 	bl	800cb2c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80079ba:	4a19      	ldr	r2, [pc, #100]	@ (8007a20 <SetTestDone+0x84>)
 80079bc:	23fa      	movs	r3, #250	@ 0xfa
 80079be:	0119      	lsls	r1, r3, #4
 80079c0:	23fa      	movs	r3, #250	@ 0xfa
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	0018      	movs	r0, r3
 80079c6:	f005 f87d 	bl	800cac4 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80079ca:	4a15      	ldr	r2, [pc, #84]	@ (8007a20 <SetTestDone+0x84>)
 80079cc:	23fa      	movs	r3, #250	@ 0xfa
 80079ce:	0119      	lsls	r1, r3, #4
 80079d0:	23fa      	movs	r3, #250	@ 0xfa
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	0018      	movs	r0, r3
 80079d6:	f005 f8f3 	bl	800cbc0 <SetVocLED>
  HAL_Delay(1000);
 80079da:	23fa      	movs	r3, #250	@ 0xfa
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	0018      	movs	r0, r3
 80079e0:	f006 fcd8 	bl	800e394 <HAL_Delay>
  SetDBLED(false, false, false);
 80079e4:	2200      	movs	r2, #0
 80079e6:	2100      	movs	r1, #0
 80079e8:	2000      	movs	r0, #0
 80079ea:	f005 f89f 	bl	800cb2c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 80079ee:	23fa      	movs	r3, #250	@ 0xfa
 80079f0:	011a      	lsls	r2, r3, #4
 80079f2:	23fa      	movs	r3, #250	@ 0xfa
 80079f4:	0119      	lsls	r1, r3, #4
 80079f6:	23fa      	movs	r3, #250	@ 0xfa
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	0018      	movs	r0, r3
 80079fc:	f005 f862 	bl	800cac4 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007a00:	23fa      	movs	r3, #250	@ 0xfa
 8007a02:	011a      	lsls	r2, r3, #4
 8007a04:	23fa      	movs	r3, #250	@ 0xfa
 8007a06:	0119      	lsls	r1, r3, #4
 8007a08:	23fa      	movs	r3, #250	@ 0xfa
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f005 f8d7 	bl	800cbc0 <SetVocLED>
  InitDone();
 8007a12:	f004 fff3 	bl	800c9fc <InitDone>
}
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000f14 	.word	0x20000f14
 8007a20:	00000bb8 	.word	0x00000bb8

08007a24 <FlashLEDs>:

void FlashLEDs(){
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007a2a:	1dfb      	adds	r3, r7, #7
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e021      	b.n	8007a76 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007a32:	2201      	movs	r2, #1
 8007a34:	2101      	movs	r1, #1
 8007a36:	2001      	movs	r0, #1
 8007a38:	f005 f878 	bl	800cb2c <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007a3c:	4a12      	ldr	r2, [pc, #72]	@ (8007a88 <FlashLEDs+0x64>)
 8007a3e:	23fa      	movs	r3, #250	@ 0xfa
 8007a40:	0119      	lsls	r1, r3, #4
 8007a42:	23fa      	movs	r3, #250	@ 0xfa
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	0018      	movs	r0, r3
 8007a48:	f005 f83c 	bl	800cac4 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8007a88 <FlashLEDs+0x64>)
 8007a4e:	23fa      	movs	r3, #250	@ 0xfa
 8007a50:	0119      	lsls	r1, r3, #4
 8007a52:	23fa      	movs	r3, #250	@ 0xfa
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	0018      	movs	r0, r3
 8007a58:	f005 f8b2 	bl	800cbc0 <SetVocLED>
    HAL_Delay(250);
 8007a5c:	20fa      	movs	r0, #250	@ 0xfa
 8007a5e:	f006 fc99 	bl	800e394 <HAL_Delay>
    SetLEDsOff();
 8007a62:	f005 f9a3 	bl	800cdac <SetLEDsOff>
    HAL_Delay(250);
 8007a66:	20fa      	movs	r0, #250	@ 0xfa
 8007a68:	f006 fc94 	bl	800e394 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007a6c:	1dfb      	adds	r3, r7, #7
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	1dfb      	adds	r3, r7, #7
 8007a72:	3201      	adds	r2, #1
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	1dfb      	adds	r3, r7, #7
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d9d9      	bls.n	8007a32 <FlashLEDs+0xe>
  }
}
 8007a7e:	46c0      	nop			@ (mov r8, r8)
 8007a80:	46c0      	nop			@ (mov r8, r8)
 8007a82:	46bd      	mov	sp, r7
 8007a84:	b002      	add	sp, #8
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	00000bb8 	.word	0x00000bb8

08007a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a90:	f006 fc10 	bl	800e2b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a94:	f000 f97c 	bl	8007d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a98:	f7ff fc0c 	bl	80072b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007a9c:	f7ff fada 	bl	8007054 <MX_DMA_Init>
  MX_I2C1_Init();
 8007aa0:	f7ff fd86 	bl	80075b0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007aa4:	f7ff fede 	bl	8007864 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007aa8:	f005 fe22 	bl	800d6f0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007aac:	f7ff fdc0 	bl	8007630 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007ab0:	f005 fc16 	bl	800d2e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007ab4:	f005 fc88 	bl	800d3c8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007ab8:	f005 fe4e 	bl	800d758 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007abc:	f7ff fa18 	bl	8006ef0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007ac0:	f014 fbc4 	bl	801c24c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007ac4:	f001 f816 	bl	8008af4 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007ac8:	f005 fddc 	bl	800d684 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007acc:	f005 fcfa 	bl	800d4c4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007ad0:	4a8c      	ldr	r2, [pc, #560]	@ (8007d04 <main+0x278>)
 8007ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8007d08 <main+0x27c>)
 8007ad4:	0011      	movs	r1, r2
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f7ff fd1c 	bl	8007514 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007adc:	f7fe fc1a 	bl	8006314 <UserButton_Pressed>
 8007ae0:	1e03      	subs	r3, r0, #0
 8007ae2:	d004      	beq.n	8007aee <main+0x62>
    EnableESPProg();
 8007ae4:	f014 fc82 	bl	801c3ec <EnableESPProg>
    ESP_Programming = true;
 8007ae8:	4b88      	ldr	r3, [pc, #544]	@ (8007d0c <main+0x280>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007aee:	2003      	movs	r0, #3
 8007af0:	f006 f85a 	bl	800dba8 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007af4:	f006 f872 	bl	800dbdc <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007af8:	4985      	ldr	r1, [pc, #532]	@ (8007d10 <main+0x284>)
 8007afa:	4b86      	ldr	r3, [pc, #536]	@ (8007d14 <main+0x288>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	0018      	movs	r0, r3
 8007b00:	f00e ff0a 	bl	8016918 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007b04:	4b84      	ldr	r3, [pc, #528]	@ (8007d18 <main+0x28c>)
 8007b06:	0018      	movs	r0, r3
 8007b08:	f7fe fff8 	bl	8006afc <InitClock>
  Debug("Clock init done");
 8007b0c:	4a83      	ldr	r2, [pc, #524]	@ (8007d1c <main+0x290>)
 8007b0e:	4b84      	ldr	r3, [pc, #528]	@ (8007d20 <main+0x294>)
 8007b10:	0019      	movs	r1, r3
 8007b12:	2003      	movs	r0, #3
 8007b14:	f005 ffde 	bl	800dad4 <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007b18:	4a82      	ldr	r2, [pc, #520]	@ (8007d24 <main+0x298>)
 8007b1a:	4983      	ldr	r1, [pc, #524]	@ (8007d28 <main+0x29c>)
 8007b1c:	4883      	ldr	r0, [pc, #524]	@ (8007d2c <main+0x2a0>)
 8007b1e:	230b      	movs	r3, #11
 8007b20:	f004 f8e2 	bl	800bce8 <soundInit>
 8007b24:	0003      	movs	r3, r0
 8007b26:	001a      	movs	r2, r3
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4053      	eors	r3, r2
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <main+0xb2>
    errorHandler(__func__, __LINE__, __FILE__);
 8007b32:	4a7f      	ldr	r2, [pc, #508]	@ (8007d30 <main+0x2a4>)
 8007b34:	4b7f      	ldr	r3, [pc, #508]	@ (8007d34 <main+0x2a8>)
 8007b36:	21ee      	movs	r1, #238	@ 0xee
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f006 f883 	bl	800dc44 <errorHandler>
  }

  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8007d38 <main+0x2ac>)
 8007b40:	4a7e      	ldr	r2, [pc, #504]	@ (8007d3c <main+0x2b0>)
 8007b42:	4979      	ldr	r1, [pc, #484]	@ (8007d28 <main+0x29c>)
 8007b44:	487e      	ldr	r0, [pc, #504]	@ (8007d40 <main+0x2b4>)
 8007b46:	f000 faa7 	bl	8008098 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007b4a:	f006 fc19 	bl	800e380 <HAL_GetTick>
 8007b4e:	0003      	movs	r3, r0
 8007b50:	4a7c      	ldr	r2, [pc, #496]	@ (8007d44 <main+0x2b8>)
 8007b52:	189a      	adds	r2, r3, r2
 8007b54:	4b7c      	ldr	r3, [pc, #496]	@ (8007d48 <main+0x2bc>)
 8007b56:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007b58:	4b7c      	ldr	r3, [pc, #496]	@ (8007d4c <main+0x2c0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f005 ff63 	bl	800da28 <TimestampIsReached>
 8007b62:	1e03      	subs	r3, r0, #0
 8007b64:	d00e      	beq.n	8007b84 <main+0xf8>
      charge = Battery_Upkeep();
 8007b66:	f005 fa45 	bl	800cff4 <Battery_Upkeep>
 8007b6a:	0003      	movs	r3, r0
 8007b6c:	001a      	movs	r2, r3
 8007b6e:	4b78      	ldr	r3, [pc, #480]	@ (8007d50 <main+0x2c4>)
 8007b70:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007b72:	f006 fc05 	bl	800e380 <HAL_GetTick>
 8007b76:	0003      	movs	r3, r0
 8007b78:	4a76      	ldr	r2, [pc, #472]	@ (8007d54 <main+0x2c8>)
 8007b7a:	189a      	adds	r2, r3, r2
 8007b7c:	4b73      	ldr	r3, [pc, #460]	@ (8007d4c <main+0x2c0>)
 8007b7e:	601a      	str	r2, [r3, #0]
        showTime();
 8007b80:	f7fe fbd8 	bl	8006334 <showTime>
    }

    //==== disable for power measurements in test condition
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007b84:	4b72      	ldr	r3, [pc, #456]	@ (8007d50 <main+0x2c4>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d003      	beq.n	8007b94 <main+0x108>
 8007b8c:	4b70      	ldr	r3, [pc, #448]	@ (8007d50 <main+0x2c4>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <main+0x10c>
          FlashLEDs();
 8007b94:	f7ff ff46 	bl	8007a24 <FlashLEDs>
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007b98:	4b6d      	ldr	r3, [pc, #436]	@ (8007d50 <main+0x2c4>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <main+0x128>
 8007ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8007d58 <main+0x2cc>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d105      	bne.n	8007bb4 <main+0x128>
          batteryEmpty = true;
 8007ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8007d5c <main+0x2d0>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007bae:	f7fe feed 	bl	800698c <Enter_Standby_Mode>
 8007bb2:	e002      	b.n	8007bba <main+0x12e>
        }
        else{
          batteryEmpty = false;
 8007bb4:	4b69      	ldr	r3, [pc, #420]	@ (8007d5c <main+0x2d0>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
        }
    //====

    if (!usbPluggedIn) {
 8007bba:	4b69      	ldr	r3, [pc, #420]	@ (8007d60 <main+0x2d4>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4053      	eors	r3, r2
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d023      	beq.n	8007c10 <main+0x184>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007bc8:	4b66      	ldr	r3, [pc, #408]	@ (8007d64 <main+0x2d8>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	4053      	eors	r3, r2
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01c      	beq.n	8007c10 <main+0x184>
 8007bd6:	f000 fc01 	bl	80083dc <AllDevicesReady>
 8007bda:	1e03      	subs	r3, r0, #0
 8007bdc:	d018      	beq.n	8007c10 <main+0x184>
 8007bde:	4b62      	ldr	r3, [pc, #392]	@ (8007d68 <main+0x2dc>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d014      	beq.n	8007c10 <main+0x184>
//        Debug("SensorProbe.ESP_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM => %d", SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
        EnabledConnectedDevices();
 8007be6:	f000 fc59 	bl	800849c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007bea:	4b60      	ldr	r3, [pc, #384]	@ (8007d6c <main+0x2e0>)
 8007bec:	789b      	ldrb	r3, [r3, #2]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <main+0x16c>
 8007bf2:	23d7      	movs	r3, #215	@ 0xd7
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	e001      	b.n	8007bfc <main+0x170>
 8007bf8:	23dc      	movs	r3, #220	@ 0xdc
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7fe fee7 	bl	80069d0 <Enter_Stop_Mode>
        deviceTimeOut = HAL_GetTick() + 3000;
 8007c02:	f006 fbbd 	bl	800e380 <HAL_GetTick>
 8007c06:	0003      	movs	r3, r0
 8007c08:	4a59      	ldr	r2, [pc, #356]	@ (8007d70 <main+0x2e4>)
 8007c0a:	189a      	adds	r2, r3, r2
 8007c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8007d48 <main+0x2bc>)
 8007c0e:	601a      	str	r2, [r3, #0]
      }
    }
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007c10:	4b58      	ldr	r3, [pc, #352]	@ (8007d74 <main+0x2e8>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d05a      	beq.n	8007cce <main+0x242>
 8007c18:	4b3c      	ldr	r3, [pc, #240]	@ (8007d0c <main+0x280>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	4053      	eors	r3, r2
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d053      	beq.n	8007cce <main+0x242>
 8007c26:	4b4d      	ldr	r3, [pc, #308]	@ (8007d5c <main+0x2d0>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4053      	eors	r3, r2
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d04c      	beq.n	8007cce <main+0x242>
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007c34:	4b50      	ldr	r3, [pc, #320]	@ (8007d78 <main+0x2ec>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d00d      	beq.n	8007c58 <main+0x1cc>
 8007c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8007d78 <main+0x2ec>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d009      	beq.n	8007c58 <main+0x1cc>
 8007c44:	4b4d      	ldr	r3, [pc, #308]	@ (8007d7c <main+0x2f0>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <main+0x1cc>
        HIDSstate = HIDS_Upkeep();
 8007c4c:	f006 fa7c 	bl	800e148 <HIDS_Upkeep>
 8007c50:	0003      	movs	r3, r0
 8007c52:	001a      	movs	r2, r3
 8007c54:	4b4a      	ldr	r3, [pc, #296]	@ (8007d80 <main+0x2f4>)
 8007c56:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007c58:	4b49      	ldr	r3, [pc, #292]	@ (8007d80 <main+0x2f4>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d00d      	beq.n	8007c7c <main+0x1f0>
 8007c60:	4b47      	ldr	r3, [pc, #284]	@ (8007d80 <main+0x2f4>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d009      	beq.n	8007c7c <main+0x1f0>
 8007c68:	4b44      	ldr	r3, [pc, #272]	@ (8007d7c <main+0x2f0>)
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <main+0x1f0>
        SGPstate = SGP_Upkeep();
 8007c70:	f003 feb0 	bl	800b9d4 <SGP_Upkeep>
 8007c74:	0003      	movs	r3, r0
 8007c76:	001a      	movs	r2, r3
 8007c78:	4b3f      	ldr	r3, [pc, #252]	@ (8007d78 <main+0x2ec>)
 8007c7a:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007d7c <main+0x2f0>)
 8007c7e:	78db      	ldrb	r3, [r3, #3]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <main+0x204>
        MICstate = Mic_Upkeep();
 8007c84:	f000 fe00 	bl	8008888 <Mic_Upkeep>
 8007c88:	0003      	movs	r3, r0
 8007c8a:	001a      	movs	r2, r3
 8007c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d84 <main+0x2f8>)
 8007c8e:	701a      	strb	r2, [r3, #0]
      }
      if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && Sensor.PM_measurementEnabled) {
 8007c90:	4b2f      	ldr	r3, [pc, #188]	@ (8007d50 <main+0x2c4>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d803      	bhi.n	8007ca0 <main+0x214>
 8007c98:	4b2d      	ldr	r3, [pc, #180]	@ (8007d50 <main+0x2c4>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d106      	bne.n	8007cae <main+0x222>
 8007ca0:	4b36      	ldr	r3, [pc, #216]	@ (8007d7c <main+0x2f0>)
 8007ca2:	789b      	ldrb	r3, [r3, #2]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <main+0x222>
        sen5x_statemachine();
 8007ca8:	f001 fc50 	bl	800954c <sen5x_statemachine>
 8007cac:	e009      	b.n	8007cc2 <main+0x236>
      }
      else {
        if (Sensor.PM_measurementEnabled) {
 8007cae:	4b33      	ldr	r3, [pc, #204]	@ (8007d7c <main+0x2f0>)
 8007cb0:	789b      	ldrb	r3, [r3, #2]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <main+0x236>
          Info("Battery level insufficient for sen5x operation");
 8007cb6:	4a34      	ldr	r2, [pc, #208]	@ (8007d88 <main+0x2fc>)
 8007cb8:	4b34      	ldr	r3, [pc, #208]	@ (8007d8c <main+0x300>)
 8007cba:	0019      	movs	r1, r3
 8007cbc:	2002      	movs	r0, #2
 8007cbe:	f005 ff09 	bl	800dad4 <CreateLine>
        }
      }
      ESPstate = ESP_Upkeep();
 8007cc2:	f7fd fb45 	bl	8005350 <ESP_Upkeep>
 8007cc6:	0003      	movs	r3, r0
 8007cc8:	001a      	movs	r2, r3
 8007cca:	4b23      	ldr	r3, [pc, #140]	@ (8007d58 <main+0x2cc>)
 8007ccc:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007cce:	4b29      	ldr	r3, [pc, #164]	@ (8007d74 <main+0x2e8>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	4053      	eors	r3, r2
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <main+0x270>
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8007d0c <main+0x280>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4053      	eors	r3, r2
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <main+0x270>
 8007cea:	4b1c      	ldr	r3, [pc, #112]	@ (8007d5c <main+0x2d0>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4053      	eors	r3, r2
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <main+0x270>
      Device_Test();  // for device with startup time
 8007cf8:	f000 faf6 	bl	80082e8 <Device_Test>
    }
    configCheck();
 8007cfc:	f005 f8d6 	bl	800ceac <configCheck>
    if(TimestampIsReached(batteryReadTimer)){
 8007d00:	e72a      	b.n	8007b58 <main+0xcc>
 8007d02:	46c0      	nop			@ (mov r8, r8)
 8007d04:	200021a0 	.word	0x200021a0
 8007d08:	20002160 	.word	0x20002160
 8007d0c:	20000f15 	.word	0x20000f15
 8007d10:	20000f1c 	.word	0x20000f1c
 8007d14:	200022d8 	.word	0x200022d8
 8007d18:	200011a4 	.word	0x200011a4
 8007d1c:	08023468 	.word	0x08023468
 8007d20:	08023478 	.word	0x08023478
 8007d24:	200021e0 	.word	0x200021e0
 8007d28:	20000e90 	.word	0x20000e90
 8007d2c:	20000ecc 	.word	0x20000ecc
 8007d30:	0802347c 	.word	0x0802347c
 8007d34:	080247fc 	.word	0x080247fc
 8007d38:	20002390 	.word	0x20002390
 8007d3c:	20000cfc 	.word	0x20000cfc
 8007d40:	20000d58 	.word	0x20000d58
 8007d44:	00001388 	.word	0x00001388
 8007d48:	20000f2c 	.word	0x20000f2c
 8007d4c:	20000f30 	.word	0x20000f30
 8007d50:	20000f34 	.word	0x20000f34
 8007d54:	0000c350 	.word	0x0000c350
 8007d58:	20000f1a 	.word	0x20000f1a
 8007d5c:	20000f16 	.word	0x20000f16
 8007d60:	20002151 	.word	0x20002151
 8007d64:	20002152 	.word	0x20002152
 8007d68:	2000054f 	.word	0x2000054f
 8007d6c:	20000f38 	.word	0x20000f38
 8007d70:	00000bb8 	.word	0x00000bb8
 8007d74:	20000f14 	.word	0x20000f14
 8007d78:	20000f17 	.word	0x20000f17
 8007d7c:	2000007c 	.word	0x2000007c
 8007d80:	20000f18 	.word	0x20000f18
 8007d84:	20000f19 	.word	0x20000f19
 8007d88:	08023490 	.word	0x08023490
 8007d8c:	080234c0 	.word	0x080234c0

08007d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b09d      	sub	sp, #116	@ 0x74
 8007d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d96:	2438      	movs	r4, #56	@ 0x38
 8007d98:	193b      	adds	r3, r7, r4
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	2338      	movs	r3, #56	@ 0x38
 8007d9e:	001a      	movs	r2, r3
 8007da0:	2100      	movs	r1, #0
 8007da2:	f017 fd45 	bl	801f830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007da6:	2324      	movs	r3, #36	@ 0x24
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	0018      	movs	r0, r3
 8007dac:	2314      	movs	r3, #20
 8007dae:	001a      	movs	r2, r3
 8007db0:	2100      	movs	r1, #0
 8007db2:	f017 fd3d 	bl	801f830 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007db6:	003b      	movs	r3, r7
 8007db8:	0018      	movs	r0, r3
 8007dba:	2324      	movs	r3, #36	@ 0x24
 8007dbc:	001a      	movs	r2, r3
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	f017 fd36 	bl	801f830 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dc4:	4b34      	ldr	r3, [pc, #208]	@ (8007e98 <SystemClock_Config+0x108>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a34      	ldr	r2, [pc, #208]	@ (8007e9c <SystemClock_Config+0x10c>)
 8007dca:	401a      	ands	r2, r3
 8007dcc:	4b32      	ldr	r3, [pc, #200]	@ (8007e98 <SystemClock_Config+0x108>)
 8007dce:	2180      	movs	r1, #128	@ 0x80
 8007dd0:	0109      	lsls	r1, r1, #4
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007dd6:	f00c fb73 	bl	80144c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8007dda:	4b31      	ldr	r3, [pc, #196]	@ (8007ea0 <SystemClock_Config+0x110>)
 8007ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dde:	4a2f      	ldr	r2, [pc, #188]	@ (8007e9c <SystemClock_Config+0x10c>)
 8007de0:	401a      	ands	r2, r3
 8007de2:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea0 <SystemClock_Config+0x110>)
 8007de4:	2180      	movs	r1, #128	@ 0x80
 8007de6:	0149      	lsls	r1, r1, #5
 8007de8:	430a      	orrs	r2, r1
 8007dea:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007dec:	193b      	adds	r3, r7, r4
 8007dee:	2226      	movs	r2, #38	@ 0x26
 8007df0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007df2:	193b      	adds	r3, r7, r4
 8007df4:	2280      	movs	r2, #128	@ 0x80
 8007df6:	0052      	lsls	r2, r2, #1
 8007df8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007dfa:	0021      	movs	r1, r4
 8007dfc:	187b      	adds	r3, r7, r1
 8007dfe:	2201      	movs	r2, #1
 8007e00:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e02:	187b      	adds	r3, r7, r1
 8007e04:	2210      	movs	r2, #16
 8007e06:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007e08:	187b      	adds	r3, r7, r1
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007e0e:	187b      	adds	r3, r7, r1
 8007e10:	2200      	movs	r2, #0
 8007e12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e14:	187b      	adds	r3, r7, r1
 8007e16:	0018      	movs	r0, r3
 8007e18:	f00c fbe2 	bl	80145e0 <HAL_RCC_OscConfig>
 8007e1c:	1e03      	subs	r3, r0, #0
 8007e1e:	d001      	beq.n	8007e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007e20:	f000 f900 	bl	8008024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e24:	2124      	movs	r1, #36	@ 0x24
 8007e26:	187b      	adds	r3, r7, r1
 8007e28:	220f      	movs	r2, #15
 8007e2a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007e2c:	187b      	adds	r3, r7, r1
 8007e2e:	2201      	movs	r2, #1
 8007e30:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e32:	187b      	adds	r3, r7, r1
 8007e34:	2200      	movs	r2, #0
 8007e36:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007e38:	187b      	adds	r3, r7, r1
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e3e:	187b      	adds	r3, r7, r1
 8007e40:	2200      	movs	r2, #0
 8007e42:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007e44:	187b      	adds	r3, r7, r1
 8007e46:	2100      	movs	r1, #0
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f00c ff9d 	bl	8014d88 <HAL_RCC_ClockConfig>
 8007e4e:	1e03      	subs	r3, r0, #0
 8007e50:	d001      	beq.n	8007e56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007e52:	f000 f8e7 	bl	8008024 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007e56:	003b      	movs	r3, r7
 8007e58:	226d      	movs	r2, #109	@ 0x6d
 8007e5a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007e5c:	003b      	movs	r3, r7
 8007e5e:	2200      	movs	r2, #0
 8007e60:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007e62:	003b      	movs	r3, r7
 8007e64:	2200      	movs	r2, #0
 8007e66:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007e68:	003b      	movs	r3, r7
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007e6e:	003b      	movs	r3, r7
 8007e70:	2280      	movs	r2, #128	@ 0x80
 8007e72:	0252      	lsls	r2, r2, #9
 8007e74:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007e76:	003b      	movs	r3, r7
 8007e78:	2280      	movs	r2, #128	@ 0x80
 8007e7a:	04d2      	lsls	r2, r2, #19
 8007e7c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e7e:	003b      	movs	r3, r7
 8007e80:	0018      	movs	r0, r3
 8007e82:	f00d f9a5 	bl	80151d0 <HAL_RCCEx_PeriphCLKConfig>
 8007e86:	1e03      	subs	r3, r0, #0
 8007e88:	d001      	beq.n	8007e8e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8007e8a:	f000 f8cb 	bl	8008024 <Error_Handler>
  }
}
 8007e8e:	46c0      	nop			@ (mov r8, r8)
 8007e90:	46bd      	mov	sp, r7
 8007e92:	b01d      	add	sp, #116	@ 0x74
 8007e94:	bd90      	pop	{r4, r7, pc}
 8007e96:	46c0      	nop			@ (mov r8, r8)
 8007e98:	40007000 	.word	0x40007000
 8007e9c:	ffffe7ff 	.word	0xffffe7ff
 8007ea0:	40021000 	.word	0x40021000

08007ea4 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	000a      	movs	r2, r1
 8007eae:	1cbb      	adds	r3, r7, #2
 8007eb0:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8007eb2:	4c06      	ldr	r4, [pc, #24]	@ (8007ecc <printString+0x28>)
 8007eb4:	1cbb      	adds	r3, r7, #2
 8007eb6:	881a      	ldrh	r2, [r3, #0]
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4805      	ldr	r0, [pc, #20]	@ (8007ed0 <printString+0x2c>)
 8007ebc:	0023      	movs	r3, r4
 8007ebe:	f00e fc8b 	bl	80167d8 <HAL_UART_Transmit>
}
 8007ec2:	46c0      	nop			@ (mov r8, r8)
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	b003      	add	sp, #12
 8007ec8:	bd90      	pop	{r4, r7, pc}
 8007eca:	46c0      	nop			@ (mov r8, r8)
 8007ecc:	0000ffff 	.word	0x0000ffff
 8007ed0:	200022d8 	.word	0x200022d8

08007ed4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007edc:	4936      	ldr	r1, [pc, #216]	@ (8007fb8 <HAL_UART_RxCpltCallback+0xe4>)
 8007ede:	4b37      	ldr	r3, [pc, #220]	@ (8007fbc <HAL_UART_RxCpltCallback+0xe8>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	f00e fd18 	bl	8016918 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007ee8:	4b33      	ldr	r3, [pc, #204]	@ (8007fb8 <HAL_UART_RxCpltCallback+0xe4>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	3b61      	subs	r3, #97	@ 0x61
 8007eee:	2b13      	cmp	r3, #19
 8007ef0:	d830      	bhi.n	8007f54 <HAL_UART_RxCpltCallback+0x80>
 8007ef2:	009a      	lsls	r2, r3, #2
 8007ef4:	4b32      	ldr	r3, [pc, #200]	@ (8007fc0 <HAL_UART_RxCpltCallback+0xec>)
 8007ef6:	18d3      	adds	r3, r2, r3
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8007efc:	4b31      	ldr	r3, [pc, #196]	@ (8007fc4 <HAL_UART_RxCpltCallback+0xf0>)
 8007efe:	0018      	movs	r0, r3
 8007f00:	f017 fb48 	bl	801f594 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8007f04:	2003      	movs	r0, #3
 8007f06:	f005 fe4f 	bl	800dba8 <SetVerboseLevel>
      break;
 8007f0a:	e04a      	b.n	8007fa2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8007f0c:	f7fb fc46 	bl	800379c <forceNTPupdate>
    break;
 8007f10:	e047      	b.n	8007fa2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8007f12:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc8 <HAL_UART_RxCpltCallback+0xf4>)
 8007f14:	0018      	movs	r0, r3
 8007f16:	f017 fb3d 	bl	801f594 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	f005 fe44 	bl	800dba8 <SetVerboseLevel>
      break;
 8007f20:	e03f      	b.n	8007fa2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007f22:	4b2a      	ldr	r3, [pc, #168]	@ (8007fcc <HAL_UART_RxCpltCallback+0xf8>)
 8007f24:	0018      	movs	r0, r3
 8007f26:	f017 fb35 	bl	801f594 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	f005 fe3c 	bl	800dba8 <SetVerboseLevel>
      break;
 8007f30:	e037      	b.n	8007fa2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007f32:	4b27      	ldr	r3, [pc, #156]	@ (8007fd0 <HAL_UART_RxCpltCallback+0xfc>)
 8007f34:	0018      	movs	r0, r3
 8007f36:	f017 fb2d 	bl	801f594 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f005 fe34 	bl	800dba8 <SetVerboseLevel>
      break;
 8007f40:	e02f      	b.n	8007fa2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007f42:	f006 fa1d 	bl	800e380 <HAL_GetTick>
 8007f46:	0002      	movs	r2, r0
 8007f48:	4b22      	ldr	r3, [pc, #136]	@ (8007fd4 <HAL_UART_RxCpltCallback+0x100>)
 8007f4a:	601a      	str	r2, [r3, #0]
      break;
 8007f4c:	e029      	b.n	8007fa2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8007f4e:	f7fe f9f1 	bl	8006334 <showTime>
      break;
 8007f52:	e026      	b.n	8007fa2 <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007f54:	4a20      	ldr	r2, [pc, #128]	@ (8007fd8 <HAL_UART_RxCpltCallback+0x104>)
 8007f56:	4b21      	ldr	r3, [pc, #132]	@ (8007fdc <HAL_UART_RxCpltCallback+0x108>)
 8007f58:	0019      	movs	r1, r3
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f005 fdba 	bl	800dad4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8007f60:	4b1f      	ldr	r3, [pc, #124]	@ (8007fe0 <HAL_UART_RxCpltCallback+0x10c>)
 8007f62:	0018      	movs	r0, r3
 8007f64:	f017 fb16 	bl	801f594 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8007f68:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe4 <HAL_UART_RxCpltCallback+0x110>)
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f017 fb12 	bl	801f594 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8007f70:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe8 <HAL_UART_RxCpltCallback+0x114>)
 8007f72:	0018      	movs	r0, r3
 8007f74:	f017 fb0e 	bl	801f594 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8007f78:	4b1c      	ldr	r3, [pc, #112]	@ (8007fec <HAL_UART_RxCpltCallback+0x118>)
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f017 fb0a 	bl	801f594 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8007f80:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff0 <HAL_UART_RxCpltCallback+0x11c>)
 8007f82:	0018      	movs	r0, r3
 8007f84:	f017 fb06 	bl	801f594 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8007f88:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff4 <HAL_UART_RxCpltCallback+0x120>)
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f017 fb02 	bl	801f594 <puts>
      printf("s - Start particle measurement\r\n");
 8007f90:	4b19      	ldr	r3, [pc, #100]	@ (8007ff8 <HAL_UART_RxCpltCallback+0x124>)
 8007f92:	0018      	movs	r0, r3
 8007f94:	f017 fafe 	bl	801f594 <puts>
      printf("t - Show actual systemtime\r\n");
 8007f98:	4b18      	ldr	r3, [pc, #96]	@ (8007ffc <HAL_UART_RxCpltCallback+0x128>)
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f017 fafa 	bl	801f594 <puts>
  break;
 8007fa0:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007fa2:	4905      	ldr	r1, [pc, #20]	@ (8007fb8 <HAL_UART_RxCpltCallback+0xe4>)
 8007fa4:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_UART_RxCpltCallback+0xe8>)
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f00e fcb5 	bl	8016918 <HAL_UART_Receive_IT>
}
 8007fae:	46c0      	nop			@ (mov r8, r8)
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b002      	add	sp, #8
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	20000f1c 	.word	0x20000f1c
 8007fbc:	200022d8 	.word	0x200022d8
 8007fc0:	080247ac 	.word	0x080247ac
 8007fc4:	080234c4 	.word	0x080234c4
 8007fc8:	080234e0 	.word	0x080234e0
 8007fcc:	080234fc 	.word	0x080234fc
 8007fd0:	0802351c 	.word	0x0802351c
 8007fd4:	200011cc 	.word	0x200011cc
 8007fd8:	08023538 	.word	0x08023538
 8007fdc:	08023568 	.word	0x08023568
 8007fe0:	0802356c 	.word	0x0802356c
 8007fe4:	08023584 	.word	0x08023584
 8007fe8:	080235a4 	.word	0x080235a4
 8007fec:	080235c8 	.word	0x080235c8
 8007ff0:	080235e8 	.word	0x080235e8
 8007ff4:	0802360c 	.word	0x0802360c
 8007ff8:	0802362c 	.word	0x0802362c
 8007ffc:	0802364c 	.word	0x0802364c

08008000 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	0002      	movs	r2, r0
 8008008:	1dbb      	adds	r3, r7, #6
 800800a:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800800c:	1dbb      	adds	r3, r7, #6
 800800e:	881a      	ldrh	r2, [r3, #0]
 8008010:	2380      	movs	r3, #128	@ 0x80
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	429a      	cmp	r2, r3
 8008016:	d101      	bne.n	800801c <HAL_GPIO_EXTI_Callback+0x1c>
    setuserToggle();
 8008018:	f005 f800 	bl	800d01c <setuserToggle>
  }
}
 800801c:	46c0      	nop			@ (mov r8, r8)
 800801e:	46bd      	mov	sp, r7
 8008020:	b002      	add	sp, #8
 8008022:	bd80      	pop	{r7, pc}

08008024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8008028:	4a04      	ldr	r2, [pc, #16]	@ (800803c <Error_Handler+0x18>)
 800802a:	4b05      	ldr	r3, [pc, #20]	@ (8008040 <Error_Handler+0x1c>)
 800802c:	0019      	movs	r1, r3
 800802e:	2001      	movs	r0, #1
 8008030:	f005 fd50 	bl	800dad4 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008034:	b672      	cpsid	i
}
 8008036:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8008038:	46c0      	nop			@ (mov r8, r8)
 800803a:	e7fd      	b.n	8008038 <Error_Handler+0x14>
 800803c:	08023668 	.word	0x08023668
 8008040:	08023568 	.word	0x08023568

08008044 <testInit>:
};

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008048:	4b08      	ldr	r3, [pc, #32]	@ (800806c <testInit+0x28>)
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800804e:	4b07      	ldr	r3, [pc, #28]	@ (800806c <testInit+0x28>)
 8008050:	2200      	movs	r2, #0
 8008052:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008054:	4b05      	ldr	r3, [pc, #20]	@ (800806c <testInit+0x28>)
 8008056:	2200      	movs	r2, #0
 8008058:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 800805a:	4b04      	ldr	r3, [pc, #16]	@ (800806c <testInit+0x28>)
 800805c:	2200      	movs	r2, #0
 800805e:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008060:	4b02      	ldr	r3, [pc, #8]	@ (800806c <testInit+0x28>)
 8008062:	2200      	movs	r2, #0
 8008064:	711a      	strb	r2, [r3, #4]
}
 8008066:	46c0      	nop			@ (mov r8, r8)
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20000f38 	.word	0x20000f38

08008070 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008074:	4b02      	ldr	r3, [pc, #8]	@ (8008080 <IsPMSensorEnabled+0x10>)
 8008076:	789b      	ldrb	r3, [r3, #2]
}
 8008078:	0018      	movs	r0, r3
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	2000007c 	.word	0x2000007c

08008084 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008088:	4b02      	ldr	r3, [pc, #8]	@ (8008094 <SetESPMeasurementDone+0x10>)
 800808a:	2201      	movs	r2, #1
 800808c:	711a      	strb	r2, [r3, #4]
}
 800808e:	46c0      	nop			@ (mov r8, r8)
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20000f38 	.word	0x20000f38

08008098 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  testInit();
 80080a6:	f7ff ffcd 	bl	8008044 <testInit>
  I2CSensors_Init(sensorI2C);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	0018      	movs	r0, r3
 80080ae:	f7fd fdc7 	bl	8005c40 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80080b2:	f005 ff41 	bl	800df38 <HIDS_DeviceConnected>
 80080b6:	0003      	movs	r3, r0
 80080b8:	001a      	movs	r2, r3
 80080ba:	2301      	movs	r3, #1
 80080bc:	4053      	eors	r3, r2
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00c      	beq.n	80080de <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80080c4:	4a72      	ldr	r2, [pc, #456]	@ (8008290 <Device_Init+0x1f8>)
 80080c6:	4b73      	ldr	r3, [pc, #460]	@ (8008294 <Device_Init+0x1fc>)
 80080c8:	0019      	movs	r1, r3
 80080ca:	2001      	movs	r0, #1
 80080cc:	f005 fd02 	bl	800dad4 <CreateLine>
     SensorProbe.HT_Present = false;
 80080d0:	4b71      	ldr	r3, [pc, #452]	@ (8008298 <Device_Init+0x200>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 80080d6:	4b71      	ldr	r3, [pc, #452]	@ (800829c <Device_Init+0x204>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e008      	b.n	80080f0 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 80080de:	4b6e      	ldr	r3, [pc, #440]	@ (8008298 <Device_Init+0x200>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 80080e4:	4a6e      	ldr	r2, [pc, #440]	@ (80082a0 <Device_Init+0x208>)
 80080e6:	4b6f      	ldr	r3, [pc, #444]	@ (80082a4 <Device_Init+0x20c>)
 80080e8:	0019      	movs	r1, r3
 80080ea:	2003      	movs	r0, #3
 80080ec:	f005 fcf2 	bl	800dad4 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 80080f0:	f003 fa66 	bl	800b5c0 <SGP_DeviceConnected>
 80080f4:	0003      	movs	r3, r0
 80080f6:	001a      	movs	r2, r3
 80080f8:	2301      	movs	r3, #1
 80080fa:	4053      	eors	r3, r2
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00c      	beq.n	800811c <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8008102:	4b65      	ldr	r3, [pc, #404]	@ (8008298 <Device_Init+0x200>)
 8008104:	2200      	movs	r2, #0
 8008106:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008108:	4a67      	ldr	r2, [pc, #412]	@ (80082a8 <Device_Init+0x210>)
 800810a:	4b62      	ldr	r3, [pc, #392]	@ (8008294 <Device_Init+0x1fc>)
 800810c:	0019      	movs	r1, r3
 800810e:	2001      	movs	r0, #1
 8008110:	f005 fce0 	bl	800dad4 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008114:	4b61      	ldr	r3, [pc, #388]	@ (800829c <Device_Init+0x204>)
 8008116:	2200      	movs	r2, #0
 8008118:	705a      	strb	r2, [r3, #1]
 800811a:	e008      	b.n	800812e <Device_Init+0x96>
  }
  else{
    SensorProbe.VOC_Present = true;
 800811c:	4b5e      	ldr	r3, [pc, #376]	@ (8008298 <Device_Init+0x200>)
 800811e:	2201      	movs	r2, #1
 8008120:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008122:	4a62      	ldr	r2, [pc, #392]	@ (80082ac <Device_Init+0x214>)
 8008124:	4b5f      	ldr	r3, [pc, #380]	@ (80082a4 <Device_Init+0x20c>)
 8008126:	0019      	movs	r1, r3
 8008128:	2003      	movs	r0, #3
 800812a:	f005 fcd3 	bl	800dad4 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800812e:	4b5a      	ldr	r3, [pc, #360]	@ (8008298 <Device_Init+0x200>)
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <Device_Init+0xb2>
 8008136:	4b58      	ldr	r3, [pc, #352]	@ (8008298 <Device_Init+0x200>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <Device_Init+0xb2>
    SetDBLED(false, true, false);
 800813e:	2200      	movs	r2, #0
 8008140:	2101      	movs	r1, #1
 8008142:	2000      	movs	r0, #0
 8008144:	f004 fcf2 	bl	800cb2c <SetDBLED>
 8008148:	e018      	b.n	800817c <Device_Init+0xe4>
  }
  else{
    SetDBLED(true, false, false);
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	2001      	movs	r0, #1
 8008150:	f004 fcec 	bl	800cb2c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008154:	4b56      	ldr	r3, [pc, #344]	@ (80082b0 <Device_Init+0x218>)
 8008156:	2200      	movs	r2, #0
 8008158:	2101      	movs	r1, #1
 800815a:	0018      	movs	r0, r3
 800815c:	f007 fba1 	bl	800f8a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008160:	2380      	movs	r3, #128	@ 0x80
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4852      	ldr	r0, [pc, #328]	@ (80082b0 <Device_Init+0x218>)
 8008166:	2201      	movs	r2, #1
 8008168:	0019      	movs	r1, r3
 800816a:	f007 fb9a 	bl	800f8a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800816e:	2380      	movs	r3, #128	@ 0x80
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	484f      	ldr	r0, [pc, #316]	@ (80082b0 <Device_Init+0x218>)
 8008174:	2201      	movs	r2, #1
 8008176:	0019      	movs	r1, r3
 8008178:	f007 fb93 	bl	800f8a2 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800817c:	4b47      	ldr	r3, [pc, #284]	@ (800829c <Device_Init+0x204>)
 800817e:	78db      	ldrb	r3, [r3, #3]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d028      	beq.n	80081d6 <Device_Init+0x13e>
    Info("Device_Init calls enableMicrophone");
 8008184:	4a4b      	ldr	r2, [pc, #300]	@ (80082b4 <Device_Init+0x21c>)
 8008186:	4b4c      	ldr	r3, [pc, #304]	@ (80082b8 <Device_Init+0x220>)
 8008188:	0019      	movs	r1, r3
 800818a:	2002      	movs	r0, #2
 800818c:	f005 fca2 	bl	800dad4 <CreateLine>
    if (!enableMicrophone(true)) {
 8008190:	2001      	movs	r0, #1
 8008192:	f003 fe11 	bl	800bdb8 <enableMicrophone>
 8008196:	0003      	movs	r3, r0
 8008198:	001a      	movs	r2, r3
 800819a:	2301      	movs	r3, #1
 800819c:	4053      	eors	r3, r2
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00c      	beq.n	80081be <Device_Init+0x126>
      Error("Microphone device not connected! DMA Error.");
 80081a4:	4a45      	ldr	r2, [pc, #276]	@ (80082bc <Device_Init+0x224>)
 80081a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008294 <Device_Init+0x1fc>)
 80081a8:	0019      	movs	r1, r3
 80081aa:	2001      	movs	r0, #1
 80081ac:	f005 fc92 	bl	800dad4 <CreateLine>
      SensorProbe.MIC_Present = false;
 80081b0:	4b39      	ldr	r3, [pc, #228]	@ (8008298 <Device_Init+0x200>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80081b6:	4b39      	ldr	r3, [pc, #228]	@ (800829c <Device_Init+0x204>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	70da      	strb	r2, [r3, #3]
 80081bc:	e00b      	b.n	80081d6 <Device_Init+0x13e>
    }
    else{
      SensorProbe.MIC_Present = true;
 80081be:	4b36      	ldr	r3, [pc, #216]	@ (8008298 <Device_Init+0x200>)
 80081c0:	2201      	movs	r2, #1
 80081c2:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80081c4:	4b35      	ldr	r3, [pc, #212]	@ (800829c <Device_Init+0x204>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 80081ca:	4a3d      	ldr	r2, [pc, #244]	@ (80082c0 <Device_Init+0x228>)
 80081cc:	4b35      	ldr	r3, [pc, #212]	@ (80082a4 <Device_Init+0x20c>)
 80081ce:	0019      	movs	r1, r3
 80081d0:	2003      	movs	r0, #3
 80081d2:	f005 fc7f 	bl	800dad4 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 80081d6:	f000 fdd1 	bl	8008d7c <probe_sen5x>
 80081da:	1e03      	subs	r3, r0, #0
 80081dc:	d10c      	bne.n	80081f8 <Device_Init+0x160>
    Debug("PM sensor initialised.");
 80081de:	4a39      	ldr	r2, [pc, #228]	@ (80082c4 <Device_Init+0x22c>)
 80081e0:	4b30      	ldr	r3, [pc, #192]	@ (80082a4 <Device_Init+0x20c>)
 80081e2:	0019      	movs	r1, r3
 80081e4:	2003      	movs	r0, #3
 80081e6:	f005 fc75 	bl	800dad4 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 80081ea:	4b2b      	ldr	r3, [pc, #172]	@ (8008298 <Device_Init+0x200>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 80081f0:	4b2a      	ldr	r3, [pc, #168]	@ (800829c <Device_Init+0x204>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	709a      	strb	r2, [r3, #2]
 80081f6:	e00d      	b.n	8008214 <Device_Init+0x17c>
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 80081f8:	f000 fd98 	bl	8008d2c <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 80081fc:	4a32      	ldr	r2, [pc, #200]	@ (80082c8 <Device_Init+0x230>)
 80081fe:	4b29      	ldr	r3, [pc, #164]	@ (80082a4 <Device_Init+0x20c>)
 8008200:	0019      	movs	r1, r3
 8008202:	2003      	movs	r0, #3
 8008204:	f005 fc66 	bl	800dad4 <CreateLine>
    SensorProbe.MIC_Present = false;
 8008208:	4b23      	ldr	r3, [pc, #140]	@ (8008298 <Device_Init+0x200>)
 800820a:	2200      	movs	r2, #0
 800820c:	70da      	strb	r2, [r3, #3]
    Sensor.PM_measurementEnabled = false;
 800820e:	4b23      	ldr	r3, [pc, #140]	@ (800829c <Device_Init+0x204>)
 8008210:	2200      	movs	r2, #0
 8008212:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8008214:	4b20      	ldr	r3, [pc, #128]	@ (8008298 <Device_Init+0x200>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <Device_Init+0x188>
 800821c:	4b2b      	ldr	r3, [pc, #172]	@ (80082cc <Device_Init+0x234>)
 800821e:	e000      	b.n	8008222 <Device_Init+0x18a>
 8008220:	4b2b      	ldr	r3, [pc, #172]	@ (80082d0 <Device_Init+0x238>)
 8008222:	4a2c      	ldr	r2, [pc, #176]	@ (80082d4 <Device_Init+0x23c>)
 8008224:	4924      	ldr	r1, [pc, #144]	@ (80082b8 <Device_Init+0x220>)
 8008226:	2002      	movs	r0, #2
 8008228:	f005 fc54 	bl	800dad4 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800822c:	4b1a      	ldr	r3, [pc, #104]	@ (8008298 <Device_Init+0x200>)
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <Device_Init+0x1a0>
 8008234:	4b25      	ldr	r3, [pc, #148]	@ (80082cc <Device_Init+0x234>)
 8008236:	e000      	b.n	800823a <Device_Init+0x1a2>
 8008238:	4b25      	ldr	r3, [pc, #148]	@ (80082d0 <Device_Init+0x238>)
 800823a:	4a27      	ldr	r2, [pc, #156]	@ (80082d8 <Device_Init+0x240>)
 800823c:	491e      	ldr	r1, [pc, #120]	@ (80082b8 <Device_Init+0x220>)
 800823e:	2002      	movs	r0, #2
 8008240:	f005 fc48 	bl	800dad4 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 8008244:	4b14      	ldr	r3, [pc, #80]	@ (8008298 <Device_Init+0x200>)
 8008246:	789b      	ldrb	r3, [r3, #2]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <Device_Init+0x1b8>
 800824c:	4b1f      	ldr	r3, [pc, #124]	@ (80082cc <Device_Init+0x234>)
 800824e:	e000      	b.n	8008252 <Device_Init+0x1ba>
 8008250:	4b1f      	ldr	r3, [pc, #124]	@ (80082d0 <Device_Init+0x238>)
 8008252:	4a22      	ldr	r2, [pc, #136]	@ (80082dc <Device_Init+0x244>)
 8008254:	4918      	ldr	r1, [pc, #96]	@ (80082b8 <Device_Init+0x220>)
 8008256:	2002      	movs	r0, #2
 8008258:	f005 fc3c 	bl	800dad4 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800825c:	4b0e      	ldr	r3, [pc, #56]	@ (8008298 <Device_Init+0x200>)
 800825e:	78db      	ldrb	r3, [r3, #3]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <Device_Init+0x1d0>
 8008264:	4b19      	ldr	r3, [pc, #100]	@ (80082cc <Device_Init+0x234>)
 8008266:	e000      	b.n	800826a <Device_Init+0x1d2>
 8008268:	4b19      	ldr	r3, [pc, #100]	@ (80082d0 <Device_Init+0x238>)
 800826a:	4a1d      	ldr	r2, [pc, #116]	@ (80082e0 <Device_Init+0x248>)
 800826c:	4912      	ldr	r1, [pc, #72]	@ (80082b8 <Device_Init+0x220>)
 800826e:	2002      	movs	r0, #2
 8008270:	f005 fc30 	bl	800dad4 <CreateLine>
  ESP_Init(espUart);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	0018      	movs	r0, r3
 8008278:	f7fb fbc2 	bl	8003a00 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800827c:	4a19      	ldr	r2, [pc, #100]	@ (80082e4 <Device_Init+0x24c>)
 800827e:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <Device_Init+0x20c>)
 8008280:	0019      	movs	r1, r3
 8008282:	2003      	movs	r0, #3
 8008284:	f005 fc26 	bl	800dad4 <CreateLine>
}
 8008288:	46c0      	nop			@ (mov r8, r8)
 800828a:	46bd      	mov	sp, r7
 800828c:	b004      	add	sp, #16
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08023694 	.word	0x08023694
 8008294:	080236c4 	.word	0x080236c4
 8008298:	20000f38 	.word	0x20000f38
 800829c:	2000007c 	.word	0x2000007c
 80082a0:	080236c8 	.word	0x080236c8
 80082a4:	080236f4 	.word	0x080236f4
 80082a8:	080236f8 	.word	0x080236f8
 80082ac:	08023714 	.word	0x08023714
 80082b0:	50000400 	.word	0x50000400
 80082b4:	0802372c 	.word	0x0802372c
 80082b8:	08023750 	.word	0x08023750
 80082bc:	08023754 	.word	0x08023754
 80082c0:	08023780 	.word	0x08023780
 80082c4:	080237ac 	.word	0x080237ac
 80082c8:	080237c4 	.word	0x080237c4
 80082cc:	080237e8 	.word	0x080237e8
 80082d0:	080237ec 	.word	0x080237ec
 80082d4:	080237f0 	.word	0x080237f0
 80082d8:	0802380c 	.word	0x0802380c
 80082dc:	08023828 	.word	0x08023828
 80082e0:	08023844 	.word	0x08023844
 80082e4:	08023860 	.word	0x08023860

080082e8 <Device_Test>:

void Device_Test(){
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 80082ec:	4b31      	ldr	r3, [pc, #196]	@ (80083b4 <Device_Test+0xcc>)
 80082ee:	78db      	ldrb	r3, [r3, #3]
 80082f0:	2201      	movs	r2, #1
 80082f2:	4053      	eors	r3, r2
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d021      	beq.n	800833e <Device_Test+0x56>
    if(MIC_TestMeasurementDone()){
 80082fa:	f000 fa95 	bl	8008828 <MIC_TestMeasurementDone>
 80082fe:	1e03      	subs	r3, r0, #0
 8008300:	d00e      	beq.n	8008320 <Device_Test+0x38>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 8008302:	4b2c      	ldr	r3, [pc, #176]	@ (80083b4 <Device_Test+0xcc>)
 8008304:	2201      	movs	r2, #1
 8008306:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008308:	4b2b      	ldr	r3, [pc, #172]	@ (80083b8 <Device_Test+0xd0>)
 800830a:	2201      	movs	r2, #1
 800830c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 800830e:	23fa      	movs	r3, #250	@ 0xfa
 8008310:	011a      	lsls	r2, r3, #4
 8008312:	492a      	ldr	r1, [pc, #168]	@ (80083bc <Device_Test+0xd4>)
 8008314:	23fa      	movs	r3, #250	@ 0xfa
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	0018      	movs	r0, r3
 800831a:	f004 fbd3 	bl	800cac4 <SetStatusLED>
 800831e:	e00e      	b.n	800833e <Device_Test+0x56>
    }
    else{
      if (micSettlingComplete()) {
 8008320:	f003 fd26 	bl	800bd70 <micSettlingComplete>
 8008324:	1e03      	subs	r3, r0, #0
 8008326:	d00a      	beq.n	800833e <Device_Test+0x56>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 8008328:	4b23      	ldr	r3, [pc, #140]	@ (80083b8 <Device_Test+0xd0>)
 800832a:	2201      	movs	r2, #1
 800832c:	70da      	strb	r2, [r3, #3]
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 800832e:	23fa      	movs	r3, #250	@ 0xfa
 8008330:	011a      	lsls	r2, r3, #4
 8008332:	23fa      	movs	r3, #250	@ 0xfa
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	4821      	ldr	r0, [pc, #132]	@ (80083bc <Device_Test+0xd4>)
 8008338:	0019      	movs	r1, r3
 800833a:	f004 fbc3 	bl	800cac4 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800833e:	4b1d      	ldr	r3, [pc, #116]	@ (80083b4 <Device_Test+0xcc>)
 8008340:	791b      	ldrb	r3, [r3, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	4053      	eors	r3, r2
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <Device_Test+0x68>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800834c:	f7fc feea 	bl	8005124 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008350:	4b18      	ldr	r3, [pc, #96]	@ (80083b4 <Device_Test+0xcc>)
 8008352:	791b      	ldrb	r3, [r3, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <Device_Test+0x78>
 8008358:	4b16      	ldr	r3, [pc, #88]	@ (80083b4 <Device_Test+0xcc>)
 800835a:	78db      	ldrb	r3, [r3, #3]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <Device_Test+0x86>
 8008360:	4b17      	ldr	r3, [pc, #92]	@ (80083c0 <Device_Test+0xd8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	0018      	movs	r0, r3
 8008366:	f005 fb5f 	bl	800da28 <TimestampIsReached>
 800836a:	1e03      	subs	r3, r0, #0
 800836c:	d01f      	beq.n	80083ae <Device_Test+0xc6>
    Info("Test completed");
 800836e:	4a15      	ldr	r2, [pc, #84]	@ (80083c4 <Device_Test+0xdc>)
 8008370:	4b15      	ldr	r3, [pc, #84]	@ (80083c8 <Device_Test+0xe0>)
 8008372:	0019      	movs	r1, r3
 8008374:	2002      	movs	r0, #2
 8008376:	f005 fbad 	bl	800dad4 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800837a:	4b0e      	ldr	r3, [pc, #56]	@ (80083b4 <Device_Test+0xcc>)
 800837c:	791b      	ldrb	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <Device_Test+0x9e>
 8008382:	4b12      	ldr	r3, [pc, #72]	@ (80083cc <Device_Test+0xe4>)
 8008384:	e000      	b.n	8008388 <Device_Test+0xa0>
 8008386:	4b12      	ldr	r3, [pc, #72]	@ (80083d0 <Device_Test+0xe8>)
 8008388:	4a12      	ldr	r2, [pc, #72]	@ (80083d4 <Device_Test+0xec>)
 800838a:	490f      	ldr	r1, [pc, #60]	@ (80083c8 <Device_Test+0xe0>)
 800838c:	2002      	movs	r0, #2
 800838e:	f005 fba1 	bl	800dad4 <CreateLine>
    Info("MIC function:%s", SensorProbe.MIC_Present?"passed": "failed");
 8008392:	4b08      	ldr	r3, [pc, #32]	@ (80083b4 <Device_Test+0xcc>)
 8008394:	78db      	ldrb	r3, [r3, #3]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <Device_Test+0xb6>
 800839a:	4b0c      	ldr	r3, [pc, #48]	@ (80083cc <Device_Test+0xe4>)
 800839c:	e000      	b.n	80083a0 <Device_Test+0xb8>
 800839e:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <Device_Test+0xe8>)
 80083a0:	4a0d      	ldr	r2, [pc, #52]	@ (80083d8 <Device_Test+0xf0>)
 80083a2:	4909      	ldr	r1, [pc, #36]	@ (80083c8 <Device_Test+0xe0>)
 80083a4:	2002      	movs	r0, #2
 80083a6:	f005 fb95 	bl	800dad4 <CreateLine>
    SetTestDone();
 80083aa:	f7ff faf7 	bl	800799c <SetTestDone>
  }
}
 80083ae:	46c0      	nop			@ (mov r8, r8)
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000f38 	.word	0x20000f38
 80083b8:	2000007c 	.word	0x2000007c
 80083bc:	00000bb8 	.word	0x00000bb8
 80083c0:	20000f2c 	.word	0x20000f2c
 80083c4:	08023884 	.word	0x08023884
 80083c8:	08023750 	.word	0x08023750
 80083cc:	08023894 	.word	0x08023894
 80083d0:	0802389c 	.word	0x0802389c
 80083d4:	080238a4 	.word	0x080238a4
 80083d8:	080238b8 	.word	0x080238b8

080083dc <AllDevicesReady>:

bool AllDevicesReady() {
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 80083e0:	4b27      	ldr	r3, [pc, #156]	@ (8008480 <AllDevicesReady+0xa4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	0018      	movs	r0, r3
 80083e6:	f005 fb1f 	bl	800da28 <TimestampIsReached>
 80083ea:	1e03      	subs	r3, r0, #0
 80083ec:	d043      	beq.n	8008476 <AllDevicesReady+0x9a>
    if (HIDSstate == HIDS_STATE_WAIT) {
 80083ee:	4b25      	ldr	r3, [pc, #148]	@ (8008484 <AllDevicesReady+0xa8>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b06      	cmp	r3, #6
 80083f4:	d102      	bne.n	80083fc <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 80083f6:	4b24      	ldr	r3, [pc, #144]	@ (8008488 <AllDevicesReady+0xac>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	701a      	strb	r2, [r3, #0]
    }
    if (SGPstate == SGP_STATE_WAIT) {
 80083fc:	4b23      	ldr	r3, [pc, #140]	@ (800848c <AllDevicesReady+0xb0>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b06      	cmp	r3, #6
 8008402:	d102      	bne.n	800840a <AllDevicesReady+0x2e>
      Sensor.VOC_measurementEnabled = false;
 8008404:	4b20      	ldr	r3, [pc, #128]	@ (8008488 <AllDevicesReady+0xac>)
 8008406:	2200      	movs	r2, #0
 8008408:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800840a:	4b21      	ldr	r3, [pc, #132]	@ (8008490 <AllDevicesReady+0xb4>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d102      	bne.n	8008418 <AllDevicesReady+0x3c>
      Sensor.PM_measurementEnabled = false;
 8008412:	4b1d      	ldr	r3, [pc, #116]	@ (8008488 <AllDevicesReady+0xac>)
 8008414:	2200      	movs	r2, #0
 8008416:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008418:	4b1e      	ldr	r3, [pc, #120]	@ (8008494 <AllDevicesReady+0xb8>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b03      	cmp	r3, #3
 800841e:	d102      	bne.n	8008426 <AllDevicesReady+0x4a>
      Sensor.MIC_measurementEnabled = false;
 8008420:	4b19      	ldr	r3, [pc, #100]	@ (8008488 <AllDevicesReady+0xac>)
 8008422:	2200      	movs	r2, #0
 8008424:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008426:	4b1c      	ldr	r3, [pc, #112]	@ (8008498 <AllDevicesReady+0xbc>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b09      	cmp	r3, #9
 800842c:	d123      	bne.n	8008476 <AllDevicesReady+0x9a>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800842e:	4b16      	ldr	r3, [pc, #88]	@ (8008488 <AllDevicesReady+0xac>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2201      	movs	r2, #1
 8008434:	4053      	eors	r3, r2
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d016      	beq.n	800846a <AllDevicesReady+0x8e>
 800843c:	4b12      	ldr	r3, [pc, #72]	@ (8008488 <AllDevicesReady+0xac>)
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	2201      	movs	r2, #1
 8008442:	4053      	eors	r3, r2
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00f      	beq.n	800846a <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800844a:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <AllDevicesReady+0xac>)
 800844c:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800844e:	2201      	movs	r2, #1
 8008450:	4053      	eors	r3, r2
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d008      	beq.n	800846a <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008458:	4b0b      	ldr	r3, [pc, #44]	@ (8008488 <AllDevicesReady+0xac>)
 800845a:	78db      	ldrb	r3, [r3, #3]
 800845c:	2201      	movs	r2, #1
 800845e:	4053      	eors	r3, r2
 8008460:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <AllDevicesReady+0x8e>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <AllDevicesReady+0x90>
 800846a:	2300      	movs	r3, #0
 800846c:	1c1a      	adds	r2, r3, #0
 800846e:	2301      	movs	r3, #1
 8008470:	4013      	ands	r3, r2
 8008472:	b2db      	uxtb	r3, r3
 8008474:	e000      	b.n	8008478 <AllDevicesReady+0x9c>
    }
  }
  return false;
 8008476:	2300      	movs	r3, #0
}
 8008478:	0018      	movs	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	46c0      	nop			@ (mov r8, r8)
 8008480:	20000f2c 	.word	0x20000f2c
 8008484:	20000f18 	.word	0x20000f18
 8008488:	2000007c 	.word	0x2000007c
 800848c:	20000f17 	.word	0x20000f17
 8008490:	20000081 	.word	0x20000081
 8008494:	20000f19 	.word	0x20000f19
 8008498:	20000f1a 	.word	0x20000f1a

0800849c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 80084a0:	4b0f      	ldr	r3, [pc, #60]	@ (80084e0 <EnabledConnectedDevices+0x44>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 80084a8:	4b0e      	ldr	r3, [pc, #56]	@ (80084e4 <EnabledConnectedDevices+0x48>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.VOC_Present) {
 80084ae:	4b0c      	ldr	r3, [pc, #48]	@ (80084e0 <EnabledConnectedDevices+0x44>)
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <EnabledConnectedDevices+0x20>
    Sensor.VOC_measurementEnabled = true;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <EnabledConnectedDevices+0x48>)
 80084b8:	2201      	movs	r2, #1
 80084ba:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 80084bc:	4b08      	ldr	r3, [pc, #32]	@ (80084e0 <EnabledConnectedDevices+0x44>)
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <EnabledConnectedDevices+0x2e>
    Sensor.PM_measurementEnabled = true;
 80084c4:	4b07      	ldr	r3, [pc, #28]	@ (80084e4 <EnabledConnectedDevices+0x48>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 80084ca:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <EnabledConnectedDevices+0x44>)
 80084cc:	78db      	ldrb	r3, [r3, #3]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <EnabledConnectedDevices+0x3c>
    Sensor.MIC_measurementEnabled = true;
 80084d2:	4b04      	ldr	r3, [pc, #16]	@ (80084e4 <EnabledConnectedDevices+0x48>)
 80084d4:	2201      	movs	r2, #1
 80084d6:	70da      	strb	r2, [r3, #3]
  }
}
 80084d8:	46c0      	nop			@ (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	46c0      	nop			@ (mov r8, r8)
 80084e0:	20000f38 	.word	0x20000f38
 80084e4:	2000007c 	.word	0x2000007c

080084e8 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
    Sensor.HT_measurementEnabled = false;
 80084ec:	4b07      	ldr	r3, [pc, #28]	@ (800850c <DisableConnectedDevices+0x24>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
    Sensor.VOC_measurementEnabled = false;
 80084f2:	4b06      	ldr	r3, [pc, #24]	@ (800850c <DisableConnectedDevices+0x24>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	705a      	strb	r2, [r3, #1]
    Sensor.PM_measurementEnabled = false;
 80084f8:	4b04      	ldr	r3, [pc, #16]	@ (800850c <DisableConnectedDevices+0x24>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	709a      	strb	r2, [r3, #2]
    Sensor.MIC_measurementEnabled = false;
 80084fe:	4b03      	ldr	r3, [pc, #12]	@ (800850c <DisableConnectedDevices+0x24>)
 8008500:	2200      	movs	r2, #0
 8008502:	70da      	strb	r2, [r3, #3]
}
 8008504:	46c0      	nop			@ (mov r8, r8)
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	46c0      	nop			@ (mov r8, r8)
 800850c:	2000007c 	.word	0x2000007c

08008510 <setMICTimeStamp>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void setMICTimeStamp(uint32_t ticks) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008518:	f005 ff32 	bl	800e380 <HAL_GetTick>
 800851c:	0002      	movs	r2, r0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	18d2      	adds	r2, r2, r3
 8008522:	4b03      	ldr	r3, [pc, #12]	@ (8008530 <setMICTimeStamp+0x20>)
 8008524:	601a      	str	r2, [r3, #0]
}
 8008526:	46c0      	nop			@ (mov r8, r8)
 8008528:	46bd      	mov	sp, r7
 800852a:	b002      	add	sp, #8
 800852c:	bd80      	pop	{r7, pc}
 800852e:	46c0      	nop			@ (mov r8, r8)
 8008530:	20000f8c 	.word	0x20000f8c

08008534 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  counter = 0;
 8008538:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <ResetDBACalculator+0x1c>)
 800853a:	2200      	movs	r2, #0
 800853c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800853e:	4b05      	ldr	r3, [pc, #20]	@ (8008554 <ResetDBACalculator+0x20>)
 8008540:	2201      	movs	r2, #1
 8008542:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008544:	4b04      	ldr	r3, [pc, #16]	@ (8008558 <ResetDBACalculator+0x24>)
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
}
 800854a:	46c0      	nop			@ (mov r8, r8)
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20000f88 	.word	0x20000f88
 8008554:	20000080 	.word	0x20000080
 8008558:	20000f89 	.word	0x20000f89

0800855c <MIC_Print>:

void MIC_Print(void) {
 800855c:	b5b0      	push	{r4, r5, r7, lr}
 800855e:	b08a      	sub	sp, #40	@ 0x28
 8008560:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008562:	4b9f      	ldr	r3, [pc, #636]	@ (80087e0 <MIC_Print+0x284>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b9f      	ldr	r3, [pc, #636]	@ (80087e4 <MIC_Print+0x288>)
 8008568:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800856a:	4b9f      	ldr	r3, [pc, #636]	@ (80087e8 <MIC_Print+0x28c>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	001a      	movs	r2, r3
 8008570:	4b9c      	ldr	r3, [pc, #624]	@ (80087e4 <MIC_Print+0x288>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	4b9d      	ldr	r3, [pc, #628]	@ (80087ec <MIC_Print+0x290>)
 8008576:	0092      	lsls	r2, r2, #2
 8008578:	50d1      	str	r1, [r2, r3]
  counter++;
 800857a:	4b9b      	ldr	r3, [pc, #620]	@ (80087e8 <MIC_Print+0x28c>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	3301      	adds	r3, #1
 8008580:	b2da      	uxtb	r2, r3
 8008582:	4b99      	ldr	r3, [pc, #612]	@ (80087e8 <MIC_Print+0x28c>)
 8008584:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008586:	4b98      	ldr	r3, [pc, #608]	@ (80087e8 <MIC_Print+0x28c>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b09      	cmp	r3, #9
 800858c:	d80b      	bhi.n	80085a6 <MIC_Print+0x4a>
 800858e:	4b98      	ldr	r3, [pc, #608]	@ (80087f0 <MIC_Print+0x294>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2201      	movs	r2, #1
 8008594:	4053      	eors	r3, r2
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <MIC_Print+0x4a>
    denominator = counter;
 800859c:	4b92      	ldr	r3, [pc, #584]	@ (80087e8 <MIC_Print+0x28c>)
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	4b94      	ldr	r3, [pc, #592]	@ (80087f4 <MIC_Print+0x298>)
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	e005      	b.n	80085b2 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 80085a6:	4b93      	ldr	r3, [pc, #588]	@ (80087f4 <MIC_Print+0x298>)
 80085a8:	220a      	movs	r2, #10
 80085aa:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 80085ac:	4b90      	ldr	r3, [pc, #576]	@ (80087f0 <MIC_Print+0x294>)
 80085ae:	2201      	movs	r2, #1
 80085b0:	701a      	strb	r2, [r3, #0]
  }
  dBAmax = 0.0;
 80085b2:	4b91      	ldr	r3, [pc, #580]	@ (80087f8 <MIC_Print+0x29c>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
  dBAsum = 0.0;
 80085b8:	4b90      	ldr	r3, [pc, #576]	@ (80087fc <MIC_Print+0x2a0>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 80085be:	230f      	movs	r3, #15
 80085c0:	18fb      	adds	r3, r7, r3
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	e03e      	b.n	8008646 <MIC_Print+0xea>
    dBAsum += dBASamples[i];
 80085c8:	240f      	movs	r4, #15
 80085ca:	193b      	adds	r3, r7, r4
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	4b87      	ldr	r3, [pc, #540]	@ (80087ec <MIC_Print+0x290>)
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	58d2      	ldr	r2, [r2, r3]
 80085d4:	4b89      	ldr	r3, [pc, #548]	@ (80087fc <MIC_Print+0x2a0>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	1c19      	adds	r1, r3, #0
 80085da:	1c10      	adds	r0, r2, #0
 80085dc:	f7f8 f970 	bl	80008c0 <__aeabi_fadd>
 80085e0:	1c03      	adds	r3, r0, #0
 80085e2:	1c1a      	adds	r2, r3, #0
 80085e4:	4b85      	ldr	r3, [pc, #532]	@ (80087fc <MIC_Print+0x2a0>)
 80085e6:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 80085e8:	193b      	adds	r3, r7, r4
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	4b7f      	ldr	r3, [pc, #508]	@ (80087ec <MIC_Print+0x290>)
 80085ee:	0092      	lsls	r2, r2, #2
 80085f0:	58d2      	ldr	r2, [r2, r3]
 80085f2:	4b81      	ldr	r3, [pc, #516]	@ (80087f8 <MIC_Print+0x29c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	1c19      	adds	r1, r3, #0
 80085f8:	1c10      	adds	r0, r2, #0
 80085fa:	f7f7 ffad 	bl	8000558 <__aeabi_fcmpgt>
 80085fe:	1e03      	subs	r3, r0, #0
 8008600:	d006      	beq.n	8008610 <MIC_Print+0xb4>
      dBAmax = dBASamples[i];
 8008602:	193b      	adds	r3, r7, r4
 8008604:	781a      	ldrb	r2, [r3, #0]
 8008606:	4b79      	ldr	r3, [pc, #484]	@ (80087ec <MIC_Print+0x290>)
 8008608:	0092      	lsls	r2, r2, #2
 800860a:	58d2      	ldr	r2, [r2, r3]
 800860c:	4b7a      	ldr	r3, [pc, #488]	@ (80087f8 <MIC_Print+0x29c>)
 800860e:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008610:	4b7a      	ldr	r3, [pc, #488]	@ (80087fc <MIC_Print+0x2a0>)
 8008612:	681c      	ldr	r4, [r3, #0]
 8008614:	4b77      	ldr	r3, [pc, #476]	@ (80087f4 <MIC_Print+0x298>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	0018      	movs	r0, r3
 800861a:	f7f9 f825 	bl	8001668 <__aeabi_ui2f>
 800861e:	1c03      	adds	r3, r0, #0
 8008620:	1c19      	adds	r1, r3, #0
 8008622:	1c20      	adds	r0, r4, #0
 8008624:	f7f8 fad6 	bl	8000bd4 <__aeabi_fdiv>
 8008628:	1c03      	adds	r3, r0, #0
 800862a:	1c1a      	adds	r2, r3, #0
 800862c:	4b74      	ldr	r3, [pc, #464]	@ (8008800 <MIC_Print+0x2a4>)
 800862e:	601a      	str	r2, [r3, #0]
  setMic(dBAAverage);
 8008630:	4b73      	ldr	r3, [pc, #460]	@ (8008800 <MIC_Print+0x2a4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	1c18      	adds	r0, r3, #0
 8008636:	f7fb f985 	bl	8003944 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800863a:	210f      	movs	r1, #15
 800863c:	187b      	adds	r3, r7, r1
 800863e:	781a      	ldrb	r2, [r3, #0]
 8008640:	187b      	adds	r3, r7, r1
 8008642:	3201      	adds	r2, #1
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	4b6b      	ldr	r3, [pc, #428]	@ (80087f4 <MIC_Print+0x298>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	220f      	movs	r2, #15
 800864c:	18ba      	adds	r2, r7, r2
 800864e:	7812      	ldrb	r2, [r2, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d3b9      	bcc.n	80085c8 <MIC_Print+0x6c>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008654:	4b63      	ldr	r3, [pc, #396]	@ (80087e4 <MIC_Print+0x288>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	1c18      	adds	r0, r3, #0
 800865a:	f7fa ff03 	bl	8003464 <__aeabi_f2d>
 800865e:	6038      	str	r0, [r7, #0]
 8008660:	6079      	str	r1, [r7, #4]
 8008662:	4b65      	ldr	r3, [pc, #404]	@ (80087f8 <MIC_Print+0x29c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	1c18      	adds	r0, r3, #0
 8008668:	f7fa fefc 	bl	8003464 <__aeabi_f2d>
 800866c:	0004      	movs	r4, r0
 800866e:	000d      	movs	r5, r1
 8008670:	4b63      	ldr	r3, [pc, #396]	@ (8008800 <MIC_Print+0x2a4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	1c18      	adds	r0, r3, #0
 8008676:	f7fa fef5 	bl	8003464 <__aeabi_f2d>
 800867a:	0002      	movs	r2, r0
 800867c:	000b      	movs	r3, r1
 800867e:	4961      	ldr	r1, [pc, #388]	@ (8008804 <MIC_Print+0x2a8>)
 8008680:	9204      	str	r2, [sp, #16]
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	9402      	str	r4, [sp, #8]
 8008686:	9503      	str	r5, [sp, #12]
 8008688:	4b5f      	ldr	r3, [pc, #380]	@ (8008808 <MIC_Print+0x2ac>)
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	0008      	movs	r0, r1
 8008692:	f000 fa0d 	bl	8008ab0 <print>

  if(counter > NUMBER_OF_SAMPLES){
 8008696:	4b54      	ldr	r3, [pc, #336]	@ (80087e8 <MIC_Print+0x28c>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b0a      	cmp	r3, #10
 800869c:	d902      	bls.n	80086a4 <MIC_Print+0x148>
    counter = 0;
 800869e:	4b52      	ldr	r3, [pc, #328]	@ (80087e8 <MIC_Print+0x28c>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 80086a4:	4b4f      	ldr	r3, [pc, #316]	@ (80087e4 <MIC_Print+0x288>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4958      	ldr	r1, [pc, #352]	@ (800880c <MIC_Print+0x2b0>)
 80086aa:	1c18      	adds	r0, r3, #0
 80086ac:	f7f7 ff5e 	bl	800056c <__aeabi_fcmpge>
 80086b0:	1e03      	subs	r3, r0, #0
 80086b2:	d004      	beq.n	80086be <MIC_Print+0x162>
    SetDBLED(true, true, true);
 80086b4:	2201      	movs	r2, #1
 80086b6:	2101      	movs	r1, #1
 80086b8:	2001      	movs	r0, #1
 80086ba:	f004 fa37 	bl	800cb2c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 80086be:	4b49      	ldr	r3, [pc, #292]	@ (80087e4 <MIC_Print+0x288>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4953      	ldr	r1, [pc, #332]	@ (8008810 <MIC_Print+0x2b4>)
 80086c4:	1c18      	adds	r0, r3, #0
 80086c6:	f7f7 ff51 	bl	800056c <__aeabi_fcmpge>
 80086ca:	1e03      	subs	r3, r0, #0
 80086cc:	d00c      	beq.n	80086e8 <MIC_Print+0x18c>
 80086ce:	4b45      	ldr	r3, [pc, #276]	@ (80087e4 <MIC_Print+0x288>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	494e      	ldr	r1, [pc, #312]	@ (800880c <MIC_Print+0x2b0>)
 80086d4:	1c18      	adds	r0, r3, #0
 80086d6:	f7f7 ff2b 	bl	8000530 <__aeabi_fcmplt>
 80086da:	1e03      	subs	r3, r0, #0
 80086dc:	d004      	beq.n	80086e8 <MIC_Print+0x18c>
    SetDBLED(true, false, false);
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	2001      	movs	r0, #1
 80086e4:	f004 fa22 	bl	800cb2c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 80086e8:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <MIC_Print+0x288>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4949      	ldr	r1, [pc, #292]	@ (8008814 <MIC_Print+0x2b8>)
 80086ee:	1c18      	adds	r0, r3, #0
 80086f0:	f7f7 ff3c 	bl	800056c <__aeabi_fcmpge>
 80086f4:	1e03      	subs	r3, r0, #0
 80086f6:	d00c      	beq.n	8008712 <MIC_Print+0x1b6>
 80086f8:	4b3a      	ldr	r3, [pc, #232]	@ (80087e4 <MIC_Print+0x288>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4944      	ldr	r1, [pc, #272]	@ (8008810 <MIC_Print+0x2b4>)
 80086fe:	1c18      	adds	r0, r3, #0
 8008700:	f7f7 ff16 	bl	8000530 <__aeabi_fcmplt>
 8008704:	1e03      	subs	r3, r0, #0
 8008706:	d004      	beq.n	8008712 <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 8008708:	2200      	movs	r2, #0
 800870a:	2101      	movs	r1, #1
 800870c:	2001      	movs	r0, #1
 800870e:	f004 fa0d 	bl	800cb2c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008712:	4b34      	ldr	r3, [pc, #208]	@ (80087e4 <MIC_Print+0x288>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4940      	ldr	r1, [pc, #256]	@ (8008818 <MIC_Print+0x2bc>)
 8008718:	1c18      	adds	r0, r3, #0
 800871a:	f7f7 ff27 	bl	800056c <__aeabi_fcmpge>
 800871e:	1e03      	subs	r3, r0, #0
 8008720:	d00c      	beq.n	800873c <MIC_Print+0x1e0>
 8008722:	4b30      	ldr	r3, [pc, #192]	@ (80087e4 <MIC_Print+0x288>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	493b      	ldr	r1, [pc, #236]	@ (8008814 <MIC_Print+0x2b8>)
 8008728:	1c18      	adds	r0, r3, #0
 800872a:	f7f7 ff01 	bl	8000530 <__aeabi_fcmplt>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d004      	beq.n	800873c <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 8008732:	2200      	movs	r2, #0
 8008734:	2101      	movs	r1, #1
 8008736:	2000      	movs	r0, #0
 8008738:	f004 f9f8 	bl	800cb2c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800873c:	4b29      	ldr	r3, [pc, #164]	@ (80087e4 <MIC_Print+0x288>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4936      	ldr	r1, [pc, #216]	@ (800881c <MIC_Print+0x2c0>)
 8008742:	1c18      	adds	r0, r3, #0
 8008744:	f7f7 ff12 	bl	800056c <__aeabi_fcmpge>
 8008748:	1e03      	subs	r3, r0, #0
 800874a:	d00c      	beq.n	8008766 <MIC_Print+0x20a>
 800874c:	4b25      	ldr	r3, [pc, #148]	@ (80087e4 <MIC_Print+0x288>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4931      	ldr	r1, [pc, #196]	@ (8008818 <MIC_Print+0x2bc>)
 8008752:	1c18      	adds	r0, r3, #0
 8008754:	f7f7 feec 	bl	8000530 <__aeabi_fcmplt>
 8008758:	1e03      	subs	r3, r0, #0
 800875a:	d004      	beq.n	8008766 <MIC_Print+0x20a>
    SetDBLED(false, true, true);
 800875c:	2201      	movs	r2, #1
 800875e:	2101      	movs	r1, #1
 8008760:	2000      	movs	r0, #0
 8008762:	f004 f9e3 	bl	800cb2c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008766:	4b1f      	ldr	r3, [pc, #124]	@ (80087e4 <MIC_Print+0x288>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	492d      	ldr	r1, [pc, #180]	@ (8008820 <MIC_Print+0x2c4>)
 800876c:	1c18      	adds	r0, r3, #0
 800876e:	f7f7 fefd 	bl	800056c <__aeabi_fcmpge>
 8008772:	1e03      	subs	r3, r0, #0
 8008774:	d00c      	beq.n	8008790 <MIC_Print+0x234>
 8008776:	4b1b      	ldr	r3, [pc, #108]	@ (80087e4 <MIC_Print+0x288>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4928      	ldr	r1, [pc, #160]	@ (800881c <MIC_Print+0x2c0>)
 800877c:	1c18      	adds	r0, r3, #0
 800877e:	f7f7 fed7 	bl	8000530 <__aeabi_fcmplt>
 8008782:	1e03      	subs	r3, r0, #0
 8008784:	d004      	beq.n	8008790 <MIC_Print+0x234>
    SetDBLED(false, false, true);
 8008786:	2201      	movs	r2, #1
 8008788:	2100      	movs	r1, #0
 800878a:	2000      	movs	r0, #0
 800878c:	f004 f9ce 	bl	800cb2c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008790:	4b14      	ldr	r3, [pc, #80]	@ (80087e4 <MIC_Print+0x288>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4923      	ldr	r1, [pc, #140]	@ (8008824 <MIC_Print+0x2c8>)
 8008796:	1c18      	adds	r0, r3, #0
 8008798:	f7f7 fee8 	bl	800056c <__aeabi_fcmpge>
 800879c:	1e03      	subs	r3, r0, #0
 800879e:	d00c      	beq.n	80087ba <MIC_Print+0x25e>
 80087a0:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <MIC_Print+0x288>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	491e      	ldr	r1, [pc, #120]	@ (8008820 <MIC_Print+0x2c4>)
 80087a6:	1c18      	adds	r0, r3, #0
 80087a8:	f7f7 fec2 	bl	8000530 <__aeabi_fcmplt>
 80087ac:	1e03      	subs	r3, r0, #0
 80087ae:	d004      	beq.n	80087ba <MIC_Print+0x25e>
    SetDBLED(true, false, true);
 80087b0:	2201      	movs	r2, #1
 80087b2:	2100      	movs	r1, #0
 80087b4:	2001      	movs	r0, #1
 80087b6:	f004 f9b9 	bl	800cb2c <SetDBLED>
  }
  if(dBA < 35){//off
 80087ba:	4b0a      	ldr	r3, [pc, #40]	@ (80087e4 <MIC_Print+0x288>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4919      	ldr	r1, [pc, #100]	@ (8008824 <MIC_Print+0x2c8>)
 80087c0:	1c18      	adds	r0, r3, #0
 80087c2:	f7f7 feb5 	bl	8000530 <__aeabi_fcmplt>
 80087c6:	1e03      	subs	r3, r0, #0
 80087c8:	d100      	bne.n	80087cc <MIC_Print+0x270>
    SetDBLED(false, false, false);
  }
}
 80087ca:	e004      	b.n	80087d6 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	2000      	movs	r0, #0
 80087d2:	f004 f9ab 	bl	800cb2c <SetDBLED>
}
 80087d6:	46c0      	nop			@ (mov r8, r8)
 80087d8:	46bd      	mov	sp, r7
 80087da:	b004      	add	sp, #16
 80087dc:	bdb0      	pop	{r4, r5, r7, pc}
 80087de:	46c0      	nop			@ (mov r8, r8)
 80087e0:	20000f80 	.word	0x20000f80
 80087e4:	20000f4c 	.word	0x20000f4c
 80087e8:	20000f88 	.word	0x20000f88
 80087ec:	20000f50 	.word	0x20000f50
 80087f0:	20000f89 	.word	0x20000f89
 80087f4:	20000080 	.word	0x20000080
 80087f8:	20000f84 	.word	0x20000f84
 80087fc:	20000f7c 	.word	0x20000f7c
 8008800:	20000f78 	.word	0x20000f78
 8008804:	080238c8 	.word	0x080238c8
 8008808:	20000f40 	.word	0x20000f40
 800880c:	42b40000 	.word	0x42b40000
 8008810:	42a00000 	.word	0x42a00000
 8008814:	428c0000 	.word	0x428c0000
 8008818:	42700000 	.word	0x42700000
 800881c:	42480000 	.word	0x42480000
 8008820:	42200000 	.word	0x42200000
 8008824:	420c0000 	.word	0x420c0000

08008828 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800882e:	4b11      	ldr	r3, [pc, #68]	@ (8008874 <MIC_TestMeasurementDone+0x4c>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	4a10      	ldr	r2, [pc, #64]	@ (8008878 <MIC_TestMeasurementDone+0x50>)
 8008836:	4911      	ldr	r1, [pc, #68]	@ (800887c <MIC_TestMeasurementDone+0x54>)
 8008838:	2002      	movs	r0, #2
 800883a:	f005 f94b 	bl	800dad4 <CreateLine>
  if(DataReady) {
 800883e:	4b0d      	ldr	r3, [pc, #52]	@ (8008874 <MIC_TestMeasurementDone+0x4c>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d010      	beq.n	800886a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008848:	1dfb      	adds	r3, r7, #7
 800884a:	4a0d      	ldr	r2, [pc, #52]	@ (8008880 <MIC_TestMeasurementDone+0x58>)
 800884c:	7812      	ldrb	r2, [r2, #0]
 800884e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008850:	4b0b      	ldr	r3, [pc, #44]	@ (8008880 <MIC_TestMeasurementDone+0x58>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	4a0b      	ldr	r2, [pc, #44]	@ (8008884 <MIC_TestMeasurementDone+0x5c>)
 8008858:	4908      	ldr	r1, [pc, #32]	@ (800887c <MIC_TestMeasurementDone+0x54>)
 800885a:	2002      	movs	r0, #2
 800885c:	f005 f93a 	bl	800dad4 <CreateLine>
    ResetMICIndicator();
 8008860:	f004 fa42 	bl	800cce8 <ResetMICIndicator>
    return Check;
 8008864:	1dfb      	adds	r3, r7, #7
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	e000      	b.n	800886c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800886a:	2300      	movs	r3, #0
}
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b002      	add	sp, #8
 8008872:	bd80      	pop	{r7, pc}
 8008874:	200012b7 	.word	0x200012b7
 8008878:	08023910 	.word	0x08023910
 800887c:	0802393c 	.word	0x0802393c
 8008880:	200012b8 	.word	0x200012b8
 8008884:	08023940 	.word	0x08023940

08008888 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800888e:	4b78      	ldr	r3, [pc, #480]	@ (8008a70 <Mic_Upkeep+0x1e8>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d100      	bne.n	8008898 <Mic_Upkeep+0x10>
 8008896:	e0b8      	b.n	8008a0a <Mic_Upkeep+0x182>
 8008898:	dd00      	ble.n	800889c <Mic_Upkeep+0x14>
 800889a:	e0d3      	b.n	8008a44 <Mic_Upkeep+0x1bc>
 800889c:	2b02      	cmp	r3, #2
 800889e:	d037      	beq.n	8008910 <Mic_Upkeep+0x88>
 80088a0:	dd00      	ble.n	80088a4 <Mic_Upkeep+0x1c>
 80088a2:	e0cf      	b.n	8008a44 <Mic_Upkeep+0x1bc>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <Mic_Upkeep+0x26>
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d014      	beq.n	80088d6 <Mic_Upkeep+0x4e>
 80088ac:	e0ca      	b.n	8008a44 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 80088ae:	2001      	movs	r0, #1
 80088b0:	f003 fa82 	bl	800bdb8 <enableMicrophone>
 80088b4:	0003      	movs	r3, r0
 80088b6:	001a      	movs	r2, r3
 80088b8:	2301      	movs	r3, #1
 80088ba:	4053      	eors	r3, r2
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 80088c2:	4a6c      	ldr	r2, [pc, #432]	@ (8008a74 <Mic_Upkeep+0x1ec>)
 80088c4:	4b6c      	ldr	r3, [pc, #432]	@ (8008a78 <Mic_Upkeep+0x1f0>)
 80088c6:	217c      	movs	r1, #124	@ 0x7c
 80088c8:	0018      	movs	r0, r3
 80088ca:	f005 f9bb 	bl	800dc44 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 80088ce:	4b68      	ldr	r3, [pc, #416]	@ (8008a70 <Mic_Upkeep+0x1e8>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	701a      	strb	r2, [r3, #0]
    break;
 80088d4:	e0c5      	b.n	8008a62 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 80088d6:	f003 fa4b 	bl	800bd70 <micSettlingComplete>
 80088da:	1e03      	subs	r3, r0, #0
 80088dc:	d105      	bne.n	80088ea <Mic_Upkeep+0x62>
 80088de:	4b67      	ldr	r3, [pc, #412]	@ (8008a7c <Mic_Upkeep+0x1f4>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d100      	bne.n	80088ea <Mic_Upkeep+0x62>
 80088e8:	e0b6      	b.n	8008a58 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 80088ea:	f003 facf 	bl	800be8c <startSPLcalculation>
 80088ee:	0003      	movs	r3, r0
 80088f0:	001a      	movs	r2, r3
 80088f2:	2301      	movs	r3, #1
 80088f4:	4053      	eors	r3, r2
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80088fc:	4a5d      	ldr	r2, [pc, #372]	@ (8008a74 <Mic_Upkeep+0x1ec>)
 80088fe:	4b5e      	ldr	r3, [pc, #376]	@ (8008a78 <Mic_Upkeep+0x1f0>)
 8008900:	2185      	movs	r1, #133	@ 0x85
 8008902:	0018      	movs	r0, r3
 8008904:	f005 f99e 	bl	800dc44 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008908:	4b59      	ldr	r3, [pc, #356]	@ (8008a70 <Mic_Upkeep+0x1e8>)
 800890a:	2202      	movs	r2, #2
 800890c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800890e:	e0a3      	b.n	8008a58 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008910:	4b5b      	ldr	r3, [pc, #364]	@ (8008a80 <Mic_Upkeep+0x1f8>)
 8008912:	2201      	movs	r2, #1
 8008914:	2101      	movs	r1, #1
 8008916:	0018      	movs	r0, r3
 8008918:	f003 f90c 	bl	800bb34 <getSoundData>
 800891c:	1e03      	subs	r3, r0, #0
 800891e:	d100      	bne.n	8008922 <Mic_Upkeep+0x9a>
 8008920:	e09c      	b.n	8008a5c <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008922:	f003 fa05 	bl	800bd30 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008926:	4b56      	ldr	r3, [pc, #344]	@ (8008a80 <Mic_Upkeep+0x1f8>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	001a      	movs	r2, r3
 800892c:	4b54      	ldr	r3, [pc, #336]	@ (8008a80 <Mic_Upkeep+0x1f8>)
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	4954      	ldr	r1, [pc, #336]	@ (8008a84 <Mic_Upkeep+0x1fc>)
 8008932:	0038      	movs	r0, r7
 8008934:	f016 fe38 	bl	801f5a8 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008938:	4b51      	ldr	r3, [pc, #324]	@ (8008a80 <Mic_Upkeep+0x1f8>)
 800893a:	89db      	ldrh	r3, [r3, #14]
 800893c:	001a      	movs	r2, r3
 800893e:	4b50      	ldr	r3, [pc, #320]	@ (8008a80 <Mic_Upkeep+0x1f8>)
 8008940:	7c1b      	ldrb	r3, [r3, #16]
 8008942:	4951      	ldr	r1, [pc, #324]	@ (8008a88 <Mic_Upkeep+0x200>)
 8008944:	4851      	ldr	r0, [pc, #324]	@ (8008a8c <Mic_Upkeep+0x204>)
 8008946:	f016 fe2f 	bl	801f5a8 <siprintf>
      dBValue = atof(dBbuffer);
 800894a:	003b      	movs	r3, r7
 800894c:	0018      	movs	r0, r3
 800894e:	f015 f9db 	bl	801dd08 <atof>
 8008952:	0002      	movs	r2, r0
 8008954:	000b      	movs	r3, r1
 8008956:	0010      	movs	r0, r2
 8008958:	0019      	movs	r1, r3
 800895a:	f7fa fdcb 	bl	80034f4 <__aeabi_d2f>
 800895e:	1c02      	adds	r2, r0, #0
 8008960:	4b4b      	ldr	r3, [pc, #300]	@ (8008a90 <Mic_Upkeep+0x208>)
 8008962:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008964:	4b4a      	ldr	r3, [pc, #296]	@ (8008a90 <Mic_Upkeep+0x208>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	494a      	ldr	r1, [pc, #296]	@ (8008a94 <Mic_Upkeep+0x20c>)
 800896a:	1c18      	adds	r0, r3, #0
 800896c:	f7f8 fb18 	bl	8000fa0 <__aeabi_fmul>
 8008970:	1c03      	adds	r3, r0, #0
 8008972:	1c18      	adds	r0, r3, #0
 8008974:	f7fa fd76 	bl	8003464 <__aeabi_f2d>
 8008978:	2200      	movs	r2, #0
 800897a:	4b47      	ldr	r3, [pc, #284]	@ (8008a98 <Mic_Upkeep+0x210>)
 800897c:	f7f8 feb6 	bl	80016ec <__aeabi_dadd>
 8008980:	0002      	movs	r2, r0
 8008982:	000b      	movs	r3, r1
 8008984:	0010      	movs	r0, r2
 8008986:	0019      	movs	r1, r3
 8008988:	f7fa fcde 	bl	8003348 <__aeabi_d2iz>
 800898c:	0003      	movs	r3, r0
 800898e:	0018      	movs	r0, r3
 8008990:	f7fa fd16 	bl	80033c0 <__aeabi_i2d>
 8008994:	2200      	movs	r2, #0
 8008996:	4b41      	ldr	r3, [pc, #260]	@ (8008a9c <Mic_Upkeep+0x214>)
 8008998:	f7f9 fa0c 	bl	8001db4 <__aeabi_ddiv>
 800899c:	0002      	movs	r2, r0
 800899e:	000b      	movs	r3, r1
 80089a0:	0010      	movs	r0, r2
 80089a2:	0019      	movs	r1, r3
 80089a4:	f7fa fda6 	bl	80034f4 <__aeabi_d2f>
 80089a8:	1c02      	adds	r2, r0, #0
 80089aa:	4b39      	ldr	r3, [pc, #228]	@ (8008a90 <Mic_Upkeep+0x208>)
 80089ac:	601a      	str	r2, [r3, #0]
      MIC_Print();
 80089ae:	f7ff fdd5 	bl	800855c <MIC_Print>
      if (!startSPLcalculation()) {
 80089b2:	f003 fa6b 	bl	800be8c <startSPLcalculation>
 80089b6:	0003      	movs	r3, r0
 80089b8:	001a      	movs	r2, r3
 80089ba:	2301      	movs	r3, #1
 80089bc:	4053      	eors	r3, r2
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 80089c4:	4a2b      	ldr	r2, [pc, #172]	@ (8008a74 <Mic_Upkeep+0x1ec>)
 80089c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008a78 <Mic_Upkeep+0x1f0>)
 80089c8:	2195      	movs	r1, #149	@ 0x95
 80089ca:	0018      	movs	r0, r3
 80089cc:	f005 f93a 	bl	800dc44 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 80089d0:	2000      	movs	r0, #0
 80089d2:	f003 f9f1 	bl	800bdb8 <enableMicrophone>
 80089d6:	0003      	movs	r3, r0
 80089d8:	001a      	movs	r2, r3
 80089da:	2301      	movs	r3, #1
 80089dc:	4053      	eors	r3, r2
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 80089e4:	4a23      	ldr	r2, [pc, #140]	@ (8008a74 <Mic_Upkeep+0x1ec>)
 80089e6:	4b24      	ldr	r3, [pc, #144]	@ (8008a78 <Mic_Upkeep+0x1f0>)
 80089e8:	2198      	movs	r1, #152	@ 0x98
 80089ea:	0018      	movs	r0, r3
 80089ec:	f005 f92a 	bl	800dc44 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 80089f0:	f005 fcc6 	bl	800e380 <HAL_GetTick>
 80089f4:	0003      	movs	r3, r0
 80089f6:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa0 <Mic_Upkeep+0x218>)
 80089f8:	189a      	adds	r2, r3, r2
 80089fa:	4b2a      	ldr	r3, [pc, #168]	@ (8008aa4 <Mic_Upkeep+0x21c>)
 80089fc:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80089fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008a70 <Mic_Upkeep+0x1e8>)
 8008a00:	2203      	movs	r2, #3
 8008a02:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008a04:	f004 f970 	bl	800cce8 <ResetMICIndicator>
    }
    break;
 8008a08:	e028      	b.n	8008a5c <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008a0a:	4b26      	ldr	r3, [pc, #152]	@ (8008aa4 <Mic_Upkeep+0x21c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f005 f80a 	bl	800da28 <TimestampIsReached>
 8008a14:	1e03      	subs	r3, r0, #0
 8008a16:	d023      	beq.n	8008a60 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008a18:	2001      	movs	r0, #1
 8008a1a:	f003 f9cd 	bl	800bdb8 <enableMicrophone>
 8008a1e:	0003      	movs	r3, r0
 8008a20:	001a      	movs	r2, r3
 8008a22:	2301      	movs	r3, #1
 8008a24:	4053      	eors	r3, r2
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008a2c:	4a11      	ldr	r2, [pc, #68]	@ (8008a74 <Mic_Upkeep+0x1ec>)
 8008a2e:	4b12      	ldr	r3, [pc, #72]	@ (8008a78 <Mic_Upkeep+0x1f0>)
 8008a30:	21a3      	movs	r1, #163	@ 0xa3
 8008a32:	0018      	movs	r0, r3
 8008a34:	f005 f906 	bl	800dc44 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008a38:	4b0d      	ldr	r3, [pc, #52]	@ (8008a70 <Mic_Upkeep+0x1e8>)
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008a3e:	f004 f921 	bl	800cc84 <SetMICIndicator>
    }
    break;
 8008a42:	e00d      	b.n	8008a60 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008a44:	4a18      	ldr	r2, [pc, #96]	@ (8008aa8 <Mic_Upkeep+0x220>)
 8008a46:	4b19      	ldr	r3, [pc, #100]	@ (8008aac <Mic_Upkeep+0x224>)
 8008a48:	0019      	movs	r1, r3
 8008a4a:	2003      	movs	r0, #3
 8008a4c:	f005 f842 	bl	800dad4 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008a50:	4b07      	ldr	r3, [pc, #28]	@ (8008a70 <Mic_Upkeep+0x1e8>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
    break;
 8008a56:	e004      	b.n	8008a62 <Mic_Upkeep+0x1da>
    break;
 8008a58:	46c0      	nop			@ (mov r8, r8)
 8008a5a:	e002      	b.n	8008a62 <Mic_Upkeep+0x1da>
    break;
 8008a5c:	46c0      	nop			@ (mov r8, r8)
 8008a5e:	e000      	b.n	8008a62 <Mic_Upkeep+0x1da>
    break;
 8008a60:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008a62:	4b03      	ldr	r3, [pc, #12]	@ (8008a70 <Mic_Upkeep+0x1e8>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
}
 8008a66:	0018      	movs	r0, r3
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	b002      	add	sp, #8
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	46c0      	nop			@ (mov r8, r8)
 8008a70:	20000fa2 	.word	0x20000fa2
 8008a74:	08023958 	.word	0x08023958
 8008a78:	08024804 	.word	0x08024804
 8008a7c:	200012b7 	.word	0x200012b7
 8008a80:	20000f90 	.word	0x20000f90
 8008a84:	08023974 	.word	0x08023974
 8008a88:	0802397c 	.word	0x0802397c
 8008a8c:	20000f40 	.word	0x20000f40
 8008a90:	20000f80 	.word	0x20000f80
 8008a94:	42c80000 	.word	0x42c80000
 8008a98:	3fe00000 	.word	0x3fe00000
 8008a9c:	40590000 	.word	0x40590000
 8008aa0:	000002f3 	.word	0x000002f3
 8008aa4:	20000f8c 	.word	0x20000f8c
 8008aa8:	08023984 	.word	0x08023984
 8008aac:	080239a4 	.word	0x080239a4

08008ab0 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008ab0:	b40f      	push	{r0, r1, r2, r3}
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008ab8:	2314      	movs	r3, #20
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	2180      	movs	r1, #128	@ 0x80
 8008ac4:	0089      	lsls	r1, r1, #2
 8008ac6:	480a      	ldr	r0, [pc, #40]	@ (8008af0 <print+0x40>)
 8008ac8:	f016 fe06 	bl	801f6d8 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008acc:	4b08      	ldr	r3, [pc, #32]	@ (8008af0 <print+0x40>)
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7f7 fb4c 	bl	800016c <strlen>
 8008ad4:	0003      	movs	r3, r0
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	4b05      	ldr	r3, [pc, #20]	@ (8008af0 <print+0x40>)
 8008ada:	0011      	movs	r1, r2
 8008adc:	0018      	movs	r0, r3
 8008ade:	f7ff f9e1 	bl	8007ea4 <printString>
}
 8008ae2:	46c0      	nop			@ (mov r8, r8)
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	b002      	add	sp, #8
 8008ae8:	bc80      	pop	{r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	b004      	add	sp, #16
 8008aee:	4718      	bx	r3
 8008af0:	20000fa4 	.word	0x20000fa4

08008af4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	0018      	movs	r0, r3
 8008afe:	2314      	movs	r3, #20
 8008b00:	001a      	movs	r2, r3
 8008b02:	2100      	movs	r1, #0
 8008b04:	f016 fe94 	bl	801f830 <memset>
  RTC_DateTypeDef sDate = {0};
 8008b08:	003b      	movs	r3, r7
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b10:	4a2e      	ldr	r2, [pc, #184]	@ (8008bcc <MX_RTC_Init+0xd8>)
 8008b12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008b14:	4b2c      	ldr	r3, [pc, #176]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b1c:	227f      	movs	r2, #127	@ 0x7f
 8008b1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008b20:	4b29      	ldr	r3, [pc, #164]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b22:	22ff      	movs	r2, #255	@ 0xff
 8008b24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008b26:	4b28      	ldr	r3, [pc, #160]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008b2c:	4b26      	ldr	r3, [pc, #152]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008b32:	4b25      	ldr	r3, [pc, #148]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008b38:	4b23      	ldr	r3, [pc, #140]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008b3e:	4b22      	ldr	r3, [pc, #136]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b40:	0018      	movs	r0, r3
 8008b42:	f00c fca1 	bl	8015488 <HAL_RTC_Init>
 8008b46:	1e03      	subs	r3, r0, #0
 8008b48:	d001      	beq.n	8008b4e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008b4a:	f7ff fa6b 	bl	8008024 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008b4e:	1d3b      	adds	r3, r7, #4
 8008b50:	220d      	movs	r2, #13
 8008b52:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008b54:	1d3b      	adds	r3, r7, #4
 8008b56:	2200      	movs	r2, #0
 8008b58:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008b5a:	1d3b      	adds	r3, r7, #4
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008b60:	1d3b      	adds	r3, r7, #4
 8008b62:	2200      	movs	r2, #0
 8008b64:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008b66:	1d3b      	adds	r3, r7, #4
 8008b68:	2200      	movs	r2, #0
 8008b6a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008b6c:	1d39      	adds	r1, r7, #4
 8008b6e:	4b16      	ldr	r3, [pc, #88]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	0018      	movs	r0, r3
 8008b74:	f00c fd24 	bl	80155c0 <HAL_RTC_SetTime>
 8008b78:	1e03      	subs	r3, r0, #0
 8008b7a:	d001      	beq.n	8008b80 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008b7c:	f7ff fa52 	bl	8008024 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008b80:	003b      	movs	r3, r7
 8008b82:	2206      	movs	r2, #6
 8008b84:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008b86:	003b      	movs	r3, r7
 8008b88:	2211      	movs	r2, #17
 8008b8a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008b8c:	003b      	movs	r3, r7
 8008b8e:	2217      	movs	r2, #23
 8008b90:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008b92:	003b      	movs	r3, r7
 8008b94:	2218      	movs	r2, #24
 8008b96:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008b98:	0039      	movs	r1, r7
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	f00c fe16 	bl	80157d0 <HAL_RTC_SetDate>
 8008ba4:	1e03      	subs	r3, r0, #0
 8008ba6:	d001      	beq.n	8008bac <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008ba8:	f7ff fa3c 	bl	8008024 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <MX_RTC_Init+0xd4>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f00c ffc6 	bl	8015b44 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008bb8:	1e03      	subs	r3, r0, #0
 8008bba:	d001      	beq.n	8008bc0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008bbc:	f7ff fa32 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008bc0:	46c0      	nop			@ (mov r8, r8)
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	b006      	add	sp, #24
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	200011a4 	.word	0x200011a4
 8008bcc:	40002800 	.word	0x40002800

08008bd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8008c08 <HAL_RTC_MspInit+0x38>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d10e      	bne.n	8008c00 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008be2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <HAL_RTC_MspInit+0x3c>)
 8008be4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008be6:	4b09      	ldr	r3, [pc, #36]	@ (8008c0c <HAL_RTC_MspInit+0x3c>)
 8008be8:	2180      	movs	r1, #128	@ 0x80
 8008bea:	02c9      	lsls	r1, r1, #11
 8008bec:	430a      	orrs	r2, r1
 8008bee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	2002      	movs	r0, #2
 8008bf6:	f006 f867 	bl	800ecc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008bfa:	2002      	movs	r0, #2
 8008bfc:	f006 f879 	bl	800ecf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008c00:	46c0      	nop			@ (mov r8, r8)
 8008c02:	46bd      	mov	sp, r7
 8008c04:	b002      	add	sp, #8
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40002800 	.word	0x40002800
 8008c0c:	40021000 	.word	0x40021000

08008c10 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008c18:	f005 fbb2 	bl	800e380 <HAL_GetTick>
 8008c1c:	0002      	movs	r2, r0
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	18d2      	adds	r2, r2, r3
 8008c22:	4b03      	ldr	r3, [pc, #12]	@ (8008c30 <setsen5xReadTimer+0x20>)
 8008c24:	601a      	str	r2, [r3, #0]
}
 8008c26:	46c0      	nop			@ (mov r8, r8)
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	b002      	add	sp, #8
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	46c0      	nop			@ (mov r8, r8)
 8008c30:	200011cc 	.word	0x200011cc

08008c34 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8008c3c:	f7ff fa18 	bl	8008070 <IsPMSensorEnabled>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d033      	beq.n	8008cac <sen5x_enable+0x78>
    Debug("sen5x measurement is enabled");
 8008c44:	4a21      	ldr	r2, [pc, #132]	@ (8008ccc <sen5x_enable+0x98>)
 8008c46:	4b22      	ldr	r3, [pc, #136]	@ (8008cd0 <sen5x_enable+0x9c>)
 8008c48:	0019      	movs	r1, r3
 8008c4a:	2003      	movs	r0, #3
 8008c4c:	f004 ff42 	bl	800dad4 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8008c50:	4b20      	ldr	r3, [pc, #128]	@ (8008cd4 <sen5x_enable+0xa0>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	1e5a      	subs	r2, r3, #1
 8008c56:	4193      	sbcs	r3, r2
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	4053      	eors	r3, r2
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	1c1a      	adds	r2, r3, #0
 8008c62:	2301      	movs	r3, #1
 8008c64:	4013      	ands	r3, r2
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd4 <sen5x_enable+0xa0>)
 8008c6a:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008c6c:	4b19      	ldr	r3, [pc, #100]	@ (8008cd4 <sen5x_enable+0xa0>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00a      	beq.n	8008c8a <sen5x_enable+0x56>
      setsen5xReadTimer(0);
 8008c74:	2000      	movs	r0, #0
 8008c76:	f7ff ffcb 	bl	8008c10 <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 8008c7a:	4b16      	ldr	r3, [pc, #88]	@ (8008cd4 <sen5x_enable+0xa0>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	4a16      	ldr	r2, [pc, #88]	@ (8008cd8 <sen5x_enable+0xa4>)
 8008c80:	4913      	ldr	r1, [pc, #76]	@ (8008cd0 <sen5x_enable+0x9c>)
 8008c82:	2003      	movs	r0, #3
 8008c84:	f004 ff26 	bl	800dad4 <CreateLine>
 8008c88:	e016      	b.n	8008cb8 <sen5x_enable+0x84>
    }
    else {
      Debug("This cycle the sen5x is disabled");
 8008c8a:	4a14      	ldr	r2, [pc, #80]	@ (8008cdc <sen5x_enable+0xa8>)
 8008c8c:	4b10      	ldr	r3, [pc, #64]	@ (8008cd0 <sen5x_enable+0x9c>)
 8008c8e:	0019      	movs	r1, r3
 8008c90:	2003      	movs	r0, #3
 8008c92:	f004 ff1f 	bl	800dad4 <CreateLine>
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008c96:	f005 fb73 	bl	800e380 <HAL_GetTick>
 8008c9a:	0002      	movs	r2, r0
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4910      	ldr	r1, [pc, #64]	@ (8008ce0 <sen5x_enable+0xac>)
 8008ca0:	434b      	muls	r3, r1
 8008ca2:	18d3      	adds	r3, r2, r3
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7ff ffb3 	bl	8008c10 <setsen5xReadTimer>
 8008caa:	e005      	b.n	8008cb8 <sen5x_enable+0x84>
    }
  }
  else {
    Debug("sen5x measurement is disabled");
 8008cac:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce4 <sen5x_enable+0xb0>)
 8008cae:	4b08      	ldr	r3, [pc, #32]	@ (8008cd0 <sen5x_enable+0x9c>)
 8008cb0:	0019      	movs	r1, r3
 8008cb2:	2003      	movs	r0, #3
 8008cb4:	f004 ff0e 	bl	800dad4 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce8 <sen5x_enable+0xb4>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008cbe:	4b05      	ldr	r3, [pc, #20]	@ (8008cd4 <sen5x_enable+0xa0>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
}
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b002      	add	sp, #8
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	080239a8 	.word	0x080239a8
 8008cd0:	080239c8 	.word	0x080239c8
 8008cd4:	200011ca 	.word	0x200011ca
 8008cd8:	080239cc 	.word	0x080239cc
 8008cdc:	080239ec 	.word	0x080239ec
 8008ce0:	00000bb8 	.word	0x00000bb8
 8008ce4:	08023a10 	.word	0x08023a10
 8008ce8:	20000081 	.word	0x20000081

08008cec <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008d1c <sen5x_Power_On+0x30>)
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <sen5x_Power_On+0x34>)
 8008cf4:	0019      	movs	r1, r3
 8008cf6:	2003      	movs	r0, #3
 8008cf8:	f004 feec 	bl	800dad4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	015b      	lsls	r3, r3, #5
 8008d00:	4808      	ldr	r0, [pc, #32]	@ (8008d24 <sen5x_Power_On+0x38>)
 8008d02:	2201      	movs	r2, #1
 8008d04:	0019      	movs	r1, r3
 8008d06:	f006 fdcc 	bl	800f8a2 <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008d0a:	4b07      	ldr	r3, [pc, #28]	@ (8008d28 <sen5x_Power_On+0x3c>)
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 8008d10:	2037      	movs	r0, #55	@ 0x37
 8008d12:	f005 fb3f 	bl	800e394 <HAL_Delay>
  return;
 8008d16:	46c0      	nop			@ (mov r8, r8)
}
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	08023a30 	.word	0x08023a30
 8008d20:	080239c8 	.word	0x080239c8
 8008d24:	50000800 	.word	0x50000800
 8008d28:	200011c9 	.word	0x200011c9

08008d2c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008d30:	4a09      	ldr	r2, [pc, #36]	@ (8008d58 <sen5x_Power_Off+0x2c>)
 8008d32:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <sen5x_Power_Off+0x30>)
 8008d34:	0019      	movs	r1, r3
 8008d36:	2003      	movs	r0, #3
 8008d38:	f004 fecc 	bl	800dad4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008d3c:	2380      	movs	r3, #128	@ 0x80
 8008d3e:	015b      	lsls	r3, r3, #5
 8008d40:	4807      	ldr	r0, [pc, #28]	@ (8008d60 <sen5x_Power_Off+0x34>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	0019      	movs	r1, r3
 8008d46:	f006 fdac 	bl	800f8a2 <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008d4a:	4b06      	ldr	r3, [pc, #24]	@ (8008d64 <sen5x_Power_Off+0x38>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	701a      	strb	r2, [r3, #0]
  return;
 8008d50:	46c0      	nop			@ (mov r8, r8)
}
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	46c0      	nop			@ (mov r8, r8)
 8008d58:	08023a4c 	.word	0x08023a4c
 8008d5c:	080239c8 	.word	0x080239c8
 8008d60:	50000800 	.word	0x50000800
 8008d64:	200011c9 	.word	0x200011c9

08008d68 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008d6c:	4b02      	ldr	r3, [pc, #8]	@ (8008d78 <reset_fanCleaningDone+0x10>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
}
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	200011c8 	.word	0x200011c8

08008d7c <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d7e:	b09b      	sub	sp, #108	@ 0x6c
 8008d80:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008d82:	2456      	movs	r4, #86	@ 0x56
 8008d84:	193b      	adds	r3, r7, r4
 8008d86:	2200      	movs	r2, #0
 8008d88:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008d8a:	2355      	movs	r3, #85	@ 0x55
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	2220      	movs	r2, #32
 8008d90:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 8008d92:	2354      	movs	r3, #84	@ 0x54
 8008d94:	18fb      	adds	r3, r7, r3
 8008d96:	2220      	movs	r2, #32
 8008d98:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008d9a:	f7ff ffa7 	bl	8008cec <sen5x_Power_On>
  error = sen5x_device_reset();
 8008d9e:	0025      	movs	r5, r4
 8008da0:	193c      	adds	r4, r7, r4
 8008da2:	f001 f819 	bl	8009dd8 <sen5x_device_reset>
 8008da6:	0003      	movs	r3, r0
 8008da8:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008daa:	002c      	movs	r4, r5
 8008dac:	193b      	adds	r3, r7, r4
 8008dae:	2200      	movs	r2, #0
 8008db0:	5e9b      	ldrsh	r3, [r3, r2]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008db6:	193b      	adds	r3, r7, r4
 8008db8:	2200      	movs	r2, #0
 8008dba:	5e9b      	ldrsh	r3, [r3, r2]
 8008dbc:	4a6d      	ldr	r2, [pc, #436]	@ (8008f74 <probe_sen5x+0x1f8>)
 8008dbe:	496e      	ldr	r1, [pc, #440]	@ (8008f78 <probe_sen5x+0x1fc>)
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f004 fe87 	bl	800dad4 <CreateLine>
      return error;
 8008dc6:	193b      	adds	r3, r7, r4
 8008dc8:	2200      	movs	r2, #0
 8008dca:	5e9b      	ldrsh	r3, [r3, r2]
 8008dcc:	e0ce      	b.n	8008f6c <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008dce:	2556      	movs	r5, #86	@ 0x56
 8008dd0:	197c      	adds	r4, r7, r5
 8008dd2:	2355      	movs	r3, #85	@ 0x55
 8008dd4:	18fb      	adds	r3, r7, r3
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	232c      	movs	r3, #44	@ 0x2c
 8008dda:	18fb      	adds	r3, r7, r3
 8008ddc:	0011      	movs	r1, r2
 8008dde:	0018      	movs	r0, r3
 8008de0:	f000 fee6 	bl	8009bb0 <sen5x_get_serial_number>
 8008de4:	0003      	movs	r3, r0
 8008de6:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008de8:	197b      	adds	r3, r7, r5
 8008dea:	2200      	movs	r2, #0
 8008dec:	5e9b      	ldrsh	r3, [r3, r2]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008df2:	197b      	adds	r3, r7, r5
 8008df4:	2200      	movs	r2, #0
 8008df6:	5e9a      	ldrsh	r2, [r3, r2]
 8008df8:	4b60      	ldr	r3, [pc, #384]	@ (8008f7c <probe_sen5x+0x200>)
 8008dfa:	0011      	movs	r1, r2
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f016 fb63 	bl	801f4c8 <iprintf>
      return error;
 8008e02:	197b      	adds	r3, r7, r5
 8008e04:	2200      	movs	r2, #0
 8008e06:	5e9b      	ldrsh	r3, [r3, r2]
 8008e08:	e0b0      	b.n	8008f6c <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008e0a:	232c      	movs	r3, #44	@ 0x2c
 8008e0c:	18fa      	adds	r2, r7, r3
 8008e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8008f80 <probe_sen5x+0x204>)
 8008e10:	0011      	movs	r1, r2
 8008e12:	0018      	movs	r0, r3
 8008e14:	f016 fb58 	bl	801f4c8 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008e18:	2556      	movs	r5, #86	@ 0x56
 8008e1a:	197c      	adds	r4, r7, r5
 8008e1c:	2354      	movs	r3, #84	@ 0x54
 8008e1e:	18fb      	adds	r3, r7, r3
 8008e20:	781a      	ldrb	r2, [r3, #0]
 8008e22:	230c      	movs	r3, #12
 8008e24:	18fb      	adds	r3, r7, r3
 8008e26:	0011      	movs	r1, r2
 8008e28:	0018      	movs	r0, r3
 8008e2a:	f000 fe6b 	bl	8009b04 <sen5x_get_product_name>
 8008e2e:	0003      	movs	r3, r0
 8008e30:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008e32:	197b      	adds	r3, r7, r5
 8008e34:	2200      	movs	r2, #0
 8008e36:	5e9b      	ldrsh	r3, [r3, r2]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008e3c:	197b      	adds	r3, r7, r5
 8008e3e:	2200      	movs	r2, #0
 8008e40:	5e9a      	ldrsh	r2, [r3, r2]
 8008e42:	4b50      	ldr	r3, [pc, #320]	@ (8008f84 <probe_sen5x+0x208>)
 8008e44:	0011      	movs	r1, r2
 8008e46:	0018      	movs	r0, r3
 8008e48:	f016 fb3e 	bl	801f4c8 <iprintf>
      return error;
 8008e4c:	197b      	adds	r3, r7, r5
 8008e4e:	2200      	movs	r2, #0
 8008e50:	5e9b      	ldrsh	r3, [r3, r2]
 8008e52:	e08b      	b.n	8008f6c <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008e54:	230c      	movs	r3, #12
 8008e56:	18fa      	adds	r2, r7, r3
 8008e58:	4b4b      	ldr	r3, [pc, #300]	@ (8008f88 <probe_sen5x+0x20c>)
 8008e5a:	0011      	movs	r1, r2
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f016 fb33 	bl	801f4c8 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008e62:	2656      	movs	r6, #86	@ 0x56
 8008e64:	19bc      	adds	r4, r7, r6
 8008e66:	2308      	movs	r3, #8
 8008e68:	18fd      	adds	r5, r7, r3
 8008e6a:	2309      	movs	r3, #9
 8008e6c:	18fa      	adds	r2, r7, r3
 8008e6e:	230a      	movs	r3, #10
 8008e70:	18f9      	adds	r1, r7, r3
 8008e72:	230b      	movs	r3, #11
 8008e74:	18f8      	adds	r0, r7, r3
 8008e76:	1d7b      	adds	r3, r7, #5
 8008e78:	9302      	str	r3, [sp, #8]
 8008e7a:	1dbb      	adds	r3, r7, #6
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	1dfb      	adds	r3, r7, #7
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	002b      	movs	r3, r5
 8008e84:	f000 feea 	bl	8009c5c <sen5x_get_version>
 8008e88:	0003      	movs	r3, r0
 8008e8a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008e8c:	19bb      	adds	r3, r7, r6
 8008e8e:	2200      	movs	r2, #0
 8008e90:	5e9b      	ldrsh	r3, [r3, r2]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008e96:	19bb      	adds	r3, r7, r6
 8008e98:	2200      	movs	r2, #0
 8008e9a:	5e9a      	ldrsh	r2, [r3, r2]
 8008e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f8c <probe_sen5x+0x210>)
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f016 fb11 	bl	801f4c8 <iprintf>
      return error;
 8008ea6:	19bb      	adds	r3, r7, r6
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	5e9b      	ldrsh	r3, [r3, r2]
 8008eac:	e05e      	b.n	8008f6c <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008eae:	230b      	movs	r3, #11
 8008eb0:	18fb      	adds	r3, r7, r3
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	001a      	movs	r2, r3
 8008ebe:	2308      	movs	r3, #8
 8008ec0:	18fb      	adds	r3, r7, r3
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	001c      	movs	r4, r3
 8008ec6:	1dfb      	adds	r3, r7, #7
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	4831      	ldr	r0, [pc, #196]	@ (8008f90 <probe_sen5x+0x214>)
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	0023      	movs	r3, r4
 8008ed0:	f016 fafa 	bl	801f4c8 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008ed8:	264e      	movs	r6, #78	@ 0x4e
 8008eda:	19bb      	adds	r3, r7, r6
 8008edc:	2200      	movs	r2, #0
 8008ede:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008ee0:	234c      	movs	r3, #76	@ 0x4c
 8008ee2:	18fb      	adds	r3, r7, r3
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008ee8:	492a      	ldr	r1, [pc, #168]	@ (8008f94 <probe_sen5x+0x218>)
 8008eea:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008eec:	f7f8 f858 	bl	8000fa0 <__aeabi_fmul>
 8008ef0:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008ef2:	1c18      	adds	r0, r3, #0
 8008ef4:	f7f8 fb4c 	bl	8001590 <__aeabi_f2iz>
 8008ef8:	0003      	movs	r3, r0
 8008efa:	b218      	sxth	r0, r3
 8008efc:	2556      	movs	r5, #86	@ 0x56
 8008efe:	197c      	adds	r4, r7, r5
 8008f00:	234c      	movs	r3, #76	@ 0x4c
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	881a      	ldrh	r2, [r3, #0]
 8008f06:	19bb      	adds	r3, r7, r6
 8008f08:	2100      	movs	r1, #0
 8008f0a:	5e5b      	ldrsh	r3, [r3, r1]
 8008f0c:	0019      	movs	r1, r3
 8008f0e:	f000 fd95 	bl	8009a3c <sen5x_set_temperature_offset_parameters>
 8008f12:	0003      	movs	r3, r0
 8008f14:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008f16:	197b      	adds	r3, r7, r5
 8008f18:	2200      	movs	r2, #0
 8008f1a:	5e9b      	ldrsh	r3, [r3, r2]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008f20:	197b      	adds	r3, r7, r5
 8008f22:	2200      	movs	r2, #0
 8008f24:	5e9b      	ldrsh	r3, [r3, r2]
 8008f26:	4a1c      	ldr	r2, [pc, #112]	@ (8008f98 <probe_sen5x+0x21c>)
 8008f28:	4913      	ldr	r1, [pc, #76]	@ (8008f78 <probe_sen5x+0x1fc>)
 8008f2a:	2001      	movs	r0, #1
 8008f2c:	f004 fdd2 	bl	800dad4 <CreateLine>
      return error;
 8008f30:	197b      	adds	r3, r7, r5
 8008f32:	2200      	movs	r2, #0
 8008f34:	5e9b      	ldrsh	r3, [r3, r2]
 8008f36:	e019      	b.n	8008f6c <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008f38:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008f3a:	f7fa fa93 	bl	8003464 <__aeabi_f2d>
 8008f3e:	0002      	movs	r2, r0
 8008f40:	000b      	movs	r3, r1
 8008f42:	4816      	ldr	r0, [pc, #88]	@ (8008f9c <probe_sen5x+0x220>)
 8008f44:	4916      	ldr	r1, [pc, #88]	@ (8008fa0 <probe_sen5x+0x224>)
 8008f46:	9200      	str	r2, [sp, #0]
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	0002      	movs	r2, r0
 8008f4c:	2002      	movs	r0, #2
 8008f4e:	f004 fdc1 	bl	800dad4 <CreateLine>
  }
  sen5x_Power_Off();
 8008f52:	f7ff feeb 	bl	8008d2c <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008f56:	f005 fa13 	bl	800e380 <HAL_GetTick>
 8008f5a:	0003      	movs	r3, r0
 8008f5c:	4a11      	ldr	r2, [pc, #68]	@ (8008fa4 <probe_sen5x+0x228>)
 8008f5e:	189a      	adds	r2, r3, r2
 8008f60:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <probe_sen5x+0x22c>)
 8008f62:	601a      	str	r2, [r3, #0]
  return error;
 8008f64:	2356      	movs	r3, #86	@ 0x56
 8008f66:	18fb      	adds	r3, r7, r3
 8008f68:	2200      	movs	r2, #0
 8008f6a:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	b017      	add	sp, #92	@ 0x5c
 8008f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f74:	08023a68 	.word	0x08023a68
 8008f78:	08023a94 	.word	0x08023a94
 8008f7c:	08023a98 	.word	0x08023a98
 8008f80:	08023ac8 	.word	0x08023ac8
 8008f84:	08023adc 	.word	0x08023adc
 8008f88:	08023b0c 	.word	0x08023b0c
 8008f8c:	08023b20 	.word	0x08023b20
 8008f90:	08023b4c 	.word	0x08023b4c
 8008f94:	43480000 	.word	0x43480000
 8008f98:	08023b70 	.word	0x08023b70
 8008f9c:	08023bb0 	.word	0x08023bb0
 8008fa0:	08023be8 	.word	0x08023be8
 8008fa4:	000061a8 	.word	0x000061a8
 8008fa8:	200011cc 	.word	0x200011cc

08008fac <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8008fb2:	1dbb      	adds	r3, r7, #6
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement(); // start full measurement mode
 8008fb8:	1dbc      	adds	r4, r7, #6
 8008fba:	f000 fbcb 	bl	8009754 <sen5x_start_measurement>
 8008fbe:	0003      	movs	r3, r0
 8008fc0:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008fc2:	1dbb      	adds	r3, r7, #6
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	5e9b      	ldrsh	r3, [r3, r2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008fcc:	1dbb      	adds	r3, r7, #6
 8008fce:	2200      	movs	r2, #0
 8008fd0:	5e9b      	ldrsh	r3, [r3, r2]
 8008fd2:	4a06      	ldr	r2, [pc, #24]	@ (8008fec <sen5x_lightup_measurement+0x40>)
 8008fd4:	4906      	ldr	r1, [pc, #24]	@ (8008ff0 <sen5x_lightup_measurement+0x44>)
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	f004 fd7c 	bl	800dad4 <CreateLine>
  }
  return error;
 8008fdc:	1dbb      	adds	r3, r7, #6
 8008fde:	2200      	movs	r2, #0
 8008fe0:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	b003      	add	sp, #12
 8008fe8:	bd90      	pop	{r4, r7, pc}
 8008fea:	46c0      	nop			@ (mov r8, r8)
 8008fec:	08023bec 	.word	0x08023bec
 8008ff0:	08023a94 	.word	0x08023a94

08008ff4 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008ffa:	1dbb      	adds	r3, r7, #6
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8009000:	1dbc      	adds	r4, r7, #6
 8009002:	f000 fbd5 	bl	80097b0 <sen5x_stop_measurement>
 8009006:	0003      	movs	r3, r0
 8009008:	8023      	strh	r3, [r4, #0]
  if (error) {
 800900a:	1dbb      	adds	r3, r7, #6
 800900c:	2200      	movs	r2, #0
 800900e:	5e9b      	ldrsh	r3, [r3, r2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d007      	beq.n	8009024 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8009014:	1dbb      	adds	r3, r7, #6
 8009016:	2200      	movs	r2, #0
 8009018:	5e9b      	ldrsh	r3, [r3, r2]
 800901a:	4a06      	ldr	r2, [pc, #24]	@ (8009034 <sen5x_extinguish_measurement+0x40>)
 800901c:	4906      	ldr	r1, [pc, #24]	@ (8009038 <sen5x_extinguish_measurement+0x44>)
 800901e:	2001      	movs	r0, #1
 8009020:	f004 fd58 	bl	800dad4 <CreateLine>
  }
  return error;
 8009024:	1dbb      	adds	r3, r7, #6
 8009026:	2200      	movs	r2, #0
 8009028:	5e9b      	ldrsh	r3, [r3, r2]
}
 800902a:	0018      	movs	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	b003      	add	sp, #12
 8009030:	bd90      	pop	{r4, r7, pc}
 8009032:	46c0      	nop			@ (mov r8, r8)
 8009034:	08023c1c 	.word	0x08023c1c
 8009038:	08023a94 	.word	0x08023a94

0800903c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800903c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903e:	b08d      	sub	sp, #52	@ 0x34
 8009040:	af04      	add	r7, sp, #16
 8009042:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009044:	261e      	movs	r6, #30
 8009046:	19bb      	adds	r3, r7, r6
 8009048:	2200      	movs	r2, #0
 800904a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800904c:	19bc      	adds	r4, r7, r6
 800904e:	2316      	movs	r3, #22
 8009050:	18fd      	adds	r5, r7, r3
 8009052:	2318      	movs	r3, #24
 8009054:	18fa      	adds	r2, r7, r3
 8009056:	231a      	movs	r3, #26
 8009058:	18f9      	adds	r1, r7, r3
 800905a:	231c      	movs	r3, #28
 800905c:	18f8      	adds	r0, r7, r3
 800905e:	230e      	movs	r3, #14
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	9303      	str	r3, [sp, #12]
 8009064:	2310      	movs	r3, #16
 8009066:	18fb      	adds	r3, r7, r3
 8009068:	9302      	str	r3, [sp, #8]
 800906a:	2312      	movs	r3, #18
 800906c:	18fb      	adds	r3, r7, r3
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	2314      	movs	r3, #20
 8009072:	18fb      	adds	r3, r7, r3
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	002b      	movs	r3, r5
 8009078:	f000 fc1c 	bl	80098b4 <sen5x_read_measured_values>
 800907c:	0003      	movs	r3, r0
 800907e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009080:	19bb      	adds	r3, r7, r6
 8009082:	2200      	movs	r2, #0
 8009084:	5e9b      	ldrsh	r3, [r3, r2]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <sen5x_read_measurement+0x56>
    return error;
 800908a:	19bb      	adds	r3, r7, r6
 800908c:	2200      	movs	r2, #0
 800908e:	5e9b      	ldrsh	r3, [r3, r2]
 8009090:	e034      	b.n	80090fc <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009092:	231c      	movs	r3, #28
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	881a      	ldrh	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800909c:	211a      	movs	r1, #26
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	881a      	ldrh	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 80090a6:	2318      	movs	r3, #24
 80090a8:	18fb      	adds	r3, r7, r3
 80090aa:	881a      	ldrh	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 80090b0:	2016      	movs	r0, #22
 80090b2:	183b      	adds	r3, r7, r0
 80090b4:	881a      	ldrh	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 80090ba:	2314      	movs	r3, #20
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	2200      	movs	r2, #0
 80090c0:	5e9a      	ldrsh	r2, [r3, r2]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 80090c6:	2312      	movs	r3, #18
 80090c8:	18fb      	adds	r3, r7, r3
 80090ca:	2200      	movs	r2, #0
 80090cc:	5e9a      	ldrsh	r2, [r3, r2]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 80090d2:	2310      	movs	r3, #16
 80090d4:	18fb      	adds	r3, r7, r3
 80090d6:	2200      	movs	r2, #0
 80090d8:	5e9a      	ldrsh	r2, [r3, r2]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 80090de:	230e      	movs	r3, #14
 80090e0:	18fb      	adds	r3, r7, r3
 80090e2:	2200      	movs	r2, #0
 80090e4:	5e9a      	ldrsh	r2, [r3, r2]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 80090ea:	187b      	adds	r3, r7, r1
 80090ec:	881a      	ldrh	r2, [r3, #0]
 80090ee:	183b      	adds	r3, r7, r0
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	0019      	movs	r1, r3
 80090f4:	0010      	movs	r0, r2
 80090f6:	f7fa fc33 	bl	8003960 <setPMs>
  return 0;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b009      	add	sp, #36	@ 0x24
 8009102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009104 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 800910a:	1dbb      	adds	r3, r7, #6
 800910c:	2200      	movs	r2, #0
 800910e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
  if (sen5x_read_measurement(&sen5x_data)) {
 8009110:	4b77      	ldr	r3, [pc, #476]	@ (80092f0 <sen5x_measurement+0x1ec>)
 8009112:	0018      	movs	r0, r3
 8009114:	f7ff ff92 	bl	800903c <sen5x_read_measurement>
 8009118:	1e03      	subs	r3, r0, #0
 800911a:	d00b      	beq.n	8009134 <sen5x_measurement+0x30>
    Error("Error executing sen5x_read_measured_values(): %i", error);
 800911c:	1dbb      	adds	r3, r7, #6
 800911e:	2200      	movs	r2, #0
 8009120:	5e9b      	ldrsh	r3, [r3, r2]
 8009122:	4a74      	ldr	r2, [pc, #464]	@ (80092f4 <sen5x_measurement+0x1f0>)
 8009124:	4974      	ldr	r1, [pc, #464]	@ (80092f8 <sen5x_measurement+0x1f4>)
 8009126:	2001      	movs	r0, #1
 8009128:	f004 fcd4 	bl	800dad4 <CreateLine>
    return error;
 800912c:	1dbb      	adds	r3, r7, #6
 800912e:	2200      	movs	r2, #0
 8009130:	5e9b      	ldrsh	r3, [r3, r2]
 8009132:	e0d8      	b.n	80092e6 <sen5x_measurement+0x1e2>
  }
  if (sen5xSamples != 1) {
 8009134:	4b71      	ldr	r3, [pc, #452]	@ (80092fc <sen5x_measurement+0x1f8>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d001      	beq.n	8009140 <sen5x_measurement+0x3c>
    return 0; // first sample reads zero's
 800913c:	2300      	movs	r3, #0
 800913e:	e0d2      	b.n	80092e6 <sen5x_measurement+0x1e2>
  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 8009140:	4b6b      	ldr	r3, [pc, #428]	@ (80092f0 <sen5x_measurement+0x1ec>)
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	4a6e      	ldr	r2, [pc, #440]	@ (8009300 <sen5x_measurement+0x1fc>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <sen5x_measurement+0x6e>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800914a:	4b69      	ldr	r3, [pc, #420]	@ (80092f0 <sen5x_measurement+0x1ec>)
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	0018      	movs	r0, r3
 8009150:	f7f8 fa3e 	bl	80015d0 <__aeabi_i2f>
 8009154:	1c03      	adds	r3, r0, #0
 8009156:	496b      	ldr	r1, [pc, #428]	@ (8009304 <sen5x_measurement+0x200>)
 8009158:	1c18      	adds	r0, r3, #0
 800915a:	f7f7 fd3b 	bl	8000bd4 <__aeabi_fdiv>
 800915e:	1c03      	adds	r3, r0, #0
 8009160:	1c18      	adds	r0, r3, #0
 8009162:	f7fa f97f 	bl	8003464 <__aeabi_f2d>
 8009166:	0002      	movs	r2, r0
 8009168:	000b      	movs	r3, r1
 800916a:	4967      	ldr	r1, [pc, #412]	@ (8009308 <sen5x_measurement+0x204>)
 800916c:	0008      	movs	r0, r1
 800916e:	f016 f9ab 	bl	801f4c8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009172:	4b5f      	ldr	r3, [pc, #380]	@ (80092f0 <sen5x_measurement+0x1ec>)
 8009174:	885b      	ldrh	r3, [r3, #2]
 8009176:	4a62      	ldr	r2, [pc, #392]	@ (8009300 <sen5x_measurement+0x1fc>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d013      	beq.n	80091a4 <sen5x_measurement+0xa0>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800917c:	4b5c      	ldr	r3, [pc, #368]	@ (80092f0 <sen5x_measurement+0x1ec>)
 800917e:	885b      	ldrh	r3, [r3, #2]
 8009180:	0018      	movs	r0, r3
 8009182:	f7f8 fa25 	bl	80015d0 <__aeabi_i2f>
 8009186:	1c03      	adds	r3, r0, #0
 8009188:	495e      	ldr	r1, [pc, #376]	@ (8009304 <sen5x_measurement+0x200>)
 800918a:	1c18      	adds	r0, r3, #0
 800918c:	f7f7 fd22 	bl	8000bd4 <__aeabi_fdiv>
 8009190:	1c03      	adds	r3, r0, #0
 8009192:	1c18      	adds	r0, r3, #0
 8009194:	f7fa f966 	bl	8003464 <__aeabi_f2d>
 8009198:	0002      	movs	r2, r0
 800919a:	000b      	movs	r3, r1
 800919c:	495b      	ldr	r1, [pc, #364]	@ (800930c <sen5x_measurement+0x208>)
 800919e:	0008      	movs	r0, r1
 80091a0:	f016 f992 	bl	801f4c8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 80091a4:	4b52      	ldr	r3, [pc, #328]	@ (80092f0 <sen5x_measurement+0x1ec>)
 80091a6:	889b      	ldrh	r3, [r3, #4]
 80091a8:	4a55      	ldr	r2, [pc, #340]	@ (8009300 <sen5x_measurement+0x1fc>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d013      	beq.n	80091d6 <sen5x_measurement+0xd2>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 80091ae:	4b50      	ldr	r3, [pc, #320]	@ (80092f0 <sen5x_measurement+0x1ec>)
 80091b0:	889b      	ldrh	r3, [r3, #4]
 80091b2:	0018      	movs	r0, r3
 80091b4:	f7f8 fa0c 	bl	80015d0 <__aeabi_i2f>
 80091b8:	1c03      	adds	r3, r0, #0
 80091ba:	4952      	ldr	r1, [pc, #328]	@ (8009304 <sen5x_measurement+0x200>)
 80091bc:	1c18      	adds	r0, r3, #0
 80091be:	f7f7 fd09 	bl	8000bd4 <__aeabi_fdiv>
 80091c2:	1c03      	adds	r3, r0, #0
 80091c4:	1c18      	adds	r0, r3, #0
 80091c6:	f7fa f94d 	bl	8003464 <__aeabi_f2d>
 80091ca:	0002      	movs	r2, r0
 80091cc:	000b      	movs	r3, r1
 80091ce:	4950      	ldr	r1, [pc, #320]	@ (8009310 <sen5x_measurement+0x20c>)
 80091d0:	0008      	movs	r0, r1
 80091d2:	f016 f979 	bl	801f4c8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 80091d6:	4b46      	ldr	r3, [pc, #280]	@ (80092f0 <sen5x_measurement+0x1ec>)
 80091d8:	88db      	ldrh	r3, [r3, #6]
 80091da:	4a49      	ldr	r2, [pc, #292]	@ (8009300 <sen5x_measurement+0x1fc>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d013      	beq.n	8009208 <sen5x_measurement+0x104>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 80091e0:	4b43      	ldr	r3, [pc, #268]	@ (80092f0 <sen5x_measurement+0x1ec>)
 80091e2:	88db      	ldrh	r3, [r3, #6]
 80091e4:	0018      	movs	r0, r3
 80091e6:	f7f8 f9f3 	bl	80015d0 <__aeabi_i2f>
 80091ea:	1c03      	adds	r3, r0, #0
 80091ec:	4945      	ldr	r1, [pc, #276]	@ (8009304 <sen5x_measurement+0x200>)
 80091ee:	1c18      	adds	r0, r3, #0
 80091f0:	f7f7 fcf0 	bl	8000bd4 <__aeabi_fdiv>
 80091f4:	1c03      	adds	r3, r0, #0
 80091f6:	1c18      	adds	r0, r3, #0
 80091f8:	f7fa f934 	bl	8003464 <__aeabi_f2d>
 80091fc:	0002      	movs	r2, r0
 80091fe:	000b      	movs	r3, r1
 8009200:	4944      	ldr	r1, [pc, #272]	@ (8009314 <sen5x_measurement+0x210>)
 8009202:	0008      	movs	r0, r1
 8009204:	f016 f960 	bl	801f4c8 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 8009208:	4b39      	ldr	r3, [pc, #228]	@ (80092f0 <sen5x_measurement+0x1ec>)
 800920a:	2208      	movs	r2, #8
 800920c:	5e9b      	ldrsh	r3, [r3, r2]
 800920e:	4a42      	ldr	r2, [pc, #264]	@ (8009318 <sen5x_measurement+0x214>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d014      	beq.n	800923e <sen5x_measurement+0x13a>
        printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009214:	4b36      	ldr	r3, [pc, #216]	@ (80092f0 <sen5x_measurement+0x1ec>)
 8009216:	2208      	movs	r2, #8
 8009218:	5e9b      	ldrsh	r3, [r3, r2]
 800921a:	0018      	movs	r0, r3
 800921c:	f7f8 f9d8 	bl	80015d0 <__aeabi_i2f>
 8009220:	1c03      	adds	r3, r0, #0
 8009222:	493e      	ldr	r1, [pc, #248]	@ (800931c <sen5x_measurement+0x218>)
 8009224:	1c18      	adds	r0, r3, #0
 8009226:	f7f7 fcd5 	bl	8000bd4 <__aeabi_fdiv>
 800922a:	1c03      	adds	r3, r0, #0
 800922c:	1c18      	adds	r0, r3, #0
 800922e:	f7fa f919 	bl	8003464 <__aeabi_f2d>
 8009232:	0002      	movs	r2, r0
 8009234:	000b      	movs	r3, r1
 8009236:	493a      	ldr	r1, [pc, #232]	@ (8009320 <sen5x_measurement+0x21c>)
 8009238:	0008      	movs	r0, r1
 800923a:	f016 f945 	bl	801f4c8 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800923e:	4b2c      	ldr	r3, [pc, #176]	@ (80092f0 <sen5x_measurement+0x1ec>)
 8009240:	220a      	movs	r2, #10
 8009242:	5e9b      	ldrsh	r3, [r3, r2]
 8009244:	4a34      	ldr	r2, [pc, #208]	@ (8009318 <sen5x_measurement+0x214>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d014      	beq.n	8009274 <sen5x_measurement+0x170>
        printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800924a:	4b29      	ldr	r3, [pc, #164]	@ (80092f0 <sen5x_measurement+0x1ec>)
 800924c:	220a      	movs	r2, #10
 800924e:	5e9b      	ldrsh	r3, [r3, r2]
 8009250:	0018      	movs	r0, r3
 8009252:	f7f8 f9bd 	bl	80015d0 <__aeabi_i2f>
 8009256:	1c03      	adds	r3, r0, #0
 8009258:	4932      	ldr	r1, [pc, #200]	@ (8009324 <sen5x_measurement+0x220>)
 800925a:	1c18      	adds	r0, r3, #0
 800925c:	f7f7 fcba 	bl	8000bd4 <__aeabi_fdiv>
 8009260:	1c03      	adds	r3, r0, #0
 8009262:	1c18      	adds	r0, r3, #0
 8009264:	f7fa f8fe 	bl	8003464 <__aeabi_f2d>
 8009268:	0002      	movs	r2, r0
 800926a:	000b      	movs	r3, r1
 800926c:	492e      	ldr	r1, [pc, #184]	@ (8009328 <sen5x_measurement+0x224>)
 800926e:	0008      	movs	r0, r1
 8009270:	f016 f92a 	bl	801f4c8 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009274:	4b1e      	ldr	r3, [pc, #120]	@ (80092f0 <sen5x_measurement+0x1ec>)
 8009276:	220c      	movs	r2, #12
 8009278:	5e9b      	ldrsh	r3, [r3, r2]
 800927a:	4a27      	ldr	r2, [pc, #156]	@ (8009318 <sen5x_measurement+0x214>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d014      	beq.n	80092aa <sen5x_measurement+0x1a6>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009280:	4b1b      	ldr	r3, [pc, #108]	@ (80092f0 <sen5x_measurement+0x1ec>)
 8009282:	220c      	movs	r2, #12
 8009284:	5e9b      	ldrsh	r3, [r3, r2]
 8009286:	0018      	movs	r0, r3
 8009288:	f7f8 f9a2 	bl	80015d0 <__aeabi_i2f>
 800928c:	1c03      	adds	r3, r0, #0
 800928e:	491d      	ldr	r1, [pc, #116]	@ (8009304 <sen5x_measurement+0x200>)
 8009290:	1c18      	adds	r0, r3, #0
 8009292:	f7f7 fc9f 	bl	8000bd4 <__aeabi_fdiv>
 8009296:	1c03      	adds	r3, r0, #0
 8009298:	1c18      	adds	r0, r3, #0
 800929a:	f7fa f8e3 	bl	8003464 <__aeabi_f2d>
 800929e:	0002      	movs	r2, r0
 80092a0:	000b      	movs	r3, r1
 80092a2:	4922      	ldr	r1, [pc, #136]	@ (800932c <sen5x_measurement+0x228>)
 80092a4:	0008      	movs	r0, r1
 80092a6:	f016 f90f 	bl	801f4c8 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 80092aa:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <sen5x_measurement+0x1ec>)
 80092ac:	220e      	movs	r2, #14
 80092ae:	5e9b      	ldrsh	r3, [r3, r2]
 80092b0:	4a19      	ldr	r2, [pc, #100]	@ (8009318 <sen5x_measurement+0x214>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d014      	beq.n	80092e0 <sen5x_measurement+0x1dc>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 80092b6:	4b0e      	ldr	r3, [pc, #56]	@ (80092f0 <sen5x_measurement+0x1ec>)
 80092b8:	220e      	movs	r2, #14
 80092ba:	5e9b      	ldrsh	r3, [r3, r2]
 80092bc:	0018      	movs	r0, r3
 80092be:	f7f8 f987 	bl	80015d0 <__aeabi_i2f>
 80092c2:	1c03      	adds	r3, r0, #0
 80092c4:	490f      	ldr	r1, [pc, #60]	@ (8009304 <sen5x_measurement+0x200>)
 80092c6:	1c18      	adds	r0, r3, #0
 80092c8:	f7f7 fc84 	bl	8000bd4 <__aeabi_fdiv>
 80092cc:	1c03      	adds	r3, r0, #0
 80092ce:	1c18      	adds	r0, r3, #0
 80092d0:	f7fa f8c8 	bl	8003464 <__aeabi_f2d>
 80092d4:	0002      	movs	r2, r0
 80092d6:	000b      	movs	r3, r1
 80092d8:	4915      	ldr	r1, [pc, #84]	@ (8009330 <sen5x_measurement+0x22c>)
 80092da:	0008      	movs	r0, r1
 80092dc:	f016 f8f4 	bl	801f4c8 <iprintf>
  }
  return error;
 80092e0:	1dbb      	adds	r3, r7, #6
 80092e2:	2200      	movs	r2, #0
 80092e4:	5e9b      	ldrsh	r3, [r3, r2]
}
 80092e6:	0018      	movs	r0, r3
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b002      	add	sp, #8
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	46c0      	nop			@ (mov r8, r8)
 80092f0:	200011d4 	.word	0x200011d4
 80092f4:	08023c4c 	.word	0x08023c4c
 80092f8:	08023a94 	.word	0x08023a94
 80092fc:	200011d0 	.word	0x200011d0
 8009300:	0000ffff 	.word	0x0000ffff
 8009304:	41200000 	.word	0x41200000
 8009308:	08023c80 	.word	0x08023c80
 800930c:	08023cac 	.word	0x08023cac
 8009310:	08023cd8 	.word	0x08023cd8
 8009314:	08023d04 	.word	0x08023d04
 8009318:	00007fff 	.word	0x00007fff
 800931c:	42c80000 	.word	0x42c80000
 8009320:	08023d30 	.word	0x08023d30
 8009324:	43480000 	.word	0x43480000
 8009328:	08023d50 	.word	0x08023d50
 800932c:	08023d70 	.word	0x08023d70
 8009330:	08023d88 	.word	0x08023d88

08009334 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009334:	b590      	push	{r4, r7, lr}
 8009336:	b085      	sub	sp, #20
 8009338:	af02      	add	r7, sp, #8
 800933a:	6039      	str	r1, [r7, #0]
 800933c:	0011      	movs	r1, r2
 800933e:	1dfb      	adds	r3, r7, #7
 8009340:	1c02      	adds	r2, r0, #0
 8009342:	701a      	strb	r2, [r3, #0]
 8009344:	1d3b      	adds	r3, r7, #4
 8009346:	1c0a      	adds	r2, r1, #0
 8009348:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800934a:	1dfb      	adds	r3, r7, #7
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	b29b      	uxth	r3, r3
 8009350:	18db      	adds	r3, r3, r3
 8009352:	b299      	uxth	r1, r3
 8009354:	1d3b      	adds	r3, r7, #4
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	4805      	ldr	r0, [pc, #20]	@ (8009370 <sensirion_i2c_hal_read+0x3c>)
 800935c:	2464      	movs	r4, #100	@ 0x64
 800935e:	9400      	str	r4, [sp, #0]
 8009360:	f006 fc76 	bl	800fc50 <HAL_I2C_Master_Receive>
 8009364:	0003      	movs	r3, r0
 8009366:	b25b      	sxtb	r3, r3
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	b003      	add	sp, #12
 800936e:	bd90      	pop	{r4, r7, pc}
 8009370:	20000dac 	.word	0x20000dac

08009374 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009374:	b590      	push	{r4, r7, lr}
 8009376:	b085      	sub	sp, #20
 8009378:	af02      	add	r7, sp, #8
 800937a:	6039      	str	r1, [r7, #0]
 800937c:	0011      	movs	r1, r2
 800937e:	1dfb      	adds	r3, r7, #7
 8009380:	1c02      	adds	r2, r0, #0
 8009382:	701a      	strb	r2, [r3, #0]
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	1c0a      	adds	r2, r1, #0
 8009388:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800938a:	1dfb      	adds	r3, r7, #7
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	18db      	adds	r3, r3, r3
 8009392:	b299      	uxth	r1, r3
 8009394:	1d3b      	adds	r3, r7, #4
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	4805      	ldr	r0, [pc, #20]	@ (80093b0 <sensirion_i2c_hal_write+0x3c>)
 800939c:	2464      	movs	r4, #100	@ 0x64
 800939e:	9400      	str	r4, [sp, #0]
 80093a0:	f006 fb4e 	bl	800fa40 <HAL_I2C_Master_Transmit>
 80093a4:	0003      	movs	r3, r0
 80093a6:	b25b      	sxtb	r3, r3
}
 80093a8:	0018      	movs	r0, r3
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b003      	add	sp, #12
 80093ae:	bd90      	pop	{r4, r7, pc}
 80093b0:	20000dac 	.word	0x20000dac

080093b4 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	22fa      	movs	r2, #250	@ 0xfa
 80093c0:	0091      	lsls	r1, r2, #2
 80093c2:	0018      	movs	r0, r3
 80093c4:	f7f6 feee 	bl	80001a4 <__udivsi3>
 80093c8:	0003      	movs	r3, r0
 80093ca:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	22fa      	movs	r2, #250	@ 0xfa
 80093d0:	0091      	lsls	r1, r2, #2
 80093d2:	0018      	movs	r0, r3
 80093d4:	f7f6 ff6c 	bl	80002b0 <__aeabi_uidivmod>
 80093d8:	1e0b      	subs	r3, r1, #0
 80093da:	d002      	beq.n	80093e2 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	0018      	movs	r0, r3
 80093e6:	f004 ffd5 	bl	800e394 <HAL_Delay>
}
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b004      	add	sp, #16
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80093fe:	1d3b      	adds	r3, r7, #4
 8009400:	0018      	movs	r0, r3
 8009402:	f000 fc97 	bl	8009d34 <sen5x_read_device_status>
 8009406:	1e03      	subs	r3, r0, #0
 8009408:	d007      	beq.n	800941a <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800940a:	4a28      	ldr	r2, [pc, #160]	@ (80094ac <sen5x_check_for_errors+0xb8>)
 800940c:	4b28      	ldr	r3, [pc, #160]	@ (80094b0 <sen5x_check_for_errors+0xbc>)
 800940e:	0019      	movs	r1, r3
 8009410:	2001      	movs	r0, #1
 8009412:	f004 fb5f 	bl	800dad4 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 8009416:	2300      	movs	r3, #0
 8009418:	e043      	b.n	80094a2 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 8009420:	2300      	movs	r3, #0
 8009422:	e03e      	b.n	80094a2 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	2380      	movs	r3, #128	@ 0x80
 8009428:	039b      	lsls	r3, r3, #14
 800942a:	4013      	ands	r3, r2
 800942c:	d005      	beq.n	800943a <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800942e:	4a21      	ldr	r2, [pc, #132]	@ (80094b4 <sen5x_check_for_errors+0xc0>)
 8009430:	4b21      	ldr	r3, [pc, #132]	@ (80094b8 <sen5x_check_for_errors+0xc4>)
 8009432:	0019      	movs	r1, r3
 8009434:	2003      	movs	r0, #3
 8009436:	f004 fb4d 	bl	800dad4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	2380      	movs	r3, #128	@ 0x80
 800943e:	031b      	lsls	r3, r3, #12
 8009440:	4013      	ands	r3, r2
 8009442:	d005      	beq.n	8009450 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009444:	4a1d      	ldr	r2, [pc, #116]	@ (80094bc <sen5x_check_for_errors+0xc8>)
 8009446:	4b1c      	ldr	r3, [pc, #112]	@ (80094b8 <sen5x_check_for_errors+0xc4>)
 8009448:	0019      	movs	r1, r3
 800944a:	2003      	movs	r0, #3
 800944c:	f004 fb42 	bl	800dad4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2280      	movs	r2, #128	@ 0x80
 8009454:	4013      	ands	r3, r2
 8009456:	d005      	beq.n	8009464 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009458:	4a19      	ldr	r2, [pc, #100]	@ (80094c0 <sen5x_check_for_errors+0xcc>)
 800945a:	4b17      	ldr	r3, [pc, #92]	@ (80094b8 <sen5x_check_for_errors+0xc4>)
 800945c:	0019      	movs	r1, r3
 800945e:	2003      	movs	r0, #3
 8009460:	f004 fb38 	bl	800dad4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2240      	movs	r2, #64	@ 0x40
 8009468:	4013      	ands	r3, r2
 800946a:	d005      	beq.n	8009478 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800946c:	4a15      	ldr	r2, [pc, #84]	@ (80094c4 <sen5x_check_for_errors+0xd0>)
 800946e:	4b12      	ldr	r3, [pc, #72]	@ (80094b8 <sen5x_check_for_errors+0xc4>)
 8009470:	0019      	movs	r1, r3
 8009472:	2003      	movs	r0, #3
 8009474:	f004 fb2e 	bl	800dad4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2220      	movs	r2, #32
 800947c:	4013      	ands	r3, r2
 800947e:	d005      	beq.n	800948c <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009480:	4a11      	ldr	r2, [pc, #68]	@ (80094c8 <sen5x_check_for_errors+0xd4>)
 8009482:	4b0d      	ldr	r3, [pc, #52]	@ (80094b8 <sen5x_check_for_errors+0xc4>)
 8009484:	0019      	movs	r1, r3
 8009486:	2003      	movs	r0, #3
 8009488:	f004 fb24 	bl	800dad4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2210      	movs	r2, #16
 8009490:	4013      	ands	r3, r2
 8009492:	d005      	beq.n	80094a0 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009494:	4a0d      	ldr	r2, [pc, #52]	@ (80094cc <sen5x_check_for_errors+0xd8>)
 8009496:	4b08      	ldr	r3, [pc, #32]	@ (80094b8 <sen5x_check_for_errors+0xc4>)
 8009498:	0019      	movs	r1, r3
 800949a:	2003      	movs	r0, #3
 800949c:	f004 fb1a 	bl	800dad4 <CreateLine>
  }
  return 1;
 80094a0:	2301      	movs	r3, #1
}
 80094a2:	0018      	movs	r0, r3
 80094a4:	46bd      	mov	sp, r7
 80094a6:	b002      	add	sp, #8
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	46c0      	nop			@ (mov r8, r8)
 80094ac:	08023da0 	.word	0x08023da0
 80094b0:	08023a94 	.word	0x08023a94
 80094b4:	08023dcc 	.word	0x08023dcc
 80094b8:	080239c8 	.word	0x080239c8
 80094bc:	08023dec 	.word	0x08023dec
 80094c0:	08023e08 	.word	0x08023e08
 80094c4:	08023e2c 	.word	0x08023e2c
 80094c8:	08023e4c 	.word	0x08023e4c
 80094cc:	08023e60 	.word	0x08023e60

080094d0 <set_light_on_state>:

void set_light_on_state(void) {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 80094d4:	4b15      	ldr	r3, [pc, #84]	@ (800952c <set_light_on_state+0x5c>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2201      	movs	r2, #1
 80094da:	4053      	eors	r3, r2
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d008      	beq.n	80094f4 <set_light_on_state+0x24>
    sen5x_Power_On();
 80094e2:	f7ff fc03 	bl	8008cec <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 80094e6:	4a12      	ldr	r2, [pc, #72]	@ (8009530 <set_light_on_state+0x60>)
 80094e8:	4b12      	ldr	r3, [pc, #72]	@ (8009534 <set_light_on_state+0x64>)
 80094ea:	0019      	movs	r1, r3
 80094ec:	2003      	movs	r0, #3
 80094ee:	f004 faf1 	bl	800dad4 <CreateLine>
 80094f2:	e00a      	b.n	800950a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 80094f4:	f004 ff44 	bl	800e380 <HAL_GetTick>
 80094f8:	0002      	movs	r2, r0
 80094fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009538 <set_light_on_state+0x68>)
 80094fc:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 80094fe:	4a0f      	ldr	r2, [pc, #60]	@ (800953c <set_light_on_state+0x6c>)
 8009500:	4b0c      	ldr	r3, [pc, #48]	@ (8009534 <set_light_on_state+0x64>)
 8009502:	0019      	movs	r1, r3
 8009504:	2003      	movs	r0, #3
 8009506:	f004 fae5 	bl	800dad4 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start full measurement mode
 800950a:	f7ff fd4f 	bl	8008fac <sen5x_lightup_measurement>
 800950e:	1e03      	subs	r3, r0, #0
 8009510:	d005      	beq.n	800951e <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009512:	4a0b      	ldr	r2, [pc, #44]	@ (8009540 <set_light_on_state+0x70>)
 8009514:	4b0b      	ldr	r3, [pc, #44]	@ (8009544 <set_light_on_state+0x74>)
 8009516:	0019      	movs	r1, r3
 8009518:	2001      	movs	r0, #1
 800951a:	f004 fadb 	bl	800dad4 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800951e:	4b0a      	ldr	r3, [pc, #40]	@ (8009548 <set_light_on_state+0x78>)
 8009520:	2203      	movs	r2, #3
 8009522:	701a      	strb	r2, [r3, #0]
}
 8009524:	46c0      	nop			@ (mov r8, r8)
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	46c0      	nop			@ (mov r8, r8)
 800952c:	200011c9 	.word	0x200011c9
 8009530:	08023e9c 	.word	0x08023e9c
 8009534:	080239c8 	.word	0x080239c8
 8009538:	200011cc 	.word	0x200011cc
 800953c:	08023ec8 	.word	0x08023ec8
 8009540:	08023ee0 	.word	0x08023ee0
 8009544:	08023a94 	.word	0x08023a94
 8009548:	20000081 	.word	0x20000081

0800954c <sen5x_statemachine>:

void sen5x_statemachine() {
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009552:	1dfb      	adds	r3, r7, #7
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009558:	4b6c      	ldr	r3, [pc, #432]	@ (800970c <sen5x_statemachine+0x1c0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	0018      	movs	r0, r3
 800955e:	f004 fa63 	bl	800da28 <TimestampIsReached>
 8009562:	1e03      	subs	r3, r0, #0
 8009564:	d100      	bne.n	8009568 <sen5x_statemachine+0x1c>
 8009566:	e0cc      	b.n	8009702 <sen5x_statemachine+0x1b6>
    switch (PMsamplesState) {
 8009568:	4b69      	ldr	r3, [pc, #420]	@ (8009710 <sen5x_statemachine+0x1c4>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	2b05      	cmp	r3, #5
 800956e:	d900      	bls.n	8009572 <sen5x_statemachine+0x26>
 8009570:	e0c7      	b.n	8009702 <sen5x_statemachine+0x1b6>
 8009572:	009a      	lsls	r2, r3, #2
 8009574:	4b67      	ldr	r3, [pc, #412]	@ (8009714 <sen5x_statemachine+0x1c8>)
 8009576:	18d3      	adds	r3, r2, r3
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800957c:	4a66      	ldr	r2, [pc, #408]	@ (8009718 <sen5x_statemachine+0x1cc>)
 800957e:	4b67      	ldr	r3, [pc, #412]	@ (800971c <sen5x_statemachine+0x1d0>)
 8009580:	0019      	movs	r1, r3
 8009582:	2001      	movs	r0, #1
 8009584:	f004 faa6 	bl	800dad4 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009588:	f004 fefa 	bl	800e380 <HAL_GetTick>
 800958c:	0003      	movs	r3, r0
 800958e:	4a64      	ldr	r2, [pc, #400]	@ (8009720 <sen5x_statemachine+0x1d4>)
 8009590:	189a      	adds	r2, r3, r2
 8009592:	4b5e      	ldr	r3, [pc, #376]	@ (800970c <sen5x_statemachine+0x1c0>)
 8009594:	601a      	str	r2, [r3, #0]
      break;
 8009596:	e0b4      	b.n	8009702 <sen5x_statemachine+0x1b6>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009598:	f004 fef2 	bl	800e380 <HAL_GetTick>
 800959c:	0003      	movs	r3, r0
 800959e:	4a61      	ldr	r2, [pc, #388]	@ (8009724 <sen5x_statemachine+0x1d8>)
 80095a0:	189a      	adds	r2, r3, r2
 80095a2:	4b5a      	ldr	r3, [pc, #360]	@ (800970c <sen5x_statemachine+0x1c0>)
 80095a4:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 80095a6:	f7ff ff93 	bl	80094d0 <set_light_on_state>
      break;
 80095aa:	e0aa      	b.n	8009702 <sen5x_statemachine+0x1b6>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 80095ac:	4b58      	ldr	r3, [pc, #352]	@ (8009710 <sen5x_statemachine+0x1c4>)
 80095ae:	2202      	movs	r2, #2
 80095b0:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 80095b2:	4b5d      	ldr	r3, [pc, #372]	@ (8009728 <sen5x_statemachine+0x1dc>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b05      	cmp	r3, #5
 80095b8:	d905      	bls.n	80095c6 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 80095ba:	4b55      	ldr	r3, [pc, #340]	@ (8009710 <sen5x_statemachine+0x1c4>)
 80095bc:	2200      	movs	r2, #0
 80095be:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 80095c0:	f7ff fbb4 	bl	8008d2c <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 80095c4:	e09a      	b.n	80096fc <sen5x_statemachine+0x1b0>
        if (sen5x_check_for_errors()) {
 80095c6:	f7ff ff15 	bl	80093f4 <sen5x_check_for_errors>
 80095ca:	1e03      	subs	r3, r0, #0
 80095cc:	d100      	bne.n	80095d0 <sen5x_statemachine+0x84>
 80095ce:	e095      	b.n	80096fc <sen5x_statemachine+0x1b0>
          if (sen5x_device_reset()) {
 80095d0:	f000 fc02 	bl	8009dd8 <sen5x_device_reset>
 80095d4:	1e03      	subs	r3, r0, #0
 80095d6:	d006      	beq.n	80095e6 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 80095d8:	4a54      	ldr	r2, [pc, #336]	@ (800972c <sen5x_statemachine+0x1e0>)
 80095da:	4b50      	ldr	r3, [pc, #320]	@ (800971c <sen5x_statemachine+0x1d0>)
 80095dc:	0019      	movs	r1, r3
 80095de:	2001      	movs	r0, #1
 80095e0:	f004 fa78 	bl	800dad4 <CreateLine>
 80095e4:	e005      	b.n	80095f2 <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 80095e6:	4a52      	ldr	r2, [pc, #328]	@ (8009730 <sen5x_statemachine+0x1e4>)
 80095e8:	4b52      	ldr	r3, [pc, #328]	@ (8009734 <sen5x_statemachine+0x1e8>)
 80095ea:	0019      	movs	r1, r3
 80095ec:	2002      	movs	r0, #2
 80095ee:	f004 fa71 	bl	800dad4 <CreateLine>
          sen5xErrors++;
 80095f2:	4b4d      	ldr	r3, [pc, #308]	@ (8009728 <sen5x_statemachine+0x1dc>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4b4b      	ldr	r3, [pc, #300]	@ (8009728 <sen5x_statemachine+0x1dc>)
 80095fc:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 80095fe:	f004 febf 	bl	800e380 <HAL_GetTick>
 8009602:	0003      	movs	r3, r0
 8009604:	3396      	adds	r3, #150	@ 0x96
 8009606:	001a      	movs	r2, r3
 8009608:	4b40      	ldr	r3, [pc, #256]	@ (800970c <sen5x_statemachine+0x1c0>)
 800960a:	601a      	str	r2, [r3, #0]
      break;
 800960c:	e076      	b.n	80096fc <sen5x_statemachine+0x1b0>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 800960e:	1dfb      	adds	r3, r7, #7
 8009610:	0018      	movs	r0, r3
 8009612:	f000 f8fd 	bl	8009810 <sen5x_read_data_ready>
      if (data_ready) {
 8009616:	1dfb      	adds	r3, r7, #7
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d100      	bne.n	8009620 <sen5x_statemachine+0xd4>
 800961e:	e06f      	b.n	8009700 <sen5x_statemachine+0x1b4>
        if (sen5x_measurement()) {
 8009620:	f7ff fd70 	bl	8009104 <sen5x_measurement>
 8009624:	1e03      	subs	r3, r0, #0
 8009626:	d005      	beq.n	8009634 <sen5x_statemachine+0xe8>
          Error("Error executing sen5x_measurement()");
 8009628:	4a43      	ldr	r2, [pc, #268]	@ (8009738 <sen5x_statemachine+0x1ec>)
 800962a:	4b3c      	ldr	r3, [pc, #240]	@ (800971c <sen5x_statemachine+0x1d0>)
 800962c:	0019      	movs	r1, r3
 800962e:	2001      	movs	r0, #1
 8009630:	f004 fa50 	bl	800dad4 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 8009634:	4b41      	ldr	r3, [pc, #260]	@ (800973c <sen5x_statemachine+0x1f0>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <sen5x_statemachine+0xf6>
            PMsamplesState = CLEAN_FAN;
 800963c:	4b34      	ldr	r3, [pc, #208]	@ (8009710 <sen5x_statemachine+0x1c4>)
 800963e:	2204      	movs	r2, #4
 8009640:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 8009642:	4b3e      	ldr	r3, [pc, #248]	@ (800973c <sen5x_statemachine+0x1f0>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	3301      	adds	r3, #1
 8009648:	b2da      	uxtb	r2, r3
 800964a:	4b3c      	ldr	r3, [pc, #240]	@ (800973c <sen5x_statemachine+0x1f0>)
 800964c:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 32) { // about two times a minute
 800964e:	4b3b      	ldr	r3, [pc, #236]	@ (800973c <sen5x_statemachine+0x1f0>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b20      	cmp	r3, #32
 8009654:	d154      	bne.n	8009700 <sen5x_statemachine+0x1b4>
          sen5xSamples = 1;  // enable display on serial
 8009656:	4b39      	ldr	r3, [pc, #228]	@ (800973c <sen5x_statemachine+0x1f0>)
 8009658:	2201      	movs	r2, #1
 800965a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800965c:	e050      	b.n	8009700 <sen5x_statemachine+0x1b4>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 800965e:	f7fd f915 	bl	800688c <RTC_GetWeekday>
 8009662:	0003      	movs	r3, r0
 8009664:	2b01      	cmp	r3, #1
 8009666:	d118      	bne.n	800969a <sen5x_statemachine+0x14e>
 8009668:	4b35      	ldr	r3, [pc, #212]	@ (8009740 <sen5x_statemachine+0x1f4>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2201      	movs	r2, #1
 800966e:	4053      	eors	r3, r2
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d011      	beq.n	800969a <sen5x_statemachine+0x14e>
        sen5x_start_fan_cleaning();
 8009676:	f000 f9b1 	bl	80099dc <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800967a:	4a32      	ldr	r2, [pc, #200]	@ (8009744 <sen5x_statemachine+0x1f8>)
 800967c:	4b2d      	ldr	r3, [pc, #180]	@ (8009734 <sen5x_statemachine+0x1e8>)
 800967e:	0019      	movs	r1, r3
 8009680:	2002      	movs	r0, #2
 8009682:	f004 fa27 	bl	800dad4 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;
 8009686:	f004 fe7b 	bl	800e380 <HAL_GetTick>
 800968a:	0003      	movs	r3, r0
 800968c:	4a2e      	ldr	r2, [pc, #184]	@ (8009748 <sen5x_statemachine+0x1fc>)
 800968e:	189a      	adds	r2, r3, r2
 8009690:	4b1e      	ldr	r3, [pc, #120]	@ (800970c <sen5x_statemachine+0x1c0>)
 8009692:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009694:	4b2a      	ldr	r3, [pc, #168]	@ (8009740 <sen5x_statemachine+0x1f4>)
 8009696:	2201      	movs	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 800969a:	4b1d      	ldr	r3, [pc, #116]	@ (8009710 <sen5x_statemachine+0x1c4>)
 800969c:	2205      	movs	r2, #5
 800969e:	701a      	strb	r2, [r3, #0]
      break;
 80096a0:	e02f      	b.n	8009702 <sen5x_statemachine+0x1b6>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 80096a2:	4b2a      	ldr	r3, [pc, #168]	@ (800974c <sen5x_statemachine+0x200>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2201      	movs	r2, #1
 80096a8:	4053      	eors	r3, r2
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d019      	beq.n	80096e4 <sen5x_statemachine+0x198>
        if (sen5x_extinguish_measurement()) {
 80096b0:	f7ff fca0 	bl	8008ff4 <sen5x_extinguish_measurement>
 80096b4:	1e03      	subs	r3, r0, #0
 80096b6:	d005      	beq.n	80096c4 <sen5x_statemachine+0x178>
          Error("Error executing sen5x_extinguish_measurement()");
 80096b8:	4a25      	ldr	r2, [pc, #148]	@ (8009750 <sen5x_statemachine+0x204>)
 80096ba:	4b18      	ldr	r3, [pc, #96]	@ (800971c <sen5x_statemachine+0x1d0>)
 80096bc:	0019      	movs	r1, r3
 80096be:	2001      	movs	r0, #1
 80096c0:	f004 fa08 	bl	800dad4 <CreateLine>
        }
        sen5xSamples = 0;
 80096c4:	4b1d      	ldr	r3, [pc, #116]	@ (800973c <sen5x_statemachine+0x1f0>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 80096ca:	f7ff fb2f 	bl	8008d2c <sen5x_Power_Off>
        sen5xReadTimer = HAL_GetTick() + 100;
 80096ce:	f004 fe57 	bl	800e380 <HAL_GetTick>
 80096d2:	0003      	movs	r3, r0
 80096d4:	3364      	adds	r3, #100	@ 0x64
 80096d6:	001a      	movs	r2, r3
 80096d8:	4b0c      	ldr	r3, [pc, #48]	@ (800970c <sen5x_statemachine+0x1c0>)
 80096da:	601a      	str	r2, [r3, #0]
        PMsamplesState = LIGHT_OUT;
 80096dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009710 <sen5x_statemachine+0x1c4>)
 80096de:	2201      	movs	r2, #1
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e002      	b.n	80096ea <sen5x_statemachine+0x19e>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 80096e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009710 <sen5x_statemachine+0x1c4>)
 80096e6:	2203      	movs	r2, #3
 80096e8:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000; //some more less then an hour
 80096ea:	f004 fe49 	bl	800e380 <HAL_GetTick>
 80096ee:	0003      	movs	r3, r0
 80096f0:	22fa      	movs	r2, #250	@ 0xfa
 80096f2:	0092      	lsls	r2, r2, #2
 80096f4:	189a      	adds	r2, r3, r2
 80096f6:	4b05      	ldr	r3, [pc, #20]	@ (800970c <sen5x_statemachine+0x1c0>)
 80096f8:	601a      	str	r2, [r3, #0]
    }
  }
}
 80096fa:	e002      	b.n	8009702 <sen5x_statemachine+0x1b6>
      break;
 80096fc:	46c0      	nop			@ (mov r8, r8)
 80096fe:	e000      	b.n	8009702 <sen5x_statemachine+0x1b6>
      break;
 8009700:	46c0      	nop			@ (mov r8, r8)
}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	46bd      	mov	sp, r7
 8009706:	b002      	add	sp, #8
 8009708:	bd80      	pop	{r7, pc}
 800970a:	46c0      	nop			@ (mov r8, r8)
 800970c:	200011cc 	.word	0x200011cc
 8009710:	20000081 	.word	0x20000081
 8009714:	08024810 	.word	0x08024810
 8009718:	08023f0c 	.word	0x08023f0c
 800971c:	08023a94 	.word	0x08023a94
 8009720:	002fefd8 	.word	0x002fefd8
 8009724:	00005910 	.word	0x00005910
 8009728:	200011d1 	.word	0x200011d1
 800972c:	08023f3c 	.word	0x08023f3c
 8009730:	08023f54 	.word	0x08023f54
 8009734:	08023be8 	.word	0x08023be8
 8009738:	08023f6c 	.word	0x08023f6c
 800973c:	200011d0 	.word	0x200011d0
 8009740:	200011c8 	.word	0x200011c8
 8009744:	08023f90 	.word	0x08023f90
 8009748:	00002710 	.word	0x00002710
 800974c:	20002151 	.word	0x20002151
 8009750:	08023fa8 	.word	0x08023fa8

08009754 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009754:	b590      	push	{r4, r7, lr}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800975a:	1dbb      	adds	r3, r7, #6
 800975c:	2200      	movs	r2, #0
 800975e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009760:	1dbc      	adds	r4, r7, #6
 8009762:	1dbb      	adds	r3, r7, #6
 8009764:	8819      	ldrh	r1, [r3, #0]
 8009766:	003b      	movs	r3, r7
 8009768:	2221      	movs	r2, #33	@ 0x21
 800976a:	0018      	movs	r0, r3
 800976c:	f001 fb26 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009770:	0003      	movs	r3, r0
 8009772:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009774:	1d3c      	adds	r4, r7, #4
 8009776:	1dbb      	adds	r3, r7, #6
 8009778:	881a      	ldrh	r2, [r3, #0]
 800977a:	003b      	movs	r3, r7
 800977c:	0019      	movs	r1, r3
 800977e:	2069      	movs	r0, #105	@ 0x69
 8009780:	f001 fba0 	bl	800aec4 <sensirion_i2c_write_data>
 8009784:	0003      	movs	r3, r0
 8009786:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009788:	1d3b      	adds	r3, r7, #4
 800978a:	2200      	movs	r2, #0
 800978c:	5e9b      	ldrsh	r3, [r3, r2]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <sen5x_start_measurement+0x46>
        return error;
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	2200      	movs	r2, #0
 8009796:	5e9b      	ldrsh	r3, [r3, r2]
 8009798:	e004      	b.n	80097a4 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800979a:	4b04      	ldr	r3, [pc, #16]	@ (80097ac <sen5x_start_measurement+0x58>)
 800979c:	0018      	movs	r0, r3
 800979e:	f7ff fe09 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	0018      	movs	r0, r3
 80097a6:	46bd      	mov	sp, r7
 80097a8:	b003      	add	sp, #12
 80097aa:	bd90      	pop	{r4, r7, pc}
 80097ac:	0000c350 	.word	0x0000c350

080097b0 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 80097b0:	b590      	push	{r4, r7, lr}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80097b6:	1dbb      	adds	r3, r7, #6
 80097b8:	2200      	movs	r2, #0
 80097ba:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 80097bc:	1dbc      	adds	r4, r7, #6
 80097be:	2382      	movs	r3, #130	@ 0x82
 80097c0:	005a      	lsls	r2, r3, #1
 80097c2:	1dbb      	adds	r3, r7, #6
 80097c4:	8819      	ldrh	r1, [r3, #0]
 80097c6:	003b      	movs	r3, r7
 80097c8:	0018      	movs	r0, r3
 80097ca:	f001 faf7 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 80097ce:	0003      	movs	r3, r0
 80097d0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80097d2:	1d3c      	adds	r4, r7, #4
 80097d4:	1dbb      	adds	r3, r7, #6
 80097d6:	881a      	ldrh	r2, [r3, #0]
 80097d8:	003b      	movs	r3, r7
 80097da:	0019      	movs	r1, r3
 80097dc:	2069      	movs	r0, #105	@ 0x69
 80097de:	f001 fb71 	bl	800aec4 <sensirion_i2c_write_data>
 80097e2:	0003      	movs	r3, r0
 80097e4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80097e6:	1d3b      	adds	r3, r7, #4
 80097e8:	2200      	movs	r2, #0
 80097ea:	5e9b      	ldrsh	r3, [r3, r2]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <sen5x_stop_measurement+0x48>
        return error;
 80097f0:	1d3b      	adds	r3, r7, #4
 80097f2:	2200      	movs	r2, #0
 80097f4:	5e9b      	ldrsh	r3, [r3, r2]
 80097f6:	e004      	b.n	8009802 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 80097f8:	4b04      	ldr	r3, [pc, #16]	@ (800980c <sen5x_stop_measurement+0x5c>)
 80097fa:	0018      	movs	r0, r3
 80097fc:	f7ff fdda 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009800:	2300      	movs	r3, #0
}
 8009802:	0018      	movs	r0, r3
 8009804:	46bd      	mov	sp, r7
 8009806:	b003      	add	sp, #12
 8009808:	bd90      	pop	{r4, r7, pc}
 800980a:	46c0      	nop			@ (mov r8, r8)
 800980c:	00030d40 	.word	0x00030d40

08009810 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009818:	250e      	movs	r5, #14
 800981a:	197b      	adds	r3, r7, r5
 800981c:	2200      	movs	r2, #0
 800981e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009820:	197c      	adds	r4, r7, r5
 8009822:	4a22      	ldr	r2, [pc, #136]	@ (80098ac <sen5x_read_data_ready+0x9c>)
 8009824:	197b      	adds	r3, r7, r5
 8009826:	8819      	ldrh	r1, [r3, #0]
 8009828:	2308      	movs	r3, #8
 800982a:	18fb      	adds	r3, r7, r3
 800982c:	0018      	movs	r0, r3
 800982e:	f001 fac5 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009832:	0003      	movs	r3, r0
 8009834:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009836:	260c      	movs	r6, #12
 8009838:	19bc      	adds	r4, r7, r6
 800983a:	197b      	adds	r3, r7, r5
 800983c:	881a      	ldrh	r2, [r3, #0]
 800983e:	2308      	movs	r3, #8
 8009840:	18fb      	adds	r3, r7, r3
 8009842:	0019      	movs	r1, r3
 8009844:	2069      	movs	r0, #105	@ 0x69
 8009846:	f001 fb3d 	bl	800aec4 <sensirion_i2c_write_data>
 800984a:	0003      	movs	r3, r0
 800984c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800984e:	19bb      	adds	r3, r7, r6
 8009850:	2200      	movs	r2, #0
 8009852:	5e9b      	ldrsh	r3, [r3, r2]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <sen5x_read_data_ready+0x50>
        return error;
 8009858:	19bb      	adds	r3, r7, r6
 800985a:	2200      	movs	r2, #0
 800985c:	5e9b      	ldrsh	r3, [r3, r2]
 800985e:	e020      	b.n	80098a2 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009860:	4b13      	ldr	r3, [pc, #76]	@ (80098b0 <sen5x_read_data_ready+0xa0>)
 8009862:	0018      	movs	r0, r3
 8009864:	f7ff fda6 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009868:	250c      	movs	r5, #12
 800986a:	197c      	adds	r4, r7, r5
 800986c:	2308      	movs	r3, #8
 800986e:	18fb      	adds	r3, r7, r3
 8009870:	2202      	movs	r2, #2
 8009872:	0019      	movs	r1, r3
 8009874:	2069      	movs	r0, #105	@ 0x69
 8009876:	f001 fb3d 	bl	800aef4 <sensirion_i2c_read_data_inplace>
 800987a:	0003      	movs	r3, r0
 800987c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800987e:	197b      	adds	r3, r7, r5
 8009880:	2200      	movs	r2, #0
 8009882:	5e9b      	ldrsh	r3, [r3, r2]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <sen5x_read_data_ready+0x80>
        return error;
 8009888:	197b      	adds	r3, r7, r5
 800988a:	2200      	movs	r2, #0
 800988c:	5e9b      	ldrsh	r3, [r3, r2]
 800988e:	e008      	b.n	80098a2 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009890:	2308      	movs	r3, #8
 8009892:	18fb      	adds	r3, r7, r3
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	1e5a      	subs	r2, r3, #1
 8009898:	4193      	sbcs	r3, r2
 800989a:	b2da      	uxtb	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b005      	add	sp, #20
 80098a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098aa:	46c0      	nop			@ (mov r8, r8)
 80098ac:	00000202 	.word	0x00000202
 80098b0:	00004e20 	.word	0x00004e20

080098b4 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	b08d      	sub	sp, #52	@ 0x34
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 80098c2:	252e      	movs	r5, #46	@ 0x2e
 80098c4:	197b      	adds	r3, r7, r5
 80098c6:	2200      	movs	r2, #0
 80098c8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 80098ca:	197c      	adds	r4, r7, r5
 80098cc:	23f1      	movs	r3, #241	@ 0xf1
 80098ce:	009a      	lsls	r2, r3, #2
 80098d0:	197b      	adds	r3, r7, r5
 80098d2:	8819      	ldrh	r1, [r3, #0]
 80098d4:	2314      	movs	r3, #20
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	0018      	movs	r0, r3
 80098da:	f001 fa6f 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 80098de:	0003      	movs	r3, r0
 80098e0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80098e2:	262c      	movs	r6, #44	@ 0x2c
 80098e4:	19bc      	adds	r4, r7, r6
 80098e6:	197b      	adds	r3, r7, r5
 80098e8:	881a      	ldrh	r2, [r3, #0]
 80098ea:	2314      	movs	r3, #20
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	0019      	movs	r1, r3
 80098f0:	2069      	movs	r0, #105	@ 0x69
 80098f2:	f001 fae7 	bl	800aec4 <sensirion_i2c_write_data>
 80098f6:	0003      	movs	r3, r0
 80098f8:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098fa:	19bb      	adds	r3, r7, r6
 80098fc:	2200      	movs	r2, #0
 80098fe:	5e9b      	ldrsh	r3, [r3, r2]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <sen5x_read_measured_values+0x58>
        return error;
 8009904:	19bb      	adds	r3, r7, r6
 8009906:	2200      	movs	r2, #0
 8009908:	5e9b      	ldrsh	r3, [r3, r2]
 800990a:	e060      	b.n	80099ce <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800990c:	4b32      	ldr	r3, [pc, #200]	@ (80099d8 <sen5x_read_measured_values+0x124>)
 800990e:	0018      	movs	r0, r3
 8009910:	f7ff fd50 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009914:	252c      	movs	r5, #44	@ 0x2c
 8009916:	197c      	adds	r4, r7, r5
 8009918:	2314      	movs	r3, #20
 800991a:	18fb      	adds	r3, r7, r3
 800991c:	2210      	movs	r2, #16
 800991e:	0019      	movs	r1, r3
 8009920:	2069      	movs	r0, #105	@ 0x69
 8009922:	f001 fae7 	bl	800aef4 <sensirion_i2c_read_data_inplace>
 8009926:	0003      	movs	r3, r0
 8009928:	8023      	strh	r3, [r4, #0]
    if (error) {
 800992a:	197b      	adds	r3, r7, r5
 800992c:	2200      	movs	r2, #0
 800992e:	5e9b      	ldrsh	r3, [r3, r2]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <sen5x_read_measured_values+0x88>
        return error;
 8009934:	197b      	adds	r3, r7, r5
 8009936:	2200      	movs	r2, #0
 8009938:	5e9b      	ldrsh	r3, [r3, r2]
 800993a:	e048      	b.n	80099ce <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800993c:	2414      	movs	r4, #20
 800993e:	193b      	adds	r3, r7, r4
 8009940:	0018      	movs	r0, r3
 8009942:	f000 fa79 	bl	8009e38 <sensirion_common_bytes_to_uint16_t>
 8009946:	0003      	movs	r3, r0
 8009948:	001a      	movs	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800994e:	193b      	adds	r3, r7, r4
 8009950:	3302      	adds	r3, #2
 8009952:	0018      	movs	r0, r3
 8009954:	f000 fa70 	bl	8009e38 <sensirion_common_bytes_to_uint16_t>
 8009958:	0003      	movs	r3, r0
 800995a:	001a      	movs	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009960:	193b      	adds	r3, r7, r4
 8009962:	3304      	adds	r3, #4
 8009964:	0018      	movs	r0, r3
 8009966:	f000 fa67 	bl	8009e38 <sensirion_common_bytes_to_uint16_t>
 800996a:	0003      	movs	r3, r0
 800996c:	001a      	movs	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009972:	193b      	adds	r3, r7, r4
 8009974:	3306      	adds	r3, #6
 8009976:	0018      	movs	r0, r3
 8009978:	f000 fa5e 	bl	8009e38 <sensirion_common_bytes_to_uint16_t>
 800997c:	0003      	movs	r3, r0
 800997e:	001a      	movs	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009984:	193b      	adds	r3, r7, r4
 8009986:	3308      	adds	r3, #8
 8009988:	0018      	movs	r0, r3
 800998a:	f000 fa81 	bl	8009e90 <sensirion_common_bytes_to_int16_t>
 800998e:	0003      	movs	r3, r0
 8009990:	001a      	movs	r2, r3
 8009992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009994:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009996:	193b      	adds	r3, r7, r4
 8009998:	330a      	adds	r3, #10
 800999a:	0018      	movs	r0, r3
 800999c:	f000 fa78 	bl	8009e90 <sensirion_common_bytes_to_int16_t>
 80099a0:	0003      	movs	r3, r0
 80099a2:	001a      	movs	r2, r3
 80099a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a6:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 80099a8:	193b      	adds	r3, r7, r4
 80099aa:	330c      	adds	r3, #12
 80099ac:	0018      	movs	r0, r3
 80099ae:	f000 fa6f 	bl	8009e90 <sensirion_common_bytes_to_int16_t>
 80099b2:	0003      	movs	r3, r0
 80099b4:	001a      	movs	r2, r3
 80099b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099b8:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 80099ba:	193b      	adds	r3, r7, r4
 80099bc:	330e      	adds	r3, #14
 80099be:	0018      	movs	r0, r3
 80099c0:	f000 fa66 	bl	8009e90 <sensirion_common_bytes_to_int16_t>
 80099c4:	0003      	movs	r3, r0
 80099c6:	001a      	movs	r2, r3
 80099c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099ca:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	0018      	movs	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b00d      	add	sp, #52	@ 0x34
 80099d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d6:	46c0      	nop			@ (mov r8, r8)
 80099d8:	00004e20 	.word	0x00004e20

080099dc <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80099e2:	1dbb      	adds	r3, r7, #6
 80099e4:	2200      	movs	r2, #0
 80099e6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 80099e8:	1dbc      	adds	r4, r7, #6
 80099ea:	4a12      	ldr	r2, [pc, #72]	@ (8009a34 <sen5x_start_fan_cleaning+0x58>)
 80099ec:	1dbb      	adds	r3, r7, #6
 80099ee:	8819      	ldrh	r1, [r3, #0]
 80099f0:	003b      	movs	r3, r7
 80099f2:	0018      	movs	r0, r3
 80099f4:	f001 f9e2 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 80099f8:	0003      	movs	r3, r0
 80099fa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80099fc:	1d3c      	adds	r4, r7, #4
 80099fe:	1dbb      	adds	r3, r7, #6
 8009a00:	881a      	ldrh	r2, [r3, #0]
 8009a02:	003b      	movs	r3, r7
 8009a04:	0019      	movs	r1, r3
 8009a06:	2069      	movs	r0, #105	@ 0x69
 8009a08:	f001 fa5c 	bl	800aec4 <sensirion_i2c_write_data>
 8009a0c:	0003      	movs	r3, r0
 8009a0e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a10:	1d3b      	adds	r3, r7, #4
 8009a12:	2200      	movs	r2, #0
 8009a14:	5e9b      	ldrsh	r3, [r3, r2]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <sen5x_start_fan_cleaning+0x46>
        return error;
 8009a1a:	1d3b      	adds	r3, r7, #4
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	5e9b      	ldrsh	r3, [r3, r2]
 8009a20:	e004      	b.n	8009a2c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009a22:	4b05      	ldr	r3, [pc, #20]	@ (8009a38 <sen5x_start_fan_cleaning+0x5c>)
 8009a24:	0018      	movs	r0, r3
 8009a26:	f7ff fcc5 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	b003      	add	sp, #12
 8009a32:	bd90      	pop	{r4, r7, pc}
 8009a34:	00005607 	.word	0x00005607
 8009a38:	00004e20 	.word	0x00004e20

08009a3c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8009a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	0004      	movs	r4, r0
 8009a44:	0008      	movs	r0, r1
 8009a46:	0011      	movs	r1, r2
 8009a48:	1dbb      	adds	r3, r7, #6
 8009a4a:	1c22      	adds	r2, r4, #0
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	1d3b      	adds	r3, r7, #4
 8009a50:	1c02      	adds	r2, r0, #0
 8009a52:	801a      	strh	r2, [r3, #0]
 8009a54:	1cbb      	adds	r3, r7, #2
 8009a56:	1c0a      	adds	r2, r1, #0
 8009a58:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009a5a:	2516      	movs	r5, #22
 8009a5c:	197b      	adds	r3, r7, r5
 8009a5e:	2200      	movs	r2, #0
 8009a60:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 8009a62:	197c      	adds	r4, r7, r5
 8009a64:	4a25      	ldr	r2, [pc, #148]	@ (8009afc <sen5x_set_temperature_offset_parameters+0xc0>)
 8009a66:	197b      	adds	r3, r7, r5
 8009a68:	8819      	ldrh	r1, [r3, #0]
 8009a6a:	2608      	movs	r6, #8
 8009a6c:	19bb      	adds	r3, r7, r6
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f001 f9a4 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009a74:	0003      	movs	r3, r0
 8009a76:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009a78:	197c      	adds	r4, r7, r5
 8009a7a:	1dbb      	adds	r3, r7, #6
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	5e9a      	ldrsh	r2, [r3, r2]
 8009a80:	197b      	adds	r3, r7, r5
 8009a82:	8819      	ldrh	r1, [r3, #0]
 8009a84:	19bb      	adds	r3, r7, r6
 8009a86:	0018      	movs	r0, r3
 8009a88:	f001 fa03 	bl	800ae92 <sensirion_i2c_add_int16_t_to_buffer>
 8009a8c:	0003      	movs	r3, r0
 8009a8e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009a90:	197c      	adds	r4, r7, r5
 8009a92:	1d3b      	adds	r3, r7, #4
 8009a94:	2200      	movs	r2, #0
 8009a96:	5e9a      	ldrsh	r2, [r3, r2]
 8009a98:	197b      	adds	r3, r7, r5
 8009a9a:	8819      	ldrh	r1, [r3, #0]
 8009a9c:	19bb      	adds	r3, r7, r6
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f001 f9f7 	bl	800ae92 <sensirion_i2c_add_int16_t_to_buffer>
 8009aa4:	0003      	movs	r3, r0
 8009aa6:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009aa8:	197c      	adds	r4, r7, r5
 8009aaa:	1cbb      	adds	r3, r7, #2
 8009aac:	881a      	ldrh	r2, [r3, #0]
 8009aae:	197b      	adds	r3, r7, r5
 8009ab0:	8819      	ldrh	r1, [r3, #0]
 8009ab2:	19bb      	adds	r3, r7, r6
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f001 f9ad 	bl	800ae14 <sensirion_i2c_add_uint16_t_to_buffer>
 8009aba:	0003      	movs	r3, r0
 8009abc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009abe:	2214      	movs	r2, #20
 8009ac0:	18bc      	adds	r4, r7, r2
 8009ac2:	197b      	adds	r3, r7, r5
 8009ac4:	881a      	ldrh	r2, [r3, #0]
 8009ac6:	19bb      	adds	r3, r7, r6
 8009ac8:	0019      	movs	r1, r3
 8009aca:	2069      	movs	r0, #105	@ 0x69
 8009acc:	f001 f9fa 	bl	800aec4 <sensirion_i2c_write_data>
 8009ad0:	0003      	movs	r3, r0
 8009ad2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ad4:	2214      	movs	r2, #20
 8009ad6:	18bb      	adds	r3, r7, r2
 8009ad8:	2100      	movs	r1, #0
 8009ada:	5e5b      	ldrsh	r3, [r3, r1]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8009ae0:	18bb      	adds	r3, r7, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	5e9b      	ldrsh	r3, [r3, r2]
 8009ae6:	e004      	b.n	8009af2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009ae8:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <sen5x_set_temperature_offset_parameters+0xc4>)
 8009aea:	0018      	movs	r0, r3
 8009aec:	f7ff fc62 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	0018      	movs	r0, r3
 8009af4:	46bd      	mov	sp, r7
 8009af6:	b007      	add	sp, #28
 8009af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afa:	46c0      	nop			@ (mov r8, r8)
 8009afc:	000060b2 	.word	0x000060b2
 8009b00:	00004e20 	.word	0x00004e20

08009b04 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b06:	b091      	sub	sp, #68	@ 0x44
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	000a      	movs	r2, r1
 8009b0e:	1cfb      	adds	r3, r7, #3
 8009b10:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009b12:	253e      	movs	r5, #62	@ 0x3e
 8009b14:	197b      	adds	r3, r7, r5
 8009b16:	2200      	movs	r2, #0
 8009b18:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009b1a:	197c      	adds	r4, r7, r5
 8009b1c:	4a22      	ldr	r2, [pc, #136]	@ (8009ba8 <sen5x_get_product_name+0xa4>)
 8009b1e:	197b      	adds	r3, r7, r5
 8009b20:	8819      	ldrh	r1, [r3, #0]
 8009b22:	230c      	movs	r3, #12
 8009b24:	18fb      	adds	r3, r7, r3
 8009b26:	0018      	movs	r0, r3
 8009b28:	f001 f948 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009b2c:	0003      	movs	r3, r0
 8009b2e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b30:	263c      	movs	r6, #60	@ 0x3c
 8009b32:	19bc      	adds	r4, r7, r6
 8009b34:	197b      	adds	r3, r7, r5
 8009b36:	881a      	ldrh	r2, [r3, #0]
 8009b38:	230c      	movs	r3, #12
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	0019      	movs	r1, r3
 8009b3e:	2069      	movs	r0, #105	@ 0x69
 8009b40:	f001 f9c0 	bl	800aec4 <sensirion_i2c_write_data>
 8009b44:	0003      	movs	r3, r0
 8009b46:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b48:	19bb      	adds	r3, r7, r6
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	5e9b      	ldrsh	r3, [r3, r2]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <sen5x_get_product_name+0x56>
        return error;
 8009b52:	19bb      	adds	r3, r7, r6
 8009b54:	2200      	movs	r2, #0
 8009b56:	5e9b      	ldrsh	r3, [r3, r2]
 8009b58:	e021      	b.n	8009b9e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009b5a:	4b14      	ldr	r3, [pc, #80]	@ (8009bac <sen5x_get_product_name+0xa8>)
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f7ff fc29 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009b62:	253c      	movs	r5, #60	@ 0x3c
 8009b64:	197c      	adds	r4, r7, r5
 8009b66:	230c      	movs	r3, #12
 8009b68:	18fb      	adds	r3, r7, r3
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	0019      	movs	r1, r3
 8009b6e:	2069      	movs	r0, #105	@ 0x69
 8009b70:	f001 f9c0 	bl	800aef4 <sensirion_i2c_read_data_inplace>
 8009b74:	0003      	movs	r3, r0
 8009b76:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b78:	197b      	adds	r3, r7, r5
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	5e9b      	ldrsh	r3, [r3, r2]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <sen5x_get_product_name+0x86>
        return error;
 8009b82:	197b      	adds	r3, r7, r5
 8009b84:	2200      	movs	r2, #0
 8009b86:	5e9b      	ldrsh	r3, [r3, r2]
 8009b88:	e009      	b.n	8009b9e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009b8a:	1cfb      	adds	r3, r7, #3
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	230c      	movs	r3, #12
 8009b94:	18fb      	adds	r3, r7, r3
 8009b96:	0018      	movs	r0, r3
 8009b98:	f000 f988 	bl	8009eac <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	b011      	add	sp, #68	@ 0x44
 8009ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba6:	46c0      	nop			@ (mov r8, r8)
 8009ba8:	0000d014 	.word	0x0000d014
 8009bac:	0000c350 	.word	0x0000c350

08009bb0 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bb2:	b091      	sub	sp, #68	@ 0x44
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	000a      	movs	r2, r1
 8009bba:	1cfb      	adds	r3, r7, #3
 8009bbc:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009bbe:	253e      	movs	r5, #62	@ 0x3e
 8009bc0:	197b      	adds	r3, r7, r5
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009bc6:	197c      	adds	r4, r7, r5
 8009bc8:	4a22      	ldr	r2, [pc, #136]	@ (8009c54 <sen5x_get_serial_number+0xa4>)
 8009bca:	197b      	adds	r3, r7, r5
 8009bcc:	8819      	ldrh	r1, [r3, #0]
 8009bce:	230c      	movs	r3, #12
 8009bd0:	18fb      	adds	r3, r7, r3
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f001 f8f2 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009bd8:	0003      	movs	r3, r0
 8009bda:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009bdc:	263c      	movs	r6, #60	@ 0x3c
 8009bde:	19bc      	adds	r4, r7, r6
 8009be0:	197b      	adds	r3, r7, r5
 8009be2:	881a      	ldrh	r2, [r3, #0]
 8009be4:	230c      	movs	r3, #12
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	0019      	movs	r1, r3
 8009bea:	2069      	movs	r0, #105	@ 0x69
 8009bec:	f001 f96a 	bl	800aec4 <sensirion_i2c_write_data>
 8009bf0:	0003      	movs	r3, r0
 8009bf2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009bf4:	19bb      	adds	r3, r7, r6
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	5e9b      	ldrsh	r3, [r3, r2]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <sen5x_get_serial_number+0x56>
        return error;
 8009bfe:	19bb      	adds	r3, r7, r6
 8009c00:	2200      	movs	r2, #0
 8009c02:	5e9b      	ldrsh	r3, [r3, r2]
 8009c04:	e021      	b.n	8009c4a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009c06:	4b14      	ldr	r3, [pc, #80]	@ (8009c58 <sen5x_get_serial_number+0xa8>)
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f7ff fbd3 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009c0e:	253c      	movs	r5, #60	@ 0x3c
 8009c10:	197c      	adds	r4, r7, r5
 8009c12:	230c      	movs	r3, #12
 8009c14:	18fb      	adds	r3, r7, r3
 8009c16:	2220      	movs	r2, #32
 8009c18:	0019      	movs	r1, r3
 8009c1a:	2069      	movs	r0, #105	@ 0x69
 8009c1c:	f001 f96a 	bl	800aef4 <sensirion_i2c_read_data_inplace>
 8009c20:	0003      	movs	r3, r0
 8009c22:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c24:	197b      	adds	r3, r7, r5
 8009c26:	2200      	movs	r2, #0
 8009c28:	5e9b      	ldrsh	r3, [r3, r2]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <sen5x_get_serial_number+0x86>
        return error;
 8009c2e:	197b      	adds	r3, r7, r5
 8009c30:	2200      	movs	r2, #0
 8009c32:	5e9b      	ldrsh	r3, [r3, r2]
 8009c34:	e009      	b.n	8009c4a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009c36:	1cfb      	adds	r3, r7, #3
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	230c      	movs	r3, #12
 8009c40:	18fb      	adds	r3, r7, r3
 8009c42:	0018      	movs	r0, r3
 8009c44:	f000 f932 	bl	8009eac <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	b011      	add	sp, #68	@ 0x44
 8009c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c52:	46c0      	nop			@ (mov r8, r8)
 8009c54:	0000d033 	.word	0x0000d033
 8009c58:	0000c350 	.word	0x0000c350

08009c5c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5e:	b089      	sub	sp, #36	@ 0x24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009c6a:	251e      	movs	r5, #30
 8009c6c:	197b      	adds	r3, r7, r5
 8009c6e:	2200      	movs	r2, #0
 8009c70:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009c72:	197c      	adds	r4, r7, r5
 8009c74:	23d1      	movs	r3, #209	@ 0xd1
 8009c76:	021a      	lsls	r2, r3, #8
 8009c78:	197b      	adds	r3, r7, r5
 8009c7a:	8819      	ldrh	r1, [r3, #0]
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	18fb      	adds	r3, r7, r3
 8009c80:	0018      	movs	r0, r3
 8009c82:	f001 f89b 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009c86:	0003      	movs	r3, r0
 8009c88:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c8a:	261c      	movs	r6, #28
 8009c8c:	19bc      	adds	r4, r7, r6
 8009c8e:	197b      	adds	r3, r7, r5
 8009c90:	881a      	ldrh	r2, [r3, #0]
 8009c92:	2310      	movs	r3, #16
 8009c94:	18fb      	adds	r3, r7, r3
 8009c96:	0019      	movs	r1, r3
 8009c98:	2069      	movs	r0, #105	@ 0x69
 8009c9a:	f001 f913 	bl	800aec4 <sensirion_i2c_write_data>
 8009c9e:	0003      	movs	r3, r0
 8009ca0:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ca2:	19bb      	adds	r3, r7, r6
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <sen5x_get_version+0x58>
        return error;
 8009cac:	19bb      	adds	r3, r7, r6
 8009cae:	2200      	movs	r2, #0
 8009cb0:	5e9b      	ldrsh	r3, [r3, r2]
 8009cb2:	e038      	b.n	8009d26 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8009d30 <sen5x_get_version+0xd4>)
 8009cb6:	0018      	movs	r0, r3
 8009cb8:	f7ff fb7c 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009cbc:	251c      	movs	r5, #28
 8009cbe:	197c      	adds	r4, r7, r5
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	2208      	movs	r2, #8
 8009cc6:	0019      	movs	r1, r3
 8009cc8:	2069      	movs	r0, #105	@ 0x69
 8009cca:	f001 f913 	bl	800aef4 <sensirion_i2c_read_data_inplace>
 8009cce:	0003      	movs	r3, r0
 8009cd0:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009cd2:	197b      	adds	r3, r7, r5
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	5e9b      	ldrsh	r3, [r3, r2]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <sen5x_get_version+0x88>
        return error;
 8009cdc:	197b      	adds	r3, r7, r5
 8009cde:	2200      	movs	r2, #0
 8009ce0:	5e9b      	ldrsh	r3, [r3, r2]
 8009ce2:	e020      	b.n	8009d26 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009ce4:	2110      	movs	r1, #16
 8009ce6:	187b      	adds	r3, r7, r1
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009cee:	187b      	adds	r3, r7, r1
 8009cf0:	785a      	ldrb	r2, [r3, #1]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009cf6:	187b      	adds	r3, r7, r1
 8009cf8:	789b      	ldrb	r3, [r3, #2]
 8009cfa:	1e5a      	subs	r2, r3, #1
 8009cfc:	4193      	sbcs	r3, r2
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009d04:	187b      	adds	r3, r7, r1
 8009d06:	78da      	ldrb	r2, [r3, #3]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009d0c:	187b      	adds	r3, r7, r1
 8009d0e:	791a      	ldrb	r2, [r3, #4]
 8009d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d12:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009d14:	187b      	adds	r3, r7, r1
 8009d16:	795a      	ldrb	r2, [r3, #5]
 8009d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1a:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009d1c:	187b      	adds	r3, r7, r1
 8009d1e:	799a      	ldrb	r2, [r3, #6]
 8009d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d22:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	0018      	movs	r0, r3
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	b009      	add	sp, #36	@ 0x24
 8009d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d2e:	46c0      	nop			@ (mov r8, r8)
 8009d30:	00004e20 	.word	0x00004e20

08009d34 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009d3c:	2516      	movs	r5, #22
 8009d3e:	197b      	adds	r3, r7, r5
 8009d40:	2200      	movs	r2, #0
 8009d42:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009d44:	197c      	adds	r4, r7, r5
 8009d46:	4a22      	ldr	r2, [pc, #136]	@ (8009dd0 <sen5x_read_device_status+0x9c>)
 8009d48:	197b      	adds	r3, r7, r5
 8009d4a:	8819      	ldrh	r1, [r3, #0]
 8009d4c:	230c      	movs	r3, #12
 8009d4e:	18fb      	adds	r3, r7, r3
 8009d50:	0018      	movs	r0, r3
 8009d52:	f001 f833 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009d56:	0003      	movs	r3, r0
 8009d58:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d5a:	2614      	movs	r6, #20
 8009d5c:	19bc      	adds	r4, r7, r6
 8009d5e:	197b      	adds	r3, r7, r5
 8009d60:	881a      	ldrh	r2, [r3, #0]
 8009d62:	230c      	movs	r3, #12
 8009d64:	18fb      	adds	r3, r7, r3
 8009d66:	0019      	movs	r1, r3
 8009d68:	2069      	movs	r0, #105	@ 0x69
 8009d6a:	f001 f8ab 	bl	800aec4 <sensirion_i2c_write_data>
 8009d6e:	0003      	movs	r3, r0
 8009d70:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d72:	19bb      	adds	r3, r7, r6
 8009d74:	2200      	movs	r2, #0
 8009d76:	5e9b      	ldrsh	r3, [r3, r2]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <sen5x_read_device_status+0x50>
        return error;
 8009d7c:	19bb      	adds	r3, r7, r6
 8009d7e:	2200      	movs	r2, #0
 8009d80:	5e9b      	ldrsh	r3, [r3, r2]
 8009d82:	e020      	b.n	8009dc6 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009d84:	4b13      	ldr	r3, [pc, #76]	@ (8009dd4 <sen5x_read_device_status+0xa0>)
 8009d86:	0018      	movs	r0, r3
 8009d88:	f7ff fb14 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009d8c:	2514      	movs	r5, #20
 8009d8e:	197c      	adds	r4, r7, r5
 8009d90:	230c      	movs	r3, #12
 8009d92:	18fb      	adds	r3, r7, r3
 8009d94:	2204      	movs	r2, #4
 8009d96:	0019      	movs	r1, r3
 8009d98:	2069      	movs	r0, #105	@ 0x69
 8009d9a:	f001 f8ab 	bl	800aef4 <sensirion_i2c_read_data_inplace>
 8009d9e:	0003      	movs	r3, r0
 8009da0:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009da2:	197b      	adds	r3, r7, r5
 8009da4:	2200      	movs	r2, #0
 8009da6:	5e9b      	ldrsh	r3, [r3, r2]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <sen5x_read_device_status+0x80>
        return error;
 8009dac:	197b      	adds	r3, r7, r5
 8009dae:	2200      	movs	r2, #0
 8009db0:	5e9b      	ldrsh	r3, [r3, r2]
 8009db2:	e008      	b.n	8009dc6 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009db4:	230c      	movs	r3, #12
 8009db6:	18fb      	adds	r3, r7, r3
 8009db8:	0018      	movs	r0, r3
 8009dba:	f000 f850 	bl	8009e5e <sensirion_common_bytes_to_uint32_t>
 8009dbe:	0002      	movs	r2, r0
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	b007      	add	sp, #28
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	46c0      	nop			@ (mov r8, r8)
 8009dd0:	0000d206 	.word	0x0000d206
 8009dd4:	00004e20 	.word	0x00004e20

08009dd8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009dd8:	b590      	push	{r4, r7, lr}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009dde:	1dbb      	adds	r3, r7, #6
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009de4:	1dbc      	adds	r4, r7, #6
 8009de6:	4a12      	ldr	r2, [pc, #72]	@ (8009e30 <sen5x_device_reset+0x58>)
 8009de8:	1dbb      	adds	r3, r7, #6
 8009dea:	8819      	ldrh	r1, [r3, #0]
 8009dec:	003b      	movs	r3, r7
 8009dee:	0018      	movs	r0, r3
 8009df0:	f000 ffe4 	bl	800adbc <sensirion_i2c_add_command_to_buffer>
 8009df4:	0003      	movs	r3, r0
 8009df6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009df8:	1d3c      	adds	r4, r7, #4
 8009dfa:	1dbb      	adds	r3, r7, #6
 8009dfc:	881a      	ldrh	r2, [r3, #0]
 8009dfe:	003b      	movs	r3, r7
 8009e00:	0019      	movs	r1, r3
 8009e02:	2069      	movs	r0, #105	@ 0x69
 8009e04:	f001 f85e 	bl	800aec4 <sensirion_i2c_write_data>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e0c:	1d3b      	adds	r3, r7, #4
 8009e0e:	2200      	movs	r2, #0
 8009e10:	5e9b      	ldrsh	r3, [r3, r2]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <sen5x_device_reset+0x46>
        return error;
 8009e16:	1d3b      	adds	r3, r7, #4
 8009e18:	2200      	movs	r2, #0
 8009e1a:	5e9b      	ldrsh	r3, [r3, r2]
 8009e1c:	e004      	b.n	8009e28 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009e1e:	4b05      	ldr	r3, [pc, #20]	@ (8009e34 <sen5x_device_reset+0x5c>)
 8009e20:	0018      	movs	r0, r3
 8009e22:	f7ff fac7 	bl	80093b4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	0018      	movs	r0, r3
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	b003      	add	sp, #12
 8009e2e:	bd90      	pop	{r4, r7, pc}
 8009e30:	0000d304 	.word	0x0000d304
 8009e34:	00030d40 	.word	0x00030d40

08009e38 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	021b      	lsls	r3, r3, #8
 8009e46:	b21a      	sxth	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b21b      	sxth	r3, r3
 8009e50:	4313      	orrs	r3, r2
 8009e52:	b21b      	sxth	r3, r3
 8009e54:	b29b      	uxth	r3, r3
}
 8009e56:	0018      	movs	r0, r3
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b002      	add	sp, #8
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	061a      	lsls	r2, r3, #24
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	041b      	lsls	r3, r3, #16
 8009e74:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3302      	adds	r3, #2
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009e7e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	3203      	adds	r2, #3
 8009e84:	7812      	ldrb	r2, [r2, #0]
 8009e86:	4313      	orrs	r3, r2
}
 8009e88:	0018      	movs	r0, r3
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	b002      	add	sp, #8
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	0018      	movs	r0, r3
 8009e9c:	f7ff ffcc 	bl	8009e38 <sensirion_common_bytes_to_uint16_t>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	b21b      	sxth	r3, r3
}
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	b002      	add	sp, #8
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	1dbb      	adds	r3, r7, #6
 8009eb8:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009eba:	2316      	movs	r3, #22
 8009ebc:	18fb      	adds	r3, r7, r3
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e00f      	b.n	8009ee4 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009ec4:	2016      	movs	r0, #22
 8009ec6:	183b      	adds	r3, r7, r0
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	18d2      	adds	r2, r2, r3
 8009ece:	183b      	adds	r3, r7, r0
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	18cb      	adds	r3, r1, r3
 8009ed6:	7812      	ldrb	r2, [r2, #0]
 8009ed8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009eda:	183b      	adds	r3, r7, r0
 8009edc:	881a      	ldrh	r2, [r3, #0]
 8009ede:	183b      	adds	r3, r7, r0
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	2316      	movs	r3, #22
 8009ee6:	18fa      	adds	r2, r7, r3
 8009ee8:	1dbb      	adds	r3, r7, #6
 8009eea:	8812      	ldrh	r2, [r2, #0]
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d3e8      	bcc.n	8009ec4 <sensirion_common_copy_bytes+0x18>
    }
}
 8009ef2:	46c0      	nop			@ (mov r8, r8)
 8009ef4:	46c0      	nop			@ (mov r8, r8)
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b006      	add	sp, #24
 8009efa:	bd80      	pop	{r7, pc}

08009efc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d113      	bne.n	8009f42 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	22fe      	movs	r2, #254	@ 0xfe
 8009f1e:	0592      	lsls	r2, r2, #22
 8009f20:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a1a      	ldr	r2, [pc, #104]	@ (8009f90 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009f26:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009f94 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009f2c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4a19      	ldr	r2, [pc, #100]	@ (8009f98 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009f32:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4a19      	ldr	r2, [pc, #100]	@ (8009f9c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009f38:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4a18      	ldr	r2, [pc, #96]	@ (8009fa0 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009f3e:	61da      	str	r2, [r3, #28]
 8009f40:	e011      	b.n	8009f66 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4a17      	ldr	r2, [pc, #92]	@ (8009fa4 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009f46:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4a17      	ldr	r2, [pc, #92]	@ (8009fa8 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009f4c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4a16      	ldr	r2, [pc, #88]	@ (8009fac <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009f52:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4a16      	ldr	r2, [pc, #88]	@ (8009fb0 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009f58:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4a15      	ldr	r2, [pc, #84]	@ (8009fb4 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009f5e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4a15      	ldr	r2, [pc, #84]	@ (8009fb8 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009f64:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4a14      	ldr	r2, [pc, #80]	@ (8009fbc <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009f6a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4a14      	ldr	r2, [pc, #80]	@ (8009fc0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009f70:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4a12      	ldr	r2, [pc, #72]	@ (8009fc0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009f76:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4a12      	ldr	r2, [pc, #72]	@ (8009fc4 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 f831 	bl	8009fe8 <GasIndexAlgorithm_reset>
}
 8009f86:	46c0      	nop			@ (mov r8, r8)
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b004      	add	sp, #16
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	46c0      	nop			@ (mov r8, r8)
 8009f90:	00002710 	.word	0x00002710
 8009f94:	44340000 	.word	0x44340000
 8009f98:	46859800 	.word	0x46859800
 8009f9c:	46a05000 	.word	0x46a05000
 8009fa0:	41f00000 	.word	0x41f00000
 8009fa4:	42c80000 	.word	0x42c80000
 8009fa8:	00004e20 	.word	0x00004e20
 8009fac:	43340000 	.word	0x43340000
 8009fb0:	4528c000 	.word	0x4528c000
 8009fb4:	45a32000 	.word	0x45a32000
 8009fb8:	43aa0000 	.word	0x43aa0000
 8009fbc:	43660000 	.word	0x43660000
 8009fc0:	41400000 	.word	0x41400000
 8009fc4:	42480000 	.word	0x42480000

08009fc8 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009fd2:	22fe      	movs	r2, #254	@ 0xfe
 8009fd4:	0592      	lsls	r2, r2, #22
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7ff ff8e 	bl	8009efc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8009fe0:	46c0      	nop			@ (mov r8, r8)
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	0018      	movs	r0, r3
 800a006:	f000 f805 	bl	800a014 <GasIndexAlgorithm__init_instances>
}
 800a00a:	46c0      	nop			@ (mov r8, r8)
 800a00c:	46bd      	mov	sp, r7
 800a00e:	b002      	add	sp, #8
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a014:	b590      	push	{r4, r7, lr}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	0018      	movs	r0, r3
 800a020:	f000 f8e8 	bl	800a1f4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	0018      	movs	r0, r3
 800a028:	f000 f9a6 	bl	800a378 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a02c:	1c04      	adds	r4, r0, #0
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	0018      	movs	r0, r3
 800a032:	f000 f9ab 	bl	800a38c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a036:	1c02      	adds	r2, r0, #0
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	1c21      	adds	r1, r4, #0
 800a03c:	0018      	movs	r0, r3
 800a03e:	f000 fc3b 	bl	800a8b8 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d107      	bne.n	800a05a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a04a:	23fe      	movs	r3, #254	@ 0xfe
 800a04c:	059b      	lsls	r3, r3, #22
 800a04e:	4a0a      	ldr	r2, [pc, #40]	@ (800a078 <GasIndexAlgorithm__init_instances+0x64>)
 800a050:	490a      	ldr	r1, [pc, #40]	@ (800a07c <GasIndexAlgorithm__init_instances+0x68>)
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fc86 	bl	800a964 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a058:	e005      	b.n	800a066 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a05a:	4b09      	ldr	r3, [pc, #36]	@ (800a080 <GasIndexAlgorithm__init_instances+0x6c>)
 800a05c:	4a09      	ldr	r2, [pc, #36]	@ (800a084 <GasIndexAlgorithm__init_instances+0x70>)
 800a05e:	490a      	ldr	r1, [pc, #40]	@ (800a088 <GasIndexAlgorithm__init_instances+0x74>)
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fc7f 	bl	800a964 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	0018      	movs	r0, r3
 800a06a:	f000 fd35 	bl	800aad8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a06e:	46c0      	nop			@ (mov r8, r8)
 800a070:	46bd      	mov	sp, r7
 800a072:	b003      	add	sp, #12
 800a074:	bd90      	pop	{r4, r7, pc}
 800a076:	46c0      	nop			@ (mov r8, r8)
 800a078:	bc257a78 	.word	0xbc257a78
 800a07c:	44198000 	.word	0x44198000
 800a080:	42c80000 	.word	0x42c80000
 800a084:	bbd4fdf4 	.word	0xbbd4fdf4
 800a088:	43550000 	.word	0x43550000

0800a08c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09c:	4952      	ldr	r1, [pc, #328]	@ (800a1e8 <GasIndexAlgorithm_process+0x15c>)
 800a09e:	1c18      	adds	r0, r3, #0
 800a0a0:	f7f6 fa50 	bl	8000544 <__aeabi_fcmple>
 800a0a4:	1e03      	subs	r3, r0, #0
 800a0a6:	d00c      	beq.n	800a0c2 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	1c19      	adds	r1, r3, #0
 800a0b2:	1c10      	adds	r0, r2, #0
 800a0b4:	f7f6 fc04 	bl	80008c0 <__aeabi_fadd>
 800a0b8:	1c03      	adds	r3, r0, #0
 800a0ba:	1c1a      	adds	r2, r3, #0
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	631a      	str	r2, [r3, #48]	@ 0x30
 800a0c0:	e080      	b.n	800a1c4 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dd25      	ble.n	800a114 <GasIndexAlgorithm_process+0x88>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4a48      	ldr	r2, [pc, #288]	@ (800a1ec <GasIndexAlgorithm_process+0x160>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	dc21      	bgt.n	800a114 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	dc04      	bgt.n	800a0e4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	60bb      	str	r3, [r7, #8]
 800a0e2:	e00d      	b.n	800a100 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	4a41      	ldr	r2, [pc, #260]	@ (800a1f0 <GasIndexAlgorithm_process+0x164>)
 800a0ea:	4694      	mov	ip, r2
 800a0ec:	4463      	add	r3, ip
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	dd05      	ble.n	800a100 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	4a3d      	ldr	r2, [pc, #244]	@ (800a1f0 <GasIndexAlgorithm_process+0x164>)
 800a0fa:	4694      	mov	ip, r2
 800a0fc:	4463      	add	r3, ip
 800a0fe:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	0018      	movs	r0, r3
 800a10a:	f7f7 fa61 	bl	80015d0 <__aeabi_i2f>
 800a10e:	1c02      	adds	r2, r0, #0
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	0018      	movs	r0, r3
 800a120:	f000 f945 	bl	800a3ae <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a124:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a126:	d014      	beq.n	800a152 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	1c11      	adds	r1, r2, #0
 800a130:	0018      	movs	r0, r3
 800a132:	f000 fbd1 	bl	800a8d8 <GasIndexAlgorithm__mox_model__process>
 800a136:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	1c11      	adds	r1, r2, #0
 800a144:	0018      	movs	r0, r3
 800a146:	f000 fc25 	bl	800a994 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a14a:	1c02      	adds	r2, r0, #0
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a150:	e003      	b.n	800a15a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	689a      	ldr	r2, [r3, #8]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1c11      	adds	r1, r2, #0
 800a162:	0018      	movs	r0, r3
 800a164:	f000 fcec 	bl	800ab40 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a168:	1c02      	adds	r2, r0, #0
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a172:	21fc      	movs	r1, #252	@ 0xfc
 800a174:	0589      	lsls	r1, r1, #22
 800a176:	1c18      	adds	r0, r3, #0
 800a178:	f7f6 f9da 	bl	8000530 <__aeabi_fcmplt>
 800a17c:	1e03      	subs	r3, r0, #0
 800a17e:	d003      	beq.n	800a188 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	22fc      	movs	r2, #252	@ 0xfc
 800a184:	0592      	lsls	r2, r2, #22
 800a186:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a18c:	2100      	movs	r1, #0
 800a18e:	1c18      	adds	r0, r3, #0
 800a190:	f7f6 f9e2 	bl	8000558 <__aeabi_fcmpgt>
 800a194:	1e03      	subs	r3, r0, #0
 800a196:	d015      	beq.n	800a1c4 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	1c11      	adds	r1, r2, #0
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f000 fa4f 	bl	800a644 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f000 f8e5 	bl	800a378 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a1ae:	1c04      	adds	r4, r0, #0
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f000 f8ea 	bl	800a38c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a1b8:	1c02      	adds	r2, r0, #0
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	1c21      	adds	r1, r4, #0
 800a1be:	0018      	movs	r0, r3
 800a1c0:	f000 fb7a 	bl	800a8b8 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c8:	21fc      	movs	r1, #252	@ 0xfc
 800a1ca:	0589      	lsls	r1, r1, #22
 800a1cc:	1c18      	adds	r0, r3, #0
 800a1ce:	f7f6 fb77 	bl	80008c0 <__aeabi_fadd>
 800a1d2:	1c03      	adds	r3, r0, #0
 800a1d4:	1c18      	adds	r0, r3, #0
 800a1d6:	f7f7 f9db 	bl	8001590 <__aeabi_f2iz>
 800a1da:	0002      	movs	r2, r0
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	601a      	str	r2, [r3, #0]
    return;
 800a1e0:	46c0      	nop			@ (mov r8, r8)
}
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	b005      	add	sp, #20
 800a1e6:	bd90      	pop	{r4, r7, pc}
 800a1e8:	42340000 	.word	0x42340000
 800a1ec:	0000fde7 	.word	0x0000fde7
 800a1f0:	00007fff 	.word	0x00007fff

0800a1f4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a1f4:	b5b0      	push	{r4, r5, r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	223c      	movs	r2, #60	@ 0x3c
 800a200:	2100      	movs	r1, #0
 800a202:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	4952      	ldr	r1, [pc, #328]	@ (800a368 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a21e:	1c18      	adds	r0, r3, #0
 800a220:	f7f6 fcd8 	bl	8000bd4 <__aeabi_fdiv>
 800a224:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a226:	2188      	movs	r1, #136	@ 0x88
 800a228:	05c9      	lsls	r1, r1, #23
 800a22a:	1c18      	adds	r0, r3, #0
 800a22c:	f7f6 feb8 	bl	8000fa0 <__aeabi_fmul>
 800a230:	1c03      	adds	r3, r0, #0
 800a232:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	494a      	ldr	r1, [pc, #296]	@ (800a368 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a23e:	1c18      	adds	r0, r3, #0
 800a240:	f7f6 fcc8 	bl	8000bd4 <__aeabi_fdiv>
 800a244:	1c03      	adds	r3, r0, #0
 800a246:	1c19      	adds	r1, r3, #0
 800a248:	1c20      	adds	r0, r4, #0
 800a24a:	f7f6 fb39 	bl	80008c0 <__aeabi_fadd>
 800a24e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a250:	1c19      	adds	r1, r3, #0
 800a252:	1c28      	adds	r0, r5, #0
 800a254:	f7f6 fcbe 	bl	8000bd4 <__aeabi_fdiv>
 800a258:	1c03      	adds	r3, r0, #0
 800a25a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	4940      	ldr	r1, [pc, #256]	@ (800a368 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a266:	1c18      	adds	r0, r3, #0
 800a268:	f7f6 fcb4 	bl	8000bd4 <__aeabi_fdiv>
 800a26c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a26e:	2185      	movs	r1, #133	@ 0x85
 800a270:	05c9      	lsls	r1, r1, #23
 800a272:	1c18      	adds	r0, r3, #0
 800a274:	f7f6 fe94 	bl	8000fa0 <__aeabi_fmul>
 800a278:	1c03      	adds	r3, r0, #0
 800a27a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	4938      	ldr	r1, [pc, #224]	@ (800a368 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a286:	1c18      	adds	r0, r3, #0
 800a288:	f7f6 fca4 	bl	8000bd4 <__aeabi_fdiv>
 800a28c:	1c03      	adds	r3, r0, #0
 800a28e:	1c19      	adds	r1, r3, #0
 800a290:	1c20      	adds	r0, r4, #0
 800a292:	f7f6 fb15 	bl	80008c0 <__aeabi_fadd>
 800a296:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a298:	1c19      	adds	r1, r3, #0
 800a29a:	1c28      	adds	r0, r5, #0
 800a29c:	f7f6 fc9a 	bl	8000bd4 <__aeabi_fdiv>
 800a2a0:	1c03      	adds	r3, r0, #0
 800a2a2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d118      	bne.n	800a2e2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a2b4:	2188      	movs	r1, #136	@ 0x88
 800a2b6:	05c9      	lsls	r1, r1, #23
 800a2b8:	1c18      	adds	r0, r3, #0
 800a2ba:	f7f6 fe71 	bl	8000fa0 <__aeabi_fmul>
 800a2be:	1c03      	adds	r3, r0, #0
 800a2c0:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a2c6:	4929      	ldr	r1, [pc, #164]	@ (800a36c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a2c8:	1c18      	adds	r0, r3, #0
 800a2ca:	f7f6 faf9 	bl	80008c0 <__aeabi_fadd>
 800a2ce:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a2d0:	1c19      	adds	r1, r3, #0
 800a2d2:	1c20      	adds	r0, r4, #0
 800a2d4:	f7f6 fc7e 	bl	8000bd4 <__aeabi_fdiv>
 800a2d8:	1c03      	adds	r3, r0, #0
 800a2da:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2e0:	e017      	b.n	800a312 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a2e6:	2188      	movs	r1, #136	@ 0x88
 800a2e8:	05c9      	lsls	r1, r1, #23
 800a2ea:	1c18      	adds	r0, r3, #0
 800a2ec:	f7f6 fe58 	bl	8000fa0 <__aeabi_fmul>
 800a2f0:	1c03      	adds	r3, r0, #0
 800a2f2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a2f8:	491d      	ldr	r1, [pc, #116]	@ (800a370 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a2fa:	1c18      	adds	r0, r3, #0
 800a2fc:	f7f6 fae0 	bl	80008c0 <__aeabi_fadd>
 800a300:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a302:	1c19      	adds	r1, r3, #0
 800a304:	1c20      	adds	r0, r4, #0
 800a306:	f7f6 fc65 	bl	8000bd4 <__aeabi_fdiv>
 800a30a:	1c03      	adds	r3, r0, #0
 800a30c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a316:	2185      	movs	r1, #133	@ 0x85
 800a318:	05c9      	lsls	r1, r1, #23
 800a31a:	1c18      	adds	r0, r3, #0
 800a31c:	f7f6 fe40 	bl	8000fa0 <__aeabi_fmul>
 800a320:	1c03      	adds	r3, r0, #0
 800a322:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4912      	ldr	r1, [pc, #72]	@ (800a374 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a32a:	1c18      	adds	r0, r3, #0
 800a32c:	f7f6 fac8 	bl	80008c0 <__aeabi_fadd>
 800a330:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a332:	1c19      	adds	r1, r3, #0
 800a334:	1c20      	adds	r0, r4, #0
 800a336:	f7f6 fc4d 	bl	8000bd4 <__aeabi_fdiv>
 800a33a:	1c03      	adds	r3, r0, #0
 800a33c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a360:	46c0      	nop			@ (mov r8, r8)
 800a362:	46bd      	mov	sp, r7
 800a364:	b002      	add	sp, #8
 800a366:	bdb0      	pop	{r4, r5, r7, pc}
 800a368:	45610000 	.word	0x45610000
 800a36c:	44960000 	.word	0x44960000
 800a370:	41a00000 	.word	0x41a00000
 800a374:	451c4000 	.word	0x451c4000

0800a378 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a384:	1c18      	adds	r0, r3, #0
 800a386:	46bd      	mov	sp, r7
 800a388:	b002      	add	sp, #8
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a39c:	1c19      	adds	r1, r3, #0
 800a39e:	1c10      	adds	r0, r2, #0
 800a3a0:	f7f6 fa8e 	bl	80008c0 <__aeabi_fadd>
 800a3a4:	1c03      	adds	r3, r0, #0
}
 800a3a6:	1c18      	adds	r0, r3, #0
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	b002      	add	sp, #8
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	223c      	movs	r2, #60	@ 0x3c
 800a3ba:	5c9b      	ldrb	r3, [r3, r2]
}
 800a3bc:	0018      	movs	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a3c4:	b5b0      	push	{r4, r5, r7, lr}
 800a3c6:	b08c      	sub	sp, #48	@ 0x30
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a3d0:	1c19      	adds	r1, r3, #0
 800a3d2:	4895      	ldr	r0, [pc, #596]	@ (800a628 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a3d4:	f7f6 ff22 	bl	800121c <__aeabi_fsub>
 800a3d8:	1c03      	adds	r3, r0, #0
 800a3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3e0:	1c19      	adds	r1, r3, #0
 800a3e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3e4:	f7f6 f8b8 	bl	8000558 <__aeabi_fcmpgt>
 800a3e8:	1e03      	subs	r3, r0, #0
 800a3ea:	d00b      	beq.n	800a404 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a3f4:	1c19      	adds	r1, r3, #0
 800a3f6:	1c10      	adds	r0, r2, #0
 800a3f8:	f7f6 fa62 	bl	80008c0 <__aeabi_fadd>
 800a3fc:	1c03      	adds	r3, r0, #0
 800a3fe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a408:	1c19      	adds	r1, r3, #0
 800a40a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a40c:	f7f6 f8a4 	bl	8000558 <__aeabi_fcmpgt>
 800a410:	1e03      	subs	r3, r0, #0
 800a412:	d00b      	beq.n	800a42c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a41c:	1c19      	adds	r1, r3, #0
 800a41e:	1c10      	adds	r0, r2, #0
 800a420:	f7f6 fa4e 	bl	80008c0 <__aeabi_fadd>
 800a424:	1c03      	adds	r3, r0, #0
 800a426:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6959      	ldr	r1, [r3, #20]
 800a430:	4a7e      	ldr	r2, [pc, #504]	@ (800a62c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	0018      	movs	r0, r3
 800a436:	f000 f9f1 	bl	800a81c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	1c11      	adds	r1, r2, #0
 800a442:	0018      	movs	r0, r3
 800a444:	f000 f9fa 	bl	800a83c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a448:	1c03      	adds	r3, r0, #0
 800a44a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a458:	1c19      	adds	r1, r3, #0
 800a45a:	1c10      	adds	r0, r2, #0
 800a45c:	f7f6 fede 	bl	800121c <__aeabi_fsub>
 800a460:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a462:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a464:	1c18      	adds	r0, r3, #0
 800a466:	f7f6 fd9b 	bl	8000fa0 <__aeabi_fmul>
 800a46a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a46c:	1c19      	adds	r1, r3, #0
 800a46e:	1c20      	adds	r0, r4, #0
 800a470:	f7f6 fa26 	bl	80008c0 <__aeabi_fadd>
 800a474:	1c03      	adds	r3, r0, #0
 800a476:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a480:	1c19      	adds	r1, r3, #0
 800a482:	486b      	ldr	r0, [pc, #428]	@ (800a630 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a484:	f7f6 feca 	bl	800121c <__aeabi_fsub>
 800a488:	1c03      	adds	r3, r0, #0
 800a48a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	1c11      	adds	r1, r2, #0
 800a494:	0018      	movs	r0, r3
 800a496:	f000 f9d1 	bl	800a83c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a49a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a49c:	1c19      	adds	r1, r3, #0
 800a49e:	1c28      	adds	r0, r5, #0
 800a4a0:	f7f6 fd7e 	bl	8000fa0 <__aeabi_fmul>
 800a4a4:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a4a6:	1c19      	adds	r1, r3, #0
 800a4a8:	1c20      	adds	r0, r4, #0
 800a4aa:	f7f6 fa09 	bl	80008c0 <__aeabi_fadd>
 800a4ae:	1c03      	adds	r3, r0, #0
 800a4b0:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a4b2:	4a60      	ldr	r2, [pc, #384]	@ (800a634 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a4b4:	6a39      	ldr	r1, [r7, #32]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	f000 f9af 	bl	800a81c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	1c11      	adds	r1, r2, #0
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f000 f9b8 	bl	800a83c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a4cc:	1c03      	adds	r3, r0, #0
 800a4ce:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a4d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4d2:	69f8      	ldr	r0, [r7, #28]
 800a4d4:	f7f6 fd64 	bl	8000fa0 <__aeabi_fmul>
 800a4d8:	1c03      	adds	r3, r0, #0
 800a4da:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6999      	ldr	r1, [r3, #24]
 800a4e4:	4a51      	ldr	r2, [pc, #324]	@ (800a62c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f000 f997 	bl	800a81c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	1c11      	adds	r1, r2, #0
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f000 f9a0 	bl	800a83c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a4fc:	1c03      	adds	r3, r0, #0
 800a4fe:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a50c:	1c19      	adds	r1, r3, #0
 800a50e:	1c10      	adds	r0, r2, #0
 800a510:	f7f6 fe84 	bl	800121c <__aeabi_fsub>
 800a514:	1c03      	adds	r3, r0, #0
 800a516:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a51a:	69b8      	ldr	r0, [r7, #24]
 800a51c:	f7f6 fe7e 	bl	800121c <__aeabi_fsub>
 800a520:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a522:	1c19      	adds	r1, r3, #0
 800a524:	1c28      	adds	r0, r5, #0
 800a526:	f7f6 fd3b 	bl	8000fa0 <__aeabi_fmul>
 800a52a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a52c:	1c19      	adds	r1, r3, #0
 800a52e:	1c20      	adds	r0, r4, #0
 800a530:	f7f6 f9c6 	bl	80008c0 <__aeabi_fadd>
 800a534:	1c03      	adds	r3, r0, #0
 800a536:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a540:	1c19      	adds	r1, r3, #0
 800a542:	483b      	ldr	r0, [pc, #236]	@ (800a630 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a544:	f7f6 fe6a 	bl	800121c <__aeabi_fsub>
 800a548:	1c03      	adds	r3, r0, #0
 800a54a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	1c11      	adds	r1, r2, #0
 800a554:	0018      	movs	r0, r3
 800a556:	f000 f971 	bl	800a83c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a55a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a55c:	1c19      	adds	r1, r3, #0
 800a55e:	1c28      	adds	r0, r5, #0
 800a560:	f7f6 fd1e 	bl	8000fa0 <__aeabi_fmul>
 800a564:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a566:	1c19      	adds	r1, r3, #0
 800a568:	1c20      	adds	r0, r4, #0
 800a56a:	f7f6 f9a9 	bl	80008c0 <__aeabi_fadd>
 800a56e:	1c03      	adds	r3, r0, #0
 800a570:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a572:	4a30      	ldr	r2, [pc, #192]	@ (800a634 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a574:	6939      	ldr	r1, [r7, #16]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	0018      	movs	r0, r3
 800a57a:	f000 f94f 	bl	800a81c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	1c11      	adds	r1, r2, #0
 800a586:	0018      	movs	r0, r3
 800a588:	f000 f958 	bl	800a83c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a58c:	1c03      	adds	r3, r0, #0
 800a58e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a590:	6979      	ldr	r1, [r7, #20]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7f6 fd04 	bl	8000fa0 <__aeabi_fmul>
 800a598:	1c03      	adds	r3, r0, #0
 800a59a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4923      	ldr	r1, [pc, #140]	@ (800a638 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a5aa:	1c18      	adds	r0, r3, #0
 800a5ac:	f7f6 fb12 	bl	8000bd4 <__aeabi_fdiv>
 800a5b0:	1c03      	adds	r3, r0, #0
 800a5b2:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a5b4:	69f9      	ldr	r1, [r7, #28]
 800a5b6:	20fe      	movs	r0, #254	@ 0xfe
 800a5b8:	0580      	lsls	r0, r0, #22
 800a5ba:	f7f6 fe2f 	bl	800121c <__aeabi_fsub>
 800a5be:	1c03      	adds	r3, r0, #0
 800a5c0:	491e      	ldr	r1, [pc, #120]	@ (800a63c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a5c2:	1c18      	adds	r0, r3, #0
 800a5c4:	f7f6 fcec 	bl	8000fa0 <__aeabi_fmul>
 800a5c8:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a5ca:	491d      	ldr	r1, [pc, #116]	@ (800a640 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a5cc:	1c18      	adds	r0, r3, #0
 800a5ce:	f7f6 fe25 	bl	800121c <__aeabi_fsub>
 800a5d2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a5d4:	1c19      	adds	r1, r3, #0
 800a5d6:	1c28      	adds	r0, r5, #0
 800a5d8:	f7f6 fce2 	bl	8000fa0 <__aeabi_fmul>
 800a5dc:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a5de:	1c19      	adds	r1, r3, #0
 800a5e0:	1c20      	adds	r0, r4, #0
 800a5e2:	f7f6 f96d 	bl	80008c0 <__aeabi_fadd>
 800a5e6:	1c03      	adds	r3, r0, #0
 800a5e8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	1c18      	adds	r0, r3, #0
 800a5f6:	f7f5 ff9b 	bl	8000530 <__aeabi_fcmplt>
 800a5fa:	1e03      	subs	r3, r0, #0
 800a5fc:	d002      	beq.n	800a604 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a60c:	1c19      	adds	r1, r3, #0
 800a60e:	1c10      	adds	r0, r2, #0
 800a610:	f7f5 ffa2 	bl	8000558 <__aeabi_fcmpgt>
 800a614:	1e03      	subs	r3, r0, #0
 800a616:	d100      	bne.n	800a61a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a618:	e002      	b.n	800a620 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a620:	46c0      	nop			@ (mov r8, r8)
 800a622:	46bd      	mov	sp, r7
 800a624:	b00c      	add	sp, #48	@ 0x30
 800a626:	bdb0      	pop	{r4, r5, r7, pc}
 800a628:	46fffe00 	.word	0x46fffe00
 800a62c:	3c23d70a 	.word	0x3c23d70a
 800a630:	43ff0000 	.word	0x43ff0000
 800a634:	3db851ec 	.word	0x3db851ec
 800a638:	42700000 	.word	0x42700000
 800a63c:	3fa66666 	.word	0x3fa66666
 800a640:	3e99999a 	.word	0x3e99999a

0800a644 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	223c      	movs	r2, #60	@ 0x3c
 800a652:	5c9b      	ldrb	r3, [r3, r2]
 800a654:	2201      	movs	r2, #1
 800a656:	4053      	eors	r3, r2
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00a      	beq.n	800a674 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	223c      	movs	r2, #60	@ 0x3c
 800a662:	2101      	movs	r1, #1
 800a664:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a672:	e0c8      	b.n	800a806 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a678:	4965      	ldr	r1, [pc, #404]	@ (800a810 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a67a:	1c18      	adds	r0, r3, #0
 800a67c:	f7f5 ff76 	bl	800056c <__aeabi_fcmpge>
 800a680:	1e03      	subs	r3, r0, #0
 800a682:	d107      	bne.n	800a694 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a688:	4962      	ldr	r1, [pc, #392]	@ (800a814 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a68a:	1c18      	adds	r0, r3, #0
 800a68c:	f7f5 ff5a 	bl	8000544 <__aeabi_fcmple>
 800a690:	1e03      	subs	r3, r0, #0
 800a692:	d00e      	beq.n	800a6b2 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a69c:	1c19      	adds	r1, r3, #0
 800a69e:	1c10      	adds	r0, r2, #0
 800a6a0:	f7f6 f90e 	bl	80008c0 <__aeabi_fadd>
 800a6a4:	1c03      	adds	r3, r0, #0
 800a6a6:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b6:	1c19      	adds	r1, r3, #0
 800a6b8:	6838      	ldr	r0, [r7, #0]
 800a6ba:	f7f6 fdaf 	bl	800121c <__aeabi_fsub>
 800a6be:	1c03      	adds	r3, r0, #0
 800a6c0:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f7ff fe7d 	bl	800a3c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ce:	1c19      	adds	r1, r3, #0
 800a6d0:	6838      	ldr	r0, [r7, #0]
 800a6d2:	f7f6 fda3 	bl	800121c <__aeabi_fsub>
 800a6d6:	1c03      	adds	r3, r0, #0
 800a6d8:	2185      	movs	r1, #133	@ 0x85
 800a6da:	05c9      	lsls	r1, r1, #23
 800a6dc:	1c18      	adds	r0, r3, #0
 800a6de:	f7f6 fa79 	bl	8000bd4 <__aeabi_fdiv>
 800a6e2:	1c03      	adds	r3, r0, #0
 800a6e4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7f5 ff21 	bl	8000530 <__aeabi_fcmplt>
 800a6ee:	1e03      	subs	r3, r0, #0
 800a6f0:	d008      	beq.n	800a704 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	1c18      	adds	r0, r3, #0
 800a6fa:	f7f6 fd8f 	bl	800121c <__aeabi_fsub>
 800a6fe:	1c03      	adds	r3, r0, #0
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	e007      	b.n	800a714 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a708:	1c19      	adds	r1, r3, #0
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7f6 f8d8 	bl	80008c0 <__aeabi_fadd>
 800a710:	1c03      	adds	r3, r0, #0
 800a712:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a714:	23fe      	movs	r3, #254	@ 0xfe
 800a716:	059b      	lsls	r3, r3, #22
 800a718:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a71a:	493f      	ldr	r1, [pc, #252]	@ (800a818 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a71c:	6978      	ldr	r0, [r7, #20]
 800a71e:	f7f5 ff1b 	bl	8000558 <__aeabi_fcmpgt>
 800a722:	1e03      	subs	r3, r0, #0
 800a724:	d010      	beq.n	800a748 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a726:	493c      	ldr	r1, [pc, #240]	@ (800a818 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a728:	6978      	ldr	r0, [r7, #20]
 800a72a:	f7f6 fa53 	bl	8000bd4 <__aeabi_fdiv>
 800a72e:	1c03      	adds	r3, r0, #0
 800a730:	1c1c      	adds	r4, r3, #0
 800a732:	4939      	ldr	r1, [pc, #228]	@ (800a818 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a734:	6978      	ldr	r0, [r7, #20]
 800a736:	f7f6 fa4d 	bl	8000bd4 <__aeabi_fdiv>
 800a73a:	1c03      	adds	r3, r0, #0
 800a73c:	1c19      	adds	r1, r3, #0
 800a73e:	1c20      	adds	r0, r4, #0
 800a740:	f7f6 fc2e 	bl	8000fa0 <__aeabi_fmul>
 800a744:	1c03      	adds	r3, r0, #0
 800a746:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a74c:	1c19      	adds	r1, r3, #0
 800a74e:	2085      	movs	r0, #133	@ 0x85
 800a750:	05c0      	lsls	r0, r0, #23
 800a752:	f7f6 fd63 	bl	800121c <__aeabi_fsub>
 800a756:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a758:	6939      	ldr	r1, [r7, #16]
 800a75a:	1c18      	adds	r0, r3, #0
 800a75c:	f7f6 fc20 	bl	8000fa0 <__aeabi_fmul>
 800a760:	1c03      	adds	r3, r0, #0
 800a762:	1c18      	adds	r0, r3, #0
 800a764:	f017 fe2e 	bl	80223c4 <sqrtf>
 800a768:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a772:	2185      	movs	r1, #133	@ 0x85
 800a774:	05c9      	lsls	r1, r1, #23
 800a776:	6938      	ldr	r0, [r7, #16]
 800a778:	f7f6 fc12 	bl	8000fa0 <__aeabi_fmul>
 800a77c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a77e:	1c19      	adds	r1, r3, #0
 800a780:	1c28      	adds	r0, r5, #0
 800a782:	f7f6 fa27 	bl	8000bd4 <__aeabi_fdiv>
 800a786:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a788:	1c19      	adds	r1, r3, #0
 800a78a:	1c20      	adds	r0, r4, #0
 800a78c:	f7f6 fc08 	bl	8000fa0 <__aeabi_fmul>
 800a790:	1c03      	adds	r3, r0, #0
 800a792:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a798:	68f9      	ldr	r1, [r7, #12]
 800a79a:	1c18      	adds	r0, r3, #0
 800a79c:	f7f6 fc00 	bl	8000fa0 <__aeabi_fmul>
 800a7a0:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a7a2:	6939      	ldr	r1, [r7, #16]
 800a7a4:	1c18      	adds	r0, r3, #0
 800a7a6:	f7f6 fa15 	bl	8000bd4 <__aeabi_fdiv>
 800a7aa:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a7ac:	68f9      	ldr	r1, [r7, #12]
 800a7ae:	1c18      	adds	r0, r3, #0
 800a7b0:	f7f6 fbf6 	bl	8000fa0 <__aeabi_fmul>
 800a7b4:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a7b6:	1c19      	adds	r1, r3, #0
 800a7b8:	1c20      	adds	r0, r4, #0
 800a7ba:	f7f6 f881 	bl	80008c0 <__aeabi_fadd>
 800a7be:	1c03      	adds	r3, r0, #0
 800a7c0:	1c18      	adds	r0, r3, #0
 800a7c2:	f017 fdff 	bl	80223c4 <sqrtf>
 800a7c6:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a7c8:	1c19      	adds	r1, r3, #0
 800a7ca:	1c30      	adds	r0, r6, #0
 800a7cc:	f7f6 fbe8 	bl	8000fa0 <__aeabi_fmul>
 800a7d0:	1c03      	adds	r3, r0, #0
 800a7d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7e0:	68f9      	ldr	r1, [r7, #12]
 800a7e2:	1c18      	adds	r0, r3, #0
 800a7e4:	f7f6 fbdc 	bl	8000fa0 <__aeabi_fmul>
 800a7e8:	1c03      	adds	r3, r0, #0
 800a7ea:	2182      	movs	r1, #130	@ 0x82
 800a7ec:	05c9      	lsls	r1, r1, #23
 800a7ee:	1c18      	adds	r0, r3, #0
 800a7f0:	f7f6 f9f0 	bl	8000bd4 <__aeabi_fdiv>
 800a7f4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a7f6:	1c19      	adds	r1, r3, #0
 800a7f8:	1c20      	adds	r0, r4, #0
 800a7fa:	f7f6 f861 	bl	80008c0 <__aeabi_fadd>
 800a7fe:	1c03      	adds	r3, r0, #0
 800a800:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a806:	46c0      	nop			@ (mov r8, r8)
 800a808:	46bd      	mov	sp, r7
 800a80a:	b007      	add	sp, #28
 800a80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a80e:	46c0      	nop			@ (mov r8, r8)
 800a810:	42c80000 	.word	0x42c80000
 800a814:	c2c80000 	.word	0xc2c80000
 800a818:	44b40000 	.word	0x44b40000

0800a81c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a834:	46c0      	nop			@ (mov r8, r8)
 800a836:	46bd      	mov	sp, r7
 800a838:	b004      	add	sp, #16
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a83c:	b590      	push	{r4, r7, lr}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a84e:	1c19      	adds	r1, r3, #0
 800a850:	6838      	ldr	r0, [r7, #0]
 800a852:	f7f6 fce3 	bl	800121c <__aeabi_fsub>
 800a856:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a858:	1c19      	adds	r1, r3, #0
 800a85a:	1c20      	adds	r0, r4, #0
 800a85c:	f7f6 fba0 	bl	8000fa0 <__aeabi_fmul>
 800a860:	1c03      	adds	r3, r0, #0
 800a862:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a864:	4912      	ldr	r1, [pc, #72]	@ (800a8b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f7f5 fe62 	bl	8000530 <__aeabi_fcmplt>
 800a86c:	1e03      	subs	r3, r0, #0
 800a86e:	d002      	beq.n	800a876 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a870:	23fe      	movs	r3, #254	@ 0xfe
 800a872:	059b      	lsls	r3, r3, #22
 800a874:	e018      	b.n	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a876:	490f      	ldr	r1, [pc, #60]	@ (800a8b4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f7f5 fe6d 	bl	8000558 <__aeabi_fcmpgt>
 800a87e:	1e03      	subs	r3, r0, #0
 800a880:	d001      	beq.n	800a886 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a882:	2300      	movs	r3, #0
 800a884:	e010      	b.n	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	1c18      	adds	r0, r3, #0
 800a88a:	f017 fd73 	bl	8022374 <expf>
 800a88e:	1c03      	adds	r3, r0, #0
 800a890:	21fe      	movs	r1, #254	@ 0xfe
 800a892:	0589      	lsls	r1, r1, #22
 800a894:	1c18      	adds	r0, r3, #0
 800a896:	f7f6 f813 	bl	80008c0 <__aeabi_fadd>
 800a89a:	1c03      	adds	r3, r0, #0
 800a89c:	1c19      	adds	r1, r3, #0
 800a89e:	20fe      	movs	r0, #254	@ 0xfe
 800a8a0:	0580      	lsls	r0, r0, #22
 800a8a2:	f7f6 f997 	bl	8000bd4 <__aeabi_fdiv>
 800a8a6:	1c03      	adds	r3, r0, #0
    }
}
 800a8a8:	1c18      	adds	r0, r3, #0
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	b005      	add	sp, #20
 800a8ae:	bd90      	pop	{r4, r7, pc}
 800a8b0:	c2480000 	.word	0xc2480000
 800a8b4:	42480000 	.word	0x42480000

0800a8b8 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a8d0:	46c0      	nop			@ (mov r8, r8)
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b004      	add	sp, #16
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a8d8:	b590      	push	{r4, r7, lr}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d114      	bne.n	800a914 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8ee:	1c19      	adds	r1, r3, #0
 800a8f0:	6838      	ldr	r0, [r7, #0]
 800a8f2:	f7f6 fc93 	bl	800121c <__aeabi_fsub>
 800a8f6:	1c03      	adds	r3, r0, #0
 800a8f8:	4918      	ldr	r1, [pc, #96]	@ (800a95c <GasIndexAlgorithm__mox_model__process+0x84>)
 800a8fa:	1c18      	adds	r0, r3, #0
 800a8fc:	f7f6 f96a 	bl	8000bd4 <__aeabi_fdiv>
 800a900:	1c03      	adds	r3, r0, #0
 800a902:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a908:	1c19      	adds	r1, r3, #0
 800a90a:	1c10      	adds	r0, r2, #0
 800a90c:	f7f6 fb48 	bl	8000fa0 <__aeabi_fmul>
 800a910:	1c03      	adds	r3, r0, #0
 800a912:	e01f      	b.n	800a954 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a918:	1c19      	adds	r1, r3, #0
 800a91a:	6838      	ldr	r0, [r7, #0]
 800a91c:	f7f6 fc7e 	bl	800121c <__aeabi_fsub>
 800a920:	1c03      	adds	r3, r0, #0
 800a922:	1c1a      	adds	r2, r3, #0
 800a924:	2380      	movs	r3, #128	@ 0x80
 800a926:	061b      	lsls	r3, r3, #24
 800a928:	4053      	eors	r3, r2
 800a92a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a930:	490b      	ldr	r1, [pc, #44]	@ (800a960 <GasIndexAlgorithm__mox_model__process+0x88>)
 800a932:	1c18      	adds	r0, r3, #0
 800a934:	f7f5 ffc4 	bl	80008c0 <__aeabi_fadd>
 800a938:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a93a:	1c19      	adds	r1, r3, #0
 800a93c:	1c20      	adds	r0, r4, #0
 800a93e:	f7f6 f949 	bl	8000bd4 <__aeabi_fdiv>
 800a942:	1c03      	adds	r3, r0, #0
 800a944:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a94a:	1c19      	adds	r1, r3, #0
 800a94c:	1c10      	adds	r0, r2, #0
 800a94e:	f7f6 fb27 	bl	8000fa0 <__aeabi_fmul>
 800a952:	1c03      	adds	r3, r0, #0
    }
}
 800a954:	1c18      	adds	r0, r3, #0
 800a956:	46bd      	mov	sp, r7
 800a958:	b003      	add	sp, #12
 800a95a:	bd90      	pop	{r4, r7, pc}
 800a95c:	44fa0000 	.word	0x44fa0000
 800a960:	435c0000 	.word	0x435c0000

0800a964 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2180      	movs	r1, #128	@ 0x80
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2184      	movs	r1, #132	@ 0x84
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2188      	movs	r1, #136	@ 0x88
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	505a      	str	r2, [r3, r1]
}
 800a98a:	46c0      	nop			@ (mov r8, r8)
 800a98c:	46bd      	mov	sp, r7
 800a98e:	b004      	add	sp, #16
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800a994:	b590      	push	{r4, r7, lr}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2280      	movs	r2, #128	@ 0x80
 800a9a2:	589c      	ldr	r4, [r3, r2]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2284      	movs	r2, #132	@ 0x84
 800a9a8:	589b      	ldr	r3, [r3, r2]
 800a9aa:	1c19      	adds	r1, r3, #0
 800a9ac:	6838      	ldr	r0, [r7, #0]
 800a9ae:	f7f6 fc35 	bl	800121c <__aeabi_fsub>
 800a9b2:	1c03      	adds	r3, r0, #0
 800a9b4:	1c19      	adds	r1, r3, #0
 800a9b6:	1c20      	adds	r0, r4, #0
 800a9b8:	f7f6 faf2 	bl	8000fa0 <__aeabi_fmul>
 800a9bc:	1c03      	adds	r3, r0, #0
 800a9be:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800a9c0:	4940      	ldr	r1, [pc, #256]	@ (800aac4 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800a9c2:	68b8      	ldr	r0, [r7, #8]
 800a9c4:	f7f5 fdb4 	bl	8000530 <__aeabi_fcmplt>
 800a9c8:	1e03      	subs	r3, r0, #0
 800a9ca:	d001      	beq.n	800a9d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800a9cc:	4b3e      	ldr	r3, [pc, #248]	@ (800aac8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a9ce:	e075      	b.n	800aabc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800a9d0:	493e      	ldr	r1, [pc, #248]	@ (800aacc <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800a9d2:	68b8      	ldr	r0, [r7, #8]
 800a9d4:	f7f5 fdc0 	bl	8000558 <__aeabi_fcmpgt>
 800a9d8:	1e03      	subs	r3, r0, #0
 800a9da:	d001      	beq.n	800a9e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e06d      	b.n	800aabc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	6838      	ldr	r0, [r7, #0]
 800a9e4:	f7f5 fdc2 	bl	800056c <__aeabi_fcmpge>
 800a9e8:	1e03      	subs	r3, r0, #0
 800a9ea:	d047      	beq.n	800aa7c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2288      	movs	r2, #136	@ 0x88
 800a9f0:	589b      	ldr	r3, [r3, r2]
 800a9f2:	21fe      	movs	r1, #254	@ 0xfe
 800a9f4:	0589      	lsls	r1, r1, #22
 800a9f6:	1c18      	adds	r0, r3, #0
 800a9f8:	f7f5 fd94 	bl	8000524 <__aeabi_fcmpeq>
 800a9fc:	1e03      	subs	r3, r0, #0
 800a9fe:	d00e      	beq.n	800aa1e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	1c19      	adds	r1, r3, #0
 800aa06:	20fe      	movs	r0, #254	@ 0xfe
 800aa08:	0580      	lsls	r0, r0, #22
 800aa0a:	f7f6 fc07 	bl	800121c <__aeabi_fsub>
 800aa0e:	1c03      	adds	r3, r0, #0
 800aa10:	492f      	ldr	r1, [pc, #188]	@ (800aad0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800aa12:	1c18      	adds	r0, r3, #0
 800aa14:	f7f6 fac4 	bl	8000fa0 <__aeabi_fmul>
 800aa18:	1c03      	adds	r3, r0, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	e012      	b.n	800aa44 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	492c      	ldr	r1, [pc, #176]	@ (800aad4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800aa24:	1c18      	adds	r0, r3, #0
 800aa26:	f7f6 fabb 	bl	8000fa0 <__aeabi_fmul>
 800aa2a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800aa2c:	1c19      	adds	r1, r3, #0
 800aa2e:	4826      	ldr	r0, [pc, #152]	@ (800aac8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aa30:	f7f6 fbf4 	bl	800121c <__aeabi_fsub>
 800aa34:	1c03      	adds	r3, r0, #0
 800aa36:	2181      	movs	r1, #129	@ 0x81
 800aa38:	05c9      	lsls	r1, r1, #23
 800aa3a:	1c18      	adds	r0, r3, #0
 800aa3c:	f7f6 f8ca 	bl	8000bd4 <__aeabi_fdiv>
 800aa40:	1c03      	adds	r3, r0, #0
 800aa42:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800aa44:	4920      	ldr	r1, [pc, #128]	@ (800aac8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7f5 ff3a 	bl	80008c0 <__aeabi_fadd>
 800aa4c:	1c03      	adds	r3, r0, #0
 800aa4e:	1c1c      	adds	r4, r3, #0
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	1c18      	adds	r0, r3, #0
 800aa54:	f017 fc8e 	bl	8022374 <expf>
 800aa58:	1c03      	adds	r3, r0, #0
 800aa5a:	21fe      	movs	r1, #254	@ 0xfe
 800aa5c:	0589      	lsls	r1, r1, #22
 800aa5e:	1c18      	adds	r0, r3, #0
 800aa60:	f7f5 ff2e 	bl	80008c0 <__aeabi_fadd>
 800aa64:	1c03      	adds	r3, r0, #0
 800aa66:	1c19      	adds	r1, r3, #0
 800aa68:	1c20      	adds	r0, r4, #0
 800aa6a:	f7f6 f8b3 	bl	8000bd4 <__aeabi_fdiv>
 800aa6e:	1c03      	adds	r3, r0, #0
 800aa70:	68f9      	ldr	r1, [r7, #12]
 800aa72:	1c18      	adds	r0, r3, #0
 800aa74:	f7f6 fbd2 	bl	800121c <__aeabi_fsub>
 800aa78:	1c03      	adds	r3, r0, #0
 800aa7a:	e01f      	b.n	800aabc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2188      	movs	r1, #136	@ 0x88
 800aa84:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800aa86:	1c19      	adds	r1, r3, #0
 800aa88:	1c10      	adds	r0, r2, #0
 800aa8a:	f7f6 f8a3 	bl	8000bd4 <__aeabi_fdiv>
 800aa8e:	1c03      	adds	r3, r0, #0
 800aa90:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	1c18      	adds	r0, r3, #0
 800aa96:	f017 fc6d 	bl	8022374 <expf>
 800aa9a:	1c03      	adds	r3, r0, #0
 800aa9c:	21fe      	movs	r1, #254	@ 0xfe
 800aa9e:	0589      	lsls	r1, r1, #22
 800aaa0:	1c18      	adds	r0, r3, #0
 800aaa2:	f7f5 ff0d 	bl	80008c0 <__aeabi_fadd>
 800aaa6:	1c03      	adds	r3, r0, #0
 800aaa8:	1c19      	adds	r1, r3, #0
 800aaaa:	4807      	ldr	r0, [pc, #28]	@ (800aac8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aaac:	f7f6 f892 	bl	8000bd4 <__aeabi_fdiv>
 800aab0:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800aab2:	1c19      	adds	r1, r3, #0
 800aab4:	1c20      	adds	r0, r4, #0
 800aab6:	f7f6 fa73 	bl	8000fa0 <__aeabi_fmul>
 800aaba:	1c03      	adds	r3, r0, #0
        }
    }
}
 800aabc:	1c18      	adds	r0, r3, #0
 800aabe:	46bd      	mov	sp, r7
 800aac0:	b005      	add	sp, #20
 800aac2:	bd90      	pop	{r4, r7, pc}
 800aac4:	c2480000 	.word	0xc2480000
 800aac8:	43fa0000 	.word	0x43fa0000
 800aacc:	42480000 	.word	0x42480000
 800aad0:	3f8041ab 	.word	0x3f8041ab
 800aad4:	40a00000 	.word	0x40a00000

0800aad8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4913      	ldr	r1, [pc, #76]	@ (800ab38 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800aaea:	1c18      	adds	r0, r3, #0
 800aaec:	f7f5 fee8 	bl	80008c0 <__aeabi_fadd>
 800aaf0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800aaf2:	1c19      	adds	r1, r3, #0
 800aaf4:	1c20      	adds	r0, r4, #0
 800aaf6:	f7f6 f86d 	bl	8000bd4 <__aeabi_fdiv>
 800aafa:	1c03      	adds	r3, r0, #0
 800aafc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	228c      	movs	r2, #140	@ 0x8c
 800ab02:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	490b      	ldr	r1, [pc, #44]	@ (800ab3c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800ab0e:	1c18      	adds	r0, r3, #0
 800ab10:	f7f5 fed6 	bl	80008c0 <__aeabi_fadd>
 800ab14:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800ab16:	1c19      	adds	r1, r3, #0
 800ab18:	1c20      	adds	r0, r4, #0
 800ab1a:	f7f6 f85b 	bl	8000bd4 <__aeabi_fdiv>
 800ab1e:	1c03      	adds	r3, r0, #0
 800ab20:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2290      	movs	r2, #144	@ 0x90
 800ab26:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2294      	movs	r2, #148	@ 0x94
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	5499      	strb	r1, [r3, r2]
}
 800ab30:	46c0      	nop			@ (mov r8, r8)
 800ab32:	46bd      	mov	sp, r7
 800ab34:	b003      	add	sp, #12
 800ab36:	bd90      	pop	{r4, r7, pc}
 800ab38:	41a00000 	.word	0x41a00000
 800ab3c:	43fa0000 	.word	0x43fa0000

0800ab40 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800ab40:	b590      	push	{r4, r7, lr}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2294      	movs	r2, #148	@ 0x94
 800ab4e:	5c9b      	ldrb	r3, [r3, r2]
 800ab50:	2201      	movs	r2, #1
 800ab52:	4053      	eors	r3, r2
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00f      	beq.n	800ab7a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2198      	movs	r1, #152	@ 0x98
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	219c      	movs	r1, #156	@ 0x9c
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	21a0      	movs	r1, #160	@ 0xa0
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2294      	movs	r2, #148	@ 0x94
 800ab76:	2101      	movs	r1, #1
 800ab78:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	228c      	movs	r2, #140	@ 0x8c
 800ab7e:	589b      	ldr	r3, [r3, r2]
 800ab80:	1c19      	adds	r1, r3, #0
 800ab82:	20fe      	movs	r0, #254	@ 0xfe
 800ab84:	0580      	lsls	r0, r0, #22
 800ab86:	f7f6 fb49 	bl	800121c <__aeabi_fsub>
 800ab8a:	1c03      	adds	r3, r0, #0
 800ab8c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2298      	movs	r2, #152	@ 0x98
 800ab92:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ab94:	1c19      	adds	r1, r3, #0
 800ab96:	f7f6 fa03 	bl	8000fa0 <__aeabi_fmul>
 800ab9a:	1c03      	adds	r3, r0, #0
 800ab9c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	228c      	movs	r2, #140	@ 0x8c
 800aba2:	589b      	ldr	r3, [r3, r2]
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	1c18      	adds	r0, r3, #0
 800aba8:	f7f6 f9fa 	bl	8000fa0 <__aeabi_fmul>
 800abac:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800abae:	1c19      	adds	r1, r3, #0
 800abb0:	1c20      	adds	r0, r4, #0
 800abb2:	f7f5 fe85 	bl	80008c0 <__aeabi_fadd>
 800abb6:	1c03      	adds	r3, r0, #0
 800abb8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2298      	movs	r2, #152	@ 0x98
 800abbe:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2290      	movs	r2, #144	@ 0x90
 800abc4:	589b      	ldr	r3, [r3, r2]
 800abc6:	1c19      	adds	r1, r3, #0
 800abc8:	20fe      	movs	r0, #254	@ 0xfe
 800abca:	0580      	lsls	r0, r0, #22
 800abcc:	f7f6 fb26 	bl	800121c <__aeabi_fsub>
 800abd0:	1c03      	adds	r3, r0, #0
 800abd2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	229c      	movs	r2, #156	@ 0x9c
 800abd8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800abda:	1c19      	adds	r1, r3, #0
 800abdc:	f7f6 f9e0 	bl	8000fa0 <__aeabi_fmul>
 800abe0:	1c03      	adds	r3, r0, #0
 800abe2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2290      	movs	r2, #144	@ 0x90
 800abe8:	589b      	ldr	r3, [r3, r2]
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	1c18      	adds	r0, r3, #0
 800abee:	f7f6 f9d7 	bl	8000fa0 <__aeabi_fmul>
 800abf2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800abf4:	1c19      	adds	r1, r3, #0
 800abf6:	1c20      	adds	r0, r4, #0
 800abf8:	f7f5 fe62 	bl	80008c0 <__aeabi_fadd>
 800abfc:	1c03      	adds	r3, r0, #0
 800abfe:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	229c      	movs	r2, #156	@ 0x9c
 800ac04:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2298      	movs	r2, #152	@ 0x98
 800ac0a:	589a      	ldr	r2, [r3, r2]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	219c      	movs	r1, #156	@ 0x9c
 800ac10:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800ac12:	1c19      	adds	r1, r3, #0
 800ac14:	1c10      	adds	r0, r2, #0
 800ac16:	f7f6 fb01 	bl	800121c <__aeabi_fsub>
 800ac1a:	1c03      	adds	r3, r0, #0
 800ac1c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800ac1e:	2100      	movs	r1, #0
 800ac20:	6978      	ldr	r0, [r7, #20]
 800ac22:	f7f5 fc85 	bl	8000530 <__aeabi_fcmplt>
 800ac26:	1e03      	subs	r3, r0, #0
 800ac28:	d004      	beq.n	800ac34 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2280      	movs	r2, #128	@ 0x80
 800ac2e:	0612      	lsls	r2, r2, #24
 800ac30:	4053      	eors	r3, r2
 800ac32:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800ac34:	4923      	ldr	r1, [pc, #140]	@ (800acc4 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800ac36:	6978      	ldr	r0, [r7, #20]
 800ac38:	f7f6 f9b2 	bl	8000fa0 <__aeabi_fmul>
 800ac3c:	1c03      	adds	r3, r0, #0
 800ac3e:	1c18      	adds	r0, r3, #0
 800ac40:	f017 fb98 	bl	8022374 <expf>
 800ac44:	1c03      	adds	r3, r0, #0
 800ac46:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800ac48:	491f      	ldr	r1, [pc, #124]	@ (800acc8 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800ac4a:	6938      	ldr	r0, [r7, #16]
 800ac4c:	f7f6 f9a8 	bl	8000fa0 <__aeabi_fmul>
 800ac50:	1c03      	adds	r3, r0, #0
 800ac52:	491e      	ldr	r1, [pc, #120]	@ (800accc <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800ac54:	1c18      	adds	r0, r3, #0
 800ac56:	f7f5 fe33 	bl	80008c0 <__aeabi_fadd>
 800ac5a:	1c03      	adds	r3, r0, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685c      	ldr	r4, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	68f9      	ldr	r1, [r7, #12]
 800ac68:	1c18      	adds	r0, r3, #0
 800ac6a:	f7f5 fe29 	bl	80008c0 <__aeabi_fadd>
 800ac6e:	1c03      	adds	r3, r0, #0
 800ac70:	1c19      	adds	r1, r3, #0
 800ac72:	1c20      	adds	r0, r4, #0
 800ac74:	f7f5 ffae 	bl	8000bd4 <__aeabi_fdiv>
 800ac78:	1c03      	adds	r3, r0, #0
 800ac7a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ac7c:	68b9      	ldr	r1, [r7, #8]
 800ac7e:	20fe      	movs	r0, #254	@ 0xfe
 800ac80:	0580      	lsls	r0, r0, #22
 800ac82:	f7f6 facb 	bl	800121c <__aeabi_fsub>
 800ac86:	1c03      	adds	r3, r0, #0
 800ac88:	1c18      	adds	r0, r3, #0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	22a0      	movs	r2, #160	@ 0xa0
 800ac8e:	589b      	ldr	r3, [r3, r2]
 800ac90:	1c19      	adds	r1, r3, #0
 800ac92:	f7f6 f985 	bl	8000fa0 <__aeabi_fmul>
 800ac96:	1c03      	adds	r3, r0, #0
 800ac98:	1c1c      	adds	r4, r3, #0
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	68b8      	ldr	r0, [r7, #8]
 800ac9e:	f7f6 f97f 	bl	8000fa0 <__aeabi_fmul>
 800aca2:	1c03      	adds	r3, r0, #0
 800aca4:	1c19      	adds	r1, r3, #0
 800aca6:	1c20      	adds	r0, r4, #0
 800aca8:	f7f5 fe0a 	bl	80008c0 <__aeabi_fadd>
 800acac:	1c03      	adds	r3, r0, #0
 800acae:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	22a0      	movs	r2, #160	@ 0xa0
 800acb4:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	22a0      	movs	r2, #160	@ 0xa0
 800acba:	589b      	ldr	r3, [r3, r2]
}
 800acbc:	1c18      	adds	r0, r3, #0
 800acbe:	46bd      	mov	sp, r7
 800acc0:	b007      	add	sp, #28
 800acc2:	bd90      	pop	{r4, r7, pc}
 800acc4:	be4ccccd 	.word	0xbe4ccccd
 800acc8:	43f00000 	.word	0x43f00000
 800accc:	41a00000 	.word	0x41a00000

0800acd0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	000a      	movs	r2, r1
 800acda:	1cbb      	adds	r3, r7, #2
 800acdc:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800acde:	230d      	movs	r3, #13
 800ace0:	18fb      	adds	r3, r7, r3
 800ace2:	22ff      	movs	r2, #255	@ 0xff
 800ace4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ace6:	230e      	movs	r3, #14
 800ace8:	18fb      	adds	r3, r7, r3
 800acea:	2200      	movs	r2, #0
 800acec:	801a      	strh	r2, [r3, #0]
 800acee:	e037      	b.n	800ad60 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800acf0:	230e      	movs	r3, #14
 800acf2:	18fb      	adds	r3, r7, r3
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	18d3      	adds	r3, r2, r3
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	220d      	movs	r2, #13
 800acfe:	18bb      	adds	r3, r7, r2
 800ad00:	18ba      	adds	r2, r7, r2
 800ad02:	7812      	ldrb	r2, [r2, #0]
 800ad04:	404a      	eors	r2, r1
 800ad06:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ad08:	230c      	movs	r3, #12
 800ad0a:	18fb      	adds	r3, r7, r3
 800ad0c:	2208      	movs	r2, #8
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	e01b      	b.n	800ad4a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800ad12:	210d      	movs	r1, #13
 800ad14:	187b      	adds	r3, r7, r1
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	b25b      	sxtb	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	da09      	bge.n	800ad32 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800ad1e:	187b      	adds	r3, r7, r1
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	b25b      	sxtb	r3, r3
 800ad26:	2231      	movs	r2, #49	@ 0x31
 800ad28:	4053      	eors	r3, r2
 800ad2a:	b25a      	sxtb	r2, r3
 800ad2c:	187b      	adds	r3, r7, r1
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	e005      	b.n	800ad3e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800ad32:	230d      	movs	r3, #13
 800ad34:	18fa      	adds	r2, r7, r3
 800ad36:	18fb      	adds	r3, r7, r3
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	18db      	adds	r3, r3, r3
 800ad3c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ad3e:	220c      	movs	r2, #12
 800ad40:	18bb      	adds	r3, r7, r2
 800ad42:	18ba      	adds	r2, r7, r2
 800ad44:	7812      	ldrb	r2, [r2, #0]
 800ad46:	3a01      	subs	r2, #1
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	230c      	movs	r3, #12
 800ad4c:	18fb      	adds	r3, r7, r3
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1de      	bne.n	800ad12 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ad54:	220e      	movs	r2, #14
 800ad56:	18bb      	adds	r3, r7, r2
 800ad58:	18ba      	adds	r2, r7, r2
 800ad5a:	8812      	ldrh	r2, [r2, #0]
 800ad5c:	3201      	adds	r2, #1
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	230e      	movs	r3, #14
 800ad62:	18fa      	adds	r2, r7, r3
 800ad64:	1cbb      	adds	r3, r7, #2
 800ad66:	8812      	ldrh	r2, [r2, #0]
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d3c0      	bcc.n	800acf0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800ad6e:	230d      	movs	r3, #13
 800ad70:	18fb      	adds	r3, r7, r3
 800ad72:	781b      	ldrb	r3, [r3, #0]
}
 800ad74:	0018      	movs	r0, r3
 800ad76:	46bd      	mov	sp, r7
 800ad78:	b004      	add	sp, #16
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	0008      	movs	r0, r1
 800ad86:	0011      	movs	r1, r2
 800ad88:	1cbb      	adds	r3, r7, #2
 800ad8a:	1c02      	adds	r2, r0, #0
 800ad8c:	801a      	strh	r2, [r3, #0]
 800ad8e:	1c7b      	adds	r3, r7, #1
 800ad90:	1c0a      	adds	r2, r1, #0
 800ad92:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800ad94:	1cbb      	adds	r3, r7, #2
 800ad96:	881a      	ldrh	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	0011      	movs	r1, r2
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	f7ff ff97 	bl	800acd0 <sensirion_i2c_generate_crc>
 800ada2:	0003      	movs	r3, r0
 800ada4:	001a      	movs	r2, r3
 800ada6:	1c7b      	adds	r3, r7, #1
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	4293      	cmp	r3, r2
 800adac:	d001      	beq.n	800adb2 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e000      	b.n	800adb4 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	0018      	movs	r0, r3
 800adb6:	46bd      	mov	sp, r7
 800adb8:	b002      	add	sp, #8
 800adba:	bd80      	pop	{r7, pc}

0800adbc <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	0008      	movs	r0, r1
 800adc6:	0011      	movs	r1, r2
 800adc8:	1cbb      	adds	r3, r7, #2
 800adca:	1c02      	adds	r2, r0, #0
 800adcc:	801a      	strh	r2, [r3, #0]
 800adce:	003b      	movs	r3, r7
 800add0:	1c0a      	adds	r2, r1, #0
 800add2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800add4:	003b      	movs	r3, r7
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	0a1b      	lsrs	r3, r3, #8
 800adda:	b299      	uxth	r1, r3
 800addc:	1cbb      	adds	r3, r7, #2
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	1cba      	adds	r2, r7, #2
 800ade2:	1c58      	adds	r0, r3, #1
 800ade4:	8010      	strh	r0, [r2, #0]
 800ade6:	001a      	movs	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	189b      	adds	r3, r3, r2
 800adec:	b2ca      	uxtb	r2, r1
 800adee:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800adf0:	1cbb      	adds	r3, r7, #2
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	1cba      	adds	r2, r7, #2
 800adf6:	1c59      	adds	r1, r3, #1
 800adf8:	8011      	strh	r1, [r2, #0]
 800adfa:	001a      	movs	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	189b      	adds	r3, r3, r2
 800ae00:	003a      	movs	r2, r7
 800ae02:	8812      	ldrh	r2, [r2, #0]
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	701a      	strb	r2, [r3, #0]
    return offset;
 800ae08:	1cbb      	adds	r3, r7, #2
 800ae0a:	881b      	ldrh	r3, [r3, #0]
}
 800ae0c:	0018      	movs	r0, r3
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	b002      	add	sp, #8
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800ae14:	b590      	push	{r4, r7, lr}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	0008      	movs	r0, r1
 800ae1e:	0011      	movs	r1, r2
 800ae20:	1cbb      	adds	r3, r7, #2
 800ae22:	1c02      	adds	r2, r0, #0
 800ae24:	801a      	strh	r2, [r3, #0]
 800ae26:	003b      	movs	r3, r7
 800ae28:	1c0a      	adds	r2, r1, #0
 800ae2a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800ae2c:	003b      	movs	r3, r7
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	0a1b      	lsrs	r3, r3, #8
 800ae32:	b299      	uxth	r1, r3
 800ae34:	1cbb      	adds	r3, r7, #2
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	1cba      	adds	r2, r7, #2
 800ae3a:	1c58      	adds	r0, r3, #1
 800ae3c:	8010      	strh	r0, [r2, #0]
 800ae3e:	001a      	movs	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	189b      	adds	r3, r3, r2
 800ae44:	b2ca      	uxtb	r2, r1
 800ae46:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800ae48:	1cbb      	adds	r3, r7, #2
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	1cba      	adds	r2, r7, #2
 800ae4e:	1c59      	adds	r1, r3, #1
 800ae50:	8011      	strh	r1, [r2, #0]
 800ae52:	001a      	movs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	189b      	adds	r3, r3, r2
 800ae58:	003a      	movs	r2, r7
 800ae5a:	8812      	ldrh	r2, [r2, #0]
 800ae5c:	b2d2      	uxtb	r2, r2
 800ae5e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800ae60:	1cbb      	adds	r3, r7, #2
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	3b02      	subs	r3, #2
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800ae6a:	1cbb      	adds	r3, r7, #2
 800ae6c:	881b      	ldrh	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	18d4      	adds	r4, r2, r3
 800ae72:	2102      	movs	r1, #2
 800ae74:	f7ff ff2c 	bl	800acd0 <sensirion_i2c_generate_crc>
 800ae78:	0003      	movs	r3, r0
 800ae7a:	7023      	strb	r3, [r4, #0]
    offset++;
 800ae7c:	1cbb      	adds	r3, r7, #2
 800ae7e:	881a      	ldrh	r2, [r3, #0]
 800ae80:	1cbb      	adds	r3, r7, #2
 800ae82:	3201      	adds	r2, #1
 800ae84:	801a      	strh	r2, [r3, #0]

    return offset;
 800ae86:	1cbb      	adds	r3, r7, #2
 800ae88:	881b      	ldrh	r3, [r3, #0]
}
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	b003      	add	sp, #12
 800ae90:	bd90      	pop	{r4, r7, pc}

0800ae92 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	0008      	movs	r0, r1
 800ae9c:	0011      	movs	r1, r2
 800ae9e:	1cbb      	adds	r3, r7, #2
 800aea0:	1c02      	adds	r2, r0, #0
 800aea2:	801a      	strh	r2, [r3, #0]
 800aea4:	003b      	movs	r3, r7
 800aea6:	1c0a      	adds	r2, r1, #0
 800aea8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800aeaa:	003b      	movs	r3, r7
 800aeac:	881a      	ldrh	r2, [r3, #0]
 800aeae:	1cbb      	adds	r3, r7, #2
 800aeb0:	8819      	ldrh	r1, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	f7ff ffad 	bl	800ae14 <sensirion_i2c_add_uint16_t_to_buffer>
 800aeba:	0003      	movs	r3, r0
}
 800aebc:	0018      	movs	r0, r3
 800aebe:	46bd      	mov	sp, r7
 800aec0:	b002      	add	sp, #8
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6039      	str	r1, [r7, #0]
 800aecc:	0011      	movs	r1, r2
 800aece:	1dfb      	adds	r3, r7, #7
 800aed0:	1c02      	adds	r2, r0, #0
 800aed2:	701a      	strb	r2, [r3, #0]
 800aed4:	1d3b      	adds	r3, r7, #4
 800aed6:	1c0a      	adds	r2, r1, #0
 800aed8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800aeda:	1d3b      	adds	r3, r7, #4
 800aedc:	881a      	ldrh	r2, [r3, #0]
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	1dfb      	adds	r3, r7, #7
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	0018      	movs	r0, r3
 800aee6:	f7fe fa45 	bl	8009374 <sensirion_i2c_hal_write>
 800aeea:	0003      	movs	r3, r0
}
 800aeec:	0018      	movs	r0, r3
 800aeee:	46bd      	mov	sp, r7
 800aef0:	b002      	add	sp, #8
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800aef4:	b5b0      	push	{r4, r5, r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6039      	str	r1, [r7, #0]
 800aefc:	0011      	movs	r1, r2
 800aefe:	1dfb      	adds	r3, r7, #7
 800af00:	1c02      	adds	r2, r0, #0
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	1d3b      	adds	r3, r7, #4
 800af06:	1c0a      	adds	r2, r1, #0
 800af08:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800af0a:	1d3b      	adds	r3, r7, #4
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	085b      	lsrs	r3, r3, #1
 800af10:	b29b      	uxth	r3, r3
 800af12:	220a      	movs	r2, #10
 800af14:	18ba      	adds	r2, r7, r2
 800af16:	1c19      	adds	r1, r3, #0
 800af18:	1c0b      	adds	r3, r1, #0
 800af1a:	18db      	adds	r3, r3, r3
 800af1c:	185b      	adds	r3, r3, r1
 800af1e:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800af20:	1d3b      	adds	r3, r7, #4
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	2201      	movs	r2, #1
 800af26:	4013      	ands	r3, r2
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800af2e:	2304      	movs	r3, #4
 800af30:	e06b      	b.n	800b00a <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800af32:	230a      	movs	r3, #10
 800af34:	18fb      	adds	r3, r7, r3
 800af36:	881a      	ldrh	r2, [r3, #0]
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	1dfb      	adds	r3, r7, #7
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	0018      	movs	r0, r3
 800af40:	f7fe f9f8 	bl	8009334 <sensirion_i2c_hal_read>
 800af44:	0003      	movs	r3, r0
 800af46:	001a      	movs	r2, r3
 800af48:	2108      	movs	r1, #8
 800af4a:	187b      	adds	r3, r7, r1
 800af4c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800af4e:	000a      	movs	r2, r1
 800af50:	18bb      	adds	r3, r7, r2
 800af52:	2100      	movs	r1, #0
 800af54:	5e5b      	ldrsh	r3, [r3, r1]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800af5a:	18bb      	adds	r3, r7, r2
 800af5c:	2200      	movs	r2, #0
 800af5e:	5e9b      	ldrsh	r3, [r3, r2]
 800af60:	e053      	b.n	800b00a <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800af62:	230e      	movs	r3, #14
 800af64:	18fb      	adds	r3, r7, r3
 800af66:	2200      	movs	r2, #0
 800af68:	801a      	strh	r2, [r3, #0]
 800af6a:	230c      	movs	r3, #12
 800af6c:	18fb      	adds	r3, r7, r3
 800af6e:	2200      	movs	r2, #0
 800af70:	801a      	strh	r2, [r3, #0]
 800af72:	e041      	b.n	800aff8 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800af74:	210e      	movs	r1, #14
 800af76:	187b      	adds	r3, r7, r1
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800af7e:	187b      	adds	r3, r7, r1
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	3302      	adds	r3, #2
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	001a      	movs	r2, r3
 800af8c:	2102      	movs	r1, #2
 800af8e:	f7ff fef5 	bl	800ad7c <sensirion_i2c_check_crc>
 800af92:	0003      	movs	r3, r0
 800af94:	001a      	movs	r2, r3
 800af96:	2108      	movs	r1, #8
 800af98:	187b      	adds	r3, r7, r1
 800af9a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800af9c:	000a      	movs	r2, r1
 800af9e:	18bb      	adds	r3, r7, r2
 800afa0:	2100      	movs	r1, #0
 800afa2:	5e5b      	ldrsh	r3, [r3, r1]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d003      	beq.n	800afb0 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800afa8:	18bb      	adds	r3, r7, r2
 800afaa:	2200      	movs	r2, #0
 800afac:	5e9b      	ldrsh	r3, [r3, r2]
 800afae:	e02c      	b.n	800b00a <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800afb0:	240e      	movs	r4, #14
 800afb2:	193b      	adds	r3, r7, r4
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	18d2      	adds	r2, r2, r3
 800afba:	250c      	movs	r5, #12
 800afbc:	197b      	adds	r3, r7, r5
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	1979      	adds	r1, r7, r5
 800afc2:	1c58      	adds	r0, r3, #1
 800afc4:	8008      	strh	r0, [r1, #0]
 800afc6:	0019      	movs	r1, r3
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	185b      	adds	r3, r3, r1
 800afcc:	7812      	ldrb	r2, [r2, #0]
 800afce:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800afd0:	193b      	adds	r3, r7, r4
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	18d2      	adds	r2, r2, r3
 800afda:	197b      	adds	r3, r7, r5
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	1979      	adds	r1, r7, r5
 800afe0:	1c58      	adds	r0, r3, #1
 800afe2:	8008      	strh	r0, [r1, #0]
 800afe4:	0019      	movs	r1, r3
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	185b      	adds	r3, r3, r1
 800afea:	7812      	ldrb	r2, [r2, #0]
 800afec:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800afee:	193b      	adds	r3, r7, r4
 800aff0:	193a      	adds	r2, r7, r4
 800aff2:	8812      	ldrh	r2, [r2, #0]
 800aff4:	3203      	adds	r2, #3
 800aff6:	801a      	strh	r2, [r3, #0]
 800aff8:	230e      	movs	r3, #14
 800affa:	18fa      	adds	r2, r7, r3
 800affc:	230a      	movs	r3, #10
 800affe:	18fb      	adds	r3, r7, r3
 800b000:	8812      	ldrh	r2, [r2, #0]
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	429a      	cmp	r2, r3
 800b006:	d3b5      	bcc.n	800af74 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	0018      	movs	r0, r3
 800b00c:	46bd      	mov	sp, r7
 800b00e:	b004      	add	sp, #16
 800b010:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b014 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b014:	b590      	push	{r4, r7, lr}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6039      	str	r1, [r7, #0]
 800b01c:	0011      	movs	r1, r2
 800b01e:	1dfb      	adds	r3, r7, #7
 800b020:	1c02      	adds	r2, r0, #0
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	1dbb      	adds	r3, r7, #6
 800b026:	1c0a      	adds	r2, r1, #0
 800b028:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b02a:	4b08      	ldr	r3, [pc, #32]	@ (800b04c <ReadRegister+0x38>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d008      	beq.n	800b044 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b032:	4b06      	ldr	r3, [pc, #24]	@ (800b04c <ReadRegister+0x38>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	1dba      	adds	r2, r7, #6
 800b038:	7814      	ldrb	r4, [r2, #0]
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	1dfa      	adds	r2, r7, #7
 800b03e:	7810      	ldrb	r0, [r2, #0]
 800b040:	0022      	movs	r2, r4
 800b042:	4798      	blx	r3
  }
}
 800b044:	46c0      	nop			@ (mov r8, r8)
 800b046:	46bd      	mov	sp, r7
 800b048:	b003      	add	sp, #12
 800b04a:	bd90      	pop	{r4, r7, pc}
 800b04c:	200011e4 	.word	0x200011e4

0800b050 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6039      	str	r1, [r7, #0]
 800b058:	0011      	movs	r1, r2
 800b05a:	1dfb      	adds	r3, r7, #7
 800b05c:	1c02      	adds	r2, r0, #0
 800b05e:	701a      	strb	r2, [r3, #0]
 800b060:	1dbb      	adds	r3, r7, #6
 800b062:	1c0a      	adds	r2, r1, #0
 800b064:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b066:	4b08      	ldr	r3, [pc, #32]	@ (800b088 <WriteRegister+0x38>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d008      	beq.n	800b080 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b06e:	4b06      	ldr	r3, [pc, #24]	@ (800b088 <WriteRegister+0x38>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	1dba      	adds	r2, r7, #6
 800b074:	7814      	ldrb	r4, [r2, #0]
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	1dfa      	adds	r2, r7, #7
 800b07a:	7810      	ldrb	r0, [r2, #0]
 800b07c:	0022      	movs	r2, r4
 800b07e:	4798      	blx	r3
  }
}
 800b080:	46c0      	nop			@ (mov r8, r8)
 800b082:	46bd      	mov	sp, r7
 800b084:	b003      	add	sp, #12
 800b086:	bd90      	pop	{r4, r7, pc}
 800b088:	200011e8 	.word	0x200011e8

0800b08c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b096:	4b07      	ldr	r3, [pc, #28]	@ (800b0b4 <SGP_Init+0x28>)
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b09c:	4b06      	ldr	r3, [pc, #24]	@ (800b0b8 <SGP_Init+0x2c>)
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b0a2:	4b06      	ldr	r3, [pc, #24]	@ (800b0bc <SGP_Init+0x30>)
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	f7fe ff8e 	bl	8009fc8 <GasIndexAlgorithm_init>
}
 800b0ac:	46c0      	nop			@ (mov r8, r8)
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	b002      	add	sp, #8
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	200011e4 	.word	0x200011e4
 800b0b8:	200011e8 	.word	0x200011e8
 800b0bc:	20001200 	.word	0x20001200

0800b0c0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b0c4:	4b13      	ldr	r3, [pc, #76]	@ (800b114 <SGP_StartMeasurement+0x54>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00d      	beq.n	800b0e8 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b0cc:	4b12      	ldr	r3, [pc, #72]	@ (800b118 <SGP_StartMeasurement+0x58>)
 800b0ce:	2208      	movs	r2, #8
 800b0d0:	0019      	movs	r1, r3
 800b0d2:	2059      	movs	r0, #89	@ 0x59
 800b0d4:	f7ff ffbc 	bl	800b050 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b0d8:	f003 f952 	bl	800e380 <HAL_GetTick>
 800b0dc:	0003      	movs	r3, r0
 800b0de:	331e      	adds	r3, #30
 800b0e0:	001a      	movs	r2, r3
 800b0e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b11c <SGP_StartMeasurement+0x5c>)
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	e00c      	b.n	800b102 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b0e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b120 <SGP_StartMeasurement+0x60>)
 800b0ea:	2208      	movs	r2, #8
 800b0ec:	0019      	movs	r1, r3
 800b0ee:	2059      	movs	r0, #89	@ 0x59
 800b0f0:	f7ff ffae 	bl	800b050 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b0f4:	f003 f944 	bl	800e380 <HAL_GetTick>
 800b0f8:	0003      	movs	r3, r0
 800b0fa:	33aa      	adds	r3, #170	@ 0xaa
 800b0fc:	001a      	movs	r2, r3
 800b0fe:	4b09      	ldr	r3, [pc, #36]	@ (800b124 <SGP_StartMeasurement+0x64>)
 800b100:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b102:	4b09      	ldr	r3, [pc, #36]	@ (800b128 <SGP_StartMeasurement+0x68>)
 800b104:	2200      	movs	r2, #0
 800b106:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b108:	4b08      	ldr	r3, [pc, #32]	@ (800b12c <SGP_StartMeasurement+0x6c>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	701a      	strb	r2, [r3, #0]
}
 800b10e:	46c0      	nop			@ (mov r8, r8)
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	200012a8 	.word	0x200012a8
 800b118:	20000094 	.word	0x20000094
 800b11c:	200000a8 	.word	0x200000a8
 800b120:	2000008c 	.word	0x2000008c
 800b124:	200000a0 	.word	0x200000a0
 800b128:	200011fc 	.word	0x200011fc
 800b12c:	200011fd 	.word	0x200011fd

0800b130 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b134:	4b04      	ldr	r3, [pc, #16]	@ (800b148 <SGP_HeatedUp+0x18>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	0018      	movs	r0, r3
 800b13a:	f002 fc75 	bl	800da28 <TimestampIsReached>
 800b13e:	0003      	movs	r3, r0
}
 800b140:	0018      	movs	r0, r3
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	46c0      	nop			@ (mov r8, r8)
 800b148:	200000a0 	.word	0x200000a0

0800b14c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b150:	4b04      	ldr	r3, [pc, #16]	@ (800b164 <SGP_MeasurementReady+0x18>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	0018      	movs	r0, r3
 800b156:	f002 fc67 	bl	800da28 <TimestampIsReached>
 800b15a:	0003      	movs	r3, r0
}
 800b15c:	0018      	movs	r0, r3
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	46c0      	nop			@ (mov r8, r8)
 800b164:	200000a8 	.word	0x200000a8

0800b168 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b16c:	4b04      	ldr	r3, [pc, #16]	@ (800b180 <SGP_MeasurementDone+0x18>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	0018      	movs	r0, r3
 800b172:	f002 fc59 	bl	800da28 <TimestampIsReached>
 800b176:	0003      	movs	r3, r0
}
 800b178:	0018      	movs	r0, r3
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	46c0      	nop			@ (mov r8, r8)
 800b180:	200000a4 	.word	0x200000a4

0800b184 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b188:	4b04      	ldr	r3, [pc, #16]	@ (800b19c <SGP_TurnHeaterOff+0x18>)
 800b18a:	2202      	movs	r2, #2
 800b18c:	0019      	movs	r1, r3
 800b18e:	2059      	movs	r0, #89	@ 0x59
 800b190:	f7ff ff5e 	bl	800b050 <WriteRegister>
}
 800b194:	46c0      	nop			@ (mov r8, r8)
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	46c0      	nop			@ (mov r8, r8)
 800b19c:	20000084 	.word	0x20000084

0800b1a0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b1a0:	b5b0      	push	{r4, r5, r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b1a8:	f7ff ffc2 	bl	800b130 <SGP_HeatedUp>
 800b1ac:	1e03      	subs	r3, r0, #0
 800b1ae:	d032      	beq.n	800b216 <SGP_GetMeasurementValues+0x76>
 800b1b0:	4bd4      	ldr	r3, [pc, #848]	@ (800b504 <SGP_GetMeasurementValues+0x364>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	4053      	eors	r3, r2
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d02b      	beq.n	800b216 <SGP_GetMeasurementValues+0x76>
 800b1be:	4bd2      	ldr	r3, [pc, #840]	@ (800b508 <SGP_GetMeasurementValues+0x368>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	4053      	eors	r3, r2
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d024      	beq.n	800b216 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b1cc:	4bcd      	ldr	r3, [pc, #820]	@ (800b504 <SGP_GetMeasurementValues+0x364>)
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b1d2:	4bce      	ldr	r3, [pc, #824]	@ (800b50c <SGP_GetMeasurementValues+0x36c>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00d      	beq.n	800b1f6 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b1da:	4bcd      	ldr	r3, [pc, #820]	@ (800b510 <SGP_GetMeasurementValues+0x370>)
 800b1dc:	2208      	movs	r2, #8
 800b1de:	0019      	movs	r1, r3
 800b1e0:	2059      	movs	r0, #89	@ 0x59
 800b1e2:	f7ff ff35 	bl	800b050 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b1e6:	f003 f8cb 	bl	800e380 <HAL_GetTick>
 800b1ea:	0003      	movs	r3, r0
 800b1ec:	331e      	adds	r3, #30
 800b1ee:	001a      	movs	r2, r3
 800b1f0:	4bc8      	ldr	r3, [pc, #800]	@ (800b514 <SGP_GetMeasurementValues+0x374>)
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	e00c      	b.n	800b210 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b1f6:	4bc8      	ldr	r3, [pc, #800]	@ (800b518 <SGP_GetMeasurementValues+0x378>)
 800b1f8:	2208      	movs	r2, #8
 800b1fa:	0019      	movs	r1, r3
 800b1fc:	2059      	movs	r0, #89	@ 0x59
 800b1fe:	f7ff ff27 	bl	800b050 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b202:	f003 f8bd 	bl	800e380 <HAL_GetTick>
 800b206:	0003      	movs	r3, r0
 800b208:	331e      	adds	r3, #30
 800b20a:	001a      	movs	r2, r3
 800b20c:	4bc1      	ldr	r3, [pc, #772]	@ (800b514 <SGP_GetMeasurementValues+0x374>)
 800b20e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b210:	4bbd      	ldr	r3, [pc, #756]	@ (800b508 <SGP_GetMeasurementValues+0x368>)
 800b212:	2201      	movs	r2, #1
 800b214:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b216:	4bbb      	ldr	r3, [pc, #748]	@ (800b504 <SGP_GetMeasurementValues+0x364>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d100      	bne.n	800b220 <SGP_GetMeasurementValues+0x80>
 800b21e:	e1a9      	b.n	800b574 <SGP_GetMeasurementValues+0x3d4>
 800b220:	f7ff ff94 	bl	800b14c <SGP_MeasurementReady>
 800b224:	1e03      	subs	r3, r0, #0
 800b226:	d100      	bne.n	800b22a <SGP_GetMeasurementValues+0x8a>
 800b228:	e1a4      	b.n	800b574 <SGP_GetMeasurementValues+0x3d4>
 800b22a:	4bbc      	ldr	r3, [pc, #752]	@ (800b51c <SGP_GetMeasurementValues+0x37c>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2201      	movs	r2, #1
 800b230:	4053      	eors	r3, r2
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	d100      	bne.n	800b23a <SGP_GetMeasurementValues+0x9a>
 800b238:	e19c      	b.n	800b574 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b23a:	4bb8      	ldr	r3, [pc, #736]	@ (800b51c <SGP_GetMeasurementValues+0x37c>)
 800b23c:	2201      	movs	r2, #1
 800b23e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b240:	4bb7      	ldr	r3, [pc, #732]	@ (800b520 <SGP_GetMeasurementValues+0x380>)
 800b242:	2203      	movs	r2, #3
 800b244:	0019      	movs	r1, r3
 800b246:	2059      	movs	r0, #89	@ 0x59
 800b248:	f7ff fee4 	bl	800b014 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b24c:	4bb4      	ldr	r3, [pc, #720]	@ (800b520 <SGP_GetMeasurementValues+0x380>)
 800b24e:	2203      	movs	r2, #3
 800b250:	2103      	movs	r1, #3
 800b252:	0018      	movs	r0, r3
 800b254:	f000 f9f4 	bl	800b640 <CheckCRC>
 800b258:	0003      	movs	r3, r0
 800b25a:	001a      	movs	r2, r3
 800b25c:	2301      	movs	r3, #1
 800b25e:	4053      	eors	r3, r2
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d02a      	beq.n	800b2bc <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b266:	4aaf      	ldr	r2, [pc, #700]	@ (800b524 <SGP_GetMeasurementValues+0x384>)
 800b268:	4baf      	ldr	r3, [pc, #700]	@ (800b528 <SGP_GetMeasurementValues+0x388>)
 800b26a:	0019      	movs	r1, r3
 800b26c:	2001      	movs	r0, #1
 800b26e:	f002 fc31 	bl	800dad4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b272:	4aae      	ldr	r2, [pc, #696]	@ (800b52c <SGP_GetMeasurementValues+0x38c>)
 800b274:	4bae      	ldr	r3, [pc, #696]	@ (800b530 <SGP_GetMeasurementValues+0x390>)
 800b276:	0019      	movs	r1, r3
 800b278:	2002      	movs	r0, #2
 800b27a:	f002 fc2b 	bl	800dad4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b27e:	230f      	movs	r3, #15
 800b280:	18fb      	adds	r3, r7, r3
 800b282:	2200      	movs	r2, #0
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e012      	b.n	800b2ae <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b288:	240f      	movs	r4, #15
 800b28a:	193b      	adds	r3, r7, r4
 800b28c:	7818      	ldrb	r0, [r3, #0]
 800b28e:	193b      	adds	r3, r7, r4
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	4aa3      	ldr	r2, [pc, #652]	@ (800b520 <SGP_GetMeasurementValues+0x380>)
 800b294:	5cd3      	ldrb	r3, [r2, r3]
 800b296:	4aa7      	ldr	r2, [pc, #668]	@ (800b534 <SGP_GetMeasurementValues+0x394>)
 800b298:	49a7      	ldr	r1, [pc, #668]	@ (800b538 <SGP_GetMeasurementValues+0x398>)
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	0003      	movs	r3, r0
 800b29e:	2003      	movs	r0, #3
 800b2a0:	f002 fc18 	bl	800dad4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b2a4:	193b      	adds	r3, r7, r4
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	193b      	adds	r3, r7, r4
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	701a      	strb	r2, [r3, #0]
 800b2ae:	230f      	movs	r3, #15
 800b2b0:	18fb      	adds	r3, r7, r3
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d9e7      	bls.n	800b288 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e173      	b.n	800b5a4 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b2bc:	f003 f860 	bl	800e380 <HAL_GetTick>
 800b2c0:	0003      	movs	r3, r0
 800b2c2:	22fa      	movs	r2, #250	@ 0xfa
 800b2c4:	0092      	lsls	r2, r2, #2
 800b2c6:	189a      	adds	r2, r3, r2
 800b2c8:	4b9c      	ldr	r3, [pc, #624]	@ (800b53c <SGP_GetMeasurementValues+0x39c>)
 800b2ca:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b2cc:	f7ff ff5a 	bl	800b184 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b2d0:	4b9b      	ldr	r3, [pc, #620]	@ (800b540 <SGP_GetMeasurementValues+0x3a0>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	4b99      	ldr	r3, [pc, #612]	@ (800b540 <SGP_GetMeasurementValues+0x3a0>)
 800b2da:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b2dc:	4b98      	ldr	r3, [pc, #608]	@ (800b540 <SGP_GetMeasurementValues+0x3a0>)
 800b2de:	781a      	ldrb	r2, [r3, #0]
 800b2e0:	4b98      	ldr	r3, [pc, #608]	@ (800b544 <SGP_GetMeasurementValues+0x3a4>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d200      	bcs.n	800b2ea <SGP_GetMeasurementValues+0x14a>
 800b2e8:	e144      	b.n	800b574 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b2ea:	4b8d      	ldr	r3, [pc, #564]	@ (800b520 <SGP_GetMeasurementValues+0x380>)
 800b2ec:	785b      	ldrb	r3, [r3, #1]
 800b2ee:	021b      	lsls	r3, r3, #8
 800b2f0:	b21a      	sxth	r2, r3
 800b2f2:	4b8b      	ldr	r3, [pc, #556]	@ (800b520 <SGP_GetMeasurementValues+0x380>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	b21b      	sxth	r3, r3
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	b21a      	sxth	r2, r3
 800b2fc:	240c      	movs	r4, #12
 800b2fe:	193b      	adds	r3, r7, r4
 800b300:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b306:	193b      	adds	r3, r7, r4
 800b308:	8819      	ldrh	r1, [r3, #0]
 800b30a:	2308      	movs	r3, #8
 800b30c:	18fa      	adds	r2, r7, r3
 800b30e:	4b8e      	ldr	r3, [pc, #568]	@ (800b548 <SGP_GetMeasurementValues+0x3a8>)
 800b310:	0018      	movs	r0, r3
 800b312:	f7fe febb 	bl	800a08c <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b316:	4b8d      	ldr	r3, [pc, #564]	@ (800b54c <SGP_GetMeasurementValues+0x3ac>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	3301      	adds	r3, #1
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	4b8b      	ldr	r3, [pc, #556]	@ (800b54c <SGP_GetMeasurementValues+0x3ac>)
 800b320:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b322:	4b8a      	ldr	r3, [pc, #552]	@ (800b54c <SGP_GetMeasurementValues+0x3ac>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d10d      	bne.n	800b346 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b32a:	193b      	adds	r3, r7, r4
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	4a88      	ldr	r2, [pc, #544]	@ (800b550 <SGP_GetMeasurementValues+0x3b0>)
 800b330:	4981      	ldr	r1, [pc, #516]	@ (800b538 <SGP_GetMeasurementValues+0x398>)
 800b332:	2003      	movs	r0, #3
 800b334:	f002 fbce 	bl	800dad4 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	4a86      	ldr	r2, [pc, #536]	@ (800b554 <SGP_GetMeasurementValues+0x3b4>)
 800b33c:	497e      	ldr	r1, [pc, #504]	@ (800b538 <SGP_GetMeasurementValues+0x398>)
 800b33e:	2003      	movs	r0, #3
 800b340:	f002 fbc8 	bl	800dad4 <CreateLine>
 800b344:	e006      	b.n	800b354 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b346:	4b81      	ldr	r3, [pc, #516]	@ (800b54c <SGP_GetMeasurementValues+0x3ac>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b0b      	cmp	r3, #11
 800b34c:	d102      	bne.n	800b354 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b34e:	4b7f      	ldr	r3, [pc, #508]	@ (800b54c <SGP_GetMeasurementValues+0x3ac>)
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	dd5a      	ble.n	800b418 <SGP_GetMeasurementValues+0x278>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b64      	cmp	r3, #100	@ 0x64
 800b368:	dc56      	bgt.n	800b418 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	0018      	movs	r0, r3
 800b370:	f7f8 f826 	bl	80033c0 <__aeabi_i2d>
 800b374:	2200      	movs	r2, #0
 800b376:	4b78      	ldr	r3, [pc, #480]	@ (800b558 <SGP_GetMeasurementValues+0x3b8>)
 800b378:	f7f6 fd1c 	bl	8001db4 <__aeabi_ddiv>
 800b37c:	0002      	movs	r2, r0
 800b37e:	000b      	movs	r3, r1
 800b380:	2000      	movs	r0, #0
 800b382:	4976      	ldr	r1, [pc, #472]	@ (800b55c <SGP_GetMeasurementValues+0x3bc>)
 800b384:	f7f7 fc22 	bl	8002bcc <__aeabi_dsub>
 800b388:	0002      	movs	r2, r0
 800b38a:	000b      	movs	r3, r1
 800b38c:	0014      	movs	r4, r2
 800b38e:	001d      	movs	r5, r3
 800b390:	4b73      	ldr	r3, [pc, #460]	@ (800b560 <SGP_GetMeasurementValues+0x3c0>)
 800b392:	881b      	ldrh	r3, [r3, #0]
 800b394:	0018      	movs	r0, r3
 800b396:	f7f8 f813 	bl	80033c0 <__aeabi_i2d>
 800b39a:	0002      	movs	r2, r0
 800b39c:	000b      	movs	r3, r1
 800b39e:	0020      	movs	r0, r4
 800b3a0:	0029      	movs	r1, r5
 800b3a2:	f7f7 f94b 	bl	800263c <__aeabi_dmul>
 800b3a6:	0002      	movs	r2, r0
 800b3a8:	000b      	movs	r3, r1
 800b3aa:	0010      	movs	r0, r2
 800b3ac:	0019      	movs	r1, r3
 800b3ae:	f7f5 f94d 	bl	800064c <__aeabi_d2uiz>
 800b3b2:	0003      	movs	r3, r0
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	4b6b      	ldr	r3, [pc, #428]	@ (800b564 <SGP_GetMeasurementValues+0x3c4>)
 800b3b8:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	0018      	movs	r0, r3
 800b3c0:	f7f7 fffe 	bl	80033c0 <__aeabi_i2d>
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	4b64      	ldr	r3, [pc, #400]	@ (800b558 <SGP_GetMeasurementValues+0x3b8>)
 800b3c8:	f7f6 fcf4 	bl	8001db4 <__aeabi_ddiv>
 800b3cc:	0002      	movs	r2, r0
 800b3ce:	000b      	movs	r3, r1
 800b3d0:	0014      	movs	r4, r2
 800b3d2:	001d      	movs	r5, r3
 800b3d4:	4b62      	ldr	r3, [pc, #392]	@ (800b560 <SGP_GetMeasurementValues+0x3c0>)
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	0018      	movs	r0, r3
 800b3da:	f7f7 fff1 	bl	80033c0 <__aeabi_i2d>
 800b3de:	0002      	movs	r2, r0
 800b3e0:	000b      	movs	r3, r1
 800b3e2:	0020      	movs	r0, r4
 800b3e4:	0029      	movs	r1, r5
 800b3e6:	f7f7 f929 	bl	800263c <__aeabi_dmul>
 800b3ea:	0002      	movs	r2, r0
 800b3ec:	000b      	movs	r3, r1
 800b3ee:	0010      	movs	r0, r2
 800b3f0:	0019      	movs	r1, r3
 800b3f2:	f7f5 f92b 	bl	800064c <__aeabi_d2uiz>
 800b3f6:	0003      	movs	r3, r0
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	4b5b      	ldr	r3, [pc, #364]	@ (800b568 <SGP_GetMeasurementValues+0x3c8>)
 800b3fc:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800b3fe:	4b58      	ldr	r3, [pc, #352]	@ (800b560 <SGP_GetMeasurementValues+0x3c0>)
 800b400:	881a      	ldrh	r2, [r3, #0]
 800b402:	4b5a      	ldr	r3, [pc, #360]	@ (800b56c <SGP_GetMeasurementValues+0x3cc>)
 800b404:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b406:	4b59      	ldr	r3, [pc, #356]	@ (800b56c <SGP_GetMeasurementValues+0x3cc>)
 800b408:	8818      	ldrh	r0, [r3, #0]
 800b40a:	4b56      	ldr	r3, [pc, #344]	@ (800b564 <SGP_GetMeasurementValues+0x3c4>)
 800b40c:	8819      	ldrh	r1, [r3, #0]
 800b40e:	4b56      	ldr	r3, [pc, #344]	@ (800b568 <SGP_GetMeasurementValues+0x3c8>)
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	001a      	movs	r2, r3
 800b414:	f001 fbd4 	bl	800cbc0 <SetVocLED>
      }
      if(*vocIndex > 100){
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b64      	cmp	r3, #100	@ 0x64
 800b41e:	dd66      	ble.n	800b4ee <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	0018      	movs	r0, r3
 800b426:	f7f7 ffcb 	bl	80033c0 <__aeabi_i2d>
 800b42a:	2200      	movs	r2, #0
 800b42c:	4b4a      	ldr	r3, [pc, #296]	@ (800b558 <SGP_GetMeasurementValues+0x3b8>)
 800b42e:	f7f7 fbcd 	bl	8002bcc <__aeabi_dsub>
 800b432:	0002      	movs	r2, r0
 800b434:	000b      	movs	r3, r1
 800b436:	0010      	movs	r0, r2
 800b438:	0019      	movs	r1, r3
 800b43a:	2200      	movs	r2, #0
 800b43c:	4b4c      	ldr	r3, [pc, #304]	@ (800b570 <SGP_GetMeasurementValues+0x3d0>)
 800b43e:	f7f6 fcb9 	bl	8001db4 <__aeabi_ddiv>
 800b442:	0002      	movs	r2, r0
 800b444:	000b      	movs	r3, r1
 800b446:	0014      	movs	r4, r2
 800b448:	001d      	movs	r5, r3
 800b44a:	4b45      	ldr	r3, [pc, #276]	@ (800b560 <SGP_GetMeasurementValues+0x3c0>)
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	0018      	movs	r0, r3
 800b450:	f7f7 ffb6 	bl	80033c0 <__aeabi_i2d>
 800b454:	0002      	movs	r2, r0
 800b456:	000b      	movs	r3, r1
 800b458:	0020      	movs	r0, r4
 800b45a:	0029      	movs	r1, r5
 800b45c:	f7f7 f8ee 	bl	800263c <__aeabi_dmul>
 800b460:	0002      	movs	r2, r0
 800b462:	000b      	movs	r3, r1
 800b464:	0010      	movs	r0, r2
 800b466:	0019      	movs	r1, r3
 800b468:	f7f5 f8f0 	bl	800064c <__aeabi_d2uiz>
 800b46c:	0003      	movs	r3, r0
 800b46e:	b29a      	uxth	r2, r3
 800b470:	4b3c      	ldr	r3, [pc, #240]	@ (800b564 <SGP_GetMeasurementValues+0x3c4>)
 800b472:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	0018      	movs	r0, r3
 800b47a:	f7f7 ffa1 	bl	80033c0 <__aeabi_i2d>
 800b47e:	2200      	movs	r2, #0
 800b480:	4b35      	ldr	r3, [pc, #212]	@ (800b558 <SGP_GetMeasurementValues+0x3b8>)
 800b482:	f7f7 fba3 	bl	8002bcc <__aeabi_dsub>
 800b486:	0002      	movs	r2, r0
 800b488:	000b      	movs	r3, r1
 800b48a:	0010      	movs	r0, r2
 800b48c:	0019      	movs	r1, r3
 800b48e:	2200      	movs	r2, #0
 800b490:	4b37      	ldr	r3, [pc, #220]	@ (800b570 <SGP_GetMeasurementValues+0x3d0>)
 800b492:	f7f6 fc8f 	bl	8001db4 <__aeabi_ddiv>
 800b496:	0002      	movs	r2, r0
 800b498:	000b      	movs	r3, r1
 800b49a:	2000      	movs	r0, #0
 800b49c:	492f      	ldr	r1, [pc, #188]	@ (800b55c <SGP_GetMeasurementValues+0x3bc>)
 800b49e:	f7f7 fb95 	bl	8002bcc <__aeabi_dsub>
 800b4a2:	0002      	movs	r2, r0
 800b4a4:	000b      	movs	r3, r1
 800b4a6:	0014      	movs	r4, r2
 800b4a8:	001d      	movs	r5, r3
 800b4aa:	4b2d      	ldr	r3, [pc, #180]	@ (800b560 <SGP_GetMeasurementValues+0x3c0>)
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	f7f7 ff86 	bl	80033c0 <__aeabi_i2d>
 800b4b4:	0002      	movs	r2, r0
 800b4b6:	000b      	movs	r3, r1
 800b4b8:	0020      	movs	r0, r4
 800b4ba:	0029      	movs	r1, r5
 800b4bc:	f7f7 f8be 	bl	800263c <__aeabi_dmul>
 800b4c0:	0002      	movs	r2, r0
 800b4c2:	000b      	movs	r3, r1
 800b4c4:	0010      	movs	r0, r2
 800b4c6:	0019      	movs	r1, r3
 800b4c8:	f7f5 f8c0 	bl	800064c <__aeabi_d2uiz>
 800b4cc:	0003      	movs	r3, r0
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	4b26      	ldr	r3, [pc, #152]	@ (800b56c <SGP_GetMeasurementValues+0x3cc>)
 800b4d2:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b4d4:	4b22      	ldr	r3, [pc, #136]	@ (800b560 <SGP_GetMeasurementValues+0x3c0>)
 800b4d6:	881a      	ldrh	r2, [r3, #0]
 800b4d8:	4b23      	ldr	r3, [pc, #140]	@ (800b568 <SGP_GetMeasurementValues+0x3c8>)
 800b4da:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b4dc:	4b23      	ldr	r3, [pc, #140]	@ (800b56c <SGP_GetMeasurementValues+0x3cc>)
 800b4de:	8818      	ldrh	r0, [r3, #0]
 800b4e0:	4b20      	ldr	r3, [pc, #128]	@ (800b564 <SGP_GetMeasurementValues+0x3c4>)
 800b4e2:	8819      	ldrh	r1, [r3, #0]
 800b4e4:	4b20      	ldr	r3, [pc, #128]	@ (800b568 <SGP_GetMeasurementValues+0x3c8>)
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	001a      	movs	r2, r3
 800b4ea:	f001 fb69 	bl	800cbc0 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b4ee:	4b14      	ldr	r3, [pc, #80]	@ (800b540 <SGP_GetMeasurementValues+0x3a0>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b4f4:	4b05      	ldr	r3, [pc, #20]	@ (800b50c <SGP_GetMeasurementValues+0x36c>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b4fa:	4b03      	ldr	r3, [pc, #12]	@ (800b508 <SGP_GetMeasurementValues+0x368>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b500:	2301      	movs	r3, #1
 800b502:	e04f      	b.n	800b5a4 <SGP_GetMeasurementValues+0x404>
 800b504:	200011fc 	.word	0x200011fc
 800b508:	200012a9 	.word	0x200012a9
 800b50c:	200012a8 	.word	0x200012a8
 800b510:	20000094 	.word	0x20000094
 800b514:	200000a8 	.word	0x200000a8
 800b518:	2000008c 	.word	0x2000008c
 800b51c:	200011fd 	.word	0x200011fd
 800b520:	200011ec 	.word	0x200011ec
 800b524:	08023fd8 	.word	0x08023fd8
 800b528:	08024000 	.word	0x08024000
 800b52c:	08024004 	.word	0x08024004
 800b530:	08024024 	.word	0x08024024
 800b534:	08024028 	.word	0x08024028
 800b538:	08024048 	.word	0x08024048
 800b53c:	200000a4 	.word	0x200000a4
 800b540:	200011f5 	.word	0x200011f5
 800b544:	2000009e 	.word	0x2000009e
 800b548:	20001200 	.word	0x20001200
 800b54c:	200011f6 	.word	0x200011f6
 800b550:	0802404c 	.word	0x0802404c
 800b554:	08024068 	.word	0x08024068
 800b558:	40590000 	.word	0x40590000
 800b55c:	3ff00000 	.word	0x3ff00000
 800b560:	200000ac 	.word	0x200000ac
 800b564:	200012b4 	.word	0x200012b4
 800b568:	200012b2 	.word	0x200012b2
 800b56c:	200012b0 	.word	0x200012b0
 800b570:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b574:	f7ff fdf8 	bl	800b168 <SGP_MeasurementDone>
 800b578:	1e03      	subs	r3, r0, #0
 800b57a:	d012      	beq.n	800b5a2 <SGP_GetMeasurementValues+0x402>
 800b57c:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ac <SGP_GetMeasurementValues+0x40c>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00e      	beq.n	800b5a2 <SGP_GetMeasurementValues+0x402>
 800b584:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b0 <SGP_GetMeasurementValues+0x410>)
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00a      	beq.n	800b5a2 <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b58c:	4a09      	ldr	r2, [pc, #36]	@ (800b5b4 <SGP_GetMeasurementValues+0x414>)
 800b58e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b8 <SGP_GetMeasurementValues+0x418>)
 800b590:	0019      	movs	r1, r3
 800b592:	2003      	movs	r0, #3
 800b594:	f002 fa9e 	bl	800dad4 <CreateLine>
    SGP_StartMeasurement();
 800b598:	f7ff fd92 	bl	800b0c0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b59c:	4b07      	ldr	r3, [pc, #28]	@ (800b5bc <SGP_GetMeasurementValues+0x41c>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	0018      	movs	r0, r3
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	b004      	add	sp, #16
 800b5aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ac:	200011fc 	.word	0x200011fc
 800b5b0:	200011fd 	.word	0x200011fd
 800b5b4:	08024084 	.word	0x08024084
 800b5b8:	08024048 	.word	0x08024048
 800b5bc:	200012a9 	.word	0x200012a9

0800b5c0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b630 <SGP_DeviceConnected+0x70>)
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	0019      	movs	r1, r3
 800b5cc:	2059      	movs	r0, #89	@ 0x59
 800b5ce:	f7ff fd3f 	bl	800b050 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	f002 fede 	bl	800e394 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b5d8:	4b16      	ldr	r3, [pc, #88]	@ (800b634 <SGP_DeviceConnected+0x74>)
 800b5da:	2209      	movs	r2, #9
 800b5dc:	0019      	movs	r1, r3
 800b5de:	2059      	movs	r0, #89	@ 0x59
 800b5e0:	f7ff fd18 	bl	800b014 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b5e4:	1dfb      	adds	r3, r7, #7
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	e011      	b.n	800b610 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b5ec:	1dfb      	adds	r3, r7, #7
 800b5ee:	7818      	ldrb	r0, [r3, #0]
 800b5f0:	1dfb      	adds	r3, r7, #7
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	4a0f      	ldr	r2, [pc, #60]	@ (800b634 <SGP_DeviceConnected+0x74>)
 800b5f6:	5cd3      	ldrb	r3, [r2, r3]
 800b5f8:	4a0f      	ldr	r2, [pc, #60]	@ (800b638 <SGP_DeviceConnected+0x78>)
 800b5fa:	4910      	ldr	r1, [pc, #64]	@ (800b63c <SGP_DeviceConnected+0x7c>)
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	0003      	movs	r3, r0
 800b600:	2002      	movs	r0, #2
 800b602:	f002 fa67 	bl	800dad4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b606:	1dfb      	adds	r3, r7, #7
 800b608:	781a      	ldrb	r2, [r3, #0]
 800b60a:	1dfb      	adds	r3, r7, #7
 800b60c:	3201      	adds	r2, #1
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	1dfb      	adds	r3, r7, #7
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	2b08      	cmp	r3, #8
 800b616:	d9e9      	bls.n	800b5ec <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b618:	4b06      	ldr	r3, [pc, #24]	@ (800b634 <SGP_DeviceConnected+0x74>)
 800b61a:	2203      	movs	r2, #3
 800b61c:	2109      	movs	r1, #9
 800b61e:	0018      	movs	r0, r3
 800b620:	f000 f80e 	bl	800b640 <CheckCRC>
 800b624:	0003      	movs	r3, r0
}
 800b626:	0018      	movs	r0, r3
 800b628:	46bd      	mov	sp, r7
 800b62a:	b002      	add	sp, #8
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	46c0      	nop			@ (mov r8, r8)
 800b630:	20000088 	.word	0x20000088
 800b634:	200011ec 	.word	0x200011ec
 800b638:	080240a4 	.word	0x080240a4
 800b63c:	08024024 	.word	0x08024024

0800b640 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b642:	b08f      	sub	sp, #60	@ 0x3c
 800b644:	af00      	add	r7, sp, #0
 800b646:	6278      	str	r0, [r7, #36]	@ 0x24
 800b648:	0008      	movs	r0, r1
 800b64a:	0011      	movs	r1, r2
 800b64c:	2323      	movs	r3, #35	@ 0x23
 800b64e:	18fb      	adds	r3, r7, r3
 800b650:	1c02      	adds	r2, r0, #0
 800b652:	701a      	strb	r2, [r3, #0]
 800b654:	2322      	movs	r3, #34	@ 0x22
 800b656:	18fb      	adds	r3, r7, r3
 800b658:	1c0a      	adds	r2, r1, #0
 800b65a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b65c:	2317      	movs	r3, #23
 800b65e:	2220      	movs	r2, #32
 800b660:	189b      	adds	r3, r3, r2
 800b662:	19db      	adds	r3, r3, r7
 800b664:	2200      	movs	r2, #0
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	e09f      	b.n	800b7aa <CheckCRC+0x16a>
 800b66a:	466b      	mov	r3, sp
 800b66c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b66e:	2322      	movs	r3, #34	@ 0x22
 800b670:	18fb      	adds	r3, r7, r3
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	001a      	movs	r2, r3
 800b676:	3a01      	subs	r2, #1
 800b678:	633a      	str	r2, [r7, #48]	@ 0x30
 800b67a:	60bb      	str	r3, [r7, #8]
 800b67c:	2200      	movs	r2, #0
 800b67e:	60fa      	str	r2, [r7, #12]
 800b680:	68b8      	ldr	r0, [r7, #8]
 800b682:	68f9      	ldr	r1, [r7, #12]
 800b684:	0002      	movs	r2, r0
 800b686:	0f52      	lsrs	r2, r2, #29
 800b688:	000c      	movs	r4, r1
 800b68a:	00e4      	lsls	r4, r4, #3
 800b68c:	61fc      	str	r4, [r7, #28]
 800b68e:	69fc      	ldr	r4, [r7, #28]
 800b690:	4314      	orrs	r4, r2
 800b692:	61fc      	str	r4, [r7, #28]
 800b694:	0002      	movs	r2, r0
 800b696:	00d2      	lsls	r2, r2, #3
 800b698:	61ba      	str	r2, [r7, #24]
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	2200      	movs	r2, #0
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	6838      	ldr	r0, [r7, #0]
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	0002      	movs	r2, r0
 800b6a6:	0f52      	lsrs	r2, r2, #29
 800b6a8:	000c      	movs	r4, r1
 800b6aa:	00e4      	lsls	r4, r4, #3
 800b6ac:	617c      	str	r4, [r7, #20]
 800b6ae:	697c      	ldr	r4, [r7, #20]
 800b6b0:	4314      	orrs	r4, r2
 800b6b2:	617c      	str	r4, [r7, #20]
 800b6b4:	0002      	movs	r2, r0
 800b6b6:	00d2      	lsls	r2, r2, #3
 800b6b8:	613a      	str	r2, [r7, #16]
 800b6ba:	3307      	adds	r3, #7
 800b6bc:	08db      	lsrs	r3, r3, #3
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	466a      	mov	r2, sp
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	469d      	mov	sp, r3
 800b6c6:	466b      	mov	r3, sp
 800b6c8:	3300      	adds	r3, #0
 800b6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b6cc:	2316      	movs	r3, #22
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	189b      	adds	r3, r3, r2
 800b6d2:	19db      	adds	r3, r3, r7
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	701a      	strb	r2, [r3, #0]
 800b6d8:	e01e      	b.n	800b718 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b6da:	2317      	movs	r3, #23
 800b6dc:	2220      	movs	r2, #32
 800b6de:	189b      	adds	r3, r3, r2
 800b6e0:	19db      	adds	r3, r3, r7
 800b6e2:	781a      	ldrb	r2, [r3, #0]
 800b6e4:	2116      	movs	r1, #22
 800b6e6:	2320      	movs	r3, #32
 800b6e8:	18cb      	adds	r3, r1, r3
 800b6ea:	19db      	adds	r3, r3, r7
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	18d3      	adds	r3, r2, r3
 800b6f0:	001a      	movs	r2, r3
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	189a      	adds	r2, r3, r2
 800b6f6:	0008      	movs	r0, r1
 800b6f8:	2320      	movs	r3, #32
 800b6fa:	18cb      	adds	r3, r1, r3
 800b6fc:	19db      	adds	r3, r3, r7
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	7811      	ldrb	r1, [r2, #0]
 800b702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b704:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b706:	2320      	movs	r3, #32
 800b708:	18c3      	adds	r3, r0, r3
 800b70a:	19db      	adds	r3, r3, r7
 800b70c:	781a      	ldrb	r2, [r3, #0]
 800b70e:	2320      	movs	r3, #32
 800b710:	18c3      	adds	r3, r0, r3
 800b712:	19db      	adds	r3, r3, r7
 800b714:	3201      	adds	r2, #1
 800b716:	701a      	strb	r2, [r3, #0]
 800b718:	2316      	movs	r3, #22
 800b71a:	2220      	movs	r2, #32
 800b71c:	189b      	adds	r3, r3, r2
 800b71e:	19da      	adds	r2, r3, r7
 800b720:	2322      	movs	r3, #34	@ 0x22
 800b722:	18fb      	adds	r3, r7, r3
 800b724:	7812      	ldrb	r2, [r2, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d3d6      	bcc.n	800b6da <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b72c:	2417      	movs	r4, #23
 800b72e:	2320      	movs	r3, #32
 800b730:	18e3      	adds	r3, r4, r3
 800b732:	19db      	adds	r3, r3, r7
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	2322      	movs	r3, #34	@ 0x22
 800b738:	18fb      	adds	r3, r7, r3
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	18d3      	adds	r3, r2, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b742:	18d2      	adds	r2, r2, r3
 800b744:	250b      	movs	r5, #11
 800b746:	2320      	movs	r3, #32
 800b748:	18eb      	adds	r3, r5, r3
 800b74a:	19db      	adds	r3, r3, r7
 800b74c:	7812      	ldrb	r2, [r2, #0]
 800b74e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b750:	2322      	movs	r3, #34	@ 0x22
 800b752:	18fb      	adds	r3, r7, r3
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	3b01      	subs	r3, #1
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	0011      	movs	r1, r2
 800b75e:	0018      	movs	r0, r3
 800b760:	f000 f838 	bl	800b7d4 <CalculateCRC>
 800b764:	0003      	movs	r3, r0
 800b766:	001a      	movs	r2, r3
 800b768:	2320      	movs	r3, #32
 800b76a:	18eb      	adds	r3, r5, r3
 800b76c:	19db      	adds	r3, r3, r7
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	4293      	cmp	r3, r2
 800b772:	d00c      	beq.n	800b78e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b774:	2320      	movs	r3, #32
 800b776:	18e3      	adds	r3, r4, r3
 800b778:	19db      	adds	r3, r3, r7
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	4a13      	ldr	r2, [pc, #76]	@ (800b7cc <CheckCRC+0x18c>)
 800b780:	4913      	ldr	r1, [pc, #76]	@ (800b7d0 <CheckCRC+0x190>)
 800b782:	2001      	movs	r0, #1
 800b784:	f002 f9a6 	bl	800dad4 <CreateLine>
      return false;
 800b788:	2300      	movs	r3, #0
 800b78a:	46b5      	mov	sp, r6
 800b78c:	e019      	b.n	800b7c2 <CheckCRC+0x182>
 800b78e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b790:	2217      	movs	r2, #23
 800b792:	2320      	movs	r3, #32
 800b794:	18d3      	adds	r3, r2, r3
 800b796:	19db      	adds	r3, r3, r7
 800b798:	2120      	movs	r1, #32
 800b79a:	1852      	adds	r2, r2, r1
 800b79c:	19d1      	adds	r1, r2, r7
 800b79e:	2222      	movs	r2, #34	@ 0x22
 800b7a0:	18ba      	adds	r2, r7, r2
 800b7a2:	7809      	ldrb	r1, [r1, #0]
 800b7a4:	7812      	ldrb	r2, [r2, #0]
 800b7a6:	188a      	adds	r2, r1, r2
 800b7a8:	701a      	strb	r2, [r3, #0]
 800b7aa:	2317      	movs	r3, #23
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	189b      	adds	r3, r3, r2
 800b7b0:	19da      	adds	r2, r3, r7
 800b7b2:	2323      	movs	r3, #35	@ 0x23
 800b7b4:	18fb      	adds	r3, r7, r3
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d200      	bcs.n	800b7c0 <CheckCRC+0x180>
 800b7be:	e754      	b.n	800b66a <CheckCRC+0x2a>
    }
  }
  return true;
 800b7c0:	2301      	movs	r3, #1
}
 800b7c2:	0018      	movs	r0, r3
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	b00f      	add	sp, #60	@ 0x3c
 800b7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	080240c4 	.word	0x080240c4
 800b7d0:	08024000 	.word	0x08024000

0800b7d4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	000a      	movs	r2, r1
 800b7de:	1cfb      	adds	r3, r7, #3
 800b7e0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b7e2:	230f      	movs	r3, #15
 800b7e4:	18fb      	adds	r3, r7, r3
 800b7e6:	22ff      	movs	r2, #255	@ 0xff
 800b7e8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b7ea:	230e      	movs	r3, #14
 800b7ec:	18fb      	adds	r3, r7, r3
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	e037      	b.n	800b864 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b7f4:	230e      	movs	r3, #14
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	18d3      	adds	r3, r2, r3
 800b7fe:	7819      	ldrb	r1, [r3, #0]
 800b800:	220f      	movs	r2, #15
 800b802:	18bb      	adds	r3, r7, r2
 800b804:	18ba      	adds	r2, r7, r2
 800b806:	7812      	ldrb	r2, [r2, #0]
 800b808:	404a      	eors	r2, r1
 800b80a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b80c:	230d      	movs	r3, #13
 800b80e:	18fb      	adds	r3, r7, r3
 800b810:	2200      	movs	r2, #0
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	e01b      	b.n	800b84e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b816:	210f      	movs	r1, #15
 800b818:	187b      	adds	r3, r7, r1
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da09      	bge.n	800b836 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b822:	187b      	adds	r3, r7, r1
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	b25b      	sxtb	r3, r3
 800b82a:	2231      	movs	r2, #49	@ 0x31
 800b82c:	4053      	eors	r3, r2
 800b82e:	b25a      	sxtb	r2, r3
 800b830:	187b      	adds	r3, r7, r1
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	e005      	b.n	800b842 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b836:	230f      	movs	r3, #15
 800b838:	18fa      	adds	r2, r7, r3
 800b83a:	18fb      	adds	r3, r7, r3
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	18db      	adds	r3, r3, r3
 800b840:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b842:	210d      	movs	r1, #13
 800b844:	187b      	adds	r3, r7, r1
 800b846:	781a      	ldrb	r2, [r3, #0]
 800b848:	187b      	adds	r3, r7, r1
 800b84a:	3201      	adds	r2, #1
 800b84c:	701a      	strb	r2, [r3, #0]
 800b84e:	230d      	movs	r3, #13
 800b850:	18fb      	adds	r3, r7, r3
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	2b07      	cmp	r3, #7
 800b856:	d9de      	bls.n	800b816 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b858:	210e      	movs	r1, #14
 800b85a:	187b      	adds	r3, r7, r1
 800b85c:	781a      	ldrb	r2, [r3, #0]
 800b85e:	187b      	adds	r3, r7, r1
 800b860:	3201      	adds	r2, #1
 800b862:	701a      	strb	r2, [r3, #0]
 800b864:	230e      	movs	r3, #14
 800b866:	18fa      	adds	r2, r7, r3
 800b868:	1cfb      	adds	r3, r7, #3
 800b86a:	7812      	ldrb	r2, [r2, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d3c0      	bcc.n	800b7f4 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b872:	230f      	movs	r3, #15
 800b874:	18fb      	adds	r3, r7, r3
 800b876:	781b      	ldrb	r3, [r3, #0]
}
 800b878:	0018      	movs	r0, r3
 800b87a:	46bd      	mov	sp, r7
 800b87c:	b004      	add	sp, #16
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4936      	ldr	r1, [pc, #216]	@ (800b968 <SGP_GetHT+0xe8>)
 800b890:	1c18      	adds	r0, r3, #0
 800b892:	f7f5 f815 	bl	80008c0 <__aeabi_fadd>
 800b896:	1c03      	adds	r3, r0, #0
 800b898:	4934      	ldr	r1, [pc, #208]	@ (800b96c <SGP_GetHT+0xec>)
 800b89a:	1c18      	adds	r0, r3, #0
 800b89c:	f7f5 f99a 	bl	8000bd4 <__aeabi_fdiv>
 800b8a0:	1c03      	adds	r3, r0, #0
 800b8a2:	4933      	ldr	r1, [pc, #204]	@ (800b970 <SGP_GetHT+0xf0>)
 800b8a4:	1c18      	adds	r0, r3, #0
 800b8a6:	f7f5 fb7b 	bl	8000fa0 <__aeabi_fmul>
 800b8aa:	1c03      	adds	r3, r0, #0
 800b8ac:	1c18      	adds	r0, r3, #0
 800b8ae:	f7f4 feb5 	bl	800061c <__aeabi_f2uiz>
 800b8b2:	0003      	movs	r3, r0
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	4b2f      	ldr	r3, [pc, #188]	@ (800b974 <SGP_GetHT+0xf4>)
 800b8b8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	492e      	ldr	r1, [pc, #184]	@ (800b978 <SGP_GetHT+0xf8>)
 800b8c0:	1c18      	adds	r0, r3, #0
 800b8c2:	f7f5 f987 	bl	8000bd4 <__aeabi_fdiv>
 800b8c6:	1c03      	adds	r3, r0, #0
 800b8c8:	4929      	ldr	r1, [pc, #164]	@ (800b970 <SGP_GetHT+0xf0>)
 800b8ca:	1c18      	adds	r0, r3, #0
 800b8cc:	f7f5 fb68 	bl	8000fa0 <__aeabi_fmul>
 800b8d0:	1c03      	adds	r3, r0, #0
 800b8d2:	1c18      	adds	r0, r3, #0
 800b8d4:	f7f4 fea2 	bl	800061c <__aeabi_f2uiz>
 800b8d8:	0003      	movs	r3, r0
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	4b27      	ldr	r3, [pc, #156]	@ (800b97c <SGP_GetHT+0xfc>)
 800b8de:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b8e0:	4b26      	ldr	r3, [pc, #152]	@ (800b97c <SGP_GetHT+0xfc>)
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	0a1b      	lsrs	r3, r3, #8
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	4b25      	ldr	r3, [pc, #148]	@ (800b980 <SGP_GetHT+0x100>)
 800b8ec:	709a      	strb	r2, [r3, #2]
 800b8ee:	4b24      	ldr	r3, [pc, #144]	@ (800b980 <SGP_GetHT+0x100>)
 800b8f0:	789a      	ldrb	r2, [r3, #2]
 800b8f2:	210c      	movs	r1, #12
 800b8f4:	187b      	adds	r3, r7, r1
 800b8f6:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b8f8:	4b20      	ldr	r3, [pc, #128]	@ (800b97c <SGP_GetHT+0xfc>)
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	4b20      	ldr	r3, [pc, #128]	@ (800b980 <SGP_GetHT+0x100>)
 800b900:	70da      	strb	r2, [r3, #3]
 800b902:	4b1f      	ldr	r3, [pc, #124]	@ (800b980 <SGP_GetHT+0x100>)
 800b904:	78da      	ldrb	r2, [r3, #3]
 800b906:	187b      	adds	r3, r7, r1
 800b908:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b90a:	187b      	adds	r3, r7, r1
 800b90c:	2102      	movs	r1, #2
 800b90e:	0018      	movs	r0, r3
 800b910:	f7ff ff60 	bl	800b7d4 <CalculateCRC>
 800b914:	0003      	movs	r3, r0
 800b916:	001a      	movs	r2, r3
 800b918:	4b19      	ldr	r3, [pc, #100]	@ (800b980 <SGP_GetHT+0x100>)
 800b91a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b91c:	4b15      	ldr	r3, [pc, #84]	@ (800b974 <SGP_GetHT+0xf4>)
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	0a1b      	lsrs	r3, r3, #8
 800b922:	b29b      	uxth	r3, r3
 800b924:	b2da      	uxtb	r2, r3
 800b926:	4b16      	ldr	r3, [pc, #88]	@ (800b980 <SGP_GetHT+0x100>)
 800b928:	715a      	strb	r2, [r3, #5]
 800b92a:	4b15      	ldr	r3, [pc, #84]	@ (800b980 <SGP_GetHT+0x100>)
 800b92c:	795a      	ldrb	r2, [r3, #5]
 800b92e:	2108      	movs	r1, #8
 800b930:	187b      	adds	r3, r7, r1
 800b932:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b934:	4b0f      	ldr	r3, [pc, #60]	@ (800b974 <SGP_GetHT+0xf4>)
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	4b11      	ldr	r3, [pc, #68]	@ (800b980 <SGP_GetHT+0x100>)
 800b93c:	719a      	strb	r2, [r3, #6]
 800b93e:	4b10      	ldr	r3, [pc, #64]	@ (800b980 <SGP_GetHT+0x100>)
 800b940:	799a      	ldrb	r2, [r3, #6]
 800b942:	187b      	adds	r3, r7, r1
 800b944:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b946:	187b      	adds	r3, r7, r1
 800b948:	2102      	movs	r1, #2
 800b94a:	0018      	movs	r0, r3
 800b94c:	f7ff ff42 	bl	800b7d4 <CalculateCRC>
 800b950:	0003      	movs	r3, r0
 800b952:	001a      	movs	r2, r3
 800b954:	4b0a      	ldr	r3, [pc, #40]	@ (800b980 <SGP_GetHT+0x100>)
 800b956:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b958:	4b0a      	ldr	r3, [pc, #40]	@ (800b984 <SGP_GetHT+0x104>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	701a      	strb	r2, [r3, #0]
}
 800b95e:	46c0      	nop			@ (mov r8, r8)
 800b960:	46bd      	mov	sp, r7
 800b962:	b004      	add	sp, #16
 800b964:	bd80      	pop	{r7, pc}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	42340000 	.word	0x42340000
 800b96c:	432f0000 	.word	0x432f0000
 800b970:	477fff00 	.word	0x477fff00
 800b974:	200012a6 	.word	0x200012a6
 800b978:	42c80000 	.word	0x42c80000
 800b97c:	200012a4 	.word	0x200012a4
 800b980:	20000094 	.word	0x20000094
 800b984:	200012a8 	.word	0x200012a8

0800b988 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800b988:	b580      	push	{r7, lr}
 800b98a:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brougt to idle");
 800b98c:	4a09      	ldr	r2, [pc, #36]	@ (800b9b4 <SGP_SoftReset+0x2c>)
 800b98e:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b8 <SGP_SoftReset+0x30>)
 800b990:	0019      	movs	r1, r3
 800b992:	2003      	movs	r0, #3
 800b994:	f002 f89e 	bl	800dad4 <CreateLine>
  SGP_TurnHeaterOff();
 800b998:	f7ff fbf4 	bl	800b184 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800b99c:	200a      	movs	r0, #10
 800b99e:	f002 fcf9 	bl	800e394 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b9a2:	4b06      	ldr	r3, [pc, #24]	@ (800b9bc <SGP_SoftReset+0x34>)
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	0019      	movs	r1, r3
 800b9a8:	2059      	movs	r0, #89	@ 0x59
 800b9aa:	f7ff fb51 	bl	800b050 <WriteRegister>
}
 800b9ae:	46c0      	nop			@ (mov r8, r8)
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	0802416c 	.word	0x0802416c
 800b9b8:	08024048 	.word	0x08024048
 800b9bc:	2000009c 	.word	0x2000009c

0800b9c0 <ResetVOCresult>:

void ResetVOCresult(void) {
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800b9c4:	4b02      	ldr	r3, [pc, #8]	@ (800b9d0 <ResetVOCresult+0x10>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]
}
 800b9ca:	46c0      	nop			@ (mov r8, r8)
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	200012ac 	.word	0x200012ac

0800b9d4 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800b9d8:	4b29      	ldr	r3, [pc, #164]	@ (800ba80 <SGP_Upkeep+0xac>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b06      	cmp	r3, #6
 800b9de:	d842      	bhi.n	800ba66 <SGP_Upkeep+0x92>
 800b9e0:	009a      	lsls	r2, r3, #2
 800b9e2:	4b28      	ldr	r3, [pc, #160]	@ (800ba84 <SGP_Upkeep+0xb0>)
 800b9e4:	18d3      	adds	r3, r2, r3
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800b9ea:	4a27      	ldr	r2, [pc, #156]	@ (800ba88 <SGP_Upkeep+0xb4>)
 800b9ec:	4b27      	ldr	r3, [pc, #156]	@ (800ba8c <SGP_Upkeep+0xb8>)
 800b9ee:	0019      	movs	r1, r3
 800b9f0:	2003      	movs	r0, #3
 800b9f2:	f002 f86f 	bl	800dad4 <CreateLine>
    break;
 800b9f6:	e03d      	b.n	800ba74 <SGP_Upkeep+0xa0>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800b9f8:	f7ff ffe2 	bl	800b9c0 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800b9fc:	4b20      	ldr	r3, [pc, #128]	@ (800ba80 <SGP_Upkeep+0xac>)
 800b9fe:	2201      	movs	r2, #1
 800ba00:	701a      	strb	r2, [r3, #0]
    break;
 800ba02:	e037      	b.n	800ba74 <SGP_Upkeep+0xa0>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800ba04:	f7ff fb5c 	bl	800b0c0 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800ba08:	f001 f90e 	bl	800cc28 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800ba0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ba80 <SGP_Upkeep+0xac>)
 800ba0e:	2202      	movs	r2, #2
 800ba10:	701a      	strb	r2, [r3, #0]
   break;
 800ba12:	e02f      	b.n	800ba74 <SGP_Upkeep+0xa0>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800ba14:	4b1e      	ldr	r3, [pc, #120]	@ (800ba90 <SGP_Upkeep+0xbc>)
 800ba16:	0018      	movs	r0, r3
 800ba18:	f7ff fbc2 	bl	800b1a0 <SGP_GetMeasurementValues>
 800ba1c:	1e03      	subs	r3, r0, #0
 800ba1e:	d026      	beq.n	800ba6e <SGP_Upkeep+0x9a>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800ba20:	4b17      	ldr	r3, [pc, #92]	@ (800ba80 <SGP_Upkeep+0xac>)
 800ba22:	2203      	movs	r2, #3
 800ba24:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ba26:	e022      	b.n	800ba6e <SGP_Upkeep+0x9a>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results.");
    setVOC(vocIndex);
 800ba28:	4b19      	ldr	r3, [pc, #100]	@ (800ba90 <SGP_Upkeep+0xbc>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	0018      	movs	r0, r3
 800ba30:	f7f7 ff78 	bl	8003924 <setVOC>
    SGP40TimeStamp = HAL_GetTick() + 1000;  // about every 1 seconds
 800ba34:	f002 fca4 	bl	800e380 <HAL_GetTick>
 800ba38:	0003      	movs	r3, r0
 800ba3a:	22fa      	movs	r2, #250	@ 0xfa
 800ba3c:	0092      	lsls	r2, r2, #2
 800ba3e:	189a      	adds	r2, r3, r2
 800ba40:	4b14      	ldr	r3, [pc, #80]	@ (800ba94 <SGP_Upkeep+0xc0>)
 800ba42:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800ba44:	f001 f908 	bl	800cc58 <ResetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT;
 800ba48:	4b0d      	ldr	r3, [pc, #52]	@ (800ba80 <SGP_Upkeep+0xac>)
 800ba4a:	2206      	movs	r2, #6
 800ba4c:	701a      	strb	r2, [r3, #0]
    break;
 800ba4e:	e011      	b.n	800ba74 <SGP_Upkeep+0xa0>

  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800ba50:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <SGP_Upkeep+0xc0>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	0018      	movs	r0, r3
 800ba56:	f001 ffe7 	bl	800da28 <TimestampIsReached>
 800ba5a:	1e03      	subs	r3, r0, #0
 800ba5c:	d009      	beq.n	800ba72 <SGP_Upkeep+0x9e>
      SGPState = SGP_STATE_INIT;
 800ba5e:	4b08      	ldr	r3, [pc, #32]	@ (800ba80 <SGP_Upkeep+0xac>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ba64:	e005      	b.n	800ba72 <SGP_Upkeep+0x9e>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800ba66:	4b06      	ldr	r3, [pc, #24]	@ (800ba80 <SGP_Upkeep+0xac>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	701a      	strb	r2, [r3, #0]
    break;
 800ba6c:	e002      	b.n	800ba74 <SGP_Upkeep+0xa0>
    break;
 800ba6e:	46c0      	nop			@ (mov r8, r8)
 800ba70:	e000      	b.n	800ba74 <SGP_Upkeep+0xa0>
    break;
 800ba72:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800ba74:	4b02      	ldr	r3, [pc, #8]	@ (800ba80 <SGP_Upkeep+0xac>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
}
 800ba78:	0018      	movs	r0, r3
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	46c0      	nop			@ (mov r8, r8)
 800ba80:	200012b6 	.word	0x200012b6
 800ba84:	08024828 	.word	0x08024828
 800ba88:	08024184 	.word	0x08024184
 800ba8c:	08024048 	.word	0x08024048
 800ba90:	200012ac 	.word	0x200012ac
 800ba94:	200011f8 	.word	0x200011f8

0800ba98 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800baa0:	f002 fc6e 	bl	800e380 <HAL_GetTick>
 800baa4:	0002      	movs	r2, r0
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	18d2      	adds	r2, r2, r3
 800baaa:	4b03      	ldr	r3, [pc, #12]	@ (800bab8 <setSGP40TimeStamp+0x20>)
 800baac:	601a      	str	r2, [r3, #0]
}
 800baae:	46c0      	nop			@ (mov r8, r8)
 800bab0:	46bd      	mov	sp, r7
 800bab2:	b002      	add	sp, #8
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	200011f8 	.word	0x200011f8

0800babc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	0002      	movs	r2, r0
 800bac4:	1dfb      	adds	r3, r7, #7
 800bac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bac8:	1dfb      	adds	r3, r7, #7
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b7f      	cmp	r3, #127	@ 0x7f
 800bace:	d809      	bhi.n	800bae4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bad0:	1dfb      	adds	r3, r7, #7
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	001a      	movs	r2, r3
 800bad6:	231f      	movs	r3, #31
 800bad8:	401a      	ands	r2, r3
 800bada:	4b04      	ldr	r3, [pc, #16]	@ (800baec <__NVIC_EnableIRQ+0x30>)
 800badc:	2101      	movs	r1, #1
 800bade:	4091      	lsls	r1, r2
 800bae0:	000a      	movs	r2, r1
 800bae2:	601a      	str	r2, [r3, #0]
  }
}
 800bae4:	46c0      	nop			@ (mov r8, r8)
 800bae6:	46bd      	mov	sp, r7
 800bae8:	b002      	add	sp, #8
 800baea:	bd80      	pop	{r7, pc}
 800baec:	e000e100 	.word	0xe000e100

0800baf0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	0002      	movs	r2, r0
 800baf8:	1dfb      	adds	r3, r7, #7
 800bafa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bafc:	1dfb      	adds	r3, r7, #7
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb02:	d810      	bhi.n	800bb26 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb04:	1dfb      	adds	r3, r7, #7
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	001a      	movs	r2, r3
 800bb0a:	231f      	movs	r3, #31
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	4908      	ldr	r1, [pc, #32]	@ (800bb30 <__NVIC_DisableIRQ+0x40>)
 800bb10:	2201      	movs	r2, #1
 800bb12:	409a      	lsls	r2, r3
 800bb14:	0013      	movs	r3, r2
 800bb16:	2280      	movs	r2, #128	@ 0x80
 800bb18:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bb1a:	f3bf 8f4f 	dsb	sy
}
 800bb1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bb20:	f3bf 8f6f 	isb	sy
}
 800bb24:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800bb26:	46c0      	nop			@ (mov r8, r8)
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	b002      	add	sp, #8
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	46c0      	nop			@ (mov r8, r8)
 800bb30:	e000e100 	.word	0xe000e100

0800bb34 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800bb34:	b5b0      	push	{r4, r5, r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	0008      	movs	r0, r1
 800bb3e:	0011      	movs	r1, r2
 800bb40:	1cfb      	adds	r3, r7, #3
 800bb42:	1c02      	adds	r2, r0, #0
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	1cbb      	adds	r3, r7, #2
 800bb48:	1c0a      	adds	r2, r1, #0
 800bb4a:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800bb4c:	4b5b      	ldr	r3, [pc, #364]	@ (800bcbc <getSoundData+0x188>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2201      	movs	r2, #1
 800bb54:	4053      	eors	r3, r2
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d107      	bne.n	800bb6c <getSoundData+0x38>
 800bb5c:	4b58      	ldr	r3, [pc, #352]	@ (800bcc0 <getSoundData+0x18c>)
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	2201      	movs	r2, #1
 800bb64:	4053      	eors	r3, r2
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <getSoundData+0x3c>
    {
        return false;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e0a0      	b.n	800bcb2 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800bb70:	4b54      	ldr	r3, [pc, #336]	@ (800bcc4 <getSoundData+0x190>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bb7a:	4b53      	ldr	r3, [pc, #332]	@ (800bcc8 <getSoundData+0x194>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b25b      	sxtb	r3, r3
 800bb80:	0018      	movs	r0, r3
 800bb82:	f7ff ffb5 	bl	800baf0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800bb86:	f3bf 8f4f 	dsb	sy
}
 800bb8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bb8c:	f3bf 8f6f 	isb	sy
}
 800bb90:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800bb92:	1cfb      	adds	r3, r7, #3
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d04c      	beq.n	800bc34 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800bb9a:	4b4c      	ldr	r3, [pc, #304]	@ (800bccc <getSoundData+0x198>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d11b      	bne.n	800bbda <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bbae:	2300      	movs	r3, #0
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e00e      	b.n	800bbd2 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	18d3      	adds	r3, r2, r3
 800bbba:	3302      	adds	r3, #2
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	18d3      	adds	r3, r2, r3
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	2b05      	cmp	r3, #5
 800bbd6:	d9ed      	bls.n	800bbb4 <getSoundData+0x80>
 800bbd8:	e02c      	b.n	800bc34 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	1c59      	adds	r1, r3, #1
 800bbe0:	4b3b      	ldr	r3, [pc, #236]	@ (800bcd0 <getSoundData+0x19c>)
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	4b3b      	ldr	r3, [pc, #236]	@ (800bcd4 <getSoundData+0x1a0>)
 800bbe6:	681c      	ldr	r4, [r3, #0]
 800bbe8:	4b38      	ldr	r3, [pc, #224]	@ (800bccc <getSoundData+0x198>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	0023      	movs	r3, r4
 800bbf0:	f000 fde8 	bl	800c7c4 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	e019      	b.n	800bc2e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	18d3      	adds	r3, r2, r3
 800bc00:	1c98      	adds	r0, r3, #2
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	3308      	adds	r3, #8
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800bc0a:	4b33      	ldr	r3, [pc, #204]	@ (800bcd8 <getSoundData+0x1a4>)
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	0092      	lsls	r2, r2, #2
 800bc10:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800bc12:	4b32      	ldr	r3, [pc, #200]	@ (800bcdc <getSoundData+0x1a8>)
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	0092      	lsls	r2, r2, #2
 800bc18:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bc1a:	4b2c      	ldr	r3, [pc, #176]	@ (800bccc <getSoundData+0x198>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	0013      	movs	r3, r2
 800bc22:	0022      	movs	r2, r4
 800bc24:	f000 fdce 	bl	800c7c4 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	613b      	str	r3, [r7, #16]
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b05      	cmp	r3, #5
 800bc32:	d9e2      	bls.n	800bbfa <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800bc34:	1cbb      	adds	r3, r7, #2
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d028      	beq.n	800bc8e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800bc3c:	240e      	movs	r4, #14
 800bc3e:	193b      	adds	r3, r7, r4
 800bc40:	2200      	movs	r2, #0
 800bc42:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800bc44:	250d      	movs	r5, #13
 800bc46:	197b      	adds	r3, r7, r5
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800bc4c:	4b24      	ldr	r3, [pc, #144]	@ (800bce0 <getSoundData+0x1ac>)
 800bc4e:	6818      	ldr	r0, [r3, #0]
 800bc50:	4924      	ldr	r1, [pc, #144]	@ (800bce4 <getSoundData+0x1b0>)
 800bc52:	197b      	adds	r3, r7, r5
 800bc54:	193a      	adds	r2, r7, r4
 800bc56:	f000 fe59 	bl	800c90c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800bc5a:	193b      	adds	r3, r7, r4
 800bc5c:	881a      	ldrh	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	21ff      	movs	r1, #255	@ 0xff
 800bc62:	4011      	ands	r1, r2
 800bc64:	000c      	movs	r4, r1
 800bc66:	7b99      	ldrb	r1, [r3, #14]
 800bc68:	2000      	movs	r0, #0
 800bc6a:	4001      	ands	r1, r0
 800bc6c:	1c08      	adds	r0, r1, #0
 800bc6e:	1c21      	adds	r1, r4, #0
 800bc70:	4301      	orrs	r1, r0
 800bc72:	7399      	strb	r1, [r3, #14]
 800bc74:	0a12      	lsrs	r2, r2, #8
 800bc76:	b290      	uxth	r0, r2
 800bc78:	7bda      	ldrb	r2, [r3, #15]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	400a      	ands	r2, r1
 800bc7e:	1c11      	adds	r1, r2, #0
 800bc80:	1c02      	adds	r2, r0, #0
 800bc82:	430a      	orrs	r2, r1
 800bc84:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800bc86:	197b      	adds	r3, r7, r5
 800bc88:	781a      	ldrb	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800bc8e:	f000 f86f 	bl	800bd70 <micSettlingComplete>
 800bc92:	0003      	movs	r3, r0
 800bc94:	001a      	movs	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800bc9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bcc4 <getSoundData+0x190>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d005      	beq.n	800bcb0 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bca4:	4b08      	ldr	r3, [pc, #32]	@ (800bcc8 <getSoundData+0x194>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	b25b      	sxtb	r3, r3
 800bcaa:	0018      	movs	r0, r3
 800bcac:	f7ff ff06 	bl	800babc <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800bcb0:	2301      	movs	r3, #1
}
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	b006      	add	sp, #24
 800bcb8:	bdb0      	pop	{r4, r5, r7, pc}
 800bcba:	46c0      	nop			@ (mov r8, r8)
 800bcbc:	200012b8 	.word	0x200012b8
 800bcc0:	200012bb 	.word	0x200012bb
 800bcc4:	200012ba 	.word	0x200012ba
 800bcc8:	20001d08 	.word	0x20001d08
 800bccc:	20001d44 	.word	0x20001d44
 800bcd0:	20001d0c 	.word	0x20001d0c
 800bcd4:	20001d10 	.word	0x20001d10
 800bcd8:	20001d14 	.word	0x20001d14
 800bcdc:	20001d2c 	.word	0x20001d2c
 800bce0:	200012c0 	.word	0x200012c0
 800bce4:	3b5c7333 	.word	0x3b5c7333

0800bce8 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	001a      	movs	r2, r3
 800bcf6:	1cfb      	adds	r3, r7, #3
 800bcf8:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800bcfa:	4b09      	ldr	r3, [pc, #36]	@ (800bd20 <soundInit+0x38>)
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800bd00:	4b08      	ldr	r3, [pc, #32]	@ (800bd24 <soundInit+0x3c>)
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800bd06:	4b08      	ldr	r3, [pc, #32]	@ (800bd28 <soundInit+0x40>)
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bd0c:	4b07      	ldr	r3, [pc, #28]	@ (800bd2c <soundInit+0x44>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	569a      	ldrsb	r2, [r3, r2]
 800bd12:	4b06      	ldr	r3, [pc, #24]	@ (800bd2c <soundInit+0x44>)
 800bd14:	701a      	strb	r2, [r3, #0]

    return true;
 800bd16:	2301      	movs	r3, #1
}
 800bd18:	0018      	movs	r0, r3
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	b004      	add	sp, #16
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20001d00 	.word	0x20001d00
 800bd24:	20001cfc 	.word	0x20001cfc
 800bd28:	20001d04 	.word	0x20001d04
 800bd2c:	20001d08 	.word	0x20001d08

0800bd30 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800bd34:	4b02      	ldr	r3, [pc, #8]	@ (800bd40 <clearMaximumAmplitude+0x10>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	601a      	str	r2, [r3, #0]
}
 800bd3a:	46c0      	nop			@ (mov r8, r8)
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	200012c0 	.word	0x200012c0

0800bd44 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800bd48:	4b08      	ldr	r3, [pc, #32]	@ (800bd6c <startMicSettlingPeriod+0x28>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800bd52:	4b06      	ldr	r3, [pc, #24]	@ (800bd6c <startMicSettlingPeriod+0x28>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	0018      	movs	r0, r3
 800bd58:	f00a f8d6 	bl	8015f08 <HAL_TIM_Base_Start>
 800bd5c:	1e03      	subs	r3, r0, #0
 800bd5e:	d001      	beq.n	800bd64 <startMicSettlingPeriod+0x20>
    {
        return false;
 800bd60:	2300      	movs	r3, #0
 800bd62:	e000      	b.n	800bd66 <startMicSettlingPeriod+0x22>
    }
    return true;
 800bd64:	2301      	movs	r3, #1
}
 800bd66:	0018      	movs	r0, r3
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	20001cfc 	.word	0x20001cfc

0800bd70 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800bd76:	4b0e      	ldr	r3, [pc, #56]	@ (800bdb0 <micSettlingComplete+0x40>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	401a      	ands	r2, r3
 800bd82:	1dfb      	adds	r3, r7, #7
 800bd84:	3a01      	subs	r2, #1
 800bd86:	4251      	negs	r1, r2
 800bd88:	414a      	adcs	r2, r1
 800bd8a:	701a      	strb	r2, [r3, #0]
    if (complete)
 800bd8c:	1dfb      	adds	r3, r7, #7
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d007      	beq.n	800bda4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800bd94:	4b06      	ldr	r3, [pc, #24]	@ (800bdb0 <micSettlingComplete+0x40>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f00a f8ff 	bl	8015f9c <HAL_TIM_Base_Stop>
      DataReady = true;
 800bd9e:	4b05      	ldr	r3, [pc, #20]	@ (800bdb4 <micSettlingComplete+0x44>)
 800bda0:	2201      	movs	r2, #1
 800bda2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800bda4:	1dfb      	adds	r3, r7, #7
 800bda6:	781b      	ldrb	r3, [r3, #0]
}
 800bda8:	0018      	movs	r0, r3
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	b002      	add	sp, #8
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	20001cfc 	.word	0x20001cfc
 800bdb4:	200012b7 	.word	0x200012b7

0800bdb8 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	0002      	movs	r2, r0
 800bdc0:	1dfb      	adds	r3, r7, #7
 800bdc2:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800bdc4:	4b29      	ldr	r3, [pc, #164]	@ (800be6c <enableMicrophone+0xb4>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	1dfa      	adds	r2, r7, #7
 800bdcc:	7812      	ldrb	r2, [r2, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d101      	bne.n	800bdd6 <enableMicrophone+0x1e>
    {
        return true;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e045      	b.n	800be62 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bdd6:	1dfb      	adds	r3, r7, #7
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d025      	beq.n	800be2a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bdde:	f7ff ffb1 	bl	800bd44 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800bde2:	4b23      	ldr	r3, [pc, #140]	@ (800be70 <enableMicrophone+0xb8>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2280      	movs	r2, #128	@ 0x80
 800bde8:	0092      	lsls	r2, r2, #2
 800bdea:	4922      	ldr	r1, [pc, #136]	@ (800be74 <enableMicrophone+0xbc>)
 800bdec:	0018      	movs	r0, r3
 800bdee:	f006 faf5 	bl	80123dc <HAL_I2S_Receive_DMA>
 800bdf2:	1e03      	subs	r3, r0, #0
 800bdf4:	d001      	beq.n	800bdfa <enableMicrophone+0x42>
        {
            return false;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	e033      	b.n	800be62 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bdfa:	f7ff ff99 	bl	800bd30 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bdfe:	4b1e      	ldr	r3, [pc, #120]	@ (800be78 <enableMicrophone+0xc0>)
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800be04:	4b1d      	ldr	r3, [pc, #116]	@ (800be7c <enableMicrophone+0xc4>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	0018      	movs	r0, r3
 800be0c:	f7ff fe56 	bl	800babc <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800be10:	4b1b      	ldr	r3, [pc, #108]	@ (800be80 <enableMicrophone+0xc8>)
 800be12:	2201      	movs	r2, #1
 800be14:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800be16:	4b15      	ldr	r3, [pc, #84]	@ (800be6c <enableMicrophone+0xb4>)
 800be18:	2201      	movs	r2, #1
 800be1a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800be1c:	4b19      	ldr	r3, [pc, #100]	@ (800be84 <enableMicrophone+0xcc>)
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800be22:	4b19      	ldr	r3, [pc, #100]	@ (800be88 <enableMicrophone+0xd0>)
 800be24:	2200      	movs	r2, #0
 800be26:	701a      	strb	r2, [r3, #0]
 800be28:	e01a      	b.n	800be60 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800be2a:	4b14      	ldr	r3, [pc, #80]	@ (800be7c <enableMicrophone+0xc4>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	0018      	movs	r0, r3
 800be32:	f7ff fe5d 	bl	800baf0 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800be36:	4b12      	ldr	r3, [pc, #72]	@ (800be80 <enableMicrophone+0xc8>)
 800be38:	2200      	movs	r2, #0
 800be3a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800be3c:	4b11      	ldr	r3, [pc, #68]	@ (800be84 <enableMicrophone+0xcc>)
 800be3e:	2200      	movs	r2, #0
 800be40:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800be42:	4b11      	ldr	r3, [pc, #68]	@ (800be88 <enableMicrophone+0xd0>)
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800be48:	4b09      	ldr	r3, [pc, #36]	@ (800be70 <enableMicrophone+0xb8>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	0018      	movs	r0, r3
 800be4e:	f006 fb87 	bl	8012560 <HAL_I2S_DMAStop>
 800be52:	1e03      	subs	r3, r0, #0
 800be54:	d001      	beq.n	800be5a <enableMicrophone+0xa2>
        {
            return false;
 800be56:	2300      	movs	r3, #0
 800be58:	e003      	b.n	800be62 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800be5a:	4b04      	ldr	r3, [pc, #16]	@ (800be6c <enableMicrophone+0xb4>)
 800be5c:	2200      	movs	r2, #0
 800be5e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800be60:	2301      	movs	r3, #1
}
 800be62:	0018      	movs	r0, r3
 800be64:	46bd      	mov	sp, r7
 800be66:	b002      	add	sp, #8
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	46c0      	nop			@ (mov r8, r8)
 800be6c:	200012b8 	.word	0x200012b8
 800be70:	20001d00 	.word	0x20001d00
 800be74:	200012fc 	.word	0x200012fc
 800be78:	200012bc 	.word	0x200012bc
 800be7c:	20001d08 	.word	0x20001d08
 800be80:	200012ba 	.word	0x200012ba
 800be84:	200012b9 	.word	0x200012b9
 800be88:	200012bb 	.word	0x200012bb

0800be8c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800be90:	4b0c      	ldr	r3, [pc, #48]	@ (800bec4 <startSPLcalculation+0x38>)
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2201      	movs	r2, #1
 800be98:	4053      	eors	r3, r2
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d001      	beq.n	800bea4 <startSPLcalculation+0x18>
    {
        return false;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e00c      	b.n	800bebe <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800bea4:	4b08      	ldr	r3, [pc, #32]	@ (800bec8 <startSPLcalculation+0x3c>)
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <startSPLcalculation+0x26>
    {
        return true;
 800beae:	2301      	movs	r3, #1
 800beb0:	e005      	b.n	800bebe <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800beb2:	f000 fb63 	bl	800c57c <resetSPLstate>
    SPLcalcEnabled = true;
 800beb6:	4b04      	ldr	r3, [pc, #16]	@ (800bec8 <startSPLcalculation+0x3c>)
 800beb8:	2201      	movs	r2, #1
 800beba:	701a      	strb	r2, [r3, #0]
    return true;
 800bebc:	2301      	movs	r3, #1
}
 800bebe:	0018      	movs	r0, r3
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	200012b8 	.word	0x200012b8
 800bec8:	200012b9 	.word	0x200012b9

0800becc <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bed4:	4b05      	ldr	r3, [pc, #20]	@ (800beec <HAL_I2S_RxHalfCpltCallback+0x20>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d102      	bne.n	800bee4 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800bede:	2000      	movs	r0, #0
 800bee0:	f000 f81a 	bl	800bf18 <processHalfDMAbuffer>
  }
}
 800bee4:	46c0      	nop			@ (mov r8, r8)
 800bee6:	46bd      	mov	sp, r7
 800bee8:	b002      	add	sp, #8
 800beea:	bd80      	pop	{r7, pc}
 800beec:	20001d00 	.word	0x20001d00

0800bef0 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bef8:	4b06      	ldr	r3, [pc, #24]	@ (800bf14 <HAL_I2S_RxCpltCallback+0x24>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d104      	bne.n	800bf0c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800bf02:	2380      	movs	r3, #128	@ 0x80
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	0018      	movs	r0, r3
 800bf08:	f000 f806 	bl	800bf18 <processHalfDMAbuffer>
  }
}
 800bf0c:	46c0      	nop			@ (mov r8, r8)
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	b002      	add	sp, #8
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	20001d00 	.word	0x20001d00

0800bf18 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	005a      	lsls	r2, r3, #1
 800bf24:	4b15      	ldr	r3, [pc, #84]	@ (800bf7c <processHalfDMAbuffer+0x64>)
 800bf26:	18d3      	adds	r3, r2, r3
 800bf28:	4a15      	ldr	r2, [pc, #84]	@ (800bf80 <processHalfDMAbuffer+0x68>)
 800bf2a:	2180      	movs	r1, #128	@ 0x80
 800bf2c:	0089      	lsls	r1, r1, #2
 800bf2e:	0018      	movs	r0, r3
 800bf30:	f000 fd35 	bl	800c99e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800bf34:	4b13      	ldr	r3, [pc, #76]	@ (800bf84 <processHalfDMAbuffer+0x6c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	425a      	negs	r2, r3
 800bf3a:	4153      	adcs	r3, r2
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	4b11      	ldr	r3, [pc, #68]	@ (800bf84 <processHalfDMAbuffer+0x6c>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2109      	movs	r1, #9
 800bf44:	4299      	cmp	r1, r3
 800bf46:	419b      	sbcs	r3, r3
 800bf48:	425b      	negs	r3, r3
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	480c      	ldr	r0, [pc, #48]	@ (800bf80 <processHalfDMAbuffer+0x68>)
 800bf4e:	2180      	movs	r1, #128	@ 0x80
 800bf50:	f000 fb46 	bl	800c5e0 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800bf54:	4b0b      	ldr	r3, [pc, #44]	@ (800bf84 <processHalfDMAbuffer+0x6c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b09      	cmp	r3, #9
 800bf5a:	d804      	bhi.n	800bf66 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800bf5c:	4b09      	ldr	r3, [pc, #36]	@ (800bf84 <processHalfDMAbuffer+0x6c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	1c5a      	adds	r2, r3, #1
 800bf62:	4b08      	ldr	r3, [pc, #32]	@ (800bf84 <processHalfDMAbuffer+0x6c>)
 800bf64:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800bf66:	4b08      	ldr	r3, [pc, #32]	@ (800bf88 <processHalfDMAbuffer+0x70>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d001      	beq.n	800bf74 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800bf70:	f000 f826 	bl	800bfc0 <calculateSPLQ31>
    }
}
 800bf74:	46c0      	nop			@ (mov r8, r8)
 800bf76:	46bd      	mov	sp, r7
 800bf78:	b002      	add	sp, #8
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	200012fc 	.word	0x200012fc
 800bf80:	20001afc 	.word	0x20001afc
 800bf84:	200012bc 	.word	0x200012bc
 800bf88:	200012b9 	.word	0x200012b9

0800bf8c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bf94:	4b07      	ldr	r3, [pc, #28]	@ (800bfb4 <HAL_I2S_ErrorCallback+0x28>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d106      	bne.n	800bfac <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800bf9e:	4a06      	ldr	r2, [pc, #24]	@ (800bfb8 <HAL_I2S_ErrorCallback+0x2c>)
 800bfa0:	239f      	movs	r3, #159	@ 0x9f
 800bfa2:	0059      	lsls	r1, r3, #1
 800bfa4:	4b05      	ldr	r3, [pc, #20]	@ (800bfbc <HAL_I2S_ErrorCallback+0x30>)
 800bfa6:	0018      	movs	r0, r3
 800bfa8:	f001 fe4c 	bl	800dc44 <errorHandler>
  }
}
 800bfac:	46c0      	nop			@ (mov r8, r8)
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	b002      	add	sp, #8
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20001d00 	.word	0x20001d00
 800bfb8:	080241ac 	.word	0x080241ac
 800bfbc:	08024914 	.word	0x08024914

0800bfc0 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc2:	b0b3      	sub	sp, #204	@ 0xcc
 800bfc4:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800bfc6:	4ae2      	ldr	r2, [pc, #904]	@ (800c350 <calculateSPLQ31+0x390>)
 800bfc8:	2338      	movs	r3, #56	@ 0x38
 800bfca:	2030      	movs	r0, #48	@ 0x30
 800bfcc:	181b      	adds	r3, r3, r0
 800bfce:	19d9      	adds	r1, r3, r7
 800bfd0:	2334      	movs	r3, #52	@ 0x34
 800bfd2:	181b      	adds	r3, r3, r0
 800bfd4:	19d8      	adds	r0, r3, r7
 800bfd6:	2380      	movs	r3, #128	@ 0x80
 800bfd8:	f000 fc36 	bl	800c848 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800bfdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	da00      	bge.n	800bfe4 <calculateSPLQ31+0x24>
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	105b      	asrs	r3, r3, #1
 800bfe6:	001a      	movs	r2, r3
 800bfe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	da00      	bge.n	800bff0 <calculateSPLQ31+0x30>
 800bfee:	3301      	adds	r3, #1
 800bff0:	105b      	asrs	r3, r3, #1
 800bff2:	18d3      	adds	r3, r2, r3
 800bff4:	2188      	movs	r1, #136	@ 0x88
 800bff6:	187a      	adds	r2, r7, r1
 800bff8:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800bffa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bffc:	187b      	adds	r3, r7, r1
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	3304      	adds	r3, #4
 800c004:	2284      	movs	r2, #132	@ 0x84
 800c006:	18b9      	adds	r1, r7, r2
 800c008:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c00a:	18bb      	adds	r3, r7, r2
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4ad1      	ldr	r2, [pc, #836]	@ (800c354 <calculateSPLQ31+0x394>)
 800c010:	0019      	movs	r1, r3
 800c012:	0010      	movs	r0, r2
 800c014:	f000 fc58 	bl	800c8c8 <getPo2factor>
 800c018:	0003      	movs	r3, r0
 800c01a:	2280      	movs	r2, #128	@ 0x80
 800c01c:	18ba      	adds	r2, r7, r2
 800c01e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c020:	2300      	movs	r3, #0
 800c022:	2284      	movs	r2, #132	@ 0x84
 800c024:	2130      	movs	r1, #48	@ 0x30
 800c026:	1852      	adds	r2, r2, r1
 800c028:	19d2      	adds	r2, r2, r7
 800c02a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c02c:	2300      	movs	r3, #0
 800c02e:	2280      	movs	r2, #128	@ 0x80
 800c030:	1852      	adds	r2, r2, r1
 800c032:	19d2      	adds	r2, r2, r7
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	e032      	b.n	800c09e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c038:	4ac5      	ldr	r2, [pc, #788]	@ (800c350 <calculateSPLQ31+0x390>)
 800c03a:	2680      	movs	r6, #128	@ 0x80
 800c03c:	2330      	movs	r3, #48	@ 0x30
 800c03e:	18f1      	adds	r1, r6, r3
 800c040:	19cb      	adds	r3, r1, r7
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	589a      	ldr	r2, [r3, r2]
 800c048:	2188      	movs	r1, #136	@ 0x88
 800c04a:	1879      	adds	r1, r7, r1
 800c04c:	680b      	ldr	r3, [r1, #0]
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	2180      	movs	r1, #128	@ 0x80
 800c052:	1879      	adds	r1, r7, r1
 800c054:	680b      	ldr	r3, [r1, #0]
 800c056:	409a      	lsls	r2, r3
 800c058:	0011      	movs	r1, r2
 800c05a:	4abf      	ldr	r2, [pc, #764]	@ (800c358 <calculateSPLQ31+0x398>)
 800c05c:	2084      	movs	r0, #132	@ 0x84
 800c05e:	2330      	movs	r3, #48	@ 0x30
 800c060:	18c3      	adds	r3, r0, r3
 800c062:	19db      	adds	r3, r3, r7
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c06a:	2230      	movs	r2, #48	@ 0x30
 800c06c:	1883      	adds	r3, r0, r2
 800c06e:	19db      	adds	r3, r3, r7
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	49b8      	ldr	r1, [pc, #736]	@ (800c358 <calculateSPLQ31+0x398>)
 800c076:	009a      	lsls	r2, r3, #2
 800c078:	2300      	movs	r3, #0
 800c07a:	5053      	str	r3, [r2, r1]
        count += 2;
 800c07c:	2230      	movs	r2, #48	@ 0x30
 800c07e:	1883      	adds	r3, r0, r2
 800c080:	19db      	adds	r3, r3, r7
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3302      	adds	r3, #2
 800c086:	0011      	movs	r1, r2
 800c088:	1882      	adds	r2, r0, r2
 800c08a:	19d2      	adds	r2, r2, r7
 800c08c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c08e:	000a      	movs	r2, r1
 800c090:	18b3      	adds	r3, r6, r2
 800c092:	19db      	adds	r3, r3, r7
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3301      	adds	r3, #1
 800c098:	18b2      	adds	r2, r6, r2
 800c09a:	19d2      	adds	r2, r2, r7
 800c09c:	6013      	str	r3, [r2, #0]
 800c09e:	2380      	movs	r3, #128	@ 0x80
 800c0a0:	2630      	movs	r6, #48	@ 0x30
 800c0a2:	199b      	adds	r3, r3, r6
 800c0a4:	19db      	adds	r3, r3, r7
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c0aa:	d9c5      	bls.n	800c038 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c0ac:	4bab      	ldr	r3, [pc, #684]	@ (800c35c <calculateSPLQ31+0x39c>)
 800c0ae:	6818      	ldr	r0, [r3, #0]
 800c0b0:	49a9      	ldr	r1, [pc, #676]	@ (800c358 <calculateSPLQ31+0x398>)
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f010 ffed 	bl	801d094 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c0ba:	4aa9      	ldr	r2, [pc, #676]	@ (800c360 <calculateSPLQ31+0x3a0>)
 800c0bc:	2338      	movs	r3, #56	@ 0x38
 800c0be:	199b      	adds	r3, r3, r6
 800c0c0:	19d9      	adds	r1, r3, r7
 800c0c2:	2334      	movs	r3, #52	@ 0x34
 800c0c4:	199b      	adds	r3, r3, r6
 800c0c6:	19d8      	adds	r0, r3, r7
 800c0c8:	237e      	movs	r3, #126	@ 0x7e
 800c0ca:	f000 fbbd 	bl	800c848 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c0ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0d0:	2380      	movs	r3, #128	@ 0x80
 800c0d2:	061b      	lsls	r3, r3, #24
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d101      	bne.n	800c0dc <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c0d8:	4b9e      	ldr	r3, [pc, #632]	@ (800c354 <calculateSPLQ31+0x394>)
 800c0da:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c0dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c0de:	2380      	movs	r3, #128	@ 0x80
 800c0e0:	061b      	lsls	r3, r3, #24
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d101      	bne.n	800c0ea <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c0e6:	4b9b      	ldr	r3, [pc, #620]	@ (800c354 <calculateSPLQ31+0x394>)
 800c0e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c0ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0ec:	17da      	asrs	r2, r3, #31
 800c0ee:	189b      	adds	r3, r3, r2
 800c0f0:	4053      	eors	r3, r2
 800c0f2:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c0f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0f6:	17da      	asrs	r2, r3, #31
 800c0f8:	189b      	adds	r3, r3, r2
 800c0fa:	4053      	eors	r3, r2
 800c0fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c0fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c102:	429a      	cmp	r2, r3
 800c104:	dd01      	ble.n	800c10a <calculateSPLQ31+0x14a>
    {
        max = min;
 800c106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c108:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c10a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c10c:	3304      	adds	r3, #4
 800c10e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c110:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c112:	4a90      	ldr	r2, [pc, #576]	@ (800c354 <calculateSPLQ31+0x394>)
 800c114:	0019      	movs	r1, r3
 800c116:	0010      	movs	r0, r2
 800c118:	f000 fbd6 	bl	800c8c8 <getPo2factor>
 800c11c:	0003      	movs	r3, r0
 800c11e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c120:	2302      	movs	r3, #2
 800c122:	22ac      	movs	r2, #172	@ 0xac
 800c124:	18ba      	adds	r2, r7, r2
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	e012      	b.n	800c150 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c12a:	4a8b      	ldr	r2, [pc, #556]	@ (800c358 <calculateSPLQ31+0x398>)
 800c12c:	20ac      	movs	r0, #172	@ 0xac
 800c12e:	183b      	adds	r3, r7, r0
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	589a      	ldr	r2, [r3, r2]
 800c136:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c138:	409a      	lsls	r2, r3
 800c13a:	0011      	movs	r1, r2
 800c13c:	4a86      	ldr	r2, [pc, #536]	@ (800c358 <calculateSPLQ31+0x398>)
 800c13e:	183b      	adds	r3, r7, r0
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c146:	183b      	adds	r3, r7, r0
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	183a      	adds	r2, r7, r0
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	23ac      	movs	r3, #172	@ 0xac
 800c152:	18fb      	adds	r3, r7, r3
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b7f      	cmp	r3, #127	@ 0x7f
 800c158:	d9e7      	bls.n	800c12a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c15a:	4b7d      	ldr	r3, [pc, #500]	@ (800c350 <calculateSPLQ31+0x390>)
 800c15c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c15e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c160:	4b7d      	ldr	r3, [pc, #500]	@ (800c358 <calculateSPLQ31+0x398>)
 800c162:	2240      	movs	r2, #64	@ 0x40
 800c164:	0018      	movs	r0, r3
 800c166:	f011 fd3f 	bl	801dbe8 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c16a:	2330      	movs	r3, #48	@ 0x30
 800c16c:	18fb      	adds	r3, r7, r3
 800c16e:	0018      	movs	r0, r3
 800c170:	2330      	movs	r3, #48	@ 0x30
 800c172:	001a      	movs	r2, r3
 800c174:	2100      	movs	r1, #0
 800c176:	f013 fb5b 	bl	801f830 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c17a:	2200      	movs	r2, #0
 800c17c:	2300      	movs	r3, #0
 800c17e:	21a0      	movs	r1, #160	@ 0xa0
 800c180:	1879      	adds	r1, r7, r1
 800c182:	600a      	str	r2, [r1, #0]
 800c184:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c186:	2301      	movs	r3, #1
 800c188:	229c      	movs	r2, #156	@ 0x9c
 800c18a:	18ba      	adds	r2, r7, r2
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	e05b      	b.n	800c248 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c190:	269c      	movs	r6, #156	@ 0x9c
 800c192:	19bb      	adds	r3, r7, r6
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	009a      	lsls	r2, r3, #2
 800c198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c19a:	189b      	adds	r3, r3, r2
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	613b      	str	r3, [r7, #16]
 800c1a0:	17db      	asrs	r3, r3, #31
 800c1a2:	617b      	str	r3, [r7, #20]
 800c1a4:	4b6f      	ldr	r3, [pc, #444]	@ (800c364 <calculateSPLQ31+0x3a4>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	19bb      	adds	r3, r7, r6
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	18d3      	adds	r3, r2, r3
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	60bb      	str	r3, [r7, #8]
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6938      	ldr	r0, [r7, #16]
 800c1be:	6979      	ldr	r1, [r7, #20]
 800c1c0:	f7f4 f9fe 	bl	80005c0 <__aeabi_lmul>
 800c1c4:	0002      	movs	r2, r0
 800c1c6:	000b      	movs	r3, r1
 800c1c8:	0010      	movs	r0, r2
 800c1ca:	0019      	movs	r1, r3
 800c1cc:	23a0      	movs	r3, #160	@ 0xa0
 800c1ce:	18fa      	adds	r2, r7, r3
 800c1d0:	6853      	ldr	r3, [r2, #4]
 800c1d2:	6812      	ldr	r2, [r2, #0]
 800c1d4:	1812      	adds	r2, r2, r0
 800c1d6:	414b      	adcs	r3, r1
 800c1d8:	21a0      	movs	r1, #160	@ 0xa0
 800c1da:	1879      	adds	r1, r7, r1
 800c1dc:	600a      	str	r2, [r1, #0]
 800c1de:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c1e0:	4b61      	ldr	r3, [pc, #388]	@ (800c368 <calculateSPLQ31+0x3a8>)
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	19bb      	adds	r3, r7, r6
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	18d3      	adds	r3, r2, r3
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b06      	cmp	r3, #6
 800c1ee:	d025      	beq.n	800c23c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c1f0:	4b5d      	ldr	r3, [pc, #372]	@ (800c368 <calculateSPLQ31+0x3a8>)
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	19bb      	adds	r3, r7, r6
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	18d3      	adds	r3, r2, r3
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2230      	movs	r2, #48	@ 0x30
 800c1fe:	18ba      	adds	r2, r7, r2
 800c200:	00db      	lsls	r3, r3, #3
 800c202:	18d3      	adds	r3, r2, r3
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	6859      	ldr	r1, [r3, #4]
 800c208:	19bb      	adds	r3, r7, r6
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	009a      	lsls	r2, r3, #2
 800c20e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c210:	189b      	adds	r3, r3, r2
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	603b      	str	r3, [r7, #0]
 800c216:	17db      	asrs	r3, r3, #31
 800c218:	607b      	str	r3, [r7, #4]
 800c21a:	4b53      	ldr	r3, [pc, #332]	@ (800c368 <calculateSPLQ31+0x3a8>)
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	19be      	adds	r6, r7, r6
 800c220:	6833      	ldr	r3, [r6, #0]
 800c222:	18d3      	adds	r3, r2, r3
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	001e      	movs	r6, r3
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	1880      	adds	r0, r0, r2
 800c22e:	4159      	adcs	r1, r3
 800c230:	2330      	movs	r3, #48	@ 0x30
 800c232:	18fa      	adds	r2, r7, r3
 800c234:	00f3      	lsls	r3, r6, #3
 800c236:	18d3      	adds	r3, r2, r3
 800c238:	6018      	str	r0, [r3, #0]
 800c23a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c23c:	229c      	movs	r2, #156	@ 0x9c
 800c23e:	18bb      	adds	r3, r7, r2
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3301      	adds	r3, #1
 800c244:	18ba      	adds	r2, r7, r2
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	239c      	movs	r3, #156	@ 0x9c
 800c24a:	18fb      	adds	r3, r7, r3
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c250:	d99e      	bls.n	800c190 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c252:	2380      	movs	r3, #128	@ 0x80
 800c254:	18fb      	adds	r3, r7, r3
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	005b      	lsls	r3, r3, #1
 800c25a:	001a      	movs	r2, r3
 800c25c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	18d3      	adds	r3, r2, r3
 800c262:	3b22      	subs	r3, #34	@ 0x22
 800c264:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c268:	17da      	asrs	r2, r3, #31
 800c26a:	189b      	adds	r3, r3, r2
 800c26c:	4053      	eors	r3, r2
 800c26e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c270:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c272:	2b00      	cmp	r3, #0
 800c274:	da62      	bge.n	800c33c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c278:	3b20      	subs	r3, #32
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	db05      	blt.n	800c28a <calculateSPLQ31+0x2ca>
 800c27e:	22a0      	movs	r2, #160	@ 0xa0
 800c280:	18ba      	adds	r2, r7, r2
 800c282:	6812      	ldr	r2, [r2, #0]
 800c284:	409a      	lsls	r2, r3
 800c286:	627a      	str	r2, [r7, #36]	@ 0x24
 800c288:	e010      	b.n	800c2ac <calculateSPLQ31+0x2ec>
 800c28a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c28c:	2220      	movs	r2, #32
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	22a0      	movs	r2, #160	@ 0xa0
 800c292:	18ba      	adds	r2, r7, r2
 800c294:	6812      	ldr	r2, [r2, #0]
 800c296:	40da      	lsrs	r2, r3
 800c298:	0013      	movs	r3, r2
 800c29a:	22a4      	movs	r2, #164	@ 0xa4
 800c29c:	18ba      	adds	r2, r7, r2
 800c29e:	6811      	ldr	r1, [r2, #0]
 800c2a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c2a2:	4091      	lsls	r1, r2
 800c2a4:	6279      	str	r1, [r7, #36]	@ 0x24
 800c2a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800c2ac:	21a0      	movs	r1, #160	@ 0xa0
 800c2ae:	187b      	adds	r3, r7, r1
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2b4:	409a      	lsls	r2, r3
 800c2b6:	623a      	str	r2, [r7, #32]
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c2bc:	187a      	adds	r2, r7, r1
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2298      	movs	r2, #152	@ 0x98
 800c2c6:	18ba      	adds	r2, r7, r2
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	e031      	b.n	800c330 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c2cc:	2330      	movs	r3, #48	@ 0x30
 800c2ce:	18fa      	adds	r2, r7, r3
 800c2d0:	2398      	movs	r3, #152	@ 0x98
 800c2d2:	18fb      	adds	r3, r7, r3
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	18d3      	adds	r3, r2, r3
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c2e0:	3920      	subs	r1, #32
 800c2e2:	2900      	cmp	r1, #0
 800c2e4:	db03      	blt.n	800c2ee <calculateSPLQ31+0x32e>
 800c2e6:	0010      	movs	r0, r2
 800c2e8:	4088      	lsls	r0, r1
 800c2ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c2ec:	e00c      	b.n	800c308 <calculateSPLQ31+0x348>
 800c2ee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c2f0:	2020      	movs	r0, #32
 800c2f2:	1a41      	subs	r1, r0, r1
 800c2f4:	0010      	movs	r0, r2
 800c2f6:	40c8      	lsrs	r0, r1
 800c2f8:	0001      	movs	r1, r0
 800c2fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c2fc:	001c      	movs	r4, r3
 800c2fe:	4084      	lsls	r4, r0
 800c300:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c302:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c304:	4308      	orrs	r0, r1
 800c306:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c308:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c30a:	0013      	movs	r3, r2
 800c30c:	408b      	lsls	r3, r1
 800c30e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c310:	2330      	movs	r3, #48	@ 0x30
 800c312:	18fa      	adds	r2, r7, r3
 800c314:	2098      	movs	r0, #152	@ 0x98
 800c316:	183b      	adds	r3, r7, r0
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	18d3      	adds	r3, r2, r3
 800c31e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c322:	6019      	str	r1, [r3, #0]
 800c324:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c326:	183b      	adds	r3, r7, r0
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3301      	adds	r3, #1
 800c32c:	183a      	adds	r2, r7, r0
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	2398      	movs	r3, #152	@ 0x98
 800c332:	18fb      	adds	r3, r7, r3
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b05      	cmp	r3, #5
 800c338:	d9c8      	bls.n	800c2cc <calculateSPLQ31+0x30c>
 800c33a:	e06b      	b.n	800c414 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c33c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c33e:	3b20      	subs	r3, #32
 800c340:	2b00      	cmp	r3, #0
 800c342:	db13      	blt.n	800c36c <calculateSPLQ31+0x3ac>
 800c344:	22a4      	movs	r2, #164	@ 0xa4
 800c346:	18ba      	adds	r2, r7, r2
 800c348:	6812      	ldr	r2, [r2, #0]
 800c34a:	40da      	lsrs	r2, r3
 800c34c:	61ba      	str	r2, [r7, #24]
 800c34e:	e01e      	b.n	800c38e <calculateSPLQ31+0x3ce>
 800c350:	20001afc 	.word	0x20001afc
 800c354:	7fffffff 	.word	0x7fffffff
 800c358:	20001d48 	.word	0x20001d48
 800c35c:	200000b0 	.word	0x200000b0
 800c360:	20001d50 	.word	0x20001d50
 800c364:	200000b4 	.word	0x200000b4
 800c368:	200000c0 	.word	0x200000c0
 800c36c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c36e:	2220      	movs	r2, #32
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	22a4      	movs	r2, #164	@ 0xa4
 800c374:	18ba      	adds	r2, r7, r2
 800c376:	6812      	ldr	r2, [r2, #0]
 800c378:	409a      	lsls	r2, r3
 800c37a:	0013      	movs	r3, r2
 800c37c:	22a0      	movs	r2, #160	@ 0xa0
 800c37e:	18ba      	adds	r2, r7, r2
 800c380:	6811      	ldr	r1, [r2, #0]
 800c382:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c384:	40d1      	lsrs	r1, r2
 800c386:	61b9      	str	r1, [r7, #24]
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	431a      	orrs	r2, r3
 800c38c:	61ba      	str	r2, [r7, #24]
 800c38e:	23a4      	movs	r3, #164	@ 0xa4
 800c390:	18fb      	adds	r3, r7, r3
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c396:	40da      	lsrs	r2, r3
 800c398:	61fa      	str	r2, [r7, #28]
 800c39a:	69ba      	ldr	r2, [r7, #24]
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	21a0      	movs	r1, #160	@ 0xa0
 800c3a0:	1879      	adds	r1, r7, r1
 800c3a2:	600a      	str	r2, [r1, #0]
 800c3a4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2294      	movs	r2, #148	@ 0x94
 800c3aa:	18ba      	adds	r2, r7, r2
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	e02c      	b.n	800c40a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c3b0:	2330      	movs	r3, #48	@ 0x30
 800c3b2:	18fa      	adds	r2, r7, r3
 800c3b4:	2394      	movs	r3, #148	@ 0x94
 800c3b6:	18fb      	adds	r3, r7, r3
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	18d3      	adds	r3, r2, r3
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3c4:	3920      	subs	r1, #32
 800c3c6:	2900      	cmp	r1, #0
 800c3c8:	db03      	blt.n	800c3d2 <calculateSPLQ31+0x412>
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	40c8      	lsrs	r0, r1
 800c3ce:	0004      	movs	r4, r0
 800c3d0:	e00a      	b.n	800c3e8 <calculateSPLQ31+0x428>
 800c3d2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3d4:	2020      	movs	r0, #32
 800c3d6:	1a41      	subs	r1, r0, r1
 800c3d8:	0018      	movs	r0, r3
 800c3da:	4088      	lsls	r0, r1
 800c3dc:	0001      	movs	r1, r0
 800c3de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3e0:	0016      	movs	r6, r2
 800c3e2:	40c6      	lsrs	r6, r0
 800c3e4:	0034      	movs	r4, r6
 800c3e6:	430c      	orrs	r4, r1
 800c3e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3ea:	40cb      	lsrs	r3, r1
 800c3ec:	001d      	movs	r5, r3
 800c3ee:	2330      	movs	r3, #48	@ 0x30
 800c3f0:	18fa      	adds	r2, r7, r3
 800c3f2:	2194      	movs	r1, #148	@ 0x94
 800c3f4:	187b      	adds	r3, r7, r1
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	18d3      	adds	r3, r2, r3
 800c3fc:	601c      	str	r4, [r3, #0]
 800c3fe:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c400:	187b      	adds	r3, r7, r1
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3301      	adds	r3, #1
 800c406:	187a      	adds	r2, r7, r1
 800c408:	6013      	str	r3, [r2, #0]
 800c40a:	2394      	movs	r3, #148	@ 0x94
 800c40c:	18fb      	adds	r3, r7, r3
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b05      	cmp	r3, #5
 800c412:	d9cd      	bls.n	800c3b0 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c414:	230f      	movs	r3, #15
 800c416:	425d      	negs	r5, r3
 800c418:	2305      	movs	r3, #5
 800c41a:	425e      	negs	r6, r3
 800c41c:	4b4a      	ldr	r3, [pc, #296]	@ (800c548 <calculateSPLQ31+0x588>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	4b4a      	ldr	r3, [pc, #296]	@ (800c54c <calculateSPLQ31+0x58c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	21a0      	movs	r1, #160	@ 0xa0
 800c42a:	1879      	adds	r1, r7, r1
 800c42c:	6808      	ldr	r0, [r1, #0]
 800c42e:	6849      	ldr	r1, [r1, #4]
 800c430:	4c47      	ldr	r4, [pc, #284]	@ (800c550 <calculateSPLQ31+0x590>)
 800c432:	9403      	str	r4, [sp, #12]
 800c434:	4c47      	ldr	r4, [pc, #284]	@ (800c554 <calculateSPLQ31+0x594>)
 800c436:	9402      	str	r4, [sp, #8]
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	9200      	str	r2, [sp, #0]
 800c43c:	0033      	movs	r3, r6
 800c43e:	002a      	movs	r2, r5
 800c440:	f000 fa86 	bl	800c950 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c444:	2300      	movs	r3, #0
 800c446:	2290      	movs	r2, #144	@ 0x90
 800c448:	18ba      	adds	r2, r7, r2
 800c44a:	6013      	str	r3, [r2, #0]
 800c44c:	e026      	b.n	800c49c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c44e:	2330      	movs	r3, #48	@ 0x30
 800c450:	18fa      	adds	r2, r7, r3
 800c452:	2490      	movs	r4, #144	@ 0x90
 800c454:	193b      	adds	r3, r7, r4
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	18d3      	adds	r3, r2, r3
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	6859      	ldr	r1, [r3, #4]
 800c460:	230f      	movs	r3, #15
 800c462:	425d      	negs	r5, r3
 800c464:	2305      	movs	r3, #5
 800c466:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c468:	193b      	adds	r3, r7, r4
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	009a      	lsls	r2, r3, #2
 800c46e:	4b3a      	ldr	r3, [pc, #232]	@ (800c558 <calculateSPLQ31+0x598>)
 800c470:	18d3      	adds	r3, r2, r3
 800c472:	193a      	adds	r2, r7, r4
 800c474:	6812      	ldr	r2, [r2, #0]
 800c476:	0094      	lsls	r4, r2, #2
 800c478:	4a38      	ldr	r2, [pc, #224]	@ (800c55c <calculateSPLQ31+0x59c>)
 800c47a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c47c:	9203      	str	r2, [sp, #12]
 800c47e:	9302      	str	r3, [sp, #8]
 800c480:	2300      	movs	r3, #0
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	2300      	movs	r3, #0
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	0033      	movs	r3, r6
 800c48a:	002a      	movs	r2, r5
 800c48c:	f000 fa60 	bl	800c950 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c490:	2490      	movs	r4, #144	@ 0x90
 800c492:	193b      	adds	r3, r7, r4
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3301      	adds	r3, #1
 800c498:	193a      	adds	r2, r7, r4
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	2390      	movs	r3, #144	@ 0x90
 800c49e:	18fb      	adds	r3, r7, r3
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b05      	cmp	r3, #5
 800c4a4:	d9d3      	bls.n	800c44e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c4a6:	4b2b      	ldr	r3, [pc, #172]	@ (800c554 <calculateSPLQ31+0x594>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	4b2d      	ldr	r3, [pc, #180]	@ (800c560 <calculateSPLQ31+0x5a0>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	18d2      	adds	r2, r2, r3
 800c4b0:	4b2b      	ldr	r3, [pc, #172]	@ (800c560 <calculateSPLQ31+0x5a0>)
 800c4b2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c4b4:	4b26      	ldr	r3, [pc, #152]	@ (800c550 <calculateSPLQ31+0x590>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	4b2a      	ldr	r3, [pc, #168]	@ (800c564 <calculateSPLQ31+0x5a4>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	18d2      	adds	r2, r2, r3
 800c4be:	4b29      	ldr	r3, [pc, #164]	@ (800c564 <calculateSPLQ31+0x5a4>)
 800c4c0:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	228c      	movs	r2, #140	@ 0x8c
 800c4c6:	18ba      	adds	r2, r7, r2
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	e025      	b.n	800c518 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c4cc:	4b22      	ldr	r3, [pc, #136]	@ (800c558 <calculateSPLQ31+0x598>)
 800c4ce:	208c      	movs	r0, #140	@ 0x8c
 800c4d0:	183a      	adds	r2, r7, r0
 800c4d2:	6812      	ldr	r2, [r2, #0]
 800c4d4:	0092      	lsls	r2, r2, #2
 800c4d6:	58d2      	ldr	r2, [r2, r3]
 800c4d8:	4b23      	ldr	r3, [pc, #140]	@ (800c568 <calculateSPLQ31+0x5a8>)
 800c4da:	1839      	adds	r1, r7, r0
 800c4dc:	6809      	ldr	r1, [r1, #0]
 800c4de:	0089      	lsls	r1, r1, #2
 800c4e0:	58cb      	ldr	r3, [r1, r3]
 800c4e2:	18d1      	adds	r1, r2, r3
 800c4e4:	4b20      	ldr	r3, [pc, #128]	@ (800c568 <calculateSPLQ31+0x5a8>)
 800c4e6:	183a      	adds	r2, r7, r0
 800c4e8:	6812      	ldr	r2, [r2, #0]
 800c4ea:	0092      	lsls	r2, r2, #2
 800c4ec:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c4ee:	4b1b      	ldr	r3, [pc, #108]	@ (800c55c <calculateSPLQ31+0x59c>)
 800c4f0:	183a      	adds	r2, r7, r0
 800c4f2:	6812      	ldr	r2, [r2, #0]
 800c4f4:	0092      	lsls	r2, r2, #2
 800c4f6:	58d2      	ldr	r2, [r2, r3]
 800c4f8:	4b1c      	ldr	r3, [pc, #112]	@ (800c56c <calculateSPLQ31+0x5ac>)
 800c4fa:	1839      	adds	r1, r7, r0
 800c4fc:	6809      	ldr	r1, [r1, #0]
 800c4fe:	0089      	lsls	r1, r1, #2
 800c500:	58cb      	ldr	r3, [r1, r3]
 800c502:	18d1      	adds	r1, r2, r3
 800c504:	4b19      	ldr	r3, [pc, #100]	@ (800c56c <calculateSPLQ31+0x5ac>)
 800c506:	183a      	adds	r2, r7, r0
 800c508:	6812      	ldr	r2, [r2, #0]
 800c50a:	0092      	lsls	r2, r2, #2
 800c50c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c50e:	183b      	adds	r3, r7, r0
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	183a      	adds	r2, r7, r0
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	238c      	movs	r3, #140	@ 0x8c
 800c51a:	18fb      	adds	r3, r7, r3
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b05      	cmp	r3, #5
 800c520:	d9d4      	bls.n	800c4cc <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c522:	4b13      	ldr	r3, [pc, #76]	@ (800c570 <calculateSPLQ31+0x5b0>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	4b11      	ldr	r3, [pc, #68]	@ (800c570 <calculateSPLQ31+0x5b0>)
 800c52a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c52c:	4b10      	ldr	r3, [pc, #64]	@ (800c570 <calculateSPLQ31+0x5b0>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b0f      	cmp	r3, #15
 800c532:	d905      	bls.n	800c540 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c534:	4b0f      	ldr	r3, [pc, #60]	@ (800c574 <calculateSPLQ31+0x5b4>)
 800c536:	2201      	movs	r2, #1
 800c538:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c53a:	4b0f      	ldr	r3, [pc, #60]	@ (800c578 <calculateSPLQ31+0x5b8>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	701a      	strb	r2, [r3, #0]
    }
}
 800c540:	46c0      	nop			@ (mov r8, r8)
 800c542:	46bd      	mov	sp, r7
 800c544:	b02f      	add	sp, #188	@ 0xbc
 800c546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c548:	200000b8 	.word	0x200000b8
 800c54c:	200000bc 	.word	0x200000bc
 800c550:	200012c8 	.word	0x200012c8
 800c554:	200012c4 	.word	0x200012c4
 800c558:	200012cc 	.word	0x200012cc
 800c55c:	200012e4 	.word	0x200012e4
 800c560:	20001d0c 	.word	0x20001d0c
 800c564:	20001d10 	.word	0x20001d10
 800c568:	20001d14 	.word	0x20001d14
 800c56c:	20001d2c 	.word	0x20001d2c
 800c570:	20001d44 	.word	0x20001d44
 800c574:	200012bb 	.word	0x200012bb
 800c578:	200012b9 	.word	0x200012b9

0800c57c <resetSPLstate>:

static void resetSPLstate(void)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c582:	4b11      	ldr	r3, [pc, #68]	@ (800c5c8 <resetSPLstate+0x4c>)
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c588:	4b10      	ldr	r3, [pc, #64]	@ (800c5cc <resetSPLstate+0x50>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c58e:	4b10      	ldr	r3, [pc, #64]	@ (800c5d0 <resetSPLstate+0x54>)
 800c590:	2200      	movs	r2, #0
 800c592:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c594:	2300      	movs	r3, #0
 800c596:	607b      	str	r3, [r7, #4]
 800c598:	e00c      	b.n	800c5b4 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c59a:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d4 <resetSPLstate+0x58>)
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	0092      	lsls	r2, r2, #2
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d8 <resetSPLstate+0x5c>)
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	0092      	lsls	r2, r2, #2
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	607b      	str	r3, [r7, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b05      	cmp	r3, #5
 800c5b8:	d9ef      	bls.n	800c59a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c5ba:	4b08      	ldr	r3, [pc, #32]	@ (800c5dc <resetSPLstate+0x60>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	701a      	strb	r2, [r3, #0]
}
 800c5c0:	46c0      	nop			@ (mov r8, r8)
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	b002      	add	sp, #8
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20001d0c 	.word	0x20001d0c
 800c5cc:	20001d10 	.word	0x20001d10
 800c5d0:	20001d44 	.word	0x20001d44
 800c5d4:	20001d14 	.word	0x20001d14
 800c5d8:	20001d2c 	.word	0x20001d2c
 800c5dc:	200012bb 	.word	0x200012bb

0800c5e0 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c5e0:	b5b0      	push	{r4, r5, r7, lr}
 800c5e2:	b090      	sub	sp, #64	@ 0x40
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	0019      	movs	r1, r3
 800c5ec:	1dfb      	adds	r3, r7, #7
 800c5ee:	701a      	strb	r2, [r3, #0]
 800c5f0:	1dbb      	adds	r3, r7, #6
 800c5f2:	1c0a      	adds	r2, r1, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c5f6:	1dfb      	adds	r3, r7, #7
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d005      	beq.n	800c60a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c5fe:	4b3b      	ldr	r3, [pc, #236]	@ (800c6ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800c600:	2200      	movs	r2, #0
 800c602:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c604:	4b3a      	ldr	r3, [pc, #232]	@ (800c6f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800c606:	2200      	movs	r2, #0
 800c608:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c612:	2305      	movs	r3, #5
 800c614:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c616:	2300      	movs	r3, #0
 800c618:	637b      	str	r3, [r7, #52]	@ 0x34
 800c61a:	e040      	b.n	800c69e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	18d3      	adds	r3, r2, r3
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c628:	409a      	lsls	r2, r3
 800c62a:	0013      	movs	r3, r2
 800c62c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c62e:	4b30      	ldr	r3, [pc, #192]	@ (800c6f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	425a      	negs	r2, r3
 800c634:	4b2e      	ldr	r3, [pc, #184]	@ (800c6f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800c636:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c638:	2418      	movs	r4, #24
 800c63a:	193a      	adds	r2, r7, r4
 800c63c:	492c      	ldr	r1, [pc, #176]	@ (800c6f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800c63e:	231c      	movs	r3, #28
 800c640:	18f8      	adds	r0, r7, r3
 800c642:	2301      	movs	r3, #1
 800c644:	f011 fb28 	bl	801dc98 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c648:	2514      	movs	r5, #20
 800c64a:	197a      	adds	r2, r7, r5
 800c64c:	1939      	adds	r1, r7, r4
 800c64e:	4829      	ldr	r0, [pc, #164]	@ (800c6f4 <getFilteredMaxAmplitudeQ31+0x114>)
 800c650:	2301      	movs	r3, #1
 800c652:	f011 faef 	bl	801dc34 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c656:	2410      	movs	r4, #16
 800c658:	193a      	adds	r2, r7, r4
 800c65a:	4924      	ldr	r1, [pc, #144]	@ (800c6ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800c65c:	4826      	ldr	r0, [pc, #152]	@ (800c6f8 <getFilteredMaxAmplitudeQ31+0x118>)
 800c65e:	2301      	movs	r3, #1
 800c660:	f011 fae8 	bl	801dc34 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c664:	4a21      	ldr	r2, [pc, #132]	@ (800c6ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800c666:	1939      	adds	r1, r7, r4
 800c668:	1978      	adds	r0, r7, r5
 800c66a:	2301      	movs	r3, #1
 800c66c:	f011 fb14 	bl	801dc98 <arm_add_q31>

        lastData = fx;
 800c670:	69fa      	ldr	r2, [r7, #28]
 800c672:	4b1f      	ldr	r3, [pc, #124]	@ (800c6f0 <getFilteredMaxAmplitudeQ31+0x110>)
 800c674:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c676:	4b1d      	ldr	r3, [pc, #116]	@ (800c6ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c67c:	429a      	cmp	r2, r3
 800c67e:	da03      	bge.n	800c688 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c680:	4b1a      	ldr	r3, [pc, #104]	@ (800c6ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c686:	e007      	b.n	800c698 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c688:	4b18      	ldr	r3, [pc, #96]	@ (800c6ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c68e:	429a      	cmp	r2, r3
 800c690:	dd02      	ble.n	800c698 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c692:	4b16      	ldr	r3, [pc, #88]	@ (800c6ec <getFilteredMaxAmplitudeQ31+0x10c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c69a:	3301      	adds	r3, #1
 800c69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c69e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d3ba      	bcc.n	800c61c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a8:	17da      	asrs	r2, r3, #31
 800c6aa:	189b      	adds	r3, r3, r2
 800c6ac:	4053      	eors	r3, r2
 800c6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c6b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c6b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d200      	bcs.n	800c6be <getFilteredMaxAmplitudeQ31+0xde>
 800c6bc:	0013      	movs	r3, r2
 800c6be:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	40da      	lsrs	r2, r3
 800c6c6:	0013      	movs	r3, r2
 800c6c8:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c6ca:	1dbb      	adds	r3, r7, #6
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d007      	beq.n	800c6e2 <getFilteredMaxAmplitudeQ31+0x102>
 800c6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c6fc <getFilteredMaxAmplitudeQ31+0x11c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6a3a      	ldr	r2, [r7, #32]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d902      	bls.n	800c6e2 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c6dc:	4b07      	ldr	r3, [pc, #28]	@ (800c6fc <getFilteredMaxAmplitudeQ31+0x11c>)
 800c6de:	6a3a      	ldr	r2, [r7, #32]
 800c6e0:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
}
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	b010      	add	sp, #64	@ 0x40
 800c6ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c6ec:	20002148 	.word	0x20002148
 800c6f0:	2000214c 	.word	0x2000214c
 800c6f4:	0802490c 	.word	0x0802490c
 800c6f8:	08024910 	.word	0x08024910
 800c6fc:	200012c0 	.word	0x200012c0

0800c700 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c70c:	4913      	ldr	r1, [pc, #76]	@ (800c75c <floatToIntAndFrac2dp+0x5c>)
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f7f4 fc46 	bl	8000fa0 <__aeabi_fmul>
 800c714:	1c03      	adds	r3, r0, #0
 800c716:	1c18      	adds	r0, r3, #0
 800c718:	f015 fef2 	bl	8022500 <roundf>
 800c71c:	1c03      	adds	r3, r0, #0
 800c71e:	1c18      	adds	r0, r3, #0
 800c720:	f7f3 ff7c 	bl	800061c <__aeabi_f2uiz>
 800c724:	0003      	movs	r3, r0
 800c726:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2164      	movs	r1, #100	@ 0x64
 800c72c:	0018      	movs	r0, r3
 800c72e:	f7f3 fd39 	bl	80001a4 <__udivsi3>
 800c732:	0003      	movs	r3, r0
 800c734:	001a      	movs	r2, r3
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2164      	movs	r1, #100	@ 0x64
 800c746:	434b      	muls	r3, r1
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	701a      	strb	r2, [r3, #0]
}
 800c752:	46c0      	nop			@ (mov r8, r8)
 800c754:	46bd      	mov	sp, r7
 800c756:	b006      	add	sp, #24
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	46c0      	nop			@ (mov r8, r8)
 800c75c:	42c80000 	.word	0x42c80000

0800c760 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c76c:	4914      	ldr	r1, [pc, #80]	@ (800c7c0 <floatToIntAndFrac1dp+0x60>)
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f7f4 fc16 	bl	8000fa0 <__aeabi_fmul>
 800c774:	1c03      	adds	r3, r0, #0
 800c776:	1c18      	adds	r0, r3, #0
 800c778:	f015 fec2 	bl	8022500 <roundf>
 800c77c:	1c03      	adds	r3, r0, #0
 800c77e:	1c18      	adds	r0, r3, #0
 800c780:	f7f3 ff4c 	bl	800061c <__aeabi_f2uiz>
 800c784:	0003      	movs	r3, r0
 800c786:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	210a      	movs	r1, #10
 800c78c:	0018      	movs	r0, r3
 800c78e:	f7f3 fd09 	bl	80001a4 <__udivsi3>
 800c792:	0003      	movs	r3, r0
 800c794:	001a      	movs	r2, r3
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	b2da      	uxtb	r2, r3
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	1c19      	adds	r1, r3, #0
 800c7a6:	0089      	lsls	r1, r1, #2
 800c7a8:	18cb      	adds	r3, r1, r3
 800c7aa:	18db      	adds	r3, r3, r3
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	701a      	strb	r2, [r3, #0]
}
 800c7b6:	46c0      	nop			@ (mov r8, r8)
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	b006      	add	sp, #24
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	46c0      	nop			@ (mov r8, r8)
 800c7c0:	41200000 	.word	0x41200000

0800c7c4 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c7c4:	b590      	push	{r4, r7, lr}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7f4 fefc 	bl	80015d0 <__aeabi_i2f>
 800c7d8:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c7da:	6838      	ldr	r0, [r7, #0]
 800c7dc:	f7f4 fef8 	bl	80015d0 <__aeabi_i2f>
 800c7e0:	1c03      	adds	r3, r0, #0
 800c7e2:	4918      	ldr	r1, [pc, #96]	@ (800c844 <sumToIntAverage+0x80>)
 800c7e4:	1c18      	adds	r0, r3, #0
 800c7e6:	f7f4 f9f5 	bl	8000bd4 <__aeabi_fdiv>
 800c7ea:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c7ec:	1c19      	adds	r1, r3, #0
 800c7ee:	1c20      	adds	r0, r4, #0
 800c7f0:	f7f4 f866 	bl	80008c0 <__aeabi_fadd>
 800c7f4:	1c03      	adds	r3, r0, #0
 800c7f6:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c7f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7fa:	f7f4 ff35 	bl	8001668 <__aeabi_ui2f>
 800c7fe:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c800:	1c19      	adds	r1, r3, #0
 800c802:	1c20      	adds	r0, r4, #0
 800c804:	f7f4 f9e6 	bl	8000bd4 <__aeabi_fdiv>
 800c808:	1c03      	adds	r3, r0, #0
 800c80a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	2310      	movs	r3, #16
 800c814:	18f9      	adds	r1, r7, r3
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	1c18      	adds	r0, r3, #0
 800c81a:	f7ff ffa1 	bl	800c760 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2bff      	cmp	r3, #255	@ 0xff
 800c822:	d906      	bls.n	800c832 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	22ff      	movs	r2, #255	@ 0xff
 800c828:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	2209      	movs	r2, #9
 800c82e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c830:	e003      	b.n	800c83a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	b2da      	uxtb	r2, r3
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	701a      	strb	r2, [r3, #0]
}
 800c83a:	46c0      	nop			@ (mov r8, r8)
 800c83c:	46bd      	mov	sp, r7
 800c83e:	b007      	add	sp, #28
 800c840:	bd90      	pop	{r4, r7, pc}
 800c842:	46c0      	nop			@ (mov r8, r8)
 800c844:	41200000 	.word	0x41200000

0800c848 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2280      	movs	r2, #128	@ 0x80
 800c85a:	0612      	lsls	r2, r2, #24
 800c85c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	4a18      	ldr	r2, [pc, #96]	@ (800c8c4 <findMinMax+0x7c>)
 800c862:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c864:	2300      	movs	r3, #0
 800c866:	617b      	str	r3, [r7, #20]
 800c868:	e022      	b.n	800c8b0 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	18d3      	adds	r3, r2, r3
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	429a      	cmp	r2, r3
 800c87a:	da06      	bge.n	800c88a <findMinMax+0x42>
        {
            min[0] = array[i];
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	18d3      	adds	r3, r2, r3
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	18d3      	adds	r3, r2, r3
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	429a      	cmp	r2, r3
 800c89a:	dd06      	ble.n	800c8aa <findMinMax+0x62>
        {
            max[0] = array[i];
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	18d3      	adds	r3, r2, r3
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	617b      	str	r3, [r7, #20]
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d3d8      	bcc.n	800c86a <findMinMax+0x22>
        }
    }
}
 800c8b8:	46c0      	nop			@ (mov r8, r8)
 800c8ba:	46c0      	nop			@ (mov r8, r8)
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	b006      	add	sp, #24
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	46c0      	nop			@ (mov r8, r8)
 800c8c4:	7fffffff 	.word	0x7fffffff

0800c8c8 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d302      	bcc.n	800c8e4 <getPo2factor+0x1c>
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d107      	bne.n	800c8f4 <getPo2factor+0x2c>
    {
        return 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	e00d      	b.n	800c904 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	085b      	lsrs	r3, r3, #1
 800c8ec:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d2f5      	bcs.n	800c8e8 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c902:	68fb      	ldr	r3, [r7, #12]
}
 800c904:	0018      	movs	r0, r3
 800c906:	46bd      	mov	sp, r7
 800c908:	b004      	add	sp, #16
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7f4 fea4 	bl	8001668 <__aeabi_ui2f>
 800c920:	1c03      	adds	r3, r0, #0
 800c922:	1c19      	adds	r1, r3, #0
 800c924:	68b8      	ldr	r0, [r7, #8]
 800c926:	f7f4 fb3b 	bl	8000fa0 <__aeabi_fmul>
 800c92a:	1c03      	adds	r3, r0, #0
 800c92c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c932:	683a      	ldr	r2, [r7, #0]
 800c934:	2310      	movs	r3, #16
 800c936:	18f9      	adds	r1, r7, r3
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	1c18      	adds	r0, r3, #0
 800c93c:	f7ff fee0 	bl	800c700 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	b29a      	uxth	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	801a      	strh	r2, [r3, #0]
}
 800c948:	46c0      	nop			@ (mov r8, r8)
 800c94a:	46bd      	mov	sp, r7
 800c94c:	b006      	add	sp, #24
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	60b8      	str	r0, [r7, #8]
 800c958:	60f9      	str	r1, [r7, #12]
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c960:	6a3a      	ldr	r2, [r7, #32]
 800c962:	68b8      	ldr	r0, [r7, #8]
 800c964:	68f9      	ldr	r1, [r7, #12]
 800c966:	f7fa fbc5 	bl	80070f4 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c96a:	6a3b      	ldr	r3, [r7, #32]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	18d2      	adds	r2, r2, r3
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	18d2      	adds	r2, r2, r3
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	18d2      	adds	r2, r2, r3
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	18d2      	adds	r2, r2, r3
 800c986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c988:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c98a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	0011      	movs	r1, r2
 800c990:	0018      	movs	r0, r3
 800c992:	f7fa fc3f 	bl	8007214 <correctIntFracNumber>
}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	46bd      	mov	sp, r7
 800c99a:	b004      	add	sp, #16
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b086      	sub	sp, #24
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	60f8      	str	r0, [r7, #12]
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	613b      	str	r3, [r7, #16]
 800c9b2:	e019      	b.n	800c9e8 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	005b      	lsls	r3, r3, #1
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	18d3      	adds	r3, r2, r3
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	3201      	adds	r2, #1
 800c9c4:	0052      	lsls	r2, r2, #1
 800c9c6:	68f9      	ldr	r1, [r7, #12]
 800c9c8:	188a      	adds	r2, r1, r2
 800c9ca:	8812      	ldrh	r2, [r2, #0]
 800c9cc:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c9ce:	0019      	movs	r1, r3
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c9d8:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c9da:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	613b      	str	r3, [r7, #16]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d3e1      	bcc.n	800c9b4 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c9f0:	46c0      	nop			@ (mov r8, r8)
 800c9f2:	46c0      	nop			@ (mov r8, r8)
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	b006      	add	sp, #24
 800c9f8:	bd80      	pop	{r7, pc}
	...

0800c9fc <InitDone>:
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  init = false;
 800ca00:	4b02      	ldr	r3, [pc, #8]	@ (800ca0c <InitDone+0x10>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	701a      	strb	r2, [r3, #0]
}
 800ca06:	46c0      	nop			@ (mov r8, r8)
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	200000c4 	.word	0x200000c4

0800ca10 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800ca16:	f7f9 fb97 	bl	8006148 <ReadBatteryVoltage>
 800ca1a:	1c02      	adds	r2, r0, #0
 800ca1c:	4b25      	ldr	r3, [pc, #148]	@ (800cab4 <batteryChargeCheck+0xa4>)
 800ca1e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800ca20:	4b24      	ldr	r3, [pc, #144]	@ (800cab4 <batteryChargeCheck+0xa4>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4924      	ldr	r1, [pc, #144]	@ (800cab8 <batteryChargeCheck+0xa8>)
 800ca26:	1c18      	adds	r0, r3, #0
 800ca28:	f7f3 fd82 	bl	8000530 <__aeabi_fcmplt>
 800ca2c:	1e03      	subs	r3, r0, #0
 800ca2e:	d002      	beq.n	800ca36 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800ca30:	1dfb      	adds	r3, r7, #7
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800ca36:	4b1f      	ldr	r3, [pc, #124]	@ (800cab4 <batteryChargeCheck+0xa4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	1c18      	adds	r0, r3, #0
 800ca3c:	f7f6 fd12 	bl	8003464 <__aeabi_f2d>
 800ca40:	4a1e      	ldr	r2, [pc, #120]	@ (800cabc <batteryChargeCheck+0xac>)
 800ca42:	4b1f      	ldr	r3, [pc, #124]	@ (800cac0 <batteryChargeCheck+0xb0>)
 800ca44:	f7f3 fd3a 	bl	80004bc <__aeabi_dcmplt>
 800ca48:	1e03      	subs	r3, r0, #0
 800ca4a:	d00a      	beq.n	800ca62 <batteryChargeCheck+0x52>
 800ca4c:	4b19      	ldr	r3, [pc, #100]	@ (800cab4 <batteryChargeCheck+0xa4>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4919      	ldr	r1, [pc, #100]	@ (800cab8 <batteryChargeCheck+0xa8>)
 800ca52:	1c18      	adds	r0, r3, #0
 800ca54:	f7f3 fd8a 	bl	800056c <__aeabi_fcmpge>
 800ca58:	1e03      	subs	r3, r0, #0
 800ca5a:	d002      	beq.n	800ca62 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800ca5c:	1dfb      	adds	r3, r7, #7
 800ca5e:	2202      	movs	r2, #2
 800ca60:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800ca62:	4b14      	ldr	r3, [pc, #80]	@ (800cab4 <batteryChargeCheck+0xa4>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2181      	movs	r1, #129	@ 0x81
 800ca68:	05c9      	lsls	r1, r1, #23
 800ca6a:	1c18      	adds	r0, r3, #0
 800ca6c:	f7f3 fd60 	bl	8000530 <__aeabi_fcmplt>
 800ca70:	1e03      	subs	r3, r0, #0
 800ca72:	d00d      	beq.n	800ca90 <batteryChargeCheck+0x80>
 800ca74:	4b0f      	ldr	r3, [pc, #60]	@ (800cab4 <batteryChargeCheck+0xa4>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	1c18      	adds	r0, r3, #0
 800ca7a:	f7f6 fcf3 	bl	8003464 <__aeabi_f2d>
 800ca7e:	4a0f      	ldr	r2, [pc, #60]	@ (800cabc <batteryChargeCheck+0xac>)
 800ca80:	4b0f      	ldr	r3, [pc, #60]	@ (800cac0 <batteryChargeCheck+0xb0>)
 800ca82:	f7f3 fd39 	bl	80004f8 <__aeabi_dcmpge>
 800ca86:	1e03      	subs	r3, r0, #0
 800ca88:	d002      	beq.n	800ca90 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800ca8a:	1dfb      	adds	r3, r7, #7
 800ca8c:	2203      	movs	r2, #3
 800ca8e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800ca90:	4b08      	ldr	r3, [pc, #32]	@ (800cab4 <batteryChargeCheck+0xa4>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2181      	movs	r1, #129	@ 0x81
 800ca96:	05c9      	lsls	r1, r1, #23
 800ca98:	1c18      	adds	r0, r3, #0
 800ca9a:	f7f3 fd67 	bl	800056c <__aeabi_fcmpge>
 800ca9e:	1e03      	subs	r3, r0, #0
 800caa0:	d002      	beq.n	800caa8 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800caa2:	1dfb      	adds	r3, r7, #7
 800caa4:	2204      	movs	r2, #4
 800caa6:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800caa8:	1dfb      	adds	r3, r7, #7
 800caaa:	781b      	ldrb	r3, [r3, #0]
}
 800caac:	0018      	movs	r0, r3
 800caae:	46bd      	mov	sp, r7
 800cab0:	b002      	add	sp, #8
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	20002158 	.word	0x20002158
 800cab8:	40600000 	.word	0x40600000
 800cabc:	9999999a 	.word	0x9999999a
 800cac0:	400d9999 	.word	0x400d9999

0800cac4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800cac4:	b590      	push	{r4, r7, lr}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	0004      	movs	r4, r0
 800cacc:	0008      	movs	r0, r1
 800cace:	0011      	movs	r1, r2
 800cad0:	1dbb      	adds	r3, r7, #6
 800cad2:	1c22      	adds	r2, r4, #0
 800cad4:	801a      	strh	r2, [r3, #0]
 800cad6:	1d3b      	adds	r3, r7, #4
 800cad8:	1c02      	adds	r2, r0, #0
 800cada:	801a      	strh	r2, [r3, #0]
 800cadc:	1cbb      	adds	r3, r7, #2
 800cade:	1c0a      	adds	r2, r1, #0
 800cae0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800cae2:	4b0f      	ldr	r3, [pc, #60]	@ (800cb20 <SetStatusLED+0x5c>)
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d107      	bne.n	800cafa <SetStatusLED+0x36>
 800caea:	4b0e      	ldr	r3, [pc, #56]	@ (800cb24 <SetStatusLED+0x60>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d103      	bne.n	800cafa <SetStatusLED+0x36>
 800caf2:	4b0d      	ldr	r3, [pc, #52]	@ (800cb28 <SetStatusLED+0x64>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00e      	beq.n	800cb18 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800cafa:	2380      	movs	r3, #128	@ 0x80
 800cafc:	05db      	lsls	r3, r3, #23
 800cafe:	1dba      	adds	r2, r7, #6
 800cb00:	8812      	ldrh	r2, [r2, #0]
 800cb02:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800cb04:	2380      	movs	r3, #128	@ 0x80
 800cb06:	05db      	lsls	r3, r3, #23
 800cb08:	1d3a      	adds	r2, r7, #4
 800cb0a:	8812      	ldrh	r2, [r2, #0]
 800cb0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800cb0e:	2380      	movs	r3, #128	@ 0x80
 800cb10:	05db      	lsls	r3, r3, #23
 800cb12:	1cba      	adds	r2, r7, #2
 800cb14:	8812      	ldrh	r2, [r2, #0]
 800cb16:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cb18:	46c0      	nop			@ (mov r8, r8)
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	b003      	add	sp, #12
 800cb1e:	bd90      	pop	{r4, r7, pc}
 800cb20:	20002151 	.word	0x20002151
 800cb24:	200000c4 	.word	0x200000c4
 800cb28:	20002152 	.word	0x20002152

0800cb2c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800cb2c:	b590      	push	{r4, r7, lr}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	0004      	movs	r4, r0
 800cb34:	0008      	movs	r0, r1
 800cb36:	0011      	movs	r1, r2
 800cb38:	1dfb      	adds	r3, r7, #7
 800cb3a:	1c22      	adds	r2, r4, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
 800cb3e:	1dbb      	adds	r3, r7, #6
 800cb40:	1c02      	adds	r2, r0, #0
 800cb42:	701a      	strb	r2, [r3, #0]
 800cb44:	1d7b      	adds	r3, r7, #5
 800cb46:	1c0a      	adds	r2, r1, #0
 800cb48:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800cb4a:	4b19      	ldr	r3, [pc, #100]	@ (800cbb0 <SetDBLED+0x84>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d107      	bne.n	800cb62 <SetDBLED+0x36>
 800cb52:	4b18      	ldr	r3, [pc, #96]	@ (800cbb4 <SetDBLED+0x88>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <SetDBLED+0x36>
 800cb5a:	4b17      	ldr	r3, [pc, #92]	@ (800cbb8 <SetDBLED+0x8c>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d022      	beq.n	800cba8 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800cb62:	1dfb      	adds	r3, r7, #7
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2201      	movs	r2, #1
 800cb68:	4053      	eors	r3, r2
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	001a      	movs	r2, r3
 800cb6e:	4b13      	ldr	r3, [pc, #76]	@ (800cbbc <SetDBLED+0x90>)
 800cb70:	2101      	movs	r1, #1
 800cb72:	0018      	movs	r0, r3
 800cb74:	f002 fe95 	bl	800f8a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800cb78:	1dbb      	adds	r3, r7, #6
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	4053      	eors	r3, r2
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	001a      	movs	r2, r3
 800cb84:	2380      	movs	r3, #128	@ 0x80
 800cb86:	005b      	lsls	r3, r3, #1
 800cb88:	480c      	ldr	r0, [pc, #48]	@ (800cbbc <SetDBLED+0x90>)
 800cb8a:	0019      	movs	r1, r3
 800cb8c:	f002 fe89 	bl	800f8a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800cb90:	1d7b      	adds	r3, r7, #5
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2201      	movs	r2, #1
 800cb96:	4053      	eors	r3, r2
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	001a      	movs	r2, r3
 800cb9c:	2380      	movs	r3, #128	@ 0x80
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4806      	ldr	r0, [pc, #24]	@ (800cbbc <SetDBLED+0x90>)
 800cba2:	0019      	movs	r1, r3
 800cba4:	f002 fe7d 	bl	800f8a2 <HAL_GPIO_WritePin>
  }
}
 800cba8:	46c0      	nop			@ (mov r8, r8)
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	b003      	add	sp, #12
 800cbae:	bd90      	pop	{r4, r7, pc}
 800cbb0:	20002151 	.word	0x20002151
 800cbb4:	200000c4 	.word	0x200000c4
 800cbb8:	20002152 	.word	0x20002152
 800cbbc:	50000400 	.word	0x50000400

0800cbc0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800cbc0:	b590      	push	{r4, r7, lr}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	0004      	movs	r4, r0
 800cbc8:	0008      	movs	r0, r1
 800cbca:	0011      	movs	r1, r2
 800cbcc:	1dbb      	adds	r3, r7, #6
 800cbce:	1c22      	adds	r2, r4, #0
 800cbd0:	801a      	strh	r2, [r3, #0]
 800cbd2:	1d3b      	adds	r3, r7, #4
 800cbd4:	1c02      	adds	r2, r0, #0
 800cbd6:	801a      	strh	r2, [r3, #0]
 800cbd8:	1cbb      	adds	r3, r7, #2
 800cbda:	1c0a      	adds	r2, r1, #0
 800cbdc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800cbde:	4b0e      	ldr	r3, [pc, #56]	@ (800cc18 <SetVocLED+0x58>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d107      	bne.n	800cbf6 <SetVocLED+0x36>
 800cbe6:	4b0d      	ldr	r3, [pc, #52]	@ (800cc1c <SetVocLED+0x5c>)
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d103      	bne.n	800cbf6 <SetVocLED+0x36>
 800cbee:	4b0c      	ldr	r3, [pc, #48]	@ (800cc20 <SetVocLED+0x60>)
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00b      	beq.n	800cc0e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800cbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800cc24 <SetVocLED+0x64>)
 800cbf8:	1dba      	adds	r2, r7, #6
 800cbfa:	8812      	ldrh	r2, [r2, #0]
 800cbfc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800cbfe:	4b09      	ldr	r3, [pc, #36]	@ (800cc24 <SetVocLED+0x64>)
 800cc00:	1d3a      	adds	r2, r7, #4
 800cc02:	8812      	ldrh	r2, [r2, #0]
 800cc04:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800cc06:	4b07      	ldr	r3, [pc, #28]	@ (800cc24 <SetVocLED+0x64>)
 800cc08:	1cba      	adds	r2, r7, #2
 800cc0a:	8812      	ldrh	r2, [r2, #0]
 800cc0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cc0e:	46c0      	nop			@ (mov r8, r8)
 800cc10:	46bd      	mov	sp, r7
 800cc12:	b003      	add	sp, #12
 800cc14:	bd90      	pop	{r4, r7, pc}
 800cc16:	46c0      	nop			@ (mov r8, r8)
 800cc18:	20002151 	.word	0x20002151
 800cc1c:	200000c4 	.word	0x200000c4
 800cc20:	20002152 	.word	0x20002152
 800cc24:	40000400 	.word	0x40000400

0800cc28 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc2c:	4b07      	ldr	r3, [pc, #28]	@ (800cc4c <SetMeasurementIndicator+0x24>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d103      	bne.n	800cc3c <SetMeasurementIndicator+0x14>
 800cc34:	4b06      	ldr	r3, [pc, #24]	@ (800cc50 <SetMeasurementIndicator+0x28>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800cc3c:	2380      	movs	r3, #128	@ 0x80
 800cc3e:	05db      	lsls	r3, r3, #23
 800cc40:	4a04      	ldr	r2, [pc, #16]	@ (800cc54 <SetMeasurementIndicator+0x2c>)
 800cc42:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cc44:	46c0      	nop			@ (mov r8, r8)
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	46c0      	nop			@ (mov r8, r8)
 800cc4c:	20002151 	.word	0x20002151
 800cc50:	20002152 	.word	0x20002152
 800cc54:	00000bb8 	.word	0x00000bb8

0800cc58 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc5c:	4b07      	ldr	r3, [pc, #28]	@ (800cc7c <ResetMeasurementIndicator+0x24>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d103      	bne.n	800cc6c <ResetMeasurementIndicator+0x14>
 800cc64:	4b06      	ldr	r3, [pc, #24]	@ (800cc80 <ResetMeasurementIndicator+0x28>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d004      	beq.n	800cc76 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800cc6c:	2380      	movs	r3, #128	@ 0x80
 800cc6e:	05db      	lsls	r3, r3, #23
 800cc70:	22fa      	movs	r2, #250	@ 0xfa
 800cc72:	0112      	lsls	r2, r2, #4
 800cc74:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cc76:	46c0      	nop			@ (mov r8, r8)
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	20002151 	.word	0x20002151
 800cc80:	20002152 	.word	0x20002152

0800cc84 <SetMICIndicator>:
void SetMICIndicator(){
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc88:	4b11      	ldr	r3, [pc, #68]	@ (800ccd0 <SetMICIndicator+0x4c>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d103      	bne.n	800cc98 <SetMICIndicator+0x14>
 800cc90:	4b10      	ldr	r3, [pc, #64]	@ (800ccd4 <SetMICIndicator+0x50>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d004      	beq.n	800cca2 <SetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_ON;
 800cc98:	2380      	movs	r3, #128	@ 0x80
 800cc9a:	05db      	lsls	r3, r3, #23
 800cc9c:	4a0e      	ldr	r2, [pc, #56]	@ (800ccd8 <SetMICIndicator+0x54>)
 800cc9e:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_ON;
    }
  }
}
 800cca0:	e013      	b.n	800ccca <SetMICIndicator+0x46>
    if (batteryCharge > 3.7) {
 800cca2:	4b0e      	ldr	r3, [pc, #56]	@ (800ccdc <SetMICIndicator+0x58>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	1c18      	adds	r0, r3, #0
 800cca8:	f7f6 fbdc 	bl	8003464 <__aeabi_f2d>
 800ccac:	4a0c      	ldr	r2, [pc, #48]	@ (800cce0 <SetMICIndicator+0x5c>)
 800ccae:	4b0d      	ldr	r3, [pc, #52]	@ (800cce4 <SetMICIndicator+0x60>)
 800ccb0:	f7f3 fc18 	bl	80004e4 <__aeabi_dcmpgt>
 800ccb4:	1e03      	subs	r3, r0, #0
 800ccb6:	d004      	beq.n	800ccc2 <SetMICIndicator+0x3e>
      TIM2 -> CCR3 = LED_ON;
 800ccb8:	2380      	movs	r3, #128	@ 0x80
 800ccba:	05db      	lsls	r3, r3, #23
 800ccbc:	4a06      	ldr	r2, [pc, #24]	@ (800ccd8 <SetMICIndicator+0x54>)
 800ccbe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ccc0:	e003      	b.n	800ccca <SetMICIndicator+0x46>
      TIM2 -> CCR1 = LED_ON;
 800ccc2:	2380      	movs	r3, #128	@ 0x80
 800ccc4:	05db      	lsls	r3, r3, #23
 800ccc6:	4a04      	ldr	r2, [pc, #16]	@ (800ccd8 <SetMICIndicator+0x54>)
 800ccc8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800ccca:	46c0      	nop			@ (mov r8, r8)
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	20002151 	.word	0x20002151
 800ccd4:	20002152 	.word	0x20002152
 800ccd8:	00000bb8 	.word	0x00000bb8
 800ccdc:	20002158 	.word	0x20002158
 800cce0:	9999999a 	.word	0x9999999a
 800cce4:	400d9999 	.word	0x400d9999

0800cce8 <ResetMICIndicator>:
void ResetMICIndicator(){
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ccec:	4b13      	ldr	r3, [pc, #76]	@ (800cd3c <ResetMICIndicator+0x54>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d103      	bne.n	800ccfc <ResetMICIndicator+0x14>
 800ccf4:	4b12      	ldr	r3, [pc, #72]	@ (800cd40 <ResetMICIndicator+0x58>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d005      	beq.n	800cd08 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800ccfc:	2380      	movs	r3, #128	@ 0x80
 800ccfe:	05db      	lsls	r3, r3, #23
 800cd00:	22fa      	movs	r2, #250	@ 0xfa
 800cd02:	0112      	lsls	r2, r2, #4
 800cd04:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800cd06:	e015      	b.n	800cd34 <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800cd08:	4b0e      	ldr	r3, [pc, #56]	@ (800cd44 <ResetMICIndicator+0x5c>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	1c18      	adds	r0, r3, #0
 800cd0e:	f7f6 fba9 	bl	8003464 <__aeabi_f2d>
 800cd12:	4a0d      	ldr	r2, [pc, #52]	@ (800cd48 <ResetMICIndicator+0x60>)
 800cd14:	4b0d      	ldr	r3, [pc, #52]	@ (800cd4c <ResetMICIndicator+0x64>)
 800cd16:	f7f3 fbe5 	bl	80004e4 <__aeabi_dcmpgt>
 800cd1a:	1e03      	subs	r3, r0, #0
 800cd1c:	d005      	beq.n	800cd2a <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800cd1e:	2380      	movs	r3, #128	@ 0x80
 800cd20:	05db      	lsls	r3, r3, #23
 800cd22:	22fa      	movs	r2, #250	@ 0xfa
 800cd24:	0112      	lsls	r2, r2, #4
 800cd26:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cd28:	e004      	b.n	800cd34 <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800cd2a:	2380      	movs	r3, #128	@ 0x80
 800cd2c:	05db      	lsls	r3, r3, #23
 800cd2e:	22fa      	movs	r2, #250	@ 0xfa
 800cd30:	0112      	lsls	r2, r2, #4
 800cd32:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800cd34:	46c0      	nop			@ (mov r8, r8)
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	46c0      	nop			@ (mov r8, r8)
 800cd3c:	20002151 	.word	0x20002151
 800cd40:	20002152 	.word	0x20002152
 800cd44:	20002158 	.word	0x20002158
 800cd48:	1eb851ec 	.word	0x1eb851ec
 800cd4c:	400deb85 	.word	0x400deb85

0800cd50 <SetESPIndicator>:
void SetESPIndicator(){
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd54:	4b07      	ldr	r3, [pc, #28]	@ (800cd74 <SetESPIndicator+0x24>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d103      	bne.n	800cd64 <SetESPIndicator+0x14>
 800cd5c:	4b06      	ldr	r3, [pc, #24]	@ (800cd78 <SetESPIndicator+0x28>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d003      	beq.n	800cd6c <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800cd64:	2380      	movs	r3, #128	@ 0x80
 800cd66:	05db      	lsls	r3, r3, #23
 800cd68:	4a04      	ldr	r2, [pc, #16]	@ (800cd7c <SetESPIndicator+0x2c>)
 800cd6a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cd6c:	46c0      	nop			@ (mov r8, r8)
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	46c0      	nop			@ (mov r8, r8)
 800cd74:	20002151 	.word	0x20002151
 800cd78:	20002152 	.word	0x20002152
 800cd7c:	00000bb8 	.word	0x00000bb8

0800cd80 <ResetESPIndicator>:
void ResetESPIndicator(){
 800cd80:	b580      	push	{r7, lr}
 800cd82:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd84:	4b07      	ldr	r3, [pc, #28]	@ (800cda4 <ResetESPIndicator+0x24>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d103      	bne.n	800cd94 <ResetESPIndicator+0x14>
 800cd8c:	4b06      	ldr	r3, [pc, #24]	@ (800cda8 <ResetESPIndicator+0x28>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d004      	beq.n	800cd9e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800cd94:	2380      	movs	r3, #128	@ 0x80
 800cd96:	05db      	lsls	r3, r3, #23
 800cd98:	22fa      	movs	r2, #250	@ 0xfa
 800cd9a:	0112      	lsls	r2, r2, #4
 800cd9c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cd9e:	46c0      	nop			@ (mov r8, r8)
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20002151 	.word	0x20002151
 800cda8:	20002152 	.word	0x20002152

0800cdac <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800cdb0:	23fa      	movs	r3, #250	@ 0xfa
 800cdb2:	011a      	lsls	r2, r3, #4
 800cdb4:	23fa      	movs	r3, #250	@ 0xfa
 800cdb6:	0119      	lsls	r1, r3, #4
 800cdb8:	23fa      	movs	r3, #250	@ 0xfa
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f7ff fe81 	bl	800cac4 <SetStatusLED>
  SetDBLED(false,false,false);
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f7ff feb0 	bl	800cb2c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800cdcc:	23fa      	movs	r3, #250	@ 0xfa
 800cdce:	011a      	lsls	r2, r3, #4
 800cdd0:	23fa      	movs	r3, #250	@ 0xfa
 800cdd2:	0119      	lsls	r1, r3, #4
 800cdd4:	23fa      	movs	r3, #250	@ 0xfa
 800cdd6:	011b      	lsls	r3, r3, #4
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f7ff fef1 	bl	800cbc0 <SetVocLED>
return;
 800cdde:	46c0      	nop			@ (mov r8, r8)
}
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <powerCheck>:

Battery_Status powerCheck(){
 800cde4:	b590      	push	{r4, r7, lr}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800cdea:	f7f9 fa73 	bl	80062d4 <Check_USB_PowerOn>
 800cdee:	0003      	movs	r3, r0
 800cdf0:	001a      	movs	r2, r3
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	4053      	eors	r3, r2
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d005      	beq.n	800ce08 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cdfc:	1dfc      	adds	r4, r7, #7
 800cdfe:	f7ff fe07 	bl	800ca10 <batteryChargeCheck>
 800ce02:	0003      	movs	r3, r0
 800ce04:	7023      	strb	r3, [r4, #0]
 800ce06:	e002      	b.n	800ce0e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800ce08:	1dfb      	adds	r3, r7, #7
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ce0e:	1dfb      	adds	r3, r7, #7
 800ce10:	781b      	ldrb	r3, [r3, #0]
}
 800ce12:	0018      	movs	r0, r3
 800ce14:	46bd      	mov	sp, r7
 800ce16:	b003      	add	sp, #12
 800ce18:	bd90      	pop	{r4, r7, pc}
	...

0800ce1c <powerDisplay>:

void powerDisplay(Battery_Status status){
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	0002      	movs	r2, r0
 800ce24:	1dfb      	adds	r3, r7, #7
 800ce26:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800ce28:	1dfb      	adds	r3, r7, #7
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d105      	bne.n	800ce3c <powerDisplay+0x20>
    Debug("LEDS are okay");
 800ce30:	4a18      	ldr	r2, [pc, #96]	@ (800ce94 <powerDisplay+0x78>)
 800ce32:	4b19      	ldr	r3, [pc, #100]	@ (800ce98 <powerDisplay+0x7c>)
 800ce34:	0019      	movs	r1, r3
 800ce36:	2003      	movs	r0, #3
 800ce38:	f000 fe4c 	bl	800dad4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800ce3c:	1dfb      	adds	r3, r7, #7
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b04      	cmp	r3, #4
 800ce42:	d105      	bne.n	800ce50 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800ce44:	4a15      	ldr	r2, [pc, #84]	@ (800ce9c <powerDisplay+0x80>)
 800ce46:	4b14      	ldr	r3, [pc, #80]	@ (800ce98 <powerDisplay+0x7c>)
 800ce48:	0019      	movs	r1, r3
 800ce4a:	2003      	movs	r0, #3
 800ce4c:	f000 fe42 	bl	800dad4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800ce50:	1dfb      	adds	r3, r7, #7
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d105      	bne.n	800ce64 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800ce58:	4a11      	ldr	r2, [pc, #68]	@ (800cea0 <powerDisplay+0x84>)
 800ce5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce98 <powerDisplay+0x7c>)
 800ce5c:	0019      	movs	r1, r3
 800ce5e:	2003      	movs	r0, #3
 800ce60:	f000 fe38 	bl	800dad4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800ce64:	1dfb      	adds	r3, r7, #7
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d105      	bne.n	800ce78 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800ce6c:	4a0d      	ldr	r2, [pc, #52]	@ (800cea4 <powerDisplay+0x88>)
 800ce6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce98 <powerDisplay+0x7c>)
 800ce70:	0019      	movs	r1, r3
 800ce72:	2003      	movs	r0, #3
 800ce74:	f000 fe2e 	bl	800dad4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800ce78:	1dfb      	adds	r3, r7, #7
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d105      	bne.n	800ce8c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800ce80:	4a09      	ldr	r2, [pc, #36]	@ (800cea8 <powerDisplay+0x8c>)
 800ce82:	4b05      	ldr	r3, [pc, #20]	@ (800ce98 <powerDisplay+0x7c>)
 800ce84:	0019      	movs	r1, r3
 800ce86:	2003      	movs	r0, #3
 800ce88:	f000 fe24 	bl	800dad4 <CreateLine>
  }
}
 800ce8c:	46c0      	nop			@ (mov r8, r8)
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	b002      	add	sp, #8
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	080241cc 	.word	0x080241cc
 800ce98:	080241dc 	.word	0x080241dc
 800ce9c:	080241e0 	.word	0x080241e0
 800cea0:	080241f8 	.word	0x080241f8
 800cea4:	08024218 	.word	0x08024218
 800cea8:	08024230 	.word	0x08024230

0800ceac <configCheck>:

void configCheck(){
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800ceb0:	f7f9 fa1f 	bl	80062f2 <BootButton_Pressed>
 800ceb4:	1e03      	subs	r3, r0, #0
 800ceb6:	d007      	beq.n	800cec8 <configCheck+0x1c>
 800ceb8:	f7f9 fa2c 	bl	8006314 <UserButton_Pressed>
 800cebc:	1e03      	subs	r3, r0, #0
 800cebe:	d003      	beq.n	800cec8 <configCheck+0x1c>
    configSet = true;
 800cec0:	4b44      	ldr	r3, [pc, #272]	@ (800cfd4 <configCheck+0x128>)
 800cec2:	2201      	movs	r2, #1
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	e00a      	b.n	800cede <configCheck+0x32>
  }
  else{
    configSet = false;
 800cec8:	4b42      	ldr	r3, [pc, #264]	@ (800cfd4 <configCheck+0x128>)
 800ceca:	2200      	movs	r2, #0
 800cecc:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800cece:	f001 fa57 	bl	800e380 <HAL_GetTick>
 800ced2:	0003      	movs	r3, r0
 800ced4:	22fa      	movs	r2, #250	@ 0xfa
 800ced6:	00d2      	lsls	r2, r2, #3
 800ced8:	189a      	adds	r2, r3, r2
 800ceda:	4b3f      	ldr	r3, [pc, #252]	@ (800cfd8 <configCheck+0x12c>)
 800cedc:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800cede:	4b3d      	ldr	r3, [pc, #244]	@ (800cfd4 <configCheck+0x128>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00d      	beq.n	800cf02 <configCheck+0x56>
 800cee6:	4b3c      	ldr	r3, [pc, #240]	@ (800cfd8 <configCheck+0x12c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	0018      	movs	r0, r3
 800ceec:	f000 fd9c 	bl	800da28 <TimestampIsReached>
 800cef0:	1e03      	subs	r3, r0, #0
 800cef2:	d006      	beq.n	800cf02 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800cef4:	f7f6 fd64 	bl	80039c0 <SetConfigMode>
    SetDBLED(true, true, true);
 800cef8:	2201      	movs	r2, #1
 800cefa:	2101      	movs	r1, #1
 800cefc:	2001      	movs	r0, #1
 800cefe:	f7ff fe15 	bl	800cb2c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800cf02:	f7f9 f9f6 	bl	80062f2 <BootButton_Pressed>
 800cf06:	0003      	movs	r3, r0
 800cf08:	001a      	movs	r2, r3
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	4053      	eors	r3, r2
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d029      	beq.n	800cf68 <configCheck+0xbc>
 800cf14:	f7f9 f9fe 	bl	8006314 <UserButton_Pressed>
 800cf18:	1e03      	subs	r3, r0, #0
 800cf1a:	d025      	beq.n	800cf68 <configCheck+0xbc>
 800cf1c:	4b2f      	ldr	r3, [pc, #188]	@ (800cfdc <configCheck+0x130>)
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2201      	movs	r2, #1
 800cf22:	4053      	eors	r3, r2
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d01e      	beq.n	800cf68 <configCheck+0xbc>
    SetLEDsOff();
 800cf2a:	f7ff ff3f 	bl	800cdac <SetLEDsOff>
    Debug("userToggle flipped");
 800cf2e:	4a2c      	ldr	r2, [pc, #176]	@ (800cfe0 <configCheck+0x134>)
 800cf30:	4b2c      	ldr	r3, [pc, #176]	@ (800cfe4 <configCheck+0x138>)
 800cf32:	0019      	movs	r1, r3
 800cf34:	2003      	movs	r0, #3
 800cf36:	f000 fdcd 	bl	800dad4 <CreateLine>
    userToggle = !userToggle;
 800cf3a:	4b2b      	ldr	r3, [pc, #172]	@ (800cfe8 <configCheck+0x13c>)
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	1e5a      	subs	r2, r3, #1
 800cf40:	4193      	sbcs	r3, r2
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2201      	movs	r2, #1
 800cf46:	4053      	eors	r3, r2
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	1c1a      	adds	r2, r3, #0
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	4013      	ands	r3, r2
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	4b25      	ldr	r3, [pc, #148]	@ (800cfe8 <configCheck+0x13c>)
 800cf54:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800cf56:	4b24      	ldr	r3, [pc, #144]	@ (800cfe8 <configCheck+0x13c>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <configCheck+0xb6>
      EnabledConnectedDevices();
 800cf5e:	f7fb fa9d 	bl	800849c <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800cf62:	4b1e      	ldr	r3, [pc, #120]	@ (800cfdc <configCheck+0x130>)
 800cf64:	2201      	movs	r2, #1
 800cf66:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800cf68:	f7f9 f9c3 	bl	80062f2 <BootButton_Pressed>
 800cf6c:	0003      	movs	r3, r0
 800cf6e:	001a      	movs	r2, r3
 800cf70:	2301      	movs	r3, #1
 800cf72:	4053      	eors	r3, r2
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00b      	beq.n	800cf92 <configCheck+0xe6>
 800cf7a:	f7f9 f9cb 	bl	8006314 <UserButton_Pressed>
 800cf7e:	0003      	movs	r3, r0
 800cf80:	001a      	movs	r2, r3
 800cf82:	2301      	movs	r3, #1
 800cf84:	4053      	eors	r3, r2
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d002      	beq.n	800cf92 <configCheck+0xe6>
    buttonHeld = false;
 800cf8c:	4b13      	ldr	r3, [pc, #76]	@ (800cfdc <configCheck+0x130>)
 800cf8e:	2200      	movs	r2, #0
 800cf90:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800cf92:	f7f9 f99f 	bl	80062d4 <Check_USB_PowerOn>
 800cf96:	1e03      	subs	r3, r0, #0
 800cf98:	d005      	beq.n	800cfa6 <configCheck+0xfa>
    usbPluggedIn = true;
 800cf9a:	4b14      	ldr	r3, [pc, #80]	@ (800cfec <configCheck+0x140>)
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800cfa0:	f7fb fa7c 	bl	800849c <EnabledConnectedDevices>
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800cfa4:	e012      	b.n	800cfcc <configCheck+0x120>
    if(!userToggle && !init){
 800cfa6:	4b10      	ldr	r3, [pc, #64]	@ (800cfe8 <configCheck+0x13c>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	4053      	eors	r3, r2
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d008      	beq.n	800cfc6 <configCheck+0x11a>
 800cfb4:	4b0e      	ldr	r3, [pc, #56]	@ (800cff0 <configCheck+0x144>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	4053      	eors	r3, r2
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <configCheck+0x11a>
      SetLEDsOff();
 800cfc2:	f7ff fef3 	bl	800cdac <SetLEDsOff>
    usbPluggedIn = false;
 800cfc6:	4b09      	ldr	r3, [pc, #36]	@ (800cfec <configCheck+0x140>)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	701a      	strb	r2, [r3, #0]
}
 800cfcc:	46c0      	nop			@ (mov r8, r8)
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	46c0      	nop			@ (mov r8, r8)
 800cfd4:	20002150 	.word	0x20002150
 800cfd8:	20002154 	.word	0x20002154
 800cfdc:	20002153 	.word	0x20002153
 800cfe0:	08024254 	.word	0x08024254
 800cfe4:	080241dc 	.word	0x080241dc
 800cfe8:	20002152 	.word	0x20002152
 800cfec:	20002151 	.word	0x20002151
 800cff0:	200000c4 	.word	0x200000c4

0800cff4 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800cff4:	b590      	push	{r4, r7, lr}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800cffa:	1dfc      	adds	r4, r7, #7
 800cffc:	f7ff fef2 	bl	800cde4 <powerCheck>
 800d000:	0003      	movs	r3, r0
 800d002:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d004:	1dfb      	adds	r3, r7, #7
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	0018      	movs	r0, r3
 800d00a:	f7ff ff07 	bl	800ce1c <powerDisplay>
  return status;
 800d00e:	1dfb      	adds	r3, r7, #7
 800d010:	781b      	ldrb	r3, [r3, #0]

}
 800d012:	0018      	movs	r0, r3
 800d014:	46bd      	mov	sp, r7
 800d016:	b003      	add	sp, #12
 800d018:	bd90      	pop	{r4, r7, pc}
	...

0800d01c <setuserToggle>:

void setuserToggle(void) {
 800d01c:	b580      	push	{r7, lr}
 800d01e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800d020:	f7ff fee0 	bl	800cde4 <powerCheck>
 800d024:	0003      	movs	r3, r0
 800d026:	2b01      	cmp	r3, #1
 800d028:	d002      	beq.n	800d030 <setuserToggle+0x14>
    userToggle = true;
 800d02a:	4b03      	ldr	r3, [pc, #12]	@ (800d038 <setuserToggle+0x1c>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	701a      	strb	r2, [r3, #0]
  }
}
 800d030:	46c0      	nop			@ (mov r8, r8)
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	46c0      	nop			@ (mov r8, r8)
 800d038:	20002152 	.word	0x20002152

0800d03c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d040:	4b07      	ldr	r3, [pc, #28]	@ (800d060 <HAL_MspInit+0x24>)
 800d042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d044:	4b06      	ldr	r3, [pc, #24]	@ (800d060 <HAL_MspInit+0x24>)
 800d046:	2101      	movs	r1, #1
 800d048:	430a      	orrs	r2, r1
 800d04a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800d04c:	4b04      	ldr	r3, [pc, #16]	@ (800d060 <HAL_MspInit+0x24>)
 800d04e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d050:	4b03      	ldr	r3, [pc, #12]	@ (800d060 <HAL_MspInit+0x24>)
 800d052:	2180      	movs	r1, #128	@ 0x80
 800d054:	0549      	lsls	r1, r1, #21
 800d056:	430a      	orrs	r2, r1
 800d058:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d05a:	46c0      	nop			@ (mov r8, r8)
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	40021000 	.word	0x40021000

0800d064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d068:	46c0      	nop			@ (mov r8, r8)
 800d06a:	e7fd      	b.n	800d068 <NMI_Handler+0x4>

0800d06c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d070:	46c0      	nop			@ (mov r8, r8)
 800d072:	e7fd      	b.n	800d070 <HardFault_Handler+0x4>

0800d074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d078:	46c0      	nop			@ (mov r8, r8)
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d082:	46c0      	nop			@ (mov r8, r8)
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d08c:	f001 f966 	bl	800e35c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d090:	46c0      	nop			@ (mov r8, r8)
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d09c:	4b03      	ldr	r3, [pc, #12]	@ (800d0ac <RTC_IRQHandler+0x14>)
 800d09e:	0018      	movs	r0, r3
 800d0a0:	f008 fe8c 	bl	8015dbc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d0a4:	46c0      	nop			@ (mov r8, r8)
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	46c0      	nop			@ (mov r8, r8)
 800d0ac:	200011a4 	.word	0x200011a4

0800d0b0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d0b4:	2380      	movs	r3, #128	@ 0x80
 800d0b6:	021b      	lsls	r3, r3, #8
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	f002 fc0f 	bl	800f8dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d0be:	46c0      	nop			@ (mov r8, r8)
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d0c8:	4b05      	ldr	r3, [pc, #20]	@ (800d0e0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	f001 ff97 	bl	800effe <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d0d0:	4b04      	ldr	r3, [pc, #16]	@ (800d0e4 <DMA1_Channel2_3_IRQHandler+0x20>)
 800d0d2:	0018      	movs	r0, r3
 800d0d4:	f001 ff93 	bl	800effe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d0d8:	46c0      	nop			@ (mov r8, r8)
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	46c0      	nop			@ (mov r8, r8)
 800d0e0:	20000e48 	.word	0x20000e48
 800d0e4:	20000e00 	.word	0x20000e00

0800d0e8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800d0ec:	4b07      	ldr	r3, [pc, #28]	@ (800d10c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800d0ee:	0018      	movs	r0, r3
 800d0f0:	f001 ff85 	bl	800effe <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800d0f4:	4b06      	ldr	r3, [pc, #24]	@ (800d110 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f001 ff81 	bl	800effe <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800d0fc:	4b05      	ldr	r3, [pc, #20]	@ (800d114 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800d0fe:	0018      	movs	r0, r3
 800d100:	f001 ff7d 	bl	800effe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800d104:	46c0      	nop			@ (mov r8, r8)
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	46c0      	nop			@ (mov r8, r8)
 800d10c:	20000ecc 	.word	0x20000ecc
 800d110:	20002448 	.word	0x20002448
 800d114:	20002490 	.word	0x20002490

0800d118 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800d11c:	4b03      	ldr	r3, [pc, #12]	@ (800d12c <USART4_5_IRQHandler+0x14>)
 800d11e:	0018      	movs	r0, r3
 800d120:	f009 fd46 	bl	8016bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800d124:	46c0      	nop			@ (mov r8, r8)
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	46c0      	nop			@ (mov r8, r8)
 800d12c:	20002390 	.word	0x20002390

0800d130 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800d134:	4b09      	ldr	r3, [pc, #36]	@ (800d15c <I2C1_IRQHandler+0x2c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	699a      	ldr	r2, [r3, #24]
 800d13a:	23e0      	movs	r3, #224	@ 0xe0
 800d13c:	00db      	lsls	r3, r3, #3
 800d13e:	4013      	ands	r3, r2
 800d140:	d004      	beq.n	800d14c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800d142:	4b06      	ldr	r3, [pc, #24]	@ (800d15c <I2C1_IRQHandler+0x2c>)
 800d144:	0018      	movs	r0, r3
 800d146:	f003 f8b1 	bl	80102ac <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800d14a:	e003      	b.n	800d154 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800d14c:	4b03      	ldr	r3, [pc, #12]	@ (800d15c <I2C1_IRQHandler+0x2c>)
 800d14e:	0018      	movs	r0, r3
 800d150:	f003 f892 	bl	8010278 <HAL_I2C_EV_IRQHandler>
}
 800d154:	46c0      	nop			@ (mov r8, r8)
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	46c0      	nop			@ (mov r8, r8)
 800d15c:	20000d58 	.word	0x20000d58

0800d160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d164:	4b03      	ldr	r3, [pc, #12]	@ (800d174 <USART1_IRQHandler+0x14>)
 800d166:	0018      	movs	r0, r3
 800d168:	f009 fd22 	bl	8016bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d16c:	46c0      	nop			@ (mov r8, r8)
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	46c0      	nop			@ (mov r8, r8)
 800d174:	200022d8 	.word	0x200022d8

0800d178 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d17c:	4b03      	ldr	r3, [pc, #12]	@ (800d18c <USB_IRQHandler+0x14>)
 800d17e:	0018      	movs	r0, r3
 800d180:	f005 fc72 	bl	8012a68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d184:	46c0      	nop			@ (mov r8, r8)
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	46c0      	nop			@ (mov r8, r8)
 800d18c:	200032a4 	.word	0x200032a4

0800d190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	af00      	add	r7, sp, #0
  return 1;
 800d194:	2301      	movs	r3, #1
}
 800d196:	0018      	movs	r0, r3
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <_kill>:

int _kill(int pid, int sig)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d1a6:	f012 fbe7 	bl	801f978 <__errno>
 800d1aa:	0003      	movs	r3, r0
 800d1ac:	2216      	movs	r2, #22
 800d1ae:	601a      	str	r2, [r3, #0]
  return -1;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	425b      	negs	r3, r3
}
 800d1b4:	0018      	movs	r0, r3
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	b002      	add	sp, #8
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <_exit>:

void _exit (int status)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	425a      	negs	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	0011      	movs	r1, r2
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	f7ff ffe5 	bl	800d19c <_kill>
  while (1) {}    /* Make sure we hang here */
 800d1d2:	46c0      	nop			@ (mov r8, r8)
 800d1d4:	e7fd      	b.n	800d1d2 <_exit+0x16>

0800d1d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b086      	sub	sp, #24
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	60f8      	str	r0, [r7, #12]
 800d1de:	60b9      	str	r1, [r7, #8]
 800d1e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	e00a      	b.n	800d1fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d1e8:	e000      	b.n	800d1ec <_read+0x16>
 800d1ea:	bf00      	nop
 800d1ec:	0001      	movs	r1, r0
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	1c5a      	adds	r2, r3, #1
 800d1f2:	60ba      	str	r2, [r7, #8]
 800d1f4:	b2ca      	uxtb	r2, r1
 800d1f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	617b      	str	r3, [r7, #20]
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	429a      	cmp	r2, r3
 800d204:	dbf0      	blt.n	800d1e8 <_read+0x12>
  }

  return len;
 800d206:	687b      	ldr	r3, [r7, #4]
}
 800d208:	0018      	movs	r0, r3
 800d20a:	46bd      	mov	sp, r7
 800d20c:	b006      	add	sp, #24
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <_close>:
  }
  return len;
}

int _close(int file)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d218:	2301      	movs	r3, #1
 800d21a:	425b      	negs	r3, r3
}
 800d21c:	0018      	movs	r0, r3
 800d21e:	46bd      	mov	sp, r7
 800d220:	b002      	add	sp, #8
 800d222:	bd80      	pop	{r7, pc}

0800d224 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	2280      	movs	r2, #128	@ 0x80
 800d232:	0192      	lsls	r2, r2, #6
 800d234:	605a      	str	r2, [r3, #4]
  return 0;
 800d236:	2300      	movs	r3, #0
}
 800d238:	0018      	movs	r0, r3
 800d23a:	46bd      	mov	sp, r7
 800d23c:	b002      	add	sp, #8
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <_isatty>:

int _isatty(int file)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d248:	2301      	movs	r3, #1
}
 800d24a:	0018      	movs	r0, r3
 800d24c:	46bd      	mov	sp, r7
 800d24e:	b002      	add	sp, #8
 800d250:	bd80      	pop	{r7, pc}

0800d252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b084      	sub	sp, #16
 800d256:	af00      	add	r7, sp, #0
 800d258:	60f8      	str	r0, [r7, #12]
 800d25a:	60b9      	str	r1, [r7, #8]
 800d25c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	0018      	movs	r0, r3
 800d262:	46bd      	mov	sp, r7
 800d264:	b004      	add	sp, #16
 800d266:	bd80      	pop	{r7, pc}

0800d268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b086      	sub	sp, #24
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d270:	4a14      	ldr	r2, [pc, #80]	@ (800d2c4 <_sbrk+0x5c>)
 800d272:	4b15      	ldr	r3, [pc, #84]	@ (800d2c8 <_sbrk+0x60>)
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d27c:	4b13      	ldr	r3, [pc, #76]	@ (800d2cc <_sbrk+0x64>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d102      	bne.n	800d28a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d284:	4b11      	ldr	r3, [pc, #68]	@ (800d2cc <_sbrk+0x64>)
 800d286:	4a12      	ldr	r2, [pc, #72]	@ (800d2d0 <_sbrk+0x68>)
 800d288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d28a:	4b10      	ldr	r3, [pc, #64]	@ (800d2cc <_sbrk+0x64>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	18d3      	adds	r3, r2, r3
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	429a      	cmp	r2, r3
 800d296:	d207      	bcs.n	800d2a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d298:	f012 fb6e 	bl	801f978 <__errno>
 800d29c:	0003      	movs	r3, r0
 800d29e:	220c      	movs	r2, #12
 800d2a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	425b      	negs	r3, r3
 800d2a6:	e009      	b.n	800d2bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d2a8:	4b08      	ldr	r3, [pc, #32]	@ (800d2cc <_sbrk+0x64>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d2ae:	4b07      	ldr	r3, [pc, #28]	@ (800d2cc <_sbrk+0x64>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	18d2      	adds	r2, r2, r3
 800d2b6:	4b05      	ldr	r3, [pc, #20]	@ (800d2cc <_sbrk+0x64>)
 800d2b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
}
 800d2bc:	0018      	movs	r0, r3
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	b006      	add	sp, #24
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	20005000 	.word	0x20005000
 800d2c8:	00000400 	.word	0x00000400
 800d2cc:	2000215c 	.word	0x2000215c
 800d2d0:	20003908 	.word	0x20003908

0800d2d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d2d8:	46c0      	nop			@ (mov r8, r8)
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
	...

0800d2e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d2e6:	2310      	movs	r3, #16
 800d2e8:	18fb      	adds	r3, r7, r3
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	2308      	movs	r3, #8
 800d2ee:	001a      	movs	r2, r3
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	f012 fa9d 	bl	801f830 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d2f6:	003b      	movs	r3, r7
 800d2f8:	0018      	movs	r0, r3
 800d2fa:	2310      	movs	r3, #16
 800d2fc:	001a      	movs	r2, r3
 800d2fe:	2100      	movs	r1, #0
 800d300:	f012 fa96 	bl	801f830 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d304:	4b2e      	ldr	r3, [pc, #184]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d306:	2280      	movs	r2, #128	@ 0x80
 800d308:	05d2      	lsls	r2, r2, #23
 800d30a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d30c:	4b2c      	ldr	r3, [pc, #176]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d30e:	2200      	movs	r2, #0
 800d310:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d312:	4b2b      	ldr	r3, [pc, #172]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d314:	2200      	movs	r2, #0
 800d316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d318:	4b29      	ldr	r3, [pc, #164]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d31a:	4a2a      	ldr	r2, [pc, #168]	@ (800d3c4 <MX_TIM2_Init+0xe4>)
 800d31c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d31e:	4b28      	ldr	r3, [pc, #160]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d320:	2200      	movs	r2, #0
 800d322:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d324:	4b26      	ldr	r3, [pc, #152]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d326:	2200      	movs	r2, #0
 800d328:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d32a:	4b25      	ldr	r3, [pc, #148]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d32c:	0018      	movs	r0, r3
 800d32e:	f008 fe53 	bl	8015fd8 <HAL_TIM_PWM_Init>
 800d332:	1e03      	subs	r3, r0, #0
 800d334:	d001      	beq.n	800d33a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d336:	f7fa fe75 	bl	8008024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d33a:	2110      	movs	r1, #16
 800d33c:	187b      	adds	r3, r7, r1
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d342:	187b      	adds	r3, r7, r1
 800d344:	2200      	movs	r2, #0
 800d346:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d348:	187a      	adds	r2, r7, r1
 800d34a:	4b1d      	ldr	r3, [pc, #116]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d34c:	0011      	movs	r1, r2
 800d34e:	0018      	movs	r0, r3
 800d350:	f009 f960 	bl	8016614 <HAL_TIMEx_MasterConfigSynchronization>
 800d354:	1e03      	subs	r3, r0, #0
 800d356:	d001      	beq.n	800d35c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d358:	f7fa fe64 	bl	8008024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d35c:	003b      	movs	r3, r7
 800d35e:	2260      	movs	r2, #96	@ 0x60
 800d360:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d362:	003b      	movs	r3, r7
 800d364:	2200      	movs	r2, #0
 800d366:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d368:	003b      	movs	r3, r7
 800d36a:	2200      	movs	r2, #0
 800d36c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d36e:	003b      	movs	r3, r7
 800d370:	2200      	movs	r2, #0
 800d372:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d374:	0039      	movs	r1, r7
 800d376:	4b12      	ldr	r3, [pc, #72]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d378:	2200      	movs	r2, #0
 800d37a:	0018      	movs	r0, r3
 800d37c:	f008 fefe 	bl	801617c <HAL_TIM_PWM_ConfigChannel>
 800d380:	1e03      	subs	r3, r0, #0
 800d382:	d001      	beq.n	800d388 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d384:	f7fa fe4e 	bl	8008024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d388:	0039      	movs	r1, r7
 800d38a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d38c:	2208      	movs	r2, #8
 800d38e:	0018      	movs	r0, r3
 800d390:	f008 fef4 	bl	801617c <HAL_TIM_PWM_ConfigChannel>
 800d394:	1e03      	subs	r3, r0, #0
 800d396:	d001      	beq.n	800d39c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d398:	f7fa fe44 	bl	8008024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d39c:	0039      	movs	r1, r7
 800d39e:	4b08      	ldr	r3, [pc, #32]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d3a0:	220c      	movs	r2, #12
 800d3a2:	0018      	movs	r0, r3
 800d3a4:	f008 feea 	bl	801617c <HAL_TIM_PWM_ConfigChannel>
 800d3a8:	1e03      	subs	r3, r0, #0
 800d3aa:	d001      	beq.n	800d3b0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d3ac:	f7fa fe3a 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d3b0:	4b03      	ldr	r3, [pc, #12]	@ (800d3c0 <MX_TIM2_Init+0xe0>)
 800d3b2:	0018      	movs	r0, r3
 800d3b4:	f000 f8fe 	bl	800d5b4 <HAL_TIM_MspPostInit>

}
 800d3b8:	46c0      	nop			@ (mov r8, r8)
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	b006      	add	sp, #24
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20002160 	.word	0x20002160
 800d3c4:	0000ffff 	.word	0x0000ffff

0800d3c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d3ce:	2310      	movs	r3, #16
 800d3d0:	18fb      	adds	r3, r7, r3
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	2308      	movs	r3, #8
 800d3d6:	001a      	movs	r2, r3
 800d3d8:	2100      	movs	r1, #0
 800d3da:	f012 fa29 	bl	801f830 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d3de:	003b      	movs	r3, r7
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	2310      	movs	r3, #16
 800d3e4:	001a      	movs	r2, r3
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	f012 fa22 	bl	801f830 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d3ec:	4b32      	ldr	r3, [pc, #200]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d3ee:	4a33      	ldr	r2, [pc, #204]	@ (800d4bc <MX_TIM3_Init+0xf4>)
 800d3f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d3f2:	4b31      	ldr	r3, [pc, #196]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3f8:	4b2f      	ldr	r3, [pc, #188]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d3fe:	4b2e      	ldr	r3, [pc, #184]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d400:	4a2f      	ldr	r2, [pc, #188]	@ (800d4c0 <MX_TIM3_Init+0xf8>)
 800d402:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d404:	4b2c      	ldr	r3, [pc, #176]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d406:	2200      	movs	r2, #0
 800d408:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d40a:	4b2b      	ldr	r3, [pc, #172]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d410:	4b29      	ldr	r3, [pc, #164]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d412:	0018      	movs	r0, r3
 800d414:	f008 fde0 	bl	8015fd8 <HAL_TIM_PWM_Init>
 800d418:	1e03      	subs	r3, r0, #0
 800d41a:	d001      	beq.n	800d420 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d41c:	f7fa fe02 	bl	8008024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d420:	2110      	movs	r1, #16
 800d422:	187b      	adds	r3, r7, r1
 800d424:	2200      	movs	r2, #0
 800d426:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d428:	187b      	adds	r3, r7, r1
 800d42a:	2200      	movs	r2, #0
 800d42c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d42e:	187a      	adds	r2, r7, r1
 800d430:	4b21      	ldr	r3, [pc, #132]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d432:	0011      	movs	r1, r2
 800d434:	0018      	movs	r0, r3
 800d436:	f009 f8ed 	bl	8016614 <HAL_TIMEx_MasterConfigSynchronization>
 800d43a:	1e03      	subs	r3, r0, #0
 800d43c:	d001      	beq.n	800d442 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d43e:	f7fa fdf1 	bl	8008024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d442:	003b      	movs	r3, r7
 800d444:	2260      	movs	r2, #96	@ 0x60
 800d446:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d448:	003b      	movs	r3, r7
 800d44a:	2200      	movs	r2, #0
 800d44c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d44e:	003b      	movs	r3, r7
 800d450:	2200      	movs	r2, #0
 800d452:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d454:	003b      	movs	r3, r7
 800d456:	2200      	movs	r2, #0
 800d458:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d45a:	0039      	movs	r1, r7
 800d45c:	4b16      	ldr	r3, [pc, #88]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d45e:	2200      	movs	r2, #0
 800d460:	0018      	movs	r0, r3
 800d462:	f008 fe8b 	bl	801617c <HAL_TIM_PWM_ConfigChannel>
 800d466:	1e03      	subs	r3, r0, #0
 800d468:	d001      	beq.n	800d46e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d46a:	f7fa fddb 	bl	8008024 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d46e:	4b12      	ldr	r3, [pc, #72]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d470:	2104      	movs	r1, #4
 800d472:	0018      	movs	r0, r3
 800d474:	f009 f92c 	bl	80166d0 <HAL_TIMEx_RemapConfig>
 800d478:	1e03      	subs	r3, r0, #0
 800d47a:	d001      	beq.n	800d480 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d47c:	f7fa fdd2 	bl	8008024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d480:	0039      	movs	r1, r7
 800d482:	4b0d      	ldr	r3, [pc, #52]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d484:	2204      	movs	r2, #4
 800d486:	0018      	movs	r0, r3
 800d488:	f008 fe78 	bl	801617c <HAL_TIM_PWM_ConfigChannel>
 800d48c:	1e03      	subs	r3, r0, #0
 800d48e:	d001      	beq.n	800d494 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d490:	f7fa fdc8 	bl	8008024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d494:	0039      	movs	r1, r7
 800d496:	4b08      	ldr	r3, [pc, #32]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d498:	2208      	movs	r2, #8
 800d49a:	0018      	movs	r0, r3
 800d49c:	f008 fe6e 	bl	801617c <HAL_TIM_PWM_ConfigChannel>
 800d4a0:	1e03      	subs	r3, r0, #0
 800d4a2:	d001      	beq.n	800d4a8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d4a4:	f7fa fdbe 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d4a8:	4b03      	ldr	r3, [pc, #12]	@ (800d4b8 <MX_TIM3_Init+0xf0>)
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	f000 f882 	bl	800d5b4 <HAL_TIM_MspPostInit>

}
 800d4b0:	46c0      	nop			@ (mov r8, r8)
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	b006      	add	sp, #24
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	200021a0 	.word	0x200021a0
 800d4bc:	40000400 	.word	0x40000400
 800d4c0:	0000ffff 	.word	0x0000ffff

0800d4c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d4ca:	003b      	movs	r3, r7
 800d4cc:	0018      	movs	r0, r3
 800d4ce:	2308      	movs	r3, #8
 800d4d0:	001a      	movs	r2, r3
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	f012 f9ac 	bl	801f830 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d4d8:	4b15      	ldr	r3, [pc, #84]	@ (800d530 <MX_TIM6_Init+0x6c>)
 800d4da:	4a16      	ldr	r2, [pc, #88]	@ (800d534 <MX_TIM6_Init+0x70>)
 800d4dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d4de:	4b14      	ldr	r3, [pc, #80]	@ (800d530 <MX_TIM6_Init+0x6c>)
 800d4e0:	220a      	movs	r2, #10
 800d4e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d4e4:	4b12      	ldr	r3, [pc, #72]	@ (800d530 <MX_TIM6_Init+0x6c>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d4ea:	4b11      	ldr	r3, [pc, #68]	@ (800d530 <MX_TIM6_Init+0x6c>)
 800d4ec:	4a12      	ldr	r2, [pc, #72]	@ (800d538 <MX_TIM6_Init+0x74>)
 800d4ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d530 <MX_TIM6_Init+0x6c>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d4f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d530 <MX_TIM6_Init+0x6c>)
 800d4f8:	0018      	movs	r0, r3
 800d4fa:	f008 fcc5 	bl	8015e88 <HAL_TIM_Base_Init>
 800d4fe:	1e03      	subs	r3, r0, #0
 800d500:	d001      	beq.n	800d506 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d502:	f7fa fd8f 	bl	8008024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d506:	003b      	movs	r3, r7
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d50c:	003b      	movs	r3, r7
 800d50e:	2200      	movs	r2, #0
 800d510:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d512:	003a      	movs	r2, r7
 800d514:	4b06      	ldr	r3, [pc, #24]	@ (800d530 <MX_TIM6_Init+0x6c>)
 800d516:	0011      	movs	r1, r2
 800d518:	0018      	movs	r0, r3
 800d51a:	f009 f87b 	bl	8016614 <HAL_TIMEx_MasterConfigSynchronization>
 800d51e:	1e03      	subs	r3, r0, #0
 800d520:	d001      	beq.n	800d526 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d522:	f7fa fd7f 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d526:	46c0      	nop			@ (mov r8, r8)
 800d528:	46bd      	mov	sp, r7
 800d52a:	b002      	add	sp, #8
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	46c0      	nop			@ (mov r8, r8)
 800d530:	200021e0 	.word	0x200021e0
 800d534:	40001000 	.word	0x40001000
 800d538:	0000ffff 	.word	0x0000ffff

0800d53c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	2380      	movs	r3, #128	@ 0x80
 800d54a:	05db      	lsls	r3, r3, #23
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d106      	bne.n	800d55e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d550:	4b0a      	ldr	r3, [pc, #40]	@ (800d57c <HAL_TIM_PWM_MspInit+0x40>)
 800d552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d554:	4b09      	ldr	r3, [pc, #36]	@ (800d57c <HAL_TIM_PWM_MspInit+0x40>)
 800d556:	2101      	movs	r1, #1
 800d558:	430a      	orrs	r2, r1
 800d55a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d55c:	e00a      	b.n	800d574 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a07      	ldr	r2, [pc, #28]	@ (800d580 <HAL_TIM_PWM_MspInit+0x44>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d105      	bne.n	800d574 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d568:	4b04      	ldr	r3, [pc, #16]	@ (800d57c <HAL_TIM_PWM_MspInit+0x40>)
 800d56a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d56c:	4b03      	ldr	r3, [pc, #12]	@ (800d57c <HAL_TIM_PWM_MspInit+0x40>)
 800d56e:	2102      	movs	r1, #2
 800d570:	430a      	orrs	r2, r1
 800d572:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d574:	46c0      	nop			@ (mov r8, r8)
 800d576:	46bd      	mov	sp, r7
 800d578:	b002      	add	sp, #8
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	40021000 	.word	0x40021000
 800d580:	40000400 	.word	0x40000400

0800d584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a06      	ldr	r2, [pc, #24]	@ (800d5ac <HAL_TIM_Base_MspInit+0x28>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d105      	bne.n	800d5a2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d596:	4b06      	ldr	r3, [pc, #24]	@ (800d5b0 <HAL_TIM_Base_MspInit+0x2c>)
 800d598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d59a:	4b05      	ldr	r3, [pc, #20]	@ (800d5b0 <HAL_TIM_Base_MspInit+0x2c>)
 800d59c:	2110      	movs	r1, #16
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d5a2:	46c0      	nop			@ (mov r8, r8)
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	b002      	add	sp, #8
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	46c0      	nop			@ (mov r8, r8)
 800d5ac:	40001000 	.word	0x40001000
 800d5b0:	40021000 	.word	0x40021000

0800d5b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d5b4:	b590      	push	{r4, r7, lr}
 800d5b6:	b08b      	sub	sp, #44	@ 0x2c
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5bc:	2414      	movs	r4, #20
 800d5be:	193b      	adds	r3, r7, r4
 800d5c0:	0018      	movs	r0, r3
 800d5c2:	2314      	movs	r3, #20
 800d5c4:	001a      	movs	r2, r3
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	f012 f932 	bl	801f830 <memset>
  if(timHandle->Instance==TIM2)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	2380      	movs	r3, #128	@ 0x80
 800d5d2:	05db      	lsls	r3, r3, #23
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d123      	bne.n	800d620 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5d8:	4b27      	ldr	r3, [pc, #156]	@ (800d678 <HAL_TIM_MspPostInit+0xc4>)
 800d5da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5dc:	4b26      	ldr	r3, [pc, #152]	@ (800d678 <HAL_TIM_MspPostInit+0xc4>)
 800d5de:	2101      	movs	r1, #1
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d5e4:	4b24      	ldr	r3, [pc, #144]	@ (800d678 <HAL_TIM_MspPostInit+0xc4>)
 800d5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	613b      	str	r3, [r7, #16]
 800d5ee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d5f0:	0021      	movs	r1, r4
 800d5f2:	187b      	adds	r3, r7, r1
 800d5f4:	220d      	movs	r2, #13
 800d5f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5f8:	187b      	adds	r3, r7, r1
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5fe:	187b      	adds	r3, r7, r1
 800d600:	2200      	movs	r2, #0
 800d602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d604:	187b      	adds	r3, r7, r1
 800d606:	2200      	movs	r2, #0
 800d608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d60a:	187b      	adds	r3, r7, r1
 800d60c:	2202      	movs	r2, #2
 800d60e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d610:	187a      	adds	r2, r7, r1
 800d612:	23a0      	movs	r3, #160	@ 0xa0
 800d614:	05db      	lsls	r3, r3, #23
 800d616:	0011      	movs	r1, r2
 800d618:	0018      	movs	r0, r3
 800d61a:	f001 ffa7 	bl	800f56c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d61e:	e027      	b.n	800d670 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a15      	ldr	r2, [pc, #84]	@ (800d67c <HAL_TIM_MspPostInit+0xc8>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d122      	bne.n	800d670 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d62a:	4b13      	ldr	r3, [pc, #76]	@ (800d678 <HAL_TIM_MspPostInit+0xc4>)
 800d62c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d62e:	4b12      	ldr	r3, [pc, #72]	@ (800d678 <HAL_TIM_MspPostInit+0xc4>)
 800d630:	2104      	movs	r1, #4
 800d632:	430a      	orrs	r2, r1
 800d634:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d636:	4b10      	ldr	r3, [pc, #64]	@ (800d678 <HAL_TIM_MspPostInit+0xc4>)
 800d638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d63a:	2204      	movs	r2, #4
 800d63c:	4013      	ands	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d642:	2114      	movs	r1, #20
 800d644:	187b      	adds	r3, r7, r1
 800d646:	22e0      	movs	r2, #224	@ 0xe0
 800d648:	0052      	lsls	r2, r2, #1
 800d64a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d64c:	187b      	adds	r3, r7, r1
 800d64e:	2202      	movs	r2, #2
 800d650:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d652:	187b      	adds	r3, r7, r1
 800d654:	2200      	movs	r2, #0
 800d656:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d658:	187b      	adds	r3, r7, r1
 800d65a:	2200      	movs	r2, #0
 800d65c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d65e:	187b      	adds	r3, r7, r1
 800d660:	2202      	movs	r2, #2
 800d662:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d664:	187b      	adds	r3, r7, r1
 800d666:	4a06      	ldr	r2, [pc, #24]	@ (800d680 <HAL_TIM_MspPostInit+0xcc>)
 800d668:	0019      	movs	r1, r3
 800d66a:	0010      	movs	r0, r2
 800d66c:	f001 ff7e 	bl	800f56c <HAL_GPIO_Init>
}
 800d670:	46c0      	nop			@ (mov r8, r8)
 800d672:	46bd      	mov	sp, r7
 800d674:	b00b      	add	sp, #44	@ 0x2c
 800d676:	bd90      	pop	{r4, r7, pc}
 800d678:	40021000 	.word	0x40021000
 800d67c:	40000400 	.word	0x40000400
 800d680:	50000800 	.word	0x50000800

0800d684 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d688:	4b17      	ldr	r3, [pc, #92]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d68a:	4a18      	ldr	r2, [pc, #96]	@ (800d6ec <MX_LPUART1_UART_Init+0x68>)
 800d68c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d68e:	4b16      	ldr	r3, [pc, #88]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d690:	22e1      	movs	r2, #225	@ 0xe1
 800d692:	0252      	lsls	r2, r2, #9
 800d694:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d696:	4b14      	ldr	r3, [pc, #80]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d698:	2200      	movs	r2, #0
 800d69a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d69c:	4b12      	ldr	r3, [pc, #72]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d6a2:	4b11      	ldr	r3, [pc, #68]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d6a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6aa:	220c      	movs	r2, #12
 800d6ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6bc:	2218      	movs	r2, #24
 800d6be:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d6c0:	4b09      	ldr	r3, [pc, #36]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6c2:	2280      	movs	r2, #128	@ 0x80
 800d6c4:	0212      	lsls	r2, r2, #8
 800d6c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d6c8:	4b07      	ldr	r3, [pc, #28]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6ca:	2280      	movs	r2, #128	@ 0x80
 800d6cc:	0152      	lsls	r2, r2, #5
 800d6ce:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d6d0:	4b05      	ldr	r3, [pc, #20]	@ (800d6e8 <MX_LPUART1_UART_Init+0x64>)
 800d6d2:	0018      	movs	r0, r3
 800d6d4:	f009 f81a 	bl	801670c <HAL_UART_Init>
 800d6d8:	1e03      	subs	r3, r0, #0
 800d6da:	d001      	beq.n	800d6e0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d6dc:	f7fa fca2 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d6e0:	46c0      	nop			@ (mov r8, r8)
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	46c0      	nop			@ (mov r8, r8)
 800d6e8:	20002220 	.word	0x20002220
 800d6ec:	40004800 	.word	0x40004800

0800d6f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d6f4:	4b16      	ldr	r3, [pc, #88]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d6f6:	4a17      	ldr	r2, [pc, #92]	@ (800d754 <MX_USART1_UART_Init+0x64>)
 800d6f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d6fa:	4b15      	ldr	r3, [pc, #84]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d6fc:	22e1      	movs	r2, #225	@ 0xe1
 800d6fe:	0252      	lsls	r2, r2, #9
 800d700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d702:	4b13      	ldr	r3, [pc, #76]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d704:	2200      	movs	r2, #0
 800d706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d708:	4b11      	ldr	r3, [pc, #68]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d70e:	4b10      	ldr	r3, [pc, #64]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d710:	2200      	movs	r2, #0
 800d712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d714:	4b0e      	ldr	r3, [pc, #56]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d716:	220c      	movs	r2, #12
 800d718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d71a:	4b0d      	ldr	r3, [pc, #52]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d720:	4b0b      	ldr	r3, [pc, #44]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d722:	2200      	movs	r2, #0
 800d724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d726:	4b0a      	ldr	r3, [pc, #40]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d728:	2200      	movs	r2, #0
 800d72a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d72c:	4b08      	ldr	r3, [pc, #32]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d72e:	2208      	movs	r2, #8
 800d730:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d732:	4b07      	ldr	r3, [pc, #28]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d734:	2280      	movs	r2, #128	@ 0x80
 800d736:	0212      	lsls	r2, r2, #8
 800d738:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d73a:	4b05      	ldr	r3, [pc, #20]	@ (800d750 <MX_USART1_UART_Init+0x60>)
 800d73c:	0018      	movs	r0, r3
 800d73e:	f008 ffe5 	bl	801670c <HAL_UART_Init>
 800d742:	1e03      	subs	r3, r0, #0
 800d744:	d001      	beq.n	800d74a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d746:	f7fa fc6d 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d74a:	46c0      	nop			@ (mov r8, r8)
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	200022d8 	.word	0x200022d8
 800d754:	40013800 	.word	0x40013800

0800d758 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d75c:	4b14      	ldr	r3, [pc, #80]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d75e:	4a15      	ldr	r2, [pc, #84]	@ (800d7b4 <MX_USART4_UART_Init+0x5c>)
 800d760:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d762:	4b13      	ldr	r3, [pc, #76]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d764:	22e1      	movs	r2, #225	@ 0xe1
 800d766:	0252      	lsls	r2, r2, #9
 800d768:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d76a:	4b11      	ldr	r3, [pc, #68]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d770:	4b0f      	ldr	r3, [pc, #60]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d772:	2200      	movs	r2, #0
 800d774:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d776:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d778:	2200      	movs	r2, #0
 800d77a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d77c:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d77e:	220c      	movs	r2, #12
 800d780:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d782:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d784:	2200      	movs	r2, #0
 800d786:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d788:	4b09      	ldr	r3, [pc, #36]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d78e:	4b08      	ldr	r3, [pc, #32]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d790:	2200      	movs	r2, #0
 800d792:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d794:	4b06      	ldr	r3, [pc, #24]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d796:	2200      	movs	r2, #0
 800d798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d79a:	4b05      	ldr	r3, [pc, #20]	@ (800d7b0 <MX_USART4_UART_Init+0x58>)
 800d79c:	0018      	movs	r0, r3
 800d79e:	f008 ffb5 	bl	801670c <HAL_UART_Init>
 800d7a2:	1e03      	subs	r3, r0, #0
 800d7a4:	d001      	beq.n	800d7aa <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d7a6:	f7fa fc3d 	bl	8008024 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d7aa:	46c0      	nop			@ (mov r8, r8)
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20002390 	.word	0x20002390
 800d7b4:	40004c00 	.word	0x40004c00

0800d7b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d7b8:	b590      	push	{r4, r7, lr}
 800d7ba:	b08d      	sub	sp, #52	@ 0x34
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7c0:	241c      	movs	r4, #28
 800d7c2:	193b      	adds	r3, r7, r4
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	2314      	movs	r3, #20
 800d7c8:	001a      	movs	r2, r3
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	f012 f830 	bl	801f830 <memset>
  if(uartHandle->Instance==LPUART1)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a8b      	ldr	r2, [pc, #556]	@ (800da04 <HAL_UART_MspInit+0x24c>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d129      	bne.n	800d82e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d7da:	4b8b      	ldr	r3, [pc, #556]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d7dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7de:	4b8a      	ldr	r3, [pc, #552]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d7e0:	2180      	movs	r1, #128	@ 0x80
 800d7e2:	02c9      	lsls	r1, r1, #11
 800d7e4:	430a      	orrs	r2, r1
 800d7e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d7e8:	4b87      	ldr	r3, [pc, #540]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ec:	4b86      	ldr	r3, [pc, #536]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d7ee:	2104      	movs	r1, #4
 800d7f0:	430a      	orrs	r2, r1
 800d7f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d7f4:	4b84      	ldr	r3, [pc, #528]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f8:	2204      	movs	r2, #4
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	61bb      	str	r3, [r7, #24]
 800d7fe:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d800:	0021      	movs	r1, r4
 800d802:	187b      	adds	r3, r7, r1
 800d804:	2203      	movs	r2, #3
 800d806:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d808:	187b      	adds	r3, r7, r1
 800d80a:	2202      	movs	r2, #2
 800d80c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d80e:	187b      	adds	r3, r7, r1
 800d810:	2200      	movs	r2, #0
 800d812:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d814:	187b      	adds	r3, r7, r1
 800d816:	2203      	movs	r2, #3
 800d818:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d81a:	187b      	adds	r3, r7, r1
 800d81c:	2206      	movs	r2, #6
 800d81e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d820:	187b      	adds	r3, r7, r1
 800d822:	4a7a      	ldr	r2, [pc, #488]	@ (800da0c <HAL_UART_MspInit+0x254>)
 800d824:	0019      	movs	r1, r3
 800d826:	0010      	movs	r0, r2
 800d828:	f001 fea0 	bl	800f56c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d82c:	e0e5      	b.n	800d9fa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a77      	ldr	r2, [pc, #476]	@ (800da10 <HAL_UART_MspInit+0x258>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d133      	bne.n	800d8a0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d838:	4b73      	ldr	r3, [pc, #460]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d83a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d83c:	4b72      	ldr	r3, [pc, #456]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d83e:	2180      	movs	r1, #128	@ 0x80
 800d840:	01c9      	lsls	r1, r1, #7
 800d842:	430a      	orrs	r2, r1
 800d844:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d846:	4b70      	ldr	r3, [pc, #448]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d84a:	4b6f      	ldr	r3, [pc, #444]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d84c:	2101      	movs	r1, #1
 800d84e:	430a      	orrs	r2, r1
 800d850:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d852:	4b6d      	ldr	r3, [pc, #436]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d856:	2201      	movs	r2, #1
 800d858:	4013      	ands	r3, r2
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d85e:	211c      	movs	r1, #28
 800d860:	187b      	adds	r3, r7, r1
 800d862:	22c0      	movs	r2, #192	@ 0xc0
 800d864:	00d2      	lsls	r2, r2, #3
 800d866:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d868:	187b      	adds	r3, r7, r1
 800d86a:	2202      	movs	r2, #2
 800d86c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d86e:	187b      	adds	r3, r7, r1
 800d870:	2200      	movs	r2, #0
 800d872:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d874:	187b      	adds	r3, r7, r1
 800d876:	2203      	movs	r2, #3
 800d878:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d87a:	187b      	adds	r3, r7, r1
 800d87c:	2204      	movs	r2, #4
 800d87e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d880:	187a      	adds	r2, r7, r1
 800d882:	23a0      	movs	r3, #160	@ 0xa0
 800d884:	05db      	lsls	r3, r3, #23
 800d886:	0011      	movs	r1, r2
 800d888:	0018      	movs	r0, r3
 800d88a:	f001 fe6f 	bl	800f56c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d88e:	2200      	movs	r2, #0
 800d890:	2100      	movs	r1, #0
 800d892:	201b      	movs	r0, #27
 800d894:	f001 fa18 	bl	800ecc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d898:	201b      	movs	r0, #27
 800d89a:	f001 fa2a 	bl	800ecf2 <HAL_NVIC_EnableIRQ>
}
 800d89e:	e0ac      	b.n	800d9fa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a5b      	ldr	r2, [pc, #364]	@ (800da14 <HAL_UART_MspInit+0x25c>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d000      	beq.n	800d8ac <HAL_UART_MspInit+0xf4>
 800d8aa:	e0a6      	b.n	800d9fa <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d8ac:	4b56      	ldr	r3, [pc, #344]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8b0:	4b55      	ldr	r3, [pc, #340]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8b2:	2180      	movs	r1, #128	@ 0x80
 800d8b4:	0309      	lsls	r1, r1, #12
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8ba:	4b53      	ldr	r3, [pc, #332]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8be:	4b52      	ldr	r3, [pc, #328]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	430a      	orrs	r2, r1
 800d8c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d8c6:	4b50      	ldr	r3, [pc, #320]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	613b      	str	r3, [r7, #16]
 800d8d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d8d2:	4b4d      	ldr	r3, [pc, #308]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d6:	4b4c      	ldr	r3, [pc, #304]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8d8:	2104      	movs	r1, #4
 800d8da:	430a      	orrs	r2, r1
 800d8dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d8de:	4b4a      	ldr	r3, [pc, #296]	@ (800da08 <HAL_UART_MspInit+0x250>)
 800d8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e2:	2204      	movs	r2, #4
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d8ea:	241c      	movs	r4, #28
 800d8ec:	193b      	adds	r3, r7, r4
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8f2:	193b      	adds	r3, r7, r4
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8f8:	193b      	adds	r3, r7, r4
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8fe:	193b      	adds	r3, r7, r4
 800d900:	2203      	movs	r2, #3
 800d902:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d904:	193b      	adds	r3, r7, r4
 800d906:	2206      	movs	r2, #6
 800d908:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d90a:	193a      	adds	r2, r7, r4
 800d90c:	23a0      	movs	r3, #160	@ 0xa0
 800d90e:	05db      	lsls	r3, r3, #23
 800d910:	0011      	movs	r1, r2
 800d912:	0018      	movs	r0, r3
 800d914:	f001 fe2a 	bl	800f56c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d918:	0021      	movs	r1, r4
 800d91a:	187b      	adds	r3, r7, r1
 800d91c:	2280      	movs	r2, #128	@ 0x80
 800d91e:	00d2      	lsls	r2, r2, #3
 800d920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d922:	187b      	adds	r3, r7, r1
 800d924:	2202      	movs	r2, #2
 800d926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d928:	187b      	adds	r3, r7, r1
 800d92a:	2200      	movs	r2, #0
 800d92c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d92e:	187b      	adds	r3, r7, r1
 800d930:	2203      	movs	r2, #3
 800d932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d934:	187b      	adds	r3, r7, r1
 800d936:	2206      	movs	r2, #6
 800d938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d93a:	187b      	adds	r3, r7, r1
 800d93c:	4a33      	ldr	r2, [pc, #204]	@ (800da0c <HAL_UART_MspInit+0x254>)
 800d93e:	0019      	movs	r1, r3
 800d940:	0010      	movs	r0, r2
 800d942:	f001 fe13 	bl	800f56c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d946:	4b34      	ldr	r3, [pc, #208]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d948:	4a34      	ldr	r2, [pc, #208]	@ (800da1c <HAL_UART_MspInit+0x264>)
 800d94a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d94c:	4b32      	ldr	r3, [pc, #200]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d94e:	220c      	movs	r2, #12
 800d950:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d952:	4b31      	ldr	r3, [pc, #196]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d954:	2200      	movs	r2, #0
 800d956:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d958:	4b2f      	ldr	r3, [pc, #188]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d95e:	4b2e      	ldr	r3, [pc, #184]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d960:	2280      	movs	r2, #128	@ 0x80
 800d962:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d964:	4b2c      	ldr	r3, [pc, #176]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d966:	2200      	movs	r2, #0
 800d968:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d96a:	4b2b      	ldr	r3, [pc, #172]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d970:	4b29      	ldr	r3, [pc, #164]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d972:	2220      	movs	r2, #32
 800d974:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d976:	4b28      	ldr	r3, [pc, #160]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d978:	2200      	movs	r2, #0
 800d97a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d97c:	4b26      	ldr	r3, [pc, #152]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d97e:	0018      	movs	r0, r3
 800d980:	f001 f9d8 	bl	800ed34 <HAL_DMA_Init>
 800d984:	1e03      	subs	r3, r0, #0
 800d986:	d001      	beq.n	800d98c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d988:	f7fa fb4c 	bl	8008024 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a22      	ldr	r2, [pc, #136]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d990:	675a      	str	r2, [r3, #116]	@ 0x74
 800d992:	4b21      	ldr	r3, [pc, #132]	@ (800da18 <HAL_UART_MspInit+0x260>)
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d998:	4b21      	ldr	r3, [pc, #132]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d99a:	4a22      	ldr	r2, [pc, #136]	@ (800da24 <HAL_UART_MspInit+0x26c>)
 800d99c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d99e:	4b20      	ldr	r3, [pc, #128]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9a0:	220c      	movs	r2, #12
 800d9a2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d9a4:	4b1e      	ldr	r3, [pc, #120]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9a6:	2210      	movs	r2, #16
 800d9a8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d9aa:	4b1d      	ldr	r3, [pc, #116]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d9b0:	4b1b      	ldr	r3, [pc, #108]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9b2:	2280      	movs	r2, #128	@ 0x80
 800d9b4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d9b6:	4b1a      	ldr	r3, [pc, #104]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d9bc:	4b18      	ldr	r3, [pc, #96]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d9c2:	4b17      	ldr	r3, [pc, #92]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d9c8:	4b15      	ldr	r3, [pc, #84]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d9ce:	4b14      	ldr	r3, [pc, #80]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	f001 f9af 	bl	800ed34 <HAL_DMA_Init>
 800d9d6:	1e03      	subs	r3, r0, #0
 800d9d8:	d001      	beq.n	800d9de <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d9da:	f7fa fb23 	bl	8008024 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4a0f      	ldr	r2, [pc, #60]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9e2:	671a      	str	r2, [r3, #112]	@ 0x70
 800d9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800da20 <HAL_UART_MspInit+0x268>)
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	200e      	movs	r0, #14
 800d9f0:	f001 f96a 	bl	800ecc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d9f4:	200e      	movs	r0, #14
 800d9f6:	f001 f97c 	bl	800ecf2 <HAL_NVIC_EnableIRQ>
}
 800d9fa:	46c0      	nop			@ (mov r8, r8)
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	b00d      	add	sp, #52	@ 0x34
 800da00:	bd90      	pop	{r4, r7, pc}
 800da02:	46c0      	nop			@ (mov r8, r8)
 800da04:	40004800 	.word	0x40004800
 800da08:	40021000 	.word	0x40021000
 800da0c:	50000800 	.word	0x50000800
 800da10:	40013800 	.word	0x40013800
 800da14:	40004c00 	.word	0x40004c00
 800da18:	20002448 	.word	0x20002448
 800da1c:	4002006c 	.word	0x4002006c
 800da20:	20002490 	.word	0x20002490
 800da24:	40020080 	.word	0x40020080

0800da28 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800da30:	f000 fca6 	bl	800e380 <HAL_GetTick>
 800da34:	0003      	movs	r3, r0
 800da36:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800da38:	4b1c      	ldr	r3, [pc, #112]	@ (800daac <TimestampIsReached+0x84>)
 800da3a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800da3c:	697a      	ldr	r2, [r7, #20]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	429a      	cmp	r2, r3
 800da42:	d307      	bcc.n	800da54 <TimestampIsReached+0x2c>
 800da44:	697a      	ldr	r2, [r7, #20]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	693a      	ldr	r2, [r7, #16]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d901      	bls.n	800da54 <TimestampIsReached+0x2c>
 800da50:	2201      	movs	r2, #1
 800da52:	e000      	b.n	800da56 <TimestampIsReached+0x2e>
 800da54:	2200      	movs	r2, #0
 800da56:	230f      	movs	r3, #15
 800da58:	18fb      	adds	r3, r7, r3
 800da5a:	701a      	strb	r2, [r3, #0]
 800da5c:	781a      	ldrb	r2, [r3, #0]
 800da5e:	2101      	movs	r1, #1
 800da60:	400a      	ands	r2, r1
 800da62:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800da64:	697a      	ldr	r2, [r7, #20]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d207      	bcs.n	800da7c <TimestampIsReached+0x54>
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	429a      	cmp	r2, r3
 800da76:	d201      	bcs.n	800da7c <TimestampIsReached+0x54>
 800da78:	2201      	movs	r2, #1
 800da7a:	e000      	b.n	800da7e <TimestampIsReached+0x56>
 800da7c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800da7e:	200e      	movs	r0, #14
 800da80:	183b      	adds	r3, r7, r0
 800da82:	701a      	strb	r2, [r3, #0]
 800da84:	781a      	ldrb	r2, [r3, #0]
 800da86:	2101      	movs	r1, #1
 800da88:	400a      	ands	r2, r1
 800da8a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800da8c:	230f      	movs	r3, #15
 800da8e:	18fb      	adds	r3, r7, r3
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d103      	bne.n	800da9e <TimestampIsReached+0x76>
 800da96:	183b      	adds	r3, r7, r0
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d001      	beq.n	800daa2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800da9e:	2301      	movs	r3, #1
 800daa0:	e000      	b.n	800daa4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	0018      	movs	r0, r3
 800daa6:	46bd      	mov	sp, r7
 800daa8:	b006      	add	sp, #24
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	7fffffff 	.word	0x7fffffff

0800dab0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800dab8:	f000 fc62 	bl	800e380 <HAL_GetTick>
 800dabc:	0002      	movs	r2, r0
 800dabe:	4904      	ldr	r1, [pc, #16]	@ (800dad0 <AddTimestamp+0x20>)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	0018      	movs	r0, r3
 800dac4:	f011 fd70 	bl	801f5a8 <siprintf>
}
 800dac8:	46c0      	nop			@ (mov r8, r8)
 800daca:	46bd      	mov	sp, r7
 800dacc:	b002      	add	sp, #8
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	0802428c 	.word	0x0802428c

0800dad4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800dad4:	b40c      	push	{r2, r3}
 800dad6:	b5b0      	push	{r4, r5, r7, lr}
 800dad8:	b0a4      	sub	sp, #144	@ 0x90
 800dada:	af00      	add	r7, sp, #0
 800dadc:	0002      	movs	r2, r0
 800dade:	6039      	str	r1, [r7, #0]
 800dae0:	1dfb      	adds	r3, r7, #7
 800dae2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800dae4:	4b23      	ldr	r3, [pc, #140]	@ (800db74 <CreateLine+0xa0>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	1dfa      	adds	r2, r7, #7
 800daea:	7812      	ldrb	r2, [r2, #0]
 800daec:	429a      	cmp	r2, r3
 800daee:	d839      	bhi.n	800db64 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	4921      	ldr	r1, [pc, #132]	@ (800db78 <CreateLine+0xa4>)
 800daf4:	240c      	movs	r4, #12
 800daf6:	193b      	adds	r3, r7, r4
 800daf8:	0018      	movs	r0, r3
 800dafa:	f011 fd55 	bl	801f5a8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800dafe:	4b1d      	ldr	r3, [pc, #116]	@ (800db74 <CreateLine+0xa0>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d909      	bls.n	800db1a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800db06:	193b      	adds	r3, r7, r4
 800db08:	0018      	movs	r0, r3
 800db0a:	f7f2 fb2f 	bl	800016c <strlen>
 800db0e:	0002      	movs	r2, r0
 800db10:	193b      	adds	r3, r7, r4
 800db12:	189b      	adds	r3, r3, r2
 800db14:	0018      	movs	r0, r3
 800db16:	f7ff ffcb 	bl	800dab0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800db1a:	240c      	movs	r4, #12
 800db1c:	193b      	adds	r3, r7, r4
 800db1e:	0018      	movs	r0, r3
 800db20:	f7f2 fb24 	bl	800016c <strlen>
 800db24:	0003      	movs	r3, r0
 800db26:	218c      	movs	r1, #140	@ 0x8c
 800db28:	187a      	adds	r2, r7, r1
 800db2a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800db2c:	239c      	movs	r3, #156	@ 0x9c
 800db2e:	2508      	movs	r5, #8
 800db30:	195b      	adds	r3, r3, r5
 800db32:	19db      	adds	r3, r3, r7
 800db34:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800db36:	193a      	adds	r2, r7, r4
 800db38:	187b      	adds	r3, r7, r1
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	18d0      	adds	r0, r2, r3
 800db3e:	187b      	adds	r3, r7, r1
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2280      	movs	r2, #128	@ 0x80
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	0019      	movs	r1, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	2298      	movs	r2, #152	@ 0x98
 800db4c:	1952      	adds	r2, r2, r5
 800db4e:	19d2      	adds	r2, r2, r7
 800db50:	6812      	ldr	r2, [r2, #0]
 800db52:	f011 fdc1 	bl	801f6d8 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800db56:	193a      	adds	r2, r7, r4
 800db58:	4b08      	ldr	r3, [pc, #32]	@ (800db7c <CreateLine+0xa8>)
 800db5a:	0011      	movs	r1, r2
 800db5c:	0018      	movs	r0, r3
 800db5e:	f011 fcb3 	bl	801f4c8 <iprintf>
 800db62:	e000      	b.n	800db66 <CreateLine+0x92>
    return;
 800db64:	46c0      	nop			@ (mov r8, r8)
}
 800db66:	46bd      	mov	sp, r7
 800db68:	b024      	add	sp, #144	@ 0x90
 800db6a:	bcb0      	pop	{r4, r5, r7}
 800db6c:	bc08      	pop	{r3}
 800db6e:	b002      	add	sp, #8
 800db70:	4718      	bx	r3
 800db72:	46c0      	nop			@ (mov r8, r8)
 800db74:	200000cc 	.word	0x200000cc
 800db78:	08024298 	.word	0x08024298
 800db7c:	0802429c 	.word	0x0802429c

0800db80 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	b29a      	uxth	r2, r3
 800db90:	68b9      	ldr	r1, [r7, #8]
 800db92:	4804      	ldr	r0, [pc, #16]	@ (800dba4 <_write+0x24>)
 800db94:	2364      	movs	r3, #100	@ 0x64
 800db96:	f008 fe1f 	bl	80167d8 <HAL_UART_Transmit>
  return count;
 800db9a:	687b      	ldr	r3, [r7, #4]
}
 800db9c:	0018      	movs	r0, r3
 800db9e:	46bd      	mov	sp, r7
 800dba0:	b004      	add	sp, #16
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	200022d8 	.word	0x200022d8

0800dba8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	0002      	movs	r2, r0
 800dbb0:	1dfb      	adds	r3, r7, #7
 800dbb2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800dbb4:	4b03      	ldr	r3, [pc, #12]	@ (800dbc4 <SetVerboseLevel+0x1c>)
 800dbb6:	1dfa      	adds	r2, r7, #7
 800dbb8:	7812      	ldrb	r2, [r2, #0]
 800dbba:	701a      	strb	r2, [r3, #0]
}
 800dbbc:	46c0      	nop			@ (mov r8, r8)
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	b002      	add	sp, #8
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	200000cc 	.word	0x200000cc

0800dbc8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800dbcc:	4b02      	ldr	r3, [pc, #8]	@ (800dbd8 <GetVerboseLevel+0x10>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	0018      	movs	r0, r3
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	46c0      	nop			@ (mov r8, r8)
 800dbd8:	200000cc 	.word	0x200000cc

0800dbdc <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800dbe2:	4a0f      	ldr	r2, [pc, #60]	@ (800dc20 <BinaryReleaseInfo+0x44>)
 800dbe4:	4b0f      	ldr	r3, [pc, #60]	@ (800dc24 <BinaryReleaseInfo+0x48>)
 800dbe6:	0019      	movs	r1, r3
 800dbe8:	2002      	movs	r0, #2
 800dbea:	f7ff ff73 	bl	800dad4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800dbee:	480e      	ldr	r0, [pc, #56]	@ (800dc28 <BinaryReleaseInfo+0x4c>)
 800dbf0:	4a0e      	ldr	r2, [pc, #56]	@ (800dc2c <BinaryReleaseInfo+0x50>)
 800dbf2:	490c      	ldr	r1, [pc, #48]	@ (800dc24 <BinaryReleaseInfo+0x48>)
 800dbf4:	4b0e      	ldr	r3, [pc, #56]	@ (800dc30 <BinaryReleaseInfo+0x54>)
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	0003      	movs	r3, r0
 800dbfa:	2002      	movs	r0, #2
 800dbfc:	f7ff ff6a 	bl	800dad4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800dc00:	4b0c      	ldr	r3, [pc, #48]	@ (800dc34 <BinaryReleaseInfo+0x58>)
 800dc02:	4a0d      	ldr	r2, [pc, #52]	@ (800dc38 <BinaryReleaseInfo+0x5c>)
 800dc04:	4907      	ldr	r1, [pc, #28]	@ (800dc24 <BinaryReleaseInfo+0x48>)
 800dc06:	2002      	movs	r0, #2
 800dc08:	f7ff ff64 	bl	800dad4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800dc0c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc3c <BinaryReleaseInfo+0x60>)
 800dc0e:	4a0c      	ldr	r2, [pc, #48]	@ (800dc40 <BinaryReleaseInfo+0x64>)
 800dc10:	4904      	ldr	r1, [pc, #16]	@ (800dc24 <BinaryReleaseInfo+0x48>)
 800dc12:	2002      	movs	r0, #2
 800dc14:	f7ff ff5e 	bl	800dad4 <CreateLine>
}
 800dc18:	46c0      	nop			@ (mov r8, r8)
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	46c0      	nop			@ (mov r8, r8)
 800dc20:	080242a4 	.word	0x080242a4
 800dc24:	080242d0 	.word	0x080242d0
 800dc28:	080242d4 	.word	0x080242d4
 800dc2c:	080242e0 	.word	0x080242e0
 800dc30:	080242f4 	.word	0x080242f4
 800dc34:	08024300 	.word	0x08024300
 800dc38:	0802430c 	.word	0x0802430c
 800dc3c:	08024314 	.word	0x08024314
 800dc40:	0802431c 	.word	0x0802431c

0800dc44 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	68f9      	ldr	r1, [r7, #12]
 800dc56:	4803      	ldr	r0, [pc, #12]	@ (800dc64 <errorHandler+0x20>)
 800dc58:	f011 fc36 	bl	801f4c8 <iprintf>
//    while (true)
//    {
//    }
}
 800dc5c:	46c0      	nop			@ (mov r8, r8)
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	b004      	add	sp, #16
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	08024334 	.word	0x08024334

0800dc68 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dc68:	b590      	push	{r4, r7, lr}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6039      	str	r1, [r7, #0]
 800dc70:	0011      	movs	r1, r2
 800dc72:	1dfb      	adds	r3, r7, #7
 800dc74:	1c02      	adds	r2, r0, #0
 800dc76:	701a      	strb	r2, [r3, #0]
 800dc78:	1dbb      	adds	r3, r7, #6
 800dc7a:	1c0a      	adds	r2, r1, #0
 800dc7c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800dc7e:	4b0a      	ldr	r3, [pc, #40]	@ (800dca8 <ReadRegister+0x40>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00a      	beq.n	800dc9c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800dc86:	4b08      	ldr	r3, [pc, #32]	@ (800dca8 <ReadRegister+0x40>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	1dba      	adds	r2, r7, #6
 800dc8c:	7814      	ldrb	r4, [r2, #0]
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	1dfa      	adds	r2, r7, #7
 800dc92:	7810      	ldrb	r0, [r2, #0]
 800dc94:	0022      	movs	r2, r4
 800dc96:	4798      	blx	r3
 800dc98:	0003      	movs	r3, r0
 800dc9a:	e000      	b.n	800dc9e <ReadRegister+0x36>
	}
	return false;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	0018      	movs	r0, r3
 800dca0:	46bd      	mov	sp, r7
 800dca2:	b003      	add	sp, #12
 800dca4:	bd90      	pop	{r4, r7, pc}
 800dca6:	46c0      	nop			@ (mov r8, r8)
 800dca8:	200024e0 	.word	0x200024e0

0800dcac <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dcac:	b590      	push	{r4, r7, lr}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6039      	str	r1, [r7, #0]
 800dcb4:	0011      	movs	r1, r2
 800dcb6:	1dfb      	adds	r3, r7, #7
 800dcb8:	1c02      	adds	r2, r0, #0
 800dcba:	701a      	strb	r2, [r3, #0]
 800dcbc:	1dbb      	adds	r3, r7, #6
 800dcbe:	1c0a      	adds	r2, r1, #0
 800dcc0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800dcc2:	4b0a      	ldr	r3, [pc, #40]	@ (800dcec <WriteRegister+0x40>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00a      	beq.n	800dce0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800dcca:	4b08      	ldr	r3, [pc, #32]	@ (800dcec <WriteRegister+0x40>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	1dba      	adds	r2, r7, #6
 800dcd0:	7814      	ldrb	r4, [r2, #0]
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	1dfa      	adds	r2, r7, #7
 800dcd6:	7810      	ldrb	r0, [r2, #0]
 800dcd8:	0022      	movs	r2, r4
 800dcda:	4798      	blx	r3
 800dcdc:	0003      	movs	r3, r0
 800dcde:	e000      	b.n	800dce2 <WriteRegister+0x36>
  }
  return false;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	0018      	movs	r0, r3
 800dce4:	46bd      	mov	sp, r7
 800dce6:	b003      	add	sp, #12
 800dce8:	bd90      	pop	{r4, r7, pc}
 800dcea:	46c0      	nop			@ (mov r8, r8)
 800dcec:	200024e4 	.word	0x200024e4

0800dcf0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	000a      	movs	r2, r1
 800dcfa:	1cfb      	adds	r3, r7, #3
 800dcfc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800dcfe:	230f      	movs	r3, #15
 800dd00:	18fb      	adds	r3, r7, r3
 800dd02:	22ff      	movs	r2, #255	@ 0xff
 800dd04:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800dd06:	230e      	movs	r3, #14
 800dd08:	18fb      	adds	r3, r7, r3
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	701a      	strb	r2, [r3, #0]
 800dd0e:	e037      	b.n	800dd80 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800dd10:	230e      	movs	r3, #14
 800dd12:	18fb      	adds	r3, r7, r3
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	18d3      	adds	r3, r2, r3
 800dd1a:	7819      	ldrb	r1, [r3, #0]
 800dd1c:	220f      	movs	r2, #15
 800dd1e:	18bb      	adds	r3, r7, r2
 800dd20:	18ba      	adds	r2, r7, r2
 800dd22:	7812      	ldrb	r2, [r2, #0]
 800dd24:	404a      	eors	r2, r1
 800dd26:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800dd28:	230d      	movs	r3, #13
 800dd2a:	18fb      	adds	r3, r7, r3
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	701a      	strb	r2, [r3, #0]
 800dd30:	e01b      	b.n	800dd6a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800dd32:	210f      	movs	r1, #15
 800dd34:	187b      	adds	r3, r7, r1
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	b25b      	sxtb	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	da09      	bge.n	800dd52 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800dd3e:	187b      	adds	r3, r7, r1
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	005b      	lsls	r3, r3, #1
 800dd44:	b25b      	sxtb	r3, r3
 800dd46:	2231      	movs	r2, #49	@ 0x31
 800dd48:	4053      	eors	r3, r2
 800dd4a:	b25a      	sxtb	r2, r3
 800dd4c:	187b      	adds	r3, r7, r1
 800dd4e:	701a      	strb	r2, [r3, #0]
 800dd50:	e005      	b.n	800dd5e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800dd52:	230f      	movs	r3, #15
 800dd54:	18fa      	adds	r2, r7, r3
 800dd56:	18fb      	adds	r3, r7, r3
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	18db      	adds	r3, r3, r3
 800dd5c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800dd5e:	210d      	movs	r1, #13
 800dd60:	187b      	adds	r3, r7, r1
 800dd62:	781a      	ldrb	r2, [r3, #0]
 800dd64:	187b      	adds	r3, r7, r1
 800dd66:	3201      	adds	r2, #1
 800dd68:	701a      	strb	r2, [r3, #0]
 800dd6a:	230d      	movs	r3, #13
 800dd6c:	18fb      	adds	r3, r7, r3
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b07      	cmp	r3, #7
 800dd72:	d9de      	bls.n	800dd32 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800dd74:	210e      	movs	r1, #14
 800dd76:	187b      	adds	r3, r7, r1
 800dd78:	781a      	ldrb	r2, [r3, #0]
 800dd7a:	187b      	adds	r3, r7, r1
 800dd7c:	3201      	adds	r2, #1
 800dd7e:	701a      	strb	r2, [r3, #0]
 800dd80:	230e      	movs	r3, #14
 800dd82:	18fa      	adds	r2, r7, r3
 800dd84:	1cfb      	adds	r3, r7, #3
 800dd86:	7812      	ldrb	r2, [r2, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d3c0      	bcc.n	800dd10 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800dd8e:	230f      	movs	r3, #15
 800dd90:	18fb      	adds	r3, r7, r3
 800dd92:	781b      	ldrb	r3, [r3, #0]
}
 800dd94:	0018      	movs	r0, r3
 800dd96:	46bd      	mov	sp, r7
 800dd98:	b004      	add	sp, #16
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800dda6:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd0 <HIDS_Init+0x34>)
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800ddac:	4b09      	ldr	r3, [pc, #36]	@ (800ddd4 <HIDS_Init+0x38>)
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800ddb2:	4b09      	ldr	r3, [pc, #36]	@ (800ddd8 <HIDS_Init+0x3c>)
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	f000 f840 	bl	800de3c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800ddbc:	4b07      	ldr	r3, [pc, #28]	@ (800dddc <HIDS_Init+0x40>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	f000 f82b 	bl	800de1c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800ddc6:	46c0      	nop			@ (mov r8, r8)
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	b002      	add	sp, #8
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	46c0      	nop			@ (mov r8, r8)
 800ddd0:	200024e0 	.word	0x200024e0
 800ddd4:	200024e4 	.word	0x200024e4
 800ddd8:	200000ce 	.word	0x200000ce
 800dddc:	200000cd 	.word	0x200000cd

0800dde0 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800dde0:	b580      	push	{r7, lr}
 800dde2:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800dde4:	f000 facc 	bl	800e380 <HAL_GetTick>
 800dde8:	0002      	movs	r2, r0
 800ddea:	4b08      	ldr	r3, [pc, #32]	@ (800de0c <HIDS_StartMeasurement+0x2c>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	18d2      	adds	r2, r2, r3
 800ddf0:	4b07      	ldr	r3, [pc, #28]	@ (800de10 <HIDS_StartMeasurement+0x30>)
 800ddf2:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800ddf4:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <HIDS_StartMeasurement+0x34>)
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	0019      	movs	r1, r3
 800ddfa:	2044      	movs	r0, #68	@ 0x44
 800ddfc:	f7ff ff56 	bl	800dcac <WriteRegister>
  MeasurementDone = false;
 800de00:	4b05      	ldr	r3, [pc, #20]	@ (800de18 <HIDS_StartMeasurement+0x38>)
 800de02:	2200      	movs	r2, #0
 800de04:	701a      	strb	r2, [r3, #0]
}
 800de06:	46c0      	nop			@ (mov r8, r8)
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	200000d4 	.word	0x200000d4
 800de10:	200000d0 	.word	0x200000d0
 800de14:	200000ce 	.word	0x200000ce
 800de18:	200024f6 	.word	0x200024f6

0800de1c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	0002      	movs	r2, r0
 800de24:	1dfb      	adds	r3, r7, #7
 800de26:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800de28:	4b03      	ldr	r3, [pc, #12]	@ (800de38 <HIDS_SetHeaterMode+0x1c>)
 800de2a:	1dfa      	adds	r2, r7, #7
 800de2c:	7812      	ldrb	r2, [r2, #0]
 800de2e:	701a      	strb	r2, [r3, #0]
}
 800de30:	46c0      	nop			@ (mov r8, r8)
 800de32:	46bd      	mov	sp, r7
 800de34:	b002      	add	sp, #8
 800de36:	bd80      	pop	{r7, pc}
 800de38:	200000cd 	.word	0x200000cd

0800de3c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	0002      	movs	r2, r0
 800de44:	1dfb      	adds	r3, r7, #7
 800de46:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800de48:	4b03      	ldr	r3, [pc, #12]	@ (800de58 <HIDS_SetMeasurementMode+0x1c>)
 800de4a:	1dfa      	adds	r2, r7, #7
 800de4c:	7812      	ldrb	r2, [r2, #0]
 800de4e:	701a      	strb	r2, [r3, #0]
}
 800de50:	46c0      	nop			@ (mov r8, r8)
 800de52:	46bd      	mov	sp, r7
 800de54:	b002      	add	sp, #8
 800de56:	bd80      	pop	{r7, pc}
 800de58:	200000ce 	.word	0x200000ce

0800de5c <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800de64:	f000 fa8c 	bl	800e380 <HAL_GetTick>
 800de68:	0002      	movs	r2, r0
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	18d2      	adds	r2, r2, r3
 800de6e:	4b03      	ldr	r3, [pc, #12]	@ (800de7c <setHIDSTimeStamp+0x20>)
 800de70:	601a      	str	r2, [r3, #0]
}
 800de72:	46c0      	nop			@ (mov r8, r8)
 800de74:	46bd      	mov	sp, r7
 800de76:	b002      	add	sp, #8
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	46c0      	nop			@ (mov r8, r8)
 800de7c:	200024f8 	.word	0x200024f8

0800de80 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	781a      	ldrb	r2, [r3, #0]
 800de8c:	210c      	movs	r1, #12
 800de8e:	187b      	adds	r3, r7, r1
 800de90:	701a      	strb	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	785a      	ldrb	r2, [r3, #1]
 800de96:	187b      	adds	r3, r7, r1
 800de98:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800de9a:	240f      	movs	r4, #15
 800de9c:	193b      	adds	r3, r7, r4
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	7892      	ldrb	r2, [r2, #2]
 800dea2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800dea4:	187b      	adds	r3, r7, r1
 800dea6:	2102      	movs	r1, #2
 800dea8:	0018      	movs	r0, r3
 800deaa:	f7ff ff21 	bl	800dcf0 <CalculateCRC>
 800deae:	0003      	movs	r3, r0
 800deb0:	001a      	movs	r2, r3
 800deb2:	193b      	adds	r3, r7, r4
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d007      	beq.n	800deca <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800deba:	4a1a      	ldr	r2, [pc, #104]	@ (800df24 <CheckCRC+0xa4>)
 800debc:	4b1a      	ldr	r3, [pc, #104]	@ (800df28 <CheckCRC+0xa8>)
 800debe:	0019      	movs	r1, r3
 800dec0:	2001      	movs	r0, #1
 800dec2:	f7ff fe07 	bl	800dad4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800dec6:	2300      	movs	r3, #0
 800dec8:	e027      	b.n	800df1a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	78da      	ldrb	r2, [r3, #3]
 800dece:	2108      	movs	r1, #8
 800ded0:	187b      	adds	r3, r7, r1
 800ded2:	701a      	strb	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	791a      	ldrb	r2, [r3, #4]
 800ded8:	187b      	adds	r3, r7, r1
 800deda:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800dedc:	240e      	movs	r4, #14
 800dede:	193b      	adds	r3, r7, r4
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	7952      	ldrb	r2, [r2, #5]
 800dee4:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800dee6:	187b      	adds	r3, r7, r1
 800dee8:	2102      	movs	r1, #2
 800deea:	0018      	movs	r0, r3
 800deec:	f7ff ff00 	bl	800dcf0 <CalculateCRC>
 800def0:	0003      	movs	r3, r0
 800def2:	001a      	movs	r2, r3
 800def4:	193b      	adds	r3, r7, r4
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	4293      	cmp	r3, r2
 800defa:	d00d      	beq.n	800df18 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800defc:	4a0b      	ldr	r2, [pc, #44]	@ (800df2c <CheckCRC+0xac>)
 800defe:	4b0a      	ldr	r3, [pc, #40]	@ (800df28 <CheckCRC+0xa8>)
 800df00:	0019      	movs	r1, r3
 800df02:	2001      	movs	r0, #1
 800df04:	f7ff fde6 	bl	800dad4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800df08:	4a09      	ldr	r2, [pc, #36]	@ (800df30 <CheckCRC+0xb0>)
 800df0a:	4b0a      	ldr	r3, [pc, #40]	@ (800df34 <CheckCRC+0xb4>)
 800df0c:	217c      	movs	r1, #124	@ 0x7c
 800df0e:	0018      	movs	r0, r3
 800df10:	f7ff fe98 	bl	800dc44 <errorHandler>
		return false;
 800df14:	2300      	movs	r3, #0
 800df16:	e000      	b.n	800df1a <CheckCRC+0x9a>
	}
	return true;
 800df18:	2301      	movs	r3, #1
}
 800df1a:	0018      	movs	r0, r3
 800df1c:	46bd      	mov	sp, r7
 800df1e:	b005      	add	sp, #20
 800df20:	bd90      	pop	{r4, r7, pc}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	08024380 	.word	0x08024380
 800df28:	080243a8 	.word	0x080243a8
 800df2c:	080243ac 	.word	0x080243ac
 800df30:	080243d8 	.word	0x080243d8
 800df34:	0802496c 	.word	0x0802496c

0800df38 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800df3e:	1dbb      	adds	r3, r7, #6
 800df40:	2289      	movs	r2, #137	@ 0x89
 800df42:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800df44:	1dbb      	adds	r3, r7, #6
 800df46:	2201      	movs	r2, #1
 800df48:	0019      	movs	r1, r3
 800df4a:	2044      	movs	r0, #68	@ 0x44
 800df4c:	f7ff feae 	bl	800dcac <WriteRegister>
	HAL_Delay(30);
 800df50:	201e      	movs	r0, #30
 800df52:	f000 fa1f 	bl	800e394 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800df56:	4b14      	ldr	r3, [pc, #80]	@ (800dfa8 <HIDS_DeviceConnected+0x70>)
 800df58:	2206      	movs	r2, #6
 800df5a:	0019      	movs	r1, r3
 800df5c:	2044      	movs	r0, #68	@ 0x44
 800df5e:	f7ff fe83 	bl	800dc68 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800df62:	1dfb      	adds	r3, r7, #7
 800df64:	2200      	movs	r2, #0
 800df66:	701a      	strb	r2, [r3, #0]
 800df68:	e011      	b.n	800df8e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800df6a:	1dfb      	adds	r3, r7, #7
 800df6c:	7818      	ldrb	r0, [r3, #0]
 800df6e:	1dfb      	adds	r3, r7, #7
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	4a0d      	ldr	r2, [pc, #52]	@ (800dfa8 <HIDS_DeviceConnected+0x70>)
 800df74:	5cd3      	ldrb	r3, [r2, r3]
 800df76:	4a0d      	ldr	r2, [pc, #52]	@ (800dfac <HIDS_DeviceConnected+0x74>)
 800df78:	490d      	ldr	r1, [pc, #52]	@ (800dfb0 <HIDS_DeviceConnected+0x78>)
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	0003      	movs	r3, r0
 800df7e:	2002      	movs	r0, #2
 800df80:	f7ff fda8 	bl	800dad4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800df84:	1dfb      	adds	r3, r7, #7
 800df86:	781a      	ldrb	r2, [r3, #0]
 800df88:	1dfb      	adds	r3, r7, #7
 800df8a:	3201      	adds	r2, #1
 800df8c:	701a      	strb	r2, [r3, #0]
 800df8e:	1dfb      	adds	r3, r7, #7
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	2b05      	cmp	r3, #5
 800df94:	d9e9      	bls.n	800df6a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800df96:	4b04      	ldr	r3, [pc, #16]	@ (800dfa8 <HIDS_DeviceConnected+0x70>)
 800df98:	0018      	movs	r0, r3
 800df9a:	f7ff ff71 	bl	800de80 <CheckCRC>
 800df9e:	0003      	movs	r3, r0
}
 800dfa0:	0018      	movs	r0, r3
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	b002      	add	sp, #8
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	200024e8 	.word	0x200024e8
 800dfac:	080243f0 	.word	0x080243f0
 800dfb0:	0802437c 	.word	0x0802437c

0800dfb4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800dfb8:	4b04      	ldr	r3, [pc, #16]	@ (800dfcc <HIDS_MeasurementReady+0x18>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	0018      	movs	r0, r3
 800dfbe:	f7ff fd33 	bl	800da28 <TimestampIsReached>
 800dfc2:	0003      	movs	r3, r0
}
 800dfc4:	0018      	movs	r0, r3
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	46c0      	nop			@ (mov r8, r8)
 800dfcc:	200000d0 	.word	0x200000d0

0800dfd0 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800dfda:	4b4c      	ldr	r3, [pc, #304]	@ (800e10c <HIDS_GetMeasurementValues+0x13c>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <HIDS_GetMeasurementValues+0x16>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e08d      	b.n	800e102 <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800dfe6:	f7ff ffe5 	bl	800dfb4 <HIDS_MeasurementReady>
 800dfea:	0003      	movs	r3, r0
 800dfec:	001a      	movs	r2, r3
 800dfee:	2301      	movs	r3, #1
 800dff0:	4053      	eors	r3, r2
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <HIDS_GetMeasurementValues+0x2c>
 800dff8:	2300      	movs	r3, #0
 800dffa:	e082      	b.n	800e102 <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800dffc:	4b44      	ldr	r3, [pc, #272]	@ (800e110 <HIDS_GetMeasurementValues+0x140>)
 800dffe:	2206      	movs	r2, #6
 800e000:	0019      	movs	r1, r3
 800e002:	2044      	movs	r0, #68	@ 0x44
 800e004:	f7ff fe30 	bl	800dc68 <ReadRegister>
 800e008:	0003      	movs	r3, r0
 800e00a:	001a      	movs	r2, r3
 800e00c:	2301      	movs	r3, #1
 800e00e:	4053      	eors	r3, r2
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d005      	beq.n	800e022 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800e016:	4a3f      	ldr	r2, [pc, #252]	@ (800e114 <HIDS_GetMeasurementValues+0x144>)
 800e018:	4b3f      	ldr	r3, [pc, #252]	@ (800e118 <HIDS_GetMeasurementValues+0x148>)
 800e01a:	0019      	movs	r1, r3
 800e01c:	2001      	movs	r0, #1
 800e01e:	f7ff fd59 	bl	800dad4 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800e022:	4b3b      	ldr	r3, [pc, #236]	@ (800e110 <HIDS_GetMeasurementValues+0x140>)
 800e024:	0018      	movs	r0, r3
 800e026:	f7ff ff2b 	bl	800de80 <CheckCRC>
 800e02a:	0003      	movs	r3, r0
 800e02c:	001a      	movs	r2, r3
 800e02e:	2301      	movs	r3, #1
 800e030:	4053      	eors	r3, r2
 800e032:	b2db      	uxtb	r3, r3
 800e034:	2b00      	cmp	r3, #0
 800e036:	d011      	beq.n	800e05c <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800e038:	2317      	movs	r3, #23
 800e03a:	18fb      	adds	r3, r7, r3
 800e03c:	2200      	movs	r2, #0
 800e03e:	701a      	strb	r2, [r3, #0]
 800e040:	e005      	b.n	800e04e <HIDS_GetMeasurementValues+0x7e>
 800e042:	2117      	movs	r1, #23
 800e044:	187b      	adds	r3, r7, r1
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	187b      	adds	r3, r7, r1
 800e04a:	3201      	adds	r2, #1
 800e04c:	701a      	strb	r2, [r3, #0]
 800e04e:	2317      	movs	r3, #23
 800e050:	18fb      	adds	r3, r7, r3
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b05      	cmp	r3, #5
 800e056:	d9f4      	bls.n	800e042 <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800e058:	2300      	movs	r3, #0
 800e05a:	e052      	b.n	800e102 <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800e05c:	4b2c      	ldr	r3, [pc, #176]	@ (800e110 <HIDS_GetMeasurementValues+0x140>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	4a2b      	ldr	r2, [pc, #172]	@ (800e110 <HIDS_GetMeasurementValues+0x140>)
 800e064:	7852      	ldrb	r2, [r2, #1]
 800e066:	4313      	orrs	r3, r2
 800e068:	22af      	movs	r2, #175	@ 0xaf
 800e06a:	4353      	muls	r3, r2
 800e06c:	0018      	movs	r0, r3
 800e06e:	f7f5 f9a7 	bl	80033c0 <__aeabi_i2d>
 800e072:	2200      	movs	r2, #0
 800e074:	4b29      	ldr	r3, [pc, #164]	@ (800e11c <HIDS_GetMeasurementValues+0x14c>)
 800e076:	f7f3 fe9d 	bl	8001db4 <__aeabi_ddiv>
 800e07a:	0002      	movs	r2, r0
 800e07c:	000b      	movs	r3, r1
 800e07e:	0010      	movs	r0, r2
 800e080:	0019      	movs	r1, r3
 800e082:	f7f5 fa37 	bl	80034f4 <__aeabi_d2f>
 800e086:	1c03      	adds	r3, r0, #0
 800e088:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800e08a:	4925      	ldr	r1, [pc, #148]	@ (800e120 <HIDS_GetMeasurementValues+0x150>)
 800e08c:	6938      	ldr	r0, [r7, #16]
 800e08e:	f7f3 f8c5 	bl	800121c <__aeabi_fsub>
 800e092:	1c03      	adds	r3, r0, #0
 800e094:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e096:	4b1e      	ldr	r3, [pc, #120]	@ (800e110 <HIDS_GetMeasurementValues+0x140>)
 800e098:	78db      	ldrb	r3, [r3, #3]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	4a1c      	ldr	r2, [pc, #112]	@ (800e110 <HIDS_GetMeasurementValues+0x140>)
 800e09e:	7912      	ldrb	r2, [r2, #4]
 800e0a0:	431a      	orrs	r2, r3
 800e0a2:	0013      	movs	r3, r2
 800e0a4:	015b      	lsls	r3, r3, #5
 800e0a6:	1a9b      	subs	r3, r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	189b      	adds	r3, r3, r2
 800e0ac:	0018      	movs	r0, r3
 800e0ae:	f7f5 f987 	bl	80033c0 <__aeabi_i2d>
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	4b19      	ldr	r3, [pc, #100]	@ (800e11c <HIDS_GetMeasurementValues+0x14c>)
 800e0b6:	f7f3 fe7d 	bl	8001db4 <__aeabi_ddiv>
 800e0ba:	0002      	movs	r2, r0
 800e0bc:	000b      	movs	r3, r1
 800e0be:	0010      	movs	r0, r2
 800e0c0:	0019      	movs	r1, r3
 800e0c2:	f7f5 fa17 	bl	80034f4 <__aeabi_d2f>
 800e0c6:	1c03      	adds	r3, r0, #0
 800e0c8:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800e0ca:	4916      	ldr	r1, [pc, #88]	@ (800e124 <HIDS_GetMeasurementValues+0x154>)
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7f3 f8a5 	bl	800121c <__aeabi_fsub>
 800e0d2:	1c03      	adds	r3, r0, #0
 800e0d4:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	693a      	ldr	r2, [r7, #16]
 800e0da:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	0011      	movs	r1, r2
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	f7fd fbc9 	bl	800b880 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	1c11      	adds	r1, r2, #0
 800e0f4:	1c18      	adds	r0, r3, #0
 800e0f6:	f7f5 fbed 	bl	80038d4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800e0fa:	4b04      	ldr	r3, [pc, #16]	@ (800e10c <HIDS_GetMeasurementValues+0x13c>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800e100:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800e102:	0018      	movs	r0, r3
 800e104:	46bd      	mov	sp, r7
 800e106:	b006      	add	sp, #24
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	46c0      	nop			@ (mov r8, r8)
 800e10c:	200024f6 	.word	0x200024f6
 800e110:	200024f0 	.word	0x200024f0
 800e114:	08024410 	.word	0x08024410
 800e118:	080243a8 	.word	0x080243a8
 800e11c:	40efffe0 	.word	0x40efffe0
 800e120:	42340000 	.word	0x42340000
 800e124:	40c00000 	.word	0x40c00000

0800e128 <ResetHIDSresults>:
void ResetHIDSresults() {
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
  humid = 0.0;
 800e12c:	4b04      	ldr	r3, [pc, #16]	@ (800e140 <ResetHIDSresults+0x18>)
 800e12e:	2200      	movs	r2, #0
 800e130:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800e132:	4b04      	ldr	r3, [pc, #16]	@ (800e144 <ResetHIDSresults+0x1c>)
 800e134:	2200      	movs	r2, #0
 800e136:	601a      	str	r2, [r3, #0]
}
 800e138:	46c0      	nop			@ (mov r8, r8)
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	46c0      	nop			@ (mov r8, r8)
 800e140:	200024d8 	.word	0x200024d8
 800e144:	200024dc 	.word	0x200024dc

0800e148 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800e148:	b5b0      	push	{r4, r5, r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800e14e:	4b3b      	ldr	r3, [pc, #236]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b06      	cmp	r3, #6
 800e154:	d865      	bhi.n	800e222 <HIDS_Upkeep+0xda>
 800e156:	009a      	lsls	r2, r3, #2
 800e158:	4b39      	ldr	r3, [pc, #228]	@ (800e240 <HIDS_Upkeep+0xf8>)
 800e15a:	18d3      	adds	r3, r2, r3
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800e160:	4a38      	ldr	r2, [pc, #224]	@ (800e244 <HIDS_Upkeep+0xfc>)
 800e162:	4b39      	ldr	r3, [pc, #228]	@ (800e248 <HIDS_Upkeep+0x100>)
 800e164:	0019      	movs	r1, r3
 800e166:	2003      	movs	r0, #3
 800e168:	f7ff fcb4 	bl	800dad4 <CreateLine>
      break;
 800e16c:	e060      	b.n	800e230 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800e16e:	f7ff ffdb 	bl	800e128 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800e172:	4b32      	ldr	r3, [pc, #200]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e174:	2201      	movs	r2, #1
 800e176:	701a      	strb	r2, [r3, #0]
      break;
 800e178:	e05a      	b.n	800e230 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800e17a:	f7fe fd55 	bl	800cc28 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800e17e:	f7ff fe2f 	bl	800dde0 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800e182:	4b2e      	ldr	r3, [pc, #184]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e184:	2202      	movs	r2, #2
 800e186:	701a      	strb	r2, [r3, #0]
      break;
 800e188:	e052      	b.n	800e230 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800e18a:	4a30      	ldr	r2, [pc, #192]	@ (800e24c <HIDS_Upkeep+0x104>)
 800e18c:	4b30      	ldr	r3, [pc, #192]	@ (800e250 <HIDS_Upkeep+0x108>)
 800e18e:	0011      	movs	r1, r2
 800e190:	0018      	movs	r0, r3
 800e192:	f7ff ff1d 	bl	800dfd0 <HIDS_GetMeasurementValues>
 800e196:	1e03      	subs	r3, r0, #0
 800e198:	d047      	beq.n	800e22a <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800e19a:	4b28      	ldr	r3, [pc, #160]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e19c:	2203      	movs	r2, #3
 800e19e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e1a0:	e043      	b.n	800e22a <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800e1a2:	4b2b      	ldr	r3, [pc, #172]	@ (800e250 <HIDS_Upkeep+0x108>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	1c18      	adds	r0, r3, #0
 800e1a8:	f7f5 f95c 	bl	8003464 <__aeabi_f2d>
 800e1ac:	0004      	movs	r4, r0
 800e1ae:	000d      	movs	r5, r1
 800e1b0:	4b26      	ldr	r3, [pc, #152]	@ (800e24c <HIDS_Upkeep+0x104>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	1c18      	adds	r0, r3, #0
 800e1b6:	f7f5 f955 	bl	8003464 <__aeabi_f2d>
 800e1ba:	0002      	movs	r2, r0
 800e1bc:	000b      	movs	r3, r1
 800e1be:	4825      	ldr	r0, [pc, #148]	@ (800e254 <HIDS_Upkeep+0x10c>)
 800e1c0:	4921      	ldr	r1, [pc, #132]	@ (800e248 <HIDS_Upkeep+0x100>)
 800e1c2:	9202      	str	r2, [sp, #8]
 800e1c4:	9303      	str	r3, [sp, #12]
 800e1c6:	9400      	str	r4, [sp, #0]
 800e1c8:	9501      	str	r5, [sp, #4]
 800e1ca:	0002      	movs	r2, r0
 800e1cc:	2003      	movs	r0, #3
 800e1ce:	f7ff fc81 	bl	800dad4 <CreateLine>
      setHIDS(temp, humid);
 800e1d2:	4b1e      	ldr	r3, [pc, #120]	@ (800e24c <HIDS_Upkeep+0x104>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e250 <HIDS_Upkeep+0x108>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	1c19      	adds	r1, r3, #0
 800e1dc:	1c10      	adds	r0, r2, #0
 800e1de:	f7f5 fb8d 	bl	80038fc <setHIDS>
      ResetMeasurementIndicator();
 800e1e2:	f7fe fd39 	bl	800cc58 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800e1e6:	f000 f8cb 	bl	800e380 <HAL_GetTick>
 800e1ea:	0004      	movs	r4, r0
 800e1ec:	f7fe fdfa 	bl	800cde4 <powerCheck>
 800e1f0:	0003      	movs	r3, r0
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d101      	bne.n	800e1fa <HIDS_Upkeep+0xb2>
 800e1f6:	4b18      	ldr	r3, [pc, #96]	@ (800e258 <HIDS_Upkeep+0x110>)
 800e1f8:	e001      	b.n	800e1fe <HIDS_Upkeep+0xb6>
 800e1fa:	23fa      	movs	r3, #250	@ 0xfa
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	191a      	adds	r2, r3, r4
 800e200:	4b16      	ldr	r3, [pc, #88]	@ (800e25c <HIDS_Upkeep+0x114>)
 800e202:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800e204:	4b0d      	ldr	r3, [pc, #52]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e206:	2206      	movs	r2, #6
 800e208:	701a      	strb	r2, [r3, #0]
      break;
 800e20a:	e011      	b.n	800e230 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800e20c:	4b13      	ldr	r3, [pc, #76]	@ (800e25c <HIDS_Upkeep+0x114>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	0018      	movs	r0, r3
 800e212:	f7ff fc09 	bl	800da28 <TimestampIsReached>
 800e216:	1e03      	subs	r3, r0, #0
 800e218:	d009      	beq.n	800e22e <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800e21a:	4b08      	ldr	r3, [pc, #32]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e220:	e005      	b.n	800e22e <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800e222:	4b06      	ldr	r3, [pc, #24]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e224:	2200      	movs	r2, #0
 800e226:	701a      	strb	r2, [r3, #0]
      break;
 800e228:	e002      	b.n	800e230 <HIDS_Upkeep+0xe8>
      break;
 800e22a:	46c0      	nop			@ (mov r8, r8)
 800e22c:	e000      	b.n	800e230 <HIDS_Upkeep+0xe8>
      break;
 800e22e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800e230:	4b02      	ldr	r3, [pc, #8]	@ (800e23c <HIDS_Upkeep+0xf4>)
 800e232:	781b      	ldrb	r3, [r3, #0]
}
 800e234:	0018      	movs	r0, r3
 800e236:	46bd      	mov	sp, r7
 800e238:	bdb0      	pop	{r4, r5, r7, pc}
 800e23a:	46c0      	nop			@ (mov r8, r8)
 800e23c:	200024fc 	.word	0x200024fc
 800e240:	08024950 	.word	0x08024950
 800e244:	08024444 	.word	0x08024444
 800e248:	08024478 	.word	0x08024478
 800e24c:	200024dc 	.word	0x200024dc
 800e250:	200024d8 	.word	0x200024d8
 800e254:	0802447c 	.word	0x0802447c
 800e258:	00002710 	.word	0x00002710
 800e25c:	200024f8 	.word	0x200024f8

0800e260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800e260:	480d      	ldr	r0, [pc, #52]	@ (800e298 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800e262:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e264:	f7ff f836 	bl	800d2d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e268:	480c      	ldr	r0, [pc, #48]	@ (800e29c <LoopForever+0x6>)
  ldr r1, =_edata
 800e26a:	490d      	ldr	r1, [pc, #52]	@ (800e2a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e26c:	4a0d      	ldr	r2, [pc, #52]	@ (800e2a4 <LoopForever+0xe>)
  movs r3, #0
 800e26e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e270:	e002      	b.n	800e278 <LoopCopyDataInit>

0800e272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e276:	3304      	adds	r3, #4

0800e278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e27a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e27c:	d3f9      	bcc.n	800e272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e27e:	4a0a      	ldr	r2, [pc, #40]	@ (800e2a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e280:	4c0a      	ldr	r4, [pc, #40]	@ (800e2ac <LoopForever+0x16>)
  movs r3, #0
 800e282:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e284:	e001      	b.n	800e28a <LoopFillZerobss>

0800e286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e288:	3204      	adds	r2, #4

0800e28a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e28a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e28c:	d3fb      	bcc.n	800e286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e28e:	f011 fb79 	bl	801f984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e292:	f7f9 fbfb 	bl	8007a8c <main>

0800e296 <LoopForever>:

LoopForever:
    b LoopForever
 800e296:	e7fe      	b.n	800e296 <LoopForever>
   ldr   r0, =_estack
 800e298:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800e29c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e2a0:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800e2a4:	080252f0 	.word	0x080252f0
  ldr r2, =_sbss
 800e2a8:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800e2ac:	20003904 	.word	0x20003904

0800e2b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e2b0:	e7fe      	b.n	800e2b0 <ADC1_COMP_IRQHandler>
	...

0800e2b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e2ba:	1dfb      	adds	r3, r7, #7
 800e2bc:	2200      	movs	r2, #0
 800e2be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800e2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f0 <HAL_Init+0x3c>)
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f0 <HAL_Init+0x3c>)
 800e2c6:	2140      	movs	r1, #64	@ 0x40
 800e2c8:	430a      	orrs	r2, r1
 800e2ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e2cc:	2003      	movs	r0, #3
 800e2ce:	f000 f811 	bl	800e2f4 <HAL_InitTick>
 800e2d2:	1e03      	subs	r3, r0, #0
 800e2d4:	d003      	beq.n	800e2de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800e2d6:	1dfb      	adds	r3, r7, #7
 800e2d8:	2201      	movs	r2, #1
 800e2da:	701a      	strb	r2, [r3, #0]
 800e2dc:	e001      	b.n	800e2e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e2de:	f7fe fead 	bl	800d03c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e2e2:	1dfb      	adds	r3, r7, #7
 800e2e4:	781b      	ldrb	r3, [r3, #0]
}
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	b002      	add	sp, #8
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	46c0      	nop			@ (mov r8, r8)
 800e2f0:	40022000 	.word	0x40022000

0800e2f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e2f4:	b590      	push	{r4, r7, lr}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e2fc:	4b14      	ldr	r3, [pc, #80]	@ (800e350 <HAL_InitTick+0x5c>)
 800e2fe:	681c      	ldr	r4, [r3, #0]
 800e300:	4b14      	ldr	r3, [pc, #80]	@ (800e354 <HAL_InitTick+0x60>)
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	0019      	movs	r1, r3
 800e306:	23fa      	movs	r3, #250	@ 0xfa
 800e308:	0098      	lsls	r0, r3, #2
 800e30a:	f7f1 ff4b 	bl	80001a4 <__udivsi3>
 800e30e:	0003      	movs	r3, r0
 800e310:	0019      	movs	r1, r3
 800e312:	0020      	movs	r0, r4
 800e314:	f7f1 ff46 	bl	80001a4 <__udivsi3>
 800e318:	0003      	movs	r3, r0
 800e31a:	0018      	movs	r0, r3
 800e31c:	f000 fcfd 	bl	800ed1a <HAL_SYSTICK_Config>
 800e320:	1e03      	subs	r3, r0, #0
 800e322:	d001      	beq.n	800e328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	e00f      	b.n	800e348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d80b      	bhi.n	800e346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e32e:	6879      	ldr	r1, [r7, #4]
 800e330:	2301      	movs	r3, #1
 800e332:	425b      	negs	r3, r3
 800e334:	2200      	movs	r2, #0
 800e336:	0018      	movs	r0, r3
 800e338:	f000 fcc6 	bl	800ecc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e33c:	4b06      	ldr	r3, [pc, #24]	@ (800e358 <HAL_InitTick+0x64>)
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	e000      	b.n	800e348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800e346:	2301      	movs	r3, #1
}
 800e348:	0018      	movs	r0, r3
 800e34a:	46bd      	mov	sp, r7
 800e34c:	b003      	add	sp, #12
 800e34e:	bd90      	pop	{r4, r7, pc}
 800e350:	200000c8 	.word	0x200000c8
 800e354:	200000dc 	.word	0x200000dc
 800e358:	200000d8 	.word	0x200000d8

0800e35c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e360:	4b05      	ldr	r3, [pc, #20]	@ (800e378 <HAL_IncTick+0x1c>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	001a      	movs	r2, r3
 800e366:	4b05      	ldr	r3, [pc, #20]	@ (800e37c <HAL_IncTick+0x20>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	18d2      	adds	r2, r2, r3
 800e36c:	4b03      	ldr	r3, [pc, #12]	@ (800e37c <HAL_IncTick+0x20>)
 800e36e:	601a      	str	r2, [r3, #0]
}
 800e370:	46c0      	nop			@ (mov r8, r8)
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	46c0      	nop			@ (mov r8, r8)
 800e378:	200000dc 	.word	0x200000dc
 800e37c:	20002500 	.word	0x20002500

0800e380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
  return uwTick;
 800e384:	4b02      	ldr	r3, [pc, #8]	@ (800e390 <HAL_GetTick+0x10>)
 800e386:	681b      	ldr	r3, [r3, #0]
}
 800e388:	0018      	movs	r0, r3
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	46c0      	nop			@ (mov r8, r8)
 800e390:	20002500 	.word	0x20002500

0800e394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e39c:	f7ff fff0 	bl	800e380 <HAL_GetTick>
 800e3a0:	0003      	movs	r3, r0
 800e3a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	d005      	beq.n	800e3ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d8 <HAL_Delay+0x44>)
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	001a      	movs	r2, r3
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	189b      	adds	r3, r3, r2
 800e3b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e3ba:	46c0      	nop			@ (mov r8, r8)
 800e3bc:	f7ff ffe0 	bl	800e380 <HAL_GetTick>
 800e3c0:	0002      	movs	r2, r0
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d8f7      	bhi.n	800e3bc <HAL_Delay+0x28>
  {
  }
}
 800e3cc:	46c0      	nop			@ (mov r8, r8)
 800e3ce:	46c0      	nop			@ (mov r8, r8)
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	b004      	add	sp, #16
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	46c0      	nop			@ (mov r8, r8)
 800e3d8:	200000dc 	.word	0x200000dc

0800e3dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800e3e0:	4b04      	ldr	r3, [pc, #16]	@ (800e3f4 <HAL_SuspendTick+0x18>)
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	4b03      	ldr	r3, [pc, #12]	@ (800e3f4 <HAL_SuspendTick+0x18>)
 800e3e6:	2102      	movs	r1, #2
 800e3e8:	438a      	bics	r2, r1
 800e3ea:	601a      	str	r2, [r3, #0]
}
 800e3ec:	46c0      	nop			@ (mov r8, r8)
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	46c0      	nop			@ (mov r8, r8)
 800e3f4:	e000e010 	.word	0xe000e010

0800e3f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800e3fc:	4b04      	ldr	r3, [pc, #16]	@ (800e410 <HAL_ResumeTick+0x18>)
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	4b03      	ldr	r3, [pc, #12]	@ (800e410 <HAL_ResumeTick+0x18>)
 800e402:	2102      	movs	r1, #2
 800e404:	430a      	orrs	r2, r1
 800e406:	601a      	str	r2, [r3, #0]
}
 800e408:	46c0      	nop			@ (mov r8, r8)
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	46c0      	nop			@ (mov r8, r8)
 800e410:	e000e010 	.word	0xe000e010

0800e414 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800e418:	4b02      	ldr	r3, [pc, #8]	@ (800e424 <HAL_GetUIDw0+0x10>)
 800e41a:	681b      	ldr	r3, [r3, #0]
}
 800e41c:	0018      	movs	r0, r3
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	46c0      	nop			@ (mov r8, r8)
 800e424:	1ff80050 	.word	0x1ff80050

0800e428 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800e42c:	4b02      	ldr	r3, [pc, #8]	@ (800e438 <HAL_GetUIDw1+0x10>)
 800e42e:	681b      	ldr	r3, [r3, #0]
}
 800e430:	0018      	movs	r0, r3
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	46c0      	nop			@ (mov r8, r8)
 800e438:	1ff80054 	.word	0x1ff80054

0800e43c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800e440:	4b02      	ldr	r3, [pc, #8]	@ (800e44c <HAL_GetUIDw2+0x10>)
 800e442:	681b      	ldr	r3, [r3, #0]
}
 800e444:	0018      	movs	r0, r3
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	46c0      	nop			@ (mov r8, r8)
 800e44c:	1ff80064 	.word	0x1ff80064

0800e450 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e159      	b.n	800e716 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10a      	bne.n	800e480 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2200      	movs	r2, #0
 800e46e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2250      	movs	r2, #80	@ 0x50
 800e474:	2100      	movs	r1, #0
 800e476:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	0018      	movs	r0, r3
 800e47c:	f7f8 fdac 	bl	8006fd8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e484:	2210      	movs	r2, #16
 800e486:	4013      	ands	r3, r2
 800e488:	2b10      	cmp	r3, #16
 800e48a:	d005      	beq.n	800e498 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	2204      	movs	r2, #4
 800e494:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e496:	d00b      	beq.n	800e4b0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e49c:	2210      	movs	r2, #16
 800e49e:	431a      	orrs	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2250      	movs	r2, #80	@ 0x50
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e132      	b.n	800e716 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4b4:	4a9a      	ldr	r2, [pc, #616]	@ (800e720 <HAL_ADC_Init+0x2d0>)
 800e4b6:	4013      	ands	r3, r2
 800e4b8:	2202      	movs	r2, #2
 800e4ba:	431a      	orrs	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	2203      	movs	r2, #3
 800e4c8:	4013      	ands	r3, r2
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d108      	bne.n	800e4e0 <HAL_ADC_Init+0x90>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d101      	bne.n	800e4e0 <HAL_ADC_Init+0x90>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <HAL_ADC_Init+0x92>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d149      	bne.n	800e57a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685a      	ldr	r2, [r3, #4]
 800e4ea:	23c0      	movs	r3, #192	@ 0xc0
 800e4ec:	061b      	lsls	r3, r3, #24
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d00b      	beq.n	800e50a <HAL_ADC_Init+0xba>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	685a      	ldr	r2, [r3, #4]
 800e4f6:	2380      	movs	r3, #128	@ 0x80
 800e4f8:	05db      	lsls	r3, r3, #23
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d005      	beq.n	800e50a <HAL_ADC_Init+0xba>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685a      	ldr	r2, [r3, #4]
 800e502:	2380      	movs	r3, #128	@ 0x80
 800e504:	061b      	lsls	r3, r3, #24
 800e506:	429a      	cmp	r2, r3
 800e508:	d111      	bne.n	800e52e <HAL_ADC_Init+0xde>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	691a      	ldr	r2, [r3, #16]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	0092      	lsls	r2, r2, #2
 800e516:	0892      	lsrs	r2, r2, #2
 800e518:	611a      	str	r2, [r3, #16]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	6919      	ldr	r1, [r3, #16]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685a      	ldr	r2, [r3, #4]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	430a      	orrs	r2, r1
 800e52a:	611a      	str	r2, [r3, #16]
 800e52c:	e014      	b.n	800e558 <HAL_ADC_Init+0x108>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	691a      	ldr	r2, [r3, #16]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	0092      	lsls	r2, r2, #2
 800e53a:	0892      	lsrs	r2, r2, #2
 800e53c:	611a      	str	r2, [r3, #16]
 800e53e:	4b79      	ldr	r3, [pc, #484]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	4b78      	ldr	r3, [pc, #480]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e544:	4978      	ldr	r1, [pc, #480]	@ (800e728 <HAL_ADC_Init+0x2d8>)
 800e546:	400a      	ands	r2, r1
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	4b76      	ldr	r3, [pc, #472]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e54c:	6819      	ldr	r1, [r3, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685a      	ldr	r2, [r3, #4]
 800e552:	4b74      	ldr	r3, [pc, #464]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e554:	430a      	orrs	r2, r1
 800e556:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68da      	ldr	r2, [r3, #12]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2118      	movs	r1, #24
 800e564:	438a      	bics	r2, r1
 800e566:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68d9      	ldr	r1, [r3, #12]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	430a      	orrs	r2, r1
 800e578:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e57a:	4b6a      	ldr	r3, [pc, #424]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	4b69      	ldr	r3, [pc, #420]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e580:	496a      	ldr	r1, [pc, #424]	@ (800e72c <HAL_ADC_Init+0x2dc>)
 800e582:	400a      	ands	r2, r1
 800e584:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e586:	4b67      	ldr	r3, [pc, #412]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e588:	6819      	ldr	r1, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e58e:	065a      	lsls	r2, r3, #25
 800e590:	4b64      	ldr	r3, [pc, #400]	@ (800e724 <HAL_ADC_Init+0x2d4>)
 800e592:	430a      	orrs	r2, r1
 800e594:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	689a      	ldr	r2, [r3, #8]
 800e59c:	2380      	movs	r3, #128	@ 0x80
 800e59e:	055b      	lsls	r3, r3, #21
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	d108      	bne.n	800e5b6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	689a      	ldr	r2, [r3, #8]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2180      	movs	r1, #128	@ 0x80
 800e5b0:	0549      	lsls	r1, r1, #21
 800e5b2:	430a      	orrs	r2, r1
 800e5b4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68da      	ldr	r2, [r3, #12]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	495b      	ldr	r1, [pc, #364]	@ (800e730 <HAL_ADC_Init+0x2e0>)
 800e5c2:	400a      	ands	r2, r1
 800e5c4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	68d9      	ldr	r1, [r3, #12]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d101      	bne.n	800e5dc <HAL_ADC_Init+0x18c>
 800e5d8:	2304      	movs	r3, #4
 800e5da:	e000      	b.n	800e5de <HAL_ADC_Init+0x18e>
 800e5dc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e5de:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2020      	movs	r0, #32
 800e5e4:	5c1b      	ldrb	r3, [r3, r0]
 800e5e6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e5e8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	202c      	movs	r0, #44	@ 0x2c
 800e5ee:	5c1b      	ldrb	r3, [r3, r0]
 800e5f0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e5f2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e5f8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	699b      	ldr	r3, [r3, #24]
 800e5fe:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e600:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	69db      	ldr	r3, [r3, #28]
 800e606:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e608:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	430a      	orrs	r2, r1
 800e610:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e616:	23c2      	movs	r3, #194	@ 0xc2
 800e618:	33ff      	adds	r3, #255	@ 0xff
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d00b      	beq.n	800e636 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68d9      	ldr	r1, [r3, #12]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e62c:	431a      	orrs	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	430a      	orrs	r2, r1
 800e634:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2221      	movs	r2, #33	@ 0x21
 800e63a:	5c9b      	ldrb	r3, [r3, r2]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d11a      	bne.n	800e676 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2220      	movs	r2, #32
 800e644:	5c9b      	ldrb	r3, [r3, r2]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d109      	bne.n	800e65e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68da      	ldr	r2, [r3, #12]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2180      	movs	r1, #128	@ 0x80
 800e656:	0249      	lsls	r1, r1, #9
 800e658:	430a      	orrs	r2, r1
 800e65a:	60da      	str	r2, [r3, #12]
 800e65c:	e00b      	b.n	800e676 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e662:	2220      	movs	r2, #32
 800e664:	431a      	orrs	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e66e:	2201      	movs	r2, #1
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d11f      	bne.n	800e6be <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	691a      	ldr	r2, [r3, #16]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	492a      	ldr	r1, [pc, #168]	@ (800e734 <HAL_ADC_Init+0x2e4>)
 800e68a:	400a      	ands	r2, r1
 800e68c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	6919      	ldr	r1, [r3, #16]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e69c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e6a2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	691a      	ldr	r2, [r3, #16]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	430a      	orrs	r2, r1
 800e6ba:	611a      	str	r2, [r3, #16]
 800e6bc:	e00e      	b.n	800e6dc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	691b      	ldr	r3, [r3, #16]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	4013      	ands	r3, r2
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d107      	bne.n	800e6dc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	691a      	ldr	r2, [r3, #16]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2101      	movs	r1, #1
 800e6d8:	438a      	bics	r2, r1
 800e6da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	695a      	ldr	r2, [r3, #20]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2107      	movs	r1, #7
 800e6e8:	438a      	bics	r2, r1
 800e6ea:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6959      	ldr	r1, [r3, #20]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	430a      	orrs	r2, r1
 800e6fc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e708:	2203      	movs	r2, #3
 800e70a:	4393      	bics	r3, r2
 800e70c:	2201      	movs	r2, #1
 800e70e:	431a      	orrs	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	0018      	movs	r0, r3
 800e718:	46bd      	mov	sp, r7
 800e71a:	b002      	add	sp, #8
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	46c0      	nop			@ (mov r8, r8)
 800e720:	fffffefd 	.word	0xfffffefd
 800e724:	40012708 	.word	0x40012708
 800e728:	ffc3ffff 	.word	0xffc3ffff
 800e72c:	fdffffff 	.word	0xfdffffff
 800e730:	fffe0219 	.word	0xfffe0219
 800e734:	fffffc03 	.word	0xfffffc03

0800e738 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800e738:	b590      	push	{r4, r7, lr}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e740:	230f      	movs	r3, #15
 800e742:	18fb      	adds	r3, r7, r3
 800e744:	2200      	movs	r2, #0
 800e746:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	2204      	movs	r2, #4
 800e750:	4013      	ands	r3, r2
 800e752:	d138      	bne.n	800e7c6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2250      	movs	r2, #80	@ 0x50
 800e758:	5c9b      	ldrb	r3, [r3, r2]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d101      	bne.n	800e762 <HAL_ADC_Start+0x2a>
 800e75e:	2302      	movs	r3, #2
 800e760:	e038      	b.n	800e7d4 <HAL_ADC_Start+0x9c>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2250      	movs	r2, #80	@ 0x50
 800e766:	2101      	movs	r1, #1
 800e768:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	69db      	ldr	r3, [r3, #28]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d007      	beq.n	800e782 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800e772:	230f      	movs	r3, #15
 800e774:	18fc      	adds	r4, r7, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	0018      	movs	r0, r3
 800e77a:	f000 f95f 	bl	800ea3c <ADC_Enable>
 800e77e:	0003      	movs	r3, r0
 800e780:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800e782:	230f      	movs	r3, #15
 800e784:	18fb      	adds	r3, r7, r3
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d120      	bne.n	800e7ce <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e790:	4a12      	ldr	r2, [pc, #72]	@ (800e7dc <HAL_ADC_Start+0xa4>)
 800e792:	4013      	ands	r3, r2
 800e794:	2280      	movs	r2, #128	@ 0x80
 800e796:	0052      	lsls	r2, r2, #1
 800e798:	431a      	orrs	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2250      	movs	r2, #80	@ 0x50
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	221c      	movs	r2, #28
 800e7b2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	689a      	ldr	r2, [r3, #8]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2104      	movs	r1, #4
 800e7c0:	430a      	orrs	r2, r1
 800e7c2:	609a      	str	r2, [r3, #8]
 800e7c4:	e003      	b.n	800e7ce <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e7c6:	230f      	movs	r3, #15
 800e7c8:	18fb      	adds	r3, r7, r3
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800e7ce:	230f      	movs	r3, #15
 800e7d0:	18fb      	adds	r3, r7, r3
 800e7d2:	781b      	ldrb	r3, [r3, #0]
}
 800e7d4:	0018      	movs	r0, r3
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	b005      	add	sp, #20
 800e7da:	bd90      	pop	{r4, r7, pc}
 800e7dc:	fffff0fe 	.word	0xfffff0fe

0800e7e0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	695b      	ldr	r3, [r3, #20]
 800e7f6:	2b08      	cmp	r3, #8
 800e7f8:	d102      	bne.n	800e800 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e7fa:	2308      	movs	r3, #8
 800e7fc:	60fb      	str	r3, [r7, #12]
 800e7fe:	e014      	b.n	800e82a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	2201      	movs	r2, #1
 800e808:	4013      	ands	r3, r2
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d10b      	bne.n	800e826 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e812:	2220      	movs	r2, #32
 800e814:	431a      	orrs	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2250      	movs	r2, #80	@ 0x50
 800e81e:	2100      	movs	r1, #0
 800e820:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	e072      	b.n	800e90c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e826:	230c      	movs	r3, #12
 800e828:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e82a:	f7ff fda9 	bl	800e380 <HAL_GetTick>
 800e82e:	0003      	movs	r3, r0
 800e830:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e832:	e01f      	b.n	800e874 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	3301      	adds	r3, #1
 800e838:	d01c      	beq.n	800e874 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d007      	beq.n	800e850 <HAL_ADC_PollForConversion+0x70>
 800e840:	f7ff fd9e 	bl	800e380 <HAL_GetTick>
 800e844:	0002      	movs	r2, r0
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d211      	bcs.n	800e874 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	4013      	ands	r3, r2
 800e85a:	d10b      	bne.n	800e874 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e860:	2204      	movs	r2, #4
 800e862:	431a      	orrs	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2250      	movs	r2, #80	@ 0x50
 800e86c:	2100      	movs	r1, #0
 800e86e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e870:	2303      	movs	r3, #3
 800e872:	e04b      	b.n	800e90c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	4013      	ands	r3, r2
 800e87e:	d0d9      	beq.n	800e834 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e884:	2280      	movs	r2, #128	@ 0x80
 800e886:	0092      	lsls	r2, r2, #2
 800e888:	431a      	orrs	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	68da      	ldr	r2, [r3, #12]
 800e894:	23c0      	movs	r3, #192	@ 0xc0
 800e896:	011b      	lsls	r3, r3, #4
 800e898:	4013      	ands	r3, r2
 800e89a:	d12e      	bne.n	800e8fa <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2220      	movs	r2, #32
 800e8a0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d129      	bne.n	800e8fa <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2208      	movs	r2, #8
 800e8ae:	4013      	ands	r3, r2
 800e8b0:	2b08      	cmp	r3, #8
 800e8b2:	d122      	bne.n	800e8fa <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	2204      	movs	r2, #4
 800e8bc:	4013      	ands	r3, r2
 800e8be:	d110      	bne.n	800e8e2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	685a      	ldr	r2, [r3, #4]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	210c      	movs	r1, #12
 800e8cc:	438a      	bics	r2, r1
 800e8ce:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8d4:	4a0f      	ldr	r2, [pc, #60]	@ (800e914 <HAL_ADC_PollForConversion+0x134>)
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	2201      	movs	r2, #1
 800e8da:	431a      	orrs	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	655a      	str	r2, [r3, #84]	@ 0x54
 800e8e0:	e00b      	b.n	800e8fa <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8e6:	2220      	movs	r2, #32
 800e8e8:	431a      	orrs	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	431a      	orrs	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d103      	bne.n	800e90a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	220c      	movs	r2, #12
 800e908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	0018      	movs	r0, r3
 800e90e:	46bd      	mov	sp, r7
 800e910:	b004      	add	sp, #16
 800e912:	bd80      	pop	{r7, pc}
 800e914:	fffffefe 	.word	0xfffffefe

0800e918 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e926:	0018      	movs	r0, r3
 800e928:	46bd      	mov	sp, r7
 800e92a:	b002      	add	sp, #8
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2250      	movs	r2, #80	@ 0x50
 800e93e:	5c9b      	ldrb	r3, [r3, r2]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d101      	bne.n	800e948 <HAL_ADC_ConfigChannel+0x18>
 800e944:	2302      	movs	r3, #2
 800e946:	e06c      	b.n	800ea22 <HAL_ADC_ConfigChannel+0xf2>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2250      	movs	r2, #80	@ 0x50
 800e94c:	2101      	movs	r1, #1
 800e94e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	2204      	movs	r2, #4
 800e958:	4013      	ands	r3, r2
 800e95a:	d00b      	beq.n	800e974 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e960:	2220      	movs	r2, #32
 800e962:	431a      	orrs	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2250      	movs	r2, #80	@ 0x50
 800e96c:	2100      	movs	r1, #0
 800e96e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e970:	2301      	movs	r3, #1
 800e972:	e056      	b.n	800ea22 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	4a2c      	ldr	r2, [pc, #176]	@ (800ea2c <HAL_ADC_ConfigChannel+0xfc>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d028      	beq.n	800e9d0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	035b      	lsls	r3, r3, #13
 800e98a:	0b5a      	lsrs	r2, r3, #13
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	430a      	orrs	r2, r1
 800e992:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	2380      	movs	r3, #128	@ 0x80
 800e99a:	02db      	lsls	r3, r3, #11
 800e99c:	4013      	ands	r3, r2
 800e99e:	d009      	beq.n	800e9b4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e9a0:	4b23      	ldr	r3, [pc, #140]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	4b22      	ldr	r3, [pc, #136]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800e9a6:	2180      	movs	r1, #128	@ 0x80
 800e9a8:	0409      	lsls	r1, r1, #16
 800e9aa:	430a      	orrs	r2, r1
 800e9ac:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e9ae:	200a      	movs	r0, #10
 800e9b0:	f000 f8ac 	bl	800eb0c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	2380      	movs	r3, #128	@ 0x80
 800e9ba:	029b      	lsls	r3, r3, #10
 800e9bc:	4013      	ands	r3, r2
 800e9be:	d02b      	beq.n	800ea18 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e9c0:	4b1b      	ldr	r3, [pc, #108]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	4b1a      	ldr	r3, [pc, #104]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800e9c6:	2180      	movs	r1, #128	@ 0x80
 800e9c8:	03c9      	lsls	r1, r1, #15
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	601a      	str	r2, [r3, #0]
 800e9ce:	e023      	b.n	800ea18 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	035b      	lsls	r3, r3, #13
 800e9dc:	0b5b      	lsrs	r3, r3, #13
 800e9de:	43d9      	mvns	r1, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	400a      	ands	r2, r1
 800e9e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	2380      	movs	r3, #128	@ 0x80
 800e9ee:	02db      	lsls	r3, r3, #11
 800e9f0:	4013      	ands	r3, r2
 800e9f2:	d005      	beq.n	800ea00 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800e9fa:	490e      	ldr	r1, [pc, #56]	@ (800ea34 <HAL_ADC_ConfigChannel+0x104>)
 800e9fc:	400a      	ands	r2, r1
 800e9fe:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	2380      	movs	r3, #128	@ 0x80
 800ea06:	029b      	lsls	r3, r3, #10
 800ea08:	4013      	ands	r3, r2
 800ea0a:	d005      	beq.n	800ea18 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800ea0c:	4b08      	ldr	r3, [pc, #32]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	4b07      	ldr	r3, [pc, #28]	@ (800ea30 <HAL_ADC_ConfigChannel+0x100>)
 800ea12:	4909      	ldr	r1, [pc, #36]	@ (800ea38 <HAL_ADC_ConfigChannel+0x108>)
 800ea14:	400a      	ands	r2, r1
 800ea16:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2250      	movs	r2, #80	@ 0x50
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	0018      	movs	r0, r3
 800ea24:	46bd      	mov	sp, r7
 800ea26:	b002      	add	sp, #8
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	46c0      	nop			@ (mov r8, r8)
 800ea2c:	00001001 	.word	0x00001001
 800ea30:	40012708 	.word	0x40012708
 800ea34:	ff7fffff 	.word	0xff7fffff
 800ea38:	ffbfffff 	.word	0xffbfffff

0800ea3c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ea44:	2300      	movs	r3, #0
 800ea46:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	2203      	movs	r2, #3
 800ea50:	4013      	ands	r3, r2
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d108      	bne.n	800ea68 <ADC_Enable+0x2c>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	4013      	ands	r3, r2
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d101      	bne.n	800ea68 <ADC_Enable+0x2c>
 800ea64:	2301      	movs	r3, #1
 800ea66:	e000      	b.n	800ea6a <ADC_Enable+0x2e>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d146      	bne.n	800eafc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	4a24      	ldr	r2, [pc, #144]	@ (800eb08 <ADC_Enable+0xcc>)
 800ea76:	4013      	ands	r3, r2
 800ea78:	d00d      	beq.n	800ea96 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea7e:	2210      	movs	r2, #16
 800ea80:	431a      	orrs	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	431a      	orrs	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	e033      	b.n	800eafe <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	689a      	ldr	r2, [r3, #8]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	430a      	orrs	r2, r1
 800eaa4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	f000 f830 	bl	800eb0c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800eaac:	f7ff fc68 	bl	800e380 <HAL_GetTick>
 800eab0:	0003      	movs	r3, r0
 800eab2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800eab4:	e01b      	b.n	800eaee <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800eab6:	f7ff fc63 	bl	800e380 <HAL_GetTick>
 800eaba:	0002      	movs	r2, r0
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	2b0a      	cmp	r3, #10
 800eac2:	d914      	bls.n	800eaee <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2201      	movs	r2, #1
 800eacc:	4013      	ands	r3, r2
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d00d      	beq.n	800eaee <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead6:	2210      	movs	r2, #16
 800ead8:	431a      	orrs	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eae2:	2201      	movs	r2, #1
 800eae4:	431a      	orrs	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	e007      	b.n	800eafe <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	4013      	ands	r3, r2
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d1dc      	bne.n	800eab6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	0018      	movs	r0, r3
 800eb00:	46bd      	mov	sp, r7
 800eb02:	b004      	add	sp, #16
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	46c0      	nop			@ (mov r8, r8)
 800eb08:	80000017 	.word	0x80000017

0800eb0c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800eb14:	4b0b      	ldr	r3, [pc, #44]	@ (800eb44 <ADC_DelayMicroSecond+0x38>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	490b      	ldr	r1, [pc, #44]	@ (800eb48 <ADC_DelayMicroSecond+0x3c>)
 800eb1a:	0018      	movs	r0, r3
 800eb1c:	f7f1 fb42 	bl	80001a4 <__udivsi3>
 800eb20:	0003      	movs	r3, r0
 800eb22:	001a      	movs	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4353      	muls	r3, r2
 800eb28:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800eb2a:	e002      	b.n	800eb32 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1f9      	bne.n	800eb2c <ADC_DelayMicroSecond+0x20>
  }
}
 800eb38:	46c0      	nop			@ (mov r8, r8)
 800eb3a:	46c0      	nop			@ (mov r8, r8)
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	b004      	add	sp, #16
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	46c0      	nop			@ (mov r8, r8)
 800eb44:	200000c8 	.word	0x200000c8
 800eb48:	000f4240 	.word	0x000f4240

0800eb4c <__NVIC_EnableIRQ>:
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	0002      	movs	r2, r0
 800eb54:	1dfb      	adds	r3, r7, #7
 800eb56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800eb58:	1dfb      	adds	r3, r7, #7
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb5e:	d809      	bhi.n	800eb74 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eb60:	1dfb      	adds	r3, r7, #7
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	001a      	movs	r2, r3
 800eb66:	231f      	movs	r3, #31
 800eb68:	401a      	ands	r2, r3
 800eb6a:	4b04      	ldr	r3, [pc, #16]	@ (800eb7c <__NVIC_EnableIRQ+0x30>)
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	4091      	lsls	r1, r2
 800eb70:	000a      	movs	r2, r1
 800eb72:	601a      	str	r2, [r3, #0]
}
 800eb74:	46c0      	nop			@ (mov r8, r8)
 800eb76:	46bd      	mov	sp, r7
 800eb78:	b002      	add	sp, #8
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	e000e100 	.word	0xe000e100

0800eb80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800eb80:	b590      	push	{r4, r7, lr}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	0002      	movs	r2, r0
 800eb88:	6039      	str	r1, [r7, #0]
 800eb8a:	1dfb      	adds	r3, r7, #7
 800eb8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800eb8e:	1dfb      	adds	r3, r7, #7
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb94:	d828      	bhi.n	800ebe8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb96:	4a2f      	ldr	r2, [pc, #188]	@ (800ec54 <__NVIC_SetPriority+0xd4>)
 800eb98:	1dfb      	adds	r3, r7, #7
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	b25b      	sxtb	r3, r3
 800eb9e:	089b      	lsrs	r3, r3, #2
 800eba0:	33c0      	adds	r3, #192	@ 0xc0
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	589b      	ldr	r3, [r3, r2]
 800eba6:	1dfa      	adds	r2, r7, #7
 800eba8:	7812      	ldrb	r2, [r2, #0]
 800ebaa:	0011      	movs	r1, r2
 800ebac:	2203      	movs	r2, #3
 800ebae:	400a      	ands	r2, r1
 800ebb0:	00d2      	lsls	r2, r2, #3
 800ebb2:	21ff      	movs	r1, #255	@ 0xff
 800ebb4:	4091      	lsls	r1, r2
 800ebb6:	000a      	movs	r2, r1
 800ebb8:	43d2      	mvns	r2, r2
 800ebba:	401a      	ands	r2, r3
 800ebbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	019b      	lsls	r3, r3, #6
 800ebc2:	22ff      	movs	r2, #255	@ 0xff
 800ebc4:	401a      	ands	r2, r3
 800ebc6:	1dfb      	adds	r3, r7, #7
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	0018      	movs	r0, r3
 800ebcc:	2303      	movs	r3, #3
 800ebce:	4003      	ands	r3, r0
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ebd4:	481f      	ldr	r0, [pc, #124]	@ (800ec54 <__NVIC_SetPriority+0xd4>)
 800ebd6:	1dfb      	adds	r3, r7, #7
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	b25b      	sxtb	r3, r3
 800ebdc:	089b      	lsrs	r3, r3, #2
 800ebde:	430a      	orrs	r2, r1
 800ebe0:	33c0      	adds	r3, #192	@ 0xc0
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800ebe6:	e031      	b.n	800ec4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ebe8:	4a1b      	ldr	r2, [pc, #108]	@ (800ec58 <__NVIC_SetPriority+0xd8>)
 800ebea:	1dfb      	adds	r3, r7, #7
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	0019      	movs	r1, r3
 800ebf0:	230f      	movs	r3, #15
 800ebf2:	400b      	ands	r3, r1
 800ebf4:	3b08      	subs	r3, #8
 800ebf6:	089b      	lsrs	r3, r3, #2
 800ebf8:	3306      	adds	r3, #6
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	18d3      	adds	r3, r2, r3
 800ebfe:	3304      	adds	r3, #4
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	1dfa      	adds	r2, r7, #7
 800ec04:	7812      	ldrb	r2, [r2, #0]
 800ec06:	0011      	movs	r1, r2
 800ec08:	2203      	movs	r2, #3
 800ec0a:	400a      	ands	r2, r1
 800ec0c:	00d2      	lsls	r2, r2, #3
 800ec0e:	21ff      	movs	r1, #255	@ 0xff
 800ec10:	4091      	lsls	r1, r2
 800ec12:	000a      	movs	r2, r1
 800ec14:	43d2      	mvns	r2, r2
 800ec16:	401a      	ands	r2, r3
 800ec18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	019b      	lsls	r3, r3, #6
 800ec1e:	22ff      	movs	r2, #255	@ 0xff
 800ec20:	401a      	ands	r2, r3
 800ec22:	1dfb      	adds	r3, r7, #7
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	0018      	movs	r0, r3
 800ec28:	2303      	movs	r3, #3
 800ec2a:	4003      	ands	r3, r0
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ec30:	4809      	ldr	r0, [pc, #36]	@ (800ec58 <__NVIC_SetPriority+0xd8>)
 800ec32:	1dfb      	adds	r3, r7, #7
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	001c      	movs	r4, r3
 800ec38:	230f      	movs	r3, #15
 800ec3a:	4023      	ands	r3, r4
 800ec3c:	3b08      	subs	r3, #8
 800ec3e:	089b      	lsrs	r3, r3, #2
 800ec40:	430a      	orrs	r2, r1
 800ec42:	3306      	adds	r3, #6
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	18c3      	adds	r3, r0, r3
 800ec48:	3304      	adds	r3, #4
 800ec4a:	601a      	str	r2, [r3, #0]
}
 800ec4c:	46c0      	nop			@ (mov r8, r8)
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	b003      	add	sp, #12
 800ec52:	bd90      	pop	{r4, r7, pc}
 800ec54:	e000e100 	.word	0xe000e100
 800ec58:	e000ed00 	.word	0xe000ed00

0800ec5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ec60:	f3bf 8f4f 	dsb	sy
}
 800ec64:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ec66:	4b04      	ldr	r3, [pc, #16]	@ (800ec78 <__NVIC_SystemReset+0x1c>)
 800ec68:	4a04      	ldr	r2, [pc, #16]	@ (800ec7c <__NVIC_SystemReset+0x20>)
 800ec6a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ec6c:	f3bf 8f4f 	dsb	sy
}
 800ec70:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ec72:	46c0      	nop			@ (mov r8, r8)
 800ec74:	e7fd      	b.n	800ec72 <__NVIC_SystemReset+0x16>
 800ec76:	46c0      	nop			@ (mov r8, r8)
 800ec78:	e000ed00 	.word	0xe000ed00
 800ec7c:	05fa0004 	.word	0x05fa0004

0800ec80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	1e5a      	subs	r2, r3, #1
 800ec8c:	2380      	movs	r3, #128	@ 0x80
 800ec8e:	045b      	lsls	r3, r3, #17
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d301      	bcc.n	800ec98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ec94:	2301      	movs	r3, #1
 800ec96:	e010      	b.n	800ecba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ec98:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc4 <SysTick_Config+0x44>)
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	3a01      	subs	r2, #1
 800ec9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800eca0:	2301      	movs	r3, #1
 800eca2:	425b      	negs	r3, r3
 800eca4:	2103      	movs	r1, #3
 800eca6:	0018      	movs	r0, r3
 800eca8:	f7ff ff6a 	bl	800eb80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ecac:	4b05      	ldr	r3, [pc, #20]	@ (800ecc4 <SysTick_Config+0x44>)
 800ecae:	2200      	movs	r2, #0
 800ecb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ecb2:	4b04      	ldr	r3, [pc, #16]	@ (800ecc4 <SysTick_Config+0x44>)
 800ecb4:	2207      	movs	r2, #7
 800ecb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	0018      	movs	r0, r3
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	b002      	add	sp, #8
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	46c0      	nop			@ (mov r8, r8)
 800ecc4:	e000e010 	.word	0xe000e010

0800ecc8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60b9      	str	r1, [r7, #8]
 800ecd0:	607a      	str	r2, [r7, #4]
 800ecd2:	210f      	movs	r1, #15
 800ecd4:	187b      	adds	r3, r7, r1
 800ecd6:	1c02      	adds	r2, r0, #0
 800ecd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ecda:	68ba      	ldr	r2, [r7, #8]
 800ecdc:	187b      	adds	r3, r7, r1
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	b25b      	sxtb	r3, r3
 800ece2:	0011      	movs	r1, r2
 800ece4:	0018      	movs	r0, r3
 800ece6:	f7ff ff4b 	bl	800eb80 <__NVIC_SetPriority>
}
 800ecea:	46c0      	nop			@ (mov r8, r8)
 800ecec:	46bd      	mov	sp, r7
 800ecee:	b004      	add	sp, #16
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b082      	sub	sp, #8
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	0002      	movs	r2, r0
 800ecfa:	1dfb      	adds	r3, r7, #7
 800ecfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ecfe:	1dfb      	adds	r3, r7, #7
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	b25b      	sxtb	r3, r3
 800ed04:	0018      	movs	r0, r3
 800ed06:	f7ff ff21 	bl	800eb4c <__NVIC_EnableIRQ>
}
 800ed0a:	46c0      	nop			@ (mov r8, r8)
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	b002      	add	sp, #8
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800ed16:	f7ff ffa1 	bl	800ec5c <__NVIC_SystemReset>

0800ed1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b082      	sub	sp, #8
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	0018      	movs	r0, r3
 800ed26:	f7ff ffab 	bl	800ec80 <SysTick_Config>
 800ed2a:	0003      	movs	r3, r0
}
 800ed2c:	0018      	movs	r0, r3
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	b002      	add	sp, #8
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d101      	bne.n	800ed46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e061      	b.n	800ee0a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a32      	ldr	r2, [pc, #200]	@ (800ee14 <HAL_DMA_Init+0xe0>)
 800ed4c:	4694      	mov	ip, r2
 800ed4e:	4463      	add	r3, ip
 800ed50:	2114      	movs	r1, #20
 800ed52:	0018      	movs	r0, r3
 800ed54:	f7f1 fa26 	bl	80001a4 <__udivsi3>
 800ed58:	0003      	movs	r3, r0
 800ed5a:	009a      	lsls	r2, r3, #2
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a2d      	ldr	r2, [pc, #180]	@ (800ee18 <HAL_DMA_Init+0xe4>)
 800ed64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2225      	movs	r2, #37	@ 0x25
 800ed6a:	2102      	movs	r1, #2
 800ed6c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	4a28      	ldr	r2, [pc, #160]	@ (800ee1c <HAL_DMA_Init+0xe8>)
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ed86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	691b      	ldr	r3, [r3, #16]
 800ed8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ed92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	699b      	ldr	r3, [r3, #24]
 800ed98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6a1b      	ldr	r3, [r3, #32]
 800eda4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800eda6:	68fa      	ldr	r2, [r7, #12]
 800eda8:	4313      	orrs	r3, r2
 800edaa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	689a      	ldr	r2, [r3, #8]
 800edb8:	2380      	movs	r3, #128	@ 0x80
 800edba:	01db      	lsls	r3, r3, #7
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d018      	beq.n	800edf2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800edc0:	4b17      	ldr	r3, [pc, #92]	@ (800ee20 <HAL_DMA_Init+0xec>)
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edc8:	211c      	movs	r1, #28
 800edca:	400b      	ands	r3, r1
 800edcc:	210f      	movs	r1, #15
 800edce:	4099      	lsls	r1, r3
 800edd0:	000b      	movs	r3, r1
 800edd2:	43d9      	mvns	r1, r3
 800edd4:	4b12      	ldr	r3, [pc, #72]	@ (800ee20 <HAL_DMA_Init+0xec>)
 800edd6:	400a      	ands	r2, r1
 800edd8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800edda:	4b11      	ldr	r3, [pc, #68]	@ (800ee20 <HAL_DMA_Init+0xec>)
 800eddc:	6819      	ldr	r1, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685a      	ldr	r2, [r3, #4]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ede6:	201c      	movs	r0, #28
 800ede8:	4003      	ands	r3, r0
 800edea:	409a      	lsls	r2, r3
 800edec:	4b0c      	ldr	r3, [pc, #48]	@ (800ee20 <HAL_DMA_Init+0xec>)
 800edee:	430a      	orrs	r2, r1
 800edf0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2225      	movs	r2, #37	@ 0x25
 800edfc:	2101      	movs	r1, #1
 800edfe:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2224      	movs	r2, #36	@ 0x24
 800ee04:	2100      	movs	r1, #0
 800ee06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	0018      	movs	r0, r3
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	b004      	add	sp, #16
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	46c0      	nop			@ (mov r8, r8)
 800ee14:	bffdfff8 	.word	0xbffdfff8
 800ee18:	40020000 	.word	0x40020000
 800ee1c:	ffff800f 	.word	0xffff800f
 800ee20:	400200a8 	.word	0x400200a8

0800ee24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee32:	2317      	movs	r3, #23
 800ee34:	18fb      	adds	r3, r7, r3
 800ee36:	2200      	movs	r2, #0
 800ee38:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2224      	movs	r2, #36	@ 0x24
 800ee3e:	5c9b      	ldrb	r3, [r3, r2]
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d101      	bne.n	800ee48 <HAL_DMA_Start_IT+0x24>
 800ee44:	2302      	movs	r3, #2
 800ee46:	e04f      	b.n	800eee8 <HAL_DMA_Start_IT+0xc4>
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2224      	movs	r2, #36	@ 0x24
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2225      	movs	r2, #37	@ 0x25
 800ee54:	5c9b      	ldrb	r3, [r3, r2]
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d13a      	bne.n	800eed2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2225      	movs	r2, #37	@ 0x25
 800ee60:	2102      	movs	r1, #2
 800ee62:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2200      	movs	r2, #0
 800ee68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2101      	movs	r1, #1
 800ee76:	438a      	bics	r2, r1
 800ee78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 f976 	bl	800f172 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d008      	beq.n	800eea0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	210e      	movs	r1, #14
 800ee9a:	430a      	orrs	r2, r1
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	e00f      	b.n	800eec0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2104      	movs	r1, #4
 800eeac:	438a      	bics	r2, r1
 800eeae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	210a      	movs	r1, #10
 800eebc:	430a      	orrs	r2, r1
 800eebe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2101      	movs	r1, #1
 800eecc:	430a      	orrs	r2, r1
 800eece:	601a      	str	r2, [r3, #0]
 800eed0:	e007      	b.n	800eee2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2224      	movs	r2, #36	@ 0x24
 800eed6:	2100      	movs	r1, #0
 800eed8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800eeda:	2317      	movs	r3, #23
 800eedc:	18fb      	adds	r3, r7, r3
 800eede:	2202      	movs	r2, #2
 800eee0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800eee2:	2317      	movs	r3, #23
 800eee4:	18fb      	adds	r3, r7, r3
 800eee6:	781b      	ldrb	r3, [r3, #0]
}
 800eee8:	0018      	movs	r0, r3
 800eeea:	46bd      	mov	sp, r7
 800eeec:	b006      	add	sp, #24
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eef8:	230f      	movs	r3, #15
 800eefa:	18fb      	adds	r3, r7, r3
 800eefc:	2200      	movs	r2, #0
 800eefe:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2225      	movs	r2, #37	@ 0x25
 800ef04:	5c9b      	ldrb	r3, [r3, r2]
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	2b02      	cmp	r3, #2
 800ef0a:	d008      	beq.n	800ef1e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2204      	movs	r2, #4
 800ef10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2224      	movs	r2, #36	@ 0x24
 800ef16:	2100      	movs	r1, #0
 800ef18:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e024      	b.n	800ef68 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	210e      	movs	r1, #14
 800ef2a:	438a      	bics	r2, r1
 800ef2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2101      	movs	r1, #1
 800ef3a:	438a      	bics	r2, r1
 800ef3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef42:	221c      	movs	r2, #28
 800ef44:	401a      	ands	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef4a:	2101      	movs	r1, #1
 800ef4c:	4091      	lsls	r1, r2
 800ef4e:	000a      	movs	r2, r1
 800ef50:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2225      	movs	r2, #37	@ 0x25
 800ef56:	2101      	movs	r1, #1
 800ef58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2224      	movs	r2, #36	@ 0x24
 800ef5e:	2100      	movs	r1, #0
 800ef60:	5499      	strb	r1, [r3, r2]

    return status;
 800ef62:	230f      	movs	r3, #15
 800ef64:	18fb      	adds	r3, r7, r3
 800ef66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef68:	0018      	movs	r0, r3
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	b004      	add	sp, #16
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef78:	210f      	movs	r1, #15
 800ef7a:	187b      	adds	r3, r7, r1
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2225      	movs	r2, #37	@ 0x25
 800ef84:	5c9b      	ldrb	r3, [r3, r2]
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d006      	beq.n	800ef9a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2204      	movs	r2, #4
 800ef90:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ef92:	187b      	adds	r3, r7, r1
 800ef94:	2201      	movs	r2, #1
 800ef96:	701a      	strb	r2, [r3, #0]
 800ef98:	e02a      	b.n	800eff0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	210e      	movs	r1, #14
 800efa6:	438a      	bics	r2, r1
 800efa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2101      	movs	r1, #1
 800efb6:	438a      	bics	r2, r1
 800efb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efbe:	221c      	movs	r2, #28
 800efc0:	401a      	ands	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efc6:	2101      	movs	r1, #1
 800efc8:	4091      	lsls	r1, r2
 800efca:	000a      	movs	r2, r1
 800efcc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2225      	movs	r2, #37	@ 0x25
 800efd2:	2101      	movs	r1, #1
 800efd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2224      	movs	r2, #36	@ 0x24
 800efda:	2100      	movs	r1, #0
 800efdc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d004      	beq.n	800eff0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	0010      	movs	r0, r2
 800efee:	4798      	blx	r3
    }
  }
  return status;
 800eff0:	230f      	movs	r3, #15
 800eff2:	18fb      	adds	r3, r7, r3
 800eff4:	781b      	ldrb	r3, [r3, #0]
}
 800eff6:	0018      	movs	r0, r3
 800eff8:	46bd      	mov	sp, r7
 800effa:	b004      	add	sp, #16
 800effc:	bd80      	pop	{r7, pc}

0800effe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b084      	sub	sp, #16
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f01a:	221c      	movs	r2, #28
 800f01c:	4013      	ands	r3, r2
 800f01e:	2204      	movs	r2, #4
 800f020:	409a      	lsls	r2, r3
 800f022:	0013      	movs	r3, r2
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	4013      	ands	r3, r2
 800f028:	d026      	beq.n	800f078 <HAL_DMA_IRQHandler+0x7a>
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	2204      	movs	r2, #4
 800f02e:	4013      	ands	r3, r2
 800f030:	d022      	beq.n	800f078 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2220      	movs	r2, #32
 800f03a:	4013      	ands	r3, r2
 800f03c:	d107      	bne.n	800f04e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2104      	movs	r1, #4
 800f04a:	438a      	bics	r2, r1
 800f04c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f052:	221c      	movs	r2, #28
 800f054:	401a      	ands	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f05a:	2104      	movs	r1, #4
 800f05c:	4091      	lsls	r1, r2
 800f05e:	000a      	movs	r2, r1
 800f060:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f066:	2b00      	cmp	r3, #0
 800f068:	d100      	bne.n	800f06c <HAL_DMA_IRQHandler+0x6e>
 800f06a:	e071      	b.n	800f150 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	0010      	movs	r0, r2
 800f074:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800f076:	e06b      	b.n	800f150 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f07c:	221c      	movs	r2, #28
 800f07e:	4013      	ands	r3, r2
 800f080:	2202      	movs	r2, #2
 800f082:	409a      	lsls	r2, r3
 800f084:	0013      	movs	r3, r2
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	4013      	ands	r3, r2
 800f08a:	d02d      	beq.n	800f0e8 <HAL_DMA_IRQHandler+0xea>
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	2202      	movs	r2, #2
 800f090:	4013      	ands	r3, r2
 800f092:	d029      	beq.n	800f0e8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2220      	movs	r2, #32
 800f09c:	4013      	ands	r3, r2
 800f09e:	d10b      	bne.n	800f0b8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	210a      	movs	r1, #10
 800f0ac:	438a      	bics	r2, r1
 800f0ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2225      	movs	r2, #37	@ 0x25
 800f0b4:	2101      	movs	r1, #1
 800f0b6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0bc:	221c      	movs	r2, #28
 800f0be:	401a      	ands	r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0c4:	2102      	movs	r1, #2
 800f0c6:	4091      	lsls	r1, r2
 800f0c8:	000a      	movs	r2, r1
 800f0ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2224      	movs	r2, #36	@ 0x24
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d039      	beq.n	800f150 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	0010      	movs	r0, r2
 800f0e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f0e6:	e033      	b.n	800f150 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0ec:	221c      	movs	r2, #28
 800f0ee:	4013      	ands	r3, r2
 800f0f0:	2208      	movs	r2, #8
 800f0f2:	409a      	lsls	r2, r3
 800f0f4:	0013      	movs	r3, r2
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	d02a      	beq.n	800f152 <HAL_DMA_IRQHandler+0x154>
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	2208      	movs	r2, #8
 800f100:	4013      	ands	r3, r2
 800f102:	d026      	beq.n	800f152 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	210e      	movs	r1, #14
 800f110:	438a      	bics	r2, r1
 800f112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f118:	221c      	movs	r2, #28
 800f11a:	401a      	ands	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f120:	2101      	movs	r1, #1
 800f122:	4091      	lsls	r1, r2
 800f124:	000a      	movs	r2, r1
 800f126:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2201      	movs	r2, #1
 800f12c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2225      	movs	r2, #37	@ 0x25
 800f132:	2101      	movs	r1, #1
 800f134:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2224      	movs	r2, #36	@ 0x24
 800f13a:	2100      	movs	r1, #0
 800f13c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f142:	2b00      	cmp	r3, #0
 800f144:	d005      	beq.n	800f152 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	0010      	movs	r0, r2
 800f14e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f150:	46c0      	nop			@ (mov r8, r8)
 800f152:	46c0      	nop			@ (mov r8, r8)
}
 800f154:	46bd      	mov	sp, r7
 800f156:	b004      	add	sp, #16
 800f158:	bd80      	pop	{r7, pc}

0800f15a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b082      	sub	sp, #8
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2225      	movs	r2, #37	@ 0x25
 800f166:	5c9b      	ldrb	r3, [r3, r2]
 800f168:	b2db      	uxtb	r3, r3
}
 800f16a:	0018      	movs	r0, r3
 800f16c:	46bd      	mov	sp, r7
 800f16e:	b002      	add	sp, #8
 800f170:	bd80      	pop	{r7, pc}

0800f172 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b084      	sub	sp, #16
 800f176:	af00      	add	r7, sp, #0
 800f178:	60f8      	str	r0, [r7, #12]
 800f17a:	60b9      	str	r1, [r7, #8]
 800f17c:	607a      	str	r2, [r7, #4]
 800f17e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f184:	221c      	movs	r2, #28
 800f186:	401a      	ands	r2, r3
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f18c:	2101      	movs	r1, #1
 800f18e:	4091      	lsls	r1, r2
 800f190:	000a      	movs	r2, r1
 800f192:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	2b10      	cmp	r3, #16
 800f1a2:	d108      	bne.n	800f1b6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f1b4:	e007      	b.n	800f1c6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	60da      	str	r2, [r3, #12]
}
 800f1c6:	46c0      	nop			@ (mov r8, r8)
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	b004      	add	sp, #16
 800f1cc:	bd80      	pop	{r7, pc}
	...

0800f1d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800f1d8:	f7ff f8d2 	bl	800e380 <HAL_GetTick>
 800f1dc:	0003      	movs	r3, r0
 800f1de:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f1e0:	e00f      	b.n	800f202 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	d00c      	beq.n	800f202 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d007      	beq.n	800f1fe <FLASH_WaitForLastOperation+0x2e>
 800f1ee:	f7ff f8c7 	bl	800e380 <HAL_GetTick>
 800f1f2:	0002      	movs	r2, r0
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	1ad3      	subs	r3, r2, r3
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d201      	bcs.n	800f202 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e052      	b.n	800f2a8 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f202:	4b2b      	ldr	r3, [pc, #172]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	2201      	movs	r2, #1
 800f208:	4013      	ands	r3, r2
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d0e9      	beq.n	800f1e2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f20e:	4b28      	ldr	r3, [pc, #160]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	2202      	movs	r2, #2
 800f214:	4013      	ands	r3, r2
 800f216:	2b02      	cmp	r3, #2
 800f218:	d102      	bne.n	800f220 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f21a:	4b25      	ldr	r3, [pc, #148]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f21c:	2202      	movs	r2, #2
 800f21e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f220:	4b23      	ldr	r3, [pc, #140]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f222:	699a      	ldr	r2, [r3, #24]
 800f224:	2380      	movs	r3, #128	@ 0x80
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	401a      	ands	r2, r3
 800f22a:	2380      	movs	r3, #128	@ 0x80
 800f22c:	005b      	lsls	r3, r3, #1
 800f22e:	429a      	cmp	r2, r3
 800f230:	d035      	beq.n	800f29e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f232:	4b1f      	ldr	r3, [pc, #124]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f234:	699a      	ldr	r2, [r3, #24]
 800f236:	2380      	movs	r3, #128	@ 0x80
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f23c:	2380      	movs	r3, #128	@ 0x80
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	429a      	cmp	r2, r3
 800f242:	d02c      	beq.n	800f29e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f244:	4b1a      	ldr	r3, [pc, #104]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f246:	699a      	ldr	r2, [r3, #24]
 800f248:	2380      	movs	r3, #128	@ 0x80
 800f24a:	00db      	lsls	r3, r3, #3
 800f24c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f24e:	2380      	movs	r3, #128	@ 0x80
 800f250:	00db      	lsls	r3, r3, #3
 800f252:	429a      	cmp	r2, r3
 800f254:	d023      	beq.n	800f29e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f256:	4b16      	ldr	r3, [pc, #88]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f258:	699a      	ldr	r2, [r3, #24]
 800f25a:	2380      	movs	r3, #128	@ 0x80
 800f25c:	011b      	lsls	r3, r3, #4
 800f25e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f260:	2380      	movs	r3, #128	@ 0x80
 800f262:	011b      	lsls	r3, r3, #4
 800f264:	429a      	cmp	r2, r3
 800f266:	d01a      	beq.n	800f29e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f268:	4b11      	ldr	r3, [pc, #68]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f26a:	699a      	ldr	r2, [r3, #24]
 800f26c:	2380      	movs	r3, #128	@ 0x80
 800f26e:	019b      	lsls	r3, r3, #6
 800f270:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f272:	2380      	movs	r3, #128	@ 0x80
 800f274:	019b      	lsls	r3, r3, #6
 800f276:	429a      	cmp	r2, r3
 800f278:	d011      	beq.n	800f29e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f27a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f27c:	699a      	ldr	r2, [r3, #24]
 800f27e:	2380      	movs	r3, #128	@ 0x80
 800f280:	029b      	lsls	r3, r3, #10
 800f282:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f284:	2380      	movs	r3, #128	@ 0x80
 800f286:	029b      	lsls	r3, r3, #10
 800f288:	429a      	cmp	r2, r3
 800f28a:	d008      	beq.n	800f29e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800f28c:	4b08      	ldr	r3, [pc, #32]	@ (800f2b0 <FLASH_WaitForLastOperation+0xe0>)
 800f28e:	699a      	ldr	r2, [r3, #24]
 800f290:	2380      	movs	r3, #128	@ 0x80
 800f292:	025b      	lsls	r3, r3, #9
 800f294:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f296:	2380      	movs	r3, #128	@ 0x80
 800f298:	025b      	lsls	r3, r3, #9
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d103      	bne.n	800f2a6 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800f29e:	f000 f809 	bl	800f2b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e000      	b.n	800f2a8 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	0018      	movs	r0, r3
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	b004      	add	sp, #16
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	40022000 	.word	0x40022000

0800f2b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f2be:	4b49      	ldr	r3, [pc, #292]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f2c0:	699a      	ldr	r2, [r3, #24]
 800f2c2:	2380      	movs	r3, #128	@ 0x80
 800f2c4:	005b      	lsls	r3, r3, #1
 800f2c6:	401a      	ands	r2, r3
 800f2c8:	2380      	movs	r3, #128	@ 0x80
 800f2ca:	005b      	lsls	r3, r3, #1
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d10a      	bne.n	800f2e6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f2d0:	4b45      	ldr	r3, [pc, #276]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f2d2:	695b      	ldr	r3, [r3, #20]
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	431a      	orrs	r2, r3
 800f2d8:	4b43      	ldr	r3, [pc, #268]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f2da:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2280      	movs	r2, #128	@ 0x80
 800f2e0:	0052      	lsls	r2, r2, #1
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800f2e6:	4b3f      	ldr	r3, [pc, #252]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f2e8:	699a      	ldr	r2, [r3, #24]
 800f2ea:	2380      	movs	r3, #128	@ 0x80
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	401a      	ands	r2, r3
 800f2f0:	2380      	movs	r3, #128	@ 0x80
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d10a      	bne.n	800f30e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f2f8:	4b3b      	ldr	r3, [pc, #236]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f2fa:	695b      	ldr	r3, [r3, #20]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	431a      	orrs	r2, r3
 800f300:	4b39      	ldr	r3, [pc, #228]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f302:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2280      	movs	r2, #128	@ 0x80
 800f308:	0092      	lsls	r2, r2, #2
 800f30a:	4313      	orrs	r3, r2
 800f30c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800f30e:	4b35      	ldr	r3, [pc, #212]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f310:	699a      	ldr	r2, [r3, #24]
 800f312:	2380      	movs	r3, #128	@ 0x80
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	401a      	ands	r2, r3
 800f318:	2380      	movs	r3, #128	@ 0x80
 800f31a:	00db      	lsls	r3, r3, #3
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d10a      	bne.n	800f336 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800f320:	4b31      	ldr	r3, [pc, #196]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f322:	695b      	ldr	r3, [r3, #20]
 800f324:	2208      	movs	r2, #8
 800f326:	431a      	orrs	r2, r3
 800f328:	4b2f      	ldr	r3, [pc, #188]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f32a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2280      	movs	r2, #128	@ 0x80
 800f330:	00d2      	lsls	r2, r2, #3
 800f332:	4313      	orrs	r3, r2
 800f334:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800f336:	4b2b      	ldr	r3, [pc, #172]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f338:	699a      	ldr	r2, [r3, #24]
 800f33a:	2380      	movs	r3, #128	@ 0x80
 800f33c:	011b      	lsls	r3, r3, #4
 800f33e:	401a      	ands	r2, r3
 800f340:	2380      	movs	r3, #128	@ 0x80
 800f342:	011b      	lsls	r3, r3, #4
 800f344:	429a      	cmp	r2, r3
 800f346:	d10a      	bne.n	800f35e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800f348:	4b27      	ldr	r3, [pc, #156]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f34a:	695b      	ldr	r3, [r3, #20]
 800f34c:	2204      	movs	r2, #4
 800f34e:	431a      	orrs	r2, r3
 800f350:	4b25      	ldr	r3, [pc, #148]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f352:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2280      	movs	r2, #128	@ 0x80
 800f358:	0112      	lsls	r2, r2, #4
 800f35a:	4313      	orrs	r3, r2
 800f35c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800f35e:	4b21      	ldr	r3, [pc, #132]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f360:	699a      	ldr	r2, [r3, #24]
 800f362:	2380      	movs	r3, #128	@ 0x80
 800f364:	019b      	lsls	r3, r3, #6
 800f366:	401a      	ands	r2, r3
 800f368:	2380      	movs	r3, #128	@ 0x80
 800f36a:	019b      	lsls	r3, r3, #6
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d10a      	bne.n	800f386 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f370:	4b1d      	ldr	r3, [pc, #116]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f372:	695b      	ldr	r3, [r3, #20]
 800f374:	2210      	movs	r2, #16
 800f376:	431a      	orrs	r2, r3
 800f378:	4b1b      	ldr	r3, [pc, #108]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f37a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2280      	movs	r2, #128	@ 0x80
 800f380:	0192      	lsls	r2, r2, #6
 800f382:	4313      	orrs	r3, r2
 800f384:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800f386:	4b17      	ldr	r3, [pc, #92]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f388:	699a      	ldr	r2, [r3, #24]
 800f38a:	2380      	movs	r3, #128	@ 0x80
 800f38c:	029b      	lsls	r3, r3, #10
 800f38e:	401a      	ands	r2, r3
 800f390:	2380      	movs	r3, #128	@ 0x80
 800f392:	029b      	lsls	r3, r3, #10
 800f394:	429a      	cmp	r2, r3
 800f396:	d109      	bne.n	800f3ac <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800f398:	4b13      	ldr	r3, [pc, #76]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f39a:	695b      	ldr	r3, [r3, #20]
 800f39c:	2220      	movs	r2, #32
 800f39e:	431a      	orrs	r2, r3
 800f3a0:	4b11      	ldr	r3, [pc, #68]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f3a2:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2220      	movs	r2, #32
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800f3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f3ae:	699a      	ldr	r2, [r3, #24]
 800f3b0:	2380      	movs	r3, #128	@ 0x80
 800f3b2:	025b      	lsls	r3, r3, #9
 800f3b4:	401a      	ands	r2, r3
 800f3b6:	2380      	movs	r3, #128	@ 0x80
 800f3b8:	025b      	lsls	r3, r3, #9
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d10a      	bne.n	800f3d4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800f3be:	4b0a      	ldr	r3, [pc, #40]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f3c0:	695b      	ldr	r3, [r3, #20]
 800f3c2:	2240      	movs	r2, #64	@ 0x40
 800f3c4:	431a      	orrs	r2, r3
 800f3c6:	4b08      	ldr	r3, [pc, #32]	@ (800f3e8 <FLASH_SetErrorCode+0x134>)
 800f3c8:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2280      	movs	r2, #128	@ 0x80
 800f3ce:	0252      	lsls	r2, r2, #9
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800f3d4:	4b03      	ldr	r3, [pc, #12]	@ (800f3e4 <FLASH_SetErrorCode+0x130>)
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	619a      	str	r2, [r3, #24]
}  
 800f3da:	46c0      	nop			@ (mov r8, r8)
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	b002      	add	sp, #8
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	46c0      	nop			@ (mov r8, r8)
 800f3e4:	40022000 	.word	0x40022000
 800f3e8:	20002504 	.word	0x20002504

0800f3ec <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f3f2:	4b12      	ldr	r3, [pc, #72]	@ (800f43c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	d019      	beq.n	800f430 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f400:	607b      	str	r3, [r7, #4]
  return(result);
 800f402:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800f404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f406:	b672      	cpsid	i
}
 800f408:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800f40a:	4b0c      	ldr	r3, [pc, #48]	@ (800f43c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f40c:	4a0c      	ldr	r2, [pc, #48]	@ (800f440 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800f40e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800f410:	4b0a      	ldr	r3, [pc, #40]	@ (800f43c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f412:	4a0c      	ldr	r2, [pc, #48]	@ (800f444 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800f414:	60da      	str	r2, [r3, #12]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	f383 8810 	msr	PRIMASK, r3
}
 800f420:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f422:	4b06      	ldr	r3, [pc, #24]	@ (800f43c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	4013      	ands	r3, r2
 800f42a:	d001      	beq.n	800f430 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800f42c:	2301      	movs	r3, #1
 800f42e:	e000      	b.n	800f432 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800f430:	2300      	movs	r3, #0
}
 800f432:	0018      	movs	r0, r3
 800f434:	46bd      	mov	sp, r7
 800f436:	b004      	add	sp, #16
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	46c0      	nop			@ (mov r8, r8)
 800f43c:	40022000 	.word	0x40022000
 800f440:	89abcdef 	.word	0x89abcdef
 800f444:	02030405 	.word	0x02030405

0800f448 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800f44c:	4b04      	ldr	r3, [pc, #16]	@ (800f460 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	4b03      	ldr	r3, [pc, #12]	@ (800f460 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f452:	2101      	movs	r1, #1
 800f454:	430a      	orrs	r2, r1
 800f456:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	0018      	movs	r0, r3
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	40022000 	.word	0x40022000

0800f464 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800f464:	b5b0      	push	{r4, r5, r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f46c:	250f      	movs	r5, #15
 800f46e:	197b      	adds	r3, r7, r5
 800f470:	2200      	movs	r2, #0
 800f472:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f474:	197c      	adds	r4, r7, r5
 800f476:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f478:	0018      	movs	r0, r3
 800f47a:	f7ff fea9 	bl	800f1d0 <FLASH_WaitForLastOperation>
 800f47e:	0003      	movs	r3, r0
 800f480:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f482:	0029      	movs	r1, r5
 800f484:	187b      	adds	r3, r7, r1
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10c      	bne.n	800f4a6 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f48c:	4b0a      	ldr	r3, [pc, #40]	@ (800f4b8 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800f48e:	2200      	movs	r2, #0
 800f490:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f498:	187c      	adds	r4, r7, r1
 800f49a:	4b06      	ldr	r3, [pc, #24]	@ (800f4b4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f49c:	0018      	movs	r0, r3
 800f49e:	f7ff fe97 	bl	800f1d0 <FLASH_WaitForLastOperation>
 800f4a2:	0003      	movs	r3, r0
 800f4a4:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f4a6:	230f      	movs	r3, #15
 800f4a8:	18fb      	adds	r3, r7, r3
 800f4aa:	781b      	ldrb	r3, [r3, #0]
}  
 800f4ac:	0018      	movs	r0, r3
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	b004      	add	sp, #16
 800f4b2:	bdb0      	pop	{r4, r5, r7, pc}
 800f4b4:	0000c350 	.word	0x0000c350
 800f4b8:	20002504 	.word	0x20002504

0800f4bc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f4bc:	b5b0      	push	{r4, r5, r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f4c8:	2317      	movs	r3, #23
 800f4ca:	18fb      	adds	r3, r7, r3
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f4d0:	4b24      	ldr	r3, [pc, #144]	@ (800f564 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f4d2:	7c1b      	ldrb	r3, [r3, #16]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d101      	bne.n	800f4dc <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f4d8:	2302      	movs	r3, #2
 800f4da:	e03e      	b.n	800f55a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f4dc:	4b21      	ldr	r3, [pc, #132]	@ (800f564 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f4de:	2201      	movs	r2, #1
 800f4e0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4e2:	2517      	movs	r5, #23
 800f4e4:	197c      	adds	r4, r7, r5
 800f4e6:	4b20      	ldr	r3, [pc, #128]	@ (800f568 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f4e8:	0018      	movs	r0, r3
 800f4ea:	f7ff fe71 	bl	800f1d0 <FLASH_WaitForLastOperation>
 800f4ee:	0003      	movs	r3, r0
 800f4f0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f4f2:	197b      	adds	r3, r7, r5
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d129      	bne.n	800f54e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f4fa:	4b1a      	ldr	r3, [pc, #104]	@ (800f564 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2b02      	cmp	r3, #2
 800f504:	d103      	bne.n	800f50e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	e013      	b.n	800f536 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b01      	cmp	r3, #1
 800f512:	d104      	bne.n	800f51e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	b292      	uxth	r2, r2
 800f51a:	801a      	strh	r2, [r3, #0]
 800f51c:	e00b      	b.n	800f536 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d104      	bne.n	800f52e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	b2d2      	uxtb	r2, r2
 800f52a:	701a      	strb	r2, [r3, #0]
 800f52c:	e003      	b.n	800f536 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f52e:	2317      	movs	r3, #23
 800f530:	18fb      	adds	r3, r7, r3
 800f532:	2201      	movs	r2, #1
 800f534:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f536:	2217      	movs	r2, #23
 800f538:	18bb      	adds	r3, r7, r2
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d106      	bne.n	800f54e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f540:	18bc      	adds	r4, r7, r2
 800f542:	4b09      	ldr	r3, [pc, #36]	@ (800f568 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f544:	0018      	movs	r0, r3
 800f546:	f7ff fe43 	bl	800f1d0 <FLASH_WaitForLastOperation>
 800f54a:	0003      	movs	r3, r0
 800f54c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f54e:	4b05      	ldr	r3, [pc, #20]	@ (800f564 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f550:	2200      	movs	r2, #0
 800f552:	741a      	strb	r2, [r3, #16]

  return status;
 800f554:	2317      	movs	r3, #23
 800f556:	18fb      	adds	r3, r7, r3
 800f558:	781b      	ldrb	r3, [r3, #0]
}
 800f55a:	0018      	movs	r0, r3
 800f55c:	46bd      	mov	sp, r7
 800f55e:	b006      	add	sp, #24
 800f560:	bdb0      	pop	{r4, r5, r7, pc}
 800f562:	46c0      	nop			@ (mov r8, r8)
 800f564:	20002504 	.word	0x20002504
 800f568:	0000c350 	.word	0x0000c350

0800f56c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b086      	sub	sp, #24
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f576:	2300      	movs	r3, #0
 800f578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f57a:	2300      	movs	r3, #0
 800f57c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f57e:	2300      	movs	r3, #0
 800f580:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f582:	e155      	b.n	800f830 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2101      	movs	r1, #1
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	4091      	lsls	r1, r2
 800f58e:	000a      	movs	r2, r1
 800f590:	4013      	ands	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d100      	bne.n	800f59c <HAL_GPIO_Init+0x30>
 800f59a:	e146      	b.n	800f82a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	2203      	movs	r2, #3
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d005      	beq.n	800f5b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	2203      	movs	r2, #3
 800f5ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f5b0:	2b02      	cmp	r3, #2
 800f5b2:	d130      	bne.n	800f616 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	005b      	lsls	r3, r3, #1
 800f5be:	2203      	movs	r2, #3
 800f5c0:	409a      	lsls	r2, r3
 800f5c2:	0013      	movs	r3, r2
 800f5c4:	43da      	mvns	r2, r3
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	4013      	ands	r3, r2
 800f5ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	68da      	ldr	r2, [r3, #12]
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	409a      	lsls	r2, r3
 800f5d6:	0013      	movs	r3, r2
 800f5d8:	693a      	ldr	r2, [r7, #16]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	693a      	ldr	r2, [r7, #16]
 800f5e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	409a      	lsls	r2, r3
 800f5f0:	0013      	movs	r3, r2
 800f5f2:	43da      	mvns	r2, r3
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	091b      	lsrs	r3, r3, #4
 800f600:	2201      	movs	r2, #1
 800f602:	401a      	ands	r2, r3
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	409a      	lsls	r2, r3
 800f608:	0013      	movs	r3, r2
 800f60a:	693a      	ldr	r2, [r7, #16]
 800f60c:	4313      	orrs	r3, r2
 800f60e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	2203      	movs	r2, #3
 800f61c:	4013      	ands	r3, r2
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d017      	beq.n	800f652 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	2203      	movs	r2, #3
 800f62e:	409a      	lsls	r2, r3
 800f630:	0013      	movs	r3, r2
 800f632:	43da      	mvns	r2, r3
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	4013      	ands	r3, r2
 800f638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	689a      	ldr	r2, [r3, #8]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	409a      	lsls	r2, r3
 800f644:	0013      	movs	r3, r2
 800f646:	693a      	ldr	r2, [r7, #16]
 800f648:	4313      	orrs	r3, r2
 800f64a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	693a      	ldr	r2, [r7, #16]
 800f650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	2203      	movs	r2, #3
 800f658:	4013      	ands	r3, r2
 800f65a:	2b02      	cmp	r3, #2
 800f65c:	d123      	bne.n	800f6a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	08da      	lsrs	r2, r3, #3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	3208      	adds	r2, #8
 800f666:	0092      	lsls	r2, r2, #2
 800f668:	58d3      	ldr	r3, [r2, r3]
 800f66a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2207      	movs	r2, #7
 800f670:	4013      	ands	r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	220f      	movs	r2, #15
 800f676:	409a      	lsls	r2, r3
 800f678:	0013      	movs	r3, r2
 800f67a:	43da      	mvns	r2, r3
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	4013      	ands	r3, r2
 800f680:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	691a      	ldr	r2, [r3, #16]
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2107      	movs	r1, #7
 800f68a:	400b      	ands	r3, r1
 800f68c:	009b      	lsls	r3, r3, #2
 800f68e:	409a      	lsls	r2, r3
 800f690:	0013      	movs	r3, r2
 800f692:	693a      	ldr	r2, [r7, #16]
 800f694:	4313      	orrs	r3, r2
 800f696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	08da      	lsrs	r2, r3, #3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	3208      	adds	r2, #8
 800f6a0:	0092      	lsls	r2, r2, #2
 800f6a2:	6939      	ldr	r1, [r7, #16]
 800f6a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	005b      	lsls	r3, r3, #1
 800f6b0:	2203      	movs	r2, #3
 800f6b2:	409a      	lsls	r2, r3
 800f6b4:	0013      	movs	r3, r2
 800f6b6:	43da      	mvns	r2, r3
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	4013      	ands	r3, r2
 800f6bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	2203      	movs	r2, #3
 800f6c4:	401a      	ands	r2, r3
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	409a      	lsls	r2, r3
 800f6cc:	0013      	movs	r3, r2
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	693a      	ldr	r2, [r7, #16]
 800f6d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	685a      	ldr	r2, [r3, #4]
 800f6de:	23c0      	movs	r3, #192	@ 0xc0
 800f6e0:	029b      	lsls	r3, r3, #10
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	d100      	bne.n	800f6e8 <HAL_GPIO_Init+0x17c>
 800f6e6:	e0a0      	b.n	800f82a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f6e8:	4b57      	ldr	r3, [pc, #348]	@ (800f848 <HAL_GPIO_Init+0x2dc>)
 800f6ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6ec:	4b56      	ldr	r3, [pc, #344]	@ (800f848 <HAL_GPIO_Init+0x2dc>)
 800f6ee:	2101      	movs	r1, #1
 800f6f0:	430a      	orrs	r2, r1
 800f6f2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800f6f4:	4a55      	ldr	r2, [pc, #340]	@ (800f84c <HAL_GPIO_Init+0x2e0>)
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	089b      	lsrs	r3, r3, #2
 800f6fa:	3302      	adds	r3, #2
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	589b      	ldr	r3, [r3, r2]
 800f700:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	2203      	movs	r2, #3
 800f706:	4013      	ands	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	220f      	movs	r2, #15
 800f70c:	409a      	lsls	r2, r3
 800f70e:	0013      	movs	r3, r2
 800f710:	43da      	mvns	r2, r3
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	4013      	ands	r3, r2
 800f716:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	23a0      	movs	r3, #160	@ 0xa0
 800f71c:	05db      	lsls	r3, r3, #23
 800f71e:	429a      	cmp	r2, r3
 800f720:	d01f      	beq.n	800f762 <HAL_GPIO_Init+0x1f6>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4a4a      	ldr	r2, [pc, #296]	@ (800f850 <HAL_GPIO_Init+0x2e4>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d019      	beq.n	800f75e <HAL_GPIO_Init+0x1f2>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4a49      	ldr	r2, [pc, #292]	@ (800f854 <HAL_GPIO_Init+0x2e8>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d013      	beq.n	800f75a <HAL_GPIO_Init+0x1ee>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4a48      	ldr	r2, [pc, #288]	@ (800f858 <HAL_GPIO_Init+0x2ec>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d00d      	beq.n	800f756 <HAL_GPIO_Init+0x1ea>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a47      	ldr	r2, [pc, #284]	@ (800f85c <HAL_GPIO_Init+0x2f0>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d007      	beq.n	800f752 <HAL_GPIO_Init+0x1e6>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a46      	ldr	r2, [pc, #280]	@ (800f860 <HAL_GPIO_Init+0x2f4>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d101      	bne.n	800f74e <HAL_GPIO_Init+0x1e2>
 800f74a:	2305      	movs	r3, #5
 800f74c:	e00a      	b.n	800f764 <HAL_GPIO_Init+0x1f8>
 800f74e:	2306      	movs	r3, #6
 800f750:	e008      	b.n	800f764 <HAL_GPIO_Init+0x1f8>
 800f752:	2304      	movs	r3, #4
 800f754:	e006      	b.n	800f764 <HAL_GPIO_Init+0x1f8>
 800f756:	2303      	movs	r3, #3
 800f758:	e004      	b.n	800f764 <HAL_GPIO_Init+0x1f8>
 800f75a:	2302      	movs	r3, #2
 800f75c:	e002      	b.n	800f764 <HAL_GPIO_Init+0x1f8>
 800f75e:	2301      	movs	r3, #1
 800f760:	e000      	b.n	800f764 <HAL_GPIO_Init+0x1f8>
 800f762:	2300      	movs	r3, #0
 800f764:	697a      	ldr	r2, [r7, #20]
 800f766:	2103      	movs	r1, #3
 800f768:	400a      	ands	r2, r1
 800f76a:	0092      	lsls	r2, r2, #2
 800f76c:	4093      	lsls	r3, r2
 800f76e:	693a      	ldr	r2, [r7, #16]
 800f770:	4313      	orrs	r3, r2
 800f772:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f774:	4935      	ldr	r1, [pc, #212]	@ (800f84c <HAL_GPIO_Init+0x2e0>)
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	089b      	lsrs	r3, r3, #2
 800f77a:	3302      	adds	r3, #2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f782:	4b38      	ldr	r3, [pc, #224]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	43da      	mvns	r2, r3
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	4013      	ands	r3, r2
 800f790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	685a      	ldr	r2, [r3, #4]
 800f796:	2380      	movs	r3, #128	@ 0x80
 800f798:	035b      	lsls	r3, r3, #13
 800f79a:	4013      	ands	r3, r2
 800f79c:	d003      	beq.n	800f7a6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800f79e:	693a      	ldr	r2, [r7, #16]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800f7a6:	4b2f      	ldr	r3, [pc, #188]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f7a8:	693a      	ldr	r2, [r7, #16]
 800f7aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800f7ac:	4b2d      	ldr	r3, [pc, #180]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	43da      	mvns	r2, r3
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	4013      	ands	r3, r2
 800f7ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	685a      	ldr	r2, [r3, #4]
 800f7c0:	2380      	movs	r3, #128	@ 0x80
 800f7c2:	039b      	lsls	r3, r3, #14
 800f7c4:	4013      	ands	r3, r2
 800f7c6:	d003      	beq.n	800f7d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800f7d0:	4b24      	ldr	r3, [pc, #144]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800f7d6:	4b23      	ldr	r3, [pc, #140]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	43da      	mvns	r2, r3
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	4013      	ands	r3, r2
 800f7e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	685a      	ldr	r2, [r3, #4]
 800f7ea:	2380      	movs	r3, #128	@ 0x80
 800f7ec:	029b      	lsls	r3, r3, #10
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	d003      	beq.n	800f7fa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800f7f2:	693a      	ldr	r2, [r7, #16]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800f7fa:	4b1a      	ldr	r3, [pc, #104]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f7fc:	693a      	ldr	r2, [r7, #16]
 800f7fe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f800:	4b18      	ldr	r3, [pc, #96]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	43da      	mvns	r2, r3
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	4013      	ands	r3, r2
 800f80e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	685a      	ldr	r2, [r3, #4]
 800f814:	2380      	movs	r3, #128	@ 0x80
 800f816:	025b      	lsls	r3, r3, #9
 800f818:	4013      	ands	r3, r2
 800f81a:	d003      	beq.n	800f824 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f81c:	693a      	ldr	r2, [r7, #16]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	4313      	orrs	r3, r2
 800f822:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f824:	4b0f      	ldr	r3, [pc, #60]	@ (800f864 <HAL_GPIO_Init+0x2f8>)
 800f826:	693a      	ldr	r2, [r7, #16]
 800f828:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	3301      	adds	r3, #1
 800f82e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	40da      	lsrs	r2, r3
 800f838:	1e13      	subs	r3, r2, #0
 800f83a:	d000      	beq.n	800f83e <HAL_GPIO_Init+0x2d2>
 800f83c:	e6a2      	b.n	800f584 <HAL_GPIO_Init+0x18>
  }
}
 800f83e:	46c0      	nop			@ (mov r8, r8)
 800f840:	46c0      	nop			@ (mov r8, r8)
 800f842:	46bd      	mov	sp, r7
 800f844:	b006      	add	sp, #24
 800f846:	bd80      	pop	{r7, pc}
 800f848:	40021000 	.word	0x40021000
 800f84c:	40010000 	.word	0x40010000
 800f850:	50000400 	.word	0x50000400
 800f854:	50000800 	.word	0x50000800
 800f858:	50000c00 	.word	0x50000c00
 800f85c:	50001000 	.word	0x50001000
 800f860:	50001c00 	.word	0x50001c00
 800f864:	40010400 	.word	0x40010400

0800f868 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	000a      	movs	r2, r1
 800f872:	1cbb      	adds	r3, r7, #2
 800f874:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	691b      	ldr	r3, [r3, #16]
 800f87a:	1cba      	adds	r2, r7, #2
 800f87c:	8812      	ldrh	r2, [r2, #0]
 800f87e:	4013      	ands	r3, r2
 800f880:	d004      	beq.n	800f88c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f882:	230f      	movs	r3, #15
 800f884:	18fb      	adds	r3, r7, r3
 800f886:	2201      	movs	r2, #1
 800f888:	701a      	strb	r2, [r3, #0]
 800f88a:	e003      	b.n	800f894 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f88c:	230f      	movs	r3, #15
 800f88e:	18fb      	adds	r3, r7, r3
 800f890:	2200      	movs	r2, #0
 800f892:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f894:	230f      	movs	r3, #15
 800f896:	18fb      	adds	r3, r7, r3
 800f898:	781b      	ldrb	r3, [r3, #0]
}
 800f89a:	0018      	movs	r0, r3
 800f89c:	46bd      	mov	sp, r7
 800f89e:	b004      	add	sp, #16
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b082      	sub	sp, #8
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	0008      	movs	r0, r1
 800f8ac:	0011      	movs	r1, r2
 800f8ae:	1cbb      	adds	r3, r7, #2
 800f8b0:	1c02      	adds	r2, r0, #0
 800f8b2:	801a      	strh	r2, [r3, #0]
 800f8b4:	1c7b      	adds	r3, r7, #1
 800f8b6:	1c0a      	adds	r2, r1, #0
 800f8b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f8ba:	1c7b      	adds	r3, r7, #1
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d004      	beq.n	800f8cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f8c2:	1cbb      	adds	r3, r7, #2
 800f8c4:	881a      	ldrh	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f8ca:	e003      	b.n	800f8d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f8cc:	1cbb      	adds	r3, r7, #2
 800f8ce:	881a      	ldrh	r2, [r3, #0]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f8d4:	46c0      	nop			@ (mov r8, r8)
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	b002      	add	sp, #8
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	0002      	movs	r2, r0
 800f8e4:	1dbb      	adds	r3, r7, #6
 800f8e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f8e8:	4b09      	ldr	r3, [pc, #36]	@ (800f910 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f8ea:	695b      	ldr	r3, [r3, #20]
 800f8ec:	1dba      	adds	r2, r7, #6
 800f8ee:	8812      	ldrh	r2, [r2, #0]
 800f8f0:	4013      	ands	r3, r2
 800f8f2:	d008      	beq.n	800f906 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f8f4:	4b06      	ldr	r3, [pc, #24]	@ (800f910 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f8f6:	1dba      	adds	r2, r7, #6
 800f8f8:	8812      	ldrh	r2, [r2, #0]
 800f8fa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f8fc:	1dbb      	adds	r3, r7, #6
 800f8fe:	881b      	ldrh	r3, [r3, #0]
 800f900:	0018      	movs	r0, r3
 800f902:	f7f8 fb7d 	bl	8008000 <HAL_GPIO_EXTI_Callback>
  }
}
 800f906:	46c0      	nop			@ (mov r8, r8)
 800f908:	46bd      	mov	sp, r7
 800f90a:	b002      	add	sp, #8
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	46c0      	nop			@ (mov r8, r8)
 800f910:	40010400 	.word	0x40010400

0800f914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d101      	bne.n	800f926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f922:	2301      	movs	r3, #1
 800f924:	e082      	b.n	800fa2c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2241      	movs	r2, #65	@ 0x41
 800f92a:	5c9b      	ldrb	r3, [r3, r2]
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d107      	bne.n	800f942 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2240      	movs	r2, #64	@ 0x40
 800f936:	2100      	movs	r1, #0
 800f938:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	0018      	movs	r0, r3
 800f93e:	f7f7 feb7 	bl	80076b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2241      	movs	r2, #65	@ 0x41
 800f946:	2124      	movs	r1, #36	@ 0x24
 800f948:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2101      	movs	r1, #1
 800f956:	438a      	bics	r2, r1
 800f958:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	685a      	ldr	r2, [r3, #4]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4934      	ldr	r1, [pc, #208]	@ (800fa34 <HAL_I2C_Init+0x120>)
 800f964:	400a      	ands	r2, r1
 800f966:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	689a      	ldr	r2, [r3, #8]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4931      	ldr	r1, [pc, #196]	@ (800fa38 <HAL_I2C_Init+0x124>)
 800f974:	400a      	ands	r2, r1
 800f976:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d108      	bne.n	800f992 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	689a      	ldr	r2, [r3, #8]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2180      	movs	r1, #128	@ 0x80
 800f98a:	0209      	lsls	r1, r1, #8
 800f98c:	430a      	orrs	r2, r1
 800f98e:	609a      	str	r2, [r3, #8]
 800f990:	e007      	b.n	800f9a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	689a      	ldr	r2, [r3, #8]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2184      	movs	r1, #132	@ 0x84
 800f99c:	0209      	lsls	r1, r1, #8
 800f99e:	430a      	orrs	r2, r1
 800f9a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d104      	bne.n	800f9b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2280      	movs	r2, #128	@ 0x80
 800f9b0:	0112      	lsls	r2, r2, #4
 800f9b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	491f      	ldr	r1, [pc, #124]	@ (800fa3c <HAL_I2C_Init+0x128>)
 800f9c0:	430a      	orrs	r2, r1
 800f9c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68da      	ldr	r2, [r3, #12]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	491a      	ldr	r1, [pc, #104]	@ (800fa38 <HAL_I2C_Init+0x124>)
 800f9d0:	400a      	ands	r2, r1
 800f9d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	691a      	ldr	r2, [r3, #16]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	431a      	orrs	r2, r3
 800f9de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	699b      	ldr	r3, [r3, #24]
 800f9e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	430a      	orrs	r2, r1
 800f9ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	69d9      	ldr	r1, [r3, #28]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a1a      	ldr	r2, [r3, #32]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	430a      	orrs	r2, r1
 800f9fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2101      	movs	r1, #1
 800fa0a:	430a      	orrs	r2, r1
 800fa0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2200      	movs	r2, #0
 800fa12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2241      	movs	r2, #65	@ 0x41
 800fa18:	2120      	movs	r1, #32
 800fa1a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2242      	movs	r2, #66	@ 0x42
 800fa26:	2100      	movs	r1, #0
 800fa28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	0018      	movs	r0, r3
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	b002      	add	sp, #8
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	f0ffffff 	.word	0xf0ffffff
 800fa38:	ffff7fff 	.word	0xffff7fff
 800fa3c:	02008000 	.word	0x02008000

0800fa40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800fa40:	b590      	push	{r4, r7, lr}
 800fa42:	b089      	sub	sp, #36	@ 0x24
 800fa44:	af02      	add	r7, sp, #8
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	0008      	movs	r0, r1
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	0019      	movs	r1, r3
 800fa4e:	230a      	movs	r3, #10
 800fa50:	18fb      	adds	r3, r7, r3
 800fa52:	1c02      	adds	r2, r0, #0
 800fa54:	801a      	strh	r2, [r3, #0]
 800fa56:	2308      	movs	r3, #8
 800fa58:	18fb      	adds	r3, r7, r3
 800fa5a:	1c0a      	adds	r2, r1, #0
 800fa5c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2241      	movs	r2, #65	@ 0x41
 800fa62:	5c9b      	ldrb	r3, [r3, r2]
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	2b20      	cmp	r3, #32
 800fa68:	d000      	beq.n	800fa6c <HAL_I2C_Master_Transmit+0x2c>
 800fa6a:	e0e7      	b.n	800fc3c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2240      	movs	r2, #64	@ 0x40
 800fa70:	5c9b      	ldrb	r3, [r3, r2]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d101      	bne.n	800fa7a <HAL_I2C_Master_Transmit+0x3a>
 800fa76:	2302      	movs	r3, #2
 800fa78:	e0e1      	b.n	800fc3e <HAL_I2C_Master_Transmit+0x1fe>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	2240      	movs	r2, #64	@ 0x40
 800fa7e:	2101      	movs	r1, #1
 800fa80:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fa82:	f7fe fc7d 	bl	800e380 <HAL_GetTick>
 800fa86:	0003      	movs	r3, r0
 800fa88:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fa8a:	2380      	movs	r3, #128	@ 0x80
 800fa8c:	0219      	lsls	r1, r3, #8
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	9300      	str	r3, [sp, #0]
 800fa94:	2319      	movs	r3, #25
 800fa96:	2201      	movs	r2, #1
 800fa98:	f001 ff98 	bl	80119cc <I2C_WaitOnFlagUntilTimeout>
 800fa9c:	1e03      	subs	r3, r0, #0
 800fa9e:	d001      	beq.n	800faa4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	e0cc      	b.n	800fc3e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2241      	movs	r2, #65	@ 0x41
 800faa8:	2121      	movs	r1, #33	@ 0x21
 800faaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2242      	movs	r2, #66	@ 0x42
 800fab0:	2110      	movs	r1, #16
 800fab2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2208      	movs	r2, #8
 800fac4:	18ba      	adds	r2, r7, r2
 800fac6:	8812      	ldrh	r2, [r2, #0]
 800fac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2200      	movs	r2, #0
 800face:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	2bff      	cmp	r3, #255	@ 0xff
 800fad8:	d911      	bls.n	800fafe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	22ff      	movs	r2, #255	@ 0xff
 800fade:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	2380      	movs	r3, #128	@ 0x80
 800fae8:	045c      	lsls	r4, r3, #17
 800faea:	230a      	movs	r3, #10
 800faec:	18fb      	adds	r3, r7, r3
 800faee:	8819      	ldrh	r1, [r3, #0]
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	4b55      	ldr	r3, [pc, #340]	@ (800fc48 <HAL_I2C_Master_Transmit+0x208>)
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	0023      	movs	r3, r4
 800faf8:	f002 f9ba 	bl	8011e70 <I2C_TransferConfig>
 800fafc:	e075      	b.n	800fbea <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	2380      	movs	r3, #128	@ 0x80
 800fb10:	049c      	lsls	r4, r3, #18
 800fb12:	230a      	movs	r3, #10
 800fb14:	18fb      	adds	r3, r7, r3
 800fb16:	8819      	ldrh	r1, [r3, #0]
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	4b4b      	ldr	r3, [pc, #300]	@ (800fc48 <HAL_I2C_Master_Transmit+0x208>)
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	0023      	movs	r3, r4
 800fb20:	f002 f9a6 	bl	8011e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fb24:	e061      	b.n	800fbea <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	0018      	movs	r0, r3
 800fb2e:	f001 ff9b 	bl	8011a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800fb32:	1e03      	subs	r3, r0, #0
 800fb34:	d001      	beq.n	800fb3a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800fb36:	2301      	movs	r3, #1
 800fb38:	e081      	b.n	800fc3e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3e:	781a      	ldrb	r2, [r3, #0]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	3b01      	subs	r3, #1
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb62:	3b01      	subs	r3, #1
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d03a      	beq.n	800fbea <HAL_I2C_Master_Transmit+0x1aa>
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d136      	bne.n	800fbea <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fb7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	0013      	movs	r3, r2
 800fb86:	2200      	movs	r2, #0
 800fb88:	2180      	movs	r1, #128	@ 0x80
 800fb8a:	f001 ff1f 	bl	80119cc <I2C_WaitOnFlagUntilTimeout>
 800fb8e:	1e03      	subs	r3, r0, #0
 800fb90:	d001      	beq.n	800fb96 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800fb92:	2301      	movs	r3, #1
 800fb94:	e053      	b.n	800fc3e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	2bff      	cmp	r3, #255	@ 0xff
 800fb9e:	d911      	bls.n	800fbc4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	22ff      	movs	r2, #255	@ 0xff
 800fba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbaa:	b2da      	uxtb	r2, r3
 800fbac:	2380      	movs	r3, #128	@ 0x80
 800fbae:	045c      	lsls	r4, r3, #17
 800fbb0:	230a      	movs	r3, #10
 800fbb2:	18fb      	adds	r3, r7, r3
 800fbb4:	8819      	ldrh	r1, [r3, #0]
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	2300      	movs	r3, #0
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	0023      	movs	r3, r4
 800fbbe:	f002 f957 	bl	8011e70 <I2C_TransferConfig>
 800fbc2:	e012      	b.n	800fbea <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	2380      	movs	r3, #128	@ 0x80
 800fbd6:	049c      	lsls	r4, r3, #18
 800fbd8:	230a      	movs	r3, #10
 800fbda:	18fb      	adds	r3, r7, r3
 800fbdc:	8819      	ldrh	r1, [r3, #0]
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	0023      	movs	r3, r4
 800fbe6:	f002 f943 	bl	8011e70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d198      	bne.n	800fb26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	0018      	movs	r0, r3
 800fbfc:	f001 ff7a 	bl	8011af4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fc00:	1e03      	subs	r3, r0, #0
 800fc02:	d001      	beq.n	800fc08 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800fc04:	2301      	movs	r3, #1
 800fc06:	e01a      	b.n	800fc3e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2220      	movs	r2, #32
 800fc0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	685a      	ldr	r2, [r3, #4]
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	490c      	ldr	r1, [pc, #48]	@ (800fc4c <HAL_I2C_Master_Transmit+0x20c>)
 800fc1c:	400a      	ands	r2, r1
 800fc1e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2241      	movs	r2, #65	@ 0x41
 800fc24:	2120      	movs	r1, #32
 800fc26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2242      	movs	r2, #66	@ 0x42
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2240      	movs	r2, #64	@ 0x40
 800fc34:	2100      	movs	r1, #0
 800fc36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	e000      	b.n	800fc3e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800fc3c:	2302      	movs	r3, #2
  }
}
 800fc3e:	0018      	movs	r0, r3
 800fc40:	46bd      	mov	sp, r7
 800fc42:	b007      	add	sp, #28
 800fc44:	bd90      	pop	{r4, r7, pc}
 800fc46:	46c0      	nop			@ (mov r8, r8)
 800fc48:	80002000 	.word	0x80002000
 800fc4c:	fe00e800 	.word	0xfe00e800

0800fc50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800fc50:	b590      	push	{r4, r7, lr}
 800fc52:	b089      	sub	sp, #36	@ 0x24
 800fc54:	af02      	add	r7, sp, #8
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	0008      	movs	r0, r1
 800fc5a:	607a      	str	r2, [r7, #4]
 800fc5c:	0019      	movs	r1, r3
 800fc5e:	230a      	movs	r3, #10
 800fc60:	18fb      	adds	r3, r7, r3
 800fc62:	1c02      	adds	r2, r0, #0
 800fc64:	801a      	strh	r2, [r3, #0]
 800fc66:	2308      	movs	r3, #8
 800fc68:	18fb      	adds	r3, r7, r3
 800fc6a:	1c0a      	adds	r2, r1, #0
 800fc6c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2241      	movs	r2, #65	@ 0x41
 800fc72:	5c9b      	ldrb	r3, [r3, r2]
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	2b20      	cmp	r3, #32
 800fc78:	d000      	beq.n	800fc7c <HAL_I2C_Master_Receive+0x2c>
 800fc7a:	e0e8      	b.n	800fe4e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2240      	movs	r2, #64	@ 0x40
 800fc80:	5c9b      	ldrb	r3, [r3, r2]
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d101      	bne.n	800fc8a <HAL_I2C_Master_Receive+0x3a>
 800fc86:	2302      	movs	r3, #2
 800fc88:	e0e2      	b.n	800fe50 <HAL_I2C_Master_Receive+0x200>
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2240      	movs	r2, #64	@ 0x40
 800fc8e:	2101      	movs	r1, #1
 800fc90:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fc92:	f7fe fb75 	bl	800e380 <HAL_GetTick>
 800fc96:	0003      	movs	r3, r0
 800fc98:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fc9a:	2380      	movs	r3, #128	@ 0x80
 800fc9c:	0219      	lsls	r1, r3, #8
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	2319      	movs	r3, #25
 800fca6:	2201      	movs	r2, #1
 800fca8:	f001 fe90 	bl	80119cc <I2C_WaitOnFlagUntilTimeout>
 800fcac:	1e03      	subs	r3, r0, #0
 800fcae:	d001      	beq.n	800fcb4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e0cd      	b.n	800fe50 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2241      	movs	r2, #65	@ 0x41
 800fcb8:	2122      	movs	r1, #34	@ 0x22
 800fcba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2242      	movs	r2, #66	@ 0x42
 800fcc0:	2110      	movs	r1, #16
 800fcc2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2208      	movs	r2, #8
 800fcd4:	18ba      	adds	r2, r7, r2
 800fcd6:	8812      	ldrh	r2, [r2, #0]
 800fcd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	2bff      	cmp	r3, #255	@ 0xff
 800fce8:	d911      	bls.n	800fd0e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	22ff      	movs	r2, #255	@ 0xff
 800fcee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	2380      	movs	r3, #128	@ 0x80
 800fcf8:	045c      	lsls	r4, r3, #17
 800fcfa:	230a      	movs	r3, #10
 800fcfc:	18fb      	adds	r3, r7, r3
 800fcfe:	8819      	ldrh	r1, [r3, #0]
 800fd00:	68f8      	ldr	r0, [r7, #12]
 800fd02:	4b55      	ldr	r3, [pc, #340]	@ (800fe58 <HAL_I2C_Master_Receive+0x208>)
 800fd04:	9300      	str	r3, [sp, #0]
 800fd06:	0023      	movs	r3, r4
 800fd08:	f002 f8b2 	bl	8011e70 <I2C_TransferConfig>
 800fd0c:	e076      	b.n	800fdfc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd12:	b29a      	uxth	r2, r3
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	2380      	movs	r3, #128	@ 0x80
 800fd20:	049c      	lsls	r4, r3, #18
 800fd22:	230a      	movs	r3, #10
 800fd24:	18fb      	adds	r3, r7, r3
 800fd26:	8819      	ldrh	r1, [r3, #0]
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	4b4b      	ldr	r3, [pc, #300]	@ (800fe58 <HAL_I2C_Master_Receive+0x208>)
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	0023      	movs	r3, r4
 800fd30:	f002 f89e 	bl	8011e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fd34:	e062      	b.n	800fdfc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fd36:	697a      	ldr	r2, [r7, #20]
 800fd38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	0018      	movs	r0, r3
 800fd3e:	f001 ff1d 	bl	8011b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800fd42:	1e03      	subs	r3, r0, #0
 800fd44:	d001      	beq.n	800fd4a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800fd46:	2301      	movs	r3, #1
 800fd48:	e082      	b.n	800fe50 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd54:	b2d2      	uxtb	r2, r2
 800fd56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd5c:	1c5a      	adds	r2, r3, #1
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd66:	3b01      	subs	r3, #1
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	3b01      	subs	r3, #1
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d03a      	beq.n	800fdfc <HAL_I2C_Master_Receive+0x1ac>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d136      	bne.n	800fdfc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fd8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	0013      	movs	r3, r2
 800fd98:	2200      	movs	r2, #0
 800fd9a:	2180      	movs	r1, #128	@ 0x80
 800fd9c:	f001 fe16 	bl	80119cc <I2C_WaitOnFlagUntilTimeout>
 800fda0:	1e03      	subs	r3, r0, #0
 800fda2:	d001      	beq.n	800fda8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800fda4:	2301      	movs	r3, #1
 800fda6:	e053      	b.n	800fe50 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	2bff      	cmp	r3, #255	@ 0xff
 800fdb0:	d911      	bls.n	800fdd6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	22ff      	movs	r2, #255	@ 0xff
 800fdb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	2380      	movs	r3, #128	@ 0x80
 800fdc0:	045c      	lsls	r4, r3, #17
 800fdc2:	230a      	movs	r3, #10
 800fdc4:	18fb      	adds	r3, r7, r3
 800fdc6:	8819      	ldrh	r1, [r3, #0]
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	2300      	movs	r3, #0
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	0023      	movs	r3, r4
 800fdd0:	f002 f84e 	bl	8011e70 <I2C_TransferConfig>
 800fdd4:	e012      	b.n	800fdfc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fde4:	b2da      	uxtb	r2, r3
 800fde6:	2380      	movs	r3, #128	@ 0x80
 800fde8:	049c      	lsls	r4, r3, #18
 800fdea:	230a      	movs	r3, #10
 800fdec:	18fb      	adds	r3, r7, r3
 800fdee:	8819      	ldrh	r1, [r3, #0]
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	0023      	movs	r3, r4
 800fdf8:	f002 f83a 	bl	8011e70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d197      	bne.n	800fd36 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f001 fe71 	bl	8011af4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fe12:	1e03      	subs	r3, r0, #0
 800fe14:	d001      	beq.n	800fe1a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
 800fe18:	e01a      	b.n	800fe50 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	685a      	ldr	r2, [r3, #4]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	490b      	ldr	r1, [pc, #44]	@ (800fe5c <HAL_I2C_Master_Receive+0x20c>)
 800fe2e:	400a      	ands	r2, r1
 800fe30:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2241      	movs	r2, #65	@ 0x41
 800fe36:	2120      	movs	r1, #32
 800fe38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2242      	movs	r2, #66	@ 0x42
 800fe3e:	2100      	movs	r1, #0
 800fe40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2240      	movs	r2, #64	@ 0x40
 800fe46:	2100      	movs	r1, #0
 800fe48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	e000      	b.n	800fe50 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800fe4e:	2302      	movs	r3, #2
  }
}
 800fe50:	0018      	movs	r0, r3
 800fe52:	46bd      	mov	sp, r7
 800fe54:	b007      	add	sp, #28
 800fe56:	bd90      	pop	{r4, r7, pc}
 800fe58:	80002400 	.word	0x80002400
 800fe5c:	fe00e800 	.word	0xfe00e800

0800fe60 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800fe60:	b5b0      	push	{r4, r5, r7, lr}
 800fe62:	b088      	sub	sp, #32
 800fe64:	af02      	add	r7, sp, #8
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	0008      	movs	r0, r1
 800fe6a:	607a      	str	r2, [r7, #4]
 800fe6c:	0019      	movs	r1, r3
 800fe6e:	230a      	movs	r3, #10
 800fe70:	18fb      	adds	r3, r7, r3
 800fe72:	1c02      	adds	r2, r0, #0
 800fe74:	801a      	strh	r2, [r3, #0]
 800fe76:	2308      	movs	r3, #8
 800fe78:	18fb      	adds	r3, r7, r3
 800fe7a:	1c0a      	adds	r2, r1, #0
 800fe7c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2241      	movs	r2, #65	@ 0x41
 800fe82:	5c9b      	ldrb	r3, [r3, r2]
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b20      	cmp	r3, #32
 800fe88:	d000      	beq.n	800fe8c <HAL_I2C_Master_Transmit_DMA+0x2c>
 800fe8a:	e0dd      	b.n	8010048 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	699a      	ldr	r2, [r3, #24]
 800fe92:	2380      	movs	r3, #128	@ 0x80
 800fe94:	021b      	lsls	r3, r3, #8
 800fe96:	401a      	ands	r2, r3
 800fe98:	2380      	movs	r3, #128	@ 0x80
 800fe9a:	021b      	lsls	r3, r3, #8
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d101      	bne.n	800fea4 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800fea0:	2302      	movs	r3, #2
 800fea2:	e0d2      	b.n	801004a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2240      	movs	r2, #64	@ 0x40
 800fea8:	5c9b      	ldrb	r3, [r3, r2]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d101      	bne.n	800feb2 <HAL_I2C_Master_Transmit_DMA+0x52>
 800feae:	2302      	movs	r3, #2
 800feb0:	e0cb      	b.n	801004a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2240      	movs	r2, #64	@ 0x40
 800feb6:	2101      	movs	r1, #1
 800feb8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2241      	movs	r2, #65	@ 0x41
 800febe:	2121      	movs	r1, #33	@ 0x21
 800fec0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2242      	movs	r2, #66	@ 0x42
 800fec6:	2110      	movs	r1, #16
 800fec8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2200      	movs	r2, #0
 800fece:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2208      	movs	r2, #8
 800feda:	18ba      	adds	r2, r7, r2
 800fedc:	8812      	ldrh	r2, [r2, #0]
 800fede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	4a5c      	ldr	r2, [pc, #368]	@ (8010054 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800fee4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	4a5b      	ldr	r2, [pc, #364]	@ (8010058 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800feea:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	2bff      	cmp	r3, #255	@ 0xff
 800fef4:	d906      	bls.n	800ff04 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	22ff      	movs	r2, #255	@ 0xff
 800fefa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fefc:	2380      	movs	r3, #128	@ 0x80
 800fefe:	045b      	lsls	r3, r3, #17
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	e007      	b.n	800ff14 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ff0e:	2380      	movs	r3, #128	@ 0x80
 800ff10:	049b      	lsls	r3, r3, #18
 800ff12:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d100      	bne.n	800ff1e <HAL_I2C_Master_Transmit_DMA+0xbe>
 800ff1c:	e078      	b.n	8010010 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d023      	beq.n	800ff6e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff2a:	4a4c      	ldr	r2, [pc, #304]	@ (801005c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800ff2c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff32:	4a4b      	ldr	r2, [pc, #300]	@ (8010060 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800ff34:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff42:	2200      	movs	r2, #0
 800ff44:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ff4a:	6879      	ldr	r1, [r7, #4]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3328      	adds	r3, #40	@ 0x28
 800ff52:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800ff58:	2513      	movs	r5, #19
 800ff5a:	197c      	adds	r4, r7, r5
 800ff5c:	f7fe ff62 	bl	800ee24 <HAL_DMA_Start_IT>
 800ff60:	0003      	movs	r3, r0
 800ff62:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ff64:	197b      	adds	r3, r7, r5
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d13d      	bne.n	800ffe8 <HAL_I2C_Master_Transmit_DMA+0x188>
 800ff6c:	e013      	b.n	800ff96 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2241      	movs	r2, #65	@ 0x41
 800ff72:	2120      	movs	r1, #32
 800ff74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2242      	movs	r2, #66	@ 0x42
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff82:	2280      	movs	r2, #128	@ 0x80
 800ff84:	431a      	orrs	r2, r3
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2240      	movs	r2, #64	@ 0x40
 800ff8e:	2100      	movs	r1, #0
 800ff90:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800ff92:	2301      	movs	r3, #1
 800ff94:	e059      	b.n	801004a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff9a:	b2da      	uxtb	r2, r3
 800ff9c:	697c      	ldr	r4, [r7, #20]
 800ff9e:	230a      	movs	r3, #10
 800ffa0:	18fb      	adds	r3, r7, r3
 800ffa2:	8819      	ldrh	r1, [r3, #0]
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	4b2f      	ldr	r3, [pc, #188]	@ (8010064 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	0023      	movs	r3, r4
 800ffac:	f001 ff60 	bl	8011e70 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2240      	movs	r2, #64	@ 0x40
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2110      	movs	r1, #16
 800ffce:	0018      	movs	r0, r3
 800ffd0:	f001 ff88 	bl	8011ee4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2180      	movs	r1, #128	@ 0x80
 800ffe0:	01c9      	lsls	r1, r1, #7
 800ffe2:	430a      	orrs	r2, r1
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	e02d      	b.n	8010044 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2241      	movs	r2, #65	@ 0x41
 800ffec:	2120      	movs	r1, #32
 800ffee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2242      	movs	r2, #66	@ 0x42
 800fff4:	2100      	movs	r1, #0
 800fff6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fffc:	2210      	movs	r2, #16
 800fffe:	431a      	orrs	r2, r3
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2240      	movs	r2, #64	@ 0x40
 8010008:	2100      	movs	r1, #0
 801000a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801000c:	2301      	movs	r3, #1
 801000e:	e01c      	b.n	801004a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	4a15      	ldr	r2, [pc, #84]	@ (8010068 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010014:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801001a:	b2da      	uxtb	r2, r3
 801001c:	2380      	movs	r3, #128	@ 0x80
 801001e:	049c      	lsls	r4, r3, #18
 8010020:	230a      	movs	r3, #10
 8010022:	18fb      	adds	r3, r7, r3
 8010024:	8819      	ldrh	r1, [r3, #0]
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	4b0e      	ldr	r3, [pc, #56]	@ (8010064 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	0023      	movs	r3, r4
 801002e:	f001 ff1f 	bl	8011e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2240      	movs	r2, #64	@ 0x40
 8010036:	2100      	movs	r1, #0
 8010038:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2101      	movs	r1, #1
 801003e:	0018      	movs	r0, r3
 8010040:	f001 ff50 	bl	8011ee4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010044:	2300      	movs	r3, #0
 8010046:	e000      	b.n	801004a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010048:	2302      	movs	r3, #2
  }
}
 801004a:	0018      	movs	r0, r3
 801004c:	46bd      	mov	sp, r7
 801004e:	b006      	add	sp, #24
 8010050:	bdb0      	pop	{r4, r5, r7, pc}
 8010052:	46c0      	nop			@ (mov r8, r8)
 8010054:	ffff0000 	.word	0xffff0000
 8010058:	08010865 	.word	0x08010865
 801005c:	0801181d 	.word	0x0801181d
 8010060:	0801195d 	.word	0x0801195d
 8010064:	80002000 	.word	0x80002000
 8010068:	08010411 	.word	0x08010411

0801006c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 801006c:	b5b0      	push	{r4, r5, r7, lr}
 801006e:	b088      	sub	sp, #32
 8010070:	af02      	add	r7, sp, #8
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	0008      	movs	r0, r1
 8010076:	607a      	str	r2, [r7, #4]
 8010078:	0019      	movs	r1, r3
 801007a:	230a      	movs	r3, #10
 801007c:	18fb      	adds	r3, r7, r3
 801007e:	1c02      	adds	r2, r0, #0
 8010080:	801a      	strh	r2, [r3, #0]
 8010082:	2308      	movs	r3, #8
 8010084:	18fb      	adds	r3, r7, r3
 8010086:	1c0a      	adds	r2, r1, #0
 8010088:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2241      	movs	r2, #65	@ 0x41
 801008e:	5c9b      	ldrb	r3, [r3, r2]
 8010090:	b2db      	uxtb	r3, r3
 8010092:	2b20      	cmp	r3, #32
 8010094:	d000      	beq.n	8010098 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010096:	e0dd      	b.n	8010254 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	699a      	ldr	r2, [r3, #24]
 801009e:	2380      	movs	r3, #128	@ 0x80
 80100a0:	021b      	lsls	r3, r3, #8
 80100a2:	401a      	ands	r2, r3
 80100a4:	2380      	movs	r3, #128	@ 0x80
 80100a6:	021b      	lsls	r3, r3, #8
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d101      	bne.n	80100b0 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80100ac:	2302      	movs	r3, #2
 80100ae:	e0d2      	b.n	8010256 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2240      	movs	r2, #64	@ 0x40
 80100b4:	5c9b      	ldrb	r3, [r3, r2]
 80100b6:	2b01      	cmp	r3, #1
 80100b8:	d101      	bne.n	80100be <HAL_I2C_Master_Receive_DMA+0x52>
 80100ba:	2302      	movs	r3, #2
 80100bc:	e0cb      	b.n	8010256 <HAL_I2C_Master_Receive_DMA+0x1ea>
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2240      	movs	r2, #64	@ 0x40
 80100c2:	2101      	movs	r1, #1
 80100c4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2241      	movs	r2, #65	@ 0x41
 80100ca:	2122      	movs	r1, #34	@ 0x22
 80100cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2242      	movs	r2, #66	@ 0x42
 80100d2:	2110      	movs	r1, #16
 80100d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2200      	movs	r2, #0
 80100da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2208      	movs	r2, #8
 80100e6:	18ba      	adds	r2, r7, r2
 80100e8:	8812      	ldrh	r2, [r2, #0]
 80100ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	4a5c      	ldr	r2, [pc, #368]	@ (8010260 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80100f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	4a5b      	ldr	r2, [pc, #364]	@ (8010264 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80100f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	2bff      	cmp	r3, #255	@ 0xff
 8010100:	d906      	bls.n	8010110 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	22ff      	movs	r2, #255	@ 0xff
 8010106:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010108:	2380      	movs	r3, #128	@ 0x80
 801010a:	045b      	lsls	r3, r3, #17
 801010c:	617b      	str	r3, [r7, #20]
 801010e:	e007      	b.n	8010120 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010114:	b29a      	uxth	r2, r3
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801011a:	2380      	movs	r3, #128	@ 0x80
 801011c:	049b      	lsls	r3, r3, #18
 801011e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010124:	2b00      	cmp	r3, #0
 8010126:	d100      	bne.n	801012a <HAL_I2C_Master_Receive_DMA+0xbe>
 8010128:	e078      	b.n	801021c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801012e:	2b00      	cmp	r3, #0
 8010130:	d023      	beq.n	801017a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010136:	4a4c      	ldr	r2, [pc, #304]	@ (8010268 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010138:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801013e:	4a4b      	ldr	r2, [pc, #300]	@ (801026c <HAL_I2C_Master_Receive_DMA+0x200>)
 8010140:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010146:	2200      	movs	r2, #0
 8010148:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801014e:	2200      	movs	r2, #0
 8010150:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3324      	adds	r3, #36	@ 0x24
 801015c:	0019      	movs	r1, r3
 801015e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010164:	2513      	movs	r5, #19
 8010166:	197c      	adds	r4, r7, r5
 8010168:	f7fe fe5c 	bl	800ee24 <HAL_DMA_Start_IT>
 801016c:	0003      	movs	r3, r0
 801016e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010170:	197b      	adds	r3, r7, r5
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d13d      	bne.n	80101f4 <HAL_I2C_Master_Receive_DMA+0x188>
 8010178:	e013      	b.n	80101a2 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2241      	movs	r2, #65	@ 0x41
 801017e:	2120      	movs	r1, #32
 8010180:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2242      	movs	r2, #66	@ 0x42
 8010186:	2100      	movs	r1, #0
 8010188:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801018e:	2280      	movs	r2, #128	@ 0x80
 8010190:	431a      	orrs	r2, r3
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2240      	movs	r2, #64	@ 0x40
 801019a:	2100      	movs	r1, #0
 801019c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	e059      	b.n	8010256 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	697c      	ldr	r4, [r7, #20]
 80101aa:	230a      	movs	r3, #10
 80101ac:	18fb      	adds	r3, r7, r3
 80101ae:	8819      	ldrh	r1, [r3, #0]
 80101b0:	68f8      	ldr	r0, [r7, #12]
 80101b2:	4b2f      	ldr	r3, [pc, #188]	@ (8010270 <HAL_I2C_Master_Receive_DMA+0x204>)
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	0023      	movs	r3, r4
 80101b8:	f001 fe5a 	bl	8011e70 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2240      	movs	r2, #64	@ 0x40
 80101d2:	2100      	movs	r1, #0
 80101d4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2110      	movs	r1, #16
 80101da:	0018      	movs	r0, r3
 80101dc:	f001 fe82 	bl	8011ee4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2180      	movs	r1, #128	@ 0x80
 80101ec:	0209      	lsls	r1, r1, #8
 80101ee:	430a      	orrs	r2, r1
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	e02d      	b.n	8010250 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2241      	movs	r2, #65	@ 0x41
 80101f8:	2120      	movs	r1, #32
 80101fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2242      	movs	r2, #66	@ 0x42
 8010200:	2100      	movs	r1, #0
 8010202:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010208:	2210      	movs	r2, #16
 801020a:	431a      	orrs	r2, r3
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2240      	movs	r2, #64	@ 0x40
 8010214:	2100      	movs	r1, #0
 8010216:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010218:	2301      	movs	r3, #1
 801021a:	e01c      	b.n	8010256 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	4a15      	ldr	r2, [pc, #84]	@ (8010274 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010220:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010226:	b2da      	uxtb	r2, r3
 8010228:	2380      	movs	r3, #128	@ 0x80
 801022a:	049c      	lsls	r4, r3, #18
 801022c:	230a      	movs	r3, #10
 801022e:	18fb      	adds	r3, r7, r3
 8010230:	8819      	ldrh	r1, [r3, #0]
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	4b0e      	ldr	r3, [pc, #56]	@ (8010270 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	0023      	movs	r3, r4
 801023a:	f001 fe19 	bl	8011e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2240      	movs	r2, #64	@ 0x40
 8010242:	2100      	movs	r1, #0
 8010244:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2101      	movs	r1, #1
 801024a:	0018      	movs	r0, r3
 801024c:	f001 fe4a 	bl	8011ee4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010250:	2300      	movs	r3, #0
 8010252:	e000      	b.n	8010256 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010254:	2302      	movs	r3, #2
  }
}
 8010256:	0018      	movs	r0, r3
 8010258:	46bd      	mov	sp, r7
 801025a:	b006      	add	sp, #24
 801025c:	bdb0      	pop	{r4, r5, r7, pc}
 801025e:	46c0      	nop			@ (mov r8, r8)
 8010260:	ffff0000 	.word	0xffff0000
 8010264:	08010865 	.word	0x08010865
 8010268:	080118bd 	.word	0x080118bd
 801026c:	0801195d 	.word	0x0801195d
 8010270:	80002400 	.word	0x80002400
 8010274:	08010411 	.word	0x08010411

08010278 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	699b      	ldr	r3, [r3, #24]
 8010286:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010294:	2b00      	cmp	r3, #0
 8010296:	d005      	beq.n	80102a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801029c:	68ba      	ldr	r2, [r7, #8]
 801029e:	68f9      	ldr	r1, [r7, #12]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	4798      	blx	r3
  }
}
 80102a4:	46c0      	nop			@ (mov r8, r8)
 80102a6:	46bd      	mov	sp, r7
 80102a8:	b004      	add	sp, #16
 80102aa:	bd80      	pop	{r7, pc}

080102ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b086      	sub	sp, #24
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80102c4:	697a      	ldr	r2, [r7, #20]
 80102c6:	2380      	movs	r3, #128	@ 0x80
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4013      	ands	r3, r2
 80102cc:	d00e      	beq.n	80102ec <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	2280      	movs	r2, #128	@ 0x80
 80102d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80102d4:	d00a      	beq.n	80102ec <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102da:	2201      	movs	r2, #1
 80102dc:	431a      	orrs	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2280      	movs	r2, #128	@ 0x80
 80102e8:	0052      	lsls	r2, r2, #1
 80102ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80102ec:	697a      	ldr	r2, [r7, #20]
 80102ee:	2380      	movs	r3, #128	@ 0x80
 80102f0:	00db      	lsls	r3, r3, #3
 80102f2:	4013      	ands	r3, r2
 80102f4:	d00e      	beq.n	8010314 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	2280      	movs	r2, #128	@ 0x80
 80102fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80102fc:	d00a      	beq.n	8010314 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010302:	2208      	movs	r2, #8
 8010304:	431a      	orrs	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2280      	movs	r2, #128	@ 0x80
 8010310:	00d2      	lsls	r2, r2, #3
 8010312:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010314:	697a      	ldr	r2, [r7, #20]
 8010316:	2380      	movs	r3, #128	@ 0x80
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	4013      	ands	r3, r2
 801031c:	d00e      	beq.n	801033c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	2280      	movs	r2, #128	@ 0x80
 8010322:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010324:	d00a      	beq.n	801033c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801032a:	2202      	movs	r2, #2
 801032c:	431a      	orrs	r2, r3
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2280      	movs	r2, #128	@ 0x80
 8010338:	0092      	lsls	r2, r2, #2
 801033a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010340:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	220b      	movs	r2, #11
 8010346:	4013      	ands	r3, r2
 8010348:	d005      	beq.n	8010356 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801034a:	68fa      	ldr	r2, [r7, #12]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	0011      	movs	r1, r2
 8010350:	0018      	movs	r0, r3
 8010352:	f001 f915 	bl	8011580 <I2C_ITError>
  }
}
 8010356:	46c0      	nop			@ (mov r8, r8)
 8010358:	46bd      	mov	sp, r7
 801035a:	b006      	add	sp, #24
 801035c:	bd80      	pop	{r7, pc}

0801035e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801035e:	b580      	push	{r7, lr}
 8010360:	b082      	sub	sp, #8
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010366:	46c0      	nop			@ (mov r8, r8)
 8010368:	46bd      	mov	sp, r7
 801036a:	b002      	add	sp, #8
 801036c:	bd80      	pop	{r7, pc}

0801036e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b082      	sub	sp, #8
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010376:	46c0      	nop			@ (mov r8, r8)
 8010378:	46bd      	mov	sp, r7
 801037a:	b002      	add	sp, #8
 801037c:	bd80      	pop	{r7, pc}

0801037e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801037e:	b580      	push	{r7, lr}
 8010380:	b082      	sub	sp, #8
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010386:	46c0      	nop			@ (mov r8, r8)
 8010388:	46bd      	mov	sp, r7
 801038a:	b002      	add	sp, #8
 801038c:	bd80      	pop	{r7, pc}

0801038e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010396:	46c0      	nop			@ (mov r8, r8)
 8010398:	46bd      	mov	sp, r7
 801039a:	b002      	add	sp, #8
 801039c:	bd80      	pop	{r7, pc}

0801039e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b082      	sub	sp, #8
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	0008      	movs	r0, r1
 80103a8:	0011      	movs	r1, r2
 80103aa:	1cfb      	adds	r3, r7, #3
 80103ac:	1c02      	adds	r2, r0, #0
 80103ae:	701a      	strb	r2, [r3, #0]
 80103b0:	003b      	movs	r3, r7
 80103b2:	1c0a      	adds	r2, r1, #0
 80103b4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80103b6:	46c0      	nop			@ (mov r8, r8)
 80103b8:	46bd      	mov	sp, r7
 80103ba:	b002      	add	sp, #8
 80103bc:	bd80      	pop	{r7, pc}

080103be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b082      	sub	sp, #8
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80103c6:	46c0      	nop			@ (mov r8, r8)
 80103c8:	46bd      	mov	sp, r7
 80103ca:	b002      	add	sp, #8
 80103cc:	bd80      	pop	{r7, pc}

080103ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80103ce:	b580      	push	{r7, lr}
 80103d0:	b082      	sub	sp, #8
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80103d6:	46c0      	nop			@ (mov r8, r8)
 80103d8:	46bd      	mov	sp, r7
 80103da:	b002      	add	sp, #8
 80103dc:	bd80      	pop	{r7, pc}

080103de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b082      	sub	sp, #8
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80103e6:	46c0      	nop			@ (mov r8, r8)
 80103e8:	46bd      	mov	sp, r7
 80103ea:	b002      	add	sp, #8
 80103ec:	bd80      	pop	{r7, pc}

080103ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b082      	sub	sp, #8
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80103f6:	46c0      	nop			@ (mov r8, r8)
 80103f8:	46bd      	mov	sp, r7
 80103fa:	b002      	add	sp, #8
 80103fc:	bd80      	pop	{r7, pc}

080103fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b082      	sub	sp, #8
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010406:	46c0      	nop			@ (mov r8, r8)
 8010408:	46bd      	mov	sp, r7
 801040a:	b002      	add	sp, #8
 801040c:	bd80      	pop	{r7, pc}
	...

08010410 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010410:	b590      	push	{r4, r7, lr}
 8010412:	b089      	sub	sp, #36	@ 0x24
 8010414:	af02      	add	r7, sp, #8
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2240      	movs	r2, #64	@ 0x40
 8010424:	5c9b      	ldrb	r3, [r3, r2]
 8010426:	2b01      	cmp	r3, #1
 8010428:	d101      	bne.n	801042e <I2C_Master_ISR_IT+0x1e>
 801042a:	2302      	movs	r3, #2
 801042c:	e113      	b.n	8010656 <I2C_Master_ISR_IT+0x246>
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2240      	movs	r2, #64	@ 0x40
 8010432:	2101      	movs	r1, #1
 8010434:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	2210      	movs	r2, #16
 801043a:	4013      	ands	r3, r2
 801043c:	d012      	beq.n	8010464 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2210      	movs	r2, #16
 8010442:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010444:	d00e      	beq.n	8010464 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2210      	movs	r2, #16
 801044c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010452:	2204      	movs	r2, #4
 8010454:	431a      	orrs	r2, r3
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	0018      	movs	r0, r3
 801045e:	f001 f9ba 	bl	80117d6 <I2C_Flush_TXDR>
 8010462:	e0e5      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	2204      	movs	r2, #4
 8010468:	4013      	ands	r3, r2
 801046a:	d021      	beq.n	80104b0 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2204      	movs	r2, #4
 8010470:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010472:	d01d      	beq.n	80104b0 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	2204      	movs	r2, #4
 8010478:	4393      	bics	r3, r2
 801047a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010486:	b2d2      	uxtb	r2, r2
 8010488:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801048e:	1c5a      	adds	r2, r3, #1
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010498:	3b01      	subs	r3, #1
 801049a:	b29a      	uxth	r2, r3
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	3b01      	subs	r3, #1
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80104ae:	e0bf      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	2202      	movs	r2, #2
 80104b4:	4013      	ands	r3, r2
 80104b6:	d01c      	beq.n	80104f2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2202      	movs	r2, #2
 80104bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80104be:	d018      	beq.n	80104f2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104c4:	781a      	ldrb	r2, [r3, #0]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104d0:	1c5a      	adds	r2, r3, #1
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104da:	3b01      	subs	r3, #1
 80104dc:	b29a      	uxth	r2, r3
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	3b01      	subs	r3, #1
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80104f0:	e09e      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	2280      	movs	r2, #128	@ 0x80
 80104f6:	4013      	ands	r3, r2
 80104f8:	d100      	bne.n	80104fc <I2C_Master_ISR_IT+0xec>
 80104fa:	e069      	b.n	80105d0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2240      	movs	r2, #64	@ 0x40
 8010500:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010502:	d065      	beq.n	80105d0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010508:	b29b      	uxth	r3, r3
 801050a:	2b00      	cmp	r3, #0
 801050c:	d04a      	beq.n	80105a4 <I2C_Master_ISR_IT+0x194>
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010512:	2b00      	cmp	r3, #0
 8010514:	d146      	bne.n	80105a4 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	b29a      	uxth	r2, r3
 801051e:	2112      	movs	r1, #18
 8010520:	187b      	adds	r3, r7, r1
 8010522:	0592      	lsls	r2, r2, #22
 8010524:	0d92      	lsrs	r2, r2, #22
 8010526:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801052c:	b29b      	uxth	r3, r3
 801052e:	2bff      	cmp	r3, #255	@ 0xff
 8010530:	d910      	bls.n	8010554 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	22ff      	movs	r2, #255	@ 0xff
 8010536:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801053c:	b2da      	uxtb	r2, r3
 801053e:	2380      	movs	r3, #128	@ 0x80
 8010540:	045c      	lsls	r4, r3, #17
 8010542:	187b      	adds	r3, r7, r1
 8010544:	8819      	ldrh	r1, [r3, #0]
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	2300      	movs	r3, #0
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	0023      	movs	r3, r4
 801054e:	f001 fc8f 	bl	8011e70 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010552:	e03c      	b.n	80105ce <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010558:	b29a      	uxth	r2, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010562:	4a3f      	ldr	r2, [pc, #252]	@ (8010660 <I2C_Master_ISR_IT+0x250>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d00e      	beq.n	8010586 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801056c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010572:	2312      	movs	r3, #18
 8010574:	18fb      	adds	r3, r7, r3
 8010576:	8819      	ldrh	r1, [r3, #0]
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	2300      	movs	r3, #0
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	0023      	movs	r3, r4
 8010580:	f001 fc76 	bl	8011e70 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010584:	e023      	b.n	80105ce <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801058a:	b2da      	uxtb	r2, r3
 801058c:	2380      	movs	r3, #128	@ 0x80
 801058e:	049c      	lsls	r4, r3, #18
 8010590:	2312      	movs	r3, #18
 8010592:	18fb      	adds	r3, r7, r3
 8010594:	8819      	ldrh	r1, [r3, #0]
 8010596:	68f8      	ldr	r0, [r7, #12]
 8010598:	2300      	movs	r3, #0
 801059a:	9300      	str	r3, [sp, #0]
 801059c:	0023      	movs	r3, r4
 801059e:	f001 fc67 	bl	8011e70 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80105a2:	e014      	b.n	80105ce <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	685a      	ldr	r2, [r3, #4]
 80105aa:	2380      	movs	r3, #128	@ 0x80
 80105ac:	049b      	lsls	r3, r3, #18
 80105ae:	401a      	ands	r2, r3
 80105b0:	2380      	movs	r3, #128	@ 0x80
 80105b2:	049b      	lsls	r3, r3, #18
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d004      	beq.n	80105c2 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	0018      	movs	r0, r3
 80105bc:	f000 fcf4 	bl	8010fa8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80105c0:	e036      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2140      	movs	r1, #64	@ 0x40
 80105c6:	0018      	movs	r0, r3
 80105c8:	f000 ffda 	bl	8011580 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80105cc:	e030      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
 80105ce:	e02f      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	2240      	movs	r2, #64	@ 0x40
 80105d4:	4013      	ands	r3, r2
 80105d6:	d02b      	beq.n	8010630 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2240      	movs	r2, #64	@ 0x40
 80105dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80105de:	d027      	beq.n	8010630 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d11d      	bne.n	8010626 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	685a      	ldr	r2, [r3, #4]
 80105f0:	2380      	movs	r3, #128	@ 0x80
 80105f2:	049b      	lsls	r3, r3, #18
 80105f4:	401a      	ands	r2, r3
 80105f6:	2380      	movs	r3, #128	@ 0x80
 80105f8:	049b      	lsls	r3, r3, #18
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d018      	beq.n	8010630 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010602:	4a17      	ldr	r2, [pc, #92]	@ (8010660 <I2C_Master_ISR_IT+0x250>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d109      	bne.n	801061c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2180      	movs	r1, #128	@ 0x80
 8010614:	01c9      	lsls	r1, r1, #7
 8010616:	430a      	orrs	r2, r1
 8010618:	605a      	str	r2, [r3, #4]
 801061a:	e009      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	0018      	movs	r0, r3
 8010620:	f000 fcc2 	bl	8010fa8 <I2C_ITMasterSeqCplt>
 8010624:	e004      	b.n	8010630 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2140      	movs	r1, #64	@ 0x40
 801062a:	0018      	movs	r0, r3
 801062c:	f000 ffa8 	bl	8011580 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	2220      	movs	r2, #32
 8010634:	4013      	ands	r3, r2
 8010636:	d009      	beq.n	801064c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2220      	movs	r2, #32
 801063c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801063e:	d005      	beq.n	801064c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010640:	697a      	ldr	r2, [r7, #20]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	0011      	movs	r1, r2
 8010646:	0018      	movs	r0, r3
 8010648:	f000 fd54 	bl	80110f4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2240      	movs	r2, #64	@ 0x40
 8010650:	2100      	movs	r1, #0
 8010652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	0018      	movs	r0, r3
 8010658:	46bd      	mov	sp, r7
 801065a:	b007      	add	sp, #28
 801065c:	bd90      	pop	{r4, r7, pc}
 801065e:	46c0      	nop			@ (mov r8, r8)
 8010660:	ffff0000 	.word	0xffff0000

08010664 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b086      	sub	sp, #24
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010674:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2240      	movs	r2, #64	@ 0x40
 801067e:	5c9b      	ldrb	r3, [r3, r2]
 8010680:	2b01      	cmp	r3, #1
 8010682:	d101      	bne.n	8010688 <I2C_Slave_ISR_IT+0x24>
 8010684:	2302      	movs	r3, #2
 8010686:	e0e6      	b.n	8010856 <I2C_Slave_ISR_IT+0x1f2>
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2240      	movs	r2, #64	@ 0x40
 801068c:	2101      	movs	r1, #1
 801068e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	2220      	movs	r2, #32
 8010694:	4013      	ands	r3, r2
 8010696:	d009      	beq.n	80106ac <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2220      	movs	r2, #32
 801069c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801069e:	d005      	beq.n	80106ac <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80106a0:	693a      	ldr	r2, [r7, #16]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	0011      	movs	r1, r2
 80106a6:	0018      	movs	r0, r3
 80106a8:	f000 fdf2 	bl	8011290 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	2210      	movs	r2, #16
 80106b0:	4013      	ands	r3, r2
 80106b2:	d052      	beq.n	801075a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2210      	movs	r2, #16
 80106b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80106ba:	d04e      	beq.n	801075a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d12d      	bne.n	8010722 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2241      	movs	r2, #65	@ 0x41
 80106ca:	5c9b      	ldrb	r3, [r3, r2]
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	2b28      	cmp	r3, #40	@ 0x28
 80106d0:	d10b      	bne.n	80106ea <I2C_Slave_ISR_IT+0x86>
 80106d2:	697a      	ldr	r2, [r7, #20]
 80106d4:	2380      	movs	r3, #128	@ 0x80
 80106d6:	049b      	lsls	r3, r3, #18
 80106d8:	429a      	cmp	r2, r3
 80106da:	d106      	bne.n	80106ea <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	0011      	movs	r1, r2
 80106e2:	0018      	movs	r0, r3
 80106e4:	f000 fef4 	bl	80114d0 <I2C_ITListenCplt>
 80106e8:	e036      	b.n	8010758 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2241      	movs	r2, #65	@ 0x41
 80106ee:	5c9b      	ldrb	r3, [r3, r2]
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b29      	cmp	r3, #41	@ 0x29
 80106f4:	d110      	bne.n	8010718 <I2C_Slave_ISR_IT+0xb4>
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	4a59      	ldr	r2, [pc, #356]	@ (8010860 <I2C_Slave_ISR_IT+0x1fc>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d00c      	beq.n	8010718 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2210      	movs	r2, #16
 8010704:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	0018      	movs	r0, r3
 801070a:	f001 f864 	bl	80117d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	0018      	movs	r0, r3
 8010712:	f000 fc8b 	bl	801102c <I2C_ITSlaveSeqCplt>
 8010716:	e01f      	b.n	8010758 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2210      	movs	r2, #16
 801071e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8010720:	e091      	b.n	8010846 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2210      	movs	r2, #16
 8010728:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801072e:	2204      	movs	r2, #4
 8010730:	431a      	orrs	r2, r3
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d005      	beq.n	8010748 <I2C_Slave_ISR_IT+0xe4>
 801073c:	697a      	ldr	r2, [r7, #20]
 801073e:	2380      	movs	r3, #128	@ 0x80
 8010740:	045b      	lsls	r3, r3, #17
 8010742:	429a      	cmp	r2, r3
 8010744:	d000      	beq.n	8010748 <I2C_Slave_ISR_IT+0xe4>
 8010746:	e07e      	b.n	8010846 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	0011      	movs	r1, r2
 8010750:	0018      	movs	r0, r3
 8010752:	f000 ff15 	bl	8011580 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010756:	e076      	b.n	8010846 <I2C_Slave_ISR_IT+0x1e2>
 8010758:	e075      	b.n	8010846 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	2204      	movs	r2, #4
 801075e:	4013      	ands	r3, r2
 8010760:	d02f      	beq.n	80107c2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2204      	movs	r2, #4
 8010766:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010768:	d02b      	beq.n	80107c2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801076e:	b29b      	uxth	r3, r3
 8010770:	2b00      	cmp	r3, #0
 8010772:	d018      	beq.n	80107a6 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801077e:	b2d2      	uxtb	r2, r2
 8010780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010790:	3b01      	subs	r3, #1
 8010792:	b29a      	uxth	r2, r3
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801079c:	b29b      	uxth	r3, r3
 801079e:	3b01      	subs	r3, #1
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d14c      	bne.n	801084a <I2C_Slave_ISR_IT+0x1e6>
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	4a2b      	ldr	r2, [pc, #172]	@ (8010860 <I2C_Slave_ISR_IT+0x1fc>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d048      	beq.n	801084a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	0018      	movs	r0, r3
 80107bc:	f000 fc36 	bl	801102c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80107c0:	e043      	b.n	801084a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	2208      	movs	r2, #8
 80107c6:	4013      	ands	r3, r2
 80107c8:	d00a      	beq.n	80107e0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2208      	movs	r2, #8
 80107ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80107d0:	d006      	beq.n	80107e0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80107d2:	693a      	ldr	r2, [r7, #16]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	0011      	movs	r1, r2
 80107d8:	0018      	movs	r0, r3
 80107da:	f000 fb41 	bl	8010e60 <I2C_ITAddrCplt>
 80107de:	e035      	b.n	801084c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	2202      	movs	r2, #2
 80107e4:	4013      	ands	r3, r2
 80107e6:	d031      	beq.n	801084c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2202      	movs	r2, #2
 80107ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80107ee:	d02d      	beq.n	801084c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d018      	beq.n	801082c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107fe:	781a      	ldrb	r2, [r3, #0]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801080a:	1c5a      	adds	r2, r3, #1
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010814:	b29b      	uxth	r3, r3
 8010816:	3b01      	subs	r3, #1
 8010818:	b29a      	uxth	r2, r3
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010822:	3b01      	subs	r3, #1
 8010824:	b29a      	uxth	r2, r3
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	851a      	strh	r2, [r3, #40]	@ 0x28
 801082a:	e00f      	b.n	801084c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801082c:	697a      	ldr	r2, [r7, #20]
 801082e:	2380      	movs	r3, #128	@ 0x80
 8010830:	045b      	lsls	r3, r3, #17
 8010832:	429a      	cmp	r2, r3
 8010834:	d002      	beq.n	801083c <I2C_Slave_ISR_IT+0x1d8>
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d107      	bne.n	801084c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	0018      	movs	r0, r3
 8010840:	f000 fbf4 	bl	801102c <I2C_ITSlaveSeqCplt>
 8010844:	e002      	b.n	801084c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8010846:	46c0      	nop			@ (mov r8, r8)
 8010848:	e000      	b.n	801084c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801084a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2240      	movs	r2, #64	@ 0x40
 8010850:	2100      	movs	r1, #0
 8010852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010854:	2300      	movs	r3, #0
}
 8010856:	0018      	movs	r0, r3
 8010858:	46bd      	mov	sp, r7
 801085a:	b006      	add	sp, #24
 801085c:	bd80      	pop	{r7, pc}
 801085e:	46c0      	nop			@ (mov r8, r8)
 8010860:	ffff0000 	.word	0xffff0000

08010864 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8010864:	b590      	push	{r4, r7, lr}
 8010866:	b089      	sub	sp, #36	@ 0x24
 8010868:	af02      	add	r7, sp, #8
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2240      	movs	r2, #64	@ 0x40
 8010874:	5c9b      	ldrb	r3, [r3, r2]
 8010876:	2b01      	cmp	r3, #1
 8010878:	d101      	bne.n	801087e <I2C_Master_ISR_DMA+0x1a>
 801087a:	2302      	movs	r3, #2
 801087c:	e0e7      	b.n	8010a4e <I2C_Master_ISR_DMA+0x1ea>
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2240      	movs	r2, #64	@ 0x40
 8010882:	2101      	movs	r1, #1
 8010884:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	2210      	movs	r2, #16
 801088a:	4013      	ands	r3, r2
 801088c:	d017      	beq.n	80108be <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2210      	movs	r2, #16
 8010892:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010894:	d013      	beq.n	80108be <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2210      	movs	r2, #16
 801089c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108a2:	2204      	movs	r2, #4
 80108a4:	431a      	orrs	r2, r3
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2120      	movs	r1, #32
 80108ae:	0018      	movs	r0, r3
 80108b0:	f001 fb18 	bl	8011ee4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	0018      	movs	r0, r3
 80108b8:	f000 ff8d 	bl	80117d6 <I2C_Flush_TXDR>
 80108bc:	e0c2      	b.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2280      	movs	r2, #128	@ 0x80
 80108c2:	4013      	ands	r3, r2
 80108c4:	d100      	bne.n	80108c8 <I2C_Master_ISR_DMA+0x64>
 80108c6:	e07c      	b.n	80109c2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2240      	movs	r2, #64	@ 0x40
 80108cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80108ce:	d100      	bne.n	80108d2 <I2C_Master_ISR_DMA+0x6e>
 80108d0:	e077      	b.n	80109c2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2140      	movs	r1, #64	@ 0x40
 80108de:	438a      	bics	r2, r1
 80108e0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d055      	beq.n	8010998 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	2312      	movs	r3, #18
 80108f6:	18fb      	adds	r3, r7, r3
 80108f8:	0592      	lsls	r2, r2, #22
 80108fa:	0d92      	lsrs	r2, r2, #22
 80108fc:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010902:	b29b      	uxth	r3, r3
 8010904:	2bff      	cmp	r3, #255	@ 0xff
 8010906:	d906      	bls.n	8010916 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	22ff      	movs	r2, #255	@ 0xff
 801090c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801090e:	2380      	movs	r3, #128	@ 0x80
 8010910:	045b      	lsls	r3, r3, #17
 8010912:	617b      	str	r3, [r7, #20]
 8010914:	e010      	b.n	8010938 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801091a:	b29a      	uxth	r2, r3
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010924:	4a4c      	ldr	r2, [pc, #304]	@ (8010a58 <I2C_Master_ISR_DMA+0x1f4>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d003      	beq.n	8010932 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801092e:	617b      	str	r3, [r7, #20]
 8010930:	e002      	b.n	8010938 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8010932:	2380      	movs	r3, #128	@ 0x80
 8010934:	049b      	lsls	r3, r3, #18
 8010936:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801093c:	b2da      	uxtb	r2, r3
 801093e:	697c      	ldr	r4, [r7, #20]
 8010940:	2312      	movs	r3, #18
 8010942:	18fb      	adds	r3, r7, r3
 8010944:	8819      	ldrh	r1, [r3, #0]
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	2300      	movs	r3, #0
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	0023      	movs	r3, r4
 801094e:	f001 fa8f 	bl	8011e70 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010956:	b29a      	uxth	r2, r3
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	b29a      	uxth	r2, r3
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2241      	movs	r2, #65	@ 0x41
 8010968:	5c9b      	ldrb	r3, [r3, r2]
 801096a:	b2db      	uxtb	r3, r3
 801096c:	2b22      	cmp	r3, #34	@ 0x22
 801096e:	d109      	bne.n	8010984 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2180      	movs	r1, #128	@ 0x80
 801097c:	0209      	lsls	r1, r1, #8
 801097e:	430a      	orrs	r2, r1
 8010980:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010982:	e05f      	b.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2180      	movs	r1, #128	@ 0x80
 8010990:	01c9      	lsls	r1, r1, #7
 8010992:	430a      	orrs	r2, r1
 8010994:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010996:	e055      	b.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	685a      	ldr	r2, [r3, #4]
 801099e:	2380      	movs	r3, #128	@ 0x80
 80109a0:	049b      	lsls	r3, r3, #18
 80109a2:	401a      	ands	r2, r3
 80109a4:	2380      	movs	r3, #128	@ 0x80
 80109a6:	049b      	lsls	r3, r3, #18
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d004      	beq.n	80109b6 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	0018      	movs	r0, r3
 80109b0:	f000 fafa 	bl	8010fa8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80109b4:	e046      	b.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2140      	movs	r1, #64	@ 0x40
 80109ba:	0018      	movs	r0, r3
 80109bc:	f000 fde0 	bl	8011580 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80109c0:	e040      	b.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	2240      	movs	r2, #64	@ 0x40
 80109c6:	4013      	ands	r3, r2
 80109c8:	d02c      	beq.n	8010a24 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2240      	movs	r2, #64	@ 0x40
 80109ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80109d0:	d028      	beq.n	8010a24 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d11d      	bne.n	8010a18 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	685a      	ldr	r2, [r3, #4]
 80109e2:	2380      	movs	r3, #128	@ 0x80
 80109e4:	049b      	lsls	r3, r3, #18
 80109e6:	401a      	ands	r2, r3
 80109e8:	2380      	movs	r3, #128	@ 0x80
 80109ea:	049b      	lsls	r3, r3, #18
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d028      	beq.n	8010a42 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109f4:	4a18      	ldr	r2, [pc, #96]	@ (8010a58 <I2C_Master_ISR_DMA+0x1f4>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d109      	bne.n	8010a0e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	685a      	ldr	r2, [r3, #4]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2180      	movs	r1, #128	@ 0x80
 8010a06:	01c9      	lsls	r1, r1, #7
 8010a08:	430a      	orrs	r2, r1
 8010a0a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010a0c:	e019      	b.n	8010a42 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	0018      	movs	r0, r3
 8010a12:	f000 fac9 	bl	8010fa8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8010a16:	e014      	b.n	8010a42 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2140      	movs	r1, #64	@ 0x40
 8010a1c:	0018      	movs	r0, r3
 8010a1e:	f000 fdaf 	bl	8011580 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010a22:	e00e      	b.n	8010a42 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	2220      	movs	r2, #32
 8010a28:	4013      	ands	r3, r2
 8010a2a:	d00b      	beq.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2220      	movs	r2, #32
 8010a30:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010a32:	d007      	beq.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	0011      	movs	r1, r2
 8010a3a:	0018      	movs	r0, r3
 8010a3c:	f000 fb5a 	bl	80110f4 <I2C_ITMasterCplt>
 8010a40:	e000      	b.n	8010a44 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8010a42:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2240      	movs	r2, #64	@ 0x40
 8010a48:	2100      	movs	r1, #0
 8010a4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	0018      	movs	r0, r3
 8010a50:	46bd      	mov	sp, r7
 8010a52:	b007      	add	sp, #28
 8010a54:	bd90      	pop	{r4, r7, pc}
 8010a56:	46c0      	nop			@ (mov r8, r8)
 8010a58:	ffff0000 	.word	0xffff0000

08010a5c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8010a5c:	b590      	push	{r4, r7, lr}
 8010a5e:	b089      	sub	sp, #36	@ 0x24
 8010a60:	af02      	add	r7, sp, #8
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8010a68:	4b88      	ldr	r3, [pc, #544]	@ (8010c8c <I2C_Mem_ISR_DMA+0x230>)
 8010a6a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2240      	movs	r2, #64	@ 0x40
 8010a70:	5c9b      	ldrb	r3, [r3, r2]
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d101      	bne.n	8010a7a <I2C_Mem_ISR_DMA+0x1e>
 8010a76:	2302      	movs	r3, #2
 8010a78:	e104      	b.n	8010c84 <I2C_Mem_ISR_DMA+0x228>
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2240      	movs	r2, #64	@ 0x40
 8010a7e:	2101      	movs	r1, #1
 8010a80:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	2210      	movs	r2, #16
 8010a86:	4013      	ands	r3, r2
 8010a88:	d017      	beq.n	8010aba <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2210      	movs	r2, #16
 8010a8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010a90:	d013      	beq.n	8010aba <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2210      	movs	r2, #16
 8010a98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a9e:	2204      	movs	r2, #4
 8010aa0:	431a      	orrs	r2, r3
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2120      	movs	r1, #32
 8010aaa:	0018      	movs	r0, r3
 8010aac:	f001 fa1a 	bl	8011ee4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	0018      	movs	r0, r3
 8010ab4:	f000 fe8f 	bl	80117d6 <I2C_Flush_TXDR>
 8010ab8:	e0df      	b.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	2202      	movs	r2, #2
 8010abe:	4013      	ands	r3, r2
 8010ac0:	d00d      	beq.n	8010ade <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2202      	movs	r2, #2
 8010ac6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010ac8:	d009      	beq.n	8010ade <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010ad2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	4252      	negs	r2, r2
 8010ada:	651a      	str	r2, [r3, #80]	@ 0x50
 8010adc:	e0cd      	b.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	2280      	movs	r2, #128	@ 0x80
 8010ae2:	4013      	ands	r3, r2
 8010ae4:	d05e      	beq.n	8010ba4 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2240      	movs	r2, #64	@ 0x40
 8010aea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010aec:	d05a      	beq.n	8010ba4 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2110      	movs	r1, #16
 8010af2:	0018      	movs	r0, r3
 8010af4:	f001 f9f6 	bl	8011ee4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d04a      	beq.n	8010b98 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	2bff      	cmp	r3, #255	@ 0xff
 8010b0a:	d910      	bls.n	8010b2e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	22ff      	movs	r2, #255	@ 0xff
 8010b10:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b16:	b299      	uxth	r1, r3
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b1c:	b2da      	uxtb	r2, r3
 8010b1e:	2380      	movs	r3, #128	@ 0x80
 8010b20:	045b      	lsls	r3, r3, #17
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	2400      	movs	r4, #0
 8010b26:	9400      	str	r4, [sp, #0]
 8010b28:	f001 f9a2 	bl	8011e70 <I2C_TransferConfig>
 8010b2c:	e011      	b.n	8010b52 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b3c:	b299      	uxth	r1, r3
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b42:	b2da      	uxtb	r2, r3
 8010b44:	2380      	movs	r3, #128	@ 0x80
 8010b46:	049b      	lsls	r3, r3, #18
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	2400      	movs	r4, #0
 8010b4c:	9400      	str	r4, [sp, #0]
 8010b4e:	f001 f98f 	bl	8011e70 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2241      	movs	r2, #65	@ 0x41
 8010b68:	5c9b      	ldrb	r3, [r3, r2]
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	2b22      	cmp	r3, #34	@ 0x22
 8010b6e:	d109      	bne.n	8010b84 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2180      	movs	r1, #128	@ 0x80
 8010b7c:	0209      	lsls	r1, r1, #8
 8010b7e:	430a      	orrs	r2, r1
 8010b80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010b82:	e07a      	b.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2180      	movs	r1, #128	@ 0x80
 8010b90:	01c9      	lsls	r1, r1, #7
 8010b92:	430a      	orrs	r2, r1
 8010b94:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010b96:	e070      	b.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2140      	movs	r1, #64	@ 0x40
 8010b9c:	0018      	movs	r0, r3
 8010b9e:	f000 fcef 	bl	8011580 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010ba2:	e06a      	b.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	2240      	movs	r2, #64	@ 0x40
 8010ba8:	4013      	ands	r3, r2
 8010baa:	d058      	beq.n	8010c5e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2240      	movs	r2, #64	@ 0x40
 8010bb0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010bb2:	d054      	beq.n	8010c5e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	2241      	movs	r2, #65	@ 0x41
 8010bb8:	5c9b      	ldrb	r3, [r3, r2]
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	2b22      	cmp	r3, #34	@ 0x22
 8010bbe:	d101      	bne.n	8010bc4 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8010bc0:	4b33      	ldr	r3, [pc, #204]	@ (8010c90 <I2C_Mem_ISR_DMA+0x234>)
 8010bc2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	2bff      	cmp	r3, #255	@ 0xff
 8010bcc:	d911      	bls.n	8010bf2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	22ff      	movs	r2, #255	@ 0xff
 8010bd2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bd8:	b299      	uxth	r1, r3
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bde:	b2da      	uxtb	r2, r3
 8010be0:	2380      	movs	r3, #128	@ 0x80
 8010be2:	045c      	lsls	r4, r3, #17
 8010be4:	68f8      	ldr	r0, [r7, #12]
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	0023      	movs	r3, r4
 8010bec:	f001 f940 	bl	8011e70 <I2C_TransferConfig>
 8010bf0:	e012      	b.n	8010c18 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c00:	b299      	uxth	r1, r3
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	2380      	movs	r3, #128	@ 0x80
 8010c0a:	049c      	lsls	r4, r3, #18
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	9300      	str	r3, [sp, #0]
 8010c12:	0023      	movs	r3, r4
 8010c14:	f001 f92c 	bl	8011e70 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2241      	movs	r2, #65	@ 0x41
 8010c2e:	5c9b      	ldrb	r3, [r3, r2]
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	2b22      	cmp	r3, #34	@ 0x22
 8010c34:	d109      	bne.n	8010c4a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2180      	movs	r1, #128	@ 0x80
 8010c42:	0209      	lsls	r1, r1, #8
 8010c44:	430a      	orrs	r2, r1
 8010c46:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c48:	e017      	b.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2180      	movs	r1, #128	@ 0x80
 8010c56:	01c9      	lsls	r1, r1, #7
 8010c58:	430a      	orrs	r2, r1
 8010c5a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c5c:	e00d      	b.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	2220      	movs	r2, #32
 8010c62:	4013      	ands	r3, r2
 8010c64:	d009      	beq.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2220      	movs	r2, #32
 8010c6a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010c6c:	d005      	beq.n	8010c7a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010c6e:	68ba      	ldr	r2, [r7, #8]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	0011      	movs	r1, r2
 8010c74:	0018      	movs	r0, r3
 8010c76:	f000 fa3d 	bl	80110f4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2240      	movs	r2, #64	@ 0x40
 8010c7e:	2100      	movs	r1, #0
 8010c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	0018      	movs	r0, r3
 8010c86:	46bd      	mov	sp, r7
 8010c88:	b007      	add	sp, #28
 8010c8a:	bd90      	pop	{r4, r7, pc}
 8010c8c:	80002000 	.word	0x80002000
 8010c90:	80002400 	.word	0x80002400

08010c94 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b088      	sub	sp, #32
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ca4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2240      	movs	r2, #64	@ 0x40
 8010cae:	5c9b      	ldrb	r3, [r3, r2]
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d101      	bne.n	8010cb8 <I2C_Slave_ISR_DMA+0x24>
 8010cb4:	2302      	movs	r3, #2
 8010cb6:	e0cd      	b.n	8010e54 <I2C_Slave_ISR_DMA+0x1c0>
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2240      	movs	r2, #64	@ 0x40
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2220      	movs	r2, #32
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	d009      	beq.n	8010cdc <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2220      	movs	r2, #32
 8010ccc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010cce:	d005      	beq.n	8010cdc <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8010cd0:	68ba      	ldr	r2, [r7, #8]
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	0011      	movs	r1, r2
 8010cd6:	0018      	movs	r0, r3
 8010cd8:	f000 fada 	bl	8011290 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	2210      	movs	r2, #16
 8010ce0:	4013      	ands	r3, r2
 8010ce2:	d100      	bne.n	8010ce6 <I2C_Slave_ISR_DMA+0x52>
 8010ce4:	e0a3      	b.n	8010e2e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2210      	movs	r2, #16
 8010cea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010cec:	d100      	bne.n	8010cf0 <I2C_Slave_ISR_DMA+0x5c>
 8010cee:	e09e      	b.n	8010e2e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	2380      	movs	r3, #128	@ 0x80
 8010cf4:	01db      	lsls	r3, r3, #7
 8010cf6:	4013      	ands	r3, r2
 8010cf8:	d105      	bne.n	8010d06 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	2380      	movs	r3, #128	@ 0x80
 8010cfe:	021b      	lsls	r3, r3, #8
 8010d00:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010d02:	d100      	bne.n	8010d06 <I2C_Slave_ISR_DMA+0x72>
 8010d04:	e08c      	b.n	8010e20 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00c      	beq.n	8010d28 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	2380      	movs	r3, #128	@ 0x80
 8010d12:	021b      	lsls	r3, r3, #8
 8010d14:	4013      	ands	r3, r2
 8010d16:	d007      	beq.n	8010d28 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d101      	bne.n	8010d28 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010d24:	2301      	movs	r3, #1
 8010d26:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00c      	beq.n	8010d4a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	2380      	movs	r3, #128	@ 0x80
 8010d34:	01db      	lsls	r3, r3, #7
 8010d36:	4013      	ands	r3, r2
 8010d38:	d007      	beq.n	8010d4a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010d46:	2301      	movs	r3, #1
 8010d48:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d12d      	bne.n	8010dac <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2241      	movs	r2, #65	@ 0x41
 8010d54:	5c9b      	ldrb	r3, [r3, r2]
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	2b28      	cmp	r3, #40	@ 0x28
 8010d5a:	d10b      	bne.n	8010d74 <I2C_Slave_ISR_DMA+0xe0>
 8010d5c:	69ba      	ldr	r2, [r7, #24]
 8010d5e:	2380      	movs	r3, #128	@ 0x80
 8010d60:	049b      	lsls	r3, r3, #18
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d106      	bne.n	8010d74 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010d66:	68ba      	ldr	r2, [r7, #8]
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	0011      	movs	r1, r2
 8010d6c:	0018      	movs	r0, r3
 8010d6e:	f000 fbaf 	bl	80114d0 <I2C_ITListenCplt>
 8010d72:	e054      	b.n	8010e1e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2241      	movs	r2, #65	@ 0x41
 8010d78:	5c9b      	ldrb	r3, [r3, r2]
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	2b29      	cmp	r3, #41	@ 0x29
 8010d7e:	d110      	bne.n	8010da2 <I2C_Slave_ISR_DMA+0x10e>
 8010d80:	69bb      	ldr	r3, [r7, #24]
 8010d82:	4a36      	ldr	r2, [pc, #216]	@ (8010e5c <I2C_Slave_ISR_DMA+0x1c8>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d00c      	beq.n	8010da2 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2210      	movs	r2, #16
 8010d8e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	0018      	movs	r0, r3
 8010d94:	f000 fd1f 	bl	80117d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	0018      	movs	r0, r3
 8010d9c:	f000 f946 	bl	801102c <I2C_ITSlaveSeqCplt>
 8010da0:	e03d      	b.n	8010e1e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2210      	movs	r2, #16
 8010da8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8010daa:	e03e      	b.n	8010e2a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2210      	movs	r2, #16
 8010db2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010db8:	2204      	movs	r2, #4
 8010dba:	431a      	orrs	r2, r3
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8010dc0:	2317      	movs	r3, #23
 8010dc2:	18fb      	adds	r3, r7, r3
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	2141      	movs	r1, #65	@ 0x41
 8010dc8:	5c52      	ldrb	r2, [r2, r1]
 8010dca:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d004      	beq.n	8010ddc <I2C_Slave_ISR_DMA+0x148>
 8010dd2:	69ba      	ldr	r2, [r7, #24]
 8010dd4:	2380      	movs	r3, #128	@ 0x80
 8010dd6:	045b      	lsls	r3, r3, #17
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d126      	bne.n	8010e2a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010ddc:	2217      	movs	r2, #23
 8010dde:	18bb      	adds	r3, r7, r2
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	2b21      	cmp	r3, #33	@ 0x21
 8010de4:	d003      	beq.n	8010dee <I2C_Slave_ISR_DMA+0x15a>
 8010de6:	18bb      	adds	r3, r7, r2
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	2b29      	cmp	r3, #41	@ 0x29
 8010dec:	d103      	bne.n	8010df6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2221      	movs	r2, #33	@ 0x21
 8010df2:	631a      	str	r2, [r3, #48]	@ 0x30
 8010df4:	e00b      	b.n	8010e0e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010df6:	2217      	movs	r2, #23
 8010df8:	18bb      	adds	r3, r7, r2
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b22      	cmp	r3, #34	@ 0x22
 8010dfe:	d003      	beq.n	8010e08 <I2C_Slave_ISR_DMA+0x174>
 8010e00:	18bb      	adds	r3, r7, r2
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e06:	d102      	bne.n	8010e0e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2222      	movs	r2, #34	@ 0x22
 8010e0c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	0011      	movs	r1, r2
 8010e16:	0018      	movs	r0, r3
 8010e18:	f000 fbb2 	bl	8011580 <I2C_ITError>
      if (treatdmanack == 1U)
 8010e1c:	e005      	b.n	8010e2a <I2C_Slave_ISR_DMA+0x196>
 8010e1e:	e004      	b.n	8010e2a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2210      	movs	r2, #16
 8010e26:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010e28:	e00f      	b.n	8010e4a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010e2a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010e2c:	e00d      	b.n	8010e4a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	2208      	movs	r2, #8
 8010e32:	4013      	ands	r3, r2
 8010e34:	d009      	beq.n	8010e4a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2208      	movs	r2, #8
 8010e3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010e3c:	d005      	beq.n	8010e4a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8010e3e:	68ba      	ldr	r2, [r7, #8]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	0011      	movs	r1, r2
 8010e44:	0018      	movs	r0, r3
 8010e46:	f000 f80b 	bl	8010e60 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2240      	movs	r2, #64	@ 0x40
 8010e4e:	2100      	movs	r1, #0
 8010e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010e52:	2300      	movs	r3, #0
}
 8010e54:	0018      	movs	r0, r3
 8010e56:	46bd      	mov	sp, r7
 8010e58:	b008      	add	sp, #32
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	ffff0000 	.word	0xffff0000

08010e60 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010e60:	b5b0      	push	{r4, r5, r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2241      	movs	r2, #65	@ 0x41
 8010e6e:	5c9b      	ldrb	r3, [r3, r2]
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	001a      	movs	r2, r3
 8010e74:	2328      	movs	r3, #40	@ 0x28
 8010e76:	4013      	ands	r3, r2
 8010e78:	2b28      	cmp	r3, #40	@ 0x28
 8010e7a:	d000      	beq.n	8010e7e <I2C_ITAddrCplt+0x1e>
 8010e7c:	e088      	b.n	8010f90 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	699b      	ldr	r3, [r3, #24]
 8010e84:	0c1b      	lsrs	r3, r3, #16
 8010e86:	b2da      	uxtb	r2, r3
 8010e88:	250f      	movs	r5, #15
 8010e8a:	197b      	adds	r3, r7, r5
 8010e8c:	2101      	movs	r1, #1
 8010e8e:	400a      	ands	r2, r1
 8010e90:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	699b      	ldr	r3, [r3, #24]
 8010e98:	0c1b      	lsrs	r3, r3, #16
 8010e9a:	b29a      	uxth	r2, r3
 8010e9c:	200c      	movs	r0, #12
 8010e9e:	183b      	adds	r3, r7, r0
 8010ea0:	21fe      	movs	r1, #254	@ 0xfe
 8010ea2:	400a      	ands	r2, r1
 8010ea4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	689b      	ldr	r3, [r3, #8]
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	240a      	movs	r4, #10
 8010eb0:	193b      	adds	r3, r7, r4
 8010eb2:	0592      	lsls	r2, r2, #22
 8010eb4:	0d92      	lsrs	r2, r2, #22
 8010eb6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	2308      	movs	r3, #8
 8010ec2:	18fb      	adds	r3, r7, r3
 8010ec4:	21fe      	movs	r1, #254	@ 0xfe
 8010ec6:	400a      	ands	r2, r1
 8010ec8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	2b02      	cmp	r3, #2
 8010ed0:	d148      	bne.n	8010f64 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8010ed2:	0021      	movs	r1, r4
 8010ed4:	187b      	adds	r3, r7, r1
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	09db      	lsrs	r3, r3, #7
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	183b      	adds	r3, r7, r0
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	4053      	eors	r3, r2
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	001a      	movs	r2, r3
 8010ee6:	2306      	movs	r3, #6
 8010ee8:	4013      	ands	r3, r2
 8010eea:	d120      	bne.n	8010f2e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010eec:	183b      	adds	r3, r7, r0
 8010eee:	187a      	adds	r2, r7, r1
 8010ef0:	8812      	ldrh	r2, [r2, #0]
 8010ef2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ef8:	1c5a      	adds	r2, r3, #1
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010f02:	2b02      	cmp	r3, #2
 8010f04:	d14c      	bne.n	8010fa0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2208      	movs	r2, #8
 8010f12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2240      	movs	r2, #64	@ 0x40
 8010f18:	2100      	movs	r1, #0
 8010f1a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010f1c:	183b      	adds	r3, r7, r0
 8010f1e:	881a      	ldrh	r2, [r3, #0]
 8010f20:	197b      	adds	r3, r7, r5
 8010f22:	7819      	ldrb	r1, [r3, #0]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	0018      	movs	r0, r3
 8010f28:	f7ff fa39 	bl	801039e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010f2c:	e038      	b.n	8010fa0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8010f2e:	240c      	movs	r4, #12
 8010f30:	193b      	adds	r3, r7, r4
 8010f32:	2208      	movs	r2, #8
 8010f34:	18ba      	adds	r2, r7, r2
 8010f36:	8812      	ldrh	r2, [r2, #0]
 8010f38:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010f3a:	2380      	movs	r3, #128	@ 0x80
 8010f3c:	021a      	lsls	r2, r3, #8
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	0011      	movs	r1, r2
 8010f42:	0018      	movs	r0, r3
 8010f44:	f001 f85c 	bl	8012000 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2240      	movs	r2, #64	@ 0x40
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010f50:	193b      	adds	r3, r7, r4
 8010f52:	881a      	ldrh	r2, [r3, #0]
 8010f54:	230f      	movs	r3, #15
 8010f56:	18fb      	adds	r3, r7, r3
 8010f58:	7819      	ldrb	r1, [r3, #0]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	0018      	movs	r0, r3
 8010f5e:	f7ff fa1e 	bl	801039e <HAL_I2C_AddrCallback>
}
 8010f62:	e01d      	b.n	8010fa0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010f64:	2380      	movs	r3, #128	@ 0x80
 8010f66:	021a      	lsls	r2, r3, #8
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	0011      	movs	r1, r2
 8010f6c:	0018      	movs	r0, r3
 8010f6e:	f001 f847 	bl	8012000 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2240      	movs	r2, #64	@ 0x40
 8010f76:	2100      	movs	r1, #0
 8010f78:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010f7a:	230c      	movs	r3, #12
 8010f7c:	18fb      	adds	r3, r7, r3
 8010f7e:	881a      	ldrh	r2, [r3, #0]
 8010f80:	230f      	movs	r3, #15
 8010f82:	18fb      	adds	r3, r7, r3
 8010f84:	7819      	ldrb	r1, [r3, #0]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	0018      	movs	r0, r3
 8010f8a:	f7ff fa08 	bl	801039e <HAL_I2C_AddrCallback>
}
 8010f8e:	e007      	b.n	8010fa0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2208      	movs	r2, #8
 8010f96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2240      	movs	r2, #64	@ 0x40
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	5499      	strb	r1, [r3, r2]
}
 8010fa0:	46c0      	nop			@ (mov r8, r8)
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	b004      	add	sp, #16
 8010fa6:	bdb0      	pop	{r4, r5, r7, pc}

08010fa8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b082      	sub	sp, #8
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2242      	movs	r2, #66	@ 0x42
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2241      	movs	r2, #65	@ 0x41
 8010fbc:	5c9b      	ldrb	r3, [r3, r2]
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	2b21      	cmp	r3, #33	@ 0x21
 8010fc2:	d117      	bne.n	8010ff4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2241      	movs	r2, #65	@ 0x41
 8010fc8:	2120      	movs	r1, #32
 8010fca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2211      	movs	r2, #17
 8010fd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2101      	movs	r1, #1
 8010fdc:	0018      	movs	r0, r3
 8010fde:	f001 f80f 	bl	8012000 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2240      	movs	r2, #64	@ 0x40
 8010fe6:	2100      	movs	r1, #0
 8010fe8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	0018      	movs	r0, r3
 8010fee:	f7ff f9b6 	bl	801035e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010ff2:	e016      	b.n	8011022 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2241      	movs	r2, #65	@ 0x41
 8010ff8:	2120      	movs	r1, #32
 8010ffa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2212      	movs	r2, #18
 8011000:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2200      	movs	r2, #0
 8011006:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2102      	movs	r1, #2
 801100c:	0018      	movs	r0, r3
 801100e:	f000 fff7 	bl	8012000 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2240      	movs	r2, #64	@ 0x40
 8011016:	2100      	movs	r1, #0
 8011018:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	0018      	movs	r0, r3
 801101e:	f7ff f9a6 	bl	801036e <HAL_I2C_MasterRxCpltCallback>
}
 8011022:	46c0      	nop			@ (mov r8, r8)
 8011024:	46bd      	mov	sp, r7
 8011026:	b002      	add	sp, #8
 8011028:	bd80      	pop	{r7, pc}
	...

0801102c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2242      	movs	r2, #66	@ 0x42
 8011040:	2100      	movs	r1, #0
 8011042:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	2380      	movs	r3, #128	@ 0x80
 8011048:	01db      	lsls	r3, r3, #7
 801104a:	4013      	ands	r3, r2
 801104c:	d008      	beq.n	8011060 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4924      	ldr	r1, [pc, #144]	@ (80110ec <I2C_ITSlaveSeqCplt+0xc0>)
 801105a:	400a      	ands	r2, r1
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	e00c      	b.n	801107a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011060:	68fa      	ldr	r2, [r7, #12]
 8011062:	2380      	movs	r3, #128	@ 0x80
 8011064:	021b      	lsls	r3, r3, #8
 8011066:	4013      	ands	r3, r2
 8011068:	d007      	beq.n	801107a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	491e      	ldr	r1, [pc, #120]	@ (80110f0 <I2C_ITSlaveSeqCplt+0xc4>)
 8011076:	400a      	ands	r2, r1
 8011078:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2241      	movs	r2, #65	@ 0x41
 801107e:	5c9b      	ldrb	r3, [r3, r2]
 8011080:	b2db      	uxtb	r3, r3
 8011082:	2b29      	cmp	r3, #41	@ 0x29
 8011084:	d114      	bne.n	80110b0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2241      	movs	r2, #65	@ 0x41
 801108a:	2128      	movs	r1, #40	@ 0x28
 801108c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2221      	movs	r2, #33	@ 0x21
 8011092:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2101      	movs	r1, #1
 8011098:	0018      	movs	r0, r3
 801109a:	f000 ffb1 	bl	8012000 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2240      	movs	r2, #64	@ 0x40
 80110a2:	2100      	movs	r1, #0
 80110a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	0018      	movs	r0, r3
 80110aa:	f7ff f968 	bl	801037e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80110ae:	e019      	b.n	80110e4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2241      	movs	r2, #65	@ 0x41
 80110b4:	5c9b      	ldrb	r3, [r3, r2]
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80110ba:	d113      	bne.n	80110e4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2241      	movs	r2, #65	@ 0x41
 80110c0:	2128      	movs	r1, #40	@ 0x28
 80110c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2222      	movs	r2, #34	@ 0x22
 80110c8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2102      	movs	r1, #2
 80110ce:	0018      	movs	r0, r3
 80110d0:	f000 ff96 	bl	8012000 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2240      	movs	r2, #64	@ 0x40
 80110d8:	2100      	movs	r1, #0
 80110da:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	0018      	movs	r0, r3
 80110e0:	f7ff f955 	bl	801038e <HAL_I2C_SlaveRxCpltCallback>
}
 80110e4:	46c0      	nop			@ (mov r8, r8)
 80110e6:	46bd      	mov	sp, r7
 80110e8:	b004      	add	sp, #16
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	ffffbfff 	.word	0xffffbfff
 80110f0:	ffff7fff 	.word	0xffff7fff

080110f4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b086      	sub	sp, #24
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2220      	movs	r2, #32
 8011108:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2241      	movs	r2, #65	@ 0x41
 801110e:	5c9b      	ldrb	r3, [r3, r2]
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b21      	cmp	r3, #33	@ 0x21
 8011114:	d108      	bne.n	8011128 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2101      	movs	r1, #1
 801111a:	0018      	movs	r0, r3
 801111c:	f000 ff70 	bl	8012000 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2211      	movs	r2, #17
 8011124:	631a      	str	r2, [r3, #48]	@ 0x30
 8011126:	e00d      	b.n	8011144 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2241      	movs	r2, #65	@ 0x41
 801112c:	5c9b      	ldrb	r3, [r3, r2]
 801112e:	b2db      	uxtb	r3, r3
 8011130:	2b22      	cmp	r3, #34	@ 0x22
 8011132:	d107      	bne.n	8011144 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2102      	movs	r1, #2
 8011138:	0018      	movs	r0, r3
 801113a:	f000 ff61 	bl	8012000 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2212      	movs	r2, #18
 8011142:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	685a      	ldr	r2, [r3, #4]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	494e      	ldr	r1, [pc, #312]	@ (8011288 <I2C_ITMasterCplt+0x194>)
 8011150:	400a      	ands	r2, r1
 8011152:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	4a4b      	ldr	r2, [pc, #300]	@ (801128c <I2C_ITMasterCplt+0x198>)
 801115e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	2210      	movs	r2, #16
 8011164:	4013      	ands	r3, r2
 8011166:	d009      	beq.n	801117c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2210      	movs	r2, #16
 801116e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011174:	2204      	movs	r2, #4
 8011176:	431a      	orrs	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2241      	movs	r2, #65	@ 0x41
 8011180:	5c9b      	ldrb	r3, [r3, r2]
 8011182:	b2db      	uxtb	r3, r3
 8011184:	2b60      	cmp	r3, #96	@ 0x60
 8011186:	d109      	bne.n	801119c <I2C_ITMasterCplt+0xa8>
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	2204      	movs	r2, #4
 801118c:	4013      	ands	r3, r2
 801118e:	d005      	beq.n	801119c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011196:	b2db      	uxtb	r3, r3
 8011198:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801119a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	0018      	movs	r0, r3
 80111a0:	f000 fb19 	bl	80117d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111a8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2241      	movs	r2, #65	@ 0x41
 80111ae:	5c9b      	ldrb	r3, [r3, r2]
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b60      	cmp	r3, #96	@ 0x60
 80111b4:	d002      	beq.n	80111bc <I2C_ITMasterCplt+0xc8>
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d007      	beq.n	80111cc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	0011      	movs	r1, r2
 80111c4:	0018      	movs	r0, r3
 80111c6:	f000 f9db 	bl	8011580 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80111ca:	e058      	b.n	801127e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2241      	movs	r2, #65	@ 0x41
 80111d0:	5c9b      	ldrb	r3, [r3, r2]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	2b21      	cmp	r3, #33	@ 0x21
 80111d6:	d126      	bne.n	8011226 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2241      	movs	r2, #65	@ 0x41
 80111dc:	2120      	movs	r1, #32
 80111de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2200      	movs	r2, #0
 80111e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2242      	movs	r2, #66	@ 0x42
 80111ea:	5c9b      	ldrb	r3, [r3, r2]
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	2b40      	cmp	r3, #64	@ 0x40
 80111f0:	d10c      	bne.n	801120c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2242      	movs	r2, #66	@ 0x42
 80111f6:	2100      	movs	r1, #0
 80111f8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2240      	movs	r2, #64	@ 0x40
 80111fe:	2100      	movs	r1, #0
 8011200:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	0018      	movs	r0, r3
 8011206:	f7ff f8e2 	bl	80103ce <HAL_I2C_MemTxCpltCallback>
}
 801120a:	e038      	b.n	801127e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2242      	movs	r2, #66	@ 0x42
 8011210:	2100      	movs	r1, #0
 8011212:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2240      	movs	r2, #64	@ 0x40
 8011218:	2100      	movs	r1, #0
 801121a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	0018      	movs	r0, r3
 8011220:	f7ff f89d 	bl	801035e <HAL_I2C_MasterTxCpltCallback>
}
 8011224:	e02b      	b.n	801127e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2241      	movs	r2, #65	@ 0x41
 801122a:	5c9b      	ldrb	r3, [r3, r2]
 801122c:	b2db      	uxtb	r3, r3
 801122e:	2b22      	cmp	r3, #34	@ 0x22
 8011230:	d125      	bne.n	801127e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2241      	movs	r2, #65	@ 0x41
 8011236:	2120      	movs	r1, #32
 8011238:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2200      	movs	r2, #0
 801123e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2242      	movs	r2, #66	@ 0x42
 8011244:	5c9b      	ldrb	r3, [r3, r2]
 8011246:	b2db      	uxtb	r3, r3
 8011248:	2b40      	cmp	r3, #64	@ 0x40
 801124a:	d10c      	bne.n	8011266 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2242      	movs	r2, #66	@ 0x42
 8011250:	2100      	movs	r1, #0
 8011252:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2240      	movs	r2, #64	@ 0x40
 8011258:	2100      	movs	r1, #0
 801125a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	0018      	movs	r0, r3
 8011260:	f7ff f8bd 	bl	80103de <HAL_I2C_MemRxCpltCallback>
}
 8011264:	e00b      	b.n	801127e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2242      	movs	r2, #66	@ 0x42
 801126a:	2100      	movs	r1, #0
 801126c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2240      	movs	r2, #64	@ 0x40
 8011272:	2100      	movs	r1, #0
 8011274:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	0018      	movs	r0, r3
 801127a:	f7ff f878 	bl	801036e <HAL_I2C_MasterRxCpltCallback>
}
 801127e:	46c0      	nop			@ (mov r8, r8)
 8011280:	46bd      	mov	sp, r7
 8011282:	b006      	add	sp, #24
 8011284:	bd80      	pop	{r7, pc}
 8011286:	46c0      	nop			@ (mov r8, r8)
 8011288:	fe00e800 	.word	0xfe00e800
 801128c:	ffff0000 	.word	0xffff0000

08011290 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80112a6:	200f      	movs	r0, #15
 80112a8:	183b      	adds	r3, r7, r0
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	2141      	movs	r1, #65	@ 0x41
 80112ae:	5c52      	ldrb	r2, [r2, r1]
 80112b0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2220      	movs	r2, #32
 80112b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80112ba:	183b      	adds	r3, r7, r0
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	2b21      	cmp	r3, #33	@ 0x21
 80112c0:	d003      	beq.n	80112ca <I2C_ITSlaveCplt+0x3a>
 80112c2:	183b      	adds	r3, r7, r0
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	2b29      	cmp	r3, #41	@ 0x29
 80112c8:	d109      	bne.n	80112de <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80112ca:	4a7b      	ldr	r2, [pc, #492]	@ (80114b8 <I2C_ITSlaveCplt+0x228>)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	0011      	movs	r1, r2
 80112d0:	0018      	movs	r0, r3
 80112d2:	f000 fe95 	bl	8012000 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2221      	movs	r2, #33	@ 0x21
 80112da:	631a      	str	r2, [r3, #48]	@ 0x30
 80112dc:	e011      	b.n	8011302 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80112de:	220f      	movs	r2, #15
 80112e0:	18bb      	adds	r3, r7, r2
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	2b22      	cmp	r3, #34	@ 0x22
 80112e6:	d003      	beq.n	80112f0 <I2C_ITSlaveCplt+0x60>
 80112e8:	18bb      	adds	r3, r7, r2
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80112ee:	d108      	bne.n	8011302 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80112f0:	4a72      	ldr	r2, [pc, #456]	@ (80114bc <I2C_ITSlaveCplt+0x22c>)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	0011      	movs	r1, r2
 80112f6:	0018      	movs	r0, r3
 80112f8:	f000 fe82 	bl	8012000 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2222      	movs	r2, #34	@ 0x22
 8011300:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	685a      	ldr	r2, [r3, #4]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2180      	movs	r1, #128	@ 0x80
 801130e:	0209      	lsls	r1, r1, #8
 8011310:	430a      	orrs	r2, r1
 8011312:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4968      	ldr	r1, [pc, #416]	@ (80114c0 <I2C_ITSlaveCplt+0x230>)
 8011320:	400a      	ands	r2, r1
 8011322:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	0018      	movs	r0, r3
 8011328:	f000 fa55 	bl	80117d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801132c:	693a      	ldr	r2, [r7, #16]
 801132e:	2380      	movs	r3, #128	@ 0x80
 8011330:	01db      	lsls	r3, r3, #7
 8011332:	4013      	ands	r3, r2
 8011334:	d013      	beq.n	801135e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4960      	ldr	r1, [pc, #384]	@ (80114c4 <I2C_ITSlaveCplt+0x234>)
 8011342:	400a      	ands	r2, r1
 8011344:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801134a:	2b00      	cmp	r3, #0
 801134c:	d01f      	beq.n	801138e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	b29a      	uxth	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801135c:	e017      	b.n	801138e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801135e:	693a      	ldr	r2, [r7, #16]
 8011360:	2380      	movs	r3, #128	@ 0x80
 8011362:	021b      	lsls	r3, r3, #8
 8011364:	4013      	ands	r3, r2
 8011366:	d012      	beq.n	801138e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4955      	ldr	r1, [pc, #340]	@ (80114c8 <I2C_ITSlaveCplt+0x238>)
 8011374:	400a      	ands	r2, r1
 8011376:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801137c:	2b00      	cmp	r3, #0
 801137e:	d006      	beq.n	801138e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	b29a      	uxth	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	2204      	movs	r2, #4
 8011392:	4013      	ands	r3, r2
 8011394:	d020      	beq.n	80113d8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	2204      	movs	r2, #4
 801139a:	4393      	bics	r3, r2
 801139c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113a8:	b2d2      	uxtb	r2, r2
 80113aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b0:	1c5a      	adds	r2, r3, #1
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d00c      	beq.n	80113d8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113c2:	3b01      	subs	r3, #1
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	3b01      	subs	r3, #1
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113dc:	b29b      	uxth	r3, r3
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d005      	beq.n	80113ee <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113e6:	2204      	movs	r2, #4
 80113e8:	431a      	orrs	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2242      	movs	r2, #66	@ 0x42
 80113f2:	2100      	movs	r1, #0
 80113f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011400:	2b00      	cmp	r3, #0
 8011402:	d013      	beq.n	801142c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	0011      	movs	r1, r2
 801140c:	0018      	movs	r0, r3
 801140e:	f000 f8b7 	bl	8011580 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2241      	movs	r2, #65	@ 0x41
 8011416:	5c9b      	ldrb	r3, [r3, r2]
 8011418:	b2db      	uxtb	r3, r3
 801141a:	2b28      	cmp	r3, #40	@ 0x28
 801141c:	d147      	bne.n	80114ae <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801141e:	697a      	ldr	r2, [r7, #20]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	0011      	movs	r1, r2
 8011424:	0018      	movs	r0, r3
 8011426:	f000 f853 	bl	80114d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801142a:	e040      	b.n	80114ae <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011430:	4a26      	ldr	r2, [pc, #152]	@ (80114cc <I2C_ITSlaveCplt+0x23c>)
 8011432:	4293      	cmp	r3, r2
 8011434:	d016      	beq.n	8011464 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	0018      	movs	r0, r3
 801143a:	f7ff fdf7 	bl	801102c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	4a22      	ldr	r2, [pc, #136]	@ (80114cc <I2C_ITSlaveCplt+0x23c>)
 8011442:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2241      	movs	r2, #65	@ 0x41
 8011448:	2120      	movs	r1, #32
 801144a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2200      	movs	r2, #0
 8011450:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2240      	movs	r2, #64	@ 0x40
 8011456:	2100      	movs	r1, #0
 8011458:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	0018      	movs	r0, r3
 801145e:	f7fe ffae 	bl	80103be <HAL_I2C_ListenCpltCallback>
}
 8011462:	e024      	b.n	80114ae <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2241      	movs	r2, #65	@ 0x41
 8011468:	5c9b      	ldrb	r3, [r3, r2]
 801146a:	b2db      	uxtb	r3, r3
 801146c:	2b22      	cmp	r3, #34	@ 0x22
 801146e:	d10f      	bne.n	8011490 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2241      	movs	r2, #65	@ 0x41
 8011474:	2120      	movs	r1, #32
 8011476:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2200      	movs	r2, #0
 801147c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2240      	movs	r2, #64	@ 0x40
 8011482:	2100      	movs	r1, #0
 8011484:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	0018      	movs	r0, r3
 801148a:	f7fe ff80 	bl	801038e <HAL_I2C_SlaveRxCpltCallback>
}
 801148e:	e00e      	b.n	80114ae <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2241      	movs	r2, #65	@ 0x41
 8011494:	2120      	movs	r1, #32
 8011496:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2240      	movs	r2, #64	@ 0x40
 80114a2:	2100      	movs	r1, #0
 80114a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	0018      	movs	r0, r3
 80114aa:	f7fe ff68 	bl	801037e <HAL_I2C_SlaveTxCpltCallback>
}
 80114ae:	46c0      	nop			@ (mov r8, r8)
 80114b0:	46bd      	mov	sp, r7
 80114b2:	b006      	add	sp, #24
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	46c0      	nop			@ (mov r8, r8)
 80114b8:	00008001 	.word	0x00008001
 80114bc:	00008002 	.word	0x00008002
 80114c0:	fe00e800 	.word	0xfe00e800
 80114c4:	ffffbfff 	.word	0xffffbfff
 80114c8:	ffff7fff 	.word	0xffff7fff
 80114cc:	ffff0000 	.word	0xffff0000

080114d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4a26      	ldr	r2, [pc, #152]	@ (8011578 <I2C_ITListenCplt+0xa8>)
 80114de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2241      	movs	r2, #65	@ 0x41
 80114ea:	2120      	movs	r1, #32
 80114ec:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2242      	movs	r2, #66	@ 0x42
 80114f2:	2100      	movs	r1, #0
 80114f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2200      	movs	r2, #0
 80114fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	2204      	movs	r2, #4
 8011500:	4013      	ands	r3, r2
 8011502:	d022      	beq.n	801154a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801150e:	b2d2      	uxtb	r2, r2
 8011510:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011516:	1c5a      	adds	r2, r3, #1
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011520:	2b00      	cmp	r3, #0
 8011522:	d012      	beq.n	801154a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011528:	3b01      	subs	r3, #1
 801152a:	b29a      	uxth	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011534:	b29b      	uxth	r3, r3
 8011536:	3b01      	subs	r3, #1
 8011538:	b29a      	uxth	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011542:	2204      	movs	r2, #4
 8011544:	431a      	orrs	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801154a:	4a0c      	ldr	r2, [pc, #48]	@ (801157c <I2C_ITListenCplt+0xac>)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	0011      	movs	r1, r2
 8011550:	0018      	movs	r0, r3
 8011552:	f000 fd55 	bl	8012000 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2210      	movs	r2, #16
 801155c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2240      	movs	r2, #64	@ 0x40
 8011562:	2100      	movs	r1, #0
 8011564:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	0018      	movs	r0, r3
 801156a:	f7fe ff28 	bl	80103be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801156e:	46c0      	nop			@ (mov r8, r8)
 8011570:	46bd      	mov	sp, r7
 8011572:	b002      	add	sp, #8
 8011574:	bd80      	pop	{r7, pc}
 8011576:	46c0      	nop			@ (mov r8, r8)
 8011578:	ffff0000 	.word	0xffff0000
 801157c:	00008003 	.word	0x00008003

08011580 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801158a:	200f      	movs	r0, #15
 801158c:	183b      	adds	r3, r7, r0
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	2141      	movs	r1, #65	@ 0x41
 8011592:	5c52      	ldrb	r2, [r2, r1]
 8011594:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2242      	movs	r2, #66	@ 0x42
 801159a:	2100      	movs	r1, #0
 801159c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4a72      	ldr	r2, [pc, #456]	@ (801176c <I2C_ITError+0x1ec>)
 80115a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	431a      	orrs	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80115b6:	183b      	adds	r3, r7, r0
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	2b28      	cmp	r3, #40	@ 0x28
 80115bc:	d007      	beq.n	80115ce <I2C_ITError+0x4e>
 80115be:	183b      	adds	r3, r7, r0
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	2b29      	cmp	r3, #41	@ 0x29
 80115c4:	d003      	beq.n	80115ce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80115c6:	183b      	adds	r3, r7, r0
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80115cc:	d10c      	bne.n	80115e8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2103      	movs	r1, #3
 80115d2:	0018      	movs	r0, r3
 80115d4:	f000 fd14 	bl	8012000 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2241      	movs	r2, #65	@ 0x41
 80115dc:	2128      	movs	r1, #40	@ 0x28
 80115de:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	4a63      	ldr	r2, [pc, #396]	@ (8011770 <I2C_ITError+0x1f0>)
 80115e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80115e6:	e032      	b.n	801164e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80115e8:	4a62      	ldr	r2, [pc, #392]	@ (8011774 <I2C_ITError+0x1f4>)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	0011      	movs	r1, r2
 80115ee:	0018      	movs	r0, r3
 80115f0:	f000 fd06 	bl	8012000 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	0018      	movs	r0, r3
 80115f8:	f000 f8ed 	bl	80117d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2241      	movs	r2, #65	@ 0x41
 8011600:	5c9b      	ldrb	r3, [r3, r2]
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2b60      	cmp	r3, #96	@ 0x60
 8011606:	d01f      	beq.n	8011648 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2241      	movs	r2, #65	@ 0x41
 801160c:	2120      	movs	r1, #32
 801160e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	699b      	ldr	r3, [r3, #24]
 8011616:	2220      	movs	r2, #32
 8011618:	4013      	ands	r3, r2
 801161a:	2b20      	cmp	r3, #32
 801161c:	d114      	bne.n	8011648 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	699b      	ldr	r3, [r3, #24]
 8011624:	2210      	movs	r2, #16
 8011626:	4013      	ands	r3, r2
 8011628:	2b10      	cmp	r3, #16
 801162a:	d109      	bne.n	8011640 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2210      	movs	r2, #16
 8011632:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011638:	2204      	movs	r2, #4
 801163a:	431a      	orrs	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	2220      	movs	r2, #32
 8011646:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2200      	movs	r2, #0
 801164c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011652:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011658:	2b00      	cmp	r3, #0
 801165a:	d03b      	beq.n	80116d4 <I2C_ITError+0x154>
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	2b11      	cmp	r3, #17
 8011660:	d002      	beq.n	8011668 <I2C_ITError+0xe8>
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	2b21      	cmp	r3, #33	@ 0x21
 8011666:	d135      	bne.n	80116d4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	2380      	movs	r3, #128	@ 0x80
 8011670:	01db      	lsls	r3, r3, #7
 8011672:	401a      	ands	r2, r3
 8011674:	2380      	movs	r3, #128	@ 0x80
 8011676:	01db      	lsls	r3, r3, #7
 8011678:	429a      	cmp	r2, r3
 801167a:	d107      	bne.n	801168c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	493c      	ldr	r1, [pc, #240]	@ (8011778 <I2C_ITError+0x1f8>)
 8011688:	400a      	ands	r2, r1
 801168a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011690:	0018      	movs	r0, r3
 8011692:	f7fd fd62 	bl	800f15a <HAL_DMA_GetState>
 8011696:	0003      	movs	r3, r0
 8011698:	2b01      	cmp	r3, #1
 801169a:	d016      	beq.n	80116ca <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116a0:	4a36      	ldr	r2, [pc, #216]	@ (801177c <I2C_ITError+0x1fc>)
 80116a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2240      	movs	r2, #64	@ 0x40
 80116a8:	2100      	movs	r1, #0
 80116aa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116b0:	0018      	movs	r0, r3
 80116b2:	f7fd fc5d 	bl	800ef70 <HAL_DMA_Abort_IT>
 80116b6:	1e03      	subs	r3, r0, #0
 80116b8:	d051      	beq.n	801175e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116c4:	0018      	movs	r0, r3
 80116c6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80116c8:	e049      	b.n	801175e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	0018      	movs	r0, r3
 80116ce:	f000 f859 	bl	8011784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80116d2:	e044      	b.n	801175e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d03b      	beq.n	8011754 <I2C_ITError+0x1d4>
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	2b12      	cmp	r3, #18
 80116e0:	d002      	beq.n	80116e8 <I2C_ITError+0x168>
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	2b22      	cmp	r3, #34	@ 0x22
 80116e6:	d135      	bne.n	8011754 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	2380      	movs	r3, #128	@ 0x80
 80116f0:	021b      	lsls	r3, r3, #8
 80116f2:	401a      	ands	r2, r3
 80116f4:	2380      	movs	r3, #128	@ 0x80
 80116f6:	021b      	lsls	r3, r3, #8
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d107      	bne.n	801170c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	491e      	ldr	r1, [pc, #120]	@ (8011780 <I2C_ITError+0x200>)
 8011708:	400a      	ands	r2, r1
 801170a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011710:	0018      	movs	r0, r3
 8011712:	f7fd fd22 	bl	800f15a <HAL_DMA_GetState>
 8011716:	0003      	movs	r3, r0
 8011718:	2b01      	cmp	r3, #1
 801171a:	d016      	beq.n	801174a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011720:	4a16      	ldr	r2, [pc, #88]	@ (801177c <I2C_ITError+0x1fc>)
 8011722:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2240      	movs	r2, #64	@ 0x40
 8011728:	2100      	movs	r1, #0
 801172a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011730:	0018      	movs	r0, r3
 8011732:	f7fd fc1d 	bl	800ef70 <HAL_DMA_Abort_IT>
 8011736:	1e03      	subs	r3, r0, #0
 8011738:	d013      	beq.n	8011762 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801173e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011744:	0018      	movs	r0, r3
 8011746:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011748:	e00b      	b.n	8011762 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	0018      	movs	r0, r3
 801174e:	f000 f819 	bl	8011784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011752:	e006      	b.n	8011762 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	0018      	movs	r0, r3
 8011758:	f000 f814 	bl	8011784 <I2C_TreatErrorCallback>
  }
}
 801175c:	e002      	b.n	8011764 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801175e:	46c0      	nop			@ (mov r8, r8)
 8011760:	e000      	b.n	8011764 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011762:	46c0      	nop			@ (mov r8, r8)
}
 8011764:	46c0      	nop			@ (mov r8, r8)
 8011766:	46bd      	mov	sp, r7
 8011768:	b004      	add	sp, #16
 801176a:	bd80      	pop	{r7, pc}
 801176c:	ffff0000 	.word	0xffff0000
 8011770:	08010665 	.word	0x08010665
 8011774:	00008003 	.word	0x00008003
 8011778:	ffffbfff 	.word	0xffffbfff
 801177c:	0801198f 	.word	0x0801198f
 8011780:	ffff7fff 	.word	0xffff7fff

08011784 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2241      	movs	r2, #65	@ 0x41
 8011790:	5c9b      	ldrb	r3, [r3, r2]
 8011792:	b2db      	uxtb	r3, r3
 8011794:	2b60      	cmp	r3, #96	@ 0x60
 8011796:	d10f      	bne.n	80117b8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2241      	movs	r2, #65	@ 0x41
 801179c:	2120      	movs	r1, #32
 801179e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2240      	movs	r2, #64	@ 0x40
 80117aa:	2100      	movs	r1, #0
 80117ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	0018      	movs	r0, r3
 80117b2:	f7fe fe24 	bl	80103fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80117b6:	e00a      	b.n	80117ce <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2200      	movs	r2, #0
 80117bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2240      	movs	r2, #64	@ 0x40
 80117c2:	2100      	movs	r1, #0
 80117c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	0018      	movs	r0, r3
 80117ca:	f7fe fe10 	bl	80103ee <HAL_I2C_ErrorCallback>
}
 80117ce:	46c0      	nop			@ (mov r8, r8)
 80117d0:	46bd      	mov	sp, r7
 80117d2:	b002      	add	sp, #8
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b082      	sub	sp, #8
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	2202      	movs	r2, #2
 80117e6:	4013      	ands	r3, r2
 80117e8:	2b02      	cmp	r3, #2
 80117ea:	d103      	bne.n	80117f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	2200      	movs	r2, #0
 80117f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	699b      	ldr	r3, [r3, #24]
 80117fa:	2201      	movs	r2, #1
 80117fc:	4013      	ands	r3, r2
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d007      	beq.n	8011812 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	699a      	ldr	r2, [r3, #24]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2101      	movs	r1, #1
 801180e:	430a      	orrs	r2, r1
 8011810:	619a      	str	r2, [r3, #24]
  }
}
 8011812:	46c0      	nop			@ (mov r8, r8)
 8011814:	46bd      	mov	sp, r7
 8011816:	b002      	add	sp, #8
 8011818:	bd80      	pop	{r7, pc}
	...

0801181c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011828:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	4920      	ldr	r1, [pc, #128]	@ (80118b8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8011836:	400a      	ands	r2, r1
 8011838:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801183e:	b29b      	uxth	r3, r3
 8011840:	2b00      	cmp	r3, #0
 8011842:	d105      	bne.n	8011850 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2120      	movs	r1, #32
 8011848:	0018      	movs	r0, r3
 801184a:	f000 fb4b 	bl	8011ee4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801184e:	e02e      	b.n	80118ae <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011858:	189a      	adds	r2, r3, r2
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011862:	b29b      	uxth	r3, r3
 8011864:	2bff      	cmp	r3, #255	@ 0xff
 8011866:	d903      	bls.n	8011870 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	22ff      	movs	r2, #255	@ 0xff
 801186c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801186e:	e004      	b.n	801187a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011874:	b29a      	uxth	r2, r3
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011882:	0019      	movs	r1, r3
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	3328      	adds	r3, #40	@ 0x28
 801188a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8011890:	f7fd fac8 	bl	800ee24 <HAL_DMA_Start_IT>
 8011894:	1e03      	subs	r3, r0, #0
 8011896:	d005      	beq.n	80118a4 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2110      	movs	r1, #16
 801189c:	0018      	movs	r0, r3
 801189e:	f7ff fe6f 	bl	8011580 <I2C_ITError>
}
 80118a2:	e004      	b.n	80118ae <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2140      	movs	r1, #64	@ 0x40
 80118a8:	0018      	movs	r0, r3
 80118aa:	f000 fb1b 	bl	8011ee4 <I2C_Enable_IRQ>
}
 80118ae:	46c0      	nop			@ (mov r8, r8)
 80118b0:	46bd      	mov	sp, r7
 80118b2:	b004      	add	sp, #16
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	46c0      	nop			@ (mov r8, r8)
 80118b8:	ffffbfff 	.word	0xffffbfff

080118bc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118c8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4920      	ldr	r1, [pc, #128]	@ (8011958 <I2C_DMAMasterReceiveCplt+0x9c>)
 80118d6:	400a      	ands	r2, r1
 80118d8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118de:	b29b      	uxth	r3, r3
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d105      	bne.n	80118f0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2120      	movs	r1, #32
 80118e8:	0018      	movs	r0, r3
 80118ea:	f000 fafb 	bl	8011ee4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80118ee:	e02e      	b.n	801194e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118f4:	68fa      	ldr	r2, [r7, #12]
 80118f6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80118f8:	189a      	adds	r2, r3, r2
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011902:	b29b      	uxth	r3, r3
 8011904:	2bff      	cmp	r3, #255	@ 0xff
 8011906:	d903      	bls.n	8011910 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	22ff      	movs	r2, #255	@ 0xff
 801190c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801190e:	e004      	b.n	801191a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011914:	b29a      	uxth	r2, r3
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	3324      	adds	r3, #36	@ 0x24
 8011924:	0019      	movs	r1, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801192a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011930:	f7fd fa78 	bl	800ee24 <HAL_DMA_Start_IT>
 8011934:	1e03      	subs	r3, r0, #0
 8011936:	d005      	beq.n	8011944 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2110      	movs	r1, #16
 801193c:	0018      	movs	r0, r3
 801193e:	f7ff fe1f 	bl	8011580 <I2C_ITError>
}
 8011942:	e004      	b.n	801194e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2140      	movs	r1, #64	@ 0x40
 8011948:	0018      	movs	r0, r3
 801194a:	f000 facb 	bl	8011ee4 <I2C_Enable_IRQ>
}
 801194e:	46c0      	nop			@ (mov r8, r8)
 8011950:	46bd      	mov	sp, r7
 8011952:	b004      	add	sp, #16
 8011954:	bd80      	pop	{r7, pc}
 8011956:	46c0      	nop			@ (mov r8, r8)
 8011958:	ffff7fff 	.word	0xffff7fff

0801195c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011968:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	685a      	ldr	r2, [r3, #4]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2180      	movs	r1, #128	@ 0x80
 8011976:	0209      	lsls	r1, r1, #8
 8011978:	430a      	orrs	r2, r1
 801197a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2110      	movs	r1, #16
 8011980:	0018      	movs	r0, r3
 8011982:	f7ff fdfd 	bl	8011580 <I2C_ITError>
}
 8011986:	46c0      	nop			@ (mov r8, r8)
 8011988:	46bd      	mov	sp, r7
 801198a:	b004      	add	sp, #16
 801198c:	bd80      	pop	{r7, pc}

0801198e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801198e:	b580      	push	{r7, lr}
 8011990:	b084      	sub	sp, #16
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801199a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d003      	beq.n	80119ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119a8:	2200      	movs	r2, #0
 80119aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d003      	beq.n	80119bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119b8:	2200      	movs	r2, #0
 80119ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	0018      	movs	r0, r3
 80119c0:	f7ff fee0 	bl	8011784 <I2C_TreatErrorCallback>
}
 80119c4:	46c0      	nop			@ (mov r8, r8)
 80119c6:	46bd      	mov	sp, r7
 80119c8:	b004      	add	sp, #16
 80119ca:	bd80      	pop	{r7, pc}

080119cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	603b      	str	r3, [r7, #0]
 80119d8:	1dfb      	adds	r3, r7, #7
 80119da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80119dc:	e030      	b.n	8011a40 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	3301      	adds	r3, #1
 80119e2:	d02d      	beq.n	8011a40 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119e4:	f7fc fccc 	bl	800e380 <HAL_GetTick>
 80119e8:	0002      	movs	r2, r0
 80119ea:	69bb      	ldr	r3, [r7, #24]
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	683a      	ldr	r2, [r7, #0]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d302      	bcc.n	80119fa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d122      	bne.n	8011a40 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	699b      	ldr	r3, [r3, #24]
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	4013      	ands	r3, r2
 8011a04:	68ba      	ldr	r2, [r7, #8]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	425a      	negs	r2, r3
 8011a0a:	4153      	adcs	r3, r2
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	001a      	movs	r2, r3
 8011a10:	1dfb      	adds	r3, r7, #7
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d113      	bne.n	8011a40 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a1c:	2220      	movs	r2, #32
 8011a1e:	431a      	orrs	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2241      	movs	r2, #65	@ 0x41
 8011a28:	2120      	movs	r1, #32
 8011a2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2242      	movs	r2, #66	@ 0x42
 8011a30:	2100      	movs	r1, #0
 8011a32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	2240      	movs	r2, #64	@ 0x40
 8011a38:	2100      	movs	r1, #0
 8011a3a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e00f      	b.n	8011a60 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	699b      	ldr	r3, [r3, #24]
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	4013      	ands	r3, r2
 8011a4a:	68ba      	ldr	r2, [r7, #8]
 8011a4c:	1ad3      	subs	r3, r2, r3
 8011a4e:	425a      	negs	r2, r3
 8011a50:	4153      	adcs	r3, r2
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	001a      	movs	r2, r3
 8011a56:	1dfb      	adds	r3, r7, #7
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d0bf      	beq.n	80119de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a5e:	2300      	movs	r3, #0
}
 8011a60:	0018      	movs	r0, r3
 8011a62:	46bd      	mov	sp, r7
 8011a64:	b004      	add	sp, #16
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011a74:	e032      	b.n	8011adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	68b9      	ldr	r1, [r7, #8]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	0018      	movs	r0, r3
 8011a7e:	f000 f8ff 	bl	8011c80 <I2C_IsErrorOccurred>
 8011a82:	1e03      	subs	r3, r0, #0
 8011a84:	d001      	beq.n	8011a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011a86:	2301      	movs	r3, #1
 8011a88:	e030      	b.n	8011aec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	d025      	beq.n	8011adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a90:	f7fc fc76 	bl	800e380 <HAL_GetTick>
 8011a94:	0002      	movs	r2, r0
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d302      	bcc.n	8011aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d11a      	bne.n	8011adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	699b      	ldr	r3, [r3, #24]
 8011aac:	2202      	movs	r2, #2
 8011aae:	4013      	ands	r3, r2
 8011ab0:	2b02      	cmp	r3, #2
 8011ab2:	d013      	beq.n	8011adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ab8:	2220      	movs	r2, #32
 8011aba:	431a      	orrs	r2, r3
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2241      	movs	r2, #65	@ 0x41
 8011ac4:	2120      	movs	r1, #32
 8011ac6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2242      	movs	r2, #66	@ 0x42
 8011acc:	2100      	movs	r1, #0
 8011ace:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2240      	movs	r2, #64	@ 0x40
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	e007      	b.n	8011aec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	699b      	ldr	r3, [r3, #24]
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	d1c5      	bne.n	8011a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011aea:	2300      	movs	r3, #0
}
 8011aec:	0018      	movs	r0, r3
 8011aee:	46bd      	mov	sp, r7
 8011af0:	b004      	add	sp, #16
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	60f8      	str	r0, [r7, #12]
 8011afc:	60b9      	str	r1, [r7, #8]
 8011afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011b00:	e02f      	b.n	8011b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	68b9      	ldr	r1, [r7, #8]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	0018      	movs	r0, r3
 8011b0a:	f000 f8b9 	bl	8011c80 <I2C_IsErrorOccurred>
 8011b0e:	1e03      	subs	r3, r0, #0
 8011b10:	d001      	beq.n	8011b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011b12:	2301      	movs	r3, #1
 8011b14:	e02d      	b.n	8011b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b16:	f7fc fc33 	bl	800e380 <HAL_GetTick>
 8011b1a:	0002      	movs	r2, r0
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	1ad3      	subs	r3, r2, r3
 8011b20:	68ba      	ldr	r2, [r7, #8]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d302      	bcc.n	8011b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d11a      	bne.n	8011b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	699b      	ldr	r3, [r3, #24]
 8011b32:	2220      	movs	r2, #32
 8011b34:	4013      	ands	r3, r2
 8011b36:	2b20      	cmp	r3, #32
 8011b38:	d013      	beq.n	8011b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b3e:	2220      	movs	r2, #32
 8011b40:	431a      	orrs	r2, r3
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	2241      	movs	r2, #65	@ 0x41
 8011b4a:	2120      	movs	r1, #32
 8011b4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2242      	movs	r2, #66	@ 0x42
 8011b52:	2100      	movs	r1, #0
 8011b54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2240      	movs	r2, #64	@ 0x40
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011b5e:	2301      	movs	r3, #1
 8011b60:	e007      	b.n	8011b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	699b      	ldr	r3, [r3, #24]
 8011b68:	2220      	movs	r2, #32
 8011b6a:	4013      	ands	r3, r2
 8011b6c:	2b20      	cmp	r3, #32
 8011b6e:	d1c8      	bne.n	8011b02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	0018      	movs	r0, r3
 8011b74:	46bd      	mov	sp, r7
 8011b76:	b004      	add	sp, #16
 8011b78:	bd80      	pop	{r7, pc}
	...

08011b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011b88:	e06b      	b.n	8011c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	68b9      	ldr	r1, [r7, #8]
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	0018      	movs	r0, r3
 8011b92:	f000 f875 	bl	8011c80 <I2C_IsErrorOccurred>
 8011b96:	1e03      	subs	r3, r0, #0
 8011b98:	d001      	beq.n	8011b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e069      	b.n	8011c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	699b      	ldr	r3, [r3, #24]
 8011ba4:	2220      	movs	r2, #32
 8011ba6:	4013      	ands	r3, r2
 8011ba8:	2b20      	cmp	r3, #32
 8011baa:	d138      	bne.n	8011c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	699b      	ldr	r3, [r3, #24]
 8011bb2:	2204      	movs	r2, #4
 8011bb4:	4013      	ands	r3, r2
 8011bb6:	2b04      	cmp	r3, #4
 8011bb8:	d105      	bne.n	8011bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	e055      	b.n	8011c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	2210      	movs	r2, #16
 8011bce:	4013      	ands	r3, r2
 8011bd0:	2b10      	cmp	r3, #16
 8011bd2:	d107      	bne.n	8011be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2210      	movs	r2, #16
 8011bda:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2204      	movs	r2, #4
 8011be0:	645a      	str	r2, [r3, #68]	@ 0x44
 8011be2:	e002      	b.n	8011bea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2200      	movs	r2, #0
 8011be8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2220      	movs	r2, #32
 8011bf0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	685a      	ldr	r2, [r3, #4]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	491f      	ldr	r1, [pc, #124]	@ (8011c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8011bfe:	400a      	ands	r2, r1
 8011c00:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2241      	movs	r2, #65	@ 0x41
 8011c06:	2120      	movs	r1, #32
 8011c08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	2242      	movs	r2, #66	@ 0x42
 8011c0e:	2100      	movs	r1, #0
 8011c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2240      	movs	r2, #64	@ 0x40
 8011c16:	2100      	movs	r1, #0
 8011c18:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e029      	b.n	8011c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c1e:	f7fc fbaf 	bl	800e380 <HAL_GetTick>
 8011c22:	0002      	movs	r2, r0
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	68ba      	ldr	r2, [r7, #8]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d302      	bcc.n	8011c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d116      	bne.n	8011c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	699b      	ldr	r3, [r3, #24]
 8011c3a:	2204      	movs	r2, #4
 8011c3c:	4013      	ands	r3, r2
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	d00f      	beq.n	8011c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c46:	2220      	movs	r2, #32
 8011c48:	431a      	orrs	r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2241      	movs	r2, #65	@ 0x41
 8011c52:	2120      	movs	r1, #32
 8011c54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2240      	movs	r2, #64	@ 0x40
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e007      	b.n	8011c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	699b      	ldr	r3, [r3, #24]
 8011c68:	2204      	movs	r2, #4
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	2b04      	cmp	r3, #4
 8011c6e:	d18c      	bne.n	8011b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	0018      	movs	r0, r3
 8011c74:	46bd      	mov	sp, r7
 8011c76:	b004      	add	sp, #16
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	46c0      	nop			@ (mov r8, r8)
 8011c7c:	fe00e800 	.word	0xfe00e800

08011c80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b08a      	sub	sp, #40	@ 0x28
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011c8c:	2327      	movs	r3, #39	@ 0x27
 8011c8e:	18fb      	adds	r3, r7, r3
 8011c90:	2200      	movs	r2, #0
 8011c92:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	2210      	movs	r2, #16
 8011ca8:	4013      	ands	r3, r2
 8011caa:	d100      	bne.n	8011cae <I2C_IsErrorOccurred+0x2e>
 8011cac:	e079      	b.n	8011da2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2210      	movs	r2, #16
 8011cb4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011cb6:	e057      	b.n	8011d68 <I2C_IsErrorOccurred+0xe8>
 8011cb8:	2227      	movs	r2, #39	@ 0x27
 8011cba:	18bb      	adds	r3, r7, r2
 8011cbc:	18ba      	adds	r2, r7, r2
 8011cbe:	7812      	ldrb	r2, [r2, #0]
 8011cc0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	d04f      	beq.n	8011d68 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011cc8:	f7fc fb5a 	bl	800e380 <HAL_GetTick>
 8011ccc:	0002      	movs	r2, r0
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	68ba      	ldr	r2, [r7, #8]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d302      	bcc.n	8011cde <I2C_IsErrorOccurred+0x5e>
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d144      	bne.n	8011d68 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	685a      	ldr	r2, [r3, #4]
 8011ce4:	2380      	movs	r3, #128	@ 0x80
 8011ce6:	01db      	lsls	r3, r3, #7
 8011ce8:	4013      	ands	r3, r2
 8011cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011cec:	2013      	movs	r0, #19
 8011cee:	183b      	adds	r3, r7, r0
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	2142      	movs	r1, #66	@ 0x42
 8011cf4:	5c52      	ldrb	r2, [r2, r1]
 8011cf6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	699a      	ldr	r2, [r3, #24]
 8011cfe:	2380      	movs	r3, #128	@ 0x80
 8011d00:	021b      	lsls	r3, r3, #8
 8011d02:	401a      	ands	r2, r3
 8011d04:	2380      	movs	r3, #128	@ 0x80
 8011d06:	021b      	lsls	r3, r3, #8
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d126      	bne.n	8011d5a <I2C_IsErrorOccurred+0xda>
 8011d0c:	697a      	ldr	r2, [r7, #20]
 8011d0e:	2380      	movs	r3, #128	@ 0x80
 8011d10:	01db      	lsls	r3, r3, #7
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d021      	beq.n	8011d5a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8011d16:	183b      	adds	r3, r7, r0
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	2b20      	cmp	r3, #32
 8011d1c:	d01d      	beq.n	8011d5a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	685a      	ldr	r2, [r3, #4]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2180      	movs	r1, #128	@ 0x80
 8011d2a:	01c9      	lsls	r1, r1, #7
 8011d2c:	430a      	orrs	r2, r1
 8011d2e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011d30:	f7fc fb26 	bl	800e380 <HAL_GetTick>
 8011d34:	0003      	movs	r3, r0
 8011d36:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011d38:	e00f      	b.n	8011d5a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011d3a:	f7fc fb21 	bl	800e380 <HAL_GetTick>
 8011d3e:	0002      	movs	r2, r0
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	1ad3      	subs	r3, r2, r3
 8011d44:	2b19      	cmp	r3, #25
 8011d46:	d908      	bls.n	8011d5a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	2220      	movs	r2, #32
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011d50:	2327      	movs	r3, #39	@ 0x27
 8011d52:	18fb      	adds	r3, r7, r3
 8011d54:	2201      	movs	r2, #1
 8011d56:	701a      	strb	r2, [r3, #0]

              break;
 8011d58:	e006      	b.n	8011d68 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	699b      	ldr	r3, [r3, #24]
 8011d60:	2220      	movs	r2, #32
 8011d62:	4013      	ands	r3, r2
 8011d64:	2b20      	cmp	r3, #32
 8011d66:	d1e8      	bne.n	8011d3a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	699b      	ldr	r3, [r3, #24]
 8011d6e:	2220      	movs	r2, #32
 8011d70:	4013      	ands	r3, r2
 8011d72:	2b20      	cmp	r3, #32
 8011d74:	d004      	beq.n	8011d80 <I2C_IsErrorOccurred+0x100>
 8011d76:	2327      	movs	r3, #39	@ 0x27
 8011d78:	18fb      	adds	r3, r7, r3
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d09b      	beq.n	8011cb8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011d80:	2327      	movs	r3, #39	@ 0x27
 8011d82:	18fb      	adds	r3, r7, r3
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d103      	bne.n	8011d92 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	2220      	movs	r2, #32
 8011d90:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011d92:	6a3b      	ldr	r3, [r7, #32]
 8011d94:	2204      	movs	r2, #4
 8011d96:	4313      	orrs	r3, r2
 8011d98:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011d9a:	2327      	movs	r3, #39	@ 0x27
 8011d9c:	18fb      	adds	r3, r7, r3
 8011d9e:	2201      	movs	r2, #1
 8011da0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	699b      	ldr	r3, [r3, #24]
 8011da8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	2380      	movs	r3, #128	@ 0x80
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	4013      	ands	r3, r2
 8011db2:	d00c      	beq.n	8011dce <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	2201      	movs	r2, #1
 8011db8:	4313      	orrs	r3, r2
 8011dba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2280      	movs	r2, #128	@ 0x80
 8011dc2:	0052      	lsls	r2, r2, #1
 8011dc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011dc6:	2327      	movs	r3, #39	@ 0x27
 8011dc8:	18fb      	adds	r3, r7, r3
 8011dca:	2201      	movs	r2, #1
 8011dcc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011dce:	69ba      	ldr	r2, [r7, #24]
 8011dd0:	2380      	movs	r3, #128	@ 0x80
 8011dd2:	00db      	lsls	r3, r3, #3
 8011dd4:	4013      	ands	r3, r2
 8011dd6:	d00c      	beq.n	8011df2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011dd8:	6a3b      	ldr	r3, [r7, #32]
 8011dda:	2208      	movs	r2, #8
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	2280      	movs	r2, #128	@ 0x80
 8011de6:	00d2      	lsls	r2, r2, #3
 8011de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011dea:	2327      	movs	r3, #39	@ 0x27
 8011dec:	18fb      	adds	r3, r7, r3
 8011dee:	2201      	movs	r2, #1
 8011df0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011df2:	69ba      	ldr	r2, [r7, #24]
 8011df4:	2380      	movs	r3, #128	@ 0x80
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	4013      	ands	r3, r2
 8011dfa:	d00c      	beq.n	8011e16 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011dfc:	6a3b      	ldr	r3, [r7, #32]
 8011dfe:	2202      	movs	r2, #2
 8011e00:	4313      	orrs	r3, r2
 8011e02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	2280      	movs	r2, #128	@ 0x80
 8011e0a:	0092      	lsls	r2, r2, #2
 8011e0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011e0e:	2327      	movs	r3, #39	@ 0x27
 8011e10:	18fb      	adds	r3, r7, r3
 8011e12:	2201      	movs	r2, #1
 8011e14:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011e16:	2327      	movs	r3, #39	@ 0x27
 8011e18:	18fb      	adds	r3, r7, r3
 8011e1a:	781b      	ldrb	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d01d      	beq.n	8011e5c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	0018      	movs	r0, r3
 8011e24:	f7ff fcd7 	bl	80117d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	685a      	ldr	r2, [r3, #4]
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	490e      	ldr	r1, [pc, #56]	@ (8011e6c <I2C_IsErrorOccurred+0x1ec>)
 8011e34:	400a      	ands	r2, r1
 8011e36:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e3c:	6a3b      	ldr	r3, [r7, #32]
 8011e3e:	431a      	orrs	r2, r3
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	2241      	movs	r2, #65	@ 0x41
 8011e48:	2120      	movs	r1, #32
 8011e4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	2242      	movs	r2, #66	@ 0x42
 8011e50:	2100      	movs	r1, #0
 8011e52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2240      	movs	r2, #64	@ 0x40
 8011e58:	2100      	movs	r1, #0
 8011e5a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011e5c:	2327      	movs	r3, #39	@ 0x27
 8011e5e:	18fb      	adds	r3, r7, r3
 8011e60:	781b      	ldrb	r3, [r3, #0]
}
 8011e62:	0018      	movs	r0, r3
 8011e64:	46bd      	mov	sp, r7
 8011e66:	b00a      	add	sp, #40	@ 0x28
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	46c0      	nop			@ (mov r8, r8)
 8011e6c:	fe00e800 	.word	0xfe00e800

08011e70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011e70:	b590      	push	{r4, r7, lr}
 8011e72:	b087      	sub	sp, #28
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	0008      	movs	r0, r1
 8011e7a:	0011      	movs	r1, r2
 8011e7c:	607b      	str	r3, [r7, #4]
 8011e7e:	240a      	movs	r4, #10
 8011e80:	193b      	adds	r3, r7, r4
 8011e82:	1c02      	adds	r2, r0, #0
 8011e84:	801a      	strh	r2, [r3, #0]
 8011e86:	2009      	movs	r0, #9
 8011e88:	183b      	adds	r3, r7, r0
 8011e8a:	1c0a      	adds	r2, r1, #0
 8011e8c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011e8e:	193b      	adds	r3, r7, r4
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	059b      	lsls	r3, r3, #22
 8011e94:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011e96:	183b      	adds	r3, r7, r0
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	0419      	lsls	r1, r3, #16
 8011e9c:	23ff      	movs	r3, #255	@ 0xff
 8011e9e:	041b      	lsls	r3, r3, #16
 8011ea0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011ea2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	085b      	lsrs	r3, r3, #1
 8011eb0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011eba:	0d51      	lsrs	r1, r2, #21
 8011ebc:	2280      	movs	r2, #128	@ 0x80
 8011ebe:	00d2      	lsls	r2, r2, #3
 8011ec0:	400a      	ands	r2, r1
 8011ec2:	4907      	ldr	r1, [pc, #28]	@ (8011ee0 <I2C_TransferConfig+0x70>)
 8011ec4:	430a      	orrs	r2, r1
 8011ec6:	43d2      	mvns	r2, r2
 8011ec8:	401a      	ands	r2, r3
 8011eca:	0011      	movs	r1, r2
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	697a      	ldr	r2, [r7, #20]
 8011ed2:	430a      	orrs	r2, r1
 8011ed4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011ed6:	46c0      	nop			@ (mov r8, r8)
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	b007      	add	sp, #28
 8011edc:	bd90      	pop	{r4, r7, pc}
 8011ede:	46c0      	nop			@ (mov r8, r8)
 8011ee0:	03ff63ff 	.word	0x03ff63ff

08011ee4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	000a      	movs	r2, r1
 8011eee:	1cbb      	adds	r3, r7, #2
 8011ef0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011efa:	4b3e      	ldr	r3, [pc, #248]	@ (8011ff4 <I2C_Enable_IRQ+0x110>)
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d035      	beq.n	8011f6c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011f04:	4b3c      	ldr	r3, [pc, #240]	@ (8011ff8 <I2C_Enable_IRQ+0x114>)
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d030      	beq.n	8011f6c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8011ffc <I2C_Enable_IRQ+0x118>)
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d02b      	beq.n	8011f6c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011f14:	1cbb      	adds	r3, r7, #2
 8011f16:	2200      	movs	r2, #0
 8011f18:	5e9b      	ldrsh	r3, [r3, r2]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	da03      	bge.n	8011f26 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	22b8      	movs	r2, #184	@ 0xb8
 8011f22:	4313      	orrs	r3, r2
 8011f24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011f26:	1cbb      	adds	r3, r7, #2
 8011f28:	881b      	ldrh	r3, [r3, #0]
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	4013      	ands	r3, r2
 8011f2e:	d003      	beq.n	8011f38 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	22f2      	movs	r2, #242	@ 0xf2
 8011f34:	4313      	orrs	r3, r2
 8011f36:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011f38:	1cbb      	adds	r3, r7, #2
 8011f3a:	881b      	ldrh	r3, [r3, #0]
 8011f3c:	2202      	movs	r2, #2
 8011f3e:	4013      	ands	r3, r2
 8011f40:	d003      	beq.n	8011f4a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	22f4      	movs	r2, #244	@ 0xf4
 8011f46:	4313      	orrs	r3, r2
 8011f48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011f4a:	1cbb      	adds	r3, r7, #2
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	2b10      	cmp	r3, #16
 8011f50:	d103      	bne.n	8011f5a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2290      	movs	r2, #144	@ 0x90
 8011f56:	4313      	orrs	r3, r2
 8011f58:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011f5a:	1cbb      	adds	r3, r7, #2
 8011f5c:	881b      	ldrh	r3, [r3, #0]
 8011f5e:	2b20      	cmp	r3, #32
 8011f60:	d13c      	bne.n	8011fdc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2220      	movs	r2, #32
 8011f66:	4313      	orrs	r3, r2
 8011f68:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011f6a:	e037      	b.n	8011fdc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011f6c:	1cbb      	adds	r3, r7, #2
 8011f6e:	2200      	movs	r2, #0
 8011f70:	5e9b      	ldrsh	r3, [r3, r2]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	da03      	bge.n	8011f7e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	22b8      	movs	r2, #184	@ 0xb8
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011f7e:	1cbb      	adds	r3, r7, #2
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	2201      	movs	r2, #1
 8011f84:	4013      	ands	r3, r2
 8011f86:	d003      	beq.n	8011f90 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	22f2      	movs	r2, #242	@ 0xf2
 8011f8c:	4313      	orrs	r3, r2
 8011f8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011f90:	1cbb      	adds	r3, r7, #2
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	2202      	movs	r2, #2
 8011f96:	4013      	ands	r3, r2
 8011f98:	d003      	beq.n	8011fa2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	22f4      	movs	r2, #244	@ 0xf4
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011fa2:	1cbb      	adds	r3, r7, #2
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	2b10      	cmp	r3, #16
 8011fa8:	d103      	bne.n	8011fb2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2290      	movs	r2, #144	@ 0x90
 8011fae:	4313      	orrs	r3, r2
 8011fb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011fb2:	1cbb      	adds	r3, r7, #2
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	2b20      	cmp	r3, #32
 8011fb8:	d103      	bne.n	8011fc2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2260      	movs	r2, #96	@ 0x60
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8011ffc <I2C_Enable_IRQ+0x118>)
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d007      	beq.n	8011fdc <I2C_Enable_IRQ+0xf8>
 8011fcc:	1cbb      	adds	r3, r7, #2
 8011fce:	881b      	ldrh	r3, [r3, #0]
 8011fd0:	2b40      	cmp	r3, #64	@ 0x40
 8011fd2:	d103      	bne.n	8011fdc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2240      	movs	r2, #64	@ 0x40
 8011fd8:	4313      	orrs	r3, r2
 8011fda:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	6819      	ldr	r1, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	430a      	orrs	r2, r1
 8011fea:	601a      	str	r2, [r3, #0]
}
 8011fec:	46c0      	nop			@ (mov r8, r8)
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	b004      	add	sp, #16
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	08010865 	.word	0x08010865
 8011ff8:	08010c95 	.word	0x08010c95
 8011ffc:	08010a5d 	.word	0x08010a5d

08012000 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	000a      	movs	r2, r1
 801200a:	1cbb      	adds	r3, r7, #2
 801200c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801200e:	2300      	movs	r3, #0
 8012010:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012012:	1cbb      	adds	r3, r7, #2
 8012014:	881b      	ldrh	r3, [r3, #0]
 8012016:	2201      	movs	r2, #1
 8012018:	4013      	ands	r3, r2
 801201a:	d010      	beq.n	801203e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2242      	movs	r2, #66	@ 0x42
 8012020:	4313      	orrs	r3, r2
 8012022:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2241      	movs	r2, #65	@ 0x41
 8012028:	5c9b      	ldrb	r3, [r3, r2]
 801202a:	b2db      	uxtb	r3, r3
 801202c:	001a      	movs	r2, r3
 801202e:	2328      	movs	r3, #40	@ 0x28
 8012030:	4013      	ands	r3, r2
 8012032:	2b28      	cmp	r3, #40	@ 0x28
 8012034:	d003      	beq.n	801203e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	22b0      	movs	r2, #176	@ 0xb0
 801203a:	4313      	orrs	r3, r2
 801203c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801203e:	1cbb      	adds	r3, r7, #2
 8012040:	881b      	ldrh	r3, [r3, #0]
 8012042:	2202      	movs	r2, #2
 8012044:	4013      	ands	r3, r2
 8012046:	d010      	beq.n	801206a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2244      	movs	r2, #68	@ 0x44
 801204c:	4313      	orrs	r3, r2
 801204e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2241      	movs	r2, #65	@ 0x41
 8012054:	5c9b      	ldrb	r3, [r3, r2]
 8012056:	b2db      	uxtb	r3, r3
 8012058:	001a      	movs	r2, r3
 801205a:	2328      	movs	r3, #40	@ 0x28
 801205c:	4013      	ands	r3, r2
 801205e:	2b28      	cmp	r3, #40	@ 0x28
 8012060:	d003      	beq.n	801206a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	22b0      	movs	r2, #176	@ 0xb0
 8012066:	4313      	orrs	r3, r2
 8012068:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801206a:	1cbb      	adds	r3, r7, #2
 801206c:	2200      	movs	r2, #0
 801206e:	5e9b      	ldrsh	r3, [r3, r2]
 8012070:	2b00      	cmp	r3, #0
 8012072:	da03      	bge.n	801207c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	22b8      	movs	r2, #184	@ 0xb8
 8012078:	4313      	orrs	r3, r2
 801207a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801207c:	1cbb      	adds	r3, r7, #2
 801207e:	881b      	ldrh	r3, [r3, #0]
 8012080:	2b10      	cmp	r3, #16
 8012082:	d103      	bne.n	801208c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2290      	movs	r2, #144	@ 0x90
 8012088:	4313      	orrs	r3, r2
 801208a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801208c:	1cbb      	adds	r3, r7, #2
 801208e:	881b      	ldrh	r3, [r3, #0]
 8012090:	2b20      	cmp	r3, #32
 8012092:	d103      	bne.n	801209c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2220      	movs	r2, #32
 8012098:	4313      	orrs	r3, r2
 801209a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801209c:	1cbb      	adds	r3, r7, #2
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	2b40      	cmp	r3, #64	@ 0x40
 80120a2:	d103      	bne.n	80120ac <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2240      	movs	r2, #64	@ 0x40
 80120a8:	4313      	orrs	r3, r2
 80120aa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	43d9      	mvns	r1, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	400a      	ands	r2, r1
 80120bc:	601a      	str	r2, [r3, #0]
}
 80120be:	46c0      	nop			@ (mov r8, r8)
 80120c0:	46bd      	mov	sp, r7
 80120c2:	b004      	add	sp, #16
 80120c4:	bd80      	pop	{r7, pc}
	...

080120c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2241      	movs	r2, #65	@ 0x41
 80120d6:	5c9b      	ldrb	r3, [r3, r2]
 80120d8:	b2db      	uxtb	r3, r3
 80120da:	2b20      	cmp	r3, #32
 80120dc:	d138      	bne.n	8012150 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2240      	movs	r2, #64	@ 0x40
 80120e2:	5c9b      	ldrb	r3, [r3, r2]
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d101      	bne.n	80120ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80120e8:	2302      	movs	r3, #2
 80120ea:	e032      	b.n	8012152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2240      	movs	r2, #64	@ 0x40
 80120f0:	2101      	movs	r1, #1
 80120f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2241      	movs	r2, #65	@ 0x41
 80120f8:	2124      	movs	r1, #36	@ 0x24
 80120fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2101      	movs	r1, #1
 8012108:	438a      	bics	r2, r1
 801210a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4911      	ldr	r1, [pc, #68]	@ (801215c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012118:	400a      	ands	r2, r1
 801211a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6819      	ldr	r1, [r3, #0]
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	683a      	ldr	r2, [r7, #0]
 8012128:	430a      	orrs	r2, r1
 801212a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	2101      	movs	r1, #1
 8012138:	430a      	orrs	r2, r1
 801213a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2241      	movs	r2, #65	@ 0x41
 8012140:	2120      	movs	r1, #32
 8012142:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2240      	movs	r2, #64	@ 0x40
 8012148:	2100      	movs	r1, #0
 801214a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801214c:	2300      	movs	r3, #0
 801214e:	e000      	b.n	8012152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012150:	2302      	movs	r3, #2
  }
}
 8012152:	0018      	movs	r0, r3
 8012154:	46bd      	mov	sp, r7
 8012156:	b002      	add	sp, #8
 8012158:	bd80      	pop	{r7, pc}
 801215a:	46c0      	nop			@ (mov r8, r8)
 801215c:	ffffefff 	.word	0xffffefff

08012160 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2241      	movs	r2, #65	@ 0x41
 801216e:	5c9b      	ldrb	r3, [r3, r2]
 8012170:	b2db      	uxtb	r3, r3
 8012172:	2b20      	cmp	r3, #32
 8012174:	d139      	bne.n	80121ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2240      	movs	r2, #64	@ 0x40
 801217a:	5c9b      	ldrb	r3, [r3, r2]
 801217c:	2b01      	cmp	r3, #1
 801217e:	d101      	bne.n	8012184 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012180:	2302      	movs	r3, #2
 8012182:	e033      	b.n	80121ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2240      	movs	r2, #64	@ 0x40
 8012188:	2101      	movs	r1, #1
 801218a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2241      	movs	r2, #65	@ 0x41
 8012190:	2124      	movs	r1, #36	@ 0x24
 8012192:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2101      	movs	r1, #1
 80121a0:	438a      	bics	r2, r1
 80121a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	4a11      	ldr	r2, [pc, #68]	@ (80121f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80121b0:	4013      	ands	r3, r2
 80121b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	021b      	lsls	r3, r3, #8
 80121b8:	68fa      	ldr	r2, [r7, #12]
 80121ba:	4313      	orrs	r3, r2
 80121bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2101      	movs	r1, #1
 80121d2:	430a      	orrs	r2, r1
 80121d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2241      	movs	r2, #65	@ 0x41
 80121da:	2120      	movs	r1, #32
 80121dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2240      	movs	r2, #64	@ 0x40
 80121e2:	2100      	movs	r1, #0
 80121e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80121e6:	2300      	movs	r3, #0
 80121e8:	e000      	b.n	80121ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80121ea:	2302      	movs	r3, #2
  }
}
 80121ec:	0018      	movs	r0, r3
 80121ee:	46bd      	mov	sp, r7
 80121f0:	b004      	add	sp, #16
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	fffff0ff 	.word	0xfffff0ff

080121f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b088      	sub	sp, #32
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d101      	bne.n	801220a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012206:	2301      	movs	r3, #1
 8012208:	e0e1      	b.n	80123ce <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2235      	movs	r2, #53	@ 0x35
 801220e:	5c9b      	ldrb	r3, [r3, r2]
 8012210:	b2db      	uxtb	r3, r3
 8012212:	2b00      	cmp	r3, #0
 8012214:	d107      	bne.n	8012226 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2234      	movs	r2, #52	@ 0x34
 801221a:	2100      	movs	r1, #0
 801221c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	0018      	movs	r0, r3
 8012222:	f7f5 fb47 	bl	80078b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2235      	movs	r2, #53	@ 0x35
 801222a:	2102      	movs	r1, #2
 801222c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	69da      	ldr	r2, [r3, #28]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4967      	ldr	r1, [pc, #412]	@ (80123d8 <HAL_I2S_Init+0x1e0>)
 801223a:	400a      	ands	r2, r1
 801223c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2202      	movs	r2, #2
 8012244:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	695b      	ldr	r3, [r3, #20]
 801224a:	2b02      	cmp	r3, #2
 801224c:	d073      	beq.n	8012336 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d102      	bne.n	801225c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012256:	2310      	movs	r3, #16
 8012258:	617b      	str	r3, [r7, #20]
 801225a:	e001      	b.n	8012260 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 801225c:	2320      	movs	r3, #32
 801225e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	2b20      	cmp	r3, #32
 8012266:	d802      	bhi.n	801226e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801226e:	f002 fed3 	bl	8015018 <HAL_RCC_GetSysClockFreq>
 8012272:	0003      	movs	r3, r0
 8012274:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	691a      	ldr	r2, [r3, #16]
 801227a:	2380      	movs	r3, #128	@ 0x80
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	429a      	cmp	r2, r3
 8012280:	d131      	bne.n	80122e6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d016      	beq.n	80122b8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	009b      	lsls	r3, r3, #2
 801228e:	0019      	movs	r1, r3
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f7ed ff87 	bl	80001a4 <__udivsi3>
 8012296:	0003      	movs	r3, r0
 8012298:	001a      	movs	r2, r3
 801229a:	0013      	movs	r3, r2
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	189b      	adds	r3, r3, r2
 80122a0:	005b      	lsls	r3, r3, #1
 80122a2:	001a      	movs	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	695b      	ldr	r3, [r3, #20]
 80122a8:	0019      	movs	r1, r3
 80122aa:	0010      	movs	r0, r2
 80122ac:	f7ed ff7a 	bl	80001a4 <__udivsi3>
 80122b0:	0003      	movs	r3, r0
 80122b2:	3305      	adds	r3, #5
 80122b4:	613b      	str	r3, [r7, #16]
 80122b6:	e02a      	b.n	801230e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	00db      	lsls	r3, r3, #3
 80122bc:	0019      	movs	r1, r3
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f7ed ff70 	bl	80001a4 <__udivsi3>
 80122c4:	0003      	movs	r3, r0
 80122c6:	001a      	movs	r2, r3
 80122c8:	0013      	movs	r3, r2
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	189b      	adds	r3, r3, r2
 80122ce:	005b      	lsls	r3, r3, #1
 80122d0:	001a      	movs	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	695b      	ldr	r3, [r3, #20]
 80122d6:	0019      	movs	r1, r3
 80122d8:	0010      	movs	r0, r2
 80122da:	f7ed ff63 	bl	80001a4 <__udivsi3>
 80122de:	0003      	movs	r3, r0
 80122e0:	3305      	adds	r3, #5
 80122e2:	613b      	str	r3, [r7, #16]
 80122e4:	e013      	b.n	801230e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80122e6:	6979      	ldr	r1, [r7, #20]
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f7ed ff5b 	bl	80001a4 <__udivsi3>
 80122ee:	0003      	movs	r3, r0
 80122f0:	001a      	movs	r2, r3
 80122f2:	0013      	movs	r3, r2
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	189b      	adds	r3, r3, r2
 80122f8:	005b      	lsls	r3, r3, #1
 80122fa:	001a      	movs	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	695b      	ldr	r3, [r3, #20]
 8012300:	0019      	movs	r1, r3
 8012302:	0010      	movs	r0, r2
 8012304:	f7ed ff4e 	bl	80001a4 <__udivsi3>
 8012308:	0003      	movs	r3, r0
 801230a:	3305      	adds	r3, #5
 801230c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	210a      	movs	r1, #10
 8012312:	0018      	movs	r0, r3
 8012314:	f7ed ff46 	bl	80001a4 <__udivsi3>
 8012318:	0003      	movs	r3, r0
 801231a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	2201      	movs	r2, #1
 8012320:	4013      	ands	r3, r2
 8012322:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012324:	693a      	ldr	r2, [r7, #16]
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	085b      	lsrs	r3, r3, #1
 801232c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801232e:	69bb      	ldr	r3, [r7, #24]
 8012330:	021b      	lsls	r3, r3, #8
 8012332:	61bb      	str	r3, [r7, #24]
 8012334:	e003      	b.n	801233e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012336:	2302      	movs	r3, #2
 8012338:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801233a:	2300      	movs	r3, #0
 801233c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801233e:	69fb      	ldr	r3, [r7, #28]
 8012340:	2b01      	cmp	r3, #1
 8012342:	d902      	bls.n	801234a <HAL_I2S_Init+0x152>
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	2bff      	cmp	r3, #255	@ 0xff
 8012348:	d907      	bls.n	801235a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801234e:	2210      	movs	r2, #16
 8012350:	431a      	orrs	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012356:	2301      	movs	r3, #1
 8012358:	e039      	b.n	80123ce <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	691a      	ldr	r2, [r3, #16]
 801235e:	69bb      	ldr	r3, [r7, #24]
 8012360:	431a      	orrs	r2, r3
 8012362:	0011      	movs	r1, r2
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	69fa      	ldr	r2, [r7, #28]
 801236a:	430a      	orrs	r2, r1
 801236c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	69db      	ldr	r3, [r3, #28]
 8012374:	4a18      	ldr	r2, [pc, #96]	@ (80123d8 <HAL_I2S_Init+0x1e0>)
 8012376:	401a      	ands	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6859      	ldr	r1, [r3, #4]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	4319      	orrs	r1, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	4319      	orrs	r1, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	699b      	ldr	r3, [r3, #24]
 801238c:	430b      	orrs	r3, r1
 801238e:	431a      	orrs	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2180      	movs	r1, #128	@ 0x80
 8012396:	0109      	lsls	r1, r1, #4
 8012398:	430a      	orrs	r2, r1
 801239a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	689b      	ldr	r3, [r3, #8]
 80123a0:	2b30      	cmp	r3, #48	@ 0x30
 80123a2:	d003      	beq.n	80123ac <HAL_I2S_Init+0x1b4>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	689b      	ldr	r3, [r3, #8]
 80123a8:	2bb0      	cmp	r3, #176	@ 0xb0
 80123aa:	d108      	bne.n	80123be <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	69da      	ldr	r2, [r3, #28]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2180      	movs	r1, #128	@ 0x80
 80123b8:	0149      	lsls	r1, r1, #5
 80123ba:	430a      	orrs	r2, r1
 80123bc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2235      	movs	r2, #53	@ 0x35
 80123c8:	2101      	movs	r1, #1
 80123ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	0018      	movs	r0, r3
 80123d0:	46bd      	mov	sp, r7
 80123d2:	b008      	add	sp, #32
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	46c0      	nop			@ (mov r8, r8)
 80123d8:	fffff040 	.word	0xfffff040

080123dc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	1dbb      	adds	r3, r7, #6
 80123e8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d003      	beq.n	80123f8 <HAL_I2S_Receive_DMA+0x1c>
 80123f0:	1dbb      	adds	r3, r7, #6
 80123f2:	881b      	ldrh	r3, [r3, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d101      	bne.n	80123fc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80123f8:	2301      	movs	r3, #1
 80123fa:	e0a6      	b.n	801254a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2234      	movs	r2, #52	@ 0x34
 8012400:	5c9b      	ldrb	r3, [r3, r2]
 8012402:	b2db      	uxtb	r3, r3
 8012404:	2b01      	cmp	r3, #1
 8012406:	d101      	bne.n	801240c <HAL_I2S_Receive_DMA+0x30>
 8012408:	2302      	movs	r3, #2
 801240a:	e09e      	b.n	801254a <HAL_I2S_Receive_DMA+0x16e>
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	2234      	movs	r2, #52	@ 0x34
 8012410:	2101      	movs	r1, #1
 8012412:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2235      	movs	r2, #53	@ 0x35
 8012418:	5c9b      	ldrb	r3, [r3, r2]
 801241a:	b2db      	uxtb	r3, r3
 801241c:	2b01      	cmp	r3, #1
 801241e:	d005      	beq.n	801242c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2234      	movs	r2, #52	@ 0x34
 8012424:	2100      	movs	r1, #0
 8012426:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012428:	2302      	movs	r3, #2
 801242a:	e08e      	b.n	801254a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2235      	movs	r2, #53	@ 0x35
 8012430:	2104      	movs	r1, #4
 8012432:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2200      	movs	r2, #0
 8012438:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	69db      	ldr	r3, [r3, #28]
 8012446:	2207      	movs	r2, #7
 8012448:	4013      	ands	r3, r2
 801244a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	2b03      	cmp	r3, #3
 8012450:	d002      	beq.n	8012458 <HAL_I2S_Receive_DMA+0x7c>
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	2b05      	cmp	r3, #5
 8012456:	d10c      	bne.n	8012472 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012458:	1dbb      	adds	r3, r7, #6
 801245a:	881b      	ldrh	r3, [r3, #0]
 801245c:	18db      	adds	r3, r3, r3
 801245e:	b29a      	uxth	r2, r3
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012464:	1dbb      	adds	r3, r7, #6
 8012466:	881b      	ldrh	r3, [r3, #0]
 8012468:	18db      	adds	r3, r3, r3
 801246a:	b29a      	uxth	r2, r3
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012470:	e007      	b.n	8012482 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	1dba      	adds	r2, r7, #6
 8012476:	8812      	ldrh	r2, [r2, #0]
 8012478:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	1dba      	adds	r2, r7, #6
 801247e:	8812      	ldrh	r2, [r2, #0]
 8012480:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012486:	4a33      	ldr	r2, [pc, #204]	@ (8012554 <HAL_I2S_Receive_DMA+0x178>)
 8012488:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801248e:	4a32      	ldr	r2, [pc, #200]	@ (8012558 <HAL_I2S_Receive_DMA+0x17c>)
 8012490:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012496:	4a31      	ldr	r2, [pc, #196]	@ (801255c <HAL_I2S_Receive_DMA+0x180>)
 8012498:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	69da      	ldr	r2, [r3, #28]
 80124a0:	23c0      	movs	r3, #192	@ 0xc0
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	401a      	ands	r2, r3
 80124a6:	23c0      	movs	r3, #192	@ 0xc0
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d10a      	bne.n	80124c4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80124ae:	2300      	movs	r3, #0
 80124b0:	613b      	str	r3, [r7, #16]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	613b      	str	r3, [r7, #16]
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	613b      	str	r3, [r7, #16]
 80124c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	330c      	adds	r3, #12
 80124ce:	0019      	movs	r1, r3
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124d4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80124da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80124dc:	f7fc fca2 	bl	800ee24 <HAL_DMA_Start_IT>
 80124e0:	1e03      	subs	r3, r0, #0
 80124e2:	d00f      	beq.n	8012504 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124e8:	2208      	movs	r2, #8
 80124ea:	431a      	orrs	r2, r3
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	2235      	movs	r2, #53	@ 0x35
 80124f4:	2101      	movs	r1, #1
 80124f6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2234      	movs	r2, #52	@ 0x34
 80124fc:	2100      	movs	r1, #0
 80124fe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012500:	2301      	movs	r3, #1
 8012502:	e022      	b.n	801254a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	69da      	ldr	r2, [r3, #28]
 801250a:	2380      	movs	r3, #128	@ 0x80
 801250c:	00db      	lsls	r3, r3, #3
 801250e:	4013      	ands	r3, r2
 8012510:	d108      	bne.n	8012524 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	69da      	ldr	r2, [r3, #28]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2180      	movs	r1, #128	@ 0x80
 801251e:	00c9      	lsls	r1, r1, #3
 8012520:	430a      	orrs	r2, r1
 8012522:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	2201      	movs	r2, #1
 801252c:	4013      	ands	r3, r2
 801252e:	d107      	bne.n	8012540 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	685a      	ldr	r2, [r3, #4]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2101      	movs	r1, #1
 801253c:	430a      	orrs	r2, r1
 801253e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2234      	movs	r2, #52	@ 0x34
 8012544:	2100      	movs	r1, #0
 8012546:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012548:	2300      	movs	r3, #0
}
 801254a:	0018      	movs	r0, r3
 801254c:	46bd      	mov	sp, r7
 801254e:	b006      	add	sp, #24
 8012550:	bd80      	pop	{r7, pc}
 8012552:	46c0      	nop			@ (mov r8, r8)
 8012554:	0801273d 	.word	0x0801273d
 8012558:	080126f9 	.word	0x080126f9
 801255c:	0801275b 	.word	0x0801275b

08012560 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b086      	sub	sp, #24
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012568:	2317      	movs	r3, #23
 801256a:	18fb      	adds	r3, r7, r3
 801256c:	2200      	movs	r2, #0
 801256e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	685a      	ldr	r2, [r3, #4]
 8012574:	2380      	movs	r3, #128	@ 0x80
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	429a      	cmp	r2, r3
 801257a:	d003      	beq.n	8012584 <HAL_I2S_DMAStop+0x24>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d158      	bne.n	8012636 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012588:	2b00      	cmp	r3, #0
 801258a:	d010      	beq.n	80125ae <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012590:	0018      	movs	r0, r3
 8012592:	f7fc fcad 	bl	800eef0 <HAL_DMA_Abort>
 8012596:	1e03      	subs	r3, r0, #0
 8012598:	d009      	beq.n	80125ae <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801259e:	2208      	movs	r2, #8
 80125a0:	431a      	orrs	r2, r3
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80125a6:	2317      	movs	r3, #23
 80125a8:	18fb      	adds	r3, r7, r3
 80125aa:	2201      	movs	r2, #1
 80125ac:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	2364      	movs	r3, #100	@ 0x64
 80125b2:	2201      	movs	r2, #1
 80125b4:	2102      	movs	r1, #2
 80125b6:	f000 f8f7 	bl	80127a8 <I2S_WaitFlagStateUntilTimeout>
 80125ba:	1e03      	subs	r3, r0, #0
 80125bc:	d00d      	beq.n	80125da <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125c2:	2201      	movs	r2, #1
 80125c4:	431a      	orrs	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2235      	movs	r2, #53	@ 0x35
 80125ce:	2101      	movs	r1, #1
 80125d0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80125d2:	2317      	movs	r3, #23
 80125d4:	18fb      	adds	r3, r7, r3
 80125d6:	2201      	movs	r2, #1
 80125d8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	2364      	movs	r3, #100	@ 0x64
 80125de:	2200      	movs	r2, #0
 80125e0:	2180      	movs	r1, #128	@ 0x80
 80125e2:	f000 f8e1 	bl	80127a8 <I2S_WaitFlagStateUntilTimeout>
 80125e6:	1e03      	subs	r3, r0, #0
 80125e8:	d00d      	beq.n	8012606 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125ee:	2201      	movs	r2, #1
 80125f0:	431a      	orrs	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2235      	movs	r2, #53	@ 0x35
 80125fa:	2101      	movs	r1, #1
 80125fc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80125fe:	2317      	movs	r3, #23
 8012600:	18fb      	adds	r3, r7, r3
 8012602:	2201      	movs	r2, #1
 8012604:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	69da      	ldr	r2, [r3, #28]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4938      	ldr	r1, [pc, #224]	@ (80126f4 <HAL_I2S_DMAStop+0x194>)
 8012612:	400a      	ands	r2, r1
 8012614:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012616:	2300      	movs	r3, #0
 8012618:	613b      	str	r3, [r7, #16]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	689b      	ldr	r3, [r3, #8]
 8012620:	613b      	str	r3, [r7, #16]
 8012622:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	685a      	ldr	r2, [r3, #4]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	2102      	movs	r1, #2
 8012630:	438a      	bics	r2, r1
 8012632:	605a      	str	r2, [r3, #4]
 8012634:	e053      	b.n	80126de <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685a      	ldr	r2, [r3, #4]
 801263a:	23c0      	movs	r3, #192	@ 0xc0
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	429a      	cmp	r2, r3
 8012640:	d005      	beq.n	801264e <HAL_I2S_DMAStop+0xee>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	685a      	ldr	r2, [r3, #4]
 8012646:	2380      	movs	r3, #128	@ 0x80
 8012648:	005b      	lsls	r3, r3, #1
 801264a:	429a      	cmp	r2, r3
 801264c:	d147      	bne.n	80126de <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012652:	2b00      	cmp	r3, #0
 8012654:	d010      	beq.n	8012678 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801265a:	0018      	movs	r0, r3
 801265c:	f7fc fc48 	bl	800eef0 <HAL_DMA_Abort>
 8012660:	1e03      	subs	r3, r0, #0
 8012662:	d009      	beq.n	8012678 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012668:	2208      	movs	r2, #8
 801266a:	431a      	orrs	r2, r3
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012670:	2317      	movs	r3, #23
 8012672:	18fb      	adds	r3, r7, r3
 8012674:	2201      	movs	r2, #1
 8012676:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	69da      	ldr	r2, [r3, #28]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	491c      	ldr	r1, [pc, #112]	@ (80126f4 <HAL_I2S_DMAStop+0x194>)
 8012684:	400a      	ands	r2, r1
 8012686:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	689b      	ldr	r3, [r3, #8]
 801269a:	60fb      	str	r3, [r7, #12]
 801269c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	685a      	ldr	r2, [r3, #4]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2101      	movs	r1, #1
 80126aa:	438a      	bics	r2, r1
 80126ac:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	685a      	ldr	r2, [r3, #4]
 80126b2:	2380      	movs	r3, #128	@ 0x80
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d10e      	bne.n	80126d8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126be:	2240      	movs	r2, #64	@ 0x40
 80126c0:	431a      	orrs	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2235      	movs	r2, #53	@ 0x35
 80126ca:	2101      	movs	r1, #1
 80126cc:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80126ce:	2317      	movs	r3, #23
 80126d0:	18fb      	adds	r3, r7, r3
 80126d2:	2201      	movs	r2, #1
 80126d4:	701a      	strb	r2, [r3, #0]
 80126d6:	e002      	b.n	80126de <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2235      	movs	r2, #53	@ 0x35
 80126e2:	2101      	movs	r1, #1
 80126e4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80126e6:	2317      	movs	r3, #23
 80126e8:	18fb      	adds	r3, r7, r3
 80126ea:	781b      	ldrb	r3, [r3, #0]
}
 80126ec:	0018      	movs	r0, r3
 80126ee:	46bd      	mov	sp, r7
 80126f0:	b006      	add	sp, #24
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	fffffbff 	.word	0xfffffbff

080126f8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012704:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	69db      	ldr	r3, [r3, #28]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d10e      	bne.n	801272c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	685a      	ldr	r2, [r3, #4]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	2101      	movs	r1, #1
 801271a:	438a      	bics	r2, r1
 801271c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2200      	movs	r2, #0
 8012722:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2235      	movs	r2, #53	@ 0x35
 8012728:	2101      	movs	r1, #1
 801272a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	0018      	movs	r0, r3
 8012730:	f7f9 fbde 	bl	800bef0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012734:	46c0      	nop			@ (mov r8, r8)
 8012736:	46bd      	mov	sp, r7
 8012738:	b004      	add	sp, #16
 801273a:	bd80      	pop	{r7, pc}

0801273c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012748:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	0018      	movs	r0, r3
 801274e:	f7f9 fbbd 	bl	800becc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012752:	46c0      	nop			@ (mov r8, r8)
 8012754:	46bd      	mov	sp, r7
 8012756:	b004      	add	sp, #16
 8012758:	bd80      	pop	{r7, pc}

0801275a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801275a:	b580      	push	{r7, lr}
 801275c:	b084      	sub	sp, #16
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012766:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	685a      	ldr	r2, [r3, #4]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2103      	movs	r1, #3
 8012774:	438a      	bics	r2, r1
 8012776:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2200      	movs	r2, #0
 801277c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2200      	movs	r2, #0
 8012782:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2235      	movs	r2, #53	@ 0x35
 8012788:	2101      	movs	r1, #1
 801278a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012790:	2208      	movs	r2, #8
 8012792:	431a      	orrs	r2, r3
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	0018      	movs	r0, r3
 801279c:	f7f9 fbf6 	bl	800bf8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80127a0:	46c0      	nop			@ (mov r8, r8)
 80127a2:	46bd      	mov	sp, r7
 80127a4:	b004      	add	sp, #16
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b086      	sub	sp, #24
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	603b      	str	r3, [r7, #0]
 80127b4:	1dfb      	adds	r3, r7, #7
 80127b6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80127b8:	f7fb fde2 	bl	800e380 <HAL_GetTick>
 80127bc:	0003      	movs	r3, r0
 80127be:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80127c0:	e017      	b.n	80127f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	3301      	adds	r3, #1
 80127c6:	d014      	beq.n	80127f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80127c8:	f7fb fdda 	bl	800e380 <HAL_GetTick>
 80127cc:	0002      	movs	r2, r0
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	683a      	ldr	r2, [r7, #0]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d902      	bls.n	80127de <I2S_WaitFlagStateUntilTimeout+0x36>
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d109      	bne.n	80127f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	2235      	movs	r2, #53	@ 0x35
 80127e2:	2101      	movs	r1, #1
 80127e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2234      	movs	r2, #52	@ 0x34
 80127ea:	2100      	movs	r1, #0
 80127ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80127ee:	2303      	movs	r3, #3
 80127f0:	e00f      	b.n	8012812 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	68ba      	ldr	r2, [r7, #8]
 80127fa:	4013      	ands	r3, r2
 80127fc:	68ba      	ldr	r2, [r7, #8]
 80127fe:	1ad3      	subs	r3, r2, r3
 8012800:	425a      	negs	r2, r3
 8012802:	4153      	adcs	r3, r2
 8012804:	b2db      	uxtb	r3, r3
 8012806:	001a      	movs	r2, r3
 8012808:	1dfb      	adds	r3, r7, #7
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	429a      	cmp	r2, r3
 801280e:	d1d8      	bne.n	80127c2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8012810:	2300      	movs	r3, #0
}
 8012812:	0018      	movs	r0, r3
 8012814:	46bd      	mov	sp, r7
 8012816:	b006      	add	sp, #24
 8012818:	bd80      	pop	{r7, pc}
	...

0801281c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801281e:	b08b      	sub	sp, #44	@ 0x2c
 8012820:	af06      	add	r7, sp, #24
 8012822:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d101      	bne.n	801282e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801282a:	2301      	movs	r3, #1
 801282c:	e0f0      	b.n	8012a10 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	4a79      	ldr	r2, [pc, #484]	@ (8012a18 <HAL_PCD_Init+0x1fc>)
 8012832:	5c9b      	ldrb	r3, [r3, r2]
 8012834:	b2db      	uxtb	r3, r3
 8012836:	2b00      	cmp	r3, #0
 8012838:	d108      	bne.n	801284c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	23aa      	movs	r3, #170	@ 0xaa
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	2100      	movs	r1, #0
 8012842:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	0018      	movs	r0, r3
 8012848:	f009 ff4a 	bl	801c6e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	4a72      	ldr	r2, [pc, #456]	@ (8012a18 <HAL_PCD_Init+0x1fc>)
 8012850:	2103      	movs	r1, #3
 8012852:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	0018      	movs	r0, r3
 801285a:	f005 fefd 	bl	8018658 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801285e:	230f      	movs	r3, #15
 8012860:	18fb      	adds	r3, r7, r3
 8012862:	2200      	movs	r2, #0
 8012864:	701a      	strb	r2, [r3, #0]
 8012866:	e049      	b.n	80128fc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8012868:	200f      	movs	r0, #15
 801286a:	183b      	adds	r3, r7, r0
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	6879      	ldr	r1, [r7, #4]
 8012870:	1c5a      	adds	r2, r3, #1
 8012872:	0013      	movs	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	189b      	adds	r3, r3, r2
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	18cb      	adds	r3, r1, r3
 801287c:	3301      	adds	r3, #1
 801287e:	2201      	movs	r2, #1
 8012880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8012882:	183b      	adds	r3, r7, r0
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	6879      	ldr	r1, [r7, #4]
 8012888:	1c5a      	adds	r2, r3, #1
 801288a:	0013      	movs	r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	189b      	adds	r3, r3, r2
 8012890:	00db      	lsls	r3, r3, #3
 8012892:	183a      	adds	r2, r7, r0
 8012894:	7812      	ldrb	r2, [r2, #0]
 8012896:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8012898:	183b      	adds	r3, r7, r0
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	6879      	ldr	r1, [r7, #4]
 801289e:	1c5a      	adds	r2, r3, #1
 80128a0:	0013      	movs	r3, r2
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	189b      	adds	r3, r3, r2
 80128a6:	00db      	lsls	r3, r3, #3
 80128a8:	18cb      	adds	r3, r1, r3
 80128aa:	3303      	adds	r3, #3
 80128ac:	2200      	movs	r2, #0
 80128ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80128b0:	183b      	adds	r3, r7, r0
 80128b2:	781a      	ldrb	r2, [r3, #0]
 80128b4:	6879      	ldr	r1, [r7, #4]
 80128b6:	0013      	movs	r3, r2
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	189b      	adds	r3, r3, r2
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	18cb      	adds	r3, r1, r3
 80128c0:	3338      	adds	r3, #56	@ 0x38
 80128c2:	2200      	movs	r2, #0
 80128c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80128c6:	183b      	adds	r3, r7, r0
 80128c8:	781a      	ldrb	r2, [r3, #0]
 80128ca:	6879      	ldr	r1, [r7, #4]
 80128cc:	0013      	movs	r3, r2
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	189b      	adds	r3, r3, r2
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	18cb      	adds	r3, r1, r3
 80128d6:	333c      	adds	r3, #60	@ 0x3c
 80128d8:	2200      	movs	r2, #0
 80128da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80128dc:	183b      	adds	r3, r7, r0
 80128de:	781a      	ldrb	r2, [r3, #0]
 80128e0:	6879      	ldr	r1, [r7, #4]
 80128e2:	0013      	movs	r3, r2
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	189b      	adds	r3, r3, r2
 80128e8:	00db      	lsls	r3, r3, #3
 80128ea:	18cb      	adds	r3, r1, r3
 80128ec:	3340      	adds	r3, #64	@ 0x40
 80128ee:	2200      	movs	r2, #0
 80128f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80128f2:	183b      	adds	r3, r7, r0
 80128f4:	781a      	ldrb	r2, [r3, #0]
 80128f6:	183b      	adds	r3, r7, r0
 80128f8:	3201      	adds	r2, #1
 80128fa:	701a      	strb	r2, [r3, #0]
 80128fc:	210f      	movs	r1, #15
 80128fe:	187b      	adds	r3, r7, r1
 8012900:	781a      	ldrb	r2, [r3, #0]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	429a      	cmp	r2, r3
 8012908:	d3ae      	bcc.n	8012868 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801290a:	187b      	adds	r3, r7, r1
 801290c:	2200      	movs	r2, #0
 801290e:	701a      	strb	r2, [r3, #0]
 8012910:	e056      	b.n	80129c0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8012912:	240f      	movs	r4, #15
 8012914:	193b      	adds	r3, r7, r4
 8012916:	781a      	ldrb	r2, [r3, #0]
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	236a      	movs	r3, #106	@ 0x6a
 801291c:	33ff      	adds	r3, #255	@ 0xff
 801291e:	0019      	movs	r1, r3
 8012920:	0013      	movs	r3, r2
 8012922:	009b      	lsls	r3, r3, #2
 8012924:	189b      	adds	r3, r3, r2
 8012926:	00db      	lsls	r3, r3, #3
 8012928:	18c3      	adds	r3, r0, r3
 801292a:	185b      	adds	r3, r3, r1
 801292c:	2200      	movs	r2, #0
 801292e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8012930:	193b      	adds	r3, r7, r4
 8012932:	781a      	ldrb	r2, [r3, #0]
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	23b4      	movs	r3, #180	@ 0xb4
 8012938:	0059      	lsls	r1, r3, #1
 801293a:	0013      	movs	r3, r2
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	189b      	adds	r3, r3, r2
 8012940:	00db      	lsls	r3, r3, #3
 8012942:	18c3      	adds	r3, r0, r3
 8012944:	185b      	adds	r3, r3, r1
 8012946:	193a      	adds	r2, r7, r4
 8012948:	7812      	ldrb	r2, [r2, #0]
 801294a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801294c:	193b      	adds	r3, r7, r4
 801294e:	781a      	ldrb	r2, [r3, #0]
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	236c      	movs	r3, #108	@ 0x6c
 8012954:	33ff      	adds	r3, #255	@ 0xff
 8012956:	0019      	movs	r1, r3
 8012958:	0013      	movs	r3, r2
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	189b      	adds	r3, r3, r2
 801295e:	00db      	lsls	r3, r3, #3
 8012960:	18c3      	adds	r3, r0, r3
 8012962:	185b      	adds	r3, r3, r1
 8012964:	2200      	movs	r2, #0
 8012966:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8012968:	193b      	adds	r3, r7, r4
 801296a:	781a      	ldrb	r2, [r3, #0]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	23bc      	movs	r3, #188	@ 0xbc
 8012970:	0059      	lsls	r1, r3, #1
 8012972:	0013      	movs	r3, r2
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	189b      	adds	r3, r3, r2
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	18c3      	adds	r3, r0, r3
 801297c:	185b      	adds	r3, r3, r1
 801297e:	2200      	movs	r2, #0
 8012980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8012982:	193b      	adds	r3, r7, r4
 8012984:	781a      	ldrb	r2, [r3, #0]
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	23be      	movs	r3, #190	@ 0xbe
 801298a:	0059      	lsls	r1, r3, #1
 801298c:	0013      	movs	r3, r2
 801298e:	009b      	lsls	r3, r3, #2
 8012990:	189b      	adds	r3, r3, r2
 8012992:	00db      	lsls	r3, r3, #3
 8012994:	18c3      	adds	r3, r0, r3
 8012996:	185b      	adds	r3, r3, r1
 8012998:	2200      	movs	r2, #0
 801299a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801299c:	193b      	adds	r3, r7, r4
 801299e:	781a      	ldrb	r2, [r3, #0]
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	23c0      	movs	r3, #192	@ 0xc0
 80129a4:	0059      	lsls	r1, r3, #1
 80129a6:	0013      	movs	r3, r2
 80129a8:	009b      	lsls	r3, r3, #2
 80129aa:	189b      	adds	r3, r3, r2
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	18c3      	adds	r3, r0, r3
 80129b0:	185b      	adds	r3, r3, r1
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80129b6:	193b      	adds	r3, r7, r4
 80129b8:	781a      	ldrb	r2, [r3, #0]
 80129ba:	193b      	adds	r3, r7, r4
 80129bc:	3201      	adds	r2, #1
 80129be:	701a      	strb	r2, [r3, #0]
 80129c0:	230f      	movs	r3, #15
 80129c2:	18fb      	adds	r3, r7, r3
 80129c4:	781a      	ldrb	r2, [r3, #0]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d3a1      	bcc.n	8012912 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6818      	ldr	r0, [r3, #0]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	466a      	mov	r2, sp
 80129d6:	0011      	movs	r1, r2
 80129d8:	001a      	movs	r2, r3
 80129da:	3210      	adds	r2, #16
 80129dc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80129de:	c170      	stmia	r1!, {r4, r5, r6}
 80129e0:	ca30      	ldmia	r2!, {r4, r5}
 80129e2:	c130      	stmia	r1!, {r4, r5}
 80129e4:	6859      	ldr	r1, [r3, #4]
 80129e6:	689a      	ldr	r2, [r3, #8]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	f005 fe4f 	bl	801868c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2224      	movs	r2, #36	@ 0x24
 80129f2:	2100      	movs	r1, #0
 80129f4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4a07      	ldr	r2, [pc, #28]	@ (8012a18 <HAL_PCD_Init+0x1fc>)
 80129fa:	2101      	movs	r1, #1
 80129fc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	69db      	ldr	r3, [r3, #28]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d103      	bne.n	8012a0e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	0018      	movs	r0, r3
 8012a0a:	f001 fd23 	bl	8014454 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	0018      	movs	r0, r3
 8012a12:	46bd      	mov	sp, r7
 8012a14:	b005      	add	sp, #20
 8012a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a18:	000002a9 	.word	0x000002a9

08012a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	23aa      	movs	r3, #170	@ 0xaa
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	5cd3      	ldrb	r3, [r2, r3]
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	d101      	bne.n	8012a34 <HAL_PCD_Start+0x18>
 8012a30:	2302      	movs	r3, #2
 8012a32:	e014      	b.n	8012a5e <HAL_PCD_Start+0x42>
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	23aa      	movs	r3, #170	@ 0xaa
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	2101      	movs	r1, #1
 8012a3c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	0018      	movs	r0, r3
 8012a44:	f005 fdf2 	bl	801862c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	0018      	movs	r0, r3
 8012a4e:	f007 fdf5 	bl	801a63c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	23aa      	movs	r3, #170	@ 0xaa
 8012a56:	009b      	lsls	r3, r3, #2
 8012a58:	2100      	movs	r1, #0
 8012a5a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	0018      	movs	r0, r3
 8012a60:	46bd      	mov	sp, r7
 8012a62:	b002      	add	sp, #8
 8012a64:	bd80      	pop	{r7, pc}
	...

08012a68 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	0018      	movs	r0, r3
 8012a76:	f007 fdf7 	bl	801a668 <USB_ReadInterrupts>
 8012a7a:	0003      	movs	r3, r0
 8012a7c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8012a7e:	68fa      	ldr	r2, [r7, #12]
 8012a80:	2380      	movs	r3, #128	@ 0x80
 8012a82:	021b      	lsls	r3, r3, #8
 8012a84:	4013      	ands	r3, r2
 8012a86:	d004      	beq.n	8012a92 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	0018      	movs	r0, r3
 8012a8c:	f000 fb62 	bl	8013154 <PCD_EP_ISR_Handler>

    return;
 8012a90:	e11d      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	2380      	movs	r3, #128	@ 0x80
 8012a96:	00db      	lsls	r3, r3, #3
 8012a98:	4013      	ands	r3, r2
 8012a9a:	d015      	beq.n	8012ac8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	2244      	movs	r2, #68	@ 0x44
 8012aa2:	5a9b      	ldrh	r3, [r3, r2]
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	498a      	ldr	r1, [pc, #552]	@ (8012cd4 <HAL_PCD_IRQHandler+0x26c>)
 8012aac:	400a      	ands	r2, r1
 8012aae:	b291      	uxth	r1, r2
 8012ab0:	2244      	movs	r2, #68	@ 0x44
 8012ab2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	0018      	movs	r0, r3
 8012ab8:	f009 fe95 	bl	801c7e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2100      	movs	r1, #0
 8012ac0:	0018      	movs	r0, r3
 8012ac2:	f000 f915 	bl	8012cf0 <HAL_PCD_SetAddress>

    return;
 8012ac6:	e102      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	2380      	movs	r3, #128	@ 0x80
 8012acc:	01db      	lsls	r3, r3, #7
 8012ace:	4013      	ands	r3, r2
 8012ad0:	d00c      	beq.n	8012aec <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	2244      	movs	r2, #68	@ 0x44
 8012ad8:	5a9b      	ldrh	r3, [r3, r2]
 8012ada:	b29a      	uxth	r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	497d      	ldr	r1, [pc, #500]	@ (8012cd8 <HAL_PCD_IRQHandler+0x270>)
 8012ae2:	400a      	ands	r2, r1
 8012ae4:	b291      	uxth	r1, r2
 8012ae6:	2244      	movs	r2, #68	@ 0x44
 8012ae8:	5299      	strh	r1, [r3, r2]

    return;
 8012aea:	e0f0      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8012aec:	68fa      	ldr	r2, [r7, #12]
 8012aee:	2380      	movs	r3, #128	@ 0x80
 8012af0:	019b      	lsls	r3, r3, #6
 8012af2:	4013      	ands	r3, r2
 8012af4:	d00c      	beq.n	8012b10 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2244      	movs	r2, #68	@ 0x44
 8012afc:	5a9b      	ldrh	r3, [r3, r2]
 8012afe:	b29a      	uxth	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4975      	ldr	r1, [pc, #468]	@ (8012cdc <HAL_PCD_IRQHandler+0x274>)
 8012b06:	400a      	ands	r2, r1
 8012b08:	b291      	uxth	r1, r2
 8012b0a:	2244      	movs	r2, #68	@ 0x44
 8012b0c:	5299      	strh	r1, [r3, r2]

    return;
 8012b0e:	e0de      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	2380      	movs	r3, #128	@ 0x80
 8012b14:	015b      	lsls	r3, r3, #5
 8012b16:	4013      	ands	r3, r2
 8012b18:	d038      	beq.n	8012b8c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2240      	movs	r2, #64	@ 0x40
 8012b20:	5a9b      	ldrh	r3, [r3, r2]
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2104      	movs	r1, #4
 8012b2a:	438a      	bics	r2, r1
 8012b2c:	b291      	uxth	r1, r2
 8012b2e:	2240      	movs	r2, #64	@ 0x40
 8012b30:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2240      	movs	r2, #64	@ 0x40
 8012b38:	5a9b      	ldrh	r3, [r3, r2]
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2108      	movs	r1, #8
 8012b42:	438a      	bics	r2, r1
 8012b44:	b291      	uxth	r1, r2
 8012b46:	2240      	movs	r2, #64	@ 0x40
 8012b48:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	23b8      	movs	r3, #184	@ 0xb8
 8012b4e:	009b      	lsls	r3, r3, #2
 8012b50:	5cd3      	ldrb	r3, [r2, r3]
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d109      	bne.n	8012b6a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	23b8      	movs	r3, #184	@ 0xb8
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2100      	movs	r1, #0
 8012b64:	0018      	movs	r0, r3
 8012b66:	f001 fc9f 	bl	80144a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	0018      	movs	r0, r3
 8012b6e:	f009 fe7b 	bl	801c868 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2244      	movs	r2, #68	@ 0x44
 8012b78:	5a9b      	ldrh	r3, [r3, r2]
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	4957      	ldr	r1, [pc, #348]	@ (8012ce0 <HAL_PCD_IRQHandler+0x278>)
 8012b82:	400a      	ands	r2, r1
 8012b84:	b291      	uxth	r1, r2
 8012b86:	2244      	movs	r2, #68	@ 0x44
 8012b88:	5299      	strh	r1, [r3, r2]

    return;
 8012b8a:	e0a0      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	2380      	movs	r3, #128	@ 0x80
 8012b90:	011b      	lsls	r3, r3, #4
 8012b92:	4013      	ands	r3, r2
 8012b94:	d028      	beq.n	8012be8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2240      	movs	r2, #64	@ 0x40
 8012b9c:	5a9b      	ldrh	r3, [r3, r2]
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	2108      	movs	r1, #8
 8012ba6:	430a      	orrs	r2, r1
 8012ba8:	b291      	uxth	r1, r2
 8012baa:	2240      	movs	r2, #64	@ 0x40
 8012bac:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2244      	movs	r2, #68	@ 0x44
 8012bb4:	5a9b      	ldrh	r3, [r3, r2]
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4949      	ldr	r1, [pc, #292]	@ (8012ce4 <HAL_PCD_IRQHandler+0x27c>)
 8012bbe:	400a      	ands	r2, r1
 8012bc0:	b291      	uxth	r1, r2
 8012bc2:	2244      	movs	r2, #68	@ 0x44
 8012bc4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2240      	movs	r2, #64	@ 0x40
 8012bcc:	5a9b      	ldrh	r3, [r3, r2]
 8012bce:	b29a      	uxth	r2, r3
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2104      	movs	r1, #4
 8012bd6:	430a      	orrs	r2, r1
 8012bd8:	b291      	uxth	r1, r2
 8012bda:	2240      	movs	r2, #64	@ 0x40
 8012bdc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	0018      	movs	r0, r3
 8012be2:	f009 fe25 	bl	801c830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012be6:	e072      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2280      	movs	r2, #128	@ 0x80
 8012bec:	4013      	ands	r3, r2
 8012bee:	d046      	beq.n	8012c7e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	2244      	movs	r2, #68	@ 0x44
 8012bf6:	5a9b      	ldrh	r3, [r3, r2]
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2180      	movs	r1, #128	@ 0x80
 8012c00:	438a      	bics	r2, r1
 8012c02:	b291      	uxth	r1, r2
 8012c04:	2244      	movs	r2, #68	@ 0x44
 8012c06:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	23b8      	movs	r3, #184	@ 0xb8
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	5cd3      	ldrb	r3, [r2, r3]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d12f      	bne.n	8012c74 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2240      	movs	r2, #64	@ 0x40
 8012c1a:	5a9b      	ldrh	r3, [r3, r2]
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2104      	movs	r1, #4
 8012c24:	430a      	orrs	r2, r1
 8012c26:	b291      	uxth	r1, r2
 8012c28:	2240      	movs	r2, #64	@ 0x40
 8012c2a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2240      	movs	r2, #64	@ 0x40
 8012c32:	5a9b      	ldrh	r3, [r3, r2]
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2108      	movs	r1, #8
 8012c3c:	430a      	orrs	r2, r1
 8012c3e:	b291      	uxth	r1, r2
 8012c40:	2240      	movs	r2, #64	@ 0x40
 8012c42:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	23b8      	movs	r3, #184	@ 0xb8
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	2101      	movs	r1, #1
 8012c4c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2254      	movs	r2, #84	@ 0x54
 8012c54:	5a9b      	ldrh	r3, [r3, r2]
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	089b      	lsrs	r3, r3, #2
 8012c5a:	223c      	movs	r2, #60	@ 0x3c
 8012c5c:	4013      	ands	r3, r2
 8012c5e:	0019      	movs	r1, r3
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	23b9      	movs	r3, #185	@ 0xb9
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2101      	movs	r1, #1
 8012c6c:	0018      	movs	r0, r3
 8012c6e:	f001 fc1b 	bl	80144a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8012c72:	e02c      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	0018      	movs	r0, r3
 8012c78:	f009 fdda 	bl	801c830 <HAL_PCD_SuspendCallback>
    return;
 8012c7c:	e027      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8012c7e:	68fa      	ldr	r2, [r7, #12]
 8012c80:	2380      	movs	r3, #128	@ 0x80
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	4013      	ands	r3, r2
 8012c86:	d010      	beq.n	8012caa <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2244      	movs	r2, #68	@ 0x44
 8012c8e:	5a9b      	ldrh	r3, [r3, r2]
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4914      	ldr	r1, [pc, #80]	@ (8012ce8 <HAL_PCD_IRQHandler+0x280>)
 8012c98:	400a      	ands	r2, r1
 8012c9a:	b291      	uxth	r1, r2
 8012c9c:	2244      	movs	r2, #68	@ 0x44
 8012c9e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	0018      	movs	r0, r3
 8012ca4:	f009 fd90 	bl	801c7c8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012ca8:	e011      	b.n	8012cce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8012caa:	68fa      	ldr	r2, [r7, #12]
 8012cac:	2380      	movs	r3, #128	@ 0x80
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	4013      	ands	r3, r2
 8012cb2:	d00c      	beq.n	8012cce <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2244      	movs	r2, #68	@ 0x44
 8012cba:	5a9b      	ldrh	r3, [r3, r2]
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	490a      	ldr	r1, [pc, #40]	@ (8012cec <HAL_PCD_IRQHandler+0x284>)
 8012cc4:	400a      	ands	r2, r1
 8012cc6:	b291      	uxth	r1, r2
 8012cc8:	2244      	movs	r2, #68	@ 0x44
 8012cca:	5299      	strh	r1, [r3, r2]

    return;
 8012ccc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	b004      	add	sp, #16
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	fffffbff 	.word	0xfffffbff
 8012cd8:	ffffbfff 	.word	0xffffbfff
 8012cdc:	ffffdfff 	.word	0xffffdfff
 8012ce0:	ffffefff 	.word	0xffffefff
 8012ce4:	fffff7ff 	.word	0xfffff7ff
 8012ce8:	fffffdff 	.word	0xfffffdff
 8012cec:	fffffeff 	.word	0xfffffeff

08012cf0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	000a      	movs	r2, r1
 8012cfa:	1cfb      	adds	r3, r7, #3
 8012cfc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	23aa      	movs	r3, #170	@ 0xaa
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	5cd3      	ldrb	r3, [r2, r3]
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d101      	bne.n	8012d0e <HAL_PCD_SetAddress+0x1e>
 8012d0a:	2302      	movs	r3, #2
 8012d0c:	e017      	b.n	8012d3e <HAL_PCD_SetAddress+0x4e>
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	23aa      	movs	r3, #170	@ 0xaa
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	2101      	movs	r1, #1
 8012d16:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	1cfa      	adds	r2, r7, #3
 8012d1c:	2124      	movs	r1, #36	@ 0x24
 8012d1e:	7812      	ldrb	r2, [r2, #0]
 8012d20:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	1cfb      	adds	r3, r7, #3
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	0019      	movs	r1, r3
 8012d2c:	0010      	movs	r0, r2
 8012d2e:	f007 fc71 	bl	801a614 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	23aa      	movs	r3, #170	@ 0xaa
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	2100      	movs	r1, #0
 8012d3a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	0018      	movs	r0, r3
 8012d40:	46bd      	mov	sp, r7
 8012d42:	b002      	add	sp, #8
 8012d44:	bd80      	pop	{r7, pc}

08012d46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012d46:	b590      	push	{r4, r7, lr}
 8012d48:	b085      	sub	sp, #20
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	6078      	str	r0, [r7, #4]
 8012d4e:	000c      	movs	r4, r1
 8012d50:	0010      	movs	r0, r2
 8012d52:	0019      	movs	r1, r3
 8012d54:	1cfb      	adds	r3, r7, #3
 8012d56:	1c22      	adds	r2, r4, #0
 8012d58:	701a      	strb	r2, [r3, #0]
 8012d5a:	003b      	movs	r3, r7
 8012d5c:	1c02      	adds	r2, r0, #0
 8012d5e:	801a      	strh	r2, [r3, #0]
 8012d60:	1cbb      	adds	r3, r7, #2
 8012d62:	1c0a      	adds	r2, r1, #0
 8012d64:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012d66:	230b      	movs	r3, #11
 8012d68:	18fb      	adds	r3, r7, r3
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012d6e:	1cfb      	adds	r3, r7, #3
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	b25b      	sxtb	r3, r3
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	da0f      	bge.n	8012d98 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012d78:	1cfb      	adds	r3, r7, #3
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	2207      	movs	r2, #7
 8012d7e:	4013      	ands	r3, r2
 8012d80:	1c5a      	adds	r2, r3, #1
 8012d82:	0013      	movs	r3, r2
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	189b      	adds	r3, r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	18d3      	adds	r3, r2, r3
 8012d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2201      	movs	r2, #1
 8012d94:	705a      	strb	r2, [r3, #1]
 8012d96:	e00f      	b.n	8012db8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012d98:	1cfb      	adds	r3, r7, #3
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	2207      	movs	r2, #7
 8012d9e:	401a      	ands	r2, r3
 8012da0:	0013      	movs	r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	189b      	adds	r3, r3, r2
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	3369      	adds	r3, #105	@ 0x69
 8012daa:	33ff      	adds	r3, #255	@ 0xff
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	18d3      	adds	r3, r2, r3
 8012db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	2200      	movs	r2, #0
 8012db6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012db8:	1cfb      	adds	r3, r7, #3
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	2207      	movs	r2, #7
 8012dbe:	4013      	ands	r3, r2
 8012dc0:	b2da      	uxtb	r2, r3
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012dc6:	003b      	movs	r3, r7
 8012dc8:	881a      	ldrh	r2, [r3, #0]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	1cba      	adds	r2, r7, #2
 8012dd2:	7812      	ldrb	r2, [r2, #0]
 8012dd4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012dd6:	1cbb      	adds	r3, r7, #2
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b02      	cmp	r3, #2
 8012ddc:	d102      	bne.n	8012de4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2200      	movs	r2, #0
 8012de2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	23aa      	movs	r3, #170	@ 0xaa
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	5cd3      	ldrb	r3, [r2, r3]
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d101      	bne.n	8012df4 <HAL_PCD_EP_Open+0xae>
 8012df0:	2302      	movs	r3, #2
 8012df2:	e013      	b.n	8012e1c <HAL_PCD_EP_Open+0xd6>
 8012df4:	687a      	ldr	r2, [r7, #4]
 8012df6:	23aa      	movs	r3, #170	@ 0xaa
 8012df8:	009b      	lsls	r3, r3, #2
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	68fa      	ldr	r2, [r7, #12]
 8012e04:	0011      	movs	r1, r2
 8012e06:	0018      	movs	r0, r3
 8012e08:	f005 fc68 	bl	80186dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	23aa      	movs	r3, #170	@ 0xaa
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	2100      	movs	r1, #0
 8012e14:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012e16:	230b      	movs	r3, #11
 8012e18:	18fb      	adds	r3, r7, r3
 8012e1a:	781b      	ldrb	r3, [r3, #0]
}
 8012e1c:	0018      	movs	r0, r3
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	b005      	add	sp, #20
 8012e22:	bd90      	pop	{r4, r7, pc}

08012e24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	000a      	movs	r2, r1
 8012e2e:	1cfb      	adds	r3, r7, #3
 8012e30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012e32:	1cfb      	adds	r3, r7, #3
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	b25b      	sxtb	r3, r3
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	da0f      	bge.n	8012e5c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012e3c:	1cfb      	adds	r3, r7, #3
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	2207      	movs	r2, #7
 8012e42:	4013      	ands	r3, r2
 8012e44:	1c5a      	adds	r2, r3, #1
 8012e46:	0013      	movs	r3, r2
 8012e48:	009b      	lsls	r3, r3, #2
 8012e4a:	189b      	adds	r3, r3, r2
 8012e4c:	00db      	lsls	r3, r3, #3
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	18d3      	adds	r3, r2, r3
 8012e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2201      	movs	r2, #1
 8012e58:	705a      	strb	r2, [r3, #1]
 8012e5a:	e00f      	b.n	8012e7c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012e5c:	1cfb      	adds	r3, r7, #3
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	2207      	movs	r2, #7
 8012e62:	401a      	ands	r2, r3
 8012e64:	0013      	movs	r3, r2
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	189b      	adds	r3, r3, r2
 8012e6a:	00db      	lsls	r3, r3, #3
 8012e6c:	3369      	adds	r3, #105	@ 0x69
 8012e6e:	33ff      	adds	r3, #255	@ 0xff
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	18d3      	adds	r3, r2, r3
 8012e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012e7c:	1cfb      	adds	r3, r7, #3
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	2207      	movs	r2, #7
 8012e82:	4013      	ands	r3, r2
 8012e84:	b2da      	uxtb	r2, r3
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	23aa      	movs	r3, #170	@ 0xaa
 8012e8e:	009b      	lsls	r3, r3, #2
 8012e90:	5cd3      	ldrb	r3, [r2, r3]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d101      	bne.n	8012e9a <HAL_PCD_EP_Close+0x76>
 8012e96:	2302      	movs	r3, #2
 8012e98:	e011      	b.n	8012ebe <HAL_PCD_EP_Close+0x9a>
 8012e9a:	687a      	ldr	r2, [r7, #4]
 8012e9c:	23aa      	movs	r3, #170	@ 0xaa
 8012e9e:	009b      	lsls	r3, r3, #2
 8012ea0:	2101      	movs	r1, #1
 8012ea2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	68fa      	ldr	r2, [r7, #12]
 8012eaa:	0011      	movs	r1, r2
 8012eac:	0018      	movs	r0, r3
 8012eae:	f005 ffb7 	bl	8018e20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	23aa      	movs	r3, #170	@ 0xaa
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	2100      	movs	r1, #0
 8012eba:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012ebc:	2300      	movs	r3, #0
}
 8012ebe:	0018      	movs	r0, r3
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	b004      	add	sp, #16
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012ec6:	b580      	push	{r7, lr}
 8012ec8:	b086      	sub	sp, #24
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	60f8      	str	r0, [r7, #12]
 8012ece:	607a      	str	r2, [r7, #4]
 8012ed0:	603b      	str	r3, [r7, #0]
 8012ed2:	200b      	movs	r0, #11
 8012ed4:	183b      	adds	r3, r7, r0
 8012ed6:	1c0a      	adds	r2, r1, #0
 8012ed8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012eda:	0001      	movs	r1, r0
 8012edc:	187b      	adds	r3, r7, r1
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	2207      	movs	r2, #7
 8012ee2:	401a      	ands	r2, r3
 8012ee4:	0013      	movs	r3, r2
 8012ee6:	009b      	lsls	r3, r3, #2
 8012ee8:	189b      	adds	r3, r3, r2
 8012eea:	00db      	lsls	r3, r3, #3
 8012eec:	3369      	adds	r3, #105	@ 0x69
 8012eee:	33ff      	adds	r3, #255	@ 0xff
 8012ef0:	68fa      	ldr	r2, [r7, #12]
 8012ef2:	18d3      	adds	r3, r2, r3
 8012ef4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	683a      	ldr	r2, [r7, #0]
 8012f00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	2200      	movs	r2, #0
 8012f06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012f0e:	187b      	adds	r3, r7, r1
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	2207      	movs	r2, #7
 8012f14:	4013      	ands	r3, r2
 8012f16:	b2da      	uxtb	r2, r3
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	697a      	ldr	r2, [r7, #20]
 8012f22:	0011      	movs	r1, r2
 8012f24:	0018      	movs	r0, r3
 8012f26:	f006 f93b 	bl	80191a0 <USB_EPStartXfer>

  return HAL_OK;
 8012f2a:	2300      	movs	r3, #0
}
 8012f2c:	0018      	movs	r0, r3
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	b006      	add	sp, #24
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	000a      	movs	r2, r1
 8012f3e:	1cfb      	adds	r3, r7, #3
 8012f40:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012f42:	1cfb      	adds	r3, r7, #3
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	2207      	movs	r2, #7
 8012f48:	401a      	ands	r2, r3
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	23c2      	movs	r3, #194	@ 0xc2
 8012f4e:	0059      	lsls	r1, r3, #1
 8012f50:	0013      	movs	r3, r2
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	189b      	adds	r3, r3, r2
 8012f56:	00db      	lsls	r3, r3, #3
 8012f58:	18c3      	adds	r3, r0, r3
 8012f5a:	185b      	adds	r3, r3, r1
 8012f5c:	681b      	ldr	r3, [r3, #0]
}
 8012f5e:	0018      	movs	r0, r3
 8012f60:	46bd      	mov	sp, r7
 8012f62:	b002      	add	sp, #8
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b086      	sub	sp, #24
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	60f8      	str	r0, [r7, #12]
 8012f6e:	607a      	str	r2, [r7, #4]
 8012f70:	603b      	str	r3, [r7, #0]
 8012f72:	200b      	movs	r0, #11
 8012f74:	183b      	adds	r3, r7, r0
 8012f76:	1c0a      	adds	r2, r1, #0
 8012f78:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012f7a:	183b      	adds	r3, r7, r0
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	2207      	movs	r2, #7
 8012f80:	4013      	ands	r3, r2
 8012f82:	1c5a      	adds	r2, r3, #1
 8012f84:	0013      	movs	r3, r2
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	189b      	adds	r3, r3, r2
 8012f8a:	00db      	lsls	r3, r3, #3
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	18d3      	adds	r3, r2, r3
 8012f90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	687a      	ldr	r2, [r7, #4]
 8012f96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	2224      	movs	r2, #36	@ 0x24
 8012fa2:	2101      	movs	r1, #1
 8012fa4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012fb8:	183b      	adds	r3, r7, r0
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	2207      	movs	r2, #7
 8012fbe:	4013      	ands	r3, r2
 8012fc0:	b2da      	uxtb	r2, r3
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	697a      	ldr	r2, [r7, #20]
 8012fcc:	0011      	movs	r1, r2
 8012fce:	0018      	movs	r0, r3
 8012fd0:	f006 f8e6 	bl	80191a0 <USB_EPStartXfer>

  return HAL_OK;
 8012fd4:	2300      	movs	r3, #0
}
 8012fd6:	0018      	movs	r0, r3
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	b006      	add	sp, #24
 8012fdc:	bd80      	pop	{r7, pc}

08012fde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012fde:	b580      	push	{r7, lr}
 8012fe0:	b084      	sub	sp, #16
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	6078      	str	r0, [r7, #4]
 8012fe6:	000a      	movs	r2, r1
 8012fe8:	1cfb      	adds	r3, r7, #3
 8012fea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012fec:	1cfb      	adds	r3, r7, #3
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	2207      	movs	r2, #7
 8012ff2:	401a      	ands	r2, r3
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d901      	bls.n	8013000 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	e046      	b.n	801308e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013000:	1cfb      	adds	r3, r7, #3
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	b25b      	sxtb	r3, r3
 8013006:	2b00      	cmp	r3, #0
 8013008:	da0f      	bge.n	801302a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801300a:	1cfb      	adds	r3, r7, #3
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	2207      	movs	r2, #7
 8013010:	4013      	ands	r3, r2
 8013012:	1c5a      	adds	r2, r3, #1
 8013014:	0013      	movs	r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	189b      	adds	r3, r3, r2
 801301a:	00db      	lsls	r3, r3, #3
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	18d3      	adds	r3, r2, r3
 8013020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2201      	movs	r2, #1
 8013026:	705a      	strb	r2, [r3, #1]
 8013028:	e00d      	b.n	8013046 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801302a:	1cfb      	adds	r3, r7, #3
 801302c:	781a      	ldrb	r2, [r3, #0]
 801302e:	0013      	movs	r3, r2
 8013030:	009b      	lsls	r3, r3, #2
 8013032:	189b      	adds	r3, r3, r2
 8013034:	00db      	lsls	r3, r3, #3
 8013036:	3369      	adds	r3, #105	@ 0x69
 8013038:	33ff      	adds	r3, #255	@ 0xff
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	18d3      	adds	r3, r2, r3
 801303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2200      	movs	r2, #0
 8013044:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2201      	movs	r2, #1
 801304a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801304c:	1cfb      	adds	r3, r7, #3
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	2207      	movs	r2, #7
 8013052:	4013      	ands	r3, r2
 8013054:	b2da      	uxtb	r2, r3
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	23aa      	movs	r3, #170	@ 0xaa
 801305e:	009b      	lsls	r3, r3, #2
 8013060:	5cd3      	ldrb	r3, [r2, r3]
 8013062:	2b01      	cmp	r3, #1
 8013064:	d101      	bne.n	801306a <HAL_PCD_EP_SetStall+0x8c>
 8013066:	2302      	movs	r3, #2
 8013068:	e011      	b.n	801308e <HAL_PCD_EP_SetStall+0xb0>
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	23aa      	movs	r3, #170	@ 0xaa
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	2101      	movs	r1, #1
 8013072:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	68fa      	ldr	r2, [r7, #12]
 801307a:	0011      	movs	r1, r2
 801307c:	0018      	movs	r0, r3
 801307e:	f007 f9c7 	bl	801a410 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	23aa      	movs	r3, #170	@ 0xaa
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	2100      	movs	r1, #0
 801308a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801308c:	2300      	movs	r3, #0
}
 801308e:	0018      	movs	r0, r3
 8013090:	46bd      	mov	sp, r7
 8013092:	b004      	add	sp, #16
 8013094:	bd80      	pop	{r7, pc}

08013096 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013096:	b580      	push	{r7, lr}
 8013098:	b084      	sub	sp, #16
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
 801309e:	000a      	movs	r2, r1
 80130a0:	1cfb      	adds	r3, r7, #3
 80130a2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80130a4:	1cfb      	adds	r3, r7, #3
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	220f      	movs	r2, #15
 80130aa:	401a      	ands	r2, r3
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d901      	bls.n	80130b8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80130b4:	2301      	movs	r3, #1
 80130b6:	e048      	b.n	801314a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80130b8:	1cfb      	adds	r3, r7, #3
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	b25b      	sxtb	r3, r3
 80130be:	2b00      	cmp	r3, #0
 80130c0:	da0f      	bge.n	80130e2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80130c2:	1cfb      	adds	r3, r7, #3
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	2207      	movs	r2, #7
 80130c8:	4013      	ands	r3, r2
 80130ca:	1c5a      	adds	r2, r3, #1
 80130cc:	0013      	movs	r3, r2
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	189b      	adds	r3, r3, r2
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	18d3      	adds	r3, r2, r3
 80130d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2201      	movs	r2, #1
 80130de:	705a      	strb	r2, [r3, #1]
 80130e0:	e00f      	b.n	8013102 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80130e2:	1cfb      	adds	r3, r7, #3
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	2207      	movs	r2, #7
 80130e8:	401a      	ands	r2, r3
 80130ea:	0013      	movs	r3, r2
 80130ec:	009b      	lsls	r3, r3, #2
 80130ee:	189b      	adds	r3, r3, r2
 80130f0:	00db      	lsls	r3, r3, #3
 80130f2:	3369      	adds	r3, #105	@ 0x69
 80130f4:	33ff      	adds	r3, #255	@ 0xff
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	18d3      	adds	r3, r2, r3
 80130fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2200      	movs	r2, #0
 8013100:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2200      	movs	r2, #0
 8013106:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013108:	1cfb      	adds	r3, r7, #3
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	2207      	movs	r2, #7
 801310e:	4013      	ands	r3, r2
 8013110:	b2da      	uxtb	r2, r3
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	23aa      	movs	r3, #170	@ 0xaa
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	5cd3      	ldrb	r3, [r2, r3]
 801311e:	2b01      	cmp	r3, #1
 8013120:	d101      	bne.n	8013126 <HAL_PCD_EP_ClrStall+0x90>
 8013122:	2302      	movs	r3, #2
 8013124:	e011      	b.n	801314a <HAL_PCD_EP_ClrStall+0xb4>
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	23aa      	movs	r3, #170	@ 0xaa
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	2101      	movs	r1, #1
 801312e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	0011      	movs	r1, r2
 8013138:	0018      	movs	r0, r3
 801313a:	f007 f9b9 	bl	801a4b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	23aa      	movs	r3, #170	@ 0xaa
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	2100      	movs	r1, #0
 8013146:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	0018      	movs	r0, r3
 801314c:	46bd      	mov	sp, r7
 801314e:	b004      	add	sp, #16
 8013150:	bd80      	pop	{r7, pc}
	...

08013154 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013154:	b5b0      	push	{r4, r5, r7, lr}
 8013156:	b096      	sub	sp, #88	@ 0x58
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801315c:	f000 fbec 	bl	8013938 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681a      	ldr	r2, [r3, #0]
 8013164:	204e      	movs	r0, #78	@ 0x4e
 8013166:	183b      	adds	r3, r7, r0
 8013168:	2144      	movs	r1, #68	@ 0x44
 801316a:	5a52      	ldrh	r2, [r2, r1]
 801316c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801316e:	183b      	adds	r3, r7, r0
 8013170:	881b      	ldrh	r3, [r3, #0]
 8013172:	b2da      	uxtb	r2, r3
 8013174:	244d      	movs	r4, #77	@ 0x4d
 8013176:	193b      	adds	r3, r7, r4
 8013178:	210f      	movs	r1, #15
 801317a:	400a      	ands	r2, r1
 801317c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801317e:	193b      	adds	r3, r7, r4
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d000      	beq.n	8013188 <PCD_EP_ISR_Handler+0x34>
 8013186:	e18f      	b.n	80134a8 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013188:	183b      	adds	r3, r7, r0
 801318a:	881b      	ldrh	r3, [r3, #0]
 801318c:	2210      	movs	r2, #16
 801318e:	4013      	ands	r3, r2
 8013190:	d155      	bne.n	801323e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	881b      	ldrh	r3, [r3, #0]
 8013198:	b29a      	uxth	r2, r3
 801319a:	200e      	movs	r0, #14
 801319c:	183b      	adds	r3, r7, r0
 801319e:	49bb      	ldr	r1, [pc, #748]	@ (801348c <PCD_EP_ISR_Handler+0x338>)
 80131a0:	400a      	ands	r2, r1
 80131a2:	801a      	strh	r2, [r3, #0]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	183a      	adds	r2, r7, r0
 80131aa:	8812      	ldrh	r2, [r2, #0]
 80131ac:	49b8      	ldr	r1, [pc, #736]	@ (8013490 <PCD_EP_ISR_Handler+0x33c>)
 80131ae:	430a      	orrs	r2, r1
 80131b0:	b292      	uxth	r2, r2
 80131b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	3328      	adds	r3, #40	@ 0x28
 80131b8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2250      	movs	r2, #80	@ 0x50
 80131c0:	5a9b      	ldrh	r3, [r3, r2]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	001a      	movs	r2, r3
 80131c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	00db      	lsls	r3, r3, #3
 80131cc:	18d2      	adds	r2, r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	18d3      	adds	r3, r2, r3
 80131d4:	4aaf      	ldr	r2, [pc, #700]	@ (8013494 <PCD_EP_ISR_Handler+0x340>)
 80131d6:	4694      	mov	ip, r2
 80131d8:	4463      	add	r3, ip
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	059b      	lsls	r3, r3, #22
 80131de:	0d9a      	lsrs	r2, r3, #22
 80131e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80131e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131e6:	695a      	ldr	r2, [r3, #20]
 80131e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131ea:	69db      	ldr	r3, [r3, #28]
 80131ec:	18d2      	adds	r2, r2, r3
 80131ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2100      	movs	r1, #0
 80131f6:	0018      	movs	r0, r3
 80131f8:	f009 fac8 	bl	801c78c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2224      	movs	r2, #36	@ 0x24
 8013200:	5c9b      	ldrb	r3, [r3, r2]
 8013202:	b2db      	uxtb	r3, r3
 8013204:	2b00      	cmp	r3, #0
 8013206:	d101      	bne.n	801320c <PCD_EP_ISR_Handler+0xb8>
 8013208:	f000 fb96 	bl	8013938 <PCD_EP_ISR_Handler+0x7e4>
 801320c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801320e:	699b      	ldr	r3, [r3, #24]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d001      	beq.n	8013218 <PCD_EP_ISR_Handler+0xc4>
 8013214:	f000 fb90 	bl	8013938 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2224      	movs	r2, #36	@ 0x24
 801321c:	5c9b      	ldrb	r3, [r3, r2]
 801321e:	b2db      	uxtb	r3, r3
 8013220:	2280      	movs	r2, #128	@ 0x80
 8013222:	4252      	negs	r2, r2
 8013224:	4313      	orrs	r3, r2
 8013226:	b2da      	uxtb	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	0011      	movs	r1, r2
 801322e:	224c      	movs	r2, #76	@ 0x4c
 8013230:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2224      	movs	r2, #36	@ 0x24
 8013236:	2100      	movs	r1, #0
 8013238:	5499      	strb	r1, [r3, r2]
 801323a:	f000 fb7d 	bl	8013938 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	3369      	adds	r3, #105	@ 0x69
 8013242:	33ff      	adds	r3, #255	@ 0xff
 8013244:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681a      	ldr	r2, [r3, #0]
 801324a:	214a      	movs	r1, #74	@ 0x4a
 801324c:	187b      	adds	r3, r7, r1
 801324e:	8812      	ldrh	r2, [r2, #0]
 8013250:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013252:	187b      	adds	r3, r7, r1
 8013254:	881a      	ldrh	r2, [r3, #0]
 8013256:	2380      	movs	r3, #128	@ 0x80
 8013258:	011b      	lsls	r3, r3, #4
 801325a:	4013      	ands	r3, r2
 801325c:	d037      	beq.n	80132ce <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	2250      	movs	r2, #80	@ 0x50
 8013264:	5a9b      	ldrh	r3, [r3, r2]
 8013266:	b29b      	uxth	r3, r3
 8013268:	001a      	movs	r2, r3
 801326a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	00db      	lsls	r3, r3, #3
 8013270:	18d2      	adds	r2, r2, r3
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	18d3      	adds	r3, r2, r3
 8013278:	4a87      	ldr	r2, [pc, #540]	@ (8013498 <PCD_EP_ISR_Handler+0x344>)
 801327a:	4694      	mov	ip, r2
 801327c:	4463      	add	r3, ip
 801327e:	881b      	ldrh	r3, [r3, #0]
 8013280:	059b      	lsls	r3, r3, #22
 8013282:	0d9a      	lsrs	r2, r3, #22
 8013284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013286:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6818      	ldr	r0, [r3, #0]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	22ac      	movs	r2, #172	@ 0xac
 8013290:	0092      	lsls	r2, r2, #2
 8013292:	1899      	adds	r1, r3, r2
 8013294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013296:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801329a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801329c:	b29b      	uxth	r3, r3
 801329e:	f007 fa3a 	bl	801a716 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	881b      	ldrh	r3, [r3, #0]
 80132a8:	b29a      	uxth	r2, r3
 80132aa:	2010      	movs	r0, #16
 80132ac:	183b      	adds	r3, r7, r0
 80132ae:	497b      	ldr	r1, [pc, #492]	@ (801349c <PCD_EP_ISR_Handler+0x348>)
 80132b0:	400a      	ands	r2, r1
 80132b2:	801a      	strh	r2, [r3, #0]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	183a      	adds	r2, r7, r0
 80132ba:	8812      	ldrh	r2, [r2, #0]
 80132bc:	2180      	movs	r1, #128	@ 0x80
 80132be:	430a      	orrs	r2, r1
 80132c0:	b292      	uxth	r2, r2
 80132c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	0018      	movs	r0, r3
 80132c8:	f009 fa2a 	bl	801c720 <HAL_PCD_SetupStageCallback>
 80132cc:	e334      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80132ce:	234a      	movs	r3, #74	@ 0x4a
 80132d0:	18fb      	adds	r3, r7, r3
 80132d2:	2200      	movs	r2, #0
 80132d4:	5e9b      	ldrsh	r3, [r3, r2]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	db00      	blt.n	80132dc <PCD_EP_ISR_Handler+0x188>
 80132da:	e32d      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	881b      	ldrh	r3, [r3, #0]
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	201e      	movs	r0, #30
 80132e6:	183b      	adds	r3, r7, r0
 80132e8:	496c      	ldr	r1, [pc, #432]	@ (801349c <PCD_EP_ISR_Handler+0x348>)
 80132ea:	400a      	ands	r2, r1
 80132ec:	801a      	strh	r2, [r3, #0]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	183a      	adds	r2, r7, r0
 80132f4:	8812      	ldrh	r2, [r2, #0]
 80132f6:	2180      	movs	r1, #128	@ 0x80
 80132f8:	430a      	orrs	r2, r1
 80132fa:	b292      	uxth	r2, r2
 80132fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2250      	movs	r2, #80	@ 0x50
 8013304:	5a9b      	ldrh	r3, [r3, r2]
 8013306:	b29b      	uxth	r3, r3
 8013308:	001a      	movs	r2, r3
 801330a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	00db      	lsls	r3, r3, #3
 8013310:	18d2      	adds	r2, r2, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	18d3      	adds	r3, r2, r3
 8013318:	4a5f      	ldr	r2, [pc, #380]	@ (8013498 <PCD_EP_ISR_Handler+0x344>)
 801331a:	4694      	mov	ip, r2
 801331c:	4463      	add	r3, ip
 801331e:	881b      	ldrh	r3, [r3, #0]
 8013320:	059b      	lsls	r3, r3, #22
 8013322:	0d9a      	lsrs	r2, r3, #22
 8013324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013326:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801332a:	69db      	ldr	r3, [r3, #28]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d01a      	beq.n	8013366 <PCD_EP_ISR_Handler+0x212>
 8013330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013332:	695b      	ldr	r3, [r3, #20]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d016      	beq.n	8013366 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6818      	ldr	r0, [r3, #0]
 801333c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801333e:	6959      	ldr	r1, [r3, #20]
 8013340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013342:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013346:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013348:	b29b      	uxth	r3, r3
 801334a:	f007 f9e4 	bl	801a716 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801334e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013350:	695a      	ldr	r2, [r3, #20]
 8013352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013354:	69db      	ldr	r3, [r3, #28]
 8013356:	18d2      	adds	r2, r2, r3
 8013358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801335a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2100      	movs	r1, #0
 8013360:	0018      	movs	r0, r3
 8013362:	f009 f9f2 	bl	801c74a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	214a      	movs	r1, #74	@ 0x4a
 801336c:	187b      	adds	r3, r7, r1
 801336e:	8812      	ldrh	r2, [r2, #0]
 8013370:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013372:	187b      	adds	r3, r7, r1
 8013374:	881a      	ldrh	r2, [r3, #0]
 8013376:	2380      	movs	r3, #128	@ 0x80
 8013378:	011b      	lsls	r3, r3, #4
 801337a:	4013      	ands	r3, r2
 801337c:	d000      	beq.n	8013380 <PCD_EP_ISR_Handler+0x22c>
 801337e:	e2db      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
 8013380:	187b      	adds	r3, r7, r1
 8013382:	881a      	ldrh	r2, [r3, #0]
 8013384:	23c0      	movs	r3, #192	@ 0xc0
 8013386:	019b      	lsls	r3, r3, #6
 8013388:	401a      	ands	r2, r3
 801338a:	23c0      	movs	r3, #192	@ 0xc0
 801338c:	019b      	lsls	r3, r3, #6
 801338e:	429a      	cmp	r2, r3
 8013390:	d100      	bne.n	8013394 <PCD_EP_ISR_Handler+0x240>
 8013392:	e2d1      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	61bb      	str	r3, [r7, #24]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2250      	movs	r2, #80	@ 0x50
 80133a0:	5a9b      	ldrh	r3, [r3, r2]
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	001a      	movs	r2, r3
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	189b      	adds	r3, r3, r2
 80133aa:	61bb      	str	r3, [r7, #24]
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	4a3a      	ldr	r2, [pc, #232]	@ (8013498 <PCD_EP_ISR_Handler+0x344>)
 80133b0:	4694      	mov	ip, r2
 80133b2:	4463      	add	r3, ip
 80133b4:	617b      	str	r3, [r7, #20]
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	059b      	lsls	r3, r3, #22
 80133be:	0d9b      	lsrs	r3, r3, #22
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	801a      	strh	r2, [r3, #0]
 80133c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133c8:	691b      	ldr	r3, [r3, #16]
 80133ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80133cc:	d91a      	bls.n	8013404 <PCD_EP_ISR_Handler+0x2b0>
 80133ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133d0:	691b      	ldr	r3, [r3, #16]
 80133d2:	095b      	lsrs	r3, r3, #5
 80133d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80133d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133d8:	691b      	ldr	r3, [r3, #16]
 80133da:	221f      	movs	r2, #31
 80133dc:	4013      	ands	r3, r2
 80133de:	d102      	bne.n	80133e6 <PCD_EP_ISR_Handler+0x292>
 80133e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133e2:	3b01      	subs	r3, #1
 80133e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	881b      	ldrh	r3, [r3, #0]
 80133ea:	b29a      	uxth	r2, r3
 80133ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	029b      	lsls	r3, r3, #10
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	4313      	orrs	r3, r2
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	4a25      	ldr	r2, [pc, #148]	@ (8013490 <PCD_EP_ISR_Handler+0x33c>)
 80133fa:	4313      	orrs	r3, r2
 80133fc:	b29a      	uxth	r2, r3
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	801a      	strh	r2, [r3, #0]
 8013402:	e023      	b.n	801344c <PCD_EP_ISR_Handler+0x2f8>
 8013404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013406:	691b      	ldr	r3, [r3, #16]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d108      	bne.n	801341e <PCD_EP_ISR_Handler+0x2ca>
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	881b      	ldrh	r3, [r3, #0]
 8013410:	b29b      	uxth	r3, r3
 8013412:	4a1f      	ldr	r2, [pc, #124]	@ (8013490 <PCD_EP_ISR_Handler+0x33c>)
 8013414:	4313      	orrs	r3, r2
 8013416:	b29a      	uxth	r2, r3
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	801a      	strh	r2, [r3, #0]
 801341c:	e016      	b.n	801344c <PCD_EP_ISR_Handler+0x2f8>
 801341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013420:	691b      	ldr	r3, [r3, #16]
 8013422:	085b      	lsrs	r3, r3, #1
 8013424:	647b      	str	r3, [r7, #68]	@ 0x44
 8013426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	2201      	movs	r2, #1
 801342c:	4013      	ands	r3, r2
 801342e:	d002      	beq.n	8013436 <PCD_EP_ISR_Handler+0x2e2>
 8013430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013432:	3301      	adds	r3, #1
 8013434:	647b      	str	r3, [r7, #68]	@ 0x44
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	881b      	ldrh	r3, [r3, #0]
 801343a:	b29a      	uxth	r2, r3
 801343c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801343e:	b29b      	uxth	r3, r3
 8013440:	029b      	lsls	r3, r3, #10
 8013442:	b29b      	uxth	r3, r3
 8013444:	4313      	orrs	r3, r2
 8013446:	b29a      	uxth	r2, r3
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	b29a      	uxth	r2, r3
 8013454:	2012      	movs	r0, #18
 8013456:	183b      	adds	r3, r7, r0
 8013458:	4911      	ldr	r1, [pc, #68]	@ (80134a0 <PCD_EP_ISR_Handler+0x34c>)
 801345a:	400a      	ands	r2, r1
 801345c:	801a      	strh	r2, [r3, #0]
 801345e:	183b      	adds	r3, r7, r0
 8013460:	183a      	adds	r2, r7, r0
 8013462:	8812      	ldrh	r2, [r2, #0]
 8013464:	2180      	movs	r1, #128	@ 0x80
 8013466:	0149      	lsls	r1, r1, #5
 8013468:	404a      	eors	r2, r1
 801346a:	801a      	strh	r2, [r3, #0]
 801346c:	183b      	adds	r3, r7, r0
 801346e:	183a      	adds	r2, r7, r0
 8013470:	8812      	ldrh	r2, [r2, #0]
 8013472:	2180      	movs	r1, #128	@ 0x80
 8013474:	0189      	lsls	r1, r1, #6
 8013476:	404a      	eors	r2, r1
 8013478:	801a      	strh	r2, [r3, #0]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	183a      	adds	r2, r7, r0
 8013480:	8812      	ldrh	r2, [r2, #0]
 8013482:	4908      	ldr	r1, [pc, #32]	@ (80134a4 <PCD_EP_ISR_Handler+0x350>)
 8013484:	430a      	orrs	r2, r1
 8013486:	b292      	uxth	r2, r2
 8013488:	801a      	strh	r2, [r3, #0]
 801348a:	e255      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
 801348c:	ffff8f0f 	.word	0xffff8f0f
 8013490:	ffff8000 	.word	0xffff8000
 8013494:	00000402 	.word	0x00000402
 8013498:	00000406 	.word	0x00000406
 801349c:	00000f8f 	.word	0x00000f8f
 80134a0:	ffffbf8f 	.word	0xffffbf8f
 80134a4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	001a      	movs	r2, r3
 80134ae:	204d      	movs	r0, #77	@ 0x4d
 80134b0:	183b      	adds	r3, r7, r0
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	18d2      	adds	r2, r2, r3
 80134b8:	214a      	movs	r1, #74	@ 0x4a
 80134ba:	187b      	adds	r3, r7, r1
 80134bc:	8812      	ldrh	r2, [r2, #0]
 80134be:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80134c0:	187b      	adds	r3, r7, r1
 80134c2:	2200      	movs	r2, #0
 80134c4:	5e9b      	ldrsh	r3, [r3, r2]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	db00      	blt.n	80134cc <PCD_EP_ISR_Handler+0x378>
 80134ca:	e0fa      	b.n	80136c2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	001a      	movs	r2, r3
 80134d2:	183b      	adds	r3, r7, r0
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	18d3      	adds	r3, r2, r3
 80134da:	881b      	ldrh	r3, [r3, #0]
 80134dc:	b29a      	uxth	r2, r3
 80134de:	2448      	movs	r4, #72	@ 0x48
 80134e0:	193b      	adds	r3, r7, r4
 80134e2:	49d1      	ldr	r1, [pc, #836]	@ (8013828 <PCD_EP_ISR_Handler+0x6d4>)
 80134e4:	400a      	ands	r2, r1
 80134e6:	801a      	strh	r2, [r3, #0]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	001a      	movs	r2, r3
 80134ee:	183b      	adds	r3, r7, r0
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	18d3      	adds	r3, r2, r3
 80134f6:	193a      	adds	r2, r7, r4
 80134f8:	8812      	ldrh	r2, [r2, #0]
 80134fa:	2180      	movs	r1, #128	@ 0x80
 80134fc:	430a      	orrs	r2, r1
 80134fe:	b292      	uxth	r2, r2
 8013500:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013502:	183b      	adds	r3, r7, r0
 8013504:	781a      	ldrb	r2, [r3, #0]
 8013506:	0013      	movs	r3, r2
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	189b      	adds	r3, r3, r2
 801350c:	00db      	lsls	r3, r3, #3
 801350e:	3369      	adds	r3, #105	@ 0x69
 8013510:	33ff      	adds	r3, #255	@ 0xff
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	18d3      	adds	r3, r2, r3
 8013516:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801351a:	7b1b      	ldrb	r3, [r3, #12]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d125      	bne.n	801356c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	2250      	movs	r2, #80	@ 0x50
 8013526:	5a9b      	ldrh	r3, [r3, r2]
 8013528:	b29b      	uxth	r3, r3
 801352a:	001a      	movs	r2, r3
 801352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	00db      	lsls	r3, r3, #3
 8013532:	18d2      	adds	r2, r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	18d3      	adds	r3, r2, r3
 801353a:	4abc      	ldr	r2, [pc, #752]	@ (801382c <PCD_EP_ISR_Handler+0x6d8>)
 801353c:	4694      	mov	ip, r2
 801353e:	4463      	add	r3, ip
 8013540:	881a      	ldrh	r2, [r3, #0]
 8013542:	2450      	movs	r4, #80	@ 0x50
 8013544:	193b      	adds	r3, r7, r4
 8013546:	0592      	lsls	r2, r2, #22
 8013548:	0d92      	lsrs	r2, r2, #22
 801354a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801354c:	193b      	adds	r3, r7, r4
 801354e:	881b      	ldrh	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d100      	bne.n	8013556 <PCD_EP_ISR_Handler+0x402>
 8013554:	e08d      	b.n	8013672 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6818      	ldr	r0, [r3, #0]
 801355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801355c:	6959      	ldr	r1, [r3, #20]
 801355e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013560:	88da      	ldrh	r2, [r3, #6]
 8013562:	193b      	adds	r3, r7, r4
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	f007 f8d6 	bl	801a716 <USB_ReadPMA>
 801356a:	e082      	b.n	8013672 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801356e:	78db      	ldrb	r3, [r3, #3]
 8013570:	2b02      	cmp	r3, #2
 8013572:	d10c      	bne.n	801358e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013574:	2350      	movs	r3, #80	@ 0x50
 8013576:	18fc      	adds	r4, r7, r3
 8013578:	234a      	movs	r3, #74	@ 0x4a
 801357a:	18fb      	adds	r3, r7, r3
 801357c:	881a      	ldrh	r2, [r3, #0]
 801357e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	0018      	movs	r0, r3
 8013584:	f000 f9ec 	bl	8013960 <HAL_PCD_EP_DB_Receive>
 8013588:	0003      	movs	r3, r0
 801358a:	8023      	strh	r3, [r4, #0]
 801358c:	e071      	b.n	8013672 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	001a      	movs	r2, r3
 8013594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013596:	781b      	ldrb	r3, [r3, #0]
 8013598:	009b      	lsls	r3, r3, #2
 801359a:	18d3      	adds	r3, r2, r3
 801359c:	881b      	ldrh	r3, [r3, #0]
 801359e:	b29a      	uxth	r2, r3
 80135a0:	2052      	movs	r0, #82	@ 0x52
 80135a2:	183b      	adds	r3, r7, r0
 80135a4:	49a2      	ldr	r1, [pc, #648]	@ (8013830 <PCD_EP_ISR_Handler+0x6dc>)
 80135a6:	400a      	ands	r2, r1
 80135a8:	801a      	strh	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	001a      	movs	r2, r3
 80135b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	18d3      	adds	r3, r2, r3
 80135b8:	183a      	adds	r2, r7, r0
 80135ba:	8812      	ldrh	r2, [r2, #0]
 80135bc:	499d      	ldr	r1, [pc, #628]	@ (8013834 <PCD_EP_ISR_Handler+0x6e0>)
 80135be:	430a      	orrs	r2, r1
 80135c0:	b292      	uxth	r2, r2
 80135c2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	001a      	movs	r2, r3
 80135ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	18d3      	adds	r3, r2, r3
 80135d2:	881b      	ldrh	r3, [r3, #0]
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	001a      	movs	r2, r3
 80135d8:	2380      	movs	r3, #128	@ 0x80
 80135da:	01db      	lsls	r3, r3, #7
 80135dc:	4013      	ands	r3, r2
 80135de:	d024      	beq.n	801362a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	2250      	movs	r2, #80	@ 0x50
 80135e6:	5a9b      	ldrh	r3, [r3, r2]
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	001a      	movs	r2, r3
 80135ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	00db      	lsls	r3, r3, #3
 80135f2:	18d2      	adds	r2, r2, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	18d3      	adds	r3, r2, r3
 80135fa:	4a8f      	ldr	r2, [pc, #572]	@ (8013838 <PCD_EP_ISR_Handler+0x6e4>)
 80135fc:	4694      	mov	ip, r2
 80135fe:	4463      	add	r3, ip
 8013600:	881a      	ldrh	r2, [r3, #0]
 8013602:	2450      	movs	r4, #80	@ 0x50
 8013604:	193b      	adds	r3, r7, r4
 8013606:	0592      	lsls	r2, r2, #22
 8013608:	0d92      	lsrs	r2, r2, #22
 801360a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801360c:	193b      	adds	r3, r7, r4
 801360e:	881b      	ldrh	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d02e      	beq.n	8013672 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6818      	ldr	r0, [r3, #0]
 8013618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801361a:	6959      	ldr	r1, [r3, #20]
 801361c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801361e:	891a      	ldrh	r2, [r3, #8]
 8013620:	193b      	adds	r3, r7, r4
 8013622:	881b      	ldrh	r3, [r3, #0]
 8013624:	f007 f877 	bl	801a716 <USB_ReadPMA>
 8013628:	e023      	b.n	8013672 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	2250      	movs	r2, #80	@ 0x50
 8013630:	5a9b      	ldrh	r3, [r3, r2]
 8013632:	b29b      	uxth	r3, r3
 8013634:	001a      	movs	r2, r3
 8013636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	00db      	lsls	r3, r3, #3
 801363c:	18d2      	adds	r2, r2, r3
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	18d3      	adds	r3, r2, r3
 8013644:	4a79      	ldr	r2, [pc, #484]	@ (801382c <PCD_EP_ISR_Handler+0x6d8>)
 8013646:	4694      	mov	ip, r2
 8013648:	4463      	add	r3, ip
 801364a:	881a      	ldrh	r2, [r3, #0]
 801364c:	2450      	movs	r4, #80	@ 0x50
 801364e:	193b      	adds	r3, r7, r4
 8013650:	0592      	lsls	r2, r2, #22
 8013652:	0d92      	lsrs	r2, r2, #22
 8013654:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013656:	193b      	adds	r3, r7, r4
 8013658:	881b      	ldrh	r3, [r3, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d009      	beq.n	8013672 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6818      	ldr	r0, [r3, #0]
 8013662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013664:	6959      	ldr	r1, [r3, #20]
 8013666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013668:	895a      	ldrh	r2, [r3, #10]
 801366a:	193b      	adds	r3, r7, r4
 801366c:	881b      	ldrh	r3, [r3, #0]
 801366e:	f007 f852 	bl	801a716 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8013672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013674:	69da      	ldr	r2, [r3, #28]
 8013676:	2150      	movs	r1, #80	@ 0x50
 8013678:	187b      	adds	r3, r7, r1
 801367a:	881b      	ldrh	r3, [r3, #0]
 801367c:	18d2      	adds	r2, r2, r3
 801367e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013680:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8013682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013684:	695a      	ldr	r2, [r3, #20]
 8013686:	187b      	adds	r3, r7, r1
 8013688:	881b      	ldrh	r3, [r3, #0]
 801368a:	18d2      	adds	r2, r2, r3
 801368c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801368e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8013690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013692:	699b      	ldr	r3, [r3, #24]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d005      	beq.n	80136a4 <PCD_EP_ISR_Handler+0x550>
 8013698:	187b      	adds	r3, r7, r1
 801369a:	881a      	ldrh	r2, [r3, #0]
 801369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801369e:	691b      	ldr	r3, [r3, #16]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d207      	bcs.n	80136b4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80136a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136a6:	781a      	ldrb	r2, [r3, #0]
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	0011      	movs	r1, r2
 80136ac:	0018      	movs	r0, r3
 80136ae:	f009 f84c 	bl	801c74a <HAL_PCD_DataOutStageCallback>
 80136b2:	e006      	b.n	80136c2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80136ba:	0011      	movs	r1, r2
 80136bc:	0018      	movs	r0, r3
 80136be:	f005 fd6f 	bl	80191a0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80136c2:	244a      	movs	r4, #74	@ 0x4a
 80136c4:	193b      	adds	r3, r7, r4
 80136c6:	881b      	ldrh	r3, [r3, #0]
 80136c8:	2280      	movs	r2, #128	@ 0x80
 80136ca:	4013      	ands	r3, r2
 80136cc:	d100      	bne.n	80136d0 <PCD_EP_ISR_Handler+0x57c>
 80136ce:	e133      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80136d0:	204d      	movs	r0, #77	@ 0x4d
 80136d2:	183b      	adds	r3, r7, r0
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	1c5a      	adds	r2, r3, #1
 80136d8:	0013      	movs	r3, r2
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	189b      	adds	r3, r3, r2
 80136de:	00db      	lsls	r3, r3, #3
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	18d3      	adds	r3, r2, r3
 80136e4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	001a      	movs	r2, r3
 80136ec:	183b      	adds	r3, r7, r0
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	18d3      	adds	r3, r2, r3
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	b29a      	uxth	r2, r3
 80136f8:	2542      	movs	r5, #66	@ 0x42
 80136fa:	197b      	adds	r3, r7, r5
 80136fc:	494f      	ldr	r1, [pc, #316]	@ (801383c <PCD_EP_ISR_Handler+0x6e8>)
 80136fe:	400a      	ands	r2, r1
 8013700:	801a      	strh	r2, [r3, #0]
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	001a      	movs	r2, r3
 8013708:	183b      	adds	r3, r7, r0
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	18d3      	adds	r3, r2, r3
 8013710:	197a      	adds	r2, r7, r5
 8013712:	8812      	ldrh	r2, [r2, #0]
 8013714:	494a      	ldr	r1, [pc, #296]	@ (8013840 <PCD_EP_ISR_Handler+0x6ec>)
 8013716:	430a      	orrs	r2, r1
 8013718:	b292      	uxth	r2, r2
 801371a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801371c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801371e:	78db      	ldrb	r3, [r3, #3]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d000      	beq.n	8013726 <PCD_EP_ISR_Handler+0x5d2>
 8013724:	e0af      	b.n	8013886 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8013726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013728:	2200      	movs	r2, #0
 801372a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801372c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801372e:	7b1b      	ldrb	r3, [r3, #12]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d100      	bne.n	8013736 <PCD_EP_ISR_Handler+0x5e2>
 8013734:	e09f      	b.n	8013876 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013736:	193b      	adds	r3, r7, r4
 8013738:	881b      	ldrh	r3, [r3, #0]
 801373a:	2240      	movs	r2, #64	@ 0x40
 801373c:	4013      	ands	r3, r2
 801373e:	d046      	beq.n	80137ce <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013742:	785b      	ldrb	r3, [r3, #1]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d125      	bne.n	8013794 <PCD_EP_ISR_Handler+0x640>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	627b      	str	r3, [r7, #36]	@ 0x24
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	2250      	movs	r2, #80	@ 0x50
 8013754:	5a9b      	ldrh	r3, [r3, r2]
 8013756:	b29b      	uxth	r3, r3
 8013758:	001a      	movs	r2, r3
 801375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801375c:	189b      	adds	r3, r3, r2
 801375e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	00da      	lsls	r2, r3, #3
 8013766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013768:	18d3      	adds	r3, r2, r3
 801376a:	4a33      	ldr	r2, [pc, #204]	@ (8013838 <PCD_EP_ISR_Handler+0x6e4>)
 801376c:	4694      	mov	ip, r2
 801376e:	4463      	add	r3, ip
 8013770:	623b      	str	r3, [r7, #32]
 8013772:	6a3b      	ldr	r3, [r7, #32]
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	b29b      	uxth	r3, r3
 8013778:	059b      	lsls	r3, r3, #22
 801377a:	0d9b      	lsrs	r3, r3, #22
 801377c:	b29a      	uxth	r2, r3
 801377e:	6a3b      	ldr	r3, [r7, #32]
 8013780:	801a      	strh	r2, [r3, #0]
 8013782:	6a3b      	ldr	r3, [r7, #32]
 8013784:	881b      	ldrh	r3, [r3, #0]
 8013786:	b29b      	uxth	r3, r3
 8013788:	4a2d      	ldr	r2, [pc, #180]	@ (8013840 <PCD_EP_ISR_Handler+0x6ec>)
 801378a:	4313      	orrs	r3, r2
 801378c:	b29a      	uxth	r2, r3
 801378e:	6a3b      	ldr	r3, [r7, #32]
 8013790:	801a      	strh	r2, [r3, #0]
 8013792:	e070      	b.n	8013876 <PCD_EP_ISR_Handler+0x722>
 8013794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013796:	785b      	ldrb	r3, [r3, #1]
 8013798:	2b01      	cmp	r3, #1
 801379a:	d16c      	bne.n	8013876 <PCD_EP_ISR_Handler+0x722>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2250      	movs	r2, #80	@ 0x50
 80137a8:	5a9b      	ldrh	r3, [r3, r2]
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	001a      	movs	r2, r3
 80137ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b0:	189b      	adds	r3, r3, r2
 80137b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80137b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137b6:	781b      	ldrb	r3, [r3, #0]
 80137b8:	00da      	lsls	r2, r3, #3
 80137ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137bc:	18d3      	adds	r3, r2, r3
 80137be:	4a1e      	ldr	r2, [pc, #120]	@ (8013838 <PCD_EP_ISR_Handler+0x6e4>)
 80137c0:	4694      	mov	ip, r2
 80137c2:	4463      	add	r3, ip
 80137c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c8:	2200      	movs	r2, #0
 80137ca:	801a      	strh	r2, [r3, #0]
 80137cc:	e053      	b.n	8013876 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137d6:	785b      	ldrb	r3, [r3, #1]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d133      	bne.n	8013844 <PCD_EP_ISR_Handler+0x6f0>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2250      	movs	r2, #80	@ 0x50
 80137e8:	5a9b      	ldrh	r3, [r3, r2]
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	001a      	movs	r2, r3
 80137ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137f0:	189b      	adds	r3, r3, r2
 80137f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80137f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	00da      	lsls	r2, r3, #3
 80137fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137fc:	18d3      	adds	r3, r2, r3
 80137fe:	4a0b      	ldr	r2, [pc, #44]	@ (801382c <PCD_EP_ISR_Handler+0x6d8>)
 8013800:	4694      	mov	ip, r2
 8013802:	4463      	add	r3, ip
 8013804:	633b      	str	r3, [r7, #48]	@ 0x30
 8013806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013808:	881b      	ldrh	r3, [r3, #0]
 801380a:	b29b      	uxth	r3, r3
 801380c:	059b      	lsls	r3, r3, #22
 801380e:	0d9b      	lsrs	r3, r3, #22
 8013810:	b29a      	uxth	r2, r3
 8013812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013814:	801a      	strh	r2, [r3, #0]
 8013816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013818:	881b      	ldrh	r3, [r3, #0]
 801381a:	b29b      	uxth	r3, r3
 801381c:	4a08      	ldr	r2, [pc, #32]	@ (8013840 <PCD_EP_ISR_Handler+0x6ec>)
 801381e:	4313      	orrs	r3, r2
 8013820:	b29a      	uxth	r2, r3
 8013822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013824:	801a      	strh	r2, [r3, #0]
 8013826:	e026      	b.n	8013876 <PCD_EP_ISR_Handler+0x722>
 8013828:	00000f8f 	.word	0x00000f8f
 801382c:	00000406 	.word	0x00000406
 8013830:	ffff8f8f 	.word	0xffff8f8f
 8013834:	ffff80c0 	.word	0xffff80c0
 8013838:	00000402 	.word	0x00000402
 801383c:	ffff8f0f 	.word	0xffff8f0f
 8013840:	ffff8000 	.word	0xffff8000
 8013844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013846:	785b      	ldrb	r3, [r3, #1]
 8013848:	2b01      	cmp	r3, #1
 801384a:	d114      	bne.n	8013876 <PCD_EP_ISR_Handler+0x722>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2250      	movs	r2, #80	@ 0x50
 8013852:	5a9b      	ldrh	r3, [r3, r2]
 8013854:	b29b      	uxth	r3, r3
 8013856:	001a      	movs	r2, r3
 8013858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801385a:	189b      	adds	r3, r3, r2
 801385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	00da      	lsls	r2, r3, #3
 8013864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013866:	18d3      	adds	r3, r2, r3
 8013868:	4a3b      	ldr	r2, [pc, #236]	@ (8013958 <PCD_EP_ISR_Handler+0x804>)
 801386a:	4694      	mov	ip, r2
 801386c:	4463      	add	r3, ip
 801386e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013872:	2200      	movs	r2, #0
 8013874:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013878:	781a      	ldrb	r2, [r3, #0]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	0011      	movs	r1, r2
 801387e:	0018      	movs	r0, r3
 8013880:	f008 ff84 	bl	801c78c <HAL_PCD_DataInStageCallback>
 8013884:	e058      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8013886:	234a      	movs	r3, #74	@ 0x4a
 8013888:	18fb      	adds	r3, r7, r3
 801388a:	881a      	ldrh	r2, [r3, #0]
 801388c:	2380      	movs	r3, #128	@ 0x80
 801388e:	005b      	lsls	r3, r3, #1
 8013890:	4013      	ands	r3, r2
 8013892:	d149      	bne.n	8013928 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	2250      	movs	r2, #80	@ 0x50
 801389a:	5a9b      	ldrh	r3, [r3, r2]
 801389c:	b29b      	uxth	r3, r3
 801389e:	001a      	movs	r2, r3
 80138a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	00db      	lsls	r3, r3, #3
 80138a6:	18d2      	adds	r2, r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	18d3      	adds	r3, r2, r3
 80138ae:	4a2b      	ldr	r2, [pc, #172]	@ (801395c <PCD_EP_ISR_Handler+0x808>)
 80138b0:	4694      	mov	ip, r2
 80138b2:	4463      	add	r3, ip
 80138b4:	881a      	ldrh	r2, [r3, #0]
 80138b6:	2140      	movs	r1, #64	@ 0x40
 80138b8:	187b      	adds	r3, r7, r1
 80138ba:	0592      	lsls	r2, r2, #22
 80138bc:	0d92      	lsrs	r2, r2, #22
 80138be:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80138c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138c2:	699a      	ldr	r2, [r3, #24]
 80138c4:	187b      	adds	r3, r7, r1
 80138c6:	881b      	ldrh	r3, [r3, #0]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d907      	bls.n	80138dc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80138cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138ce:	699a      	ldr	r2, [r3, #24]
 80138d0:	187b      	adds	r3, r7, r1
 80138d2:	881b      	ldrh	r3, [r3, #0]
 80138d4:	1ad2      	subs	r2, r2, r3
 80138d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138d8:	619a      	str	r2, [r3, #24]
 80138da:	e002      	b.n	80138e2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80138dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138de:	2200      	movs	r2, #0
 80138e0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80138e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138e4:	699b      	ldr	r3, [r3, #24]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d107      	bne.n	80138fa <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80138ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138ec:	781a      	ldrb	r2, [r3, #0]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	0011      	movs	r1, r2
 80138f2:	0018      	movs	r0, r3
 80138f4:	f008 ff4a 	bl	801c78c <HAL_PCD_DataInStageCallback>
 80138f8:	e01e      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80138fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138fc:	695a      	ldr	r2, [r3, #20]
 80138fe:	2140      	movs	r1, #64	@ 0x40
 8013900:	187b      	adds	r3, r7, r1
 8013902:	881b      	ldrh	r3, [r3, #0]
 8013904:	18d2      	adds	r2, r2, r3
 8013906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013908:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801390a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801390c:	69da      	ldr	r2, [r3, #28]
 801390e:	187b      	adds	r3, r7, r1
 8013910:	881b      	ldrh	r3, [r3, #0]
 8013912:	18d2      	adds	r2, r2, r3
 8013914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013916:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801391e:	0011      	movs	r1, r2
 8013920:	0018      	movs	r0, r3
 8013922:	f005 fc3d 	bl	80191a0 <USB_EPStartXfer>
 8013926:	e007      	b.n	8013938 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8013928:	234a      	movs	r3, #74	@ 0x4a
 801392a:	18fb      	adds	r3, r7, r3
 801392c:	881a      	ldrh	r2, [r3, #0]
 801392e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	0018      	movs	r0, r3
 8013934:	f000 f930 	bl	8013b98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2244      	movs	r2, #68	@ 0x44
 801393e:	5a9b      	ldrh	r3, [r3, r2]
 8013940:	b29b      	uxth	r3, r3
 8013942:	b21b      	sxth	r3, r3
 8013944:	2b00      	cmp	r3, #0
 8013946:	da01      	bge.n	801394c <PCD_EP_ISR_Handler+0x7f8>
 8013948:	f7ff fc0a 	bl	8013160 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801394c:	2300      	movs	r3, #0
}
 801394e:	0018      	movs	r0, r3
 8013950:	46bd      	mov	sp, r7
 8013952:	b016      	add	sp, #88	@ 0x58
 8013954:	bdb0      	pop	{r4, r5, r7, pc}
 8013956:	46c0      	nop			@ (mov r8, r8)
 8013958:	00000406 	.word	0x00000406
 801395c:	00000402 	.word	0x00000402

08013960 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013960:	b590      	push	{r4, r7, lr}
 8013962:	b089      	sub	sp, #36	@ 0x24
 8013964:	af00      	add	r7, sp, #0
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	1dbb      	adds	r3, r7, #6
 801396c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801396e:	1dbb      	adds	r3, r7, #6
 8013970:	881a      	ldrh	r2, [r3, #0]
 8013972:	2380      	movs	r3, #128	@ 0x80
 8013974:	01db      	lsls	r3, r3, #7
 8013976:	4013      	ands	r3, r2
 8013978:	d100      	bne.n	801397c <HAL_PCD_EP_DB_Receive+0x1c>
 801397a:	e07d      	b.n	8013a78 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2250      	movs	r2, #80	@ 0x50
 8013982:	5a9b      	ldrh	r3, [r3, r2]
 8013984:	b29b      	uxth	r3, r3
 8013986:	001a      	movs	r2, r3
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	00db      	lsls	r3, r3, #3
 801398e:	18d2      	adds	r2, r2, r3
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	18d3      	adds	r3, r2, r3
 8013996:	4a7a      	ldr	r2, [pc, #488]	@ (8013b80 <HAL_PCD_EP_DB_Receive+0x220>)
 8013998:	4694      	mov	ip, r2
 801399a:	4463      	add	r3, ip
 801399c:	881a      	ldrh	r2, [r3, #0]
 801399e:	211a      	movs	r1, #26
 80139a0:	187b      	adds	r3, r7, r1
 80139a2:	0592      	lsls	r2, r2, #22
 80139a4:	0d92      	lsrs	r2, r2, #22
 80139a6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	699a      	ldr	r2, [r3, #24]
 80139ac:	187b      	adds	r3, r7, r1
 80139ae:	881b      	ldrh	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d307      	bcc.n	80139c4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	699a      	ldr	r2, [r3, #24]
 80139b8:	187b      	adds	r3, r7, r1
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	1ad2      	subs	r2, r2, r3
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	619a      	str	r2, [r3, #24]
 80139c2:	e002      	b.n	80139ca <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	2200      	movs	r2, #0
 80139c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	699b      	ldr	r3, [r3, #24]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d121      	bne.n	8013a16 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	001a      	movs	r2, r3
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	18d3      	adds	r3, r2, r3
 80139e0:	881b      	ldrh	r3, [r3, #0]
 80139e2:	b29a      	uxth	r2, r3
 80139e4:	2018      	movs	r0, #24
 80139e6:	183b      	adds	r3, r7, r0
 80139e8:	4966      	ldr	r1, [pc, #408]	@ (8013b84 <HAL_PCD_EP_DB_Receive+0x224>)
 80139ea:	400a      	ands	r2, r1
 80139ec:	801a      	strh	r2, [r3, #0]
 80139ee:	183b      	adds	r3, r7, r0
 80139f0:	183a      	adds	r2, r7, r0
 80139f2:	8812      	ldrh	r2, [r2, #0]
 80139f4:	2180      	movs	r1, #128	@ 0x80
 80139f6:	0189      	lsls	r1, r1, #6
 80139f8:	404a      	eors	r2, r1
 80139fa:	801a      	strh	r2, [r3, #0]
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	001a      	movs	r2, r3
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	18d3      	adds	r3, r2, r3
 8013a0a:	183a      	adds	r2, r7, r0
 8013a0c:	8812      	ldrh	r2, [r2, #0]
 8013a0e:	495e      	ldr	r1, [pc, #376]	@ (8013b88 <HAL_PCD_EP_DB_Receive+0x228>)
 8013a10:	430a      	orrs	r2, r1
 8013a12:	b292      	uxth	r2, r2
 8013a14:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013a16:	1dbb      	adds	r3, r7, #6
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	2240      	movs	r2, #64	@ 0x40
 8013a1c:	4013      	ands	r3, r2
 8013a1e:	d01a      	beq.n	8013a56 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	001a      	movs	r2, r3
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	009b      	lsls	r3, r3, #2
 8013a2c:	18d3      	adds	r3, r2, r3
 8013a2e:	881b      	ldrh	r3, [r3, #0]
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	2016      	movs	r0, #22
 8013a34:	183b      	adds	r3, r7, r0
 8013a36:	4955      	ldr	r1, [pc, #340]	@ (8013b8c <HAL_PCD_EP_DB_Receive+0x22c>)
 8013a38:	400a      	ands	r2, r1
 8013a3a:	801a      	strh	r2, [r3, #0]
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	001a      	movs	r2, r3
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	18d3      	adds	r3, r2, r3
 8013a4a:	183a      	adds	r2, r7, r0
 8013a4c:	8812      	ldrh	r2, [r2, #0]
 8013a4e:	4950      	ldr	r1, [pc, #320]	@ (8013b90 <HAL_PCD_EP_DB_Receive+0x230>)
 8013a50:	430a      	orrs	r2, r1
 8013a52:	b292      	uxth	r2, r2
 8013a54:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013a56:	241a      	movs	r4, #26
 8013a58:	193b      	adds	r3, r7, r4
 8013a5a:	881b      	ldrh	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d100      	bne.n	8013a62 <HAL_PCD_EP_DB_Receive+0x102>
 8013a60:	e086      	b.n	8013b70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	6818      	ldr	r0, [r3, #0]
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	6959      	ldr	r1, [r3, #20]
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	891a      	ldrh	r2, [r3, #8]
 8013a6e:	193b      	adds	r3, r7, r4
 8013a70:	881b      	ldrh	r3, [r3, #0]
 8013a72:	f006 fe50 	bl	801a716 <USB_ReadPMA>
 8013a76:	e07b      	b.n	8013b70 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2250      	movs	r2, #80	@ 0x50
 8013a7e:	5a9b      	ldrh	r3, [r3, r2]
 8013a80:	b29b      	uxth	r3, r3
 8013a82:	001a      	movs	r2, r3
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	00db      	lsls	r3, r3, #3
 8013a8a:	18d2      	adds	r2, r2, r3
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	18d3      	adds	r3, r2, r3
 8013a92:	4a40      	ldr	r2, [pc, #256]	@ (8013b94 <HAL_PCD_EP_DB_Receive+0x234>)
 8013a94:	4694      	mov	ip, r2
 8013a96:	4463      	add	r3, ip
 8013a98:	881a      	ldrh	r2, [r3, #0]
 8013a9a:	211a      	movs	r1, #26
 8013a9c:	187b      	adds	r3, r7, r1
 8013a9e:	0592      	lsls	r2, r2, #22
 8013aa0:	0d92      	lsrs	r2, r2, #22
 8013aa2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	699a      	ldr	r2, [r3, #24]
 8013aa8:	187b      	adds	r3, r7, r1
 8013aaa:	881b      	ldrh	r3, [r3, #0]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d307      	bcc.n	8013ac0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	699a      	ldr	r2, [r3, #24]
 8013ab4:	187b      	adds	r3, r7, r1
 8013ab6:	881b      	ldrh	r3, [r3, #0]
 8013ab8:	1ad2      	subs	r2, r2, r3
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	619a      	str	r2, [r3, #24]
 8013abe:	e002      	b.n	8013ac6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	699b      	ldr	r3, [r3, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d121      	bne.n	8013b12 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	001a      	movs	r2, r3
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	009b      	lsls	r3, r3, #2
 8013ada:	18d3      	adds	r3, r2, r3
 8013adc:	881b      	ldrh	r3, [r3, #0]
 8013ade:	b29a      	uxth	r2, r3
 8013ae0:	201e      	movs	r0, #30
 8013ae2:	183b      	adds	r3, r7, r0
 8013ae4:	4927      	ldr	r1, [pc, #156]	@ (8013b84 <HAL_PCD_EP_DB_Receive+0x224>)
 8013ae6:	400a      	ands	r2, r1
 8013ae8:	801a      	strh	r2, [r3, #0]
 8013aea:	183b      	adds	r3, r7, r0
 8013aec:	183a      	adds	r2, r7, r0
 8013aee:	8812      	ldrh	r2, [r2, #0]
 8013af0:	2180      	movs	r1, #128	@ 0x80
 8013af2:	0189      	lsls	r1, r1, #6
 8013af4:	404a      	eors	r2, r1
 8013af6:	801a      	strh	r2, [r3, #0]
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	001a      	movs	r2, r3
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	781b      	ldrb	r3, [r3, #0]
 8013b02:	009b      	lsls	r3, r3, #2
 8013b04:	18d3      	adds	r3, r2, r3
 8013b06:	183a      	adds	r2, r7, r0
 8013b08:	8812      	ldrh	r2, [r2, #0]
 8013b0a:	491f      	ldr	r1, [pc, #124]	@ (8013b88 <HAL_PCD_EP_DB_Receive+0x228>)
 8013b0c:	430a      	orrs	r2, r1
 8013b0e:	b292      	uxth	r2, r2
 8013b10:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8013b12:	1dbb      	adds	r3, r7, #6
 8013b14:	881b      	ldrh	r3, [r3, #0]
 8013b16:	2240      	movs	r2, #64	@ 0x40
 8013b18:	4013      	ands	r3, r2
 8013b1a:	d11a      	bne.n	8013b52 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	001a      	movs	r2, r3
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	18d3      	adds	r3, r2, r3
 8013b2a:	881b      	ldrh	r3, [r3, #0]
 8013b2c:	b29a      	uxth	r2, r3
 8013b2e:	201c      	movs	r0, #28
 8013b30:	183b      	adds	r3, r7, r0
 8013b32:	4916      	ldr	r1, [pc, #88]	@ (8013b8c <HAL_PCD_EP_DB_Receive+0x22c>)
 8013b34:	400a      	ands	r2, r1
 8013b36:	801a      	strh	r2, [r3, #0]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	001a      	movs	r2, r3
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	18d3      	adds	r3, r2, r3
 8013b46:	183a      	adds	r2, r7, r0
 8013b48:	8812      	ldrh	r2, [r2, #0]
 8013b4a:	4911      	ldr	r1, [pc, #68]	@ (8013b90 <HAL_PCD_EP_DB_Receive+0x230>)
 8013b4c:	430a      	orrs	r2, r1
 8013b4e:	b292      	uxth	r2, r2
 8013b50:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013b52:	241a      	movs	r4, #26
 8013b54:	193b      	adds	r3, r7, r4
 8013b56:	881b      	ldrh	r3, [r3, #0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d009      	beq.n	8013b70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	6818      	ldr	r0, [r3, #0]
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	6959      	ldr	r1, [r3, #20]
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	895a      	ldrh	r2, [r3, #10]
 8013b68:	193b      	adds	r3, r7, r4
 8013b6a:	881b      	ldrh	r3, [r3, #0]
 8013b6c:	f006 fdd3 	bl	801a716 <USB_ReadPMA>
    }
  }

  return count;
 8013b70:	231a      	movs	r3, #26
 8013b72:	18fb      	adds	r3, r7, r3
 8013b74:	881b      	ldrh	r3, [r3, #0]
}
 8013b76:	0018      	movs	r0, r3
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	b009      	add	sp, #36	@ 0x24
 8013b7c:	bd90      	pop	{r4, r7, pc}
 8013b7e:	46c0      	nop			@ (mov r8, r8)
 8013b80:	00000402 	.word	0x00000402
 8013b84:	ffffbf8f 	.word	0xffffbf8f
 8013b88:	ffff8080 	.word	0xffff8080
 8013b8c:	ffff8f8f 	.word	0xffff8f8f
 8013b90:	ffff80c0 	.word	0xffff80c0
 8013b94:	00000406 	.word	0x00000406

08013b98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b0a4      	sub	sp, #144	@ 0x90
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	1dbb      	adds	r3, r7, #6
 8013ba4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013ba6:	1dbb      	adds	r3, r7, #6
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	2240      	movs	r2, #64	@ 0x40
 8013bac:	4013      	ands	r3, r2
 8013bae:	d100      	bne.n	8013bb2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8013bb0:	e1e4      	b.n	8013f7c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2250      	movs	r2, #80	@ 0x50
 8013bb8:	5a9b      	ldrh	r3, [r3, r2]
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	001a      	movs	r2, r3
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	00db      	lsls	r3, r3, #3
 8013bc4:	18d2      	adds	r2, r2, r3
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	18d3      	adds	r3, r2, r3
 8013bcc:	4ad0      	ldr	r2, [pc, #832]	@ (8013f10 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013bce:	4694      	mov	ip, r2
 8013bd0:	4463      	add	r3, ip
 8013bd2:	881a      	ldrh	r2, [r3, #0]
 8013bd4:	2186      	movs	r1, #134	@ 0x86
 8013bd6:	187b      	adds	r3, r7, r1
 8013bd8:	0592      	lsls	r2, r2, #22
 8013bda:	0d92      	lsrs	r2, r2, #22
 8013bdc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	699a      	ldr	r2, [r3, #24]
 8013be2:	187b      	adds	r3, r7, r1
 8013be4:	881b      	ldrh	r3, [r3, #0]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d907      	bls.n	8013bfa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	699a      	ldr	r2, [r3, #24]
 8013bee:	187b      	adds	r3, r7, r1
 8013bf0:	881b      	ldrh	r3, [r3, #0]
 8013bf2:	1ad2      	subs	r2, r2, r3
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	619a      	str	r2, [r3, #24]
 8013bf8:	e002      	b.n	8013c00 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	699b      	ldr	r3, [r3, #24]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d000      	beq.n	8013c0a <HAL_PCD_EP_DB_Transmit+0x72>
 8013c08:	e0b5      	b.n	8013d76 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	785b      	ldrb	r3, [r3, #1]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d125      	bne.n	8013c5e <HAL_PCD_EP_DB_Transmit+0xc6>
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2250      	movs	r2, #80	@ 0x50
 8013c1e:	5a9b      	ldrh	r3, [r3, r2]
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	001a      	movs	r2, r3
 8013c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c26:	189b      	adds	r3, r3, r2
 8013c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	00da      	lsls	r2, r3, #3
 8013c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c32:	18d3      	adds	r3, r2, r3
 8013c34:	4ab6      	ldr	r2, [pc, #728]	@ (8013f10 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013c36:	4694      	mov	ip, r2
 8013c38:	4463      	add	r3, ip
 8013c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c3e:	881b      	ldrh	r3, [r3, #0]
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	059b      	lsls	r3, r3, #22
 8013c44:	0d9b      	lsrs	r3, r3, #22
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c4a:	801a      	strh	r2, [r3, #0]
 8013c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	4ab0      	ldr	r2, [pc, #704]	@ (8013f14 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013c54:	4313      	orrs	r3, r2
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c5a:	801a      	strh	r2, [r3, #0]
 8013c5c:	e01b      	b.n	8013c96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	785b      	ldrb	r3, [r3, #1]
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d117      	bne.n	8013c96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2250      	movs	r2, #80	@ 0x50
 8013c72:	5a9b      	ldrh	r3, [r3, r2]
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	001a      	movs	r2, r3
 8013c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c7a:	189b      	adds	r3, r3, r2
 8013c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	781b      	ldrb	r3, [r3, #0]
 8013c82:	00da      	lsls	r2, r3, #3
 8013c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c86:	18d3      	adds	r3, r2, r3
 8013c88:	4aa1      	ldr	r2, [pc, #644]	@ (8013f10 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013c8a:	4694      	mov	ip, r2
 8013c8c:	4463      	add	r3, ip
 8013c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c92:	2200      	movs	r2, #0
 8013c94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	785b      	ldrb	r3, [r3, #1]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d125      	bne.n	8013cf0 <HAL_PCD_EP_DB_Transmit+0x158>
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	61fb      	str	r3, [r7, #28]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2250      	movs	r2, #80	@ 0x50
 8013cb0:	5a9b      	ldrh	r3, [r3, r2]
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	001a      	movs	r2, r3
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	189b      	adds	r3, r3, r2
 8013cba:	61fb      	str	r3, [r7, #28]
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	00da      	lsls	r2, r3, #3
 8013cc2:	69fb      	ldr	r3, [r7, #28]
 8013cc4:	18d3      	adds	r3, r2, r3
 8013cc6:	4a94      	ldr	r2, [pc, #592]	@ (8013f18 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013cc8:	4694      	mov	ip, r2
 8013cca:	4463      	add	r3, ip
 8013ccc:	61bb      	str	r3, [r7, #24]
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	881b      	ldrh	r3, [r3, #0]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	059b      	lsls	r3, r3, #22
 8013cd6:	0d9b      	lsrs	r3, r3, #22
 8013cd8:	b29a      	uxth	r2, r3
 8013cda:	69bb      	ldr	r3, [r7, #24]
 8013cdc:	801a      	strh	r2, [r3, #0]
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	881b      	ldrh	r3, [r3, #0]
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	4a8b      	ldr	r2, [pc, #556]	@ (8013f14 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013ce6:	4313      	orrs	r3, r2
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	69bb      	ldr	r3, [r7, #24]
 8013cec:	801a      	strh	r2, [r3, #0]
 8013cee:	e018      	b.n	8013d22 <HAL_PCD_EP_DB_Transmit+0x18a>
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	785b      	ldrb	r3, [r3, #1]
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d114      	bne.n	8013d22 <HAL_PCD_EP_DB_Transmit+0x18a>
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2250      	movs	r2, #80	@ 0x50
 8013cfe:	5a9b      	ldrh	r3, [r3, r2]
 8013d00:	b29b      	uxth	r3, r3
 8013d02:	001a      	movs	r2, r3
 8013d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d06:	189b      	adds	r3, r3, r2
 8013d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	00da      	lsls	r2, r3, #3
 8013d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d12:	18d3      	adds	r3, r2, r3
 8013d14:	4a80      	ldr	r2, [pc, #512]	@ (8013f18 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013d16:	4694      	mov	ip, r2
 8013d18:	4463      	add	r3, ip
 8013d1a:	623b      	str	r3, [r7, #32]
 8013d1c:	6a3b      	ldr	r3, [r7, #32]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	781a      	ldrb	r2, [r3, #0]
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	0011      	movs	r1, r2
 8013d2a:	0018      	movs	r0, r3
 8013d2c:	f008 fd2e 	bl	801c78c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013d30:	1dbb      	adds	r3, r7, #6
 8013d32:	881a      	ldrh	r2, [r3, #0]
 8013d34:	2380      	movs	r3, #128	@ 0x80
 8013d36:	01db      	lsls	r3, r3, #7
 8013d38:	4013      	ands	r3, r2
 8013d3a:	d100      	bne.n	8013d3e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013d3c:	e309      	b.n	8014352 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	001a      	movs	r2, r3
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	18d3      	adds	r3, r2, r3
 8013d4c:	881b      	ldrh	r3, [r3, #0]
 8013d4e:	b29a      	uxth	r2, r3
 8013d50:	2016      	movs	r0, #22
 8013d52:	183b      	adds	r3, r7, r0
 8013d54:	4971      	ldr	r1, [pc, #452]	@ (8013f1c <HAL_PCD_EP_DB_Transmit+0x384>)
 8013d56:	400a      	ands	r2, r1
 8013d58:	801a      	strh	r2, [r3, #0]
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	001a      	movs	r2, r3
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	009b      	lsls	r3, r3, #2
 8013d66:	18d3      	adds	r3, r2, r3
 8013d68:	183a      	adds	r2, r7, r0
 8013d6a:	8812      	ldrh	r2, [r2, #0]
 8013d6c:	496c      	ldr	r1, [pc, #432]	@ (8013f20 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013d6e:	430a      	orrs	r2, r1
 8013d70:	b292      	uxth	r2, r2
 8013d72:	801a      	strh	r2, [r3, #0]
 8013d74:	e2ed      	b.n	8014352 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013d76:	1dbb      	adds	r3, r7, #6
 8013d78:	881a      	ldrh	r2, [r3, #0]
 8013d7a:	2380      	movs	r3, #128	@ 0x80
 8013d7c:	01db      	lsls	r3, r3, #7
 8013d7e:	4013      	ands	r3, r2
 8013d80:	d01a      	beq.n	8013db8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	001a      	movs	r2, r3
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	18d3      	adds	r3, r2, r3
 8013d90:	881b      	ldrh	r3, [r3, #0]
 8013d92:	b29a      	uxth	r2, r3
 8013d94:	208a      	movs	r0, #138	@ 0x8a
 8013d96:	183b      	adds	r3, r7, r0
 8013d98:	4960      	ldr	r1, [pc, #384]	@ (8013f1c <HAL_PCD_EP_DB_Transmit+0x384>)
 8013d9a:	400a      	ands	r2, r1
 8013d9c:	801a      	strh	r2, [r3, #0]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	001a      	movs	r2, r3
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	18d3      	adds	r3, r2, r3
 8013dac:	183a      	adds	r2, r7, r0
 8013dae:	8812      	ldrh	r2, [r2, #0]
 8013db0:	495b      	ldr	r1, [pc, #364]	@ (8013f20 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013db2:	430a      	orrs	r2, r1
 8013db4:	b292      	uxth	r2, r2
 8013db6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	2224      	movs	r2, #36	@ 0x24
 8013dbc:	5c9b      	ldrb	r3, [r3, r2]
 8013dbe:	2b01      	cmp	r3, #1
 8013dc0:	d000      	beq.n	8013dc4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8013dc2:	e2c6      	b.n	8014352 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	695a      	ldr	r2, [r3, #20]
 8013dc8:	2186      	movs	r1, #134	@ 0x86
 8013dca:	187b      	adds	r3, r7, r1
 8013dcc:	881b      	ldrh	r3, [r3, #0]
 8013dce:	18d2      	adds	r2, r2, r3
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	69da      	ldr	r2, [r3, #28]
 8013dd8:	187b      	adds	r3, r7, r1
 8013dda:	881b      	ldrh	r3, [r3, #0]
 8013ddc:	18d2      	adds	r2, r2, r3
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	6a1a      	ldr	r2, [r3, #32]
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	691b      	ldr	r3, [r3, #16]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d30c      	bcc.n	8013e08 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	691b      	ldr	r3, [r3, #16]
 8013df2:	218c      	movs	r1, #140	@ 0x8c
 8013df4:	187a      	adds	r2, r7, r1
 8013df6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	6a1a      	ldr	r2, [r3, #32]
 8013dfc:	187b      	adds	r3, r7, r1
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	1ad2      	subs	r2, r2, r3
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	621a      	str	r2, [r3, #32]
 8013e06:	e01a      	b.n	8013e3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	6a1b      	ldr	r3, [r3, #32]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d10a      	bne.n	8013e26 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8013e10:	2386      	movs	r3, #134	@ 0x86
 8013e12:	18fb      	adds	r3, r7, r3
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	228c      	movs	r2, #140	@ 0x8c
 8013e18:	18ba      	adds	r2, r7, r2
 8013e1a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	2224      	movs	r2, #36	@ 0x24
 8013e20:	2100      	movs	r1, #0
 8013e22:	5499      	strb	r1, [r3, r2]
 8013e24:	e00b      	b.n	8013e3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	2224      	movs	r2, #36	@ 0x24
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	6a1b      	ldr	r3, [r3, #32]
 8013e32:	228c      	movs	r2, #140	@ 0x8c
 8013e34:	18ba      	adds	r2, r7, r2
 8013e36:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	785b      	ldrb	r3, [r3, #1]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d000      	beq.n	8013e48 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013e46:	e06d      	b.n	8013f24 <HAL_PCD_EP_DB_Transmit+0x38c>
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	2250      	movs	r2, #80	@ 0x50
 8013e54:	5a9b      	ldrh	r3, [r3, r2]
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	001a      	movs	r2, r3
 8013e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e5c:	189b      	adds	r3, r3, r2
 8013e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	00da      	lsls	r2, r3, #3
 8013e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e68:	18d3      	adds	r3, r2, r3
 8013e6a:	4a29      	ldr	r2, [pc, #164]	@ (8013f10 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013e6c:	4694      	mov	ip, r2
 8013e6e:	4463      	add	r3, ip
 8013e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e74:	881b      	ldrh	r3, [r3, #0]
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	059b      	lsls	r3, r3, #22
 8013e7a:	0d9b      	lsrs	r3, r3, #22
 8013e7c:	b29a      	uxth	r2, r3
 8013e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e80:	801a      	strh	r2, [r3, #0]
 8013e82:	228c      	movs	r2, #140	@ 0x8c
 8013e84:	18bb      	adds	r3, r7, r2
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	2b3e      	cmp	r3, #62	@ 0x3e
 8013e8a:	d91a      	bls.n	8013ec2 <HAL_PCD_EP_DB_Transmit+0x32a>
 8013e8c:	18bb      	adds	r3, r7, r2
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	095b      	lsrs	r3, r3, #5
 8013e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e94:	18bb      	adds	r3, r7, r2
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	221f      	movs	r2, #31
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	d102      	bne.n	8013ea4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8013e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013ea0:	3b01      	subs	r3, #1
 8013ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea6:	881b      	ldrh	r3, [r3, #0]
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	029b      	lsls	r3, r3, #10
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	4313      	orrs	r3, r2
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	4a17      	ldr	r2, [pc, #92]	@ (8013f14 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ebe:	801a      	strh	r2, [r3, #0]
 8013ec0:	e04f      	b.n	8013f62 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013ec2:	238c      	movs	r3, #140	@ 0x8c
 8013ec4:	18fb      	adds	r3, r7, r3
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d108      	bne.n	8013ede <HAL_PCD_EP_DB_Transmit+0x346>
 8013ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ece:	881b      	ldrh	r3, [r3, #0]
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	4a10      	ldr	r2, [pc, #64]	@ (8013f14 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	b29a      	uxth	r2, r3
 8013ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eda:	801a      	strh	r2, [r3, #0]
 8013edc:	e041      	b.n	8013f62 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013ede:	228c      	movs	r2, #140	@ 0x8c
 8013ee0:	18bb      	adds	r3, r7, r2
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	085b      	lsrs	r3, r3, #1
 8013ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ee8:	18bb      	adds	r3, r7, r2
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2201      	movs	r2, #1
 8013eee:	4013      	ands	r3, r2
 8013ef0:	d002      	beq.n	8013ef8 <HAL_PCD_EP_DB_Transmit+0x360>
 8013ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013efa:	881b      	ldrh	r3, [r3, #0]
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	029b      	lsls	r3, r3, #10
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	4313      	orrs	r3, r2
 8013f08:	b29a      	uxth	r2, r3
 8013f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f0c:	801a      	strh	r2, [r3, #0]
 8013f0e:	e028      	b.n	8013f62 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013f10:	00000402 	.word	0x00000402
 8013f14:	ffff8000 	.word	0xffff8000
 8013f18:	00000406 	.word	0x00000406
 8013f1c:	ffff8f8f 	.word	0xffff8f8f
 8013f20:	ffffc080 	.word	0xffffc080
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	785b      	ldrb	r3, [r3, #1]
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d11a      	bne.n	8013f62 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2250      	movs	r2, #80	@ 0x50
 8013f38:	5a9b      	ldrh	r3, [r3, r2]
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	001a      	movs	r2, r3
 8013f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f40:	189b      	adds	r3, r3, r2
 8013f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	00da      	lsls	r2, r3, #3
 8013f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f4c:	18d3      	adds	r3, r2, r3
 8013f4e:	4adb      	ldr	r2, [pc, #876]	@ (80142bc <HAL_PCD_EP_DB_Transmit+0x724>)
 8013f50:	4694      	mov	ip, r2
 8013f52:	4463      	add	r3, ip
 8013f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8013f56:	238c      	movs	r3, #140	@ 0x8c
 8013f58:	18fb      	adds	r3, r7, r3
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	b29a      	uxth	r2, r3
 8013f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f60:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	6818      	ldr	r0, [r3, #0]
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	6959      	ldr	r1, [r3, #20]
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	891a      	ldrh	r2, [r3, #8]
 8013f6e:	238c      	movs	r3, #140	@ 0x8c
 8013f70:	18fb      	adds	r3, r7, r3
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	f006 fb85 	bl	801a684 <USB_WritePMA>
 8013f7a:	e1ea      	b.n	8014352 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2250      	movs	r2, #80	@ 0x50
 8013f82:	5a9b      	ldrh	r3, [r3, r2]
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	001a      	movs	r2, r3
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	781b      	ldrb	r3, [r3, #0]
 8013f8c:	00db      	lsls	r3, r3, #3
 8013f8e:	18d2      	adds	r2, r2, r3
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	18d3      	adds	r3, r2, r3
 8013f96:	4aca      	ldr	r2, [pc, #808]	@ (80142c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013f98:	4694      	mov	ip, r2
 8013f9a:	4463      	add	r3, ip
 8013f9c:	881a      	ldrh	r2, [r3, #0]
 8013f9e:	2186      	movs	r1, #134	@ 0x86
 8013fa0:	187b      	adds	r3, r7, r1
 8013fa2:	0592      	lsls	r2, r2, #22
 8013fa4:	0d92      	lsrs	r2, r2, #22
 8013fa6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	699a      	ldr	r2, [r3, #24]
 8013fac:	187b      	adds	r3, r7, r1
 8013fae:	881b      	ldrh	r3, [r3, #0]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d307      	bcc.n	8013fc4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	699a      	ldr	r2, [r3, #24]
 8013fb8:	187b      	adds	r3, r7, r1
 8013fba:	881b      	ldrh	r3, [r3, #0]
 8013fbc:	1ad2      	subs	r2, r2, r3
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	619a      	str	r2, [r3, #24]
 8013fc2:	e002      	b.n	8013fca <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	699b      	ldr	r3, [r3, #24]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d000      	beq.n	8013fd4 <HAL_PCD_EP_DB_Transmit+0x43c>
 8013fd2:	e0bb      	b.n	801414c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	785b      	ldrb	r3, [r3, #1]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d125      	bne.n	8014028 <HAL_PCD_EP_DB_Transmit+0x490>
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2250      	movs	r2, #80	@ 0x50
 8013fe8:	5a9b      	ldrh	r3, [r3, r2]
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	001a      	movs	r2, r3
 8013fee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ff0:	189b      	adds	r3, r3, r2
 8013ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	00da      	lsls	r2, r3, #3
 8013ffa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ffc:	18d3      	adds	r3, r2, r3
 8013ffe:	4aaf      	ldr	r2, [pc, #700]	@ (80142bc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014000:	4694      	mov	ip, r2
 8014002:	4463      	add	r3, ip
 8014004:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014008:	881b      	ldrh	r3, [r3, #0]
 801400a:	b29b      	uxth	r3, r3
 801400c:	059b      	lsls	r3, r3, #22
 801400e:	0d9b      	lsrs	r3, r3, #22
 8014010:	b29a      	uxth	r2, r3
 8014012:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014014:	801a      	strh	r2, [r3, #0]
 8014016:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014018:	881b      	ldrh	r3, [r3, #0]
 801401a:	b29b      	uxth	r3, r3
 801401c:	4aa9      	ldr	r2, [pc, #676]	@ (80142c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801401e:	4313      	orrs	r3, r2
 8014020:	b29a      	uxth	r2, r3
 8014022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014024:	801a      	strh	r2, [r3, #0]
 8014026:	e01b      	b.n	8014060 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	785b      	ldrb	r3, [r3, #1]
 801402c:	2b01      	cmp	r3, #1
 801402e:	d117      	bne.n	8014060 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	667b      	str	r3, [r7, #100]	@ 0x64
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2250      	movs	r2, #80	@ 0x50
 801403c:	5a9b      	ldrh	r3, [r3, r2]
 801403e:	b29b      	uxth	r3, r3
 8014040:	001a      	movs	r2, r3
 8014042:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014044:	189b      	adds	r3, r3, r2
 8014046:	667b      	str	r3, [r7, #100]	@ 0x64
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	00da      	lsls	r2, r3, #3
 801404e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014050:	18d3      	adds	r3, r2, r3
 8014052:	4a9a      	ldr	r2, [pc, #616]	@ (80142bc <HAL_PCD_EP_DB_Transmit+0x724>)
 8014054:	4694      	mov	ip, r2
 8014056:	4463      	add	r3, ip
 8014058:	663b      	str	r3, [r7, #96]	@ 0x60
 801405a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801405c:	2200      	movs	r2, #0
 801405e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	677b      	str	r3, [r7, #116]	@ 0x74
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	785b      	ldrb	r3, [r3, #1]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d12b      	bne.n	80140c6 <HAL_PCD_EP_DB_Transmit+0x52e>
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	2250      	movs	r2, #80	@ 0x50
 801407a:	5a9b      	ldrh	r3, [r3, r2]
 801407c:	b29b      	uxth	r3, r3
 801407e:	001a      	movs	r2, r3
 8014080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014082:	189b      	adds	r3, r3, r2
 8014084:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	781b      	ldrb	r3, [r3, #0]
 801408a:	00da      	lsls	r2, r3, #3
 801408c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801408e:	18d3      	adds	r3, r2, r3
 8014090:	4a8b      	ldr	r2, [pc, #556]	@ (80142c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014092:	4694      	mov	ip, r2
 8014094:	4463      	add	r3, ip
 8014096:	2180      	movs	r1, #128	@ 0x80
 8014098:	187a      	adds	r2, r7, r1
 801409a:	6013      	str	r3, [r2, #0]
 801409c:	187b      	adds	r3, r7, r1
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	881b      	ldrh	r3, [r3, #0]
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	059b      	lsls	r3, r3, #22
 80140a6:	0d9b      	lsrs	r3, r3, #22
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	187b      	adds	r3, r7, r1
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	801a      	strh	r2, [r3, #0]
 80140b0:	187b      	adds	r3, r7, r1
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	881b      	ldrh	r3, [r3, #0]
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	4a82      	ldr	r2, [pc, #520]	@ (80142c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80140ba:	4313      	orrs	r3, r2
 80140bc:	b29a      	uxth	r2, r3
 80140be:	187b      	adds	r3, r7, r1
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	801a      	strh	r2, [r3, #0]
 80140c4:	e018      	b.n	80140f8 <HAL_PCD_EP_DB_Transmit+0x560>
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	785b      	ldrb	r3, [r3, #1]
 80140ca:	2b01      	cmp	r3, #1
 80140cc:	d114      	bne.n	80140f8 <HAL_PCD_EP_DB_Transmit+0x560>
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	2250      	movs	r2, #80	@ 0x50
 80140d4:	5a9b      	ldrh	r3, [r3, r2]
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	001a      	movs	r2, r3
 80140da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80140dc:	189b      	adds	r3, r3, r2
 80140de:	677b      	str	r3, [r7, #116]	@ 0x74
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	00da      	lsls	r2, r3, #3
 80140e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80140e8:	18d3      	adds	r3, r2, r3
 80140ea:	4a75      	ldr	r2, [pc, #468]	@ (80142c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80140ec:	4694      	mov	ip, r2
 80140ee:	4463      	add	r3, ip
 80140f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80140f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80140f4:	2200      	movs	r2, #0
 80140f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	781a      	ldrb	r2, [r3, #0]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	0011      	movs	r1, r2
 8014100:	0018      	movs	r0, r3
 8014102:	f008 fb43 	bl	801c78c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014106:	1dbb      	adds	r3, r7, #6
 8014108:	881a      	ldrh	r2, [r3, #0]
 801410a:	2380      	movs	r3, #128	@ 0x80
 801410c:	01db      	lsls	r3, r3, #7
 801410e:	4013      	ands	r3, r2
 8014110:	d000      	beq.n	8014114 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014112:	e11e      	b.n	8014352 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	001a      	movs	r2, r3
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	009b      	lsls	r3, r3, #2
 8014120:	18d3      	adds	r3, r2, r3
 8014122:	881b      	ldrh	r3, [r3, #0]
 8014124:	b29a      	uxth	r2, r3
 8014126:	2088      	movs	r0, #136	@ 0x88
 8014128:	183b      	adds	r3, r7, r0
 801412a:	4967      	ldr	r1, [pc, #412]	@ (80142c8 <HAL_PCD_EP_DB_Transmit+0x730>)
 801412c:	400a      	ands	r2, r1
 801412e:	801a      	strh	r2, [r3, #0]
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	001a      	movs	r2, r3
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	781b      	ldrb	r3, [r3, #0]
 801413a:	009b      	lsls	r3, r3, #2
 801413c:	18d3      	adds	r3, r2, r3
 801413e:	183a      	adds	r2, r7, r0
 8014140:	8812      	ldrh	r2, [r2, #0]
 8014142:	4962      	ldr	r1, [pc, #392]	@ (80142cc <HAL_PCD_EP_DB_Transmit+0x734>)
 8014144:	430a      	orrs	r2, r1
 8014146:	b292      	uxth	r2, r2
 8014148:	801a      	strh	r2, [r3, #0]
 801414a:	e102      	b.n	8014352 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801414c:	1dbb      	adds	r3, r7, #6
 801414e:	881a      	ldrh	r2, [r3, #0]
 8014150:	2380      	movs	r3, #128	@ 0x80
 8014152:	01db      	lsls	r3, r3, #7
 8014154:	4013      	ands	r3, r2
 8014156:	d11a      	bne.n	801418e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	001a      	movs	r2, r3
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	18d3      	adds	r3, r2, r3
 8014166:	881b      	ldrh	r3, [r3, #0]
 8014168:	b29a      	uxth	r2, r3
 801416a:	204e      	movs	r0, #78	@ 0x4e
 801416c:	183b      	adds	r3, r7, r0
 801416e:	4956      	ldr	r1, [pc, #344]	@ (80142c8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014170:	400a      	ands	r2, r1
 8014172:	801a      	strh	r2, [r3, #0]
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	001a      	movs	r2, r3
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	18d3      	adds	r3, r2, r3
 8014182:	183a      	adds	r2, r7, r0
 8014184:	8812      	ldrh	r2, [r2, #0]
 8014186:	4951      	ldr	r1, [pc, #324]	@ (80142cc <HAL_PCD_EP_DB_Transmit+0x734>)
 8014188:	430a      	orrs	r2, r1
 801418a:	b292      	uxth	r2, r2
 801418c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	2224      	movs	r2, #36	@ 0x24
 8014192:	5c9b      	ldrb	r3, [r3, r2]
 8014194:	2b01      	cmp	r3, #1
 8014196:	d000      	beq.n	801419a <HAL_PCD_EP_DB_Transmit+0x602>
 8014198:	e0db      	b.n	8014352 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	695a      	ldr	r2, [r3, #20]
 801419e:	2186      	movs	r1, #134	@ 0x86
 80141a0:	187b      	adds	r3, r7, r1
 80141a2:	881b      	ldrh	r3, [r3, #0]
 80141a4:	18d2      	adds	r2, r2, r3
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	69da      	ldr	r2, [r3, #28]
 80141ae:	187b      	adds	r3, r7, r1
 80141b0:	881b      	ldrh	r3, [r3, #0]
 80141b2:	18d2      	adds	r2, r2, r3
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	6a1a      	ldr	r2, [r3, #32]
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	691b      	ldr	r3, [r3, #16]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d30c      	bcc.n	80141de <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	691b      	ldr	r3, [r3, #16]
 80141c8:	218c      	movs	r1, #140	@ 0x8c
 80141ca:	187a      	adds	r2, r7, r1
 80141cc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	6a1a      	ldr	r2, [r3, #32]
 80141d2:	187b      	adds	r3, r7, r1
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	1ad2      	subs	r2, r2, r3
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	621a      	str	r2, [r3, #32]
 80141dc:	e01a      	b.n	8014214 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	6a1b      	ldr	r3, [r3, #32]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d10a      	bne.n	80141fc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80141e6:	2386      	movs	r3, #134	@ 0x86
 80141e8:	18fb      	adds	r3, r7, r3
 80141ea:	881b      	ldrh	r3, [r3, #0]
 80141ec:	228c      	movs	r2, #140	@ 0x8c
 80141ee:	18ba      	adds	r2, r7, r2
 80141f0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	2224      	movs	r2, #36	@ 0x24
 80141f6:	2100      	movs	r1, #0
 80141f8:	5499      	strb	r1, [r3, r2]
 80141fa:	e00b      	b.n	8014214 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	6a1b      	ldr	r3, [r3, #32]
 8014200:	228c      	movs	r2, #140	@ 0x8c
 8014202:	18ba      	adds	r2, r7, r2
 8014204:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	2200      	movs	r2, #0
 801420a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	2224      	movs	r2, #36	@ 0x24
 8014210:	2100      	movs	r1, #0
 8014212:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	657b      	str	r3, [r7, #84]	@ 0x54
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	785b      	ldrb	r3, [r3, #1]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d000      	beq.n	8014224 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014222:	e06e      	b.n	8014302 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	2250      	movs	r2, #80	@ 0x50
 8014230:	5a9b      	ldrh	r3, [r3, r2]
 8014232:	b29b      	uxth	r3, r3
 8014234:	001a      	movs	r2, r3
 8014236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014238:	189b      	adds	r3, r3, r2
 801423a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	781b      	ldrb	r3, [r3, #0]
 8014240:	00da      	lsls	r2, r3, #3
 8014242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014244:	18d3      	adds	r3, r2, r3
 8014246:	4a1e      	ldr	r2, [pc, #120]	@ (80142c0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014248:	4694      	mov	ip, r2
 801424a:	4463      	add	r3, ip
 801424c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801424e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014250:	881b      	ldrh	r3, [r3, #0]
 8014252:	b29b      	uxth	r3, r3
 8014254:	059b      	lsls	r3, r3, #22
 8014256:	0d9b      	lsrs	r3, r3, #22
 8014258:	b29a      	uxth	r2, r3
 801425a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801425c:	801a      	strh	r2, [r3, #0]
 801425e:	228c      	movs	r2, #140	@ 0x8c
 8014260:	18bb      	adds	r3, r7, r2
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2b3e      	cmp	r3, #62	@ 0x3e
 8014266:	d91a      	bls.n	801429e <HAL_PCD_EP_DB_Transmit+0x706>
 8014268:	18bb      	adds	r3, r7, r2
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	095b      	lsrs	r3, r3, #5
 801426e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014270:	18bb      	adds	r3, r7, r2
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	221f      	movs	r2, #31
 8014276:	4013      	ands	r3, r2
 8014278:	d102      	bne.n	8014280 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801427a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801427c:	3b01      	subs	r3, #1
 801427e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014282:	881b      	ldrh	r3, [r3, #0]
 8014284:	b29a      	uxth	r2, r3
 8014286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014288:	b29b      	uxth	r3, r3
 801428a:	029b      	lsls	r3, r3, #10
 801428c:	b29b      	uxth	r3, r3
 801428e:	4313      	orrs	r3, r2
 8014290:	b29b      	uxth	r3, r3
 8014292:	4a0c      	ldr	r2, [pc, #48]	@ (80142c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014294:	4313      	orrs	r3, r2
 8014296:	b29a      	uxth	r2, r3
 8014298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801429a:	801a      	strh	r2, [r3, #0]
 801429c:	e04d      	b.n	801433a <HAL_PCD_EP_DB_Transmit+0x7a2>
 801429e:	238c      	movs	r3, #140	@ 0x8c
 80142a0:	18fb      	adds	r3, r7, r3
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d113      	bne.n	80142d0 <HAL_PCD_EP_DB_Transmit+0x738>
 80142a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142aa:	881b      	ldrh	r3, [r3, #0]
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	4a05      	ldr	r2, [pc, #20]	@ (80142c4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80142b0:	4313      	orrs	r3, r2
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142b6:	801a      	strh	r2, [r3, #0]
 80142b8:	e03f      	b.n	801433a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80142ba:	46c0      	nop			@ (mov r8, r8)
 80142bc:	00000402 	.word	0x00000402
 80142c0:	00000406 	.word	0x00000406
 80142c4:	ffff8000 	.word	0xffff8000
 80142c8:	ffff8f8f 	.word	0xffff8f8f
 80142cc:	ffffc080 	.word	0xffffc080
 80142d0:	228c      	movs	r2, #140	@ 0x8c
 80142d2:	18bb      	adds	r3, r7, r2
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	085b      	lsrs	r3, r3, #1
 80142d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80142da:	18bb      	adds	r3, r7, r2
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2201      	movs	r2, #1
 80142e0:	4013      	ands	r3, r2
 80142e2:	d002      	beq.n	80142ea <HAL_PCD_EP_DB_Transmit+0x752>
 80142e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80142e6:	3301      	adds	r3, #1
 80142e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80142ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142ec:	881b      	ldrh	r3, [r3, #0]
 80142ee:	b29a      	uxth	r2, r3
 80142f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	029b      	lsls	r3, r3, #10
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	4313      	orrs	r3, r2
 80142fa:	b29a      	uxth	r2, r3
 80142fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142fe:	801a      	strh	r2, [r3, #0]
 8014300:	e01b      	b.n	801433a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	785b      	ldrb	r3, [r3, #1]
 8014306:	2b01      	cmp	r3, #1
 8014308:	d117      	bne.n	801433a <HAL_PCD_EP_DB_Transmit+0x7a2>
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2250      	movs	r2, #80	@ 0x50
 8014310:	5a9b      	ldrh	r3, [r3, r2]
 8014312:	b29b      	uxth	r3, r3
 8014314:	001a      	movs	r2, r3
 8014316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014318:	189b      	adds	r3, r3, r2
 801431a:	657b      	str	r3, [r7, #84]	@ 0x54
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	00da      	lsls	r2, r3, #3
 8014322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014324:	18d3      	adds	r3, r2, r3
 8014326:	4a21      	ldr	r2, [pc, #132]	@ (80143ac <HAL_PCD_EP_DB_Transmit+0x814>)
 8014328:	4694      	mov	ip, r2
 801432a:	4463      	add	r3, ip
 801432c:	653b      	str	r3, [r7, #80]	@ 0x50
 801432e:	238c      	movs	r3, #140	@ 0x8c
 8014330:	18fb      	adds	r3, r7, r3
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	b29a      	uxth	r2, r3
 8014336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014338:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	6818      	ldr	r0, [r3, #0]
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	6959      	ldr	r1, [r3, #20]
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	895a      	ldrh	r2, [r3, #10]
 8014346:	238c      	movs	r3, #140	@ 0x8c
 8014348:	18fb      	adds	r3, r7, r3
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	b29b      	uxth	r3, r3
 801434e:	f006 f999 	bl	801a684 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	001a      	movs	r2, r3
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	18d3      	adds	r3, r2, r3
 8014360:	881b      	ldrh	r3, [r3, #0]
 8014362:	b29a      	uxth	r2, r3
 8014364:	2014      	movs	r0, #20
 8014366:	183b      	adds	r3, r7, r0
 8014368:	4911      	ldr	r1, [pc, #68]	@ (80143b0 <HAL_PCD_EP_DB_Transmit+0x818>)
 801436a:	400a      	ands	r2, r1
 801436c:	801a      	strh	r2, [r3, #0]
 801436e:	183b      	adds	r3, r7, r0
 8014370:	183a      	adds	r2, r7, r0
 8014372:	8812      	ldrh	r2, [r2, #0]
 8014374:	2110      	movs	r1, #16
 8014376:	404a      	eors	r2, r1
 8014378:	801a      	strh	r2, [r3, #0]
 801437a:	183b      	adds	r3, r7, r0
 801437c:	183a      	adds	r2, r7, r0
 801437e:	8812      	ldrh	r2, [r2, #0]
 8014380:	2120      	movs	r1, #32
 8014382:	404a      	eors	r2, r1
 8014384:	801a      	strh	r2, [r3, #0]
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	001a      	movs	r2, r3
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	009b      	lsls	r3, r3, #2
 8014392:	18d3      	adds	r3, r2, r3
 8014394:	183a      	adds	r2, r7, r0
 8014396:	8812      	ldrh	r2, [r2, #0]
 8014398:	4906      	ldr	r1, [pc, #24]	@ (80143b4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801439a:	430a      	orrs	r2, r1
 801439c:	b292      	uxth	r2, r2
 801439e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80143a0:	2300      	movs	r3, #0
}
 80143a2:	0018      	movs	r0, r3
 80143a4:	46bd      	mov	sp, r7
 80143a6:	b024      	add	sp, #144	@ 0x90
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	46c0      	nop			@ (mov r8, r8)
 80143ac:	00000406 	.word	0x00000406
 80143b0:	ffff8fbf 	.word	0xffff8fbf
 80143b4:	ffff8080 	.word	0xffff8080

080143b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80143b8:	b590      	push	{r4, r7, lr}
 80143ba:	b087      	sub	sp, #28
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	0008      	movs	r0, r1
 80143c2:	0011      	movs	r1, r2
 80143c4:	607b      	str	r3, [r7, #4]
 80143c6:	240a      	movs	r4, #10
 80143c8:	193b      	adds	r3, r7, r4
 80143ca:	1c02      	adds	r2, r0, #0
 80143cc:	801a      	strh	r2, [r3, #0]
 80143ce:	2308      	movs	r3, #8
 80143d0:	18fb      	adds	r3, r7, r3
 80143d2:	1c0a      	adds	r2, r1, #0
 80143d4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80143d6:	0021      	movs	r1, r4
 80143d8:	187b      	adds	r3, r7, r1
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	2280      	movs	r2, #128	@ 0x80
 80143de:	4013      	ands	r3, r2
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d00c      	beq.n	8014400 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80143e6:	187b      	adds	r3, r7, r1
 80143e8:	881b      	ldrh	r3, [r3, #0]
 80143ea:	2207      	movs	r2, #7
 80143ec:	4013      	ands	r3, r2
 80143ee:	1c5a      	adds	r2, r3, #1
 80143f0:	0013      	movs	r3, r2
 80143f2:	009b      	lsls	r3, r3, #2
 80143f4:	189b      	adds	r3, r3, r2
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	68fa      	ldr	r2, [r7, #12]
 80143fa:	18d3      	adds	r3, r2, r3
 80143fc:	617b      	str	r3, [r7, #20]
 80143fe:	e00b      	b.n	8014418 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014400:	230a      	movs	r3, #10
 8014402:	18fb      	adds	r3, r7, r3
 8014404:	881a      	ldrh	r2, [r3, #0]
 8014406:	0013      	movs	r3, r2
 8014408:	009b      	lsls	r3, r3, #2
 801440a:	189b      	adds	r3, r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	3369      	adds	r3, #105	@ 0x69
 8014410:	33ff      	adds	r3, #255	@ 0xff
 8014412:	68fa      	ldr	r2, [r7, #12]
 8014414:	18d3      	adds	r3, r2, r3
 8014416:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014418:	2308      	movs	r3, #8
 801441a:	18fb      	adds	r3, r7, r3
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d107      	bne.n	8014432 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	2200      	movs	r2, #0
 8014426:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	b29a      	uxth	r2, r3
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	80da      	strh	r2, [r3, #6]
 8014430:	e00b      	b.n	801444a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	2201      	movs	r2, #1
 8014436:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	b29a      	uxth	r2, r3
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	0c1b      	lsrs	r3, r3, #16
 8014444:	b29a      	uxth	r2, r3
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801444a:	2300      	movs	r3, #0
}
 801444c:	0018      	movs	r0, r3
 801444e:	46bd      	mov	sp, r7
 8014450:	b007      	add	sp, #28
 8014452:	bd90      	pop	{r4, r7, pc}

08014454 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	23ba      	movs	r3, #186	@ 0xba
 8014466:	009b      	lsls	r3, r3, #2
 8014468:	2101      	movs	r1, #1
 801446a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	23b8      	movs	r3, #184	@ 0xb8
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	2100      	movs	r1, #0
 8014474:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	2254      	movs	r2, #84	@ 0x54
 801447a:	5a9b      	ldrh	r3, [r3, r2]
 801447c:	b29b      	uxth	r3, r3
 801447e:	2201      	movs	r2, #1
 8014480:	4313      	orrs	r3, r2
 8014482:	b299      	uxth	r1, r3
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2254      	movs	r2, #84	@ 0x54
 8014488:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2254      	movs	r2, #84	@ 0x54
 801448e:	5a9b      	ldrh	r3, [r3, r2]
 8014490:	b29b      	uxth	r3, r3
 8014492:	2202      	movs	r2, #2
 8014494:	4313      	orrs	r3, r2
 8014496:	b299      	uxth	r1, r3
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2254      	movs	r2, #84	@ 0x54
 801449c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801449e:	2300      	movs	r3, #0
}
 80144a0:	0018      	movs	r0, r3
 80144a2:	46bd      	mov	sp, r7
 80144a4:	b004      	add	sp, #16
 80144a6:	bd80      	pop	{r7, pc}

080144a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b082      	sub	sp, #8
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	000a      	movs	r2, r1
 80144b2:	1cfb      	adds	r3, r7, #3
 80144b4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80144b6:	46c0      	nop			@ (mov r8, r8)
 80144b8:	46bd      	mov	sp, r7
 80144ba:	b002      	add	sp, #8
 80144bc:	bd80      	pop	{r7, pc}
	...

080144c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80144c4:	4b04      	ldr	r3, [pc, #16]	@ (80144d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	4b03      	ldr	r3, [pc, #12]	@ (80144d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80144ca:	2180      	movs	r1, #128	@ 0x80
 80144cc:	0049      	lsls	r1, r1, #1
 80144ce:	430a      	orrs	r2, r1
 80144d0:	601a      	str	r2, [r3, #0]
}
 80144d2:	46c0      	nop			@ (mov r8, r8)
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	40007000 	.word	0x40007000

080144dc <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80144e0:	4b04      	ldr	r3, [pc, #16]	@ (80144f4 <HAL_PWR_DisableBkUpAccess+0x18>)
 80144e2:	681a      	ldr	r2, [r3, #0]
 80144e4:	4b03      	ldr	r3, [pc, #12]	@ (80144f4 <HAL_PWR_DisableBkUpAccess+0x18>)
 80144e6:	4904      	ldr	r1, [pc, #16]	@ (80144f8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80144e8:	400a      	ands	r2, r1
 80144ea:	601a      	str	r2, [r3, #0]
}
 80144ec:	46c0      	nop			@ (mov r8, r8)
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	46c0      	nop			@ (mov r8, r8)
 80144f4:	40007000 	.word	0x40007000
 80144f8:	fffffeff 	.word	0xfffffeff

080144fc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b086      	sub	sp, #24
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	000a      	movs	r2, r1
 8014506:	1cfb      	adds	r3, r7, #3
 8014508:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801450a:	2300      	movs	r3, #0
 801450c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801450e:	4b25      	ldr	r3, [pc, #148]	@ (80145a4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014510:	681a      	ldr	r2, [r3, #0]
 8014512:	2380      	movs	r3, #128	@ 0x80
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4013      	ands	r3, r2
 8014518:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801451a:	4b23      	ldr	r3, [pc, #140]	@ (80145a8 <HAL_PWR_EnterSTOPMode+0xac>)
 801451c:	6a1b      	ldr	r3, [r3, #32]
 801451e:	2201      	movs	r2, #1
 8014520:	4013      	ands	r3, r2
 8014522:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d008      	beq.n	801453c <HAL_PWR_EnterSTOPMode+0x40>
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d005      	beq.n	801453c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014530:	4b1c      	ldr	r3, [pc, #112]	@ (80145a4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014532:	681a      	ldr	r2, [r3, #0]
 8014534:	4b1b      	ldr	r3, [pc, #108]	@ (80145a4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014536:	491d      	ldr	r1, [pc, #116]	@ (80145ac <HAL_PWR_EnterSTOPMode+0xb0>)
 8014538:	400a      	ands	r2, r1
 801453a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801453c:	4b19      	ldr	r3, [pc, #100]	@ (80145a4 <HAL_PWR_EnterSTOPMode+0xa8>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	2203      	movs	r2, #3
 8014546:	4393      	bics	r3, r2
 8014548:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801454a:	697a      	ldr	r2, [r7, #20]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	4313      	orrs	r3, r2
 8014550:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014552:	4b14      	ldr	r3, [pc, #80]	@ (80145a4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014554:	697a      	ldr	r2, [r7, #20]
 8014556:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014558:	4b15      	ldr	r3, [pc, #84]	@ (80145b0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801455a:	691a      	ldr	r2, [r3, #16]
 801455c:	4b14      	ldr	r3, [pc, #80]	@ (80145b0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801455e:	2104      	movs	r1, #4
 8014560:	430a      	orrs	r2, r1
 8014562:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014564:	1cfb      	adds	r3, r7, #3
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	2b01      	cmp	r3, #1
 801456a:	d101      	bne.n	8014570 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801456c:	bf30      	wfi
 801456e:	e002      	b.n	8014576 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014570:	bf40      	sev
    __WFE();
 8014572:	bf20      	wfe
    __WFE();
 8014574:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014576:	4b0e      	ldr	r3, [pc, #56]	@ (80145b0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014578:	691a      	ldr	r2, [r3, #16]
 801457a:	4b0d      	ldr	r3, [pc, #52]	@ (80145b0 <HAL_PWR_EnterSTOPMode+0xb4>)
 801457c:	2104      	movs	r1, #4
 801457e:	438a      	bics	r2, r1
 8014580:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d009      	beq.n	801459c <HAL_PWR_EnterSTOPMode+0xa0>
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d006      	beq.n	801459c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801458e:	4b05      	ldr	r3, [pc, #20]	@ (80145a4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014590:	681a      	ldr	r2, [r3, #0]
 8014592:	4b04      	ldr	r3, [pc, #16]	@ (80145a4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014594:	2180      	movs	r1, #128	@ 0x80
 8014596:	0089      	lsls	r1, r1, #2
 8014598:	430a      	orrs	r2, r1
 801459a:	601a      	str	r2, [r3, #0]
  }
}
 801459c:	46c0      	nop			@ (mov r8, r8)
 801459e:	46bd      	mov	sp, r7
 80145a0:	b006      	add	sp, #24
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	40007000 	.word	0x40007000
 80145a8:	40010000 	.word	0x40010000
 80145ac:	fffffdff 	.word	0xfffffdff
 80145b0:	e000ed00 	.word	0xe000ed00

080145b4 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80145b8:	4b07      	ldr	r3, [pc, #28]	@ (80145d8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	4b06      	ldr	r3, [pc, #24]	@ (80145d8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80145be:	2102      	movs	r1, #2
 80145c0:	430a      	orrs	r2, r1
 80145c2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80145c4:	4b05      	ldr	r3, [pc, #20]	@ (80145dc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80145c6:	691a      	ldr	r2, [r3, #16]
 80145c8:	4b04      	ldr	r3, [pc, #16]	@ (80145dc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80145ca:	2104      	movs	r1, #4
 80145cc:	430a      	orrs	r2, r1
 80145ce:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80145d0:	bf30      	wfi
}
 80145d2:	46c0      	nop			@ (mov r8, r8)
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	40007000 	.word	0x40007000
 80145dc:	e000ed00 	.word	0xe000ed00

080145e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80145e0:	b5b0      	push	{r4, r5, r7, lr}
 80145e2:	b08a      	sub	sp, #40	@ 0x28
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d102      	bne.n	80145f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80145ee:	2301      	movs	r3, #1
 80145f0:	f000 fbbf 	bl	8014d72 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80145f4:	4bc9      	ldr	r3, [pc, #804]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	220c      	movs	r2, #12
 80145fa:	4013      	ands	r3, r2
 80145fc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80145fe:	4bc7      	ldr	r3, [pc, #796]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014600:	68da      	ldr	r2, [r3, #12]
 8014602:	2380      	movs	r3, #128	@ 0x80
 8014604:	025b      	lsls	r3, r3, #9
 8014606:	4013      	ands	r3, r2
 8014608:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	2201      	movs	r2, #1
 8014610:	4013      	ands	r3, r2
 8014612:	d100      	bne.n	8014616 <HAL_RCC_OscConfig+0x36>
 8014614:	e07e      	b.n	8014714 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	2b08      	cmp	r3, #8
 801461a:	d007      	beq.n	801462c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	2b0c      	cmp	r3, #12
 8014620:	d112      	bne.n	8014648 <HAL_RCC_OscConfig+0x68>
 8014622:	69ba      	ldr	r2, [r7, #24]
 8014624:	2380      	movs	r3, #128	@ 0x80
 8014626:	025b      	lsls	r3, r3, #9
 8014628:	429a      	cmp	r2, r3
 801462a:	d10d      	bne.n	8014648 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801462c:	4bbb      	ldr	r3, [pc, #748]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801462e:	681a      	ldr	r2, [r3, #0]
 8014630:	2380      	movs	r3, #128	@ 0x80
 8014632:	029b      	lsls	r3, r3, #10
 8014634:	4013      	ands	r3, r2
 8014636:	d100      	bne.n	801463a <HAL_RCC_OscConfig+0x5a>
 8014638:	e06b      	b.n	8014712 <HAL_RCC_OscConfig+0x132>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d167      	bne.n	8014712 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014642:	2301      	movs	r3, #1
 8014644:	f000 fb95 	bl	8014d72 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	685a      	ldr	r2, [r3, #4]
 801464c:	2380      	movs	r3, #128	@ 0x80
 801464e:	025b      	lsls	r3, r3, #9
 8014650:	429a      	cmp	r2, r3
 8014652:	d107      	bne.n	8014664 <HAL_RCC_OscConfig+0x84>
 8014654:	4bb1      	ldr	r3, [pc, #708]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014656:	681a      	ldr	r2, [r3, #0]
 8014658:	4bb0      	ldr	r3, [pc, #704]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801465a:	2180      	movs	r1, #128	@ 0x80
 801465c:	0249      	lsls	r1, r1, #9
 801465e:	430a      	orrs	r2, r1
 8014660:	601a      	str	r2, [r3, #0]
 8014662:	e027      	b.n	80146b4 <HAL_RCC_OscConfig+0xd4>
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	685a      	ldr	r2, [r3, #4]
 8014668:	23a0      	movs	r3, #160	@ 0xa0
 801466a:	02db      	lsls	r3, r3, #11
 801466c:	429a      	cmp	r2, r3
 801466e:	d10e      	bne.n	801468e <HAL_RCC_OscConfig+0xae>
 8014670:	4baa      	ldr	r3, [pc, #680]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014672:	681a      	ldr	r2, [r3, #0]
 8014674:	4ba9      	ldr	r3, [pc, #676]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014676:	2180      	movs	r1, #128	@ 0x80
 8014678:	02c9      	lsls	r1, r1, #11
 801467a:	430a      	orrs	r2, r1
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	4ba7      	ldr	r3, [pc, #668]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014680:	681a      	ldr	r2, [r3, #0]
 8014682:	4ba6      	ldr	r3, [pc, #664]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014684:	2180      	movs	r1, #128	@ 0x80
 8014686:	0249      	lsls	r1, r1, #9
 8014688:	430a      	orrs	r2, r1
 801468a:	601a      	str	r2, [r3, #0]
 801468c:	e012      	b.n	80146b4 <HAL_RCC_OscConfig+0xd4>
 801468e:	4ba3      	ldr	r3, [pc, #652]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014690:	681a      	ldr	r2, [r3, #0]
 8014692:	4ba2      	ldr	r3, [pc, #648]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014694:	49a2      	ldr	r1, [pc, #648]	@ (8014920 <HAL_RCC_OscConfig+0x340>)
 8014696:	400a      	ands	r2, r1
 8014698:	601a      	str	r2, [r3, #0]
 801469a:	4ba0      	ldr	r3, [pc, #640]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	2380      	movs	r3, #128	@ 0x80
 80146a0:	025b      	lsls	r3, r3, #9
 80146a2:	4013      	ands	r3, r2
 80146a4:	60fb      	str	r3, [r7, #12]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	4b9c      	ldr	r3, [pc, #624]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80146aa:	681a      	ldr	r2, [r3, #0]
 80146ac:	4b9b      	ldr	r3, [pc, #620]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80146ae:	499d      	ldr	r1, [pc, #628]	@ (8014924 <HAL_RCC_OscConfig+0x344>)
 80146b0:	400a      	ands	r2, r1
 80146b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d015      	beq.n	80146e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80146bc:	f7f9 fe60 	bl	800e380 <HAL_GetTick>
 80146c0:	0003      	movs	r3, r0
 80146c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80146c4:	e009      	b.n	80146da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80146c6:	f7f9 fe5b 	bl	800e380 <HAL_GetTick>
 80146ca:	0002      	movs	r2, r0
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	1ad3      	subs	r3, r2, r3
 80146d0:	2b64      	cmp	r3, #100	@ 0x64
 80146d2:	d902      	bls.n	80146da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80146d4:	2303      	movs	r3, #3
 80146d6:	f000 fb4c 	bl	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80146da:	4b90      	ldr	r3, [pc, #576]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	2380      	movs	r3, #128	@ 0x80
 80146e0:	029b      	lsls	r3, r3, #10
 80146e2:	4013      	ands	r3, r2
 80146e4:	d0ef      	beq.n	80146c6 <HAL_RCC_OscConfig+0xe6>
 80146e6:	e015      	b.n	8014714 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80146e8:	f7f9 fe4a 	bl	800e380 <HAL_GetTick>
 80146ec:	0003      	movs	r3, r0
 80146ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80146f0:	e008      	b.n	8014704 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80146f2:	f7f9 fe45 	bl	800e380 <HAL_GetTick>
 80146f6:	0002      	movs	r2, r0
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	2b64      	cmp	r3, #100	@ 0x64
 80146fe:	d901      	bls.n	8014704 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8014700:	2303      	movs	r3, #3
 8014702:	e336      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014704:	4b85      	ldr	r3, [pc, #532]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	2380      	movs	r3, #128	@ 0x80
 801470a:	029b      	lsls	r3, r3, #10
 801470c:	4013      	ands	r3, r2
 801470e:	d1f0      	bne.n	80146f2 <HAL_RCC_OscConfig+0x112>
 8014710:	e000      	b.n	8014714 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014712:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2202      	movs	r2, #2
 801471a:	4013      	ands	r3, r2
 801471c:	d100      	bne.n	8014720 <HAL_RCC_OscConfig+0x140>
 801471e:	e099      	b.n	8014854 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	68db      	ldr	r3, [r3, #12]
 8014724:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8014726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014728:	2220      	movs	r2, #32
 801472a:	4013      	ands	r3, r2
 801472c:	d009      	beq.n	8014742 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801472e:	4b7b      	ldr	r3, [pc, #492]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	4b7a      	ldr	r3, [pc, #488]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014734:	2120      	movs	r1, #32
 8014736:	430a      	orrs	r2, r1
 8014738:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801473c:	2220      	movs	r2, #32
 801473e:	4393      	bics	r3, r2
 8014740:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014742:	69fb      	ldr	r3, [r7, #28]
 8014744:	2b04      	cmp	r3, #4
 8014746:	d005      	beq.n	8014754 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014748:	69fb      	ldr	r3, [r7, #28]
 801474a:	2b0c      	cmp	r3, #12
 801474c:	d13e      	bne.n	80147cc <HAL_RCC_OscConfig+0x1ec>
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d13b      	bne.n	80147cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8014754:	4b71      	ldr	r3, [pc, #452]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	2204      	movs	r2, #4
 801475a:	4013      	ands	r3, r2
 801475c:	d004      	beq.n	8014768 <HAL_RCC_OscConfig+0x188>
 801475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014760:	2b00      	cmp	r3, #0
 8014762:	d101      	bne.n	8014768 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8014764:	2301      	movs	r3, #1
 8014766:	e304      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014768:	4b6c      	ldr	r3, [pc, #432]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	4a6e      	ldr	r2, [pc, #440]	@ (8014928 <HAL_RCC_OscConfig+0x348>)
 801476e:	4013      	ands	r3, r2
 8014770:	0019      	movs	r1, r3
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	021a      	lsls	r2, r3, #8
 8014778:	4b68      	ldr	r3, [pc, #416]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801477a:	430a      	orrs	r2, r1
 801477c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801477e:	4b67      	ldr	r3, [pc, #412]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	2209      	movs	r2, #9
 8014784:	4393      	bics	r3, r2
 8014786:	0019      	movs	r1, r3
 8014788:	4b64      	ldr	r3, [pc, #400]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801478a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801478c:	430a      	orrs	r2, r1
 801478e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014790:	f000 fc42 	bl	8015018 <HAL_RCC_GetSysClockFreq>
 8014794:	0001      	movs	r1, r0
 8014796:	4b61      	ldr	r3, [pc, #388]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	091b      	lsrs	r3, r3, #4
 801479c:	220f      	movs	r2, #15
 801479e:	4013      	ands	r3, r2
 80147a0:	4a62      	ldr	r2, [pc, #392]	@ (801492c <HAL_RCC_OscConfig+0x34c>)
 80147a2:	5cd3      	ldrb	r3, [r2, r3]
 80147a4:	000a      	movs	r2, r1
 80147a6:	40da      	lsrs	r2, r3
 80147a8:	4b61      	ldr	r3, [pc, #388]	@ (8014930 <HAL_RCC_OscConfig+0x350>)
 80147aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80147ac:	4b61      	ldr	r3, [pc, #388]	@ (8014934 <HAL_RCC_OscConfig+0x354>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	2513      	movs	r5, #19
 80147b2:	197c      	adds	r4, r7, r5
 80147b4:	0018      	movs	r0, r3
 80147b6:	f7f9 fd9d 	bl	800e2f4 <HAL_InitTick>
 80147ba:	0003      	movs	r3, r0
 80147bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80147be:	197b      	adds	r3, r7, r5
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d046      	beq.n	8014854 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80147c6:	197b      	adds	r3, r7, r5
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	e2d2      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80147cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d027      	beq.n	8014822 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80147d2:	4b52      	ldr	r3, [pc, #328]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	2209      	movs	r2, #9
 80147d8:	4393      	bics	r3, r2
 80147da:	0019      	movs	r1, r3
 80147dc:	4b4f      	ldr	r3, [pc, #316]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80147de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80147e0:	430a      	orrs	r2, r1
 80147e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80147e4:	f7f9 fdcc 	bl	800e380 <HAL_GetTick>
 80147e8:	0003      	movs	r3, r0
 80147ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80147ec:	e008      	b.n	8014800 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80147ee:	f7f9 fdc7 	bl	800e380 <HAL_GetTick>
 80147f2:	0002      	movs	r2, r0
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	1ad3      	subs	r3, r2, r3
 80147f8:	2b02      	cmp	r3, #2
 80147fa:	d901      	bls.n	8014800 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80147fc:	2303      	movs	r3, #3
 80147fe:	e2b8      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014800:	4b46      	ldr	r3, [pc, #280]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	2204      	movs	r2, #4
 8014806:	4013      	ands	r3, r2
 8014808:	d0f1      	beq.n	80147ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801480a:	4b44      	ldr	r3, [pc, #272]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	4a46      	ldr	r2, [pc, #280]	@ (8014928 <HAL_RCC_OscConfig+0x348>)
 8014810:	4013      	ands	r3, r2
 8014812:	0019      	movs	r1, r3
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	691b      	ldr	r3, [r3, #16]
 8014818:	021a      	lsls	r2, r3, #8
 801481a:	4b40      	ldr	r3, [pc, #256]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801481c:	430a      	orrs	r2, r1
 801481e:	605a      	str	r2, [r3, #4]
 8014820:	e018      	b.n	8014854 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014822:	4b3e      	ldr	r3, [pc, #248]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	4b3d      	ldr	r3, [pc, #244]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014828:	2101      	movs	r1, #1
 801482a:	438a      	bics	r2, r1
 801482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801482e:	f7f9 fda7 	bl	800e380 <HAL_GetTick>
 8014832:	0003      	movs	r3, r0
 8014834:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014836:	e008      	b.n	801484a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014838:	f7f9 fda2 	bl	800e380 <HAL_GetTick>
 801483c:	0002      	movs	r2, r0
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	1ad3      	subs	r3, r2, r3
 8014842:	2b02      	cmp	r3, #2
 8014844:	d901      	bls.n	801484a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8014846:	2303      	movs	r3, #3
 8014848:	e293      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801484a:	4b34      	ldr	r3, [pc, #208]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2204      	movs	r2, #4
 8014850:	4013      	ands	r3, r2
 8014852:	d1f1      	bne.n	8014838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	2210      	movs	r2, #16
 801485a:	4013      	ands	r3, r2
 801485c:	d100      	bne.n	8014860 <HAL_RCC_OscConfig+0x280>
 801485e:	e0a2      	b.n	80149a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014860:	69fb      	ldr	r3, [r7, #28]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d140      	bne.n	80148e8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014866:	4b2d      	ldr	r3, [pc, #180]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	2380      	movs	r3, #128	@ 0x80
 801486c:	009b      	lsls	r3, r3, #2
 801486e:	4013      	ands	r3, r2
 8014870:	d005      	beq.n	801487e <HAL_RCC_OscConfig+0x29e>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	69db      	ldr	r3, [r3, #28]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d101      	bne.n	801487e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801487a:	2301      	movs	r3, #1
 801487c:	e279      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801487e:	4b27      	ldr	r3, [pc, #156]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	4a2d      	ldr	r2, [pc, #180]	@ (8014938 <HAL_RCC_OscConfig+0x358>)
 8014884:	4013      	ands	r3, r2
 8014886:	0019      	movs	r1, r3
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801488c:	4b23      	ldr	r3, [pc, #140]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 801488e:	430a      	orrs	r2, r1
 8014890:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014892:	4b22      	ldr	r3, [pc, #136]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	021b      	lsls	r3, r3, #8
 8014898:	0a19      	lsrs	r1, r3, #8
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	6a1b      	ldr	r3, [r3, #32]
 801489e:	061a      	lsls	r2, r3, #24
 80148a0:	4b1e      	ldr	r3, [pc, #120]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80148a2:	430a      	orrs	r2, r1
 80148a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148aa:	0b5b      	lsrs	r3, r3, #13
 80148ac:	3301      	adds	r3, #1
 80148ae:	2280      	movs	r2, #128	@ 0x80
 80148b0:	0212      	lsls	r2, r2, #8
 80148b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80148b4:	4b19      	ldr	r3, [pc, #100]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	091b      	lsrs	r3, r3, #4
 80148ba:	210f      	movs	r1, #15
 80148bc:	400b      	ands	r3, r1
 80148be:	491b      	ldr	r1, [pc, #108]	@ (801492c <HAL_RCC_OscConfig+0x34c>)
 80148c0:	5ccb      	ldrb	r3, [r1, r3]
 80148c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80148c4:	4b1a      	ldr	r3, [pc, #104]	@ (8014930 <HAL_RCC_OscConfig+0x350>)
 80148c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80148c8:	4b1a      	ldr	r3, [pc, #104]	@ (8014934 <HAL_RCC_OscConfig+0x354>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	2513      	movs	r5, #19
 80148ce:	197c      	adds	r4, r7, r5
 80148d0:	0018      	movs	r0, r3
 80148d2:	f7f9 fd0f 	bl	800e2f4 <HAL_InitTick>
 80148d6:	0003      	movs	r3, r0
 80148d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80148da:	197b      	adds	r3, r7, r5
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d061      	beq.n	80149a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80148e2:	197b      	adds	r3, r7, r5
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	e244      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	69db      	ldr	r3, [r3, #28]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d040      	beq.n	8014972 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80148f0:	4b0a      	ldr	r3, [pc, #40]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	4b09      	ldr	r3, [pc, #36]	@ (801491c <HAL_RCC_OscConfig+0x33c>)
 80148f6:	2180      	movs	r1, #128	@ 0x80
 80148f8:	0049      	lsls	r1, r1, #1
 80148fa:	430a      	orrs	r2, r1
 80148fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148fe:	f7f9 fd3f 	bl	800e380 <HAL_GetTick>
 8014902:	0003      	movs	r3, r0
 8014904:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014906:	e019      	b.n	801493c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014908:	f7f9 fd3a 	bl	800e380 <HAL_GetTick>
 801490c:	0002      	movs	r2, r0
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	1ad3      	subs	r3, r2, r3
 8014912:	2b02      	cmp	r3, #2
 8014914:	d912      	bls.n	801493c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8014916:	2303      	movs	r3, #3
 8014918:	e22b      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
 801491a:	46c0      	nop			@ (mov r8, r8)
 801491c:	40021000 	.word	0x40021000
 8014920:	fffeffff 	.word	0xfffeffff
 8014924:	fffbffff 	.word	0xfffbffff
 8014928:	ffffe0ff 	.word	0xffffe0ff
 801492c:	0802492c 	.word	0x0802492c
 8014930:	200000c8 	.word	0x200000c8
 8014934:	200000d8 	.word	0x200000d8
 8014938:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801493c:	4bca      	ldr	r3, [pc, #808]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	2380      	movs	r3, #128	@ 0x80
 8014942:	009b      	lsls	r3, r3, #2
 8014944:	4013      	ands	r3, r2
 8014946:	d0df      	beq.n	8014908 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014948:	4bc7      	ldr	r3, [pc, #796]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	4ac7      	ldr	r2, [pc, #796]	@ (8014c6c <HAL_RCC_OscConfig+0x68c>)
 801494e:	4013      	ands	r3, r2
 8014950:	0019      	movs	r1, r3
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014956:	4bc4      	ldr	r3, [pc, #784]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014958:	430a      	orrs	r2, r1
 801495a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801495c:	4bc2      	ldr	r3, [pc, #776]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	021b      	lsls	r3, r3, #8
 8014962:	0a19      	lsrs	r1, r3, #8
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6a1b      	ldr	r3, [r3, #32]
 8014968:	061a      	lsls	r2, r3, #24
 801496a:	4bbf      	ldr	r3, [pc, #764]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 801496c:	430a      	orrs	r2, r1
 801496e:	605a      	str	r2, [r3, #4]
 8014970:	e019      	b.n	80149a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014972:	4bbd      	ldr	r3, [pc, #756]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014974:	681a      	ldr	r2, [r3, #0]
 8014976:	4bbc      	ldr	r3, [pc, #752]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014978:	49bd      	ldr	r1, [pc, #756]	@ (8014c70 <HAL_RCC_OscConfig+0x690>)
 801497a:	400a      	ands	r2, r1
 801497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801497e:	f7f9 fcff 	bl	800e380 <HAL_GetTick>
 8014982:	0003      	movs	r3, r0
 8014984:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014986:	e008      	b.n	801499a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014988:	f7f9 fcfa 	bl	800e380 <HAL_GetTick>
 801498c:	0002      	movs	r2, r0
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	1ad3      	subs	r3, r2, r3
 8014992:	2b02      	cmp	r3, #2
 8014994:	d901      	bls.n	801499a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8014996:	2303      	movs	r3, #3
 8014998:	e1eb      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801499a:	4bb3      	ldr	r3, [pc, #716]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	2380      	movs	r3, #128	@ 0x80
 80149a0:	009b      	lsls	r3, r3, #2
 80149a2:	4013      	ands	r3, r2
 80149a4:	d1f0      	bne.n	8014988 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2208      	movs	r2, #8
 80149ac:	4013      	ands	r3, r2
 80149ae:	d036      	beq.n	8014a1e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	695b      	ldr	r3, [r3, #20]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d019      	beq.n	80149ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80149b8:	4bab      	ldr	r3, [pc, #684]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 80149ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149bc:	4baa      	ldr	r3, [pc, #680]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 80149be:	2101      	movs	r1, #1
 80149c0:	430a      	orrs	r2, r1
 80149c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80149c4:	f7f9 fcdc 	bl	800e380 <HAL_GetTick>
 80149c8:	0003      	movs	r3, r0
 80149ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80149cc:	e008      	b.n	80149e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80149ce:	f7f9 fcd7 	bl	800e380 <HAL_GetTick>
 80149d2:	0002      	movs	r2, r0
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	1ad3      	subs	r3, r2, r3
 80149d8:	2b02      	cmp	r3, #2
 80149da:	d901      	bls.n	80149e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80149dc:	2303      	movs	r3, #3
 80149de:	e1c8      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80149e0:	4ba1      	ldr	r3, [pc, #644]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 80149e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149e4:	2202      	movs	r2, #2
 80149e6:	4013      	ands	r3, r2
 80149e8:	d0f1      	beq.n	80149ce <HAL_RCC_OscConfig+0x3ee>
 80149ea:	e018      	b.n	8014a1e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80149ec:	4b9e      	ldr	r3, [pc, #632]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 80149ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149f0:	4b9d      	ldr	r3, [pc, #628]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 80149f2:	2101      	movs	r1, #1
 80149f4:	438a      	bics	r2, r1
 80149f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80149f8:	f7f9 fcc2 	bl	800e380 <HAL_GetTick>
 80149fc:	0003      	movs	r3, r0
 80149fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014a00:	e008      	b.n	8014a14 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014a02:	f7f9 fcbd 	bl	800e380 <HAL_GetTick>
 8014a06:	0002      	movs	r2, r0
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	2b02      	cmp	r3, #2
 8014a0e:	d901      	bls.n	8014a14 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8014a10:	2303      	movs	r3, #3
 8014a12:	e1ae      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014a14:	4b94      	ldr	r3, [pc, #592]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a18:	2202      	movs	r2, #2
 8014a1a:	4013      	ands	r3, r2
 8014a1c:	d1f1      	bne.n	8014a02 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	2204      	movs	r2, #4
 8014a24:	4013      	ands	r3, r2
 8014a26:	d100      	bne.n	8014a2a <HAL_RCC_OscConfig+0x44a>
 8014a28:	e0ae      	b.n	8014b88 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014a2a:	2023      	movs	r0, #35	@ 0x23
 8014a2c:	183b      	adds	r3, r7, r0
 8014a2e:	2200      	movs	r2, #0
 8014a30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014a32:	4b8d      	ldr	r3, [pc, #564]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a36:	2380      	movs	r3, #128	@ 0x80
 8014a38:	055b      	lsls	r3, r3, #21
 8014a3a:	4013      	ands	r3, r2
 8014a3c:	d109      	bne.n	8014a52 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014a3e:	4b8a      	ldr	r3, [pc, #552]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a42:	4b89      	ldr	r3, [pc, #548]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014a44:	2180      	movs	r1, #128	@ 0x80
 8014a46:	0549      	lsls	r1, r1, #21
 8014a48:	430a      	orrs	r2, r1
 8014a4a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014a4c:	183b      	adds	r3, r7, r0
 8014a4e:	2201      	movs	r2, #1
 8014a50:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014a52:	4b88      	ldr	r3, [pc, #544]	@ (8014c74 <HAL_RCC_OscConfig+0x694>)
 8014a54:	681a      	ldr	r2, [r3, #0]
 8014a56:	2380      	movs	r3, #128	@ 0x80
 8014a58:	005b      	lsls	r3, r3, #1
 8014a5a:	4013      	ands	r3, r2
 8014a5c:	d11a      	bne.n	8014a94 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014a5e:	4b85      	ldr	r3, [pc, #532]	@ (8014c74 <HAL_RCC_OscConfig+0x694>)
 8014a60:	681a      	ldr	r2, [r3, #0]
 8014a62:	4b84      	ldr	r3, [pc, #528]	@ (8014c74 <HAL_RCC_OscConfig+0x694>)
 8014a64:	2180      	movs	r1, #128	@ 0x80
 8014a66:	0049      	lsls	r1, r1, #1
 8014a68:	430a      	orrs	r2, r1
 8014a6a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014a6c:	f7f9 fc88 	bl	800e380 <HAL_GetTick>
 8014a70:	0003      	movs	r3, r0
 8014a72:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014a74:	e008      	b.n	8014a88 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014a76:	f7f9 fc83 	bl	800e380 <HAL_GetTick>
 8014a7a:	0002      	movs	r2, r0
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	1ad3      	subs	r3, r2, r3
 8014a80:	2b64      	cmp	r3, #100	@ 0x64
 8014a82:	d901      	bls.n	8014a88 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8014a84:	2303      	movs	r3, #3
 8014a86:	e174      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014a88:	4b7a      	ldr	r3, [pc, #488]	@ (8014c74 <HAL_RCC_OscConfig+0x694>)
 8014a8a:	681a      	ldr	r2, [r3, #0]
 8014a8c:	2380      	movs	r3, #128	@ 0x80
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	4013      	ands	r3, r2
 8014a92:	d0f0      	beq.n	8014a76 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	689a      	ldr	r2, [r3, #8]
 8014a98:	2380      	movs	r3, #128	@ 0x80
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d107      	bne.n	8014ab0 <HAL_RCC_OscConfig+0x4d0>
 8014aa0:	4b71      	ldr	r3, [pc, #452]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014aa2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014aa4:	4b70      	ldr	r3, [pc, #448]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014aa6:	2180      	movs	r1, #128	@ 0x80
 8014aa8:	0049      	lsls	r1, r1, #1
 8014aaa:	430a      	orrs	r2, r1
 8014aac:	651a      	str	r2, [r3, #80]	@ 0x50
 8014aae:	e031      	b.n	8014b14 <HAL_RCC_OscConfig+0x534>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d10c      	bne.n	8014ad2 <HAL_RCC_OscConfig+0x4f2>
 8014ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014aba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014abc:	4b6a      	ldr	r3, [pc, #424]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014abe:	496c      	ldr	r1, [pc, #432]	@ (8014c70 <HAL_RCC_OscConfig+0x690>)
 8014ac0:	400a      	ands	r2, r1
 8014ac2:	651a      	str	r2, [r3, #80]	@ 0x50
 8014ac4:	4b68      	ldr	r3, [pc, #416]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014ac6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ac8:	4b67      	ldr	r3, [pc, #412]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014aca:	496b      	ldr	r1, [pc, #428]	@ (8014c78 <HAL_RCC_OscConfig+0x698>)
 8014acc:	400a      	ands	r2, r1
 8014ace:	651a      	str	r2, [r3, #80]	@ 0x50
 8014ad0:	e020      	b.n	8014b14 <HAL_RCC_OscConfig+0x534>
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	689a      	ldr	r2, [r3, #8]
 8014ad6:	23a0      	movs	r3, #160	@ 0xa0
 8014ad8:	00db      	lsls	r3, r3, #3
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d10e      	bne.n	8014afc <HAL_RCC_OscConfig+0x51c>
 8014ade:	4b62      	ldr	r3, [pc, #392]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ae2:	4b61      	ldr	r3, [pc, #388]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014ae4:	2180      	movs	r1, #128	@ 0x80
 8014ae6:	00c9      	lsls	r1, r1, #3
 8014ae8:	430a      	orrs	r2, r1
 8014aea:	651a      	str	r2, [r3, #80]	@ 0x50
 8014aec:	4b5e      	ldr	r3, [pc, #376]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014aee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014af0:	4b5d      	ldr	r3, [pc, #372]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014af2:	2180      	movs	r1, #128	@ 0x80
 8014af4:	0049      	lsls	r1, r1, #1
 8014af6:	430a      	orrs	r2, r1
 8014af8:	651a      	str	r2, [r3, #80]	@ 0x50
 8014afa:	e00b      	b.n	8014b14 <HAL_RCC_OscConfig+0x534>
 8014afc:	4b5a      	ldr	r3, [pc, #360]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014afe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b00:	4b59      	ldr	r3, [pc, #356]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b02:	495b      	ldr	r1, [pc, #364]	@ (8014c70 <HAL_RCC_OscConfig+0x690>)
 8014b04:	400a      	ands	r2, r1
 8014b06:	651a      	str	r2, [r3, #80]	@ 0x50
 8014b08:	4b57      	ldr	r3, [pc, #348]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b0c:	4b56      	ldr	r3, [pc, #344]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b0e:	495a      	ldr	r1, [pc, #360]	@ (8014c78 <HAL_RCC_OscConfig+0x698>)
 8014b10:	400a      	ands	r2, r1
 8014b12:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	689b      	ldr	r3, [r3, #8]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d015      	beq.n	8014b48 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014b1c:	f7f9 fc30 	bl	800e380 <HAL_GetTick>
 8014b20:	0003      	movs	r3, r0
 8014b22:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014b24:	e009      	b.n	8014b3a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014b26:	f7f9 fc2b 	bl	800e380 <HAL_GetTick>
 8014b2a:	0002      	movs	r2, r0
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	1ad3      	subs	r3, r2, r3
 8014b30:	4a52      	ldr	r2, [pc, #328]	@ (8014c7c <HAL_RCC_OscConfig+0x69c>)
 8014b32:	4293      	cmp	r3, r2
 8014b34:	d901      	bls.n	8014b3a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8014b36:	2303      	movs	r3, #3
 8014b38:	e11b      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b3e:	2380      	movs	r3, #128	@ 0x80
 8014b40:	009b      	lsls	r3, r3, #2
 8014b42:	4013      	ands	r3, r2
 8014b44:	d0ef      	beq.n	8014b26 <HAL_RCC_OscConfig+0x546>
 8014b46:	e014      	b.n	8014b72 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014b48:	f7f9 fc1a 	bl	800e380 <HAL_GetTick>
 8014b4c:	0003      	movs	r3, r0
 8014b4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014b50:	e009      	b.n	8014b66 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014b52:	f7f9 fc15 	bl	800e380 <HAL_GetTick>
 8014b56:	0002      	movs	r2, r0
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	1ad3      	subs	r3, r2, r3
 8014b5c:	4a47      	ldr	r2, [pc, #284]	@ (8014c7c <HAL_RCC_OscConfig+0x69c>)
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d901      	bls.n	8014b66 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8014b62:	2303      	movs	r3, #3
 8014b64:	e105      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014b66:	4b40      	ldr	r3, [pc, #256]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b6a:	2380      	movs	r3, #128	@ 0x80
 8014b6c:	009b      	lsls	r3, r3, #2
 8014b6e:	4013      	ands	r3, r2
 8014b70:	d1ef      	bne.n	8014b52 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014b72:	2323      	movs	r3, #35	@ 0x23
 8014b74:	18fb      	adds	r3, r7, r3
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	d105      	bne.n	8014b88 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014b80:	4b39      	ldr	r3, [pc, #228]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b82:	493f      	ldr	r1, [pc, #252]	@ (8014c80 <HAL_RCC_OscConfig+0x6a0>)
 8014b84:	400a      	ands	r2, r1
 8014b86:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	2220      	movs	r2, #32
 8014b8e:	4013      	ands	r3, r2
 8014b90:	d049      	beq.n	8014c26 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	699b      	ldr	r3, [r3, #24]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d026      	beq.n	8014be8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8014b9a:	4b33      	ldr	r3, [pc, #204]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014b9c:	689a      	ldr	r2, [r3, #8]
 8014b9e:	4b32      	ldr	r3, [pc, #200]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014ba0:	2101      	movs	r1, #1
 8014ba2:	430a      	orrs	r2, r1
 8014ba4:	609a      	str	r2, [r3, #8]
 8014ba6:	4b30      	ldr	r3, [pc, #192]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014baa:	4b2f      	ldr	r3, [pc, #188]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014bac:	2101      	movs	r1, #1
 8014bae:	430a      	orrs	r2, r1
 8014bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8014bb2:	4b34      	ldr	r3, [pc, #208]	@ (8014c84 <HAL_RCC_OscConfig+0x6a4>)
 8014bb4:	6a1a      	ldr	r2, [r3, #32]
 8014bb6:	4b33      	ldr	r3, [pc, #204]	@ (8014c84 <HAL_RCC_OscConfig+0x6a4>)
 8014bb8:	2180      	movs	r1, #128	@ 0x80
 8014bba:	0189      	lsls	r1, r1, #6
 8014bbc:	430a      	orrs	r2, r1
 8014bbe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014bc0:	f7f9 fbde 	bl	800e380 <HAL_GetTick>
 8014bc4:	0003      	movs	r3, r0
 8014bc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014bc8:	e008      	b.n	8014bdc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014bca:	f7f9 fbd9 	bl	800e380 <HAL_GetTick>
 8014bce:	0002      	movs	r2, r0
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	1ad3      	subs	r3, r2, r3
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d901      	bls.n	8014bdc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8014bd8:	2303      	movs	r3, #3
 8014bda:	e0ca      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014bdc:	4b22      	ldr	r3, [pc, #136]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014bde:	689b      	ldr	r3, [r3, #8]
 8014be0:	2202      	movs	r2, #2
 8014be2:	4013      	ands	r3, r2
 8014be4:	d0f1      	beq.n	8014bca <HAL_RCC_OscConfig+0x5ea>
 8014be6:	e01e      	b.n	8014c26 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8014be8:	4b1f      	ldr	r3, [pc, #124]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014bea:	689a      	ldr	r2, [r3, #8]
 8014bec:	4b1e      	ldr	r3, [pc, #120]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014bee:	2101      	movs	r1, #1
 8014bf0:	438a      	bics	r2, r1
 8014bf2:	609a      	str	r2, [r3, #8]
 8014bf4:	4b23      	ldr	r3, [pc, #140]	@ (8014c84 <HAL_RCC_OscConfig+0x6a4>)
 8014bf6:	6a1a      	ldr	r2, [r3, #32]
 8014bf8:	4b22      	ldr	r3, [pc, #136]	@ (8014c84 <HAL_RCC_OscConfig+0x6a4>)
 8014bfa:	4923      	ldr	r1, [pc, #140]	@ (8014c88 <HAL_RCC_OscConfig+0x6a8>)
 8014bfc:	400a      	ands	r2, r1
 8014bfe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c00:	f7f9 fbbe 	bl	800e380 <HAL_GetTick>
 8014c04:	0003      	movs	r3, r0
 8014c06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014c08:	e008      	b.n	8014c1c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014c0a:	f7f9 fbb9 	bl	800e380 <HAL_GetTick>
 8014c0e:	0002      	movs	r2, r0
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	1ad3      	subs	r3, r2, r3
 8014c14:	2b02      	cmp	r3, #2
 8014c16:	d901      	bls.n	8014c1c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8014c18:	2303      	movs	r3, #3
 8014c1a:	e0aa      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014c1c:	4b12      	ldr	r3, [pc, #72]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014c1e:	689b      	ldr	r3, [r3, #8]
 8014c20:	2202      	movs	r2, #2
 8014c22:	4013      	ands	r3, r2
 8014c24:	d1f1      	bne.n	8014c0a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d100      	bne.n	8014c30 <HAL_RCC_OscConfig+0x650>
 8014c2e:	e09f      	b.n	8014d70 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014c30:	69fb      	ldr	r3, [r7, #28]
 8014c32:	2b0c      	cmp	r3, #12
 8014c34:	d100      	bne.n	8014c38 <HAL_RCC_OscConfig+0x658>
 8014c36:	e078      	b.n	8014d2a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c3c:	2b02      	cmp	r3, #2
 8014c3e:	d159      	bne.n	8014cf4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014c40:	4b09      	ldr	r3, [pc, #36]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	4b08      	ldr	r3, [pc, #32]	@ (8014c68 <HAL_RCC_OscConfig+0x688>)
 8014c46:	4911      	ldr	r1, [pc, #68]	@ (8014c8c <HAL_RCC_OscConfig+0x6ac>)
 8014c48:	400a      	ands	r2, r1
 8014c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c4c:	f7f9 fb98 	bl	800e380 <HAL_GetTick>
 8014c50:	0003      	movs	r3, r0
 8014c52:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014c54:	e01c      	b.n	8014c90 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014c56:	f7f9 fb93 	bl	800e380 <HAL_GetTick>
 8014c5a:	0002      	movs	r2, r0
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	1ad3      	subs	r3, r2, r3
 8014c60:	2b02      	cmp	r3, #2
 8014c62:	d915      	bls.n	8014c90 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014c64:	2303      	movs	r3, #3
 8014c66:	e084      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
 8014c68:	40021000 	.word	0x40021000
 8014c6c:	ffff1fff 	.word	0xffff1fff
 8014c70:	fffffeff 	.word	0xfffffeff
 8014c74:	40007000 	.word	0x40007000
 8014c78:	fffffbff 	.word	0xfffffbff
 8014c7c:	00001388 	.word	0x00001388
 8014c80:	efffffff 	.word	0xefffffff
 8014c84:	40010000 	.word	0x40010000
 8014c88:	ffffdfff 	.word	0xffffdfff
 8014c8c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014c90:	4b3a      	ldr	r3, [pc, #232]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	2380      	movs	r3, #128	@ 0x80
 8014c96:	049b      	lsls	r3, r3, #18
 8014c98:	4013      	ands	r3, r2
 8014c9a:	d1dc      	bne.n	8014c56 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014c9c:	4b37      	ldr	r3, [pc, #220]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014c9e:	68db      	ldr	r3, [r3, #12]
 8014ca0:	4a37      	ldr	r2, [pc, #220]	@ (8014d80 <HAL_RCC_OscConfig+0x7a0>)
 8014ca2:	4013      	ands	r3, r2
 8014ca4:	0019      	movs	r1, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cae:	431a      	orrs	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cb4:	431a      	orrs	r2, r3
 8014cb6:	4b31      	ldr	r3, [pc, #196]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014cb8:	430a      	orrs	r2, r1
 8014cba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014cbe:	681a      	ldr	r2, [r3, #0]
 8014cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014cc2:	2180      	movs	r1, #128	@ 0x80
 8014cc4:	0449      	lsls	r1, r1, #17
 8014cc6:	430a      	orrs	r2, r1
 8014cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014cca:	f7f9 fb59 	bl	800e380 <HAL_GetTick>
 8014cce:	0003      	movs	r3, r0
 8014cd0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014cd2:	e008      	b.n	8014ce6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014cd4:	f7f9 fb54 	bl	800e380 <HAL_GetTick>
 8014cd8:	0002      	movs	r2, r0
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	2b02      	cmp	r3, #2
 8014ce0:	d901      	bls.n	8014ce6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8014ce2:	2303      	movs	r3, #3
 8014ce4:	e045      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014ce6:	4b25      	ldr	r3, [pc, #148]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	2380      	movs	r3, #128	@ 0x80
 8014cec:	049b      	lsls	r3, r3, #18
 8014cee:	4013      	ands	r3, r2
 8014cf0:	d0f0      	beq.n	8014cd4 <HAL_RCC_OscConfig+0x6f4>
 8014cf2:	e03d      	b.n	8014d70 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014cf4:	4b21      	ldr	r3, [pc, #132]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	4b20      	ldr	r3, [pc, #128]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014cfa:	4922      	ldr	r1, [pc, #136]	@ (8014d84 <HAL_RCC_OscConfig+0x7a4>)
 8014cfc:	400a      	ands	r2, r1
 8014cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014d00:	f7f9 fb3e 	bl	800e380 <HAL_GetTick>
 8014d04:	0003      	movs	r3, r0
 8014d06:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014d08:	e008      	b.n	8014d1c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014d0a:	f7f9 fb39 	bl	800e380 <HAL_GetTick>
 8014d0e:	0002      	movs	r2, r0
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	1ad3      	subs	r3, r2, r3
 8014d14:	2b02      	cmp	r3, #2
 8014d16:	d901      	bls.n	8014d1c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8014d18:	2303      	movs	r3, #3
 8014d1a:	e02a      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014d1c:	4b17      	ldr	r3, [pc, #92]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	2380      	movs	r3, #128	@ 0x80
 8014d22:	049b      	lsls	r3, r3, #18
 8014d24:	4013      	ands	r3, r2
 8014d26:	d1f0      	bne.n	8014d0a <HAL_RCC_OscConfig+0x72a>
 8014d28:	e022      	b.n	8014d70 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d2e:	2b01      	cmp	r3, #1
 8014d30:	d101      	bne.n	8014d36 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8014d32:	2301      	movs	r3, #1
 8014d34:	e01d      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8014d36:	4b11      	ldr	r3, [pc, #68]	@ (8014d7c <HAL_RCC_OscConfig+0x79c>)
 8014d38:	68db      	ldr	r3, [r3, #12]
 8014d3a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014d3c:	69ba      	ldr	r2, [r7, #24]
 8014d3e:	2380      	movs	r3, #128	@ 0x80
 8014d40:	025b      	lsls	r3, r3, #9
 8014d42:	401a      	ands	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d10f      	bne.n	8014d6c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014d4c:	69ba      	ldr	r2, [r7, #24]
 8014d4e:	23f0      	movs	r3, #240	@ 0xf0
 8014d50:	039b      	lsls	r3, r3, #14
 8014d52:	401a      	ands	r2, r3
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d107      	bne.n	8014d6c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014d5c:	69ba      	ldr	r2, [r7, #24]
 8014d5e:	23c0      	movs	r3, #192	@ 0xc0
 8014d60:	041b      	lsls	r3, r3, #16
 8014d62:	401a      	ands	r2, r3
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d001      	beq.n	8014d70 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	e000      	b.n	8014d72 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8014d70:	2300      	movs	r3, #0
}
 8014d72:	0018      	movs	r0, r3
 8014d74:	46bd      	mov	sp, r7
 8014d76:	b00a      	add	sp, #40	@ 0x28
 8014d78:	bdb0      	pop	{r4, r5, r7, pc}
 8014d7a:	46c0      	nop			@ (mov r8, r8)
 8014d7c:	40021000 	.word	0x40021000
 8014d80:	ff02ffff 	.word	0xff02ffff
 8014d84:	feffffff 	.word	0xfeffffff

08014d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014d88:	b5b0      	push	{r4, r5, r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d101      	bne.n	8014d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014d98:	2301      	movs	r3, #1
 8014d9a:	e128      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014d9c:	4b96      	ldr	r3, [pc, #600]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	2201      	movs	r2, #1
 8014da2:	4013      	ands	r3, r2
 8014da4:	683a      	ldr	r2, [r7, #0]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d91e      	bls.n	8014de8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014daa:	4b93      	ldr	r3, [pc, #588]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	2201      	movs	r2, #1
 8014db0:	4393      	bics	r3, r2
 8014db2:	0019      	movs	r1, r3
 8014db4:	4b90      	ldr	r3, [pc, #576]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014db6:	683a      	ldr	r2, [r7, #0]
 8014db8:	430a      	orrs	r2, r1
 8014dba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014dbc:	f7f9 fae0 	bl	800e380 <HAL_GetTick>
 8014dc0:	0003      	movs	r3, r0
 8014dc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014dc4:	e009      	b.n	8014dda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014dc6:	f7f9 fadb 	bl	800e380 <HAL_GetTick>
 8014dca:	0002      	movs	r2, r0
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	1ad3      	subs	r3, r2, r3
 8014dd0:	4a8a      	ldr	r2, [pc, #552]	@ (8014ffc <HAL_RCC_ClockConfig+0x274>)
 8014dd2:	4293      	cmp	r3, r2
 8014dd4:	d901      	bls.n	8014dda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8014dd6:	2303      	movs	r3, #3
 8014dd8:	e109      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014dda:	4b87      	ldr	r3, [pc, #540]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	2201      	movs	r2, #1
 8014de0:	4013      	ands	r3, r2
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d1ee      	bne.n	8014dc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	2202      	movs	r2, #2
 8014dee:	4013      	ands	r3, r2
 8014df0:	d009      	beq.n	8014e06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014df2:	4b83      	ldr	r3, [pc, #524]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	22f0      	movs	r2, #240	@ 0xf0
 8014df8:	4393      	bics	r3, r2
 8014dfa:	0019      	movs	r1, r3
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	689a      	ldr	r2, [r3, #8]
 8014e00:	4b7f      	ldr	r3, [pc, #508]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014e02:	430a      	orrs	r2, r1
 8014e04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	4013      	ands	r3, r2
 8014e0e:	d100      	bne.n	8014e12 <HAL_RCC_ClockConfig+0x8a>
 8014e10:	e089      	b.n	8014f26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	2b02      	cmp	r3, #2
 8014e18:	d107      	bne.n	8014e2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014e1a:	4b79      	ldr	r3, [pc, #484]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	2380      	movs	r3, #128	@ 0x80
 8014e20:	029b      	lsls	r3, r3, #10
 8014e22:	4013      	ands	r3, r2
 8014e24:	d120      	bne.n	8014e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014e26:	2301      	movs	r3, #1
 8014e28:	e0e1      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	2b03      	cmp	r3, #3
 8014e30:	d107      	bne.n	8014e42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014e32:	4b73      	ldr	r3, [pc, #460]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014e34:	681a      	ldr	r2, [r3, #0]
 8014e36:	2380      	movs	r3, #128	@ 0x80
 8014e38:	049b      	lsls	r3, r3, #18
 8014e3a:	4013      	ands	r3, r2
 8014e3c:	d114      	bne.n	8014e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014e3e:	2301      	movs	r3, #1
 8014e40:	e0d5      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	2b01      	cmp	r3, #1
 8014e48:	d106      	bne.n	8014e58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2204      	movs	r2, #4
 8014e50:	4013      	ands	r3, r2
 8014e52:	d109      	bne.n	8014e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014e54:	2301      	movs	r3, #1
 8014e56:	e0ca      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014e58:	4b69      	ldr	r3, [pc, #420]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	2380      	movs	r3, #128	@ 0x80
 8014e5e:	009b      	lsls	r3, r3, #2
 8014e60:	4013      	ands	r3, r2
 8014e62:	d101      	bne.n	8014e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014e64:	2301      	movs	r3, #1
 8014e66:	e0c2      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014e68:	4b65      	ldr	r3, [pc, #404]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014e6a:	68db      	ldr	r3, [r3, #12]
 8014e6c:	2203      	movs	r2, #3
 8014e6e:	4393      	bics	r3, r2
 8014e70:	0019      	movs	r1, r3
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	685a      	ldr	r2, [r3, #4]
 8014e76:	4b62      	ldr	r3, [pc, #392]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014e78:	430a      	orrs	r2, r1
 8014e7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014e7c:	f7f9 fa80 	bl	800e380 <HAL_GetTick>
 8014e80:	0003      	movs	r3, r0
 8014e82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	2b02      	cmp	r3, #2
 8014e8a:	d111      	bne.n	8014eb0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014e8c:	e009      	b.n	8014ea2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e8e:	f7f9 fa77 	bl	800e380 <HAL_GetTick>
 8014e92:	0002      	movs	r2, r0
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	4a58      	ldr	r2, [pc, #352]	@ (8014ffc <HAL_RCC_ClockConfig+0x274>)
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d901      	bls.n	8014ea2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8014e9e:	2303      	movs	r3, #3
 8014ea0:	e0a5      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014ea2:	4b57      	ldr	r3, [pc, #348]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014ea4:	68db      	ldr	r3, [r3, #12]
 8014ea6:	220c      	movs	r2, #12
 8014ea8:	4013      	ands	r3, r2
 8014eaa:	2b08      	cmp	r3, #8
 8014eac:	d1ef      	bne.n	8014e8e <HAL_RCC_ClockConfig+0x106>
 8014eae:	e03a      	b.n	8014f26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	2b03      	cmp	r3, #3
 8014eb6:	d111      	bne.n	8014edc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014eb8:	e009      	b.n	8014ece <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014eba:	f7f9 fa61 	bl	800e380 <HAL_GetTick>
 8014ebe:	0002      	movs	r2, r0
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	1ad3      	subs	r3, r2, r3
 8014ec4:	4a4d      	ldr	r2, [pc, #308]	@ (8014ffc <HAL_RCC_ClockConfig+0x274>)
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	d901      	bls.n	8014ece <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014eca:	2303      	movs	r3, #3
 8014ecc:	e08f      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014ece:	4b4c      	ldr	r3, [pc, #304]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014ed0:	68db      	ldr	r3, [r3, #12]
 8014ed2:	220c      	movs	r2, #12
 8014ed4:	4013      	ands	r3, r2
 8014ed6:	2b0c      	cmp	r3, #12
 8014ed8:	d1ef      	bne.n	8014eba <HAL_RCC_ClockConfig+0x132>
 8014eda:	e024      	b.n	8014f26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	2b01      	cmp	r3, #1
 8014ee2:	d11b      	bne.n	8014f1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014ee4:	e009      	b.n	8014efa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014ee6:	f7f9 fa4b 	bl	800e380 <HAL_GetTick>
 8014eea:	0002      	movs	r2, r0
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	1ad3      	subs	r3, r2, r3
 8014ef0:	4a42      	ldr	r2, [pc, #264]	@ (8014ffc <HAL_RCC_ClockConfig+0x274>)
 8014ef2:	4293      	cmp	r3, r2
 8014ef4:	d901      	bls.n	8014efa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8014ef6:	2303      	movs	r3, #3
 8014ef8:	e079      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014efa:	4b41      	ldr	r3, [pc, #260]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014efc:	68db      	ldr	r3, [r3, #12]
 8014efe:	220c      	movs	r2, #12
 8014f00:	4013      	ands	r3, r2
 8014f02:	2b04      	cmp	r3, #4
 8014f04:	d1ef      	bne.n	8014ee6 <HAL_RCC_ClockConfig+0x15e>
 8014f06:	e00e      	b.n	8014f26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014f08:	f7f9 fa3a 	bl	800e380 <HAL_GetTick>
 8014f0c:	0002      	movs	r2, r0
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	4a3a      	ldr	r2, [pc, #232]	@ (8014ffc <HAL_RCC_ClockConfig+0x274>)
 8014f14:	4293      	cmp	r3, r2
 8014f16:	d901      	bls.n	8014f1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014f18:	2303      	movs	r3, #3
 8014f1a:	e068      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014f1c:	4b38      	ldr	r3, [pc, #224]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	220c      	movs	r2, #12
 8014f22:	4013      	ands	r3, r2
 8014f24:	d1f0      	bne.n	8014f08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014f26:	4b34      	ldr	r3, [pc, #208]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	4013      	ands	r3, r2
 8014f2e:	683a      	ldr	r2, [r7, #0]
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d21e      	bcs.n	8014f72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014f34:	4b30      	ldr	r3, [pc, #192]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	2201      	movs	r2, #1
 8014f3a:	4393      	bics	r3, r2
 8014f3c:	0019      	movs	r1, r3
 8014f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014f40:	683a      	ldr	r2, [r7, #0]
 8014f42:	430a      	orrs	r2, r1
 8014f44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014f46:	f7f9 fa1b 	bl	800e380 <HAL_GetTick>
 8014f4a:	0003      	movs	r3, r0
 8014f4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014f4e:	e009      	b.n	8014f64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014f50:	f7f9 fa16 	bl	800e380 <HAL_GetTick>
 8014f54:	0002      	movs	r2, r0
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	1ad3      	subs	r3, r2, r3
 8014f5a:	4a28      	ldr	r2, [pc, #160]	@ (8014ffc <HAL_RCC_ClockConfig+0x274>)
 8014f5c:	4293      	cmp	r3, r2
 8014f5e:	d901      	bls.n	8014f64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8014f60:	2303      	movs	r3, #3
 8014f62:	e044      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014f64:	4b24      	ldr	r3, [pc, #144]	@ (8014ff8 <HAL_RCC_ClockConfig+0x270>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2201      	movs	r2, #1
 8014f6a:	4013      	ands	r3, r2
 8014f6c:	683a      	ldr	r2, [r7, #0]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d1ee      	bne.n	8014f50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2204      	movs	r2, #4
 8014f78:	4013      	ands	r3, r2
 8014f7a:	d009      	beq.n	8014f90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014f7c:	4b20      	ldr	r3, [pc, #128]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014f7e:	68db      	ldr	r3, [r3, #12]
 8014f80:	4a20      	ldr	r2, [pc, #128]	@ (8015004 <HAL_RCC_ClockConfig+0x27c>)
 8014f82:	4013      	ands	r3, r2
 8014f84:	0019      	movs	r1, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	68da      	ldr	r2, [r3, #12]
 8014f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014f8c:	430a      	orrs	r2, r1
 8014f8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2208      	movs	r2, #8
 8014f96:	4013      	ands	r3, r2
 8014f98:	d00a      	beq.n	8014fb0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014f9a:	4b19      	ldr	r3, [pc, #100]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8015008 <HAL_RCC_ClockConfig+0x280>)
 8014fa0:	4013      	ands	r3, r2
 8014fa2:	0019      	movs	r1, r3
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	691b      	ldr	r3, [r3, #16]
 8014fa8:	00da      	lsls	r2, r3, #3
 8014faa:	4b15      	ldr	r3, [pc, #84]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014fac:	430a      	orrs	r2, r1
 8014fae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014fb0:	f000 f832 	bl	8015018 <HAL_RCC_GetSysClockFreq>
 8014fb4:	0001      	movs	r1, r0
 8014fb6:	4b12      	ldr	r3, [pc, #72]	@ (8015000 <HAL_RCC_ClockConfig+0x278>)
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	091b      	lsrs	r3, r3, #4
 8014fbc:	220f      	movs	r2, #15
 8014fbe:	4013      	ands	r3, r2
 8014fc0:	4a12      	ldr	r2, [pc, #72]	@ (801500c <HAL_RCC_ClockConfig+0x284>)
 8014fc2:	5cd3      	ldrb	r3, [r2, r3]
 8014fc4:	000a      	movs	r2, r1
 8014fc6:	40da      	lsrs	r2, r3
 8014fc8:	4b11      	ldr	r3, [pc, #68]	@ (8015010 <HAL_RCC_ClockConfig+0x288>)
 8014fca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014fcc:	4b11      	ldr	r3, [pc, #68]	@ (8015014 <HAL_RCC_ClockConfig+0x28c>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	250b      	movs	r5, #11
 8014fd2:	197c      	adds	r4, r7, r5
 8014fd4:	0018      	movs	r0, r3
 8014fd6:	f7f9 f98d 	bl	800e2f4 <HAL_InitTick>
 8014fda:	0003      	movs	r3, r0
 8014fdc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8014fde:	197b      	adds	r3, r7, r5
 8014fe0:	781b      	ldrb	r3, [r3, #0]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d002      	beq.n	8014fec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8014fe6:	197b      	adds	r3, r7, r5
 8014fe8:	781b      	ldrb	r3, [r3, #0]
 8014fea:	e000      	b.n	8014fee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8014fec:	2300      	movs	r3, #0
}
 8014fee:	0018      	movs	r0, r3
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	b004      	add	sp, #16
 8014ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8014ff6:	46c0      	nop			@ (mov r8, r8)
 8014ff8:	40022000 	.word	0x40022000
 8014ffc:	00001388 	.word	0x00001388
 8015000:	40021000 	.word	0x40021000
 8015004:	fffff8ff 	.word	0xfffff8ff
 8015008:	ffffc7ff 	.word	0xffffc7ff
 801500c:	0802492c 	.word	0x0802492c
 8015010:	200000c8 	.word	0x200000c8
 8015014:	200000d8 	.word	0x200000d8

08015018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015018:	b5b0      	push	{r4, r5, r7, lr}
 801501a:	b08e      	sub	sp, #56	@ 0x38
 801501c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801501e:	4b4c      	ldr	r3, [pc, #304]	@ (8015150 <HAL_RCC_GetSysClockFreq+0x138>)
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015026:	230c      	movs	r3, #12
 8015028:	4013      	ands	r3, r2
 801502a:	2b0c      	cmp	r3, #12
 801502c:	d014      	beq.n	8015058 <HAL_RCC_GetSysClockFreq+0x40>
 801502e:	d900      	bls.n	8015032 <HAL_RCC_GetSysClockFreq+0x1a>
 8015030:	e07b      	b.n	801512a <HAL_RCC_GetSysClockFreq+0x112>
 8015032:	2b04      	cmp	r3, #4
 8015034:	d002      	beq.n	801503c <HAL_RCC_GetSysClockFreq+0x24>
 8015036:	2b08      	cmp	r3, #8
 8015038:	d00b      	beq.n	8015052 <HAL_RCC_GetSysClockFreq+0x3a>
 801503a:	e076      	b.n	801512a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801503c:	4b44      	ldr	r3, [pc, #272]	@ (8015150 <HAL_RCC_GetSysClockFreq+0x138>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2210      	movs	r2, #16
 8015042:	4013      	ands	r3, r2
 8015044:	d002      	beq.n	801504c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015046:	4b43      	ldr	r3, [pc, #268]	@ (8015154 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015048:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801504a:	e07c      	b.n	8015146 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801504c:	4b42      	ldr	r3, [pc, #264]	@ (8015158 <HAL_RCC_GetSysClockFreq+0x140>)
 801504e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015050:	e079      	b.n	8015146 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015052:	4b42      	ldr	r3, [pc, #264]	@ (801515c <HAL_RCC_GetSysClockFreq+0x144>)
 8015054:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015056:	e076      	b.n	8015146 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801505a:	0c9a      	lsrs	r2, r3, #18
 801505c:	230f      	movs	r3, #15
 801505e:	401a      	ands	r2, r3
 8015060:	4b3f      	ldr	r3, [pc, #252]	@ (8015160 <HAL_RCC_GetSysClockFreq+0x148>)
 8015062:	5c9b      	ldrb	r3, [r3, r2]
 8015064:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015068:	0d9a      	lsrs	r2, r3, #22
 801506a:	2303      	movs	r3, #3
 801506c:	4013      	ands	r3, r2
 801506e:	3301      	adds	r3, #1
 8015070:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015072:	4b37      	ldr	r3, [pc, #220]	@ (8015150 <HAL_RCC_GetSysClockFreq+0x138>)
 8015074:	68da      	ldr	r2, [r3, #12]
 8015076:	2380      	movs	r3, #128	@ 0x80
 8015078:	025b      	lsls	r3, r3, #9
 801507a:	4013      	ands	r3, r2
 801507c:	d01a      	beq.n	80150b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015080:	61bb      	str	r3, [r7, #24]
 8015082:	2300      	movs	r3, #0
 8015084:	61fb      	str	r3, [r7, #28]
 8015086:	4a35      	ldr	r2, [pc, #212]	@ (801515c <HAL_RCC_GetSysClockFreq+0x144>)
 8015088:	2300      	movs	r3, #0
 801508a:	69b8      	ldr	r0, [r7, #24]
 801508c:	69f9      	ldr	r1, [r7, #28]
 801508e:	f7eb fa97 	bl	80005c0 <__aeabi_lmul>
 8015092:	0002      	movs	r2, r0
 8015094:	000b      	movs	r3, r1
 8015096:	0010      	movs	r0, r2
 8015098:	0019      	movs	r1, r3
 801509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509c:	613b      	str	r3, [r7, #16]
 801509e:	2300      	movs	r3, #0
 80150a0:	617b      	str	r3, [r7, #20]
 80150a2:	693a      	ldr	r2, [r7, #16]
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	f7eb fa6b 	bl	8000580 <__aeabi_uldivmod>
 80150aa:	0002      	movs	r2, r0
 80150ac:	000b      	movs	r3, r1
 80150ae:	0013      	movs	r3, r2
 80150b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80150b2:	e037      	b.n	8015124 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80150b4:	4b26      	ldr	r3, [pc, #152]	@ (8015150 <HAL_RCC_GetSysClockFreq+0x138>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2210      	movs	r2, #16
 80150ba:	4013      	ands	r3, r2
 80150bc:	d01a      	beq.n	80150f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80150be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150c0:	60bb      	str	r3, [r7, #8]
 80150c2:	2300      	movs	r3, #0
 80150c4:	60fb      	str	r3, [r7, #12]
 80150c6:	4a23      	ldr	r2, [pc, #140]	@ (8015154 <HAL_RCC_GetSysClockFreq+0x13c>)
 80150c8:	2300      	movs	r3, #0
 80150ca:	68b8      	ldr	r0, [r7, #8]
 80150cc:	68f9      	ldr	r1, [r7, #12]
 80150ce:	f7eb fa77 	bl	80005c0 <__aeabi_lmul>
 80150d2:	0002      	movs	r2, r0
 80150d4:	000b      	movs	r3, r1
 80150d6:	0010      	movs	r0, r2
 80150d8:	0019      	movs	r1, r3
 80150da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150dc:	603b      	str	r3, [r7, #0]
 80150de:	2300      	movs	r3, #0
 80150e0:	607b      	str	r3, [r7, #4]
 80150e2:	683a      	ldr	r2, [r7, #0]
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f7eb fa4b 	bl	8000580 <__aeabi_uldivmod>
 80150ea:	0002      	movs	r2, r0
 80150ec:	000b      	movs	r3, r1
 80150ee:	0013      	movs	r3, r2
 80150f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80150f2:	e017      	b.n	8015124 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80150f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150f6:	0018      	movs	r0, r3
 80150f8:	2300      	movs	r3, #0
 80150fa:	0019      	movs	r1, r3
 80150fc:	4a16      	ldr	r2, [pc, #88]	@ (8015158 <HAL_RCC_GetSysClockFreq+0x140>)
 80150fe:	2300      	movs	r3, #0
 8015100:	f7eb fa5e 	bl	80005c0 <__aeabi_lmul>
 8015104:	0002      	movs	r2, r0
 8015106:	000b      	movs	r3, r1
 8015108:	0010      	movs	r0, r2
 801510a:	0019      	movs	r1, r3
 801510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801510e:	001c      	movs	r4, r3
 8015110:	2300      	movs	r3, #0
 8015112:	001d      	movs	r5, r3
 8015114:	0022      	movs	r2, r4
 8015116:	002b      	movs	r3, r5
 8015118:	f7eb fa32 	bl	8000580 <__aeabi_uldivmod>
 801511c:	0002      	movs	r2, r0
 801511e:	000b      	movs	r3, r1
 8015120:	0013      	movs	r3, r2
 8015122:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015126:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015128:	e00d      	b.n	8015146 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801512a:	4b09      	ldr	r3, [pc, #36]	@ (8015150 <HAL_RCC_GetSysClockFreq+0x138>)
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	0b5b      	lsrs	r3, r3, #13
 8015130:	2207      	movs	r2, #7
 8015132:	4013      	ands	r3, r2
 8015134:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015136:	6a3b      	ldr	r3, [r7, #32]
 8015138:	3301      	adds	r3, #1
 801513a:	2280      	movs	r2, #128	@ 0x80
 801513c:	0212      	lsls	r2, r2, #8
 801513e:	409a      	lsls	r2, r3
 8015140:	0013      	movs	r3, r2
 8015142:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015144:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015148:	0018      	movs	r0, r3
 801514a:	46bd      	mov	sp, r7
 801514c:	b00e      	add	sp, #56	@ 0x38
 801514e:	bdb0      	pop	{r4, r5, r7, pc}
 8015150:	40021000 	.word	0x40021000
 8015154:	003d0900 	.word	0x003d0900
 8015158:	00f42400 	.word	0x00f42400
 801515c:	007a1200 	.word	0x007a1200
 8015160:	08024944 	.word	0x08024944

08015164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015168:	4b02      	ldr	r3, [pc, #8]	@ (8015174 <HAL_RCC_GetHCLKFreq+0x10>)
 801516a:	681b      	ldr	r3, [r3, #0]
}
 801516c:	0018      	movs	r0, r3
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	46c0      	nop			@ (mov r8, r8)
 8015174:	200000c8 	.word	0x200000c8

08015178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801517c:	f7ff fff2 	bl	8015164 <HAL_RCC_GetHCLKFreq>
 8015180:	0001      	movs	r1, r0
 8015182:	4b06      	ldr	r3, [pc, #24]	@ (801519c <HAL_RCC_GetPCLK1Freq+0x24>)
 8015184:	68db      	ldr	r3, [r3, #12]
 8015186:	0a1b      	lsrs	r3, r3, #8
 8015188:	2207      	movs	r2, #7
 801518a:	4013      	ands	r3, r2
 801518c:	4a04      	ldr	r2, [pc, #16]	@ (80151a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801518e:	5cd3      	ldrb	r3, [r2, r3]
 8015190:	40d9      	lsrs	r1, r3
 8015192:	000b      	movs	r3, r1
}
 8015194:	0018      	movs	r0, r3
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	46c0      	nop			@ (mov r8, r8)
 801519c:	40021000 	.word	0x40021000
 80151a0:	0802493c 	.word	0x0802493c

080151a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80151a8:	f7ff ffdc 	bl	8015164 <HAL_RCC_GetHCLKFreq>
 80151ac:	0001      	movs	r1, r0
 80151ae:	4b06      	ldr	r3, [pc, #24]	@ (80151c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	0adb      	lsrs	r3, r3, #11
 80151b4:	2207      	movs	r2, #7
 80151b6:	4013      	ands	r3, r2
 80151b8:	4a04      	ldr	r2, [pc, #16]	@ (80151cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80151ba:	5cd3      	ldrb	r3, [r2, r3]
 80151bc:	40d9      	lsrs	r1, r3
 80151be:	000b      	movs	r3, r1
}
 80151c0:	0018      	movs	r0, r3
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	46c0      	nop			@ (mov r8, r8)
 80151c8:	40021000 	.word	0x40021000
 80151cc:	0802493c 	.word	0x0802493c

080151d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b086      	sub	sp, #24
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80151d8:	2017      	movs	r0, #23
 80151da:	183b      	adds	r3, r7, r0
 80151dc:	2200      	movs	r2, #0
 80151de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2220      	movs	r2, #32
 80151e6:	4013      	ands	r3, r2
 80151e8:	d100      	bne.n	80151ec <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80151ea:	e0c7      	b.n	801537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80151ec:	4b9b      	ldr	r3, [pc, #620]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80151f0:	2380      	movs	r3, #128	@ 0x80
 80151f2:	055b      	lsls	r3, r3, #21
 80151f4:	4013      	ands	r3, r2
 80151f6:	d109      	bne.n	801520c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80151f8:	4b98      	ldr	r3, [pc, #608]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80151fc:	4b97      	ldr	r3, [pc, #604]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151fe:	2180      	movs	r1, #128	@ 0x80
 8015200:	0549      	lsls	r1, r1, #21
 8015202:	430a      	orrs	r2, r1
 8015204:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015206:	183b      	adds	r3, r7, r0
 8015208:	2201      	movs	r2, #1
 801520a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801520c:	4b94      	ldr	r3, [pc, #592]	@ (8015460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	2380      	movs	r3, #128	@ 0x80
 8015212:	005b      	lsls	r3, r3, #1
 8015214:	4013      	ands	r3, r2
 8015216:	d11a      	bne.n	801524e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015218:	4b91      	ldr	r3, [pc, #580]	@ (8015460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	4b90      	ldr	r3, [pc, #576]	@ (8015460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801521e:	2180      	movs	r1, #128	@ 0x80
 8015220:	0049      	lsls	r1, r1, #1
 8015222:	430a      	orrs	r2, r1
 8015224:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015226:	f7f9 f8ab 	bl	800e380 <HAL_GetTick>
 801522a:	0003      	movs	r3, r0
 801522c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801522e:	e008      	b.n	8015242 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015230:	f7f9 f8a6 	bl	800e380 <HAL_GetTick>
 8015234:	0002      	movs	r2, r0
 8015236:	693b      	ldr	r3, [r7, #16]
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	2b64      	cmp	r3, #100	@ 0x64
 801523c:	d901      	bls.n	8015242 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801523e:	2303      	movs	r3, #3
 8015240:	e107      	b.n	8015452 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015242:	4b87      	ldr	r3, [pc, #540]	@ (8015460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015244:	681a      	ldr	r2, [r3, #0]
 8015246:	2380      	movs	r3, #128	@ 0x80
 8015248:	005b      	lsls	r3, r3, #1
 801524a:	4013      	ands	r3, r2
 801524c:	d0f0      	beq.n	8015230 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801524e:	4b83      	ldr	r3, [pc, #524]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015250:	681a      	ldr	r2, [r3, #0]
 8015252:	23c0      	movs	r3, #192	@ 0xc0
 8015254:	039b      	lsls	r3, r3, #14
 8015256:	4013      	ands	r3, r2
 8015258:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	685a      	ldr	r2, [r3, #4]
 801525e:	23c0      	movs	r3, #192	@ 0xc0
 8015260:	039b      	lsls	r3, r3, #14
 8015262:	4013      	ands	r3, r2
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	429a      	cmp	r2, r3
 8015268:	d013      	beq.n	8015292 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	685a      	ldr	r2, [r3, #4]
 801526e:	23c0      	movs	r3, #192	@ 0xc0
 8015270:	029b      	lsls	r3, r3, #10
 8015272:	401a      	ands	r2, r3
 8015274:	23c0      	movs	r3, #192	@ 0xc0
 8015276:	029b      	lsls	r3, r3, #10
 8015278:	429a      	cmp	r2, r3
 801527a:	d10a      	bne.n	8015292 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801527c:	4b77      	ldr	r3, [pc, #476]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	2380      	movs	r3, #128	@ 0x80
 8015282:	029b      	lsls	r3, r3, #10
 8015284:	401a      	ands	r2, r3
 8015286:	2380      	movs	r3, #128	@ 0x80
 8015288:	029b      	lsls	r3, r3, #10
 801528a:	429a      	cmp	r2, r3
 801528c:	d101      	bne.n	8015292 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801528e:	2301      	movs	r3, #1
 8015290:	e0df      	b.n	8015452 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015292:	4b72      	ldr	r3, [pc, #456]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015296:	23c0      	movs	r3, #192	@ 0xc0
 8015298:	029b      	lsls	r3, r3, #10
 801529a:	4013      	ands	r3, r2
 801529c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d03b      	beq.n	801531c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	685a      	ldr	r2, [r3, #4]
 80152a8:	23c0      	movs	r3, #192	@ 0xc0
 80152aa:	029b      	lsls	r3, r3, #10
 80152ac:	4013      	ands	r3, r2
 80152ae:	68fa      	ldr	r2, [r7, #12]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d033      	beq.n	801531c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	2220      	movs	r2, #32
 80152ba:	4013      	ands	r3, r2
 80152bc:	d02e      	beq.n	801531c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80152be:	4b67      	ldr	r3, [pc, #412]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80152c2:	4a68      	ldr	r2, [pc, #416]	@ (8015464 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80152c4:	4013      	ands	r3, r2
 80152c6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80152c8:	4b64      	ldr	r3, [pc, #400]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80152cc:	4b63      	ldr	r3, [pc, #396]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152ce:	2180      	movs	r1, #128	@ 0x80
 80152d0:	0309      	lsls	r1, r1, #12
 80152d2:	430a      	orrs	r2, r1
 80152d4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80152d6:	4b61      	ldr	r3, [pc, #388]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80152da:	4b60      	ldr	r3, [pc, #384]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152dc:	4962      	ldr	r1, [pc, #392]	@ (8015468 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80152de:	400a      	ands	r2, r1
 80152e0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80152e2:	4b5e      	ldr	r3, [pc, #376]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80152e8:	68fa      	ldr	r2, [r7, #12]
 80152ea:	2380      	movs	r3, #128	@ 0x80
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	4013      	ands	r3, r2
 80152f0:	d014      	beq.n	801531c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80152f2:	f7f9 f845 	bl	800e380 <HAL_GetTick>
 80152f6:	0003      	movs	r3, r0
 80152f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80152fa:	e009      	b.n	8015310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80152fc:	f7f9 f840 	bl	800e380 <HAL_GetTick>
 8015300:	0002      	movs	r2, r0
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	1ad3      	subs	r3, r2, r3
 8015306:	4a59      	ldr	r2, [pc, #356]	@ (801546c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015308:	4293      	cmp	r3, r2
 801530a:	d901      	bls.n	8015310 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801530c:	2303      	movs	r3, #3
 801530e:	e0a0      	b.n	8015452 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015310:	4b52      	ldr	r3, [pc, #328]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015314:	2380      	movs	r3, #128	@ 0x80
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	4013      	ands	r3, r2
 801531a:	d0ef      	beq.n	80152fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2220      	movs	r2, #32
 8015322:	4013      	ands	r3, r2
 8015324:	d01f      	beq.n	8015366 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	685a      	ldr	r2, [r3, #4]
 801532a:	23c0      	movs	r3, #192	@ 0xc0
 801532c:	029b      	lsls	r3, r3, #10
 801532e:	401a      	ands	r2, r3
 8015330:	23c0      	movs	r3, #192	@ 0xc0
 8015332:	029b      	lsls	r3, r3, #10
 8015334:	429a      	cmp	r2, r3
 8015336:	d10c      	bne.n	8015352 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015338:	4b48      	ldr	r3, [pc, #288]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	4a4c      	ldr	r2, [pc, #304]	@ (8015470 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801533e:	4013      	ands	r3, r2
 8015340:	0019      	movs	r1, r3
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	685a      	ldr	r2, [r3, #4]
 8015346:	23c0      	movs	r3, #192	@ 0xc0
 8015348:	039b      	lsls	r3, r3, #14
 801534a:	401a      	ands	r2, r3
 801534c:	4b43      	ldr	r3, [pc, #268]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801534e:	430a      	orrs	r2, r1
 8015350:	601a      	str	r2, [r3, #0]
 8015352:	4b42      	ldr	r3, [pc, #264]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015354:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	685a      	ldr	r2, [r3, #4]
 801535a:	23c0      	movs	r3, #192	@ 0xc0
 801535c:	029b      	lsls	r3, r3, #10
 801535e:	401a      	ands	r2, r3
 8015360:	4b3e      	ldr	r3, [pc, #248]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015362:	430a      	orrs	r2, r1
 8015364:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015366:	2317      	movs	r3, #23
 8015368:	18fb      	adds	r3, r7, r3
 801536a:	781b      	ldrb	r3, [r3, #0]
 801536c:	2b01      	cmp	r3, #1
 801536e:	d105      	bne.n	801537c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015370:	4b3a      	ldr	r3, [pc, #232]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015374:	4b39      	ldr	r3, [pc, #228]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015376:	493f      	ldr	r1, [pc, #252]	@ (8015474 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015378:	400a      	ands	r2, r1
 801537a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	2201      	movs	r2, #1
 8015382:	4013      	ands	r3, r2
 8015384:	d009      	beq.n	801539a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015386:	4b35      	ldr	r3, [pc, #212]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801538a:	2203      	movs	r2, #3
 801538c:	4393      	bics	r3, r2
 801538e:	0019      	movs	r1, r3
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	689a      	ldr	r2, [r3, #8]
 8015394:	4b31      	ldr	r3, [pc, #196]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015396:	430a      	orrs	r2, r1
 8015398:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2202      	movs	r2, #2
 80153a0:	4013      	ands	r3, r2
 80153a2:	d009      	beq.n	80153b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80153a4:	4b2d      	ldr	r3, [pc, #180]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80153a8:	220c      	movs	r2, #12
 80153aa:	4393      	bics	r3, r2
 80153ac:	0019      	movs	r1, r3
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	68da      	ldr	r2, [r3, #12]
 80153b2:	4b2a      	ldr	r3, [pc, #168]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153b4:	430a      	orrs	r2, r1
 80153b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	2204      	movs	r2, #4
 80153be:	4013      	ands	r3, r2
 80153c0:	d009      	beq.n	80153d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80153c2:	4b26      	ldr	r3, [pc, #152]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80153c6:	4a2c      	ldr	r2, [pc, #176]	@ (8015478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80153c8:	4013      	ands	r3, r2
 80153ca:	0019      	movs	r1, r3
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	691a      	ldr	r2, [r3, #16]
 80153d0:	4b22      	ldr	r3, [pc, #136]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153d2:	430a      	orrs	r2, r1
 80153d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	2208      	movs	r2, #8
 80153dc:	4013      	ands	r3, r2
 80153de:	d009      	beq.n	80153f4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80153e0:	4b1e      	ldr	r3, [pc, #120]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80153e4:	4a25      	ldr	r2, [pc, #148]	@ (801547c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80153e6:	4013      	ands	r3, r2
 80153e8:	0019      	movs	r1, r3
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	695a      	ldr	r2, [r3, #20]
 80153ee:	4b1b      	ldr	r3, [pc, #108]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153f0:	430a      	orrs	r2, r1
 80153f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	681a      	ldr	r2, [r3, #0]
 80153f8:	2380      	movs	r3, #128	@ 0x80
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	4013      	ands	r3, r2
 80153fe:	d009      	beq.n	8015414 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015400:	4b16      	ldr	r3, [pc, #88]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015404:	4a17      	ldr	r2, [pc, #92]	@ (8015464 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015406:	4013      	ands	r3, r2
 8015408:	0019      	movs	r1, r3
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	699a      	ldr	r2, [r3, #24]
 801540e:	4b13      	ldr	r3, [pc, #76]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015410:	430a      	orrs	r2, r1
 8015412:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	2240      	movs	r2, #64	@ 0x40
 801541a:	4013      	ands	r3, r2
 801541c:	d009      	beq.n	8015432 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801541e:	4b0f      	ldr	r3, [pc, #60]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015422:	4a17      	ldr	r2, [pc, #92]	@ (8015480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015424:	4013      	ands	r3, r2
 8015426:	0019      	movs	r1, r3
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6a1a      	ldr	r2, [r3, #32]
 801542c:	4b0b      	ldr	r3, [pc, #44]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801542e:	430a      	orrs	r2, r1
 8015430:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2280      	movs	r2, #128	@ 0x80
 8015438:	4013      	ands	r3, r2
 801543a:	d009      	beq.n	8015450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801543c:	4b07      	ldr	r3, [pc, #28]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801543e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015440:	4a10      	ldr	r2, [pc, #64]	@ (8015484 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015442:	4013      	ands	r3, r2
 8015444:	0019      	movs	r1, r3
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	69da      	ldr	r2, [r3, #28]
 801544a:	4b04      	ldr	r3, [pc, #16]	@ (801545c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801544c:	430a      	orrs	r2, r1
 801544e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015450:	2300      	movs	r3, #0
}
 8015452:	0018      	movs	r0, r3
 8015454:	46bd      	mov	sp, r7
 8015456:	b006      	add	sp, #24
 8015458:	bd80      	pop	{r7, pc}
 801545a:	46c0      	nop			@ (mov r8, r8)
 801545c:	40021000 	.word	0x40021000
 8015460:	40007000 	.word	0x40007000
 8015464:	fffcffff 	.word	0xfffcffff
 8015468:	fff7ffff 	.word	0xfff7ffff
 801546c:	00001388 	.word	0x00001388
 8015470:	ffcfffff 	.word	0xffcfffff
 8015474:	efffffff 	.word	0xefffffff
 8015478:	fffff3ff 	.word	0xfffff3ff
 801547c:	ffffcfff 	.word	0xffffcfff
 8015480:	fbffffff 	.word	0xfbffffff
 8015484:	fff3ffff 	.word	0xfff3ffff

08015488 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015488:	b5b0      	push	{r4, r5, r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015490:	230f      	movs	r3, #15
 8015492:	18fb      	adds	r3, r7, r3
 8015494:	2201      	movs	r2, #1
 8015496:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d101      	bne.n	80154a2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801549e:	2301      	movs	r3, #1
 80154a0:	e088      	b.n	80155b4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2221      	movs	r2, #33	@ 0x21
 80154a6:	5c9b      	ldrb	r3, [r3, r2]
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d107      	bne.n	80154be <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2220      	movs	r2, #32
 80154b2:	2100      	movs	r1, #0
 80154b4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	0018      	movs	r0, r3
 80154ba:	f7f3 fb89 	bl	8008bd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	2221      	movs	r2, #33	@ 0x21
 80154c2:	2102      	movs	r1, #2
 80154c4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	68db      	ldr	r3, [r3, #12]
 80154cc:	2210      	movs	r2, #16
 80154ce:	4013      	ands	r3, r2
 80154d0:	2b10      	cmp	r3, #16
 80154d2:	d05f      	beq.n	8015594 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	22ca      	movs	r2, #202	@ 0xca
 80154da:	625a      	str	r2, [r3, #36]	@ 0x24
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	2253      	movs	r2, #83	@ 0x53
 80154e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80154e4:	250f      	movs	r5, #15
 80154e6:	197c      	adds	r4, r7, r5
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	0018      	movs	r0, r3
 80154ec:	f000 fa7c 	bl	80159e8 <RTC_EnterInitMode>
 80154f0:	0003      	movs	r3, r0
 80154f2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80154f4:	0028      	movs	r0, r5
 80154f6:	183b      	adds	r3, r7, r0
 80154f8:	781b      	ldrb	r3, [r3, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d12c      	bne.n	8015558 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	689a      	ldr	r2, [r3, #8]
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	492c      	ldr	r1, [pc, #176]	@ (80155bc <HAL_RTC_Init+0x134>)
 801550a:	400a      	ands	r2, r1
 801550c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	6899      	ldr	r1, [r3, #8]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	685a      	ldr	r2, [r3, #4]
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	691b      	ldr	r3, [r3, #16]
 801551c:	431a      	orrs	r2, r3
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	699b      	ldr	r3, [r3, #24]
 8015522:	431a      	orrs	r2, r3
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	430a      	orrs	r2, r1
 801552a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	68d2      	ldr	r2, [r2, #12]
 8015534:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	6919      	ldr	r1, [r3, #16]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	689b      	ldr	r3, [r3, #8]
 8015540:	041a      	lsls	r2, r3, #16
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	430a      	orrs	r2, r1
 8015548:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801554a:	183c      	adds	r4, r7, r0
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	0018      	movs	r0, r3
 8015550:	f000 fa8e 	bl	8015a70 <RTC_ExitInitMode>
 8015554:	0003      	movs	r3, r0
 8015556:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015558:	230f      	movs	r3, #15
 801555a:	18fb      	adds	r3, r7, r3
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d113      	bne.n	801558a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2103      	movs	r1, #3
 801556e:	438a      	bics	r2, r1
 8015570:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	69da      	ldr	r2, [r3, #28]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	695b      	ldr	r3, [r3, #20]
 8015580:	431a      	orrs	r2, r3
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	430a      	orrs	r2, r1
 8015588:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	22ff      	movs	r2, #255	@ 0xff
 8015590:	625a      	str	r2, [r3, #36]	@ 0x24
 8015592:	e003      	b.n	801559c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015594:	230f      	movs	r3, #15
 8015596:	18fb      	adds	r3, r7, r3
 8015598:	2200      	movs	r2, #0
 801559a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801559c:	230f      	movs	r3, #15
 801559e:	18fb      	adds	r3, r7, r3
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d103      	bne.n	80155ae <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2221      	movs	r2, #33	@ 0x21
 80155aa:	2101      	movs	r1, #1
 80155ac:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80155ae:	230f      	movs	r3, #15
 80155b0:	18fb      	adds	r3, r7, r3
 80155b2:	781b      	ldrb	r3, [r3, #0]
}
 80155b4:	0018      	movs	r0, r3
 80155b6:	46bd      	mov	sp, r7
 80155b8:	b004      	add	sp, #16
 80155ba:	bdb0      	pop	{r4, r5, r7, pc}
 80155bc:	ff8fffbf 	.word	0xff8fffbf

080155c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80155c0:	b5b0      	push	{r4, r5, r7, lr}
 80155c2:	b086      	sub	sp, #24
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	60b9      	str	r1, [r7, #8]
 80155ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80155cc:	2300      	movs	r3, #0
 80155ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2220      	movs	r2, #32
 80155d4:	5c9b      	ldrb	r3, [r3, r2]
 80155d6:	2b01      	cmp	r3, #1
 80155d8:	d101      	bne.n	80155de <HAL_RTC_SetTime+0x1e>
 80155da:	2302      	movs	r3, #2
 80155dc:	e092      	b.n	8015704 <HAL_RTC_SetTime+0x144>
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2220      	movs	r2, #32
 80155e2:	2101      	movs	r1, #1
 80155e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2221      	movs	r2, #33	@ 0x21
 80155ea:	2102      	movs	r1, #2
 80155ec:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d125      	bne.n	8015640 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	689b      	ldr	r3, [r3, #8]
 80155fa:	2240      	movs	r2, #64	@ 0x40
 80155fc:	4013      	ands	r3, r2
 80155fe:	d102      	bne.n	8015606 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	2200      	movs	r2, #0
 8015604:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	0018      	movs	r0, r3
 801560c:	f000 fa5a 	bl	8015ac4 <RTC_ByteToBcd2>
 8015610:	0003      	movs	r3, r0
 8015612:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	785b      	ldrb	r3, [r3, #1]
 8015618:	0018      	movs	r0, r3
 801561a:	f000 fa53 	bl	8015ac4 <RTC_ByteToBcd2>
 801561e:	0003      	movs	r3, r0
 8015620:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015622:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	789b      	ldrb	r3, [r3, #2]
 8015628:	0018      	movs	r0, r3
 801562a:	f000 fa4b 	bl	8015ac4 <RTC_ByteToBcd2>
 801562e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015630:	0022      	movs	r2, r4
 8015632:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	78db      	ldrb	r3, [r3, #3]
 8015638:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801563a:	4313      	orrs	r3, r2
 801563c:	617b      	str	r3, [r7, #20]
 801563e:	e017      	b.n	8015670 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	689b      	ldr	r3, [r3, #8]
 8015646:	2240      	movs	r2, #64	@ 0x40
 8015648:	4013      	ands	r3, r2
 801564a:	d102      	bne.n	8015652 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	2200      	movs	r2, #0
 8015650:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	785b      	ldrb	r3, [r3, #1]
 801565c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801565e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015660:	68ba      	ldr	r2, [r7, #8]
 8015662:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015664:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	78db      	ldrb	r3, [r3, #3]
 801566a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801566c:	4313      	orrs	r3, r2
 801566e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	22ca      	movs	r2, #202	@ 0xca
 8015676:	625a      	str	r2, [r3, #36]	@ 0x24
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	2253      	movs	r2, #83	@ 0x53
 801567e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015680:	2513      	movs	r5, #19
 8015682:	197c      	adds	r4, r7, r5
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	0018      	movs	r0, r3
 8015688:	f000 f9ae 	bl	80159e8 <RTC_EnterInitMode>
 801568c:	0003      	movs	r3, r0
 801568e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015690:	0028      	movs	r0, r5
 8015692:	183b      	adds	r3, r7, r0
 8015694:	781b      	ldrb	r3, [r3, #0]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d120      	bne.n	80156dc <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	697a      	ldr	r2, [r7, #20]
 80156a0:	491a      	ldr	r1, [pc, #104]	@ (801570c <HAL_RTC_SetTime+0x14c>)
 80156a2:	400a      	ands	r2, r1
 80156a4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	689a      	ldr	r2, [r3, #8]
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	4917      	ldr	r1, [pc, #92]	@ (8015710 <HAL_RTC_SetTime+0x150>)
 80156b2:	400a      	ands	r2, r1
 80156b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	6899      	ldr	r1, [r3, #8]
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	68da      	ldr	r2, [r3, #12]
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	691b      	ldr	r3, [r3, #16]
 80156c4:	431a      	orrs	r2, r3
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	430a      	orrs	r2, r1
 80156cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80156ce:	183c      	adds	r4, r7, r0
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	0018      	movs	r0, r3
 80156d4:	f000 f9cc 	bl	8015a70 <RTC_ExitInitMode>
 80156d8:	0003      	movs	r3, r0
 80156da:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80156dc:	2313      	movs	r3, #19
 80156de:	18fb      	adds	r3, r7, r3
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d103      	bne.n	80156ee <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	2221      	movs	r2, #33	@ 0x21
 80156ea:	2101      	movs	r1, #1
 80156ec:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	22ff      	movs	r2, #255	@ 0xff
 80156f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	2220      	movs	r2, #32
 80156fa:	2100      	movs	r1, #0
 80156fc:	5499      	strb	r1, [r3, r2]

  return status;
 80156fe:	2313      	movs	r3, #19
 8015700:	18fb      	adds	r3, r7, r3
 8015702:	781b      	ldrb	r3, [r3, #0]
}
 8015704:	0018      	movs	r0, r3
 8015706:	46bd      	mov	sp, r7
 8015708:	b006      	add	sp, #24
 801570a:	bdb0      	pop	{r4, r5, r7, pc}
 801570c:	007f7f7f 	.word	0x007f7f7f
 8015710:	fffbffff 	.word	0xfffbffff

08015714 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b086      	sub	sp, #24
 8015718:	af00      	add	r7, sp, #0
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	60b9      	str	r1, [r7, #8]
 801571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015720:	2300      	movs	r3, #0
 8015722:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	691b      	ldr	r3, [r3, #16]
 8015734:	045b      	lsls	r3, r3, #17
 8015736:	0c5a      	lsrs	r2, r3, #17
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	4a22      	ldr	r2, [pc, #136]	@ (80157cc <HAL_RTC_GetTime+0xb8>)
 8015744:	4013      	ands	r3, r2
 8015746:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	0c1b      	lsrs	r3, r3, #16
 801574c:	b2db      	uxtb	r3, r3
 801574e:	223f      	movs	r2, #63	@ 0x3f
 8015750:	4013      	ands	r3, r2
 8015752:	b2da      	uxtb	r2, r3
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	0a1b      	lsrs	r3, r3, #8
 801575c:	b2db      	uxtb	r3, r3
 801575e:	227f      	movs	r2, #127	@ 0x7f
 8015760:	4013      	ands	r3, r2
 8015762:	b2da      	uxtb	r2, r3
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	b2db      	uxtb	r3, r3
 801576c:	227f      	movs	r2, #127	@ 0x7f
 801576e:	4013      	ands	r3, r2
 8015770:	b2da      	uxtb	r2, r3
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	0d9b      	lsrs	r3, r3, #22
 801577a:	b2db      	uxtb	r3, r3
 801577c:	2201      	movs	r2, #1
 801577e:	4013      	ands	r3, r2
 8015780:	b2da      	uxtb	r2, r3
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d11a      	bne.n	80157c2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	0018      	movs	r0, r3
 8015792:	f000 f9b8 	bl	8015b06 <RTC_Bcd2ToByte>
 8015796:	0003      	movs	r3, r0
 8015798:	001a      	movs	r2, r3
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	785b      	ldrb	r3, [r3, #1]
 80157a2:	0018      	movs	r0, r3
 80157a4:	f000 f9af 	bl	8015b06 <RTC_Bcd2ToByte>
 80157a8:	0003      	movs	r3, r0
 80157aa:	001a      	movs	r2, r3
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80157b0:	68bb      	ldr	r3, [r7, #8]
 80157b2:	789b      	ldrb	r3, [r3, #2]
 80157b4:	0018      	movs	r0, r3
 80157b6:	f000 f9a6 	bl	8015b06 <RTC_Bcd2ToByte>
 80157ba:	0003      	movs	r3, r0
 80157bc:	001a      	movs	r2, r3
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	0018      	movs	r0, r3
 80157c6:	46bd      	mov	sp, r7
 80157c8:	b006      	add	sp, #24
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	007f7f7f 	.word	0x007f7f7f

080157d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80157d0:	b5b0      	push	{r4, r5, r7, lr}
 80157d2:	b086      	sub	sp, #24
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	60b9      	str	r1, [r7, #8]
 80157da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80157dc:	2300      	movs	r3, #0
 80157de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2220      	movs	r2, #32
 80157e4:	5c9b      	ldrb	r3, [r3, r2]
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d101      	bne.n	80157ee <HAL_RTC_SetDate+0x1e>
 80157ea:	2302      	movs	r3, #2
 80157ec:	e07e      	b.n	80158ec <HAL_RTC_SetDate+0x11c>
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2220      	movs	r2, #32
 80157f2:	2101      	movs	r1, #1
 80157f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	2221      	movs	r2, #33	@ 0x21
 80157fa:	2102      	movs	r1, #2
 80157fc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d10e      	bne.n	8015822 <HAL_RTC_SetDate+0x52>
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	785b      	ldrb	r3, [r3, #1]
 8015808:	001a      	movs	r2, r3
 801580a:	2310      	movs	r3, #16
 801580c:	4013      	ands	r3, r2
 801580e:	d008      	beq.n	8015822 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	785b      	ldrb	r3, [r3, #1]
 8015814:	2210      	movs	r2, #16
 8015816:	4393      	bics	r3, r2
 8015818:	b2db      	uxtb	r3, r3
 801581a:	330a      	adds	r3, #10
 801581c:	b2da      	uxtb	r2, r3
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d11c      	bne.n	8015862 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	78db      	ldrb	r3, [r3, #3]
 801582c:	0018      	movs	r0, r3
 801582e:	f000 f949 	bl	8015ac4 <RTC_ByteToBcd2>
 8015832:	0003      	movs	r3, r0
 8015834:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	785b      	ldrb	r3, [r3, #1]
 801583a:	0018      	movs	r0, r3
 801583c:	f000 f942 	bl	8015ac4 <RTC_ByteToBcd2>
 8015840:	0003      	movs	r3, r0
 8015842:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015844:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	789b      	ldrb	r3, [r3, #2]
 801584a:	0018      	movs	r0, r3
 801584c:	f000 f93a 	bl	8015ac4 <RTC_ByteToBcd2>
 8015850:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015852:	0022      	movs	r2, r4
 8015854:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801585c:	4313      	orrs	r3, r2
 801585e:	617b      	str	r3, [r7, #20]
 8015860:	e00e      	b.n	8015880 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	78db      	ldrb	r3, [r3, #3]
 8015866:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	785b      	ldrb	r3, [r3, #1]
 801586c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801586e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8015870:	68ba      	ldr	r2, [r7, #8]
 8015872:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015874:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801587c:	4313      	orrs	r3, r2
 801587e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	22ca      	movs	r2, #202	@ 0xca
 8015886:	625a      	str	r2, [r3, #36]	@ 0x24
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2253      	movs	r2, #83	@ 0x53
 801588e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015890:	2513      	movs	r5, #19
 8015892:	197c      	adds	r4, r7, r5
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	0018      	movs	r0, r3
 8015898:	f000 f8a6 	bl	80159e8 <RTC_EnterInitMode>
 801589c:	0003      	movs	r3, r0
 801589e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80158a0:	0028      	movs	r0, r5
 80158a2:	183b      	adds	r3, r7, r0
 80158a4:	781b      	ldrb	r3, [r3, #0]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d10c      	bne.n	80158c4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	697a      	ldr	r2, [r7, #20]
 80158b0:	4910      	ldr	r1, [pc, #64]	@ (80158f4 <HAL_RTC_SetDate+0x124>)
 80158b2:	400a      	ands	r2, r1
 80158b4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80158b6:	183c      	adds	r4, r7, r0
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	0018      	movs	r0, r3
 80158bc:	f000 f8d8 	bl	8015a70 <RTC_ExitInitMode>
 80158c0:	0003      	movs	r3, r0
 80158c2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80158c4:	2313      	movs	r3, #19
 80158c6:	18fb      	adds	r3, r7, r3
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d103      	bne.n	80158d6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2221      	movs	r2, #33	@ 0x21
 80158d2:	2101      	movs	r1, #1
 80158d4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	22ff      	movs	r2, #255	@ 0xff
 80158dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	2220      	movs	r2, #32
 80158e2:	2100      	movs	r1, #0
 80158e4:	5499      	strb	r1, [r3, r2]

  return status;
 80158e6:	2313      	movs	r3, #19
 80158e8:	18fb      	adds	r3, r7, r3
 80158ea:	781b      	ldrb	r3, [r3, #0]
}
 80158ec:	0018      	movs	r0, r3
 80158ee:	46bd      	mov	sp, r7
 80158f0:	b006      	add	sp, #24
 80158f2:	bdb0      	pop	{r4, r5, r7, pc}
 80158f4:	00ffff3f 	.word	0x00ffff3f

080158f8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b086      	sub	sp, #24
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015904:	2300      	movs	r3, #0
 8015906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	685b      	ldr	r3, [r3, #4]
 801590e:	4a21      	ldr	r2, [pc, #132]	@ (8015994 <HAL_RTC_GetDate+0x9c>)
 8015910:	4013      	ands	r3, r2
 8015912:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	0c1b      	lsrs	r3, r3, #16
 8015918:	b2da      	uxtb	r2, r3
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	0a1b      	lsrs	r3, r3, #8
 8015922:	b2db      	uxtb	r3, r3
 8015924:	221f      	movs	r2, #31
 8015926:	4013      	ands	r3, r2
 8015928:	b2da      	uxtb	r2, r3
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	b2db      	uxtb	r3, r3
 8015932:	223f      	movs	r2, #63	@ 0x3f
 8015934:	4013      	ands	r3, r2
 8015936:	b2da      	uxtb	r2, r3
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	0b5b      	lsrs	r3, r3, #13
 8015940:	b2db      	uxtb	r3, r3
 8015942:	2207      	movs	r2, #7
 8015944:	4013      	ands	r3, r2
 8015946:	b2da      	uxtb	r2, r3
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d11a      	bne.n	8015988 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	78db      	ldrb	r3, [r3, #3]
 8015956:	0018      	movs	r0, r3
 8015958:	f000 f8d5 	bl	8015b06 <RTC_Bcd2ToByte>
 801595c:	0003      	movs	r3, r0
 801595e:	001a      	movs	r2, r3
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	785b      	ldrb	r3, [r3, #1]
 8015968:	0018      	movs	r0, r3
 801596a:	f000 f8cc 	bl	8015b06 <RTC_Bcd2ToByte>
 801596e:	0003      	movs	r3, r0
 8015970:	001a      	movs	r2, r3
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	789b      	ldrb	r3, [r3, #2]
 801597a:	0018      	movs	r0, r3
 801597c:	f000 f8c3 	bl	8015b06 <RTC_Bcd2ToByte>
 8015980:	0003      	movs	r3, r0
 8015982:	001a      	movs	r2, r3
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015988:	2300      	movs	r3, #0
}
 801598a:	0018      	movs	r0, r3
 801598c:	46bd      	mov	sp, r7
 801598e:	b006      	add	sp, #24
 8015990:	bd80      	pop	{r7, pc}
 8015992:	46c0      	nop			@ (mov r8, r8)
 8015994:	00ffff3f 	.word	0x00ffff3f

08015998 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b084      	sub	sp, #16
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80159a0:	2300      	movs	r3, #0
 80159a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4a0e      	ldr	r2, [pc, #56]	@ (80159e4 <HAL_RTC_WaitForSynchro+0x4c>)
 80159aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80159ac:	f7f8 fce8 	bl	800e380 <HAL_GetTick>
 80159b0:	0003      	movs	r3, r0
 80159b2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80159b4:	e00a      	b.n	80159cc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80159b6:	f7f8 fce3 	bl	800e380 <HAL_GetTick>
 80159ba:	0002      	movs	r2, r0
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	1ad2      	subs	r2, r2, r3
 80159c0:	23fa      	movs	r3, #250	@ 0xfa
 80159c2:	009b      	lsls	r3, r3, #2
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d901      	bls.n	80159cc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80159c8:	2303      	movs	r3, #3
 80159ca:	e006      	b.n	80159da <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	68db      	ldr	r3, [r3, #12]
 80159d2:	2220      	movs	r2, #32
 80159d4:	4013      	ands	r3, r2
 80159d6:	d0ee      	beq.n	80159b6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80159d8:	2300      	movs	r3, #0
}
 80159da:	0018      	movs	r0, r3
 80159dc:	46bd      	mov	sp, r7
 80159de:	b004      	add	sp, #16
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	46c0      	nop			@ (mov r8, r8)
 80159e4:	0001ff5f 	.word	0x0001ff5f

080159e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b084      	sub	sp, #16
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80159f0:	2300      	movs	r3, #0
 80159f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80159f4:	230f      	movs	r3, #15
 80159f6:	18fb      	adds	r3, r7, r3
 80159f8:	2200      	movs	r2, #0
 80159fa:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	2240      	movs	r2, #64	@ 0x40
 8015a04:	4013      	ands	r3, r2
 8015a06:	d12c      	bne.n	8015a62 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	68da      	ldr	r2, [r3, #12]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	2180      	movs	r1, #128	@ 0x80
 8015a14:	430a      	orrs	r2, r1
 8015a16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015a18:	f7f8 fcb2 	bl	800e380 <HAL_GetTick>
 8015a1c:	0003      	movs	r3, r0
 8015a1e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015a20:	e014      	b.n	8015a4c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015a22:	f7f8 fcad 	bl	800e380 <HAL_GetTick>
 8015a26:	0002      	movs	r2, r0
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	1ad2      	subs	r2, r2, r3
 8015a2c:	200f      	movs	r0, #15
 8015a2e:	183b      	adds	r3, r7, r0
 8015a30:	1839      	adds	r1, r7, r0
 8015a32:	7809      	ldrb	r1, [r1, #0]
 8015a34:	7019      	strb	r1, [r3, #0]
 8015a36:	23fa      	movs	r3, #250	@ 0xfa
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d906      	bls.n	8015a4c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2221      	movs	r2, #33	@ 0x21
 8015a42:	2104      	movs	r1, #4
 8015a44:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8015a46:	183b      	adds	r3, r7, r0
 8015a48:	2201      	movs	r2, #1
 8015a4a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	2240      	movs	r2, #64	@ 0x40
 8015a54:	4013      	ands	r3, r2
 8015a56:	d104      	bne.n	8015a62 <RTC_EnterInitMode+0x7a>
 8015a58:	230f      	movs	r3, #15
 8015a5a:	18fb      	adds	r3, r7, r3
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	2b01      	cmp	r3, #1
 8015a60:	d1df      	bne.n	8015a22 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8015a62:	230f      	movs	r3, #15
 8015a64:	18fb      	adds	r3, r7, r3
 8015a66:	781b      	ldrb	r3, [r3, #0]
}
 8015a68:	0018      	movs	r0, r3
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	b004      	add	sp, #16
 8015a6e:	bd80      	pop	{r7, pc}

08015a70 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8015a70:	b590      	push	{r4, r7, lr}
 8015a72:	b085      	sub	sp, #20
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015a78:	240f      	movs	r4, #15
 8015a7a:	193b      	adds	r3, r7, r4
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	68da      	ldr	r2, [r3, #12]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	2180      	movs	r1, #128	@ 0x80
 8015a8c:	438a      	bics	r2, r1
 8015a8e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	689b      	ldr	r3, [r3, #8]
 8015a96:	2220      	movs	r2, #32
 8015a98:	4013      	ands	r3, r2
 8015a9a:	d10c      	bne.n	8015ab6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	0018      	movs	r0, r3
 8015aa0:	f7ff ff7a 	bl	8015998 <HAL_RTC_WaitForSynchro>
 8015aa4:	1e03      	subs	r3, r0, #0
 8015aa6:	d006      	beq.n	8015ab6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2221      	movs	r2, #33	@ 0x21
 8015aac:	2104      	movs	r1, #4
 8015aae:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8015ab0:	193b      	adds	r3, r7, r4
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8015ab6:	230f      	movs	r3, #15
 8015ab8:	18fb      	adds	r3, r7, r3
 8015aba:	781b      	ldrb	r3, [r3, #0]
}
 8015abc:	0018      	movs	r0, r3
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	b005      	add	sp, #20
 8015ac2:	bd90      	pop	{r4, r7, pc}

08015ac4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b084      	sub	sp, #16
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	0002      	movs	r2, r0
 8015acc:	1dfb      	adds	r3, r7, #7
 8015ace:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8015ad4:	e007      	b.n	8015ae6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8015adc:	1dfb      	adds	r3, r7, #7
 8015ade:	1dfa      	adds	r2, r7, #7
 8015ae0:	7812      	ldrb	r2, [r2, #0]
 8015ae2:	3a0a      	subs	r2, #10
 8015ae4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8015ae6:	1dfb      	adds	r3, r7, #7
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	2b09      	cmp	r3, #9
 8015aec:	d8f3      	bhi.n	8015ad6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	b2db      	uxtb	r3, r3
 8015af2:	011b      	lsls	r3, r3, #4
 8015af4:	b2da      	uxtb	r2, r3
 8015af6:	1dfb      	adds	r3, r7, #7
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	4313      	orrs	r3, r2
 8015afc:	b2db      	uxtb	r3, r3
}
 8015afe:	0018      	movs	r0, r3
 8015b00:	46bd      	mov	sp, r7
 8015b02:	b004      	add	sp, #16
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b084      	sub	sp, #16
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	0002      	movs	r2, r0
 8015b0e:	1dfb      	adds	r3, r7, #7
 8015b10:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8015b12:	2300      	movs	r3, #0
 8015b14:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8015b16:	1dfb      	adds	r3, r7, #7
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	091b      	lsrs	r3, r3, #4
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	001a      	movs	r2, r3
 8015b20:	0013      	movs	r3, r2
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	189b      	adds	r3, r3, r2
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	b2da      	uxtb	r2, r3
 8015b2e:	1dfb      	adds	r3, r7, #7
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	210f      	movs	r1, #15
 8015b34:	400b      	ands	r3, r1
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	18d3      	adds	r3, r2, r3
 8015b3a:	b2db      	uxtb	r3, r3
}
 8015b3c:	0018      	movs	r0, r3
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	b004      	add	sp, #16
 8015b42:	bd80      	pop	{r7, pc}

08015b44 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b086      	sub	sp, #24
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	60b9      	str	r1, [r7, #8]
 8015b4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015b50:	4b64      	ldr	r3, [pc, #400]	@ (8015ce4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	22fa      	movs	r2, #250	@ 0xfa
 8015b56:	01d1      	lsls	r1, r2, #7
 8015b58:	0018      	movs	r0, r3
 8015b5a:	f7ea fb23 	bl	80001a4 <__udivsi3>
 8015b5e:	0003      	movs	r3, r0
 8015b60:	001a      	movs	r2, r3
 8015b62:	0013      	movs	r3, r2
 8015b64:	015b      	lsls	r3, r3, #5
 8015b66:	1a9b      	subs	r3, r3, r2
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	189b      	adds	r3, r3, r2
 8015b6c:	00db      	lsls	r3, r3, #3
 8015b6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	2220      	movs	r2, #32
 8015b74:	5c9b      	ldrb	r3, [r3, r2]
 8015b76:	2b01      	cmp	r3, #1
 8015b78:	d101      	bne.n	8015b7e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8015b7a:	2302      	movs	r3, #2
 8015b7c:	e0ad      	b.n	8015cda <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	2220      	movs	r2, #32
 8015b82:	2101      	movs	r1, #1
 8015b84:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	2221      	movs	r2, #33	@ 0x21
 8015b8a:	2102      	movs	r1, #2
 8015b8c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	22ca      	movs	r2, #202	@ 0xca
 8015b94:	625a      	str	r2, [r3, #36]	@ 0x24
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2253      	movs	r2, #83	@ 0x53
 8015b9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	689a      	ldr	r2, [r3, #8]
 8015ba4:	2380      	movs	r3, #128	@ 0x80
 8015ba6:	00db      	lsls	r3, r3, #3
 8015ba8:	4013      	ands	r3, r2
 8015baa:	d019      	beq.n	8015be0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015bac:	697b      	ldr	r3, [r7, #20]
 8015bae:	3b01      	subs	r3, #1
 8015bb0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d10d      	bne.n	8015bd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	22ff      	movs	r2, #255	@ 0xff
 8015bbe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	2221      	movs	r2, #33	@ 0x21
 8015bc4:	2103      	movs	r1, #3
 8015bc6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	2220      	movs	r2, #32
 8015bcc:	2100      	movs	r1, #0
 8015bce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015bd0:	2303      	movs	r3, #3
 8015bd2:	e082      	b.n	8015cda <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	68db      	ldr	r3, [r3, #12]
 8015bda:	2204      	movs	r2, #4
 8015bdc:	4013      	ands	r3, r2
 8015bde:	d1e5      	bne.n	8015bac <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	689a      	ldr	r2, [r3, #8]
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	493f      	ldr	r1, [pc, #252]	@ (8015ce8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8015bec:	400a      	ands	r2, r1
 8015bee:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	68db      	ldr	r3, [r3, #12]
 8015bf6:	22ff      	movs	r2, #255	@ 0xff
 8015bf8:	401a      	ands	r2, r3
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	493b      	ldr	r1, [pc, #236]	@ (8015cec <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8015c00:	430a      	orrs	r2, r1
 8015c02:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015c04:	4b37      	ldr	r3, [pc, #220]	@ (8015ce4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	22fa      	movs	r2, #250	@ 0xfa
 8015c0a:	01d1      	lsls	r1, r2, #7
 8015c0c:	0018      	movs	r0, r3
 8015c0e:	f7ea fac9 	bl	80001a4 <__udivsi3>
 8015c12:	0003      	movs	r3, r0
 8015c14:	001a      	movs	r2, r3
 8015c16:	0013      	movs	r3, r2
 8015c18:	015b      	lsls	r3, r3, #5
 8015c1a:	1a9b      	subs	r3, r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	189b      	adds	r3, r3, r2
 8015c20:	00db      	lsls	r3, r3, #3
 8015c22:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	3b01      	subs	r3, #1
 8015c28:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d10d      	bne.n	8015c4c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	22ff      	movs	r2, #255	@ 0xff
 8015c36:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	2221      	movs	r2, #33	@ 0x21
 8015c3c:	2103      	movs	r1, #3
 8015c3e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2220      	movs	r2, #32
 8015c44:	2100      	movs	r1, #0
 8015c46:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015c48:	2303      	movs	r3, #3
 8015c4a:	e046      	b.n	8015cda <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	68db      	ldr	r3, [r3, #12]
 8015c52:	2204      	movs	r2, #4
 8015c54:	4013      	ands	r3, r2
 8015c56:	d0e5      	beq.n	8015c24 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	689a      	ldr	r2, [r3, #8]
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	2107      	movs	r1, #7
 8015c64:	438a      	bics	r2, r1
 8015c66:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	6899      	ldr	r1, [r3, #8]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	430a      	orrs	r2, r1
 8015c76:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	68ba      	ldr	r2, [r7, #8]
 8015c7e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8015c80:	4b1b      	ldr	r3, [pc, #108]	@ (8015cf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	4b1a      	ldr	r3, [pc, #104]	@ (8015cf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015c86:	2180      	movs	r1, #128	@ 0x80
 8015c88:	0349      	lsls	r1, r1, #13
 8015c8a:	430a      	orrs	r2, r1
 8015c8c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8015c8e:	4b18      	ldr	r3, [pc, #96]	@ (8015cf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015c90:	689a      	ldr	r2, [r3, #8]
 8015c92:	4b17      	ldr	r3, [pc, #92]	@ (8015cf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015c94:	2180      	movs	r1, #128	@ 0x80
 8015c96:	0349      	lsls	r1, r1, #13
 8015c98:	430a      	orrs	r2, r1
 8015c9a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	689a      	ldr	r2, [r3, #8]
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2180      	movs	r1, #128	@ 0x80
 8015ca8:	01c9      	lsls	r1, r1, #7
 8015caa:	430a      	orrs	r2, r1
 8015cac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	689a      	ldr	r2, [r3, #8]
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	2180      	movs	r1, #128	@ 0x80
 8015cba:	00c9      	lsls	r1, r1, #3
 8015cbc:	430a      	orrs	r2, r1
 8015cbe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	22ff      	movs	r2, #255	@ 0xff
 8015cc6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	2221      	movs	r2, #33	@ 0x21
 8015ccc:	2101      	movs	r1, #1
 8015cce:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	2220      	movs	r2, #32
 8015cd4:	2100      	movs	r1, #0
 8015cd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015cd8:	2300      	movs	r3, #0
}
 8015cda:	0018      	movs	r0, r3
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	b006      	add	sp, #24
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	46c0      	nop			@ (mov r8, r8)
 8015ce4:	200000c8 	.word	0x200000c8
 8015ce8:	fffffbff 	.word	0xfffffbff
 8015cec:	fffffb7f 	.word	0xfffffb7f
 8015cf0:	40010400 	.word	0x40010400

08015cf4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b084      	sub	sp, #16
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2220      	movs	r2, #32
 8015d04:	5c9b      	ldrb	r3, [r3, r2]
 8015d06:	2b01      	cmp	r3, #1
 8015d08:	d101      	bne.n	8015d0e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8015d0a:	2302      	movs	r3, #2
 8015d0c:	e04e      	b.n	8015dac <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	2220      	movs	r2, #32
 8015d12:	2101      	movs	r1, #1
 8015d14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2221      	movs	r2, #33	@ 0x21
 8015d1a:	2102      	movs	r1, #2
 8015d1c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	22ca      	movs	r2, #202	@ 0xca
 8015d24:	625a      	str	r2, [r3, #36]	@ 0x24
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	2253      	movs	r2, #83	@ 0x53
 8015d2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	689a      	ldr	r2, [r3, #8]
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	491e      	ldr	r1, [pc, #120]	@ (8015db4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8015d3a:	400a      	ands	r2, r1
 8015d3c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	689a      	ldr	r2, [r3, #8]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	491b      	ldr	r1, [pc, #108]	@ (8015db8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015d4a:	400a      	ands	r2, r1
 8015d4c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015d4e:	f7f8 fb17 	bl	800e380 <HAL_GetTick>
 8015d52:	0003      	movs	r3, r0
 8015d54:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015d56:	e016      	b.n	8015d86 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015d58:	f7f8 fb12 	bl	800e380 <HAL_GetTick>
 8015d5c:	0002      	movs	r2, r0
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	1ad2      	subs	r2, r2, r3
 8015d62:	23fa      	movs	r3, #250	@ 0xfa
 8015d64:	009b      	lsls	r3, r3, #2
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d90d      	bls.n	8015d86 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	22ff      	movs	r2, #255	@ 0xff
 8015d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2221      	movs	r2, #33	@ 0x21
 8015d76:	2103      	movs	r1, #3
 8015d78:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2220      	movs	r2, #32
 8015d7e:	2100      	movs	r1, #0
 8015d80:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015d82:	2303      	movs	r3, #3
 8015d84:	e012      	b.n	8015dac <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	2204      	movs	r2, #4
 8015d8e:	4013      	ands	r3, r2
 8015d90:	d0e2      	beq.n	8015d58 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	22ff      	movs	r2, #255	@ 0xff
 8015d98:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2221      	movs	r2, #33	@ 0x21
 8015d9e:	2101      	movs	r1, #1
 8015da0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2220      	movs	r2, #32
 8015da6:	2100      	movs	r1, #0
 8015da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015daa:	2300      	movs	r3, #0
}
 8015dac:	0018      	movs	r0, r3
 8015dae:	46bd      	mov	sp, r7
 8015db0:	b004      	add	sp, #16
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	fffffbff 	.word	0xfffffbff
 8015db8:	ffffbfff 	.word	0xffffbfff

08015dbc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015dc4:	4b13      	ldr	r3, [pc, #76]	@ (8015e14 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8015dc6:	2280      	movs	r2, #128	@ 0x80
 8015dc8:	0352      	lsls	r2, r2, #13
 8015dca:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	689a      	ldr	r2, [r3, #8]
 8015dd2:	2380      	movs	r3, #128	@ 0x80
 8015dd4:	01db      	lsls	r3, r3, #7
 8015dd6:	4013      	ands	r3, r2
 8015dd8:	d014      	beq.n	8015e04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	68da      	ldr	r2, [r3, #12]
 8015de0:	2380      	movs	r3, #128	@ 0x80
 8015de2:	00db      	lsls	r3, r3, #3
 8015de4:	4013      	ands	r3, r2
 8015de6:	d00d      	beq.n	8015e04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	68db      	ldr	r3, [r3, #12]
 8015dee:	22ff      	movs	r2, #255	@ 0xff
 8015df0:	401a      	ands	r2, r3
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	4908      	ldr	r1, [pc, #32]	@ (8015e18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8015df8:	430a      	orrs	r2, r1
 8015dfa:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	0018      	movs	r0, r3
 8015e00:	f000 f80c 	bl	8015e1c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2221      	movs	r2, #33	@ 0x21
 8015e08:	2101      	movs	r1, #1
 8015e0a:	5499      	strb	r1, [r3, r2]
}
 8015e0c:	46c0      	nop			@ (mov r8, r8)
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	b002      	add	sp, #8
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	40010400 	.word	0x40010400
 8015e18:	fffffb7f 	.word	0xfffffb7f

08015e1c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015e24:	46c0      	nop			@ (mov r8, r8)
 8015e26:	46bd      	mov	sp, r7
 8015e28:	b002      	add	sp, #8
 8015e2a:	bd80      	pop	{r7, pc}

08015e2c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b086      	sub	sp, #24
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	60f8      	str	r0, [r7, #12]
 8015e34:	60b9      	str	r1, [r7, #8]
 8015e36:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	3350      	adds	r3, #80	@ 0x50
 8015e42:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	697a      	ldr	r2, [r7, #20]
 8015e4a:	18d3      	adds	r3, r2, r3
 8015e4c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	687a      	ldr	r2, [r7, #4]
 8015e52:	601a      	str	r2, [r3, #0]
}
 8015e54:	46c0      	nop			@ (mov r8, r8)
 8015e56:	46bd      	mov	sp, r7
 8015e58:	b006      	add	sp, #24
 8015e5a:	bd80      	pop	{r7, pc}

08015e5c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8015e66:	2300      	movs	r3, #0
 8015e68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	3350      	adds	r3, #80	@ 0x50
 8015e70:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	009b      	lsls	r3, r3, #2
 8015e76:	68fa      	ldr	r2, [r7, #12]
 8015e78:	18d3      	adds	r3, r2, r3
 8015e7a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	681b      	ldr	r3, [r3, #0]
}
 8015e80:	0018      	movs	r0, r3
 8015e82:	46bd      	mov	sp, r7
 8015e84:	b004      	add	sp, #16
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d101      	bne.n	8015e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015e96:	2301      	movs	r3, #1
 8015e98:	e032      	b.n	8015f00 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2239      	movs	r2, #57	@ 0x39
 8015e9e:	5c9b      	ldrb	r3, [r3, r2]
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d107      	bne.n	8015eb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2238      	movs	r2, #56	@ 0x38
 8015eaa:	2100      	movs	r1, #0
 8015eac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	0018      	movs	r0, r3
 8015eb2:	f7f7 fb67 	bl	800d584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2239      	movs	r2, #57	@ 0x39
 8015eba:	2102      	movs	r1, #2
 8015ebc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	0019      	movs	r1, r3
 8015ec8:	0010      	movs	r0, r2
 8015eca:	f000 fa1d 	bl	8016308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	223e      	movs	r2, #62	@ 0x3e
 8015ed2:	2101      	movs	r1, #1
 8015ed4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	223a      	movs	r2, #58	@ 0x3a
 8015eda:	2101      	movs	r1, #1
 8015edc:	5499      	strb	r1, [r3, r2]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	223b      	movs	r2, #59	@ 0x3b
 8015ee2:	2101      	movs	r1, #1
 8015ee4:	5499      	strb	r1, [r3, r2]
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	223c      	movs	r2, #60	@ 0x3c
 8015eea:	2101      	movs	r1, #1
 8015eec:	5499      	strb	r1, [r3, r2]
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	223d      	movs	r2, #61	@ 0x3d
 8015ef2:	2101      	movs	r1, #1
 8015ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2239      	movs	r2, #57	@ 0x39
 8015efa:	2101      	movs	r1, #1
 8015efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015efe:	2300      	movs	r3, #0
}
 8015f00:	0018      	movs	r0, r3
 8015f02:	46bd      	mov	sp, r7
 8015f04:	b002      	add	sp, #8
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2239      	movs	r2, #57	@ 0x39
 8015f14:	5c9b      	ldrb	r3, [r3, r2]
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d001      	beq.n	8015f20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	e033      	b.n	8015f88 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2239      	movs	r2, #57	@ 0x39
 8015f24:	2102      	movs	r1, #2
 8015f26:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	2380      	movs	r3, #128	@ 0x80
 8015f2e:	05db      	lsls	r3, r3, #23
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d00e      	beq.n	8015f52 <HAL_TIM_Base_Start+0x4a>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	4a15      	ldr	r2, [pc, #84]	@ (8015f90 <HAL_TIM_Base_Start+0x88>)
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d009      	beq.n	8015f52 <HAL_TIM_Base_Start+0x4a>
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4a14      	ldr	r2, [pc, #80]	@ (8015f94 <HAL_TIM_Base_Start+0x8c>)
 8015f44:	4293      	cmp	r3, r2
 8015f46:	d004      	beq.n	8015f52 <HAL_TIM_Base_Start+0x4a>
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	4a12      	ldr	r2, [pc, #72]	@ (8015f98 <HAL_TIM_Base_Start+0x90>)
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	d111      	bne.n	8015f76 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	689b      	ldr	r3, [r3, #8]
 8015f58:	2207      	movs	r2, #7
 8015f5a:	4013      	ands	r3, r2
 8015f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	2b06      	cmp	r3, #6
 8015f62:	d010      	beq.n	8015f86 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	2101      	movs	r1, #1
 8015f70:	430a      	orrs	r2, r1
 8015f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f74:	e007      	b.n	8015f86 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	681a      	ldr	r2, [r3, #0]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2101      	movs	r1, #1
 8015f82:	430a      	orrs	r2, r1
 8015f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015f86:	2300      	movs	r3, #0
}
 8015f88:	0018      	movs	r0, r3
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	b004      	add	sp, #16
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	40000400 	.word	0x40000400
 8015f94:	40010800 	.word	0x40010800
 8015f98:	40011400 	.word	0x40011400

08015f9c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	6a1b      	ldr	r3, [r3, #32]
 8015faa:	4a0a      	ldr	r2, [pc, #40]	@ (8015fd4 <HAL_TIM_Base_Stop+0x38>)
 8015fac:	4013      	ands	r3, r2
 8015fae:	d107      	bne.n	8015fc0 <HAL_TIM_Base_Stop+0x24>
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	681a      	ldr	r2, [r3, #0]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	2101      	movs	r1, #1
 8015fbc:	438a      	bics	r2, r1
 8015fbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2239      	movs	r2, #57	@ 0x39
 8015fc4:	2101      	movs	r1, #1
 8015fc6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015fc8:	2300      	movs	r3, #0
}
 8015fca:	0018      	movs	r0, r3
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	b002      	add	sp, #8
 8015fd0:	bd80      	pop	{r7, pc}
 8015fd2:	46c0      	nop			@ (mov r8, r8)
 8015fd4:	00001111 	.word	0x00001111

08015fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d101      	bne.n	8015fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	e032      	b.n	8016050 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2239      	movs	r2, #57	@ 0x39
 8015fee:	5c9b      	ldrb	r3, [r3, r2]
 8015ff0:	b2db      	uxtb	r3, r3
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d107      	bne.n	8016006 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2238      	movs	r2, #56	@ 0x38
 8015ffa:	2100      	movs	r1, #0
 8015ffc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	0018      	movs	r0, r3
 8016002:	f7f7 fa9b 	bl	800d53c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2239      	movs	r2, #57	@ 0x39
 801600a:	2102      	movs	r1, #2
 801600c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681a      	ldr	r2, [r3, #0]
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	3304      	adds	r3, #4
 8016016:	0019      	movs	r1, r3
 8016018:	0010      	movs	r0, r2
 801601a:	f000 f975 	bl	8016308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	223e      	movs	r2, #62	@ 0x3e
 8016022:	2101      	movs	r1, #1
 8016024:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	223a      	movs	r2, #58	@ 0x3a
 801602a:	2101      	movs	r1, #1
 801602c:	5499      	strb	r1, [r3, r2]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	223b      	movs	r2, #59	@ 0x3b
 8016032:	2101      	movs	r1, #1
 8016034:	5499      	strb	r1, [r3, r2]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	223c      	movs	r2, #60	@ 0x3c
 801603a:	2101      	movs	r1, #1
 801603c:	5499      	strb	r1, [r3, r2]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	223d      	movs	r2, #61	@ 0x3d
 8016042:	2101      	movs	r1, #1
 8016044:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	2239      	movs	r2, #57	@ 0x39
 801604a:	2101      	movs	r1, #1
 801604c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801604e:	2300      	movs	r3, #0
}
 8016050:	0018      	movs	r0, r3
 8016052:	46bd      	mov	sp, r7
 8016054:	b002      	add	sp, #8
 8016056:	bd80      	pop	{r7, pc}

08016058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d108      	bne.n	801607a <HAL_TIM_PWM_Start+0x22>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	223a      	movs	r2, #58	@ 0x3a
 801606c:	5c9b      	ldrb	r3, [r3, r2]
 801606e:	b2db      	uxtb	r3, r3
 8016070:	3b01      	subs	r3, #1
 8016072:	1e5a      	subs	r2, r3, #1
 8016074:	4193      	sbcs	r3, r2
 8016076:	b2db      	uxtb	r3, r3
 8016078:	e01f      	b.n	80160ba <HAL_TIM_PWM_Start+0x62>
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	2b04      	cmp	r3, #4
 801607e:	d108      	bne.n	8016092 <HAL_TIM_PWM_Start+0x3a>
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	223b      	movs	r2, #59	@ 0x3b
 8016084:	5c9b      	ldrb	r3, [r3, r2]
 8016086:	b2db      	uxtb	r3, r3
 8016088:	3b01      	subs	r3, #1
 801608a:	1e5a      	subs	r2, r3, #1
 801608c:	4193      	sbcs	r3, r2
 801608e:	b2db      	uxtb	r3, r3
 8016090:	e013      	b.n	80160ba <HAL_TIM_PWM_Start+0x62>
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	2b08      	cmp	r3, #8
 8016096:	d108      	bne.n	80160aa <HAL_TIM_PWM_Start+0x52>
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	223c      	movs	r2, #60	@ 0x3c
 801609c:	5c9b      	ldrb	r3, [r3, r2]
 801609e:	b2db      	uxtb	r3, r3
 80160a0:	3b01      	subs	r3, #1
 80160a2:	1e5a      	subs	r2, r3, #1
 80160a4:	4193      	sbcs	r3, r2
 80160a6:	b2db      	uxtb	r3, r3
 80160a8:	e007      	b.n	80160ba <HAL_TIM_PWM_Start+0x62>
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	223d      	movs	r2, #61	@ 0x3d
 80160ae:	5c9b      	ldrb	r3, [r3, r2]
 80160b0:	b2db      	uxtb	r3, r3
 80160b2:	3b01      	subs	r3, #1
 80160b4:	1e5a      	subs	r2, r3, #1
 80160b6:	4193      	sbcs	r3, r2
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d001      	beq.n	80160c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80160be:	2301      	movs	r3, #1
 80160c0:	e052      	b.n	8016168 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d104      	bne.n	80160d2 <HAL_TIM_PWM_Start+0x7a>
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	223a      	movs	r2, #58	@ 0x3a
 80160cc:	2102      	movs	r1, #2
 80160ce:	5499      	strb	r1, [r3, r2]
 80160d0:	e013      	b.n	80160fa <HAL_TIM_PWM_Start+0xa2>
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2b04      	cmp	r3, #4
 80160d6:	d104      	bne.n	80160e2 <HAL_TIM_PWM_Start+0x8a>
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	223b      	movs	r2, #59	@ 0x3b
 80160dc:	2102      	movs	r1, #2
 80160de:	5499      	strb	r1, [r3, r2]
 80160e0:	e00b      	b.n	80160fa <HAL_TIM_PWM_Start+0xa2>
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	2b08      	cmp	r3, #8
 80160e6:	d104      	bne.n	80160f2 <HAL_TIM_PWM_Start+0x9a>
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	223c      	movs	r2, #60	@ 0x3c
 80160ec:	2102      	movs	r1, #2
 80160ee:	5499      	strb	r1, [r3, r2]
 80160f0:	e003      	b.n	80160fa <HAL_TIM_PWM_Start+0xa2>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	223d      	movs	r2, #61	@ 0x3d
 80160f6:	2102      	movs	r1, #2
 80160f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	2201      	movs	r2, #1
 8016102:	0018      	movs	r0, r3
 8016104:	f000 fa62 	bl	80165cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681a      	ldr	r2, [r3, #0]
 801610c:	2380      	movs	r3, #128	@ 0x80
 801610e:	05db      	lsls	r3, r3, #23
 8016110:	429a      	cmp	r2, r3
 8016112:	d00e      	beq.n	8016132 <HAL_TIM_PWM_Start+0xda>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	4a15      	ldr	r2, [pc, #84]	@ (8016170 <HAL_TIM_PWM_Start+0x118>)
 801611a:	4293      	cmp	r3, r2
 801611c:	d009      	beq.n	8016132 <HAL_TIM_PWM_Start+0xda>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	4a14      	ldr	r2, [pc, #80]	@ (8016174 <HAL_TIM_PWM_Start+0x11c>)
 8016124:	4293      	cmp	r3, r2
 8016126:	d004      	beq.n	8016132 <HAL_TIM_PWM_Start+0xda>
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	4a12      	ldr	r2, [pc, #72]	@ (8016178 <HAL_TIM_PWM_Start+0x120>)
 801612e:	4293      	cmp	r3, r2
 8016130:	d111      	bne.n	8016156 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	689b      	ldr	r3, [r3, #8]
 8016138:	2207      	movs	r2, #7
 801613a:	4013      	ands	r3, r2
 801613c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2b06      	cmp	r3, #6
 8016142:	d010      	beq.n	8016166 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	681a      	ldr	r2, [r3, #0]
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2101      	movs	r1, #1
 8016150:	430a      	orrs	r2, r1
 8016152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016154:	e007      	b.n	8016166 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	681a      	ldr	r2, [r3, #0]
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	2101      	movs	r1, #1
 8016162:	430a      	orrs	r2, r1
 8016164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016166:	2300      	movs	r3, #0
}
 8016168:	0018      	movs	r0, r3
 801616a:	46bd      	mov	sp, r7
 801616c:	b004      	add	sp, #16
 801616e:	bd80      	pop	{r7, pc}
 8016170:	40000400 	.word	0x40000400
 8016174:	40010800 	.word	0x40010800
 8016178:	40011400 	.word	0x40011400

0801617c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b086      	sub	sp, #24
 8016180:	af00      	add	r7, sp, #0
 8016182:	60f8      	str	r0, [r7, #12]
 8016184:	60b9      	str	r1, [r7, #8]
 8016186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016188:	2317      	movs	r3, #23
 801618a:	18fb      	adds	r3, r7, r3
 801618c:	2200      	movs	r2, #0
 801618e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2238      	movs	r2, #56	@ 0x38
 8016194:	5c9b      	ldrb	r3, [r3, r2]
 8016196:	2b01      	cmp	r3, #1
 8016198:	d101      	bne.n	801619e <HAL_TIM_PWM_ConfigChannel+0x22>
 801619a:	2302      	movs	r3, #2
 801619c:	e0ad      	b.n	80162fa <HAL_TIM_PWM_ConfigChannel+0x17e>
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2238      	movs	r2, #56	@ 0x38
 80161a2:	2101      	movs	r1, #1
 80161a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2b0c      	cmp	r3, #12
 80161aa:	d100      	bne.n	80161ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80161ac:	e076      	b.n	801629c <HAL_TIM_PWM_ConfigChannel+0x120>
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2b0c      	cmp	r3, #12
 80161b2:	d900      	bls.n	80161b6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80161b4:	e095      	b.n	80162e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2b08      	cmp	r3, #8
 80161ba:	d04e      	beq.n	801625a <HAL_TIM_PWM_ConfigChannel+0xde>
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2b08      	cmp	r3, #8
 80161c0:	d900      	bls.n	80161c4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80161c2:	e08e      	b.n	80162e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d003      	beq.n	80161d2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2b04      	cmp	r3, #4
 80161ce:	d021      	beq.n	8016214 <HAL_TIM_PWM_ConfigChannel+0x98>
 80161d0:	e087      	b.n	80162e2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	68ba      	ldr	r2, [r7, #8]
 80161d8:	0011      	movs	r1, r2
 80161da:	0018      	movs	r0, r3
 80161dc:	f000 f8f2 	bl	80163c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	699a      	ldr	r2, [r3, #24]
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	2108      	movs	r1, #8
 80161ec:	430a      	orrs	r2, r1
 80161ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	699a      	ldr	r2, [r3, #24]
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	2104      	movs	r1, #4
 80161fc:	438a      	bics	r2, r1
 80161fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	6999      	ldr	r1, [r3, #24]
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	68da      	ldr	r2, [r3, #12]
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	430a      	orrs	r2, r1
 8016210:	619a      	str	r2, [r3, #24]
      break;
 8016212:	e06b      	b.n	80162ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	68ba      	ldr	r2, [r7, #8]
 801621a:	0011      	movs	r1, r2
 801621c:	0018      	movs	r0, r3
 801621e:	f000 f90d 	bl	801643c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	699a      	ldr	r2, [r3, #24]
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	2180      	movs	r1, #128	@ 0x80
 801622e:	0109      	lsls	r1, r1, #4
 8016230:	430a      	orrs	r2, r1
 8016232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	699a      	ldr	r2, [r3, #24]
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	4931      	ldr	r1, [pc, #196]	@ (8016304 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016240:	400a      	ands	r2, r1
 8016242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	6999      	ldr	r1, [r3, #24]
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	68db      	ldr	r3, [r3, #12]
 801624e:	021a      	lsls	r2, r3, #8
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	430a      	orrs	r2, r1
 8016256:	619a      	str	r2, [r3, #24]
      break;
 8016258:	e048      	b.n	80162ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	68ba      	ldr	r2, [r7, #8]
 8016260:	0011      	movs	r1, r2
 8016262:	0018      	movs	r0, r3
 8016264:	f000 f92c 	bl	80164c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	69da      	ldr	r2, [r3, #28]
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2108      	movs	r1, #8
 8016274:	430a      	orrs	r2, r1
 8016276:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	69da      	ldr	r2, [r3, #28]
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	2104      	movs	r1, #4
 8016284:	438a      	bics	r2, r1
 8016286:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	69d9      	ldr	r1, [r3, #28]
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	68da      	ldr	r2, [r3, #12]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	430a      	orrs	r2, r1
 8016298:	61da      	str	r2, [r3, #28]
      break;
 801629a:	e027      	b.n	80162ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	68ba      	ldr	r2, [r7, #8]
 80162a2:	0011      	movs	r1, r2
 80162a4:	0018      	movs	r0, r3
 80162a6:	f000 f94b 	bl	8016540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	69da      	ldr	r2, [r3, #28]
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	2180      	movs	r1, #128	@ 0x80
 80162b6:	0109      	lsls	r1, r1, #4
 80162b8:	430a      	orrs	r2, r1
 80162ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	69da      	ldr	r2, [r3, #28]
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	490f      	ldr	r1, [pc, #60]	@ (8016304 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80162c8:	400a      	ands	r2, r1
 80162ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	69d9      	ldr	r1, [r3, #28]
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	021a      	lsls	r2, r3, #8
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	430a      	orrs	r2, r1
 80162de:	61da      	str	r2, [r3, #28]
      break;
 80162e0:	e004      	b.n	80162ec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80162e2:	2317      	movs	r3, #23
 80162e4:	18fb      	adds	r3, r7, r3
 80162e6:	2201      	movs	r2, #1
 80162e8:	701a      	strb	r2, [r3, #0]
      break;
 80162ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2238      	movs	r2, #56	@ 0x38
 80162f0:	2100      	movs	r1, #0
 80162f2:	5499      	strb	r1, [r3, r2]

  return status;
 80162f4:	2317      	movs	r3, #23
 80162f6:	18fb      	adds	r3, r7, r3
 80162f8:	781b      	ldrb	r3, [r3, #0]
}
 80162fa:	0018      	movs	r0, r3
 80162fc:	46bd      	mov	sp, r7
 80162fe:	b006      	add	sp, #24
 8016300:	bd80      	pop	{r7, pc}
 8016302:	46c0      	nop			@ (mov r8, r8)
 8016304:	fffffbff 	.word	0xfffffbff

08016308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	2380      	movs	r3, #128	@ 0x80
 801631c:	05db      	lsls	r3, r3, #23
 801631e:	429a      	cmp	r2, r3
 8016320:	d00b      	beq.n	801633a <TIM_Base_SetConfig+0x32>
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	4a23      	ldr	r2, [pc, #140]	@ (80163b4 <TIM_Base_SetConfig+0xac>)
 8016326:	4293      	cmp	r3, r2
 8016328:	d007      	beq.n	801633a <TIM_Base_SetConfig+0x32>
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	4a22      	ldr	r2, [pc, #136]	@ (80163b8 <TIM_Base_SetConfig+0xb0>)
 801632e:	4293      	cmp	r3, r2
 8016330:	d003      	beq.n	801633a <TIM_Base_SetConfig+0x32>
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	4a21      	ldr	r2, [pc, #132]	@ (80163bc <TIM_Base_SetConfig+0xb4>)
 8016336:	4293      	cmp	r3, r2
 8016338:	d108      	bne.n	801634c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2270      	movs	r2, #112	@ 0x70
 801633e:	4393      	bics	r3, r2
 8016340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	68fa      	ldr	r2, [r7, #12]
 8016348:	4313      	orrs	r3, r2
 801634a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801634c:	687a      	ldr	r2, [r7, #4]
 801634e:	2380      	movs	r3, #128	@ 0x80
 8016350:	05db      	lsls	r3, r3, #23
 8016352:	429a      	cmp	r2, r3
 8016354:	d00b      	beq.n	801636e <TIM_Base_SetConfig+0x66>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4a16      	ldr	r2, [pc, #88]	@ (80163b4 <TIM_Base_SetConfig+0xac>)
 801635a:	4293      	cmp	r3, r2
 801635c:	d007      	beq.n	801636e <TIM_Base_SetConfig+0x66>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	4a15      	ldr	r2, [pc, #84]	@ (80163b8 <TIM_Base_SetConfig+0xb0>)
 8016362:	4293      	cmp	r3, r2
 8016364:	d003      	beq.n	801636e <TIM_Base_SetConfig+0x66>
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	4a14      	ldr	r2, [pc, #80]	@ (80163bc <TIM_Base_SetConfig+0xb4>)
 801636a:	4293      	cmp	r3, r2
 801636c:	d108      	bne.n	8016380 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	4a13      	ldr	r2, [pc, #76]	@ (80163c0 <TIM_Base_SetConfig+0xb8>)
 8016372:	4013      	ands	r3, r2
 8016374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	68fa      	ldr	r2, [r7, #12]
 801637c:	4313      	orrs	r3, r2
 801637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2280      	movs	r2, #128	@ 0x80
 8016384:	4393      	bics	r3, r2
 8016386:	001a      	movs	r2, r3
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	691b      	ldr	r3, [r3, #16]
 801638c:	4313      	orrs	r3, r2
 801638e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	68fa      	ldr	r2, [r7, #12]
 8016394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	689a      	ldr	r2, [r3, #8]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	681a      	ldr	r2, [r3, #0]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	2201      	movs	r2, #1
 80163aa:	615a      	str	r2, [r3, #20]
}
 80163ac:	46c0      	nop			@ (mov r8, r8)
 80163ae:	46bd      	mov	sp, r7
 80163b0:	b004      	add	sp, #16
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	40000400 	.word	0x40000400
 80163b8:	40010800 	.word	0x40010800
 80163bc:	40011400 	.word	0x40011400
 80163c0:	fffffcff 	.word	0xfffffcff

080163c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b086      	sub	sp, #24
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	6a1b      	ldr	r3, [r3, #32]
 80163d2:	2201      	movs	r2, #1
 80163d4:	4393      	bics	r3, r2
 80163d6:	001a      	movs	r2, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6a1b      	ldr	r3, [r3, #32]
 80163e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	699b      	ldr	r3, [r3, #24]
 80163ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2270      	movs	r2, #112	@ 0x70
 80163f2:	4393      	bics	r3, r2
 80163f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	2203      	movs	r2, #3
 80163fa:	4393      	bics	r3, r2
 80163fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	68fa      	ldr	r2, [r7, #12]
 8016404:	4313      	orrs	r3, r2
 8016406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	2202      	movs	r2, #2
 801640c:	4393      	bics	r3, r2
 801640e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	689b      	ldr	r3, [r3, #8]
 8016414:	697a      	ldr	r2, [r7, #20]
 8016416:	4313      	orrs	r3, r2
 8016418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	693a      	ldr	r2, [r7, #16]
 801641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	68fa      	ldr	r2, [r7, #12]
 8016424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	685a      	ldr	r2, [r3, #4]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	697a      	ldr	r2, [r7, #20]
 8016432:	621a      	str	r2, [r3, #32]
}
 8016434:	46c0      	nop			@ (mov r8, r8)
 8016436:	46bd      	mov	sp, r7
 8016438:	b006      	add	sp, #24
 801643a:	bd80      	pop	{r7, pc}

0801643c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b086      	sub	sp, #24
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	6a1b      	ldr	r3, [r3, #32]
 801644a:	2210      	movs	r2, #16
 801644c:	4393      	bics	r3, r2
 801644e:	001a      	movs	r2, r3
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6a1b      	ldr	r3, [r3, #32]
 8016458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	699b      	ldr	r3, [r3, #24]
 8016464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	4a13      	ldr	r2, [pc, #76]	@ (80164b8 <TIM_OC2_SetConfig+0x7c>)
 801646a:	4013      	ands	r3, r2
 801646c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	4a12      	ldr	r2, [pc, #72]	@ (80164bc <TIM_OC2_SetConfig+0x80>)
 8016472:	4013      	ands	r3, r2
 8016474:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	021b      	lsls	r3, r3, #8
 801647c:	68fa      	ldr	r2, [r7, #12]
 801647e:	4313      	orrs	r3, r2
 8016480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016482:	697b      	ldr	r3, [r7, #20]
 8016484:	2220      	movs	r2, #32
 8016486:	4393      	bics	r3, r2
 8016488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801648a:	683b      	ldr	r3, [r7, #0]
 801648c:	689b      	ldr	r3, [r3, #8]
 801648e:	011b      	lsls	r3, r3, #4
 8016490:	697a      	ldr	r2, [r7, #20]
 8016492:	4313      	orrs	r3, r2
 8016494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	693a      	ldr	r2, [r7, #16]
 801649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	68fa      	ldr	r2, [r7, #12]
 80164a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	685a      	ldr	r2, [r3, #4]
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	697a      	ldr	r2, [r7, #20]
 80164ae:	621a      	str	r2, [r3, #32]
}
 80164b0:	46c0      	nop			@ (mov r8, r8)
 80164b2:	46bd      	mov	sp, r7
 80164b4:	b006      	add	sp, #24
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	ffff8fff 	.word	0xffff8fff
 80164bc:	fffffcff 	.word	0xfffffcff

080164c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b086      	sub	sp, #24
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	6a1b      	ldr	r3, [r3, #32]
 80164ce:	4a1a      	ldr	r2, [pc, #104]	@ (8016538 <TIM_OC3_SetConfig+0x78>)
 80164d0:	401a      	ands	r2, r3
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	6a1b      	ldr	r3, [r3, #32]
 80164da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	685b      	ldr	r3, [r3, #4]
 80164e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	69db      	ldr	r3, [r3, #28]
 80164e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2270      	movs	r2, #112	@ 0x70
 80164ec:	4393      	bics	r3, r2
 80164ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2203      	movs	r2, #3
 80164f4:	4393      	bics	r3, r2
 80164f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	68fa      	ldr	r2, [r7, #12]
 80164fe:	4313      	orrs	r3, r2
 8016500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	4a0d      	ldr	r2, [pc, #52]	@ (801653c <TIM_OC3_SetConfig+0x7c>)
 8016506:	4013      	ands	r3, r2
 8016508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	689b      	ldr	r3, [r3, #8]
 801650e:	021b      	lsls	r3, r3, #8
 8016510:	697a      	ldr	r2, [r7, #20]
 8016512:	4313      	orrs	r3, r2
 8016514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	693a      	ldr	r2, [r7, #16]
 801651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	68fa      	ldr	r2, [r7, #12]
 8016520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	685a      	ldr	r2, [r3, #4]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	697a      	ldr	r2, [r7, #20]
 801652e:	621a      	str	r2, [r3, #32]
}
 8016530:	46c0      	nop			@ (mov r8, r8)
 8016532:	46bd      	mov	sp, r7
 8016534:	b006      	add	sp, #24
 8016536:	bd80      	pop	{r7, pc}
 8016538:	fffffeff 	.word	0xfffffeff
 801653c:	fffffdff 	.word	0xfffffdff

08016540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b086      	sub	sp, #24
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
 8016548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	6a1b      	ldr	r3, [r3, #32]
 801654e:	4a1b      	ldr	r2, [pc, #108]	@ (80165bc <TIM_OC4_SetConfig+0x7c>)
 8016550:	401a      	ands	r2, r3
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	6a1b      	ldr	r3, [r3, #32]
 801655a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	69db      	ldr	r3, [r3, #28]
 8016566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	4a15      	ldr	r2, [pc, #84]	@ (80165c0 <TIM_OC4_SetConfig+0x80>)
 801656c:	4013      	ands	r3, r2
 801656e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	4a14      	ldr	r2, [pc, #80]	@ (80165c4 <TIM_OC4_SetConfig+0x84>)
 8016574:	4013      	ands	r3, r2
 8016576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	021b      	lsls	r3, r3, #8
 801657e:	68fa      	ldr	r2, [r7, #12]
 8016580:	4313      	orrs	r3, r2
 8016582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	4a10      	ldr	r2, [pc, #64]	@ (80165c8 <TIM_OC4_SetConfig+0x88>)
 8016588:	4013      	ands	r3, r2
 801658a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	689b      	ldr	r3, [r3, #8]
 8016590:	031b      	lsls	r3, r3, #12
 8016592:	697a      	ldr	r2, [r7, #20]
 8016594:	4313      	orrs	r3, r2
 8016596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	693a      	ldr	r2, [r7, #16]
 801659c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	68fa      	ldr	r2, [r7, #12]
 80165a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80165a4:	683b      	ldr	r3, [r7, #0]
 80165a6:	685a      	ldr	r2, [r3, #4]
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	697a      	ldr	r2, [r7, #20]
 80165b0:	621a      	str	r2, [r3, #32]
}
 80165b2:	46c0      	nop			@ (mov r8, r8)
 80165b4:	46bd      	mov	sp, r7
 80165b6:	b006      	add	sp, #24
 80165b8:	bd80      	pop	{r7, pc}
 80165ba:	46c0      	nop			@ (mov r8, r8)
 80165bc:	ffffefff 	.word	0xffffefff
 80165c0:	ffff8fff 	.word	0xffff8fff
 80165c4:	fffffcff 	.word	0xfffffcff
 80165c8:	ffffdfff 	.word	0xffffdfff

080165cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b086      	sub	sp, #24
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	221f      	movs	r2, #31
 80165dc:	4013      	ands	r3, r2
 80165de:	2201      	movs	r2, #1
 80165e0:	409a      	lsls	r2, r3
 80165e2:	0013      	movs	r3, r2
 80165e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	6a1b      	ldr	r3, [r3, #32]
 80165ea:	697a      	ldr	r2, [r7, #20]
 80165ec:	43d2      	mvns	r2, r2
 80165ee:	401a      	ands	r2, r3
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	6a1a      	ldr	r2, [r3, #32]
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	211f      	movs	r1, #31
 80165fc:	400b      	ands	r3, r1
 80165fe:	6879      	ldr	r1, [r7, #4]
 8016600:	4099      	lsls	r1, r3
 8016602:	000b      	movs	r3, r1
 8016604:	431a      	orrs	r2, r3
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	621a      	str	r2, [r3, #32]
}
 801660a:	46c0      	nop			@ (mov r8, r8)
 801660c:	46bd      	mov	sp, r7
 801660e:	b006      	add	sp, #24
 8016610:	bd80      	pop	{r7, pc}
	...

08016614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b084      	sub	sp, #16
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2238      	movs	r2, #56	@ 0x38
 8016622:	5c9b      	ldrb	r3, [r3, r2]
 8016624:	2b01      	cmp	r3, #1
 8016626:	d101      	bne.n	801662c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016628:	2302      	movs	r3, #2
 801662a:	e047      	b.n	80166bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2238      	movs	r2, #56	@ 0x38
 8016630:	2101      	movs	r1, #1
 8016632:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2239      	movs	r2, #57	@ 0x39
 8016638:	2102      	movs	r1, #2
 801663a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	689b      	ldr	r3, [r3, #8]
 801664a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	2270      	movs	r2, #112	@ 0x70
 8016650:	4393      	bics	r3, r2
 8016652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	68fa      	ldr	r2, [r7, #12]
 801665a:	4313      	orrs	r3, r2
 801665c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	681a      	ldr	r2, [r3, #0]
 801666a:	2380      	movs	r3, #128	@ 0x80
 801666c:	05db      	lsls	r3, r3, #23
 801666e:	429a      	cmp	r2, r3
 8016670:	d00e      	beq.n	8016690 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	4a13      	ldr	r2, [pc, #76]	@ (80166c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016678:	4293      	cmp	r3, r2
 801667a:	d009      	beq.n	8016690 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a11      	ldr	r2, [pc, #68]	@ (80166c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d004      	beq.n	8016690 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	4a10      	ldr	r2, [pc, #64]	@ (80166cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d10c      	bne.n	80166aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	2280      	movs	r2, #128	@ 0x80
 8016694:	4393      	bics	r3, r2
 8016696:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	68ba      	ldr	r2, [r7, #8]
 801669e:	4313      	orrs	r3, r2
 80166a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	68ba      	ldr	r2, [r7, #8]
 80166a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2239      	movs	r2, #57	@ 0x39
 80166ae:	2101      	movs	r1, #1
 80166b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	2238      	movs	r2, #56	@ 0x38
 80166b6:	2100      	movs	r1, #0
 80166b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80166ba:	2300      	movs	r3, #0
}
 80166bc:	0018      	movs	r0, r3
 80166be:	46bd      	mov	sp, r7
 80166c0:	b004      	add	sp, #16
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	40000400 	.word	0x40000400
 80166c8:	40010800 	.word	0x40010800
 80166cc:	40011400 	.word	0x40011400

080166d0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2238      	movs	r2, #56	@ 0x38
 80166de:	5c9b      	ldrb	r3, [r3, r2]
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d101      	bne.n	80166e8 <HAL_TIMEx_RemapConfig+0x18>
 80166e4:	2302      	movs	r3, #2
 80166e6:	e00c      	b.n	8016702 <HAL_TIMEx_RemapConfig+0x32>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2238      	movs	r2, #56	@ 0x38
 80166ec:	2101      	movs	r1, #1
 80166ee:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	683a      	ldr	r2, [r7, #0]
 80166f6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2238      	movs	r2, #56	@ 0x38
 80166fc:	2100      	movs	r1, #0
 80166fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016700:	2300      	movs	r3, #0
}
 8016702:	0018      	movs	r0, r3
 8016704:	46bd      	mov	sp, r7
 8016706:	b002      	add	sp, #8
 8016708:	bd80      	pop	{r7, pc}
	...

0801670c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d101      	bne.n	801671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801671a:	2301      	movs	r3, #1
 801671c:	e053      	b.n	80167c6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016722:	2b00      	cmp	r3, #0
 8016724:	d116      	bne.n	8016754 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	2278      	movs	r2, #120	@ 0x78
 801672a:	2100      	movs	r1, #0
 801672c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	0018      	movs	r0, r3
 8016732:	f000 fd65 	bl	8017200 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	22b0      	movs	r2, #176	@ 0xb0
 801673a:	589b      	ldr	r3, [r3, r2]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d103      	bne.n	8016748 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	21b0      	movs	r1, #176	@ 0xb0
 8016744:	4a22      	ldr	r2, [pc, #136]	@ (80167d0 <HAL_UART_Init+0xc4>)
 8016746:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	22b0      	movs	r2, #176	@ 0xb0
 801674c:	589b      	ldr	r3, [r3, r2]
 801674e:	687a      	ldr	r2, [r7, #4]
 8016750:	0010      	movs	r0, r2
 8016752:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2224      	movs	r2, #36	@ 0x24
 8016758:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	681a      	ldr	r2, [r3, #0]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	2101      	movs	r1, #1
 8016766:	438a      	bics	r2, r1
 8016768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	0018      	movs	r0, r3
 801676e:	f000 fd8b 	bl	8017288 <UART_SetConfig>
 8016772:	0003      	movs	r3, r0
 8016774:	2b01      	cmp	r3, #1
 8016776:	d101      	bne.n	801677c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8016778:	2301      	movs	r3, #1
 801677a:	e024      	b.n	80167c6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016780:	2b00      	cmp	r3, #0
 8016782:	d003      	beq.n	801678c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	0018      	movs	r0, r3
 8016788:	f001 f81c 	bl	80177c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	685a      	ldr	r2, [r3, #4]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	490f      	ldr	r1, [pc, #60]	@ (80167d4 <HAL_UART_Init+0xc8>)
 8016798:	400a      	ands	r2, r1
 801679a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	689a      	ldr	r2, [r3, #8]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	212a      	movs	r1, #42	@ 0x2a
 80167a8:	438a      	bics	r2, r1
 80167aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	681a      	ldr	r2, [r3, #0]
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2101      	movs	r1, #1
 80167b8:	430a      	orrs	r2, r1
 80167ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	0018      	movs	r0, r3
 80167c0:	f001 f8b4 	bl	801792c <UART_CheckIdleState>
 80167c4:	0003      	movs	r3, r0
}
 80167c6:	0018      	movs	r0, r3
 80167c8:	46bd      	mov	sp, r7
 80167ca:	b002      	add	sp, #8
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	46c0      	nop			@ (mov r8, r8)
 80167d0:	0800d7b9 	.word	0x0800d7b9
 80167d4:	ffffb7ff 	.word	0xffffb7ff

080167d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b08a      	sub	sp, #40	@ 0x28
 80167dc:	af02      	add	r7, sp, #8
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	603b      	str	r3, [r7, #0]
 80167e4:	1dbb      	adds	r3, r7, #6
 80167e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80167ec:	2b20      	cmp	r3, #32
 80167ee:	d000      	beq.n	80167f2 <HAL_UART_Transmit+0x1a>
 80167f0:	e08c      	b.n	801690c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d003      	beq.n	8016800 <HAL_UART_Transmit+0x28>
 80167f8:	1dbb      	adds	r3, r7, #6
 80167fa:	881b      	ldrh	r3, [r3, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d101      	bne.n	8016804 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8016800:	2301      	movs	r3, #1
 8016802:	e084      	b.n	801690e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	689a      	ldr	r2, [r3, #8]
 8016808:	2380      	movs	r3, #128	@ 0x80
 801680a:	015b      	lsls	r3, r3, #5
 801680c:	429a      	cmp	r2, r3
 801680e:	d109      	bne.n	8016824 <HAL_UART_Transmit+0x4c>
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	691b      	ldr	r3, [r3, #16]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d105      	bne.n	8016824 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	2201      	movs	r2, #1
 801681c:	4013      	ands	r3, r2
 801681e:	d001      	beq.n	8016824 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8016820:	2301      	movs	r3, #1
 8016822:	e074      	b.n	801690e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2284      	movs	r2, #132	@ 0x84
 8016828:	2100      	movs	r1, #0
 801682a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	2221      	movs	r2, #33	@ 0x21
 8016830:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016832:	f7f7 fda5 	bl	800e380 <HAL_GetTick>
 8016836:	0003      	movs	r3, r0
 8016838:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	1dba      	adds	r2, r7, #6
 801683e:	2150      	movs	r1, #80	@ 0x50
 8016840:	8812      	ldrh	r2, [r2, #0]
 8016842:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	1dba      	adds	r2, r7, #6
 8016848:	2152      	movs	r1, #82	@ 0x52
 801684a:	8812      	ldrh	r2, [r2, #0]
 801684c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	689a      	ldr	r2, [r3, #8]
 8016852:	2380      	movs	r3, #128	@ 0x80
 8016854:	015b      	lsls	r3, r3, #5
 8016856:	429a      	cmp	r2, r3
 8016858:	d108      	bne.n	801686c <HAL_UART_Transmit+0x94>
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	691b      	ldr	r3, [r3, #16]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d104      	bne.n	801686c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8016862:	2300      	movs	r3, #0
 8016864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016866:	68bb      	ldr	r3, [r7, #8]
 8016868:	61bb      	str	r3, [r7, #24]
 801686a:	e003      	b.n	8016874 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016870:	2300      	movs	r3, #0
 8016872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8016874:	e02f      	b.n	80168d6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016876:	697a      	ldr	r2, [r7, #20]
 8016878:	68f8      	ldr	r0, [r7, #12]
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	9300      	str	r3, [sp, #0]
 801687e:	0013      	movs	r3, r2
 8016880:	2200      	movs	r2, #0
 8016882:	2180      	movs	r1, #128	@ 0x80
 8016884:	f001 f8fa 	bl	8017a7c <UART_WaitOnFlagUntilTimeout>
 8016888:	1e03      	subs	r3, r0, #0
 801688a:	d004      	beq.n	8016896 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	2220      	movs	r2, #32
 8016890:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8016892:	2303      	movs	r3, #3
 8016894:	e03b      	b.n	801690e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8016896:	69fb      	ldr	r3, [r7, #28]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d10b      	bne.n	80168b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801689c:	69bb      	ldr	r3, [r7, #24]
 801689e:	881b      	ldrh	r3, [r3, #0]
 80168a0:	001a      	movs	r2, r3
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	05d2      	lsls	r2, r2, #23
 80168a8:	0dd2      	lsrs	r2, r2, #23
 80168aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80168ac:	69bb      	ldr	r3, [r7, #24]
 80168ae:	3302      	adds	r3, #2
 80168b0:	61bb      	str	r3, [r7, #24]
 80168b2:	e007      	b.n	80168c4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80168b4:	69fb      	ldr	r3, [r7, #28]
 80168b6:	781a      	ldrb	r2, [r3, #0]
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80168be:	69fb      	ldr	r3, [r7, #28]
 80168c0:	3301      	adds	r3, #1
 80168c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	2252      	movs	r2, #82	@ 0x52
 80168c8:	5a9b      	ldrh	r3, [r3, r2]
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	3b01      	subs	r3, #1
 80168ce:	b299      	uxth	r1, r3
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2252      	movs	r2, #82	@ 0x52
 80168d4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	2252      	movs	r2, #82	@ 0x52
 80168da:	5a9b      	ldrh	r3, [r3, r2]
 80168dc:	b29b      	uxth	r3, r3
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d1c9      	bne.n	8016876 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80168e2:	697a      	ldr	r2, [r7, #20]
 80168e4:	68f8      	ldr	r0, [r7, #12]
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	9300      	str	r3, [sp, #0]
 80168ea:	0013      	movs	r3, r2
 80168ec:	2200      	movs	r2, #0
 80168ee:	2140      	movs	r1, #64	@ 0x40
 80168f0:	f001 f8c4 	bl	8017a7c <UART_WaitOnFlagUntilTimeout>
 80168f4:	1e03      	subs	r3, r0, #0
 80168f6:	d004      	beq.n	8016902 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	2220      	movs	r2, #32
 80168fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80168fe:	2303      	movs	r3, #3
 8016900:	e005      	b.n	801690e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	2220      	movs	r2, #32
 8016906:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016908:	2300      	movs	r3, #0
 801690a:	e000      	b.n	801690e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801690c:	2302      	movs	r3, #2
  }
}
 801690e:	0018      	movs	r0, r3
 8016910:	46bd      	mov	sp, r7
 8016912:	b008      	add	sp, #32
 8016914:	bd80      	pop	{r7, pc}
	...

08016918 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b088      	sub	sp, #32
 801691c:	af00      	add	r7, sp, #0
 801691e:	60f8      	str	r0, [r7, #12]
 8016920:	60b9      	str	r1, [r7, #8]
 8016922:	1dbb      	adds	r3, r7, #6
 8016924:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	2280      	movs	r2, #128	@ 0x80
 801692a:	589b      	ldr	r3, [r3, r2]
 801692c:	2b20      	cmp	r3, #32
 801692e:	d14a      	bne.n	80169c6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d003      	beq.n	801693e <HAL_UART_Receive_IT+0x26>
 8016936:	1dbb      	adds	r3, r7, #6
 8016938:	881b      	ldrh	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d101      	bne.n	8016942 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801693e:	2301      	movs	r3, #1
 8016940:	e042      	b.n	80169c8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	689a      	ldr	r2, [r3, #8]
 8016946:	2380      	movs	r3, #128	@ 0x80
 8016948:	015b      	lsls	r3, r3, #5
 801694a:	429a      	cmp	r2, r3
 801694c:	d109      	bne.n	8016962 <HAL_UART_Receive_IT+0x4a>
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	691b      	ldr	r3, [r3, #16]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d105      	bne.n	8016962 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	2201      	movs	r2, #1
 801695a:	4013      	ands	r3, r2
 801695c:	d001      	beq.n	8016962 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801695e:	2301      	movs	r3, #1
 8016960:	e032      	b.n	80169c8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	2200      	movs	r2, #0
 8016966:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	4a18      	ldr	r2, [pc, #96]	@ (80169d0 <HAL_UART_Receive_IT+0xb8>)
 801696e:	4293      	cmp	r3, r2
 8016970:	d020      	beq.n	80169b4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	685a      	ldr	r2, [r3, #4]
 8016978:	2380      	movs	r3, #128	@ 0x80
 801697a:	041b      	lsls	r3, r3, #16
 801697c:	4013      	ands	r3, r2
 801697e:	d019      	beq.n	80169b4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016980:	f3ef 8310 	mrs	r3, PRIMASK
 8016984:	613b      	str	r3, [r7, #16]
  return(result);
 8016986:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016988:	61fb      	str	r3, [r7, #28]
 801698a:	2301      	movs	r3, #1
 801698c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	f383 8810 	msr	PRIMASK, r3
}
 8016994:	46c0      	nop			@ (mov r8, r8)
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2180      	movs	r1, #128	@ 0x80
 80169a2:	04c9      	lsls	r1, r1, #19
 80169a4:	430a      	orrs	r2, r1
 80169a6:	601a      	str	r2, [r3, #0]
 80169a8:	69fb      	ldr	r3, [r7, #28]
 80169aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169ac:	69bb      	ldr	r3, [r7, #24]
 80169ae:	f383 8810 	msr	PRIMASK, r3
}
 80169b2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80169b4:	1dbb      	adds	r3, r7, #6
 80169b6:	881a      	ldrh	r2, [r3, #0]
 80169b8:	68b9      	ldr	r1, [r7, #8]
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	0018      	movs	r0, r3
 80169be:	f001 f8c7 	bl	8017b50 <UART_Start_Receive_IT>
 80169c2:	0003      	movs	r3, r0
 80169c4:	e000      	b.n	80169c8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80169c6:	2302      	movs	r3, #2
  }
}
 80169c8:	0018      	movs	r0, r3
 80169ca:	46bd      	mov	sp, r7
 80169cc:	b008      	add	sp, #32
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	40004800 	.word	0x40004800

080169d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b088      	sub	sp, #32
 80169d8:	af00      	add	r7, sp, #0
 80169da:	60f8      	str	r0, [r7, #12]
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	1dbb      	adds	r3, r7, #6
 80169e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80169e6:	2b20      	cmp	r3, #32
 80169e8:	d000      	beq.n	80169ec <HAL_UART_Transmit_DMA+0x18>
 80169ea:	e077      	b.n	8016adc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d003      	beq.n	80169fa <HAL_UART_Transmit_DMA+0x26>
 80169f2:	1dbb      	adds	r3, r7, #6
 80169f4:	881b      	ldrh	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d101      	bne.n	80169fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80169fa:	2301      	movs	r3, #1
 80169fc:	e06f      	b.n	8016ade <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	689a      	ldr	r2, [r3, #8]
 8016a02:	2380      	movs	r3, #128	@ 0x80
 8016a04:	015b      	lsls	r3, r3, #5
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d109      	bne.n	8016a1e <HAL_UART_Transmit_DMA+0x4a>
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	691b      	ldr	r3, [r3, #16]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d105      	bne.n	8016a1e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	2201      	movs	r2, #1
 8016a16:	4013      	ands	r3, r2
 8016a18:	d001      	beq.n	8016a1e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	e05f      	b.n	8016ade <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	68ba      	ldr	r2, [r7, #8]
 8016a22:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	1dba      	adds	r2, r7, #6
 8016a28:	2150      	movs	r1, #80	@ 0x50
 8016a2a:	8812      	ldrh	r2, [r2, #0]
 8016a2c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	1dba      	adds	r2, r7, #6
 8016a32:	2152      	movs	r1, #82	@ 0x52
 8016a34:	8812      	ldrh	r2, [r2, #0]
 8016a36:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2284      	movs	r2, #132	@ 0x84
 8016a3c:	2100      	movs	r1, #0
 8016a3e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	2221      	movs	r2, #33	@ 0x21
 8016a44:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d027      	beq.n	8016a9e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a52:	4a25      	ldr	r2, [pc, #148]	@ (8016ae8 <HAL_UART_Transmit_DMA+0x114>)
 8016a54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a5a:	4a24      	ldr	r2, [pc, #144]	@ (8016aec <HAL_UART_Transmit_DMA+0x118>)
 8016a5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a62:	4a23      	ldr	r2, [pc, #140]	@ (8016af0 <HAL_UART_Transmit_DMA+0x11c>)
 8016a64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a76:	0019      	movs	r1, r3
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	3328      	adds	r3, #40	@ 0x28
 8016a7e:	001a      	movs	r2, r3
 8016a80:	1dbb      	adds	r3, r7, #6
 8016a82:	881b      	ldrh	r3, [r3, #0]
 8016a84:	f7f8 f9ce 	bl	800ee24 <HAL_DMA_Start_IT>
 8016a88:	1e03      	subs	r3, r0, #0
 8016a8a:	d008      	beq.n	8016a9e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2284      	movs	r2, #132	@ 0x84
 8016a90:	2110      	movs	r1, #16
 8016a92:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2220      	movs	r2, #32
 8016a98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	e01f      	b.n	8016ade <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	2240      	movs	r2, #64	@ 0x40
 8016aa4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8016aaa:	613b      	str	r3, [r7, #16]
  return(result);
 8016aac:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016aae:	61fb      	str	r3, [r7, #28]
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	f383 8810 	msr	PRIMASK, r3
}
 8016aba:	46c0      	nop			@ (mov r8, r8)
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	689a      	ldr	r2, [r3, #8]
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	2180      	movs	r1, #128	@ 0x80
 8016ac8:	430a      	orrs	r2, r1
 8016aca:	609a      	str	r2, [r3, #8]
 8016acc:	69fb      	ldr	r3, [r7, #28]
 8016ace:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ad0:	69bb      	ldr	r3, [r7, #24]
 8016ad2:	f383 8810 	msr	PRIMASK, r3
}
 8016ad6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	e000      	b.n	8016ade <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016adc:	2302      	movs	r3, #2
  }
}
 8016ade:	0018      	movs	r0, r3
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	b008      	add	sp, #32
 8016ae4:	bd80      	pop	{r7, pc}
 8016ae6:	46c0      	nop			@ (mov r8, r8)
 8016ae8:	08017f35 	.word	0x08017f35
 8016aec:	08017fd1 	.word	0x08017fd1
 8016af0:	08018171 	.word	0x08018171

08016af4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b088      	sub	sp, #32
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	60b9      	str	r1, [r7, #8]
 8016afe:	1dbb      	adds	r3, r7, #6
 8016b00:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	2280      	movs	r2, #128	@ 0x80
 8016b06:	589b      	ldr	r3, [r3, r2]
 8016b08:	2b20      	cmp	r3, #32
 8016b0a:	d14a      	bne.n	8016ba2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d003      	beq.n	8016b1a <HAL_UART_Receive_DMA+0x26>
 8016b12:	1dbb      	adds	r3, r7, #6
 8016b14:	881b      	ldrh	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d101      	bne.n	8016b1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e042      	b.n	8016ba4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	689a      	ldr	r2, [r3, #8]
 8016b22:	2380      	movs	r3, #128	@ 0x80
 8016b24:	015b      	lsls	r3, r3, #5
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d109      	bne.n	8016b3e <HAL_UART_Receive_DMA+0x4a>
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	691b      	ldr	r3, [r3, #16]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d105      	bne.n	8016b3e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016b32:	68bb      	ldr	r3, [r7, #8]
 8016b34:	2201      	movs	r2, #1
 8016b36:	4013      	ands	r3, r2
 8016b38:	d001      	beq.n	8016b3e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	e032      	b.n	8016ba4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2200      	movs	r2, #0
 8016b42:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	4a18      	ldr	r2, [pc, #96]	@ (8016bac <HAL_UART_Receive_DMA+0xb8>)
 8016b4a:	4293      	cmp	r3, r2
 8016b4c:	d020      	beq.n	8016b90 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	685a      	ldr	r2, [r3, #4]
 8016b54:	2380      	movs	r3, #128	@ 0x80
 8016b56:	041b      	lsls	r3, r3, #16
 8016b58:	4013      	ands	r3, r2
 8016b5a:	d019      	beq.n	8016b90 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8016b60:	613b      	str	r3, [r7, #16]
  return(result);
 8016b62:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016b64:	61fb      	str	r3, [r7, #28]
 8016b66:	2301      	movs	r3, #1
 8016b68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	f383 8810 	msr	PRIMASK, r3
}
 8016b70:	46c0      	nop			@ (mov r8, r8)
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	681a      	ldr	r2, [r3, #0]
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	2180      	movs	r1, #128	@ 0x80
 8016b7e:	04c9      	lsls	r1, r1, #19
 8016b80:	430a      	orrs	r2, r1
 8016b82:	601a      	str	r2, [r3, #0]
 8016b84:	69fb      	ldr	r3, [r7, #28]
 8016b86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b88:	69bb      	ldr	r3, [r7, #24]
 8016b8a:	f383 8810 	msr	PRIMASK, r3
}
 8016b8e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016b90:	1dbb      	adds	r3, r7, #6
 8016b92:	881a      	ldrh	r2, [r3, #0]
 8016b94:	68b9      	ldr	r1, [r7, #8]
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	0018      	movs	r0, r3
 8016b9a:	f001 f8a3 	bl	8017ce4 <UART_Start_Receive_DMA>
 8016b9e:	0003      	movs	r3, r0
 8016ba0:	e000      	b.n	8016ba4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016ba2:	2302      	movs	r3, #2
  }
}
 8016ba4:	0018      	movs	r0, r3
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	b008      	add	sp, #32
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	40004800 	.word	0x40004800

08016bb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016bb0:	b590      	push	{r4, r7, lr}
 8016bb2:	b0ab      	sub	sp, #172	@ 0xac
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	69db      	ldr	r3, [r3, #28]
 8016bbe:	22a4      	movs	r2, #164	@ 0xa4
 8016bc0:	18b9      	adds	r1, r7, r2
 8016bc2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	20a0      	movs	r0, #160	@ 0xa0
 8016bcc:	1839      	adds	r1, r7, r0
 8016bce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	689b      	ldr	r3, [r3, #8]
 8016bd6:	219c      	movs	r1, #156	@ 0x9c
 8016bd8:	1879      	adds	r1, r7, r1
 8016bda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016bdc:	0011      	movs	r1, r2
 8016bde:	18bb      	adds	r3, r7, r2
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	4a9c      	ldr	r2, [pc, #624]	@ (8016e54 <HAL_UART_IRQHandler+0x2a4>)
 8016be4:	4013      	ands	r3, r2
 8016be6:	2298      	movs	r2, #152	@ 0x98
 8016be8:	18bc      	adds	r4, r7, r2
 8016bea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8016bec:	18bb      	adds	r3, r7, r2
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d114      	bne.n	8016c1e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016bf4:	187b      	adds	r3, r7, r1
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2220      	movs	r2, #32
 8016bfa:	4013      	ands	r3, r2
 8016bfc:	d00f      	beq.n	8016c1e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016bfe:	183b      	adds	r3, r7, r0
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	2220      	movs	r2, #32
 8016c04:	4013      	ands	r3, r2
 8016c06:	d00a      	beq.n	8016c1e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d100      	bne.n	8016c12 <HAL_UART_IRQHandler+0x62>
 8016c10:	e2aa      	b.n	8017168 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016c16:	687a      	ldr	r2, [r7, #4]
 8016c18:	0010      	movs	r0, r2
 8016c1a:	4798      	blx	r3
      }
      return;
 8016c1c:	e2a4      	b.n	8017168 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016c1e:	2398      	movs	r3, #152	@ 0x98
 8016c20:	18fb      	adds	r3, r7, r3
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d100      	bne.n	8016c2a <HAL_UART_IRQHandler+0x7a>
 8016c28:	e11a      	b.n	8016e60 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016c2a:	239c      	movs	r3, #156	@ 0x9c
 8016c2c:	18fb      	adds	r3, r7, r3
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2201      	movs	r2, #1
 8016c32:	4013      	ands	r3, r2
 8016c34:	d106      	bne.n	8016c44 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8016c36:	23a0      	movs	r3, #160	@ 0xa0
 8016c38:	18fb      	adds	r3, r7, r3
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	4a86      	ldr	r2, [pc, #536]	@ (8016e58 <HAL_UART_IRQHandler+0x2a8>)
 8016c3e:	4013      	ands	r3, r2
 8016c40:	d100      	bne.n	8016c44 <HAL_UART_IRQHandler+0x94>
 8016c42:	e10d      	b.n	8016e60 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016c44:	23a4      	movs	r3, #164	@ 0xa4
 8016c46:	18fb      	adds	r3, r7, r3
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2201      	movs	r2, #1
 8016c4c:	4013      	ands	r3, r2
 8016c4e:	d012      	beq.n	8016c76 <HAL_UART_IRQHandler+0xc6>
 8016c50:	23a0      	movs	r3, #160	@ 0xa0
 8016c52:	18fb      	adds	r3, r7, r3
 8016c54:	681a      	ldr	r2, [r3, #0]
 8016c56:	2380      	movs	r3, #128	@ 0x80
 8016c58:	005b      	lsls	r3, r3, #1
 8016c5a:	4013      	ands	r3, r2
 8016c5c:	d00b      	beq.n	8016c76 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	2201      	movs	r2, #1
 8016c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	2284      	movs	r2, #132	@ 0x84
 8016c6a:	589b      	ldr	r3, [r3, r2]
 8016c6c:	2201      	movs	r2, #1
 8016c6e:	431a      	orrs	r2, r3
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2184      	movs	r1, #132	@ 0x84
 8016c74:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016c76:	23a4      	movs	r3, #164	@ 0xa4
 8016c78:	18fb      	adds	r3, r7, r3
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	2202      	movs	r2, #2
 8016c7e:	4013      	ands	r3, r2
 8016c80:	d011      	beq.n	8016ca6 <HAL_UART_IRQHandler+0xf6>
 8016c82:	239c      	movs	r3, #156	@ 0x9c
 8016c84:	18fb      	adds	r3, r7, r3
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2201      	movs	r2, #1
 8016c8a:	4013      	ands	r3, r2
 8016c8c:	d00b      	beq.n	8016ca6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	2202      	movs	r2, #2
 8016c94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2284      	movs	r2, #132	@ 0x84
 8016c9a:	589b      	ldr	r3, [r3, r2]
 8016c9c:	2204      	movs	r2, #4
 8016c9e:	431a      	orrs	r2, r3
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2184      	movs	r1, #132	@ 0x84
 8016ca4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016ca6:	23a4      	movs	r3, #164	@ 0xa4
 8016ca8:	18fb      	adds	r3, r7, r3
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	2204      	movs	r2, #4
 8016cae:	4013      	ands	r3, r2
 8016cb0:	d011      	beq.n	8016cd6 <HAL_UART_IRQHandler+0x126>
 8016cb2:	239c      	movs	r3, #156	@ 0x9c
 8016cb4:	18fb      	adds	r3, r7, r3
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2201      	movs	r2, #1
 8016cba:	4013      	ands	r3, r2
 8016cbc:	d00b      	beq.n	8016cd6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	2204      	movs	r2, #4
 8016cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2284      	movs	r2, #132	@ 0x84
 8016cca:	589b      	ldr	r3, [r3, r2]
 8016ccc:	2202      	movs	r2, #2
 8016cce:	431a      	orrs	r2, r3
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2184      	movs	r1, #132	@ 0x84
 8016cd4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016cd6:	23a4      	movs	r3, #164	@ 0xa4
 8016cd8:	18fb      	adds	r3, r7, r3
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2208      	movs	r2, #8
 8016cde:	4013      	ands	r3, r2
 8016ce0:	d017      	beq.n	8016d12 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016ce2:	23a0      	movs	r3, #160	@ 0xa0
 8016ce4:	18fb      	adds	r3, r7, r3
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	2220      	movs	r2, #32
 8016cea:	4013      	ands	r3, r2
 8016cec:	d105      	bne.n	8016cfa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016cee:	239c      	movs	r3, #156	@ 0x9c
 8016cf0:	18fb      	adds	r3, r7, r3
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	2201      	movs	r2, #1
 8016cf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016cf8:	d00b      	beq.n	8016d12 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	2208      	movs	r2, #8
 8016d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	2284      	movs	r2, #132	@ 0x84
 8016d06:	589b      	ldr	r3, [r3, r2]
 8016d08:	2208      	movs	r2, #8
 8016d0a:	431a      	orrs	r2, r3
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2184      	movs	r1, #132	@ 0x84
 8016d10:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016d12:	23a4      	movs	r3, #164	@ 0xa4
 8016d14:	18fb      	adds	r3, r7, r3
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	2380      	movs	r3, #128	@ 0x80
 8016d1a:	011b      	lsls	r3, r3, #4
 8016d1c:	4013      	ands	r3, r2
 8016d1e:	d013      	beq.n	8016d48 <HAL_UART_IRQHandler+0x198>
 8016d20:	23a0      	movs	r3, #160	@ 0xa0
 8016d22:	18fb      	adds	r3, r7, r3
 8016d24:	681a      	ldr	r2, [r3, #0]
 8016d26:	2380      	movs	r3, #128	@ 0x80
 8016d28:	04db      	lsls	r3, r3, #19
 8016d2a:	4013      	ands	r3, r2
 8016d2c:	d00c      	beq.n	8016d48 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	2280      	movs	r2, #128	@ 0x80
 8016d34:	0112      	lsls	r2, r2, #4
 8016d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2284      	movs	r2, #132	@ 0x84
 8016d3c:	589b      	ldr	r3, [r3, r2]
 8016d3e:	2220      	movs	r2, #32
 8016d40:	431a      	orrs	r2, r3
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	2184      	movs	r1, #132	@ 0x84
 8016d46:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2284      	movs	r2, #132	@ 0x84
 8016d4c:	589b      	ldr	r3, [r3, r2]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d100      	bne.n	8016d54 <HAL_UART_IRQHandler+0x1a4>
 8016d52:	e20b      	b.n	801716c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8016d54:	23a4      	movs	r3, #164	@ 0xa4
 8016d56:	18fb      	adds	r3, r7, r3
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	2220      	movs	r2, #32
 8016d5c:	4013      	ands	r3, r2
 8016d5e:	d00e      	beq.n	8016d7e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016d60:	23a0      	movs	r3, #160	@ 0xa0
 8016d62:	18fb      	adds	r3, r7, r3
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	2220      	movs	r2, #32
 8016d68:	4013      	ands	r3, r2
 8016d6a:	d008      	beq.n	8016d7e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d004      	beq.n	8016d7e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016d78:	687a      	ldr	r2, [r7, #4]
 8016d7a:	0010      	movs	r0, r2
 8016d7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	2284      	movs	r2, #132	@ 0x84
 8016d82:	589b      	ldr	r3, [r3, r2]
 8016d84:	2194      	movs	r1, #148	@ 0x94
 8016d86:	187a      	adds	r2, r7, r1
 8016d88:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	689b      	ldr	r3, [r3, #8]
 8016d90:	2240      	movs	r2, #64	@ 0x40
 8016d92:	4013      	ands	r3, r2
 8016d94:	2b40      	cmp	r3, #64	@ 0x40
 8016d96:	d004      	beq.n	8016da2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016d98:	187b      	adds	r3, r7, r1
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	2228      	movs	r2, #40	@ 0x28
 8016d9e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016da0:	d04b      	beq.n	8016e3a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	0018      	movs	r0, r3
 8016da6:	f001 f861 	bl	8017e6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	689b      	ldr	r3, [r3, #8]
 8016db0:	2240      	movs	r2, #64	@ 0x40
 8016db2:	4013      	ands	r3, r2
 8016db4:	2b40      	cmp	r3, #64	@ 0x40
 8016db6:	d139      	bne.n	8016e2c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016db8:	f3ef 8310 	mrs	r3, PRIMASK
 8016dbc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016dc0:	2090      	movs	r0, #144	@ 0x90
 8016dc2:	183a      	adds	r2, r7, r0
 8016dc4:	6013      	str	r3, [r2, #0]
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016dcc:	f383 8810 	msr	PRIMASK, r3
}
 8016dd0:	46c0      	nop			@ (mov r8, r8)
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	689a      	ldr	r2, [r3, #8]
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	2140      	movs	r1, #64	@ 0x40
 8016dde:	438a      	bics	r2, r1
 8016de0:	609a      	str	r2, [r3, #8]
 8016de2:	183b      	adds	r3, r7, r0
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016dea:	f383 8810 	msr	PRIMASK, r3
}
 8016dee:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d012      	beq.n	8016e1e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016dfc:	4a17      	ldr	r2, [pc, #92]	@ (8016e5c <HAL_UART_IRQHandler+0x2ac>)
 8016dfe:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e04:	0018      	movs	r0, r3
 8016e06:	f7f8 f8b3 	bl	800ef70 <HAL_DMA_Abort_IT>
 8016e0a:	1e03      	subs	r3, r0, #0
 8016e0c:	d020      	beq.n	8016e50 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e18:	0018      	movs	r0, r3
 8016e1a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e1c:	e018      	b.n	8016e50 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	2298      	movs	r2, #152	@ 0x98
 8016e22:	589b      	ldr	r3, [r3, r2]
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	0010      	movs	r0, r2
 8016e28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e2a:	e011      	b.n	8016e50 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2298      	movs	r2, #152	@ 0x98
 8016e30:	589b      	ldr	r3, [r3, r2]
 8016e32:	687a      	ldr	r2, [r7, #4]
 8016e34:	0010      	movs	r0, r2
 8016e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e38:	e00a      	b.n	8016e50 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2298      	movs	r2, #152	@ 0x98
 8016e3e:	589b      	ldr	r3, [r3, r2]
 8016e40:	687a      	ldr	r2, [r7, #4]
 8016e42:	0010      	movs	r0, r2
 8016e44:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2284      	movs	r2, #132	@ 0x84
 8016e4a:	2100      	movs	r1, #0
 8016e4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8016e4e:	e18d      	b.n	801716c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e50:	46c0      	nop			@ (mov r8, r8)
    return;
 8016e52:	e18b      	b.n	801716c <HAL_UART_IRQHandler+0x5bc>
 8016e54:	0000080f 	.word	0x0000080f
 8016e58:	04000120 	.word	0x04000120
 8016e5c:	080181f9 	.word	0x080181f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016e64:	2b01      	cmp	r3, #1
 8016e66:	d000      	beq.n	8016e6a <HAL_UART_IRQHandler+0x2ba>
 8016e68:	e13d      	b.n	80170e6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016e6a:	23a4      	movs	r3, #164	@ 0xa4
 8016e6c:	18fb      	adds	r3, r7, r3
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	2210      	movs	r2, #16
 8016e72:	4013      	ands	r3, r2
 8016e74:	d100      	bne.n	8016e78 <HAL_UART_IRQHandler+0x2c8>
 8016e76:	e136      	b.n	80170e6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016e78:	23a0      	movs	r3, #160	@ 0xa0
 8016e7a:	18fb      	adds	r3, r7, r3
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	2210      	movs	r2, #16
 8016e80:	4013      	ands	r3, r2
 8016e82:	d100      	bne.n	8016e86 <HAL_UART_IRQHandler+0x2d6>
 8016e84:	e12f      	b.n	80170e6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	2210      	movs	r2, #16
 8016e8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	689b      	ldr	r3, [r3, #8]
 8016e94:	2240      	movs	r2, #64	@ 0x40
 8016e96:	4013      	ands	r3, r2
 8016e98:	2b40      	cmp	r3, #64	@ 0x40
 8016e9a:	d000      	beq.n	8016e9e <HAL_UART_IRQHandler+0x2ee>
 8016e9c:	e0a2      	b.n	8016fe4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	685a      	ldr	r2, [r3, #4]
 8016ea6:	217e      	movs	r1, #126	@ 0x7e
 8016ea8:	187b      	adds	r3, r7, r1
 8016eaa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8016eac:	187b      	adds	r3, r7, r1
 8016eae:	881b      	ldrh	r3, [r3, #0]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d100      	bne.n	8016eb6 <HAL_UART_IRQHandler+0x306>
 8016eb4:	e15c      	b.n	8017170 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2258      	movs	r2, #88	@ 0x58
 8016eba:	5a9b      	ldrh	r3, [r3, r2]
 8016ebc:	187a      	adds	r2, r7, r1
 8016ebe:	8812      	ldrh	r2, [r2, #0]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d300      	bcc.n	8016ec6 <HAL_UART_IRQHandler+0x316>
 8016ec4:	e154      	b.n	8017170 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	187a      	adds	r2, r7, r1
 8016eca:	215a      	movs	r1, #90	@ 0x5a
 8016ecc:	8812      	ldrh	r2, [r2, #0]
 8016ece:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2220      	movs	r2, #32
 8016eda:	4013      	ands	r3, r2
 8016edc:	d16f      	bne.n	8016fbe <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ede:	f3ef 8310 	mrs	r3, PRIMASK
 8016ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016ee8:	2301      	movs	r3, #1
 8016eea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eee:	f383 8810 	msr	PRIMASK, r3
}
 8016ef2:	46c0      	nop			@ (mov r8, r8)
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	681a      	ldr	r2, [r3, #0]
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	49a0      	ldr	r1, [pc, #640]	@ (8017180 <HAL_UART_IRQHandler+0x5d0>)
 8016f00:	400a      	ands	r2, r1
 8016f02:	601a      	str	r2, [r3, #0]
 8016f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f0a:	f383 8810 	msr	PRIMASK, r3
}
 8016f0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f10:	f3ef 8310 	mrs	r3, PRIMASK
 8016f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8016f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f18:	677b      	str	r3, [r7, #116]	@ 0x74
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f20:	f383 8810 	msr	PRIMASK, r3
}
 8016f24:	46c0      	nop			@ (mov r8, r8)
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	689a      	ldr	r2, [r3, #8]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	2101      	movs	r1, #1
 8016f32:	438a      	bics	r2, r1
 8016f34:	609a      	str	r2, [r3, #8]
 8016f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016f38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f3c:	f383 8810 	msr	PRIMASK, r3
}
 8016f40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f42:	f3ef 8310 	mrs	r3, PRIMASK
 8016f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8016f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016f4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f52:	f383 8810 	msr	PRIMASK, r3
}
 8016f56:	46c0      	nop			@ (mov r8, r8)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	689a      	ldr	r2, [r3, #8]
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	2140      	movs	r1, #64	@ 0x40
 8016f64:	438a      	bics	r2, r1
 8016f66:	609a      	str	r2, [r3, #8]
 8016f68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016f6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f6e:	f383 8810 	msr	PRIMASK, r3
}
 8016f72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2280      	movs	r2, #128	@ 0x80
 8016f78:	2120      	movs	r1, #32
 8016f7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f82:	f3ef 8310 	mrs	r3, PRIMASK
 8016f86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016f92:	f383 8810 	msr	PRIMASK, r3
}
 8016f96:	46c0      	nop			@ (mov r8, r8)
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	2110      	movs	r1, #16
 8016fa4:	438a      	bics	r2, r1
 8016fa6:	601a      	str	r2, [r3, #0]
 8016fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016fae:	f383 8810 	msr	PRIMASK, r3
}
 8016fb2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016fb8:	0018      	movs	r0, r3
 8016fba:	f7f7 ff99 	bl	800eef0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2202      	movs	r2, #2
 8016fc2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	22ac      	movs	r2, #172	@ 0xac
 8016fc8:	589b      	ldr	r3, [r3, r2]
 8016fca:	687a      	ldr	r2, [r7, #4]
 8016fcc:	2158      	movs	r1, #88	@ 0x58
 8016fce:	5a51      	ldrh	r1, [r2, r1]
 8016fd0:	687a      	ldr	r2, [r7, #4]
 8016fd2:	205a      	movs	r0, #90	@ 0x5a
 8016fd4:	5a12      	ldrh	r2, [r2, r0]
 8016fd6:	b292      	uxth	r2, r2
 8016fd8:	1a8a      	subs	r2, r1, r2
 8016fda:	b291      	uxth	r1, r2
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	0010      	movs	r0, r2
 8016fe0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016fe2:	e0c5      	b.n	8017170 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2258      	movs	r2, #88	@ 0x58
 8016fe8:	5a99      	ldrh	r1, [r3, r2]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	225a      	movs	r2, #90	@ 0x5a
 8016fee:	5a9b      	ldrh	r3, [r3, r2]
 8016ff0:	b29a      	uxth	r2, r3
 8016ff2:	208e      	movs	r0, #142	@ 0x8e
 8016ff4:	183b      	adds	r3, r7, r0
 8016ff6:	1a8a      	subs	r2, r1, r2
 8016ff8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	225a      	movs	r2, #90	@ 0x5a
 8016ffe:	5a9b      	ldrh	r3, [r3, r2]
 8017000:	b29b      	uxth	r3, r3
 8017002:	2b00      	cmp	r3, #0
 8017004:	d100      	bne.n	8017008 <HAL_UART_IRQHandler+0x458>
 8017006:	e0b5      	b.n	8017174 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017008:	183b      	adds	r3, r7, r0
 801700a:	881b      	ldrh	r3, [r3, #0]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d100      	bne.n	8017012 <HAL_UART_IRQHandler+0x462>
 8017010:	e0b0      	b.n	8017174 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017012:	f3ef 8310 	mrs	r3, PRIMASK
 8017016:	60fb      	str	r3, [r7, #12]
  return(result);
 8017018:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801701a:	2488      	movs	r4, #136	@ 0x88
 801701c:	193a      	adds	r2, r7, r4
 801701e:	6013      	str	r3, [r2, #0]
 8017020:	2301      	movs	r3, #1
 8017022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	f383 8810 	msr	PRIMASK, r3
}
 801702a:	46c0      	nop			@ (mov r8, r8)
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	4953      	ldr	r1, [pc, #332]	@ (8017184 <HAL_UART_IRQHandler+0x5d4>)
 8017038:	400a      	ands	r2, r1
 801703a:	601a      	str	r2, [r3, #0]
 801703c:	193b      	adds	r3, r7, r4
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	f383 8810 	msr	PRIMASK, r3
}
 8017048:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801704a:	f3ef 8310 	mrs	r3, PRIMASK
 801704e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017050:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017052:	2484      	movs	r4, #132	@ 0x84
 8017054:	193a      	adds	r2, r7, r4
 8017056:	6013      	str	r3, [r2, #0]
 8017058:	2301      	movs	r3, #1
 801705a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	f383 8810 	msr	PRIMASK, r3
}
 8017062:	46c0      	nop			@ (mov r8, r8)
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	689a      	ldr	r2, [r3, #8]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	2101      	movs	r1, #1
 8017070:	438a      	bics	r2, r1
 8017072:	609a      	str	r2, [r3, #8]
 8017074:	193b      	adds	r3, r7, r4
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801707a:	6a3b      	ldr	r3, [r7, #32]
 801707c:	f383 8810 	msr	PRIMASK, r3
}
 8017080:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	2280      	movs	r2, #128	@ 0x80
 8017086:	2120      	movs	r1, #32
 8017088:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	2200      	movs	r2, #0
 801708e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2200      	movs	r2, #0
 8017094:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017096:	f3ef 8310 	mrs	r3, PRIMASK
 801709a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801709e:	2480      	movs	r4, #128	@ 0x80
 80170a0:	193a      	adds	r2, r7, r4
 80170a2:	6013      	str	r3, [r2, #0]
 80170a4:	2301      	movs	r3, #1
 80170a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170aa:	f383 8810 	msr	PRIMASK, r3
}
 80170ae:	46c0      	nop			@ (mov r8, r8)
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2110      	movs	r1, #16
 80170bc:	438a      	bics	r2, r1
 80170be:	601a      	str	r2, [r3, #0]
 80170c0:	193b      	adds	r3, r7, r4
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170c8:	f383 8810 	msr	PRIMASK, r3
}
 80170cc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2202      	movs	r2, #2
 80170d2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	22ac      	movs	r2, #172	@ 0xac
 80170d8:	589b      	ldr	r3, [r3, r2]
 80170da:	183a      	adds	r2, r7, r0
 80170dc:	8811      	ldrh	r1, [r2, #0]
 80170de:	687a      	ldr	r2, [r7, #4]
 80170e0:	0010      	movs	r0, r2
 80170e2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80170e4:	e046      	b.n	8017174 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80170e6:	23a4      	movs	r3, #164	@ 0xa4
 80170e8:	18fb      	adds	r3, r7, r3
 80170ea:	681a      	ldr	r2, [r3, #0]
 80170ec:	2380      	movs	r3, #128	@ 0x80
 80170ee:	035b      	lsls	r3, r3, #13
 80170f0:	4013      	ands	r3, r2
 80170f2:	d012      	beq.n	801711a <HAL_UART_IRQHandler+0x56a>
 80170f4:	239c      	movs	r3, #156	@ 0x9c
 80170f6:	18fb      	adds	r3, r7, r3
 80170f8:	681a      	ldr	r2, [r3, #0]
 80170fa:	2380      	movs	r3, #128	@ 0x80
 80170fc:	03db      	lsls	r3, r3, #15
 80170fe:	4013      	ands	r3, r2
 8017100:	d00b      	beq.n	801711a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2280      	movs	r2, #128	@ 0x80
 8017108:	0352      	lsls	r2, r2, #13
 801710a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	22a8      	movs	r2, #168	@ 0xa8
 8017110:	589b      	ldr	r3, [r3, r2]
 8017112:	687a      	ldr	r2, [r7, #4]
 8017114:	0010      	movs	r0, r2
 8017116:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017118:	e02f      	b.n	801717a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801711a:	23a4      	movs	r3, #164	@ 0xa4
 801711c:	18fb      	adds	r3, r7, r3
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	2280      	movs	r2, #128	@ 0x80
 8017122:	4013      	ands	r3, r2
 8017124:	d00f      	beq.n	8017146 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017126:	23a0      	movs	r3, #160	@ 0xa0
 8017128:	18fb      	adds	r3, r7, r3
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	2280      	movs	r2, #128	@ 0x80
 801712e:	4013      	ands	r3, r2
 8017130:	d009      	beq.n	8017146 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017136:	2b00      	cmp	r3, #0
 8017138:	d01e      	beq.n	8017178 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801713e:	687a      	ldr	r2, [r7, #4]
 8017140:	0010      	movs	r0, r2
 8017142:	4798      	blx	r3
    }
    return;
 8017144:	e018      	b.n	8017178 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017146:	23a4      	movs	r3, #164	@ 0xa4
 8017148:	18fb      	adds	r3, r7, r3
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	2240      	movs	r2, #64	@ 0x40
 801714e:	4013      	ands	r3, r2
 8017150:	d013      	beq.n	801717a <HAL_UART_IRQHandler+0x5ca>
 8017152:	23a0      	movs	r3, #160	@ 0xa0
 8017154:	18fb      	adds	r3, r7, r3
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	2240      	movs	r2, #64	@ 0x40
 801715a:	4013      	ands	r3, r2
 801715c:	d00d      	beq.n	801717a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	0018      	movs	r0, r3
 8017162:	f001 f862 	bl	801822a <UART_EndTransmit_IT>
    return;
 8017166:	e008      	b.n	801717a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017168:	46c0      	nop			@ (mov r8, r8)
 801716a:	e006      	b.n	801717a <HAL_UART_IRQHandler+0x5ca>
    return;
 801716c:	46c0      	nop			@ (mov r8, r8)
 801716e:	e004      	b.n	801717a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017170:	46c0      	nop			@ (mov r8, r8)
 8017172:	e002      	b.n	801717a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017174:	46c0      	nop			@ (mov r8, r8)
 8017176:	e000      	b.n	801717a <HAL_UART_IRQHandler+0x5ca>
    return;
 8017178:	46c0      	nop			@ (mov r8, r8)
  }

}
 801717a:	46bd      	mov	sp, r7
 801717c:	b02b      	add	sp, #172	@ 0xac
 801717e:	bd90      	pop	{r4, r7, pc}
 8017180:	fffffeff 	.word	0xfffffeff
 8017184:	fffffedf 	.word	0xfffffedf

08017188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017190:	46c0      	nop			@ (mov r8, r8)
 8017192:	46bd      	mov	sp, r7
 8017194:	b002      	add	sp, #8
 8017196:	bd80      	pop	{r7, pc}

08017198 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80171a0:	46c0      	nop			@ (mov r8, r8)
 80171a2:	46bd      	mov	sp, r7
 80171a4:	b002      	add	sp, #8
 80171a6:	bd80      	pop	{r7, pc}

080171a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b082      	sub	sp, #8
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80171b0:	46c0      	nop			@ (mov r8, r8)
 80171b2:	46bd      	mov	sp, r7
 80171b4:	b002      	add	sp, #8
 80171b6:	bd80      	pop	{r7, pc}

080171b8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80171c0:	46c0      	nop			@ (mov r8, r8)
 80171c2:	46bd      	mov	sp, r7
 80171c4:	b002      	add	sp, #8
 80171c6:	bd80      	pop	{r7, pc}

080171c8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b082      	sub	sp, #8
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80171d0:	46c0      	nop			@ (mov r8, r8)
 80171d2:	46bd      	mov	sp, r7
 80171d4:	b002      	add	sp, #8
 80171d6:	bd80      	pop	{r7, pc}

080171d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80171e0:	46c0      	nop			@ (mov r8, r8)
 80171e2:	46bd      	mov	sp, r7
 80171e4:	b002      	add	sp, #8
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b082      	sub	sp, #8
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	000a      	movs	r2, r1
 80171f2:	1cbb      	adds	r3, r7, #2
 80171f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80171f6:	46c0      	nop			@ (mov r8, r8)
 80171f8:	46bd      	mov	sp, r7
 80171fa:	b002      	add	sp, #8
 80171fc:	bd80      	pop	{r7, pc}
	...

08017200 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2188      	movs	r1, #136	@ 0x88
 801720c:	4a14      	ldr	r2, [pc, #80]	@ (8017260 <UART_InitCallbacksToDefault+0x60>)
 801720e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	218c      	movs	r1, #140	@ 0x8c
 8017214:	4a13      	ldr	r2, [pc, #76]	@ (8017264 <UART_InitCallbacksToDefault+0x64>)
 8017216:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	2190      	movs	r1, #144	@ 0x90
 801721c:	4a12      	ldr	r2, [pc, #72]	@ (8017268 <UART_InitCallbacksToDefault+0x68>)
 801721e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2194      	movs	r1, #148	@ 0x94
 8017224:	4a11      	ldr	r2, [pc, #68]	@ (801726c <UART_InitCallbacksToDefault+0x6c>)
 8017226:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2198      	movs	r1, #152	@ 0x98
 801722c:	4a10      	ldr	r2, [pc, #64]	@ (8017270 <UART_InitCallbacksToDefault+0x70>)
 801722e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	219c      	movs	r1, #156	@ 0x9c
 8017234:	4a0f      	ldr	r2, [pc, #60]	@ (8017274 <UART_InitCallbacksToDefault+0x74>)
 8017236:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	21a0      	movs	r1, #160	@ 0xa0
 801723c:	4a0e      	ldr	r2, [pc, #56]	@ (8017278 <UART_InitCallbacksToDefault+0x78>)
 801723e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	21a4      	movs	r1, #164	@ 0xa4
 8017244:	4a0d      	ldr	r2, [pc, #52]	@ (801727c <UART_InitCallbacksToDefault+0x7c>)
 8017246:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	21a8      	movs	r1, #168	@ 0xa8
 801724c:	4a0c      	ldr	r2, [pc, #48]	@ (8017280 <UART_InitCallbacksToDefault+0x80>)
 801724e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	21ac      	movs	r1, #172	@ 0xac
 8017254:	4a0b      	ldr	r2, [pc, #44]	@ (8017284 <UART_InitCallbacksToDefault+0x84>)
 8017256:	505a      	str	r2, [r3, r1]

}
 8017258:	46c0      	nop			@ (mov r8, r8)
 801725a:	46bd      	mov	sp, r7
 801725c:	b002      	add	sp, #8
 801725e:	bd80      	pop	{r7, pc}
 8017260:	08017199 	.word	0x08017199
 8017264:	08017189 	.word	0x08017189
 8017268:	080171a9 	.word	0x080171a9
 801726c:	08007ed5 	.word	0x08007ed5
 8017270:	08003c39 	.word	0x08003c39
 8017274:	080171b9 	.word	0x080171b9
 8017278:	080171c9 	.word	0x080171c9
 801727c:	080171d9 	.word	0x080171d9
 8017280:	0801861d 	.word	0x0801861d
 8017284:	080171e9 	.word	0x080171e9

08017288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017288:	b5b0      	push	{r4, r5, r7, lr}
 801728a:	b08e      	sub	sp, #56	@ 0x38
 801728c:	af00      	add	r7, sp, #0
 801728e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017290:	231a      	movs	r3, #26
 8017292:	2218      	movs	r2, #24
 8017294:	189b      	adds	r3, r3, r2
 8017296:	19db      	adds	r3, r3, r7
 8017298:	2200      	movs	r2, #0
 801729a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801729c:	69fb      	ldr	r3, [r7, #28]
 801729e:	689a      	ldr	r2, [r3, #8]
 80172a0:	69fb      	ldr	r3, [r7, #28]
 80172a2:	691b      	ldr	r3, [r3, #16]
 80172a4:	431a      	orrs	r2, r3
 80172a6:	69fb      	ldr	r3, [r7, #28]
 80172a8:	695b      	ldr	r3, [r3, #20]
 80172aa:	431a      	orrs	r2, r3
 80172ac:	69fb      	ldr	r3, [r7, #28]
 80172ae:	69db      	ldr	r3, [r3, #28]
 80172b0:	4313      	orrs	r3, r2
 80172b2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80172b4:	69fb      	ldr	r3, [r7, #28]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	4ac3      	ldr	r2, [pc, #780]	@ (80175c8 <UART_SetConfig+0x340>)
 80172bc:	4013      	ands	r3, r2
 80172be:	0019      	movs	r1, r3
 80172c0:	69fb      	ldr	r3, [r7, #28]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80172c6:	430a      	orrs	r2, r1
 80172c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80172ca:	69fb      	ldr	r3, [r7, #28]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	685b      	ldr	r3, [r3, #4]
 80172d0:	4abe      	ldr	r2, [pc, #760]	@ (80175cc <UART_SetConfig+0x344>)
 80172d2:	4013      	ands	r3, r2
 80172d4:	0019      	movs	r1, r3
 80172d6:	69fb      	ldr	r3, [r7, #28]
 80172d8:	68da      	ldr	r2, [r3, #12]
 80172da:	69fb      	ldr	r3, [r7, #28]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	430a      	orrs	r2, r1
 80172e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80172e2:	69fb      	ldr	r3, [r7, #28]
 80172e4:	699b      	ldr	r3, [r3, #24]
 80172e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	4ab8      	ldr	r2, [pc, #736]	@ (80175d0 <UART_SetConfig+0x348>)
 80172ee:	4293      	cmp	r3, r2
 80172f0:	d004      	beq.n	80172fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80172f2:	69fb      	ldr	r3, [r7, #28]
 80172f4:	6a1b      	ldr	r3, [r3, #32]
 80172f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80172f8:	4313      	orrs	r3, r2
 80172fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80172fc:	69fb      	ldr	r3, [r7, #28]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	689b      	ldr	r3, [r3, #8]
 8017302:	4ab4      	ldr	r2, [pc, #720]	@ (80175d4 <UART_SetConfig+0x34c>)
 8017304:	4013      	ands	r3, r2
 8017306:	0019      	movs	r1, r3
 8017308:	69fb      	ldr	r3, [r7, #28]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801730e:	430a      	orrs	r2, r1
 8017310:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	4ab0      	ldr	r2, [pc, #704]	@ (80175d8 <UART_SetConfig+0x350>)
 8017318:	4293      	cmp	r3, r2
 801731a:	d131      	bne.n	8017380 <UART_SetConfig+0xf8>
 801731c:	4baf      	ldr	r3, [pc, #700]	@ (80175dc <UART_SetConfig+0x354>)
 801731e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017320:	2203      	movs	r2, #3
 8017322:	4013      	ands	r3, r2
 8017324:	2b03      	cmp	r3, #3
 8017326:	d01d      	beq.n	8017364 <UART_SetConfig+0xdc>
 8017328:	d823      	bhi.n	8017372 <UART_SetConfig+0xea>
 801732a:	2b02      	cmp	r3, #2
 801732c:	d00c      	beq.n	8017348 <UART_SetConfig+0xc0>
 801732e:	d820      	bhi.n	8017372 <UART_SetConfig+0xea>
 8017330:	2b00      	cmp	r3, #0
 8017332:	d002      	beq.n	801733a <UART_SetConfig+0xb2>
 8017334:	2b01      	cmp	r3, #1
 8017336:	d00e      	beq.n	8017356 <UART_SetConfig+0xce>
 8017338:	e01b      	b.n	8017372 <UART_SetConfig+0xea>
 801733a:	231b      	movs	r3, #27
 801733c:	2218      	movs	r2, #24
 801733e:	189b      	adds	r3, r3, r2
 8017340:	19db      	adds	r3, r3, r7
 8017342:	2201      	movs	r2, #1
 8017344:	701a      	strb	r2, [r3, #0]
 8017346:	e0b4      	b.n	80174b2 <UART_SetConfig+0x22a>
 8017348:	231b      	movs	r3, #27
 801734a:	2218      	movs	r2, #24
 801734c:	189b      	adds	r3, r3, r2
 801734e:	19db      	adds	r3, r3, r7
 8017350:	2202      	movs	r2, #2
 8017352:	701a      	strb	r2, [r3, #0]
 8017354:	e0ad      	b.n	80174b2 <UART_SetConfig+0x22a>
 8017356:	231b      	movs	r3, #27
 8017358:	2218      	movs	r2, #24
 801735a:	189b      	adds	r3, r3, r2
 801735c:	19db      	adds	r3, r3, r7
 801735e:	2204      	movs	r2, #4
 8017360:	701a      	strb	r2, [r3, #0]
 8017362:	e0a6      	b.n	80174b2 <UART_SetConfig+0x22a>
 8017364:	231b      	movs	r3, #27
 8017366:	2218      	movs	r2, #24
 8017368:	189b      	adds	r3, r3, r2
 801736a:	19db      	adds	r3, r3, r7
 801736c:	2208      	movs	r2, #8
 801736e:	701a      	strb	r2, [r3, #0]
 8017370:	e09f      	b.n	80174b2 <UART_SetConfig+0x22a>
 8017372:	231b      	movs	r3, #27
 8017374:	2218      	movs	r2, #24
 8017376:	189b      	adds	r3, r3, r2
 8017378:	19db      	adds	r3, r3, r7
 801737a:	2210      	movs	r2, #16
 801737c:	701a      	strb	r2, [r3, #0]
 801737e:	e098      	b.n	80174b2 <UART_SetConfig+0x22a>
 8017380:	69fb      	ldr	r3, [r7, #28]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	4a96      	ldr	r2, [pc, #600]	@ (80175e0 <UART_SetConfig+0x358>)
 8017386:	4293      	cmp	r3, r2
 8017388:	d131      	bne.n	80173ee <UART_SetConfig+0x166>
 801738a:	4b94      	ldr	r3, [pc, #592]	@ (80175dc <UART_SetConfig+0x354>)
 801738c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801738e:	220c      	movs	r2, #12
 8017390:	4013      	ands	r3, r2
 8017392:	2b0c      	cmp	r3, #12
 8017394:	d01d      	beq.n	80173d2 <UART_SetConfig+0x14a>
 8017396:	d823      	bhi.n	80173e0 <UART_SetConfig+0x158>
 8017398:	2b08      	cmp	r3, #8
 801739a:	d00c      	beq.n	80173b6 <UART_SetConfig+0x12e>
 801739c:	d820      	bhi.n	80173e0 <UART_SetConfig+0x158>
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d002      	beq.n	80173a8 <UART_SetConfig+0x120>
 80173a2:	2b04      	cmp	r3, #4
 80173a4:	d00e      	beq.n	80173c4 <UART_SetConfig+0x13c>
 80173a6:	e01b      	b.n	80173e0 <UART_SetConfig+0x158>
 80173a8:	231b      	movs	r3, #27
 80173aa:	2218      	movs	r2, #24
 80173ac:	189b      	adds	r3, r3, r2
 80173ae:	19db      	adds	r3, r3, r7
 80173b0:	2200      	movs	r2, #0
 80173b2:	701a      	strb	r2, [r3, #0]
 80173b4:	e07d      	b.n	80174b2 <UART_SetConfig+0x22a>
 80173b6:	231b      	movs	r3, #27
 80173b8:	2218      	movs	r2, #24
 80173ba:	189b      	adds	r3, r3, r2
 80173bc:	19db      	adds	r3, r3, r7
 80173be:	2202      	movs	r2, #2
 80173c0:	701a      	strb	r2, [r3, #0]
 80173c2:	e076      	b.n	80174b2 <UART_SetConfig+0x22a>
 80173c4:	231b      	movs	r3, #27
 80173c6:	2218      	movs	r2, #24
 80173c8:	189b      	adds	r3, r3, r2
 80173ca:	19db      	adds	r3, r3, r7
 80173cc:	2204      	movs	r2, #4
 80173ce:	701a      	strb	r2, [r3, #0]
 80173d0:	e06f      	b.n	80174b2 <UART_SetConfig+0x22a>
 80173d2:	231b      	movs	r3, #27
 80173d4:	2218      	movs	r2, #24
 80173d6:	189b      	adds	r3, r3, r2
 80173d8:	19db      	adds	r3, r3, r7
 80173da:	2208      	movs	r2, #8
 80173dc:	701a      	strb	r2, [r3, #0]
 80173de:	e068      	b.n	80174b2 <UART_SetConfig+0x22a>
 80173e0:	231b      	movs	r3, #27
 80173e2:	2218      	movs	r2, #24
 80173e4:	189b      	adds	r3, r3, r2
 80173e6:	19db      	adds	r3, r3, r7
 80173e8:	2210      	movs	r2, #16
 80173ea:	701a      	strb	r2, [r3, #0]
 80173ec:	e061      	b.n	80174b2 <UART_SetConfig+0x22a>
 80173ee:	69fb      	ldr	r3, [r7, #28]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	4a7c      	ldr	r2, [pc, #496]	@ (80175e4 <UART_SetConfig+0x35c>)
 80173f4:	4293      	cmp	r3, r2
 80173f6:	d106      	bne.n	8017406 <UART_SetConfig+0x17e>
 80173f8:	231b      	movs	r3, #27
 80173fa:	2218      	movs	r2, #24
 80173fc:	189b      	adds	r3, r3, r2
 80173fe:	19db      	adds	r3, r3, r7
 8017400:	2200      	movs	r2, #0
 8017402:	701a      	strb	r2, [r3, #0]
 8017404:	e055      	b.n	80174b2 <UART_SetConfig+0x22a>
 8017406:	69fb      	ldr	r3, [r7, #28]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	4a77      	ldr	r2, [pc, #476]	@ (80175e8 <UART_SetConfig+0x360>)
 801740c:	4293      	cmp	r3, r2
 801740e:	d106      	bne.n	801741e <UART_SetConfig+0x196>
 8017410:	231b      	movs	r3, #27
 8017412:	2218      	movs	r2, #24
 8017414:	189b      	adds	r3, r3, r2
 8017416:	19db      	adds	r3, r3, r7
 8017418:	2200      	movs	r2, #0
 801741a:	701a      	strb	r2, [r3, #0]
 801741c:	e049      	b.n	80174b2 <UART_SetConfig+0x22a>
 801741e:	69fb      	ldr	r3, [r7, #28]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	4a6b      	ldr	r2, [pc, #428]	@ (80175d0 <UART_SetConfig+0x348>)
 8017424:	4293      	cmp	r3, r2
 8017426:	d13e      	bne.n	80174a6 <UART_SetConfig+0x21e>
 8017428:	4b6c      	ldr	r3, [pc, #432]	@ (80175dc <UART_SetConfig+0x354>)
 801742a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801742c:	23c0      	movs	r3, #192	@ 0xc0
 801742e:	011b      	lsls	r3, r3, #4
 8017430:	4013      	ands	r3, r2
 8017432:	22c0      	movs	r2, #192	@ 0xc0
 8017434:	0112      	lsls	r2, r2, #4
 8017436:	4293      	cmp	r3, r2
 8017438:	d027      	beq.n	801748a <UART_SetConfig+0x202>
 801743a:	22c0      	movs	r2, #192	@ 0xc0
 801743c:	0112      	lsls	r2, r2, #4
 801743e:	4293      	cmp	r3, r2
 8017440:	d82a      	bhi.n	8017498 <UART_SetConfig+0x210>
 8017442:	2280      	movs	r2, #128	@ 0x80
 8017444:	0112      	lsls	r2, r2, #4
 8017446:	4293      	cmp	r3, r2
 8017448:	d011      	beq.n	801746e <UART_SetConfig+0x1e6>
 801744a:	2280      	movs	r2, #128	@ 0x80
 801744c:	0112      	lsls	r2, r2, #4
 801744e:	4293      	cmp	r3, r2
 8017450:	d822      	bhi.n	8017498 <UART_SetConfig+0x210>
 8017452:	2b00      	cmp	r3, #0
 8017454:	d004      	beq.n	8017460 <UART_SetConfig+0x1d8>
 8017456:	2280      	movs	r2, #128	@ 0x80
 8017458:	00d2      	lsls	r2, r2, #3
 801745a:	4293      	cmp	r3, r2
 801745c:	d00e      	beq.n	801747c <UART_SetConfig+0x1f4>
 801745e:	e01b      	b.n	8017498 <UART_SetConfig+0x210>
 8017460:	231b      	movs	r3, #27
 8017462:	2218      	movs	r2, #24
 8017464:	189b      	adds	r3, r3, r2
 8017466:	19db      	adds	r3, r3, r7
 8017468:	2200      	movs	r2, #0
 801746a:	701a      	strb	r2, [r3, #0]
 801746c:	e021      	b.n	80174b2 <UART_SetConfig+0x22a>
 801746e:	231b      	movs	r3, #27
 8017470:	2218      	movs	r2, #24
 8017472:	189b      	adds	r3, r3, r2
 8017474:	19db      	adds	r3, r3, r7
 8017476:	2202      	movs	r2, #2
 8017478:	701a      	strb	r2, [r3, #0]
 801747a:	e01a      	b.n	80174b2 <UART_SetConfig+0x22a>
 801747c:	231b      	movs	r3, #27
 801747e:	2218      	movs	r2, #24
 8017480:	189b      	adds	r3, r3, r2
 8017482:	19db      	adds	r3, r3, r7
 8017484:	2204      	movs	r2, #4
 8017486:	701a      	strb	r2, [r3, #0]
 8017488:	e013      	b.n	80174b2 <UART_SetConfig+0x22a>
 801748a:	231b      	movs	r3, #27
 801748c:	2218      	movs	r2, #24
 801748e:	189b      	adds	r3, r3, r2
 8017490:	19db      	adds	r3, r3, r7
 8017492:	2208      	movs	r2, #8
 8017494:	701a      	strb	r2, [r3, #0]
 8017496:	e00c      	b.n	80174b2 <UART_SetConfig+0x22a>
 8017498:	231b      	movs	r3, #27
 801749a:	2218      	movs	r2, #24
 801749c:	189b      	adds	r3, r3, r2
 801749e:	19db      	adds	r3, r3, r7
 80174a0:	2210      	movs	r2, #16
 80174a2:	701a      	strb	r2, [r3, #0]
 80174a4:	e005      	b.n	80174b2 <UART_SetConfig+0x22a>
 80174a6:	231b      	movs	r3, #27
 80174a8:	2218      	movs	r2, #24
 80174aa:	189b      	adds	r3, r3, r2
 80174ac:	19db      	adds	r3, r3, r7
 80174ae:	2210      	movs	r2, #16
 80174b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80174b2:	69fb      	ldr	r3, [r7, #28]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	4a46      	ldr	r2, [pc, #280]	@ (80175d0 <UART_SetConfig+0x348>)
 80174b8:	4293      	cmp	r3, r2
 80174ba:	d000      	beq.n	80174be <UART_SetConfig+0x236>
 80174bc:	e09a      	b.n	80175f4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80174be:	231b      	movs	r3, #27
 80174c0:	2218      	movs	r2, #24
 80174c2:	189b      	adds	r3, r3, r2
 80174c4:	19db      	adds	r3, r3, r7
 80174c6:	781b      	ldrb	r3, [r3, #0]
 80174c8:	2b08      	cmp	r3, #8
 80174ca:	d01d      	beq.n	8017508 <UART_SetConfig+0x280>
 80174cc:	dc20      	bgt.n	8017510 <UART_SetConfig+0x288>
 80174ce:	2b04      	cmp	r3, #4
 80174d0:	d015      	beq.n	80174fe <UART_SetConfig+0x276>
 80174d2:	dc1d      	bgt.n	8017510 <UART_SetConfig+0x288>
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d002      	beq.n	80174de <UART_SetConfig+0x256>
 80174d8:	2b02      	cmp	r3, #2
 80174da:	d005      	beq.n	80174e8 <UART_SetConfig+0x260>
 80174dc:	e018      	b.n	8017510 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80174de:	f7fd fe4b 	bl	8015178 <HAL_RCC_GetPCLK1Freq>
 80174e2:	0003      	movs	r3, r0
 80174e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80174e6:	e01c      	b.n	8017522 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80174e8:	4b3c      	ldr	r3, [pc, #240]	@ (80175dc <UART_SetConfig+0x354>)
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	2210      	movs	r2, #16
 80174ee:	4013      	ands	r3, r2
 80174f0:	d002      	beq.n	80174f8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80174f2:	4b3e      	ldr	r3, [pc, #248]	@ (80175ec <UART_SetConfig+0x364>)
 80174f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80174f6:	e014      	b.n	8017522 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80174f8:	4b3d      	ldr	r3, [pc, #244]	@ (80175f0 <UART_SetConfig+0x368>)
 80174fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80174fc:	e011      	b.n	8017522 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80174fe:	f7fd fd8b 	bl	8015018 <HAL_RCC_GetSysClockFreq>
 8017502:	0003      	movs	r3, r0
 8017504:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017506:	e00c      	b.n	8017522 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017508:	2380      	movs	r3, #128	@ 0x80
 801750a:	021b      	lsls	r3, r3, #8
 801750c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801750e:	e008      	b.n	8017522 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017510:	2300      	movs	r3, #0
 8017512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017514:	231a      	movs	r3, #26
 8017516:	2218      	movs	r2, #24
 8017518:	189b      	adds	r3, r3, r2
 801751a:	19db      	adds	r3, r3, r7
 801751c:	2201      	movs	r2, #1
 801751e:	701a      	strb	r2, [r3, #0]
        break;
 8017520:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017524:	2b00      	cmp	r3, #0
 8017526:	d100      	bne.n	801752a <UART_SetConfig+0x2a2>
 8017528:	e133      	b.n	8017792 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801752a:	69fb      	ldr	r3, [r7, #28]
 801752c:	685a      	ldr	r2, [r3, #4]
 801752e:	0013      	movs	r3, r2
 8017530:	005b      	lsls	r3, r3, #1
 8017532:	189b      	adds	r3, r3, r2
 8017534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017536:	429a      	cmp	r2, r3
 8017538:	d305      	bcc.n	8017546 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801753a:	69fb      	ldr	r3, [r7, #28]
 801753c:	685b      	ldr	r3, [r3, #4]
 801753e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017542:	429a      	cmp	r2, r3
 8017544:	d906      	bls.n	8017554 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017546:	231a      	movs	r3, #26
 8017548:	2218      	movs	r2, #24
 801754a:	189b      	adds	r3, r3, r2
 801754c:	19db      	adds	r3, r3, r7
 801754e:	2201      	movs	r2, #1
 8017550:	701a      	strb	r2, [r3, #0]
 8017552:	e11e      	b.n	8017792 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017556:	613b      	str	r3, [r7, #16]
 8017558:	2300      	movs	r3, #0
 801755a:	617b      	str	r3, [r7, #20]
 801755c:	6939      	ldr	r1, [r7, #16]
 801755e:	697a      	ldr	r2, [r7, #20]
 8017560:	000b      	movs	r3, r1
 8017562:	0e1b      	lsrs	r3, r3, #24
 8017564:	0010      	movs	r0, r2
 8017566:	0205      	lsls	r5, r0, #8
 8017568:	431d      	orrs	r5, r3
 801756a:	000b      	movs	r3, r1
 801756c:	021c      	lsls	r4, r3, #8
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	085b      	lsrs	r3, r3, #1
 8017574:	60bb      	str	r3, [r7, #8]
 8017576:	2300      	movs	r3, #0
 8017578:	60fb      	str	r3, [r7, #12]
 801757a:	68b8      	ldr	r0, [r7, #8]
 801757c:	68f9      	ldr	r1, [r7, #12]
 801757e:	1900      	adds	r0, r0, r4
 8017580:	4169      	adcs	r1, r5
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	685b      	ldr	r3, [r3, #4]
 8017586:	603b      	str	r3, [r7, #0]
 8017588:	2300      	movs	r3, #0
 801758a:	607b      	str	r3, [r7, #4]
 801758c:	683a      	ldr	r2, [r7, #0]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f7e8 fff6 	bl	8000580 <__aeabi_uldivmod>
 8017594:	0002      	movs	r2, r0
 8017596:	000b      	movs	r3, r1
 8017598:	0013      	movs	r3, r2
 801759a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801759c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801759e:	23c0      	movs	r3, #192	@ 0xc0
 80175a0:	009b      	lsls	r3, r3, #2
 80175a2:	429a      	cmp	r2, r3
 80175a4:	d309      	bcc.n	80175ba <UART_SetConfig+0x332>
 80175a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80175a8:	2380      	movs	r3, #128	@ 0x80
 80175aa:	035b      	lsls	r3, r3, #13
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d204      	bcs.n	80175ba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80175b0:	69fb      	ldr	r3, [r7, #28]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80175b6:	60da      	str	r2, [r3, #12]
 80175b8:	e0eb      	b.n	8017792 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80175ba:	231a      	movs	r3, #26
 80175bc:	2218      	movs	r2, #24
 80175be:	189b      	adds	r3, r3, r2
 80175c0:	19db      	adds	r3, r3, r7
 80175c2:	2201      	movs	r2, #1
 80175c4:	701a      	strb	r2, [r3, #0]
 80175c6:	e0e4      	b.n	8017792 <UART_SetConfig+0x50a>
 80175c8:	efff69f3 	.word	0xefff69f3
 80175cc:	ffffcfff 	.word	0xffffcfff
 80175d0:	40004800 	.word	0x40004800
 80175d4:	fffff4ff 	.word	0xfffff4ff
 80175d8:	40013800 	.word	0x40013800
 80175dc:	40021000 	.word	0x40021000
 80175e0:	40004400 	.word	0x40004400
 80175e4:	40004c00 	.word	0x40004c00
 80175e8:	40005000 	.word	0x40005000
 80175ec:	003d0900 	.word	0x003d0900
 80175f0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	69da      	ldr	r2, [r3, #28]
 80175f8:	2380      	movs	r3, #128	@ 0x80
 80175fa:	021b      	lsls	r3, r3, #8
 80175fc:	429a      	cmp	r2, r3
 80175fe:	d000      	beq.n	8017602 <UART_SetConfig+0x37a>
 8017600:	e070      	b.n	80176e4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017602:	231b      	movs	r3, #27
 8017604:	2218      	movs	r2, #24
 8017606:	189b      	adds	r3, r3, r2
 8017608:	19db      	adds	r3, r3, r7
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	2b08      	cmp	r3, #8
 801760e:	d822      	bhi.n	8017656 <UART_SetConfig+0x3ce>
 8017610:	009a      	lsls	r2, r3, #2
 8017612:	4b67      	ldr	r3, [pc, #412]	@ (80177b0 <UART_SetConfig+0x528>)
 8017614:	18d3      	adds	r3, r2, r3
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801761a:	f7fd fdad 	bl	8015178 <HAL_RCC_GetPCLK1Freq>
 801761e:	0003      	movs	r3, r0
 8017620:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017622:	e021      	b.n	8017668 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017624:	f7fd fdbe 	bl	80151a4 <HAL_RCC_GetPCLK2Freq>
 8017628:	0003      	movs	r3, r0
 801762a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801762c:	e01c      	b.n	8017668 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801762e:	4b61      	ldr	r3, [pc, #388]	@ (80177b4 <UART_SetConfig+0x52c>)
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	2210      	movs	r2, #16
 8017634:	4013      	ands	r3, r2
 8017636:	d002      	beq.n	801763e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017638:	4b5f      	ldr	r3, [pc, #380]	@ (80177b8 <UART_SetConfig+0x530>)
 801763a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801763c:	e014      	b.n	8017668 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801763e:	4b5f      	ldr	r3, [pc, #380]	@ (80177bc <UART_SetConfig+0x534>)
 8017640:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017642:	e011      	b.n	8017668 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017644:	f7fd fce8 	bl	8015018 <HAL_RCC_GetSysClockFreq>
 8017648:	0003      	movs	r3, r0
 801764a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801764c:	e00c      	b.n	8017668 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801764e:	2380      	movs	r3, #128	@ 0x80
 8017650:	021b      	lsls	r3, r3, #8
 8017652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017654:	e008      	b.n	8017668 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8017656:	2300      	movs	r3, #0
 8017658:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801765a:	231a      	movs	r3, #26
 801765c:	2218      	movs	r2, #24
 801765e:	189b      	adds	r3, r3, r2
 8017660:	19db      	adds	r3, r3, r7
 8017662:	2201      	movs	r2, #1
 8017664:	701a      	strb	r2, [r3, #0]
        break;
 8017666:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801766a:	2b00      	cmp	r3, #0
 801766c:	d100      	bne.n	8017670 <UART_SetConfig+0x3e8>
 801766e:	e090      	b.n	8017792 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017672:	005a      	lsls	r2, r3, #1
 8017674:	69fb      	ldr	r3, [r7, #28]
 8017676:	685b      	ldr	r3, [r3, #4]
 8017678:	085b      	lsrs	r3, r3, #1
 801767a:	18d2      	adds	r2, r2, r3
 801767c:	69fb      	ldr	r3, [r7, #28]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	0019      	movs	r1, r3
 8017682:	0010      	movs	r0, r2
 8017684:	f7e8 fd8e 	bl	80001a4 <__udivsi3>
 8017688:	0003      	movs	r3, r0
 801768a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801768e:	2b0f      	cmp	r3, #15
 8017690:	d921      	bls.n	80176d6 <UART_SetConfig+0x44e>
 8017692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017694:	2380      	movs	r3, #128	@ 0x80
 8017696:	025b      	lsls	r3, r3, #9
 8017698:	429a      	cmp	r2, r3
 801769a:	d21c      	bcs.n	80176d6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801769c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801769e:	b29a      	uxth	r2, r3
 80176a0:	200e      	movs	r0, #14
 80176a2:	2418      	movs	r4, #24
 80176a4:	1903      	adds	r3, r0, r4
 80176a6:	19db      	adds	r3, r3, r7
 80176a8:	210f      	movs	r1, #15
 80176aa:	438a      	bics	r2, r1
 80176ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80176ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176b0:	085b      	lsrs	r3, r3, #1
 80176b2:	b29b      	uxth	r3, r3
 80176b4:	2207      	movs	r2, #7
 80176b6:	4013      	ands	r3, r2
 80176b8:	b299      	uxth	r1, r3
 80176ba:	1903      	adds	r3, r0, r4
 80176bc:	19db      	adds	r3, r3, r7
 80176be:	1902      	adds	r2, r0, r4
 80176c0:	19d2      	adds	r2, r2, r7
 80176c2:	8812      	ldrh	r2, [r2, #0]
 80176c4:	430a      	orrs	r2, r1
 80176c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80176c8:	69fb      	ldr	r3, [r7, #28]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	1902      	adds	r2, r0, r4
 80176ce:	19d2      	adds	r2, r2, r7
 80176d0:	8812      	ldrh	r2, [r2, #0]
 80176d2:	60da      	str	r2, [r3, #12]
 80176d4:	e05d      	b.n	8017792 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80176d6:	231a      	movs	r3, #26
 80176d8:	2218      	movs	r2, #24
 80176da:	189b      	adds	r3, r3, r2
 80176dc:	19db      	adds	r3, r3, r7
 80176de:	2201      	movs	r2, #1
 80176e0:	701a      	strb	r2, [r3, #0]
 80176e2:	e056      	b.n	8017792 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80176e4:	231b      	movs	r3, #27
 80176e6:	2218      	movs	r2, #24
 80176e8:	189b      	adds	r3, r3, r2
 80176ea:	19db      	adds	r3, r3, r7
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	2b08      	cmp	r3, #8
 80176f0:	d822      	bhi.n	8017738 <UART_SetConfig+0x4b0>
 80176f2:	009a      	lsls	r2, r3, #2
 80176f4:	4b32      	ldr	r3, [pc, #200]	@ (80177c0 <UART_SetConfig+0x538>)
 80176f6:	18d3      	adds	r3, r2, r3
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80176fc:	f7fd fd3c 	bl	8015178 <HAL_RCC_GetPCLK1Freq>
 8017700:	0003      	movs	r3, r0
 8017702:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017704:	e021      	b.n	801774a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017706:	f7fd fd4d 	bl	80151a4 <HAL_RCC_GetPCLK2Freq>
 801770a:	0003      	movs	r3, r0
 801770c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801770e:	e01c      	b.n	801774a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017710:	4b28      	ldr	r3, [pc, #160]	@ (80177b4 <UART_SetConfig+0x52c>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	2210      	movs	r2, #16
 8017716:	4013      	ands	r3, r2
 8017718:	d002      	beq.n	8017720 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801771a:	4b27      	ldr	r3, [pc, #156]	@ (80177b8 <UART_SetConfig+0x530>)
 801771c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801771e:	e014      	b.n	801774a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8017720:	4b26      	ldr	r3, [pc, #152]	@ (80177bc <UART_SetConfig+0x534>)
 8017722:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017724:	e011      	b.n	801774a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017726:	f7fd fc77 	bl	8015018 <HAL_RCC_GetSysClockFreq>
 801772a:	0003      	movs	r3, r0
 801772c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801772e:	e00c      	b.n	801774a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017730:	2380      	movs	r3, #128	@ 0x80
 8017732:	021b      	lsls	r3, r3, #8
 8017734:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017736:	e008      	b.n	801774a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8017738:	2300      	movs	r3, #0
 801773a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801773c:	231a      	movs	r3, #26
 801773e:	2218      	movs	r2, #24
 8017740:	189b      	adds	r3, r3, r2
 8017742:	19db      	adds	r3, r3, r7
 8017744:	2201      	movs	r2, #1
 8017746:	701a      	strb	r2, [r3, #0]
        break;
 8017748:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801774c:	2b00      	cmp	r3, #0
 801774e:	d020      	beq.n	8017792 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8017750:	69fb      	ldr	r3, [r7, #28]
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	085a      	lsrs	r2, r3, #1
 8017756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017758:	18d2      	adds	r2, r2, r3
 801775a:	69fb      	ldr	r3, [r7, #28]
 801775c:	685b      	ldr	r3, [r3, #4]
 801775e:	0019      	movs	r1, r3
 8017760:	0010      	movs	r0, r2
 8017762:	f7e8 fd1f 	bl	80001a4 <__udivsi3>
 8017766:	0003      	movs	r3, r0
 8017768:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801776c:	2b0f      	cmp	r3, #15
 801776e:	d90a      	bls.n	8017786 <UART_SetConfig+0x4fe>
 8017770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017772:	2380      	movs	r3, #128	@ 0x80
 8017774:	025b      	lsls	r3, r3, #9
 8017776:	429a      	cmp	r2, r3
 8017778:	d205      	bcs.n	8017786 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801777c:	b29a      	uxth	r2, r3
 801777e:	69fb      	ldr	r3, [r7, #28]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	60da      	str	r2, [r3, #12]
 8017784:	e005      	b.n	8017792 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017786:	231a      	movs	r3, #26
 8017788:	2218      	movs	r2, #24
 801778a:	189b      	adds	r3, r3, r2
 801778c:	19db      	adds	r3, r3, r7
 801778e:	2201      	movs	r2, #1
 8017790:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017792:	69fb      	ldr	r3, [r7, #28]
 8017794:	2200      	movs	r2, #0
 8017796:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8017798:	69fb      	ldr	r3, [r7, #28]
 801779a:	2200      	movs	r2, #0
 801779c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801779e:	231a      	movs	r3, #26
 80177a0:	2218      	movs	r2, #24
 80177a2:	189b      	adds	r3, r3, r2
 80177a4:	19db      	adds	r3, r3, r7
 80177a6:	781b      	ldrb	r3, [r3, #0]
}
 80177a8:	0018      	movs	r0, r3
 80177aa:	46bd      	mov	sp, r7
 80177ac:	b00e      	add	sp, #56	@ 0x38
 80177ae:	bdb0      	pop	{r4, r5, r7, pc}
 80177b0:	08024978 	.word	0x08024978
 80177b4:	40021000 	.word	0x40021000
 80177b8:	003d0900 	.word	0x003d0900
 80177bc:	00f42400 	.word	0x00f42400
 80177c0:	0802499c 	.word	0x0802499c

080177c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177d0:	2201      	movs	r2, #1
 80177d2:	4013      	ands	r3, r2
 80177d4:	d00b      	beq.n	80177ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	4a4a      	ldr	r2, [pc, #296]	@ (8017908 <UART_AdvFeatureConfig+0x144>)
 80177de:	4013      	ands	r3, r2
 80177e0:	0019      	movs	r1, r3
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	430a      	orrs	r2, r1
 80177ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177f2:	2202      	movs	r2, #2
 80177f4:	4013      	ands	r3, r2
 80177f6:	d00b      	beq.n	8017810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	4a43      	ldr	r2, [pc, #268]	@ (801790c <UART_AdvFeatureConfig+0x148>)
 8017800:	4013      	ands	r3, r2
 8017802:	0019      	movs	r1, r3
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	430a      	orrs	r2, r1
 801780e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017814:	2204      	movs	r2, #4
 8017816:	4013      	ands	r3, r2
 8017818:	d00b      	beq.n	8017832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	685b      	ldr	r3, [r3, #4]
 8017820:	4a3b      	ldr	r2, [pc, #236]	@ (8017910 <UART_AdvFeatureConfig+0x14c>)
 8017822:	4013      	ands	r3, r2
 8017824:	0019      	movs	r1, r3
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	430a      	orrs	r2, r1
 8017830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017836:	2208      	movs	r2, #8
 8017838:	4013      	ands	r3, r2
 801783a:	d00b      	beq.n	8017854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	685b      	ldr	r3, [r3, #4]
 8017842:	4a34      	ldr	r2, [pc, #208]	@ (8017914 <UART_AdvFeatureConfig+0x150>)
 8017844:	4013      	ands	r3, r2
 8017846:	0019      	movs	r1, r3
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	430a      	orrs	r2, r1
 8017852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017858:	2210      	movs	r2, #16
 801785a:	4013      	ands	r3, r2
 801785c:	d00b      	beq.n	8017876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	4a2c      	ldr	r2, [pc, #176]	@ (8017918 <UART_AdvFeatureConfig+0x154>)
 8017866:	4013      	ands	r3, r2
 8017868:	0019      	movs	r1, r3
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	430a      	orrs	r2, r1
 8017874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801787a:	2220      	movs	r2, #32
 801787c:	4013      	ands	r3, r2
 801787e:	d00b      	beq.n	8017898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	689b      	ldr	r3, [r3, #8]
 8017886:	4a25      	ldr	r2, [pc, #148]	@ (801791c <UART_AdvFeatureConfig+0x158>)
 8017888:	4013      	ands	r3, r2
 801788a:	0019      	movs	r1, r3
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	430a      	orrs	r2, r1
 8017896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801789c:	2240      	movs	r2, #64	@ 0x40
 801789e:	4013      	ands	r3, r2
 80178a0:	d01d      	beq.n	80178de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	685b      	ldr	r3, [r3, #4]
 80178a8:	4a1d      	ldr	r2, [pc, #116]	@ (8017920 <UART_AdvFeatureConfig+0x15c>)
 80178aa:	4013      	ands	r3, r2
 80178ac:	0019      	movs	r1, r3
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	430a      	orrs	r2, r1
 80178b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80178be:	2380      	movs	r3, #128	@ 0x80
 80178c0:	035b      	lsls	r3, r3, #13
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d10b      	bne.n	80178de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	685b      	ldr	r3, [r3, #4]
 80178cc:	4a15      	ldr	r2, [pc, #84]	@ (8017924 <UART_AdvFeatureConfig+0x160>)
 80178ce:	4013      	ands	r3, r2
 80178d0:	0019      	movs	r1, r3
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	430a      	orrs	r2, r1
 80178dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178e2:	2280      	movs	r2, #128	@ 0x80
 80178e4:	4013      	ands	r3, r2
 80178e6:	d00b      	beq.n	8017900 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	685b      	ldr	r3, [r3, #4]
 80178ee:	4a0e      	ldr	r2, [pc, #56]	@ (8017928 <UART_AdvFeatureConfig+0x164>)
 80178f0:	4013      	ands	r3, r2
 80178f2:	0019      	movs	r1, r3
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	430a      	orrs	r2, r1
 80178fe:	605a      	str	r2, [r3, #4]
  }
}
 8017900:	46c0      	nop			@ (mov r8, r8)
 8017902:	46bd      	mov	sp, r7
 8017904:	b002      	add	sp, #8
 8017906:	bd80      	pop	{r7, pc}
 8017908:	fffdffff 	.word	0xfffdffff
 801790c:	fffeffff 	.word	0xfffeffff
 8017910:	fffbffff 	.word	0xfffbffff
 8017914:	ffff7fff 	.word	0xffff7fff
 8017918:	ffffefff 	.word	0xffffefff
 801791c:	ffffdfff 	.word	0xffffdfff
 8017920:	ffefffff 	.word	0xffefffff
 8017924:	ff9fffff 	.word	0xff9fffff
 8017928:	fff7ffff 	.word	0xfff7ffff

0801792c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b092      	sub	sp, #72	@ 0x48
 8017930:	af02      	add	r7, sp, #8
 8017932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2284      	movs	r2, #132	@ 0x84
 8017938:	2100      	movs	r1, #0
 801793a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801793c:	f7f6 fd20 	bl	800e380 <HAL_GetTick>
 8017940:	0003      	movs	r3, r0
 8017942:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	2208      	movs	r2, #8
 801794c:	4013      	ands	r3, r2
 801794e:	2b08      	cmp	r3, #8
 8017950:	d12c      	bne.n	80179ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017954:	2280      	movs	r2, #128	@ 0x80
 8017956:	0391      	lsls	r1, r2, #14
 8017958:	6878      	ldr	r0, [r7, #4]
 801795a:	4a46      	ldr	r2, [pc, #280]	@ (8017a74 <UART_CheckIdleState+0x148>)
 801795c:	9200      	str	r2, [sp, #0]
 801795e:	2200      	movs	r2, #0
 8017960:	f000 f88c 	bl	8017a7c <UART_WaitOnFlagUntilTimeout>
 8017964:	1e03      	subs	r3, r0, #0
 8017966:	d021      	beq.n	80179ac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017968:	f3ef 8310 	mrs	r3, PRIMASK
 801796c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8017970:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017972:	2301      	movs	r3, #1
 8017974:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017978:	f383 8810 	msr	PRIMASK, r3
}
 801797c:	46c0      	nop			@ (mov r8, r8)
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	681a      	ldr	r2, [r3, #0]
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	2180      	movs	r1, #128	@ 0x80
 801798a:	438a      	bics	r2, r1
 801798c:	601a      	str	r2, [r3, #0]
 801798e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017994:	f383 8810 	msr	PRIMASK, r3
}
 8017998:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2220      	movs	r2, #32
 801799e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2278      	movs	r2, #120	@ 0x78
 80179a4:	2100      	movs	r1, #0
 80179a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80179a8:	2303      	movs	r3, #3
 80179aa:	e05f      	b.n	8017a6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	2204      	movs	r2, #4
 80179b4:	4013      	ands	r3, r2
 80179b6:	2b04      	cmp	r3, #4
 80179b8:	d146      	bne.n	8017a48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80179ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80179bc:	2280      	movs	r2, #128	@ 0x80
 80179be:	03d1      	lsls	r1, r2, #15
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	4a2c      	ldr	r2, [pc, #176]	@ (8017a74 <UART_CheckIdleState+0x148>)
 80179c4:	9200      	str	r2, [sp, #0]
 80179c6:	2200      	movs	r2, #0
 80179c8:	f000 f858 	bl	8017a7c <UART_WaitOnFlagUntilTimeout>
 80179cc:	1e03      	subs	r3, r0, #0
 80179ce:	d03b      	beq.n	8017a48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179d0:	f3ef 8310 	mrs	r3, PRIMASK
 80179d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80179d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80179d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80179da:	2301      	movs	r3, #1
 80179dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179de:	693b      	ldr	r3, [r7, #16]
 80179e0:	f383 8810 	msr	PRIMASK, r3
}
 80179e4:	46c0      	nop			@ (mov r8, r8)
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	681a      	ldr	r2, [r3, #0]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	4921      	ldr	r1, [pc, #132]	@ (8017a78 <UART_CheckIdleState+0x14c>)
 80179f2:	400a      	ands	r2, r1
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80179f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	f383 8810 	msr	PRIMASK, r3
}
 8017a00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a02:	f3ef 8310 	mrs	r3, PRIMASK
 8017a06:	61bb      	str	r3, [r7, #24]
  return(result);
 8017a08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a10:	69fb      	ldr	r3, [r7, #28]
 8017a12:	f383 8810 	msr	PRIMASK, r3
}
 8017a16:	46c0      	nop			@ (mov r8, r8)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	689a      	ldr	r2, [r3, #8]
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	2101      	movs	r1, #1
 8017a24:	438a      	bics	r2, r1
 8017a26:	609a      	str	r2, [r3, #8]
 8017a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a2c:	6a3b      	ldr	r3, [r7, #32]
 8017a2e:	f383 8810 	msr	PRIMASK, r3
}
 8017a32:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2280      	movs	r2, #128	@ 0x80
 8017a38:	2120      	movs	r1, #32
 8017a3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2278      	movs	r2, #120	@ 0x78
 8017a40:	2100      	movs	r1, #0
 8017a42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017a44:	2303      	movs	r3, #3
 8017a46:	e011      	b.n	8017a6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	2220      	movs	r2, #32
 8017a4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	2280      	movs	r2, #128	@ 0x80
 8017a52:	2120      	movs	r1, #32
 8017a54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2200      	movs	r2, #0
 8017a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	2278      	movs	r2, #120	@ 0x78
 8017a66:	2100      	movs	r1, #0
 8017a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017a6a:	2300      	movs	r3, #0
}
 8017a6c:	0018      	movs	r0, r3
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	b010      	add	sp, #64	@ 0x40
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	01ffffff 	.word	0x01ffffff
 8017a78:	fffffedf 	.word	0xfffffedf

08017a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b084      	sub	sp, #16
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	60b9      	str	r1, [r7, #8]
 8017a86:	603b      	str	r3, [r7, #0]
 8017a88:	1dfb      	adds	r3, r7, #7
 8017a8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017a8c:	e04b      	b.n	8017b26 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017a8e:	69bb      	ldr	r3, [r7, #24]
 8017a90:	3301      	adds	r3, #1
 8017a92:	d048      	beq.n	8017b26 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a94:	f7f6 fc74 	bl	800e380 <HAL_GetTick>
 8017a98:	0002      	movs	r2, r0
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	1ad3      	subs	r3, r2, r3
 8017a9e:	69ba      	ldr	r2, [r7, #24]
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	d302      	bcc.n	8017aaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8017aa4:	69bb      	ldr	r3, [r7, #24]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d101      	bne.n	8017aae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017aaa:	2303      	movs	r3, #3
 8017aac:	e04b      	b.n	8017b46 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	2204      	movs	r2, #4
 8017ab6:	4013      	ands	r3, r2
 8017ab8:	d035      	beq.n	8017b26 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	69db      	ldr	r3, [r3, #28]
 8017ac0:	2208      	movs	r2, #8
 8017ac2:	4013      	ands	r3, r2
 8017ac4:	2b08      	cmp	r3, #8
 8017ac6:	d111      	bne.n	8017aec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	2208      	movs	r2, #8
 8017ace:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	0018      	movs	r0, r3
 8017ad4:	f000 f9ca 	bl	8017e6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2284      	movs	r2, #132	@ 0x84
 8017adc:	2108      	movs	r1, #8
 8017ade:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	2278      	movs	r2, #120	@ 0x78
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017ae8:	2301      	movs	r3, #1
 8017aea:	e02c      	b.n	8017b46 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	69da      	ldr	r2, [r3, #28]
 8017af2:	2380      	movs	r3, #128	@ 0x80
 8017af4:	011b      	lsls	r3, r3, #4
 8017af6:	401a      	ands	r2, r3
 8017af8:	2380      	movs	r3, #128	@ 0x80
 8017afa:	011b      	lsls	r3, r3, #4
 8017afc:	429a      	cmp	r2, r3
 8017afe:	d112      	bne.n	8017b26 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	2280      	movs	r2, #128	@ 0x80
 8017b06:	0112      	lsls	r2, r2, #4
 8017b08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	0018      	movs	r0, r3
 8017b0e:	f000 f9ad 	bl	8017e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	2284      	movs	r2, #132	@ 0x84
 8017b16:	2120      	movs	r1, #32
 8017b18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	2278      	movs	r2, #120	@ 0x78
 8017b1e:	2100      	movs	r1, #0
 8017b20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017b22:	2303      	movs	r3, #3
 8017b24:	e00f      	b.n	8017b46 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	69db      	ldr	r3, [r3, #28]
 8017b2c:	68ba      	ldr	r2, [r7, #8]
 8017b2e:	4013      	ands	r3, r2
 8017b30:	68ba      	ldr	r2, [r7, #8]
 8017b32:	1ad3      	subs	r3, r2, r3
 8017b34:	425a      	negs	r2, r3
 8017b36:	4153      	adcs	r3, r2
 8017b38:	b2db      	uxtb	r3, r3
 8017b3a:	001a      	movs	r2, r3
 8017b3c:	1dfb      	adds	r3, r7, #7
 8017b3e:	781b      	ldrb	r3, [r3, #0]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d0a4      	beq.n	8017a8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017b44:	2300      	movs	r3, #0
}
 8017b46:	0018      	movs	r0, r3
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	b004      	add	sp, #16
 8017b4c:	bd80      	pop	{r7, pc}
	...

08017b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b090      	sub	sp, #64	@ 0x40
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	60f8      	str	r0, [r7, #12]
 8017b58:	60b9      	str	r1, [r7, #8]
 8017b5a:	1dbb      	adds	r3, r7, #6
 8017b5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	68ba      	ldr	r2, [r7, #8]
 8017b62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	1dba      	adds	r2, r7, #6
 8017b68:	2158      	movs	r1, #88	@ 0x58
 8017b6a:	8812      	ldrh	r2, [r2, #0]
 8017b6c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	1dba      	adds	r2, r7, #6
 8017b72:	215a      	movs	r1, #90	@ 0x5a
 8017b74:	8812      	ldrh	r2, [r2, #0]
 8017b76:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	689a      	ldr	r2, [r3, #8]
 8017b82:	2380      	movs	r3, #128	@ 0x80
 8017b84:	015b      	lsls	r3, r3, #5
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d10d      	bne.n	8017ba6 <UART_Start_Receive_IT+0x56>
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	691b      	ldr	r3, [r3, #16]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d104      	bne.n	8017b9c <UART_Start_Receive_IT+0x4c>
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	225c      	movs	r2, #92	@ 0x5c
 8017b96:	4950      	ldr	r1, [pc, #320]	@ (8017cd8 <UART_Start_Receive_IT+0x188>)
 8017b98:	5299      	strh	r1, [r3, r2]
 8017b9a:	e02e      	b.n	8017bfa <UART_Start_Receive_IT+0xaa>
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	225c      	movs	r2, #92	@ 0x5c
 8017ba0:	21ff      	movs	r1, #255	@ 0xff
 8017ba2:	5299      	strh	r1, [r3, r2]
 8017ba4:	e029      	b.n	8017bfa <UART_Start_Receive_IT+0xaa>
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	689b      	ldr	r3, [r3, #8]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d10d      	bne.n	8017bca <UART_Start_Receive_IT+0x7a>
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	691b      	ldr	r3, [r3, #16]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d104      	bne.n	8017bc0 <UART_Start_Receive_IT+0x70>
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	225c      	movs	r2, #92	@ 0x5c
 8017bba:	21ff      	movs	r1, #255	@ 0xff
 8017bbc:	5299      	strh	r1, [r3, r2]
 8017bbe:	e01c      	b.n	8017bfa <UART_Start_Receive_IT+0xaa>
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	225c      	movs	r2, #92	@ 0x5c
 8017bc4:	217f      	movs	r1, #127	@ 0x7f
 8017bc6:	5299      	strh	r1, [r3, r2]
 8017bc8:	e017      	b.n	8017bfa <UART_Start_Receive_IT+0xaa>
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	689a      	ldr	r2, [r3, #8]
 8017bce:	2380      	movs	r3, #128	@ 0x80
 8017bd0:	055b      	lsls	r3, r3, #21
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d10d      	bne.n	8017bf2 <UART_Start_Receive_IT+0xa2>
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	691b      	ldr	r3, [r3, #16]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d104      	bne.n	8017be8 <UART_Start_Receive_IT+0x98>
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	225c      	movs	r2, #92	@ 0x5c
 8017be2:	217f      	movs	r1, #127	@ 0x7f
 8017be4:	5299      	strh	r1, [r3, r2]
 8017be6:	e008      	b.n	8017bfa <UART_Start_Receive_IT+0xaa>
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	225c      	movs	r2, #92	@ 0x5c
 8017bec:	213f      	movs	r1, #63	@ 0x3f
 8017bee:	5299      	strh	r1, [r3, r2]
 8017bf0:	e003      	b.n	8017bfa <UART_Start_Receive_IT+0xaa>
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	225c      	movs	r2, #92	@ 0x5c
 8017bf6:	2100      	movs	r1, #0
 8017bf8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	2284      	movs	r2, #132	@ 0x84
 8017bfe:	2100      	movs	r1, #0
 8017c00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	2280      	movs	r2, #128	@ 0x80
 8017c06:	2122      	movs	r1, #34	@ 0x22
 8017c08:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8017c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017c14:	2301      	movs	r3, #1
 8017c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c1a:	f383 8810 	msr	PRIMASK, r3
}
 8017c1e:	46c0      	nop			@ (mov r8, r8)
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	689a      	ldr	r2, [r3, #8]
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	2101      	movs	r1, #1
 8017c2c:	430a      	orrs	r2, r1
 8017c2e:	609a      	str	r2, [r3, #8]
 8017c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c32:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c36:	f383 8810 	msr	PRIMASK, r3
}
 8017c3a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	689a      	ldr	r2, [r3, #8]
 8017c40:	2380      	movs	r3, #128	@ 0x80
 8017c42:	015b      	lsls	r3, r3, #5
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d107      	bne.n	8017c58 <UART_Start_Receive_IT+0x108>
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	691b      	ldr	r3, [r3, #16]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d103      	bne.n	8017c58 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	4a22      	ldr	r2, [pc, #136]	@ (8017cdc <UART_Start_Receive_IT+0x18c>)
 8017c54:	669a      	str	r2, [r3, #104]	@ 0x68
 8017c56:	e002      	b.n	8017c5e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	4a21      	ldr	r2, [pc, #132]	@ (8017ce0 <UART_Start_Receive_IT+0x190>)
 8017c5c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	691b      	ldr	r3, [r3, #16]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d019      	beq.n	8017c9a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c66:	f3ef 8310 	mrs	r3, PRIMASK
 8017c6a:	61fb      	str	r3, [r7, #28]
  return(result);
 8017c6c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017c70:	2301      	movs	r3, #1
 8017c72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c74:	6a3b      	ldr	r3, [r7, #32]
 8017c76:	f383 8810 	msr	PRIMASK, r3
}
 8017c7a:	46c0      	nop			@ (mov r8, r8)
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	681a      	ldr	r2, [r3, #0]
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	2190      	movs	r1, #144	@ 0x90
 8017c88:	0049      	lsls	r1, r1, #1
 8017c8a:	430a      	orrs	r2, r1
 8017c8c:	601a      	str	r2, [r3, #0]
 8017c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c90:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c94:	f383 8810 	msr	PRIMASK, r3
}
 8017c98:	e018      	b.n	8017ccc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8017c9e:	613b      	str	r3, [r7, #16]
  return(result);
 8017ca0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8017ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	f383 8810 	msr	PRIMASK, r3
}
 8017cae:	46c0      	nop			@ (mov r8, r8)
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	681a      	ldr	r2, [r3, #0]
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	2120      	movs	r1, #32
 8017cbc:	430a      	orrs	r2, r1
 8017cbe:	601a      	str	r2, [r3, #0]
 8017cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cc4:	69bb      	ldr	r3, [r7, #24]
 8017cc6:	f383 8810 	msr	PRIMASK, r3
}
 8017cca:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8017ccc:	2300      	movs	r3, #0
}
 8017cce:	0018      	movs	r0, r3
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	b010      	add	sp, #64	@ 0x40
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	46c0      	nop			@ (mov r8, r8)
 8017cd8:	000001ff 	.word	0x000001ff
 8017cdc:	08018451 	.word	0x08018451
 8017ce0:	08018285 	.word	0x08018285

08017ce4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b090      	sub	sp, #64	@ 0x40
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	60f8      	str	r0, [r7, #12]
 8017cec:	60b9      	str	r1, [r7, #8]
 8017cee:	1dbb      	adds	r3, r7, #6
 8017cf0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	68ba      	ldr	r2, [r7, #8]
 8017cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	1dba      	adds	r2, r7, #6
 8017cfc:	2158      	movs	r1, #88	@ 0x58
 8017cfe:	8812      	ldrh	r2, [r2, #0]
 8017d00:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	2284      	movs	r2, #132	@ 0x84
 8017d06:	2100      	movs	r1, #0
 8017d08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	2280      	movs	r2, #128	@ 0x80
 8017d0e:	2122      	movs	r1, #34	@ 0x22
 8017d10:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d028      	beq.n	8017d6c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8017e18 <UART_Start_Receive_DMA+0x134>)
 8017d20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d26:	4a3d      	ldr	r2, [pc, #244]	@ (8017e1c <UART_Start_Receive_DMA+0x138>)
 8017d28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8017e20 <UART_Start_Receive_DMA+0x13c>)
 8017d30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017d36:	2200      	movs	r2, #0
 8017d38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	3324      	adds	r3, #36	@ 0x24
 8017d44:	0019      	movs	r1, r3
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017d4a:	001a      	movs	r2, r3
 8017d4c:	1dbb      	adds	r3, r7, #6
 8017d4e:	881b      	ldrh	r3, [r3, #0]
 8017d50:	f7f7 f868 	bl	800ee24 <HAL_DMA_Start_IT>
 8017d54:	1e03      	subs	r3, r0, #0
 8017d56:	d009      	beq.n	8017d6c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	2284      	movs	r2, #132	@ 0x84
 8017d5c:	2110      	movs	r1, #16
 8017d5e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	2280      	movs	r2, #128	@ 0x80
 8017d64:	2120      	movs	r1, #32
 8017d66:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8017d68:	2301      	movs	r3, #1
 8017d6a:	e050      	b.n	8017e0e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	691b      	ldr	r3, [r3, #16]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d019      	beq.n	8017da8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d74:	f3ef 8310 	mrs	r3, PRIMASK
 8017d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017d7e:	2301      	movs	r3, #1
 8017d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d84:	f383 8810 	msr	PRIMASK, r3
}
 8017d88:	46c0      	nop			@ (mov r8, r8)
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	681a      	ldr	r2, [r3, #0]
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2180      	movs	r1, #128	@ 0x80
 8017d96:	0049      	lsls	r1, r1, #1
 8017d98:	430a      	orrs	r2, r1
 8017d9a:	601a      	str	r2, [r3, #0]
 8017d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017da2:	f383 8810 	msr	PRIMASK, r3
}
 8017da6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017da8:	f3ef 8310 	mrs	r3, PRIMASK
 8017dac:	613b      	str	r3, [r7, #16]
  return(result);
 8017dae:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017db2:	2301      	movs	r3, #1
 8017db4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	f383 8810 	msr	PRIMASK, r3
}
 8017dbc:	46c0      	nop			@ (mov r8, r8)
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	689a      	ldr	r2, [r3, #8]
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	2101      	movs	r1, #1
 8017dca:	430a      	orrs	r2, r1
 8017dcc:	609a      	str	r2, [r3, #8]
 8017dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	f383 8810 	msr	PRIMASK, r3
}
 8017dd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017dda:	f3ef 8310 	mrs	r3, PRIMASK
 8017dde:	61fb      	str	r3, [r7, #28]
  return(result);
 8017de0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8017de4:	2301      	movs	r3, #1
 8017de6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017de8:	6a3b      	ldr	r3, [r7, #32]
 8017dea:	f383 8810 	msr	PRIMASK, r3
}
 8017dee:	46c0      	nop			@ (mov r8, r8)
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	689a      	ldr	r2, [r3, #8]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	2140      	movs	r1, #64	@ 0x40
 8017dfc:	430a      	orrs	r2, r1
 8017dfe:	609a      	str	r2, [r3, #8]
 8017e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e02:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e06:	f383 8810 	msr	PRIMASK, r3
}
 8017e0a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017e0c:	2300      	movs	r3, #0
}
 8017e0e:	0018      	movs	r0, r3
 8017e10:	46bd      	mov	sp, r7
 8017e12:	b010      	add	sp, #64	@ 0x40
 8017e14:	bd80      	pop	{r7, pc}
 8017e16:	46c0      	nop			@ (mov r8, r8)
 8017e18:	08017ff5 	.word	0x08017ff5
 8017e1c:	08018129 	.word	0x08018129
 8017e20:	08018171 	.word	0x08018171

08017e24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b086      	sub	sp, #24
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8017e30:	60bb      	str	r3, [r7, #8]
  return(result);
 8017e32:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017e34:	617b      	str	r3, [r7, #20]
 8017e36:	2301      	movs	r3, #1
 8017e38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	f383 8810 	msr	PRIMASK, r3
}
 8017e40:	46c0      	nop			@ (mov r8, r8)
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	681a      	ldr	r2, [r3, #0]
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	21c0      	movs	r1, #192	@ 0xc0
 8017e4e:	438a      	bics	r2, r1
 8017e50:	601a      	str	r2, [r3, #0]
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	f383 8810 	msr	PRIMASK, r3
}
 8017e5c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	2220      	movs	r2, #32
 8017e62:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8017e64:	46c0      	nop			@ (mov r8, r8)
 8017e66:	46bd      	mov	sp, r7
 8017e68:	b006      	add	sp, #24
 8017e6a:	bd80      	pop	{r7, pc}

08017e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b08e      	sub	sp, #56	@ 0x38
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e74:	f3ef 8310 	mrs	r3, PRIMASK
 8017e78:	617b      	str	r3, [r7, #20]
  return(result);
 8017e7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e7e:	2301      	movs	r3, #1
 8017e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	f383 8810 	msr	PRIMASK, r3
}
 8017e88:	46c0      	nop			@ (mov r8, r8)
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	681a      	ldr	r2, [r3, #0]
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	4926      	ldr	r1, [pc, #152]	@ (8017f30 <UART_EndRxTransfer+0xc4>)
 8017e96:	400a      	ands	r2, r1
 8017e98:	601a      	str	r2, [r3, #0]
 8017e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e9e:	69fb      	ldr	r3, [r7, #28]
 8017ea0:	f383 8810 	msr	PRIMASK, r3
}
 8017ea4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8017eaa:	623b      	str	r3, [r7, #32]
  return(result);
 8017eac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017eae:	633b      	str	r3, [r7, #48]	@ 0x30
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eb6:	f383 8810 	msr	PRIMASK, r3
}
 8017eba:	46c0      	nop			@ (mov r8, r8)
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	689a      	ldr	r2, [r3, #8]
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	2101      	movs	r1, #1
 8017ec8:	438a      	bics	r2, r1
 8017eca:	609a      	str	r2, [r3, #8]
 8017ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ed2:	f383 8810 	msr	PRIMASK, r3
}
 8017ed6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017edc:	2b01      	cmp	r3, #1
 8017ede:	d118      	bne.n	8017f12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8017ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8017ee6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017eea:	2301      	movs	r3, #1
 8017eec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	f383 8810 	msr	PRIMASK, r3
}
 8017ef4:	46c0      	nop			@ (mov r8, r8)
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	681a      	ldr	r2, [r3, #0]
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	2110      	movs	r1, #16
 8017f02:	438a      	bics	r2, r1
 8017f04:	601a      	str	r2, [r3, #0]
 8017f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	f383 8810 	msr	PRIMASK, r3
}
 8017f10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2280      	movs	r2, #128	@ 0x80
 8017f16:	2120      	movs	r1, #32
 8017f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	2200      	movs	r2, #0
 8017f24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017f26:	46c0      	nop			@ (mov r8, r8)
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	b00e      	add	sp, #56	@ 0x38
 8017f2c:	bd80      	pop	{r7, pc}
 8017f2e:	46c0      	nop			@ (mov r8, r8)
 8017f30:	fffffedf 	.word	0xfffffedf

08017f34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b08c      	sub	sp, #48	@ 0x30
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	2220      	movs	r2, #32
 8017f4a:	4013      	ands	r3, r2
 8017f4c:	d135      	bne.n	8017fba <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8017f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f50:	2252      	movs	r2, #82	@ 0x52
 8017f52:	2100      	movs	r1, #0
 8017f54:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f56:	f3ef 8310 	mrs	r3, PRIMASK
 8017f5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8017f5c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017f60:	2301      	movs	r3, #1
 8017f62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f64:	693b      	ldr	r3, [r7, #16]
 8017f66:	f383 8810 	msr	PRIMASK, r3
}
 8017f6a:	46c0      	nop			@ (mov r8, r8)
 8017f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	689a      	ldr	r2, [r3, #8]
 8017f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	2180      	movs	r1, #128	@ 0x80
 8017f78:	438a      	bics	r2, r1
 8017f7a:	609a      	str	r2, [r3, #8]
 8017f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f80:	697b      	ldr	r3, [r7, #20]
 8017f82:	f383 8810 	msr	PRIMASK, r3
}
 8017f86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f88:	f3ef 8310 	mrs	r3, PRIMASK
 8017f8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8017f8e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f92:	2301      	movs	r3, #1
 8017f94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f96:	69fb      	ldr	r3, [r7, #28]
 8017f98:	f383 8810 	msr	PRIMASK, r3
}
 8017f9c:	46c0      	nop			@ (mov r8, r8)
 8017f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	681a      	ldr	r2, [r3, #0]
 8017fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	2140      	movs	r1, #64	@ 0x40
 8017faa:	430a      	orrs	r2, r1
 8017fac:	601a      	str	r2, [r3, #0]
 8017fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fb2:	6a3b      	ldr	r3, [r7, #32]
 8017fb4:	f383 8810 	msr	PRIMASK, r3
}
 8017fb8:	e006      	b.n	8017fc8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8017fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fbc:	228c      	movs	r2, #140	@ 0x8c
 8017fbe:	589b      	ldr	r3, [r3, r2]
 8017fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017fc2:	0010      	movs	r0, r2
 8017fc4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017fc6:	46c0      	nop			@ (mov r8, r8)
 8017fc8:	46c0      	nop			@ (mov r8, r8)
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	b00c      	add	sp, #48	@ 0x30
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b084      	sub	sp, #16
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017fdc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	2288      	movs	r2, #136	@ 0x88
 8017fe2:	589b      	ldr	r3, [r3, r2]
 8017fe4:	68fa      	ldr	r2, [r7, #12]
 8017fe6:	0010      	movs	r0, r2
 8017fe8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017fea:	46c0      	nop			@ (mov r8, r8)
 8017fec:	46bd      	mov	sp, r7
 8017fee:	b004      	add	sp, #16
 8017ff0:	bd80      	pop	{r7, pc}
	...

08017ff4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b094      	sub	sp, #80	@ 0x50
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018000:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	2220      	movs	r2, #32
 801800a:	4013      	ands	r3, r2
 801800c:	d16f      	bne.n	80180ee <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801800e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018010:	225a      	movs	r2, #90	@ 0x5a
 8018012:	2100      	movs	r1, #0
 8018014:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018016:	f3ef 8310 	mrs	r3, PRIMASK
 801801a:	61bb      	str	r3, [r7, #24]
  return(result);
 801801c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801801e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018020:	2301      	movs	r3, #1
 8018022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018024:	69fb      	ldr	r3, [r7, #28]
 8018026:	f383 8810 	msr	PRIMASK, r3
}
 801802a:	46c0      	nop			@ (mov r8, r8)
 801802c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	681a      	ldr	r2, [r3, #0]
 8018032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	493b      	ldr	r1, [pc, #236]	@ (8018124 <UART_DMAReceiveCplt+0x130>)
 8018038:	400a      	ands	r2, r1
 801803a:	601a      	str	r2, [r3, #0]
 801803c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801803e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018040:	6a3b      	ldr	r3, [r7, #32]
 8018042:	f383 8810 	msr	PRIMASK, r3
}
 8018046:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018048:	f3ef 8310 	mrs	r3, PRIMASK
 801804c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018050:	647b      	str	r3, [r7, #68]	@ 0x44
 8018052:	2301      	movs	r3, #1
 8018054:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018058:	f383 8810 	msr	PRIMASK, r3
}
 801805c:	46c0      	nop			@ (mov r8, r8)
 801805e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	689a      	ldr	r2, [r3, #8]
 8018064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	2101      	movs	r1, #1
 801806a:	438a      	bics	r2, r1
 801806c:	609a      	str	r2, [r3, #8]
 801806e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018074:	f383 8810 	msr	PRIMASK, r3
}
 8018078:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801807a:	f3ef 8310 	mrs	r3, PRIMASK
 801807e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018082:	643b      	str	r3, [r7, #64]	@ 0x40
 8018084:	2301      	movs	r3, #1
 8018086:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801808a:	f383 8810 	msr	PRIMASK, r3
}
 801808e:	46c0      	nop			@ (mov r8, r8)
 8018090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	689a      	ldr	r2, [r3, #8]
 8018096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	2140      	movs	r1, #64	@ 0x40
 801809c:	438a      	bics	r2, r1
 801809e:	609a      	str	r2, [r3, #8]
 80180a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180a6:	f383 8810 	msr	PRIMASK, r3
}
 80180aa:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80180ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180ae:	2280      	movs	r2, #128	@ 0x80
 80180b0:	2120      	movs	r1, #32
 80180b2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80180b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80180b8:	2b01      	cmp	r3, #1
 80180ba:	d118      	bne.n	80180ee <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80180bc:	f3ef 8310 	mrs	r3, PRIMASK
 80180c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80180c2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80180c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180c6:	2301      	movs	r3, #1
 80180c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180ca:	693b      	ldr	r3, [r7, #16]
 80180cc:	f383 8810 	msr	PRIMASK, r3
}
 80180d0:	46c0      	nop			@ (mov r8, r8)
 80180d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	681a      	ldr	r2, [r3, #0]
 80180d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	2110      	movs	r1, #16
 80180de:	438a      	bics	r2, r1
 80180e0:	601a      	str	r2, [r3, #0]
 80180e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180e6:	697b      	ldr	r3, [r7, #20]
 80180e8:	f383 8810 	msr	PRIMASK, r3
}
 80180ec:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80180ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180f0:	2200      	movs	r2, #0
 80180f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80180f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80180f8:	2b01      	cmp	r3, #1
 80180fa:	d109      	bne.n	8018110 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80180fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180fe:	22ac      	movs	r2, #172	@ 0xac
 8018100:	589b      	ldr	r3, [r3, r2]
 8018102:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018104:	2158      	movs	r1, #88	@ 0x58
 8018106:	5a51      	ldrh	r1, [r2, r1]
 8018108:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801810a:	0010      	movs	r0, r2
 801810c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801810e:	e005      	b.n	801811c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018112:	2294      	movs	r2, #148	@ 0x94
 8018114:	589b      	ldr	r3, [r3, r2]
 8018116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018118:	0010      	movs	r0, r2
 801811a:	4798      	blx	r3
}
 801811c:	46c0      	nop			@ (mov r8, r8)
 801811e:	46bd      	mov	sp, r7
 8018120:	b014      	add	sp, #80	@ 0x50
 8018122:	bd80      	pop	{r7, pc}
 8018124:	fffffeff 	.word	0xfffffeff

08018128 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018134:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	2201      	movs	r2, #1
 801813a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018140:	2b01      	cmp	r3, #1
 8018142:	d10b      	bne.n	801815c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	22ac      	movs	r2, #172	@ 0xac
 8018148:	589b      	ldr	r3, [r3, r2]
 801814a:	68fa      	ldr	r2, [r7, #12]
 801814c:	2158      	movs	r1, #88	@ 0x58
 801814e:	5a52      	ldrh	r2, [r2, r1]
 8018150:	0852      	lsrs	r2, r2, #1
 8018152:	b291      	uxth	r1, r2
 8018154:	68fa      	ldr	r2, [r7, #12]
 8018156:	0010      	movs	r0, r2
 8018158:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801815a:	e005      	b.n	8018168 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	2290      	movs	r2, #144	@ 0x90
 8018160:	589b      	ldr	r3, [r3, r2]
 8018162:	68fa      	ldr	r2, [r7, #12]
 8018164:	0010      	movs	r0, r2
 8018166:	4798      	blx	r3
}
 8018168:	46c0      	nop			@ (mov r8, r8)
 801816a:	46bd      	mov	sp, r7
 801816c:	b004      	add	sp, #16
 801816e:	bd80      	pop	{r7, pc}

08018170 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b086      	sub	sp, #24
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801817c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801817e:	697b      	ldr	r3, [r7, #20]
 8018180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018182:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	2280      	movs	r2, #128	@ 0x80
 8018188:	589b      	ldr	r3, [r3, r2]
 801818a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	689b      	ldr	r3, [r3, #8]
 8018192:	2280      	movs	r2, #128	@ 0x80
 8018194:	4013      	ands	r3, r2
 8018196:	2b80      	cmp	r3, #128	@ 0x80
 8018198:	d10a      	bne.n	80181b0 <UART_DMAError+0x40>
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	2b21      	cmp	r3, #33	@ 0x21
 801819e:	d107      	bne.n	80181b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80181a0:	697b      	ldr	r3, [r7, #20]
 80181a2:	2252      	movs	r2, #82	@ 0x52
 80181a4:	2100      	movs	r1, #0
 80181a6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80181a8:	697b      	ldr	r3, [r7, #20]
 80181aa:	0018      	movs	r0, r3
 80181ac:	f7ff fe3a 	bl	8017e24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	689b      	ldr	r3, [r3, #8]
 80181b6:	2240      	movs	r2, #64	@ 0x40
 80181b8:	4013      	ands	r3, r2
 80181ba:	2b40      	cmp	r3, #64	@ 0x40
 80181bc:	d10a      	bne.n	80181d4 <UART_DMAError+0x64>
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	2b22      	cmp	r3, #34	@ 0x22
 80181c2:	d107      	bne.n	80181d4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	225a      	movs	r2, #90	@ 0x5a
 80181c8:	2100      	movs	r1, #0
 80181ca:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	0018      	movs	r0, r3
 80181d0:	f7ff fe4c 	bl	8017e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	2284      	movs	r2, #132	@ 0x84
 80181d8:	589b      	ldr	r3, [r3, r2]
 80181da:	2210      	movs	r2, #16
 80181dc:	431a      	orrs	r2, r3
 80181de:	697b      	ldr	r3, [r7, #20]
 80181e0:	2184      	movs	r1, #132	@ 0x84
 80181e2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	2298      	movs	r2, #152	@ 0x98
 80181e8:	589b      	ldr	r3, [r3, r2]
 80181ea:	697a      	ldr	r2, [r7, #20]
 80181ec:	0010      	movs	r0, r2
 80181ee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80181f0:	46c0      	nop			@ (mov r8, r8)
 80181f2:	46bd      	mov	sp, r7
 80181f4:	b006      	add	sp, #24
 80181f6:	bd80      	pop	{r7, pc}

080181f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b084      	sub	sp, #16
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	225a      	movs	r2, #90	@ 0x5a
 801820a:	2100      	movs	r1, #0
 801820c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	2252      	movs	r2, #82	@ 0x52
 8018212:	2100      	movs	r1, #0
 8018214:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	2298      	movs	r2, #152	@ 0x98
 801821a:	589b      	ldr	r3, [r3, r2]
 801821c:	68fa      	ldr	r2, [r7, #12]
 801821e:	0010      	movs	r0, r2
 8018220:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018222:	46c0      	nop			@ (mov r8, r8)
 8018224:	46bd      	mov	sp, r7
 8018226:	b004      	add	sp, #16
 8018228:	bd80      	pop	{r7, pc}

0801822a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801822a:	b580      	push	{r7, lr}
 801822c:	b086      	sub	sp, #24
 801822e:	af00      	add	r7, sp, #0
 8018230:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018232:	f3ef 8310 	mrs	r3, PRIMASK
 8018236:	60bb      	str	r3, [r7, #8]
  return(result);
 8018238:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801823a:	617b      	str	r3, [r7, #20]
 801823c:	2301      	movs	r3, #1
 801823e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	f383 8810 	msr	PRIMASK, r3
}
 8018246:	46c0      	nop			@ (mov r8, r8)
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2140      	movs	r1, #64	@ 0x40
 8018254:	438a      	bics	r2, r1
 8018256:	601a      	str	r2, [r3, #0]
 8018258:	697b      	ldr	r3, [r7, #20]
 801825a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801825c:	693b      	ldr	r3, [r7, #16]
 801825e:	f383 8810 	msr	PRIMASK, r3
}
 8018262:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	2220      	movs	r2, #32
 8018268:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2200      	movs	r2, #0
 801826e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	228c      	movs	r2, #140	@ 0x8c
 8018274:	589b      	ldr	r3, [r3, r2]
 8018276:	687a      	ldr	r2, [r7, #4]
 8018278:	0010      	movs	r0, r2
 801827a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801827c:	46c0      	nop			@ (mov r8, r8)
 801827e:	46bd      	mov	sp, r7
 8018280:	b006      	add	sp, #24
 8018282:	bd80      	pop	{r7, pc}

08018284 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b094      	sub	sp, #80	@ 0x50
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801828c:	204e      	movs	r0, #78	@ 0x4e
 801828e:	183b      	adds	r3, r7, r0
 8018290:	687a      	ldr	r2, [r7, #4]
 8018292:	215c      	movs	r1, #92	@ 0x5c
 8018294:	5a52      	ldrh	r2, [r2, r1]
 8018296:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	2280      	movs	r2, #128	@ 0x80
 801829c:	589b      	ldr	r3, [r3, r2]
 801829e:	2b22      	cmp	r3, #34	@ 0x22
 80182a0:	d000      	beq.n	80182a4 <UART_RxISR_8BIT+0x20>
 80182a2:	e0c2      	b.n	801842a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80182aa:	214c      	movs	r1, #76	@ 0x4c
 80182ac:	187b      	adds	r3, r7, r1
 80182ae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80182b0:	187b      	adds	r3, r7, r1
 80182b2:	881b      	ldrh	r3, [r3, #0]
 80182b4:	b2da      	uxtb	r2, r3
 80182b6:	183b      	adds	r3, r7, r0
 80182b8:	881b      	ldrh	r3, [r3, #0]
 80182ba:	b2d9      	uxtb	r1, r3
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182c0:	400a      	ands	r2, r1
 80182c2:	b2d2      	uxtb	r2, r2
 80182c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182ca:	1c5a      	adds	r2, r3, #1
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	225a      	movs	r2, #90	@ 0x5a
 80182d4:	5a9b      	ldrh	r3, [r3, r2]
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	3b01      	subs	r3, #1
 80182da:	b299      	uxth	r1, r3
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	225a      	movs	r2, #90	@ 0x5a
 80182e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	225a      	movs	r2, #90	@ 0x5a
 80182e6:	5a9b      	ldrh	r3, [r3, r2]
 80182e8:	b29b      	uxth	r3, r3
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d000      	beq.n	80182f0 <UART_RxISR_8BIT+0x6c>
 80182ee:	e0a4      	b.n	801843a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182f0:	f3ef 8310 	mrs	r3, PRIMASK
 80182f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80182f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80182f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80182fa:	2301      	movs	r3, #1
 80182fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018300:	f383 8810 	msr	PRIMASK, r3
}
 8018304:	46c0      	nop			@ (mov r8, r8)
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	494c      	ldr	r1, [pc, #304]	@ (8018444 <UART_RxISR_8BIT+0x1c0>)
 8018312:	400a      	ands	r2, r1
 8018314:	601a      	str	r2, [r3, #0]
 8018316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801831a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801831c:	f383 8810 	msr	PRIMASK, r3
}
 8018320:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018322:	f3ef 8310 	mrs	r3, PRIMASK
 8018326:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801832a:	647b      	str	r3, [r7, #68]	@ 0x44
 801832c:	2301      	movs	r3, #1
 801832e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018332:	f383 8810 	msr	PRIMASK, r3
}
 8018336:	46c0      	nop			@ (mov r8, r8)
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	689a      	ldr	r2, [r3, #8]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	2101      	movs	r1, #1
 8018344:	438a      	bics	r2, r1
 8018346:	609a      	str	r2, [r3, #8]
 8018348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801834a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801834c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801834e:	f383 8810 	msr	PRIMASK, r3
}
 8018352:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2280      	movs	r2, #128	@ 0x80
 8018358:	2120      	movs	r1, #32
 801835a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2200      	movs	r2, #0
 8018360:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	2200      	movs	r2, #0
 8018366:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	4a36      	ldr	r2, [pc, #216]	@ (8018448 <UART_RxISR_8BIT+0x1c4>)
 801836e:	4293      	cmp	r3, r2
 8018370:	d01f      	beq.n	80183b2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	685a      	ldr	r2, [r3, #4]
 8018378:	2380      	movs	r3, #128	@ 0x80
 801837a:	041b      	lsls	r3, r3, #16
 801837c:	4013      	ands	r3, r2
 801837e:	d018      	beq.n	80183b2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018380:	f3ef 8310 	mrs	r3, PRIMASK
 8018384:	61bb      	str	r3, [r7, #24]
  return(result);
 8018386:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018388:	643b      	str	r3, [r7, #64]	@ 0x40
 801838a:	2301      	movs	r3, #1
 801838c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801838e:	69fb      	ldr	r3, [r7, #28]
 8018390:	f383 8810 	msr	PRIMASK, r3
}
 8018394:	46c0      	nop			@ (mov r8, r8)
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	681a      	ldr	r2, [r3, #0]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	492a      	ldr	r1, [pc, #168]	@ (801844c <UART_RxISR_8BIT+0x1c8>)
 80183a2:	400a      	ands	r2, r1
 80183a4:	601a      	str	r2, [r3, #0]
 80183a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183aa:	6a3b      	ldr	r3, [r7, #32]
 80183ac:	f383 8810 	msr	PRIMASK, r3
}
 80183b0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80183b6:	2b01      	cmp	r3, #1
 80183b8:	d130      	bne.n	801841c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2200      	movs	r2, #0
 80183be:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183c0:	f3ef 8310 	mrs	r3, PRIMASK
 80183c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80183c6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80183c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80183ca:	2301      	movs	r3, #1
 80183cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183ce:	693b      	ldr	r3, [r7, #16]
 80183d0:	f383 8810 	msr	PRIMASK, r3
}
 80183d4:	46c0      	nop			@ (mov r8, r8)
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	681a      	ldr	r2, [r3, #0]
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2110      	movs	r1, #16
 80183e2:	438a      	bics	r2, r1
 80183e4:	601a      	str	r2, [r3, #0]
 80183e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183ea:	697b      	ldr	r3, [r7, #20]
 80183ec:	f383 8810 	msr	PRIMASK, r3
}
 80183f0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	69db      	ldr	r3, [r3, #28]
 80183f8:	2210      	movs	r2, #16
 80183fa:	4013      	ands	r3, r2
 80183fc:	2b10      	cmp	r3, #16
 80183fe:	d103      	bne.n	8018408 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	2210      	movs	r2, #16
 8018406:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	22ac      	movs	r2, #172	@ 0xac
 801840c:	589b      	ldr	r3, [r3, r2]
 801840e:	687a      	ldr	r2, [r7, #4]
 8018410:	2158      	movs	r1, #88	@ 0x58
 8018412:	5a51      	ldrh	r1, [r2, r1]
 8018414:	687a      	ldr	r2, [r7, #4]
 8018416:	0010      	movs	r0, r2
 8018418:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801841a:	e00e      	b.n	801843a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2294      	movs	r2, #148	@ 0x94
 8018420:	589b      	ldr	r3, [r3, r2]
 8018422:	687a      	ldr	r2, [r7, #4]
 8018424:	0010      	movs	r0, r2
 8018426:	4798      	blx	r3
}
 8018428:	e007      	b.n	801843a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	699a      	ldr	r2, [r3, #24]
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	2108      	movs	r1, #8
 8018436:	430a      	orrs	r2, r1
 8018438:	619a      	str	r2, [r3, #24]
}
 801843a:	46c0      	nop			@ (mov r8, r8)
 801843c:	46bd      	mov	sp, r7
 801843e:	b014      	add	sp, #80	@ 0x50
 8018440:	bd80      	pop	{r7, pc}
 8018442:	46c0      	nop			@ (mov r8, r8)
 8018444:	fffffedf 	.word	0xfffffedf
 8018448:	40004800 	.word	0x40004800
 801844c:	fbffffff 	.word	0xfbffffff

08018450 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b094      	sub	sp, #80	@ 0x50
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018458:	204e      	movs	r0, #78	@ 0x4e
 801845a:	183b      	adds	r3, r7, r0
 801845c:	687a      	ldr	r2, [r7, #4]
 801845e:	215c      	movs	r1, #92	@ 0x5c
 8018460:	5a52      	ldrh	r2, [r2, r1]
 8018462:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	2280      	movs	r2, #128	@ 0x80
 8018468:	589b      	ldr	r3, [r3, r2]
 801846a:	2b22      	cmp	r3, #34	@ 0x22
 801846c:	d000      	beq.n	8018470 <UART_RxISR_16BIT+0x20>
 801846e:	e0c2      	b.n	80185f6 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018476:	214c      	movs	r1, #76	@ 0x4c
 8018478:	187b      	adds	r3, r7, r1
 801847a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018480:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018482:	187b      	adds	r3, r7, r1
 8018484:	183a      	adds	r2, r7, r0
 8018486:	881b      	ldrh	r3, [r3, #0]
 8018488:	8812      	ldrh	r2, [r2, #0]
 801848a:	4013      	ands	r3, r2
 801848c:	b29a      	uxth	r2, r3
 801848e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018490:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018496:	1c9a      	adds	r2, r3, #2
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	225a      	movs	r2, #90	@ 0x5a
 80184a0:	5a9b      	ldrh	r3, [r3, r2]
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	3b01      	subs	r3, #1
 80184a6:	b299      	uxth	r1, r3
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	225a      	movs	r2, #90	@ 0x5a
 80184ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	225a      	movs	r2, #90	@ 0x5a
 80184b2:	5a9b      	ldrh	r3, [r3, r2]
 80184b4:	b29b      	uxth	r3, r3
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d000      	beq.n	80184bc <UART_RxISR_16BIT+0x6c>
 80184ba:	e0a4      	b.n	8018606 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184bc:	f3ef 8310 	mrs	r3, PRIMASK
 80184c0:	623b      	str	r3, [r7, #32]
  return(result);
 80184c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80184c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80184c6:	2301      	movs	r3, #1
 80184c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184cc:	f383 8810 	msr	PRIMASK, r3
}
 80184d0:	46c0      	nop			@ (mov r8, r8)
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	681a      	ldr	r2, [r3, #0]
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	494c      	ldr	r1, [pc, #304]	@ (8018610 <UART_RxISR_16BIT+0x1c0>)
 80184de:	400a      	ands	r2, r1
 80184e0:	601a      	str	r2, [r3, #0]
 80184e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184e8:	f383 8810 	msr	PRIMASK, r3
}
 80184ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184ee:	f3ef 8310 	mrs	r3, PRIMASK
 80184f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80184f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80184f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80184f8:	2301      	movs	r3, #1
 80184fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184fe:	f383 8810 	msr	PRIMASK, r3
}
 8018502:	46c0      	nop			@ (mov r8, r8)
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	689a      	ldr	r2, [r3, #8]
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2101      	movs	r1, #1
 8018510:	438a      	bics	r2, r1
 8018512:	609a      	str	r2, [r3, #8]
 8018514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018516:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801851a:	f383 8810 	msr	PRIMASK, r3
}
 801851e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	2280      	movs	r2, #128	@ 0x80
 8018524:	2120      	movs	r1, #32
 8018526:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2200      	movs	r2, #0
 801852c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2200      	movs	r2, #0
 8018532:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	4a36      	ldr	r2, [pc, #216]	@ (8018614 <UART_RxISR_16BIT+0x1c4>)
 801853a:	4293      	cmp	r3, r2
 801853c:	d01f      	beq.n	801857e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	685a      	ldr	r2, [r3, #4]
 8018544:	2380      	movs	r3, #128	@ 0x80
 8018546:	041b      	lsls	r3, r3, #16
 8018548:	4013      	ands	r3, r2
 801854a:	d018      	beq.n	801857e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801854c:	f3ef 8310 	mrs	r3, PRIMASK
 8018550:	617b      	str	r3, [r7, #20]
  return(result);
 8018552:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018556:	2301      	movs	r3, #1
 8018558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801855a:	69bb      	ldr	r3, [r7, #24]
 801855c:	f383 8810 	msr	PRIMASK, r3
}
 8018560:	46c0      	nop			@ (mov r8, r8)
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	681a      	ldr	r2, [r3, #0]
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	492a      	ldr	r1, [pc, #168]	@ (8018618 <UART_RxISR_16BIT+0x1c8>)
 801856e:	400a      	ands	r2, r1
 8018570:	601a      	str	r2, [r3, #0]
 8018572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018574:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018576:	69fb      	ldr	r3, [r7, #28]
 8018578:	f383 8810 	msr	PRIMASK, r3
}
 801857c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018582:	2b01      	cmp	r3, #1
 8018584:	d130      	bne.n	80185e8 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	2200      	movs	r2, #0
 801858a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801858c:	f3ef 8310 	mrs	r3, PRIMASK
 8018590:	60bb      	str	r3, [r7, #8]
  return(result);
 8018592:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018594:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018596:	2301      	movs	r3, #1
 8018598:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	f383 8810 	msr	PRIMASK, r3
}
 80185a0:	46c0      	nop			@ (mov r8, r8)
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	681a      	ldr	r2, [r3, #0]
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	2110      	movs	r1, #16
 80185ae:	438a      	bics	r2, r1
 80185b0:	601a      	str	r2, [r3, #0]
 80185b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185b6:	693b      	ldr	r3, [r7, #16]
 80185b8:	f383 8810 	msr	PRIMASK, r3
}
 80185bc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	69db      	ldr	r3, [r3, #28]
 80185c4:	2210      	movs	r2, #16
 80185c6:	4013      	ands	r3, r2
 80185c8:	2b10      	cmp	r3, #16
 80185ca:	d103      	bne.n	80185d4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2210      	movs	r2, #16
 80185d2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	22ac      	movs	r2, #172	@ 0xac
 80185d8:	589b      	ldr	r3, [r3, r2]
 80185da:	687a      	ldr	r2, [r7, #4]
 80185dc:	2158      	movs	r1, #88	@ 0x58
 80185de:	5a51      	ldrh	r1, [r2, r1]
 80185e0:	687a      	ldr	r2, [r7, #4]
 80185e2:	0010      	movs	r0, r2
 80185e4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80185e6:	e00e      	b.n	8018606 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2294      	movs	r2, #148	@ 0x94
 80185ec:	589b      	ldr	r3, [r3, r2]
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	0010      	movs	r0, r2
 80185f2:	4798      	blx	r3
}
 80185f4:	e007      	b.n	8018606 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	699a      	ldr	r2, [r3, #24]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	2108      	movs	r1, #8
 8018602:	430a      	orrs	r2, r1
 8018604:	619a      	str	r2, [r3, #24]
}
 8018606:	46c0      	nop			@ (mov r8, r8)
 8018608:	46bd      	mov	sp, r7
 801860a:	b014      	add	sp, #80	@ 0x50
 801860c:	bd80      	pop	{r7, pc}
 801860e:	46c0      	nop			@ (mov r8, r8)
 8018610:	fffffedf 	.word	0xfffffedf
 8018614:	40004800 	.word	0x40004800
 8018618:	fbffffff 	.word	0xfbffffff

0801861c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b082      	sub	sp, #8
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018624:	46c0      	nop			@ (mov r8, r8)
 8018626:	46bd      	mov	sp, r7
 8018628:	b002      	add	sp, #8
 801862a:	bd80      	pop	{r7, pc}

0801862c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b084      	sub	sp, #16
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	2244      	movs	r2, #68	@ 0x44
 8018638:	2100      	movs	r1, #0
 801863a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801863c:	4b05      	ldr	r3, [pc, #20]	@ (8018654 <USB_EnableGlobalInt+0x28>)
 801863e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	b299      	uxth	r1, r3
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2240      	movs	r2, #64	@ 0x40
 8018648:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801864a:	2300      	movs	r3, #0
}
 801864c:	0018      	movs	r0, r3
 801864e:	46bd      	mov	sp, r7
 8018650:	b004      	add	sp, #16
 8018652:	bd80      	pop	{r7, pc}
 8018654:	0000bf80 	.word	0x0000bf80

08018658 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b084      	sub	sp, #16
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018660:	4b09      	ldr	r3, [pc, #36]	@ (8018688 <USB_DisableGlobalInt+0x30>)
 8018662:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	2240      	movs	r2, #64	@ 0x40
 8018668:	5a9b      	ldrh	r3, [r3, r2]
 801866a:	b29b      	uxth	r3, r3
 801866c:	68fa      	ldr	r2, [r7, #12]
 801866e:	b292      	uxth	r2, r2
 8018670:	43d2      	mvns	r2, r2
 8018672:	b292      	uxth	r2, r2
 8018674:	4013      	ands	r3, r2
 8018676:	b299      	uxth	r1, r3
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2240      	movs	r2, #64	@ 0x40
 801867c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801867e:	2300      	movs	r3, #0
}
 8018680:	0018      	movs	r0, r3
 8018682:	46bd      	mov	sp, r7
 8018684:	b004      	add	sp, #16
 8018686:	bd80      	pop	{r7, pc}
 8018688:	0000bf80 	.word	0x0000bf80

0801868c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801868c:	b084      	sub	sp, #16
 801868e:	b590      	push	{r4, r7, lr}
 8018690:	b083      	sub	sp, #12
 8018692:	af00      	add	r7, sp, #0
 8018694:	6078      	str	r0, [r7, #4]
 8018696:	2004      	movs	r0, #4
 8018698:	2410      	movs	r4, #16
 801869a:	1900      	adds	r0, r0, r4
 801869c:	2408      	movs	r4, #8
 801869e:	46a4      	mov	ip, r4
 80186a0:	44bc      	add	ip, r7
 80186a2:	4460      	add	r0, ip
 80186a4:	6001      	str	r1, [r0, #0]
 80186a6:	6042      	str	r2, [r0, #4]
 80186a8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	2240      	movs	r2, #64	@ 0x40
 80186ae:	2101      	movs	r1, #1
 80186b0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2240      	movs	r2, #64	@ 0x40
 80186b6:	2100      	movs	r1, #0
 80186b8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	2244      	movs	r2, #68	@ 0x44
 80186be:	2100      	movs	r1, #0
 80186c0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	2250      	movs	r2, #80	@ 0x50
 80186c6:	2100      	movs	r1, #0
 80186c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80186ca:	2300      	movs	r3, #0
}
 80186cc:	0018      	movs	r0, r3
 80186ce:	46bd      	mov	sp, r7
 80186d0:	b003      	add	sp, #12
 80186d2:	bc90      	pop	{r4, r7}
 80186d4:	bc08      	pop	{r3}
 80186d6:	b004      	add	sp, #16
 80186d8:	4718      	bx	r3
	...

080186dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b09c      	sub	sp, #112	@ 0x70
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
 80186e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80186e6:	236f      	movs	r3, #111	@ 0x6f
 80186e8:	18fb      	adds	r3, r7, r3
 80186ea:	2200      	movs	r2, #0
 80186ec:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80186ee:	687a      	ldr	r2, [r7, #4]
 80186f0:	683b      	ldr	r3, [r7, #0]
 80186f2:	781b      	ldrb	r3, [r3, #0]
 80186f4:	009b      	lsls	r3, r3, #2
 80186f6:	18d3      	adds	r3, r2, r3
 80186f8:	881b      	ldrh	r3, [r3, #0]
 80186fa:	b29a      	uxth	r2, r3
 80186fc:	236c      	movs	r3, #108	@ 0x6c
 80186fe:	18fb      	adds	r3, r7, r3
 8018700:	49a3      	ldr	r1, [pc, #652]	@ (8018990 <USB_ActivateEndpoint+0x2b4>)
 8018702:	400a      	ands	r2, r1
 8018704:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8018706:	683b      	ldr	r3, [r7, #0]
 8018708:	78db      	ldrb	r3, [r3, #3]
 801870a:	2b03      	cmp	r3, #3
 801870c:	d017      	beq.n	801873e <USB_ActivateEndpoint+0x62>
 801870e:	dc28      	bgt.n	8018762 <USB_ActivateEndpoint+0x86>
 8018710:	2b02      	cmp	r3, #2
 8018712:	d00e      	beq.n	8018732 <USB_ActivateEndpoint+0x56>
 8018714:	dc25      	bgt.n	8018762 <USB_ActivateEndpoint+0x86>
 8018716:	2b00      	cmp	r3, #0
 8018718:	d002      	beq.n	8018720 <USB_ActivateEndpoint+0x44>
 801871a:	2b01      	cmp	r3, #1
 801871c:	d018      	beq.n	8018750 <USB_ActivateEndpoint+0x74>
 801871e:	e020      	b.n	8018762 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8018720:	226c      	movs	r2, #108	@ 0x6c
 8018722:	18bb      	adds	r3, r7, r2
 8018724:	18ba      	adds	r2, r7, r2
 8018726:	8812      	ldrh	r2, [r2, #0]
 8018728:	2180      	movs	r1, #128	@ 0x80
 801872a:	0089      	lsls	r1, r1, #2
 801872c:	430a      	orrs	r2, r1
 801872e:	801a      	strh	r2, [r3, #0]
      break;
 8018730:	e01c      	b.n	801876c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8018732:	226c      	movs	r2, #108	@ 0x6c
 8018734:	18bb      	adds	r3, r7, r2
 8018736:	18ba      	adds	r2, r7, r2
 8018738:	8812      	ldrh	r2, [r2, #0]
 801873a:	801a      	strh	r2, [r3, #0]
      break;
 801873c:	e016      	b.n	801876c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801873e:	226c      	movs	r2, #108	@ 0x6c
 8018740:	18bb      	adds	r3, r7, r2
 8018742:	18ba      	adds	r2, r7, r2
 8018744:	8812      	ldrh	r2, [r2, #0]
 8018746:	21c0      	movs	r1, #192	@ 0xc0
 8018748:	00c9      	lsls	r1, r1, #3
 801874a:	430a      	orrs	r2, r1
 801874c:	801a      	strh	r2, [r3, #0]
      break;
 801874e:	e00d      	b.n	801876c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8018750:	226c      	movs	r2, #108	@ 0x6c
 8018752:	18bb      	adds	r3, r7, r2
 8018754:	18ba      	adds	r2, r7, r2
 8018756:	8812      	ldrh	r2, [r2, #0]
 8018758:	2180      	movs	r1, #128	@ 0x80
 801875a:	00c9      	lsls	r1, r1, #3
 801875c:	430a      	orrs	r2, r1
 801875e:	801a      	strh	r2, [r3, #0]
      break;
 8018760:	e004      	b.n	801876c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8018762:	236f      	movs	r3, #111	@ 0x6f
 8018764:	18fb      	adds	r3, r7, r3
 8018766:	2201      	movs	r2, #1
 8018768:	701a      	strb	r2, [r3, #0]
      break;
 801876a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	781b      	ldrb	r3, [r3, #0]
 8018772:	009b      	lsls	r3, r3, #2
 8018774:	18d3      	adds	r3, r2, r3
 8018776:	226c      	movs	r2, #108	@ 0x6c
 8018778:	18ba      	adds	r2, r7, r2
 801877a:	8812      	ldrh	r2, [r2, #0]
 801877c:	4985      	ldr	r1, [pc, #532]	@ (8018994 <USB_ActivateEndpoint+0x2b8>)
 801877e:	430a      	orrs	r2, r1
 8018780:	b292      	uxth	r2, r2
 8018782:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8018784:	687a      	ldr	r2, [r7, #4]
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	781b      	ldrb	r3, [r3, #0]
 801878a:	009b      	lsls	r3, r3, #2
 801878c:	18d3      	adds	r3, r2, r3
 801878e:	881b      	ldrh	r3, [r3, #0]
 8018790:	b29b      	uxth	r3, r3
 8018792:	b21b      	sxth	r3, r3
 8018794:	4a80      	ldr	r2, [pc, #512]	@ (8018998 <USB_ActivateEndpoint+0x2bc>)
 8018796:	4013      	ands	r3, r2
 8018798:	b21a      	sxth	r2, r3
 801879a:	683b      	ldr	r3, [r7, #0]
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	b21b      	sxth	r3, r3
 80187a0:	4313      	orrs	r3, r2
 80187a2:	b21a      	sxth	r2, r3
 80187a4:	2166      	movs	r1, #102	@ 0x66
 80187a6:	187b      	adds	r3, r7, r1
 80187a8:	801a      	strh	r2, [r3, #0]
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	009b      	lsls	r3, r3, #2
 80187b2:	18d3      	adds	r3, r2, r3
 80187b4:	187a      	adds	r2, r7, r1
 80187b6:	8812      	ldrh	r2, [r2, #0]
 80187b8:	4976      	ldr	r1, [pc, #472]	@ (8018994 <USB_ActivateEndpoint+0x2b8>)
 80187ba:	430a      	orrs	r2, r1
 80187bc:	b292      	uxth	r2, r2
 80187be:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	7b1b      	ldrb	r3, [r3, #12]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d000      	beq.n	80187ca <USB_ActivateEndpoint+0xee>
 80187c8:	e178      	b.n	8018abc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	785b      	ldrb	r3, [r3, #1]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d100      	bne.n	80187d4 <USB_ActivateEndpoint+0xf8>
 80187d2:	e07a      	b.n	80188ca <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	61bb      	str	r3, [r7, #24]
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2250      	movs	r2, #80	@ 0x50
 80187dc:	5a9b      	ldrh	r3, [r3, r2]
 80187de:	b29b      	uxth	r3, r3
 80187e0:	001a      	movs	r2, r3
 80187e2:	69bb      	ldr	r3, [r7, #24]
 80187e4:	189b      	adds	r3, r3, r2
 80187e6:	61bb      	str	r3, [r7, #24]
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	00da      	lsls	r2, r3, #3
 80187ee:	69bb      	ldr	r3, [r7, #24]
 80187f0:	18d3      	adds	r3, r2, r3
 80187f2:	2280      	movs	r2, #128	@ 0x80
 80187f4:	00d2      	lsls	r2, r2, #3
 80187f6:	4694      	mov	ip, r2
 80187f8:	4463      	add	r3, ip
 80187fa:	617b      	str	r3, [r7, #20]
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	88db      	ldrh	r3, [r3, #6]
 8018800:	085b      	lsrs	r3, r3, #1
 8018802:	b29b      	uxth	r3, r3
 8018804:	18db      	adds	r3, r3, r3
 8018806:	b29a      	uxth	r2, r3
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801880c:	687a      	ldr	r2, [r7, #4]
 801880e:	683b      	ldr	r3, [r7, #0]
 8018810:	781b      	ldrb	r3, [r3, #0]
 8018812:	009b      	lsls	r3, r3, #2
 8018814:	18d2      	adds	r2, r2, r3
 8018816:	2112      	movs	r1, #18
 8018818:	187b      	adds	r3, r7, r1
 801881a:	8812      	ldrh	r2, [r2, #0]
 801881c:	801a      	strh	r2, [r3, #0]
 801881e:	187b      	adds	r3, r7, r1
 8018820:	881b      	ldrh	r3, [r3, #0]
 8018822:	2240      	movs	r2, #64	@ 0x40
 8018824:	4013      	ands	r3, r2
 8018826:	d016      	beq.n	8018856 <USB_ActivateEndpoint+0x17a>
 8018828:	687a      	ldr	r2, [r7, #4]
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	009b      	lsls	r3, r3, #2
 8018830:	18d3      	adds	r3, r2, r3
 8018832:	881b      	ldrh	r3, [r3, #0]
 8018834:	b29a      	uxth	r2, r3
 8018836:	2010      	movs	r0, #16
 8018838:	183b      	adds	r3, r7, r0
 801883a:	4957      	ldr	r1, [pc, #348]	@ (8018998 <USB_ActivateEndpoint+0x2bc>)
 801883c:	400a      	ands	r2, r1
 801883e:	801a      	strh	r2, [r3, #0]
 8018840:	687a      	ldr	r2, [r7, #4]
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	781b      	ldrb	r3, [r3, #0]
 8018846:	009b      	lsls	r3, r3, #2
 8018848:	18d3      	adds	r3, r2, r3
 801884a:	183a      	adds	r2, r7, r0
 801884c:	8812      	ldrh	r2, [r2, #0]
 801884e:	4953      	ldr	r1, [pc, #332]	@ (801899c <USB_ActivateEndpoint+0x2c0>)
 8018850:	430a      	orrs	r2, r1
 8018852:	b292      	uxth	r2, r2
 8018854:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	78db      	ldrb	r3, [r3, #3]
 801885a:	2b01      	cmp	r3, #1
 801885c:	d01d      	beq.n	801889a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801885e:	687a      	ldr	r2, [r7, #4]
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	781b      	ldrb	r3, [r3, #0]
 8018864:	009b      	lsls	r3, r3, #2
 8018866:	18d3      	adds	r3, r2, r3
 8018868:	881b      	ldrh	r3, [r3, #0]
 801886a:	b29a      	uxth	r2, r3
 801886c:	200c      	movs	r0, #12
 801886e:	183b      	adds	r3, r7, r0
 8018870:	494b      	ldr	r1, [pc, #300]	@ (80189a0 <USB_ActivateEndpoint+0x2c4>)
 8018872:	400a      	ands	r2, r1
 8018874:	801a      	strh	r2, [r3, #0]
 8018876:	183b      	adds	r3, r7, r0
 8018878:	183a      	adds	r2, r7, r0
 801887a:	8812      	ldrh	r2, [r2, #0]
 801887c:	2120      	movs	r1, #32
 801887e:	404a      	eors	r2, r1
 8018880:	801a      	strh	r2, [r3, #0]
 8018882:	687a      	ldr	r2, [r7, #4]
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	781b      	ldrb	r3, [r3, #0]
 8018888:	009b      	lsls	r3, r3, #2
 801888a:	18d3      	adds	r3, r2, r3
 801888c:	183a      	adds	r2, r7, r0
 801888e:	8812      	ldrh	r2, [r2, #0]
 8018890:	4940      	ldr	r1, [pc, #256]	@ (8018994 <USB_ActivateEndpoint+0x2b8>)
 8018892:	430a      	orrs	r2, r1
 8018894:	b292      	uxth	r2, r2
 8018896:	801a      	strh	r2, [r3, #0]
 8018898:	e2b4      	b.n	8018e04 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801889a:	687a      	ldr	r2, [r7, #4]
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	781b      	ldrb	r3, [r3, #0]
 80188a0:	009b      	lsls	r3, r3, #2
 80188a2:	18d3      	adds	r3, r2, r3
 80188a4:	881b      	ldrh	r3, [r3, #0]
 80188a6:	b29a      	uxth	r2, r3
 80188a8:	200e      	movs	r0, #14
 80188aa:	183b      	adds	r3, r7, r0
 80188ac:	493c      	ldr	r1, [pc, #240]	@ (80189a0 <USB_ActivateEndpoint+0x2c4>)
 80188ae:	400a      	ands	r2, r1
 80188b0:	801a      	strh	r2, [r3, #0]
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	009b      	lsls	r3, r3, #2
 80188ba:	18d3      	adds	r3, r2, r3
 80188bc:	183a      	adds	r2, r7, r0
 80188be:	8812      	ldrh	r2, [r2, #0]
 80188c0:	4934      	ldr	r1, [pc, #208]	@ (8018994 <USB_ActivateEndpoint+0x2b8>)
 80188c2:	430a      	orrs	r2, r1
 80188c4:	b292      	uxth	r2, r2
 80188c6:	801a      	strh	r2, [r3, #0]
 80188c8:	e29c      	b.n	8018e04 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	2250      	movs	r2, #80	@ 0x50
 80188d2:	5a9b      	ldrh	r3, [r3, r2]
 80188d4:	b29b      	uxth	r3, r3
 80188d6:	001a      	movs	r2, r3
 80188d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188da:	189b      	adds	r3, r3, r2
 80188dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80188de:	683b      	ldr	r3, [r7, #0]
 80188e0:	781b      	ldrb	r3, [r3, #0]
 80188e2:	00da      	lsls	r2, r3, #3
 80188e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188e6:	18d3      	adds	r3, r2, r3
 80188e8:	4a2e      	ldr	r2, [pc, #184]	@ (80189a4 <USB_ActivateEndpoint+0x2c8>)
 80188ea:	4694      	mov	ip, r2
 80188ec:	4463      	add	r3, ip
 80188ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	88db      	ldrh	r3, [r3, #6]
 80188f4:	085b      	lsrs	r3, r3, #1
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	18db      	adds	r3, r3, r3
 80188fa:	b29a      	uxth	r2, r3
 80188fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2250      	movs	r2, #80	@ 0x50
 8018908:	5a9b      	ldrh	r3, [r3, r2]
 801890a:	b29b      	uxth	r3, r3
 801890c:	001a      	movs	r2, r3
 801890e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018910:	189b      	adds	r3, r3, r2
 8018912:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	781b      	ldrb	r3, [r3, #0]
 8018918:	00da      	lsls	r2, r3, #3
 801891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801891c:	18d3      	adds	r3, r2, r3
 801891e:	4a22      	ldr	r2, [pc, #136]	@ (80189a8 <USB_ActivateEndpoint+0x2cc>)
 8018920:	4694      	mov	ip, r2
 8018922:	4463      	add	r3, ip
 8018924:	627b      	str	r3, [r7, #36]	@ 0x24
 8018926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018928:	881b      	ldrh	r3, [r3, #0]
 801892a:	b29b      	uxth	r3, r3
 801892c:	059b      	lsls	r3, r3, #22
 801892e:	0d9b      	lsrs	r3, r3, #22
 8018930:	b29a      	uxth	r2, r3
 8018932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018934:	801a      	strh	r2, [r3, #0]
 8018936:	683b      	ldr	r3, [r7, #0]
 8018938:	691b      	ldr	r3, [r3, #16]
 801893a:	2b3e      	cmp	r3, #62	@ 0x3e
 801893c:	d91a      	bls.n	8018974 <USB_ActivateEndpoint+0x298>
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	691b      	ldr	r3, [r3, #16]
 8018942:	095b      	lsrs	r3, r3, #5
 8018944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	691b      	ldr	r3, [r3, #16]
 801894a:	221f      	movs	r2, #31
 801894c:	4013      	ands	r3, r2
 801894e:	d102      	bne.n	8018956 <USB_ActivateEndpoint+0x27a>
 8018950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018952:	3b01      	subs	r3, #1
 8018954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018958:	881b      	ldrh	r3, [r3, #0]
 801895a:	b29a      	uxth	r2, r3
 801895c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801895e:	b29b      	uxth	r3, r3
 8018960:	029b      	lsls	r3, r3, #10
 8018962:	b29b      	uxth	r3, r3
 8018964:	4313      	orrs	r3, r2
 8018966:	b29b      	uxth	r3, r3
 8018968:	4a10      	ldr	r2, [pc, #64]	@ (80189ac <USB_ActivateEndpoint+0x2d0>)
 801896a:	4313      	orrs	r3, r2
 801896c:	b29a      	uxth	r2, r3
 801896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018970:	801a      	strh	r2, [r3, #0]
 8018972:	e034      	b.n	80189de <USB_ActivateEndpoint+0x302>
 8018974:	683b      	ldr	r3, [r7, #0]
 8018976:	691b      	ldr	r3, [r3, #16]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d119      	bne.n	80189b0 <USB_ActivateEndpoint+0x2d4>
 801897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801897e:	881b      	ldrh	r3, [r3, #0]
 8018980:	b29b      	uxth	r3, r3
 8018982:	4a0a      	ldr	r2, [pc, #40]	@ (80189ac <USB_ActivateEndpoint+0x2d0>)
 8018984:	4313      	orrs	r3, r2
 8018986:	b29a      	uxth	r2, r3
 8018988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801898a:	801a      	strh	r2, [r3, #0]
 801898c:	e027      	b.n	80189de <USB_ActivateEndpoint+0x302>
 801898e:	46c0      	nop			@ (mov r8, r8)
 8018990:	ffff898f 	.word	0xffff898f
 8018994:	ffff8080 	.word	0xffff8080
 8018998:	ffff8f8f 	.word	0xffff8f8f
 801899c:	ffff80c0 	.word	0xffff80c0
 80189a0:	ffff8fbf 	.word	0xffff8fbf
 80189a4:	00000404 	.word	0x00000404
 80189a8:	00000406 	.word	0x00000406
 80189ac:	ffff8000 	.word	0xffff8000
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	691b      	ldr	r3, [r3, #16]
 80189b4:	085b      	lsrs	r3, r3, #1
 80189b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80189b8:	683b      	ldr	r3, [r7, #0]
 80189ba:	691b      	ldr	r3, [r3, #16]
 80189bc:	2201      	movs	r2, #1
 80189be:	4013      	ands	r3, r2
 80189c0:	d002      	beq.n	80189c8 <USB_ActivateEndpoint+0x2ec>
 80189c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80189c4:	3301      	adds	r3, #1
 80189c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80189c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189ca:	881b      	ldrh	r3, [r3, #0]
 80189cc:	b29a      	uxth	r2, r3
 80189ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80189d0:	b29b      	uxth	r3, r3
 80189d2:	029b      	lsls	r3, r3, #10
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	4313      	orrs	r3, r2
 80189d8:	b29a      	uxth	r2, r3
 80189da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80189de:	687a      	ldr	r2, [r7, #4]
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	009b      	lsls	r3, r3, #2
 80189e6:	18d2      	adds	r2, r2, r3
 80189e8:	2122      	movs	r1, #34	@ 0x22
 80189ea:	187b      	adds	r3, r7, r1
 80189ec:	8812      	ldrh	r2, [r2, #0]
 80189ee:	801a      	strh	r2, [r3, #0]
 80189f0:	187b      	adds	r3, r7, r1
 80189f2:	881a      	ldrh	r2, [r3, #0]
 80189f4:	2380      	movs	r3, #128	@ 0x80
 80189f6:	01db      	lsls	r3, r3, #7
 80189f8:	4013      	ands	r3, r2
 80189fa:	d016      	beq.n	8018a2a <USB_ActivateEndpoint+0x34e>
 80189fc:	687a      	ldr	r2, [r7, #4]
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	781b      	ldrb	r3, [r3, #0]
 8018a02:	009b      	lsls	r3, r3, #2
 8018a04:	18d3      	adds	r3, r2, r3
 8018a06:	881b      	ldrh	r3, [r3, #0]
 8018a08:	b29a      	uxth	r2, r3
 8018a0a:	2020      	movs	r0, #32
 8018a0c:	183b      	adds	r3, r7, r0
 8018a0e:	49dd      	ldr	r1, [pc, #884]	@ (8018d84 <USB_ActivateEndpoint+0x6a8>)
 8018a10:	400a      	ands	r2, r1
 8018a12:	801a      	strh	r2, [r3, #0]
 8018a14:	687a      	ldr	r2, [r7, #4]
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	781b      	ldrb	r3, [r3, #0]
 8018a1a:	009b      	lsls	r3, r3, #2
 8018a1c:	18d3      	adds	r3, r2, r3
 8018a1e:	183a      	adds	r2, r7, r0
 8018a20:	8812      	ldrh	r2, [r2, #0]
 8018a22:	49d9      	ldr	r1, [pc, #868]	@ (8018d88 <USB_ActivateEndpoint+0x6ac>)
 8018a24:	430a      	orrs	r2, r1
 8018a26:	b292      	uxth	r2, r2
 8018a28:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d125      	bne.n	8018a7e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018a32:	687a      	ldr	r2, [r7, #4]
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	781b      	ldrb	r3, [r3, #0]
 8018a38:	009b      	lsls	r3, r3, #2
 8018a3a:	18d3      	adds	r3, r2, r3
 8018a3c:	881b      	ldrh	r3, [r3, #0]
 8018a3e:	b29a      	uxth	r2, r3
 8018a40:	201c      	movs	r0, #28
 8018a42:	183b      	adds	r3, r7, r0
 8018a44:	49d1      	ldr	r1, [pc, #836]	@ (8018d8c <USB_ActivateEndpoint+0x6b0>)
 8018a46:	400a      	ands	r2, r1
 8018a48:	801a      	strh	r2, [r3, #0]
 8018a4a:	183b      	adds	r3, r7, r0
 8018a4c:	183a      	adds	r2, r7, r0
 8018a4e:	8812      	ldrh	r2, [r2, #0]
 8018a50:	2180      	movs	r1, #128	@ 0x80
 8018a52:	0149      	lsls	r1, r1, #5
 8018a54:	404a      	eors	r2, r1
 8018a56:	801a      	strh	r2, [r3, #0]
 8018a58:	183b      	adds	r3, r7, r0
 8018a5a:	183a      	adds	r2, r7, r0
 8018a5c:	8812      	ldrh	r2, [r2, #0]
 8018a5e:	2180      	movs	r1, #128	@ 0x80
 8018a60:	0189      	lsls	r1, r1, #6
 8018a62:	404a      	eors	r2, r1
 8018a64:	801a      	strh	r2, [r3, #0]
 8018a66:	687a      	ldr	r2, [r7, #4]
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	781b      	ldrb	r3, [r3, #0]
 8018a6c:	009b      	lsls	r3, r3, #2
 8018a6e:	18d3      	adds	r3, r2, r3
 8018a70:	183a      	adds	r2, r7, r0
 8018a72:	8812      	ldrh	r2, [r2, #0]
 8018a74:	49c6      	ldr	r1, [pc, #792]	@ (8018d90 <USB_ActivateEndpoint+0x6b4>)
 8018a76:	430a      	orrs	r2, r1
 8018a78:	b292      	uxth	r2, r2
 8018a7a:	801a      	strh	r2, [r3, #0]
 8018a7c:	e1c2      	b.n	8018e04 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8018a7e:	687a      	ldr	r2, [r7, #4]
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	781b      	ldrb	r3, [r3, #0]
 8018a84:	009b      	lsls	r3, r3, #2
 8018a86:	18d3      	adds	r3, r2, r3
 8018a88:	881b      	ldrh	r3, [r3, #0]
 8018a8a:	b29a      	uxth	r2, r3
 8018a8c:	201e      	movs	r0, #30
 8018a8e:	183b      	adds	r3, r7, r0
 8018a90:	49be      	ldr	r1, [pc, #760]	@ (8018d8c <USB_ActivateEndpoint+0x6b0>)
 8018a92:	400a      	ands	r2, r1
 8018a94:	801a      	strh	r2, [r3, #0]
 8018a96:	183b      	adds	r3, r7, r0
 8018a98:	183a      	adds	r2, r7, r0
 8018a9a:	8812      	ldrh	r2, [r2, #0]
 8018a9c:	2180      	movs	r1, #128	@ 0x80
 8018a9e:	0189      	lsls	r1, r1, #6
 8018aa0:	404a      	eors	r2, r1
 8018aa2:	801a      	strh	r2, [r3, #0]
 8018aa4:	687a      	ldr	r2, [r7, #4]
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	18d3      	adds	r3, r2, r3
 8018aae:	183a      	adds	r2, r7, r0
 8018ab0:	8812      	ldrh	r2, [r2, #0]
 8018ab2:	49b7      	ldr	r1, [pc, #732]	@ (8018d90 <USB_ActivateEndpoint+0x6b4>)
 8018ab4:	430a      	orrs	r2, r1
 8018ab6:	b292      	uxth	r2, r2
 8018ab8:	801a      	strh	r2, [r3, #0]
 8018aba:	e1a3      	b.n	8018e04 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	78db      	ldrb	r3, [r3, #3]
 8018ac0:	2b02      	cmp	r3, #2
 8018ac2:	d117      	bne.n	8018af4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018ac4:	687a      	ldr	r2, [r7, #4]
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	781b      	ldrb	r3, [r3, #0]
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	18d3      	adds	r3, r2, r3
 8018ace:	881b      	ldrh	r3, [r3, #0]
 8018ad0:	b29a      	uxth	r2, r3
 8018ad2:	2062      	movs	r0, #98	@ 0x62
 8018ad4:	183b      	adds	r3, r7, r0
 8018ad6:	49ab      	ldr	r1, [pc, #684]	@ (8018d84 <USB_ActivateEndpoint+0x6a8>)
 8018ad8:	400a      	ands	r2, r1
 8018ada:	801a      	strh	r2, [r3, #0]
 8018adc:	687a      	ldr	r2, [r7, #4]
 8018ade:	683b      	ldr	r3, [r7, #0]
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	009b      	lsls	r3, r3, #2
 8018ae4:	18d3      	adds	r3, r2, r3
 8018ae6:	183a      	adds	r2, r7, r0
 8018ae8:	8812      	ldrh	r2, [r2, #0]
 8018aea:	49aa      	ldr	r1, [pc, #680]	@ (8018d94 <USB_ActivateEndpoint+0x6b8>)
 8018aec:	430a      	orrs	r2, r1
 8018aee:	b292      	uxth	r2, r2
 8018af0:	801a      	strh	r2, [r3, #0]
 8018af2:	e016      	b.n	8018b22 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8018af4:	687a      	ldr	r2, [r7, #4]
 8018af6:	683b      	ldr	r3, [r7, #0]
 8018af8:	781b      	ldrb	r3, [r3, #0]
 8018afa:	009b      	lsls	r3, r3, #2
 8018afc:	18d3      	adds	r3, r2, r3
 8018afe:	881b      	ldrh	r3, [r3, #0]
 8018b00:	b29a      	uxth	r2, r3
 8018b02:	2064      	movs	r0, #100	@ 0x64
 8018b04:	183b      	adds	r3, r7, r0
 8018b06:	49a4      	ldr	r1, [pc, #656]	@ (8018d98 <USB_ActivateEndpoint+0x6bc>)
 8018b08:	400a      	ands	r2, r1
 8018b0a:	801a      	strh	r2, [r3, #0]
 8018b0c:	687a      	ldr	r2, [r7, #4]
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	009b      	lsls	r3, r3, #2
 8018b14:	18d3      	adds	r3, r2, r3
 8018b16:	183a      	adds	r2, r7, r0
 8018b18:	8812      	ldrh	r2, [r2, #0]
 8018b1a:	499d      	ldr	r1, [pc, #628]	@ (8018d90 <USB_ActivateEndpoint+0x6b4>)
 8018b1c:	430a      	orrs	r2, r1
 8018b1e:	b292      	uxth	r2, r2
 8018b20:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	2250      	movs	r2, #80	@ 0x50
 8018b2a:	5a9b      	ldrh	r3, [r3, r2]
 8018b2c:	b29b      	uxth	r3, r3
 8018b2e:	001a      	movs	r2, r3
 8018b30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018b32:	189b      	adds	r3, r3, r2
 8018b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018b36:	683b      	ldr	r3, [r7, #0]
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	00da      	lsls	r2, r3, #3
 8018b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018b3e:	18d3      	adds	r3, r2, r3
 8018b40:	2280      	movs	r2, #128	@ 0x80
 8018b42:	00d2      	lsls	r2, r2, #3
 8018b44:	4694      	mov	ip, r2
 8018b46:	4463      	add	r3, ip
 8018b48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018b4a:	683b      	ldr	r3, [r7, #0]
 8018b4c:	891b      	ldrh	r3, [r3, #8]
 8018b4e:	085b      	lsrs	r3, r3, #1
 8018b50:	b29b      	uxth	r3, r3
 8018b52:	18db      	adds	r3, r3, r3
 8018b54:	b29a      	uxth	r2, r3
 8018b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018b58:	801a      	strh	r2, [r3, #0]
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	2250      	movs	r2, #80	@ 0x50
 8018b62:	5a9b      	ldrh	r3, [r3, r2]
 8018b64:	b29b      	uxth	r3, r3
 8018b66:	001a      	movs	r2, r3
 8018b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b6a:	189b      	adds	r3, r3, r2
 8018b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8018b6e:	683b      	ldr	r3, [r7, #0]
 8018b70:	781b      	ldrb	r3, [r3, #0]
 8018b72:	00da      	lsls	r2, r3, #3
 8018b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b76:	18d3      	adds	r3, r2, r3
 8018b78:	4a88      	ldr	r2, [pc, #544]	@ (8018d9c <USB_ActivateEndpoint+0x6c0>)
 8018b7a:	4694      	mov	ip, r2
 8018b7c:	4463      	add	r3, ip
 8018b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018b80:	683b      	ldr	r3, [r7, #0]
 8018b82:	895b      	ldrh	r3, [r3, #10]
 8018b84:	085b      	lsrs	r3, r3, #1
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	18db      	adds	r3, r3, r3
 8018b8a:	b29a      	uxth	r2, r3
 8018b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018b90:	683b      	ldr	r3, [r7, #0]
 8018b92:	785b      	ldrb	r3, [r3, #1]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d000      	beq.n	8018b9a <USB_ActivateEndpoint+0x4be>
 8018b98:	e087      	b.n	8018caa <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018b9a:	687a      	ldr	r2, [r7, #4]
 8018b9c:	683b      	ldr	r3, [r7, #0]
 8018b9e:	781b      	ldrb	r3, [r3, #0]
 8018ba0:	009b      	lsls	r3, r3, #2
 8018ba2:	18d2      	adds	r2, r2, r3
 8018ba4:	2140      	movs	r1, #64	@ 0x40
 8018ba6:	187b      	adds	r3, r7, r1
 8018ba8:	8812      	ldrh	r2, [r2, #0]
 8018baa:	801a      	strh	r2, [r3, #0]
 8018bac:	187b      	adds	r3, r7, r1
 8018bae:	881a      	ldrh	r2, [r3, #0]
 8018bb0:	2380      	movs	r3, #128	@ 0x80
 8018bb2:	01db      	lsls	r3, r3, #7
 8018bb4:	4013      	ands	r3, r2
 8018bb6:	d016      	beq.n	8018be6 <USB_ActivateEndpoint+0x50a>
 8018bb8:	687a      	ldr	r2, [r7, #4]
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	18d3      	adds	r3, r2, r3
 8018bc2:	881b      	ldrh	r3, [r3, #0]
 8018bc4:	b29a      	uxth	r2, r3
 8018bc6:	203e      	movs	r0, #62	@ 0x3e
 8018bc8:	183b      	adds	r3, r7, r0
 8018bca:	496e      	ldr	r1, [pc, #440]	@ (8018d84 <USB_ActivateEndpoint+0x6a8>)
 8018bcc:	400a      	ands	r2, r1
 8018bce:	801a      	strh	r2, [r3, #0]
 8018bd0:	687a      	ldr	r2, [r7, #4]
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	781b      	ldrb	r3, [r3, #0]
 8018bd6:	009b      	lsls	r3, r3, #2
 8018bd8:	18d3      	adds	r3, r2, r3
 8018bda:	183a      	adds	r2, r7, r0
 8018bdc:	8812      	ldrh	r2, [r2, #0]
 8018bde:	496a      	ldr	r1, [pc, #424]	@ (8018d88 <USB_ActivateEndpoint+0x6ac>)
 8018be0:	430a      	orrs	r2, r1
 8018be2:	b292      	uxth	r2, r2
 8018be4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018be6:	687a      	ldr	r2, [r7, #4]
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	009b      	lsls	r3, r3, #2
 8018bee:	18d2      	adds	r2, r2, r3
 8018bf0:	213c      	movs	r1, #60	@ 0x3c
 8018bf2:	187b      	adds	r3, r7, r1
 8018bf4:	8812      	ldrh	r2, [r2, #0]
 8018bf6:	801a      	strh	r2, [r3, #0]
 8018bf8:	187b      	adds	r3, r7, r1
 8018bfa:	881b      	ldrh	r3, [r3, #0]
 8018bfc:	2240      	movs	r2, #64	@ 0x40
 8018bfe:	4013      	ands	r3, r2
 8018c00:	d016      	beq.n	8018c30 <USB_ActivateEndpoint+0x554>
 8018c02:	687a      	ldr	r2, [r7, #4]
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	781b      	ldrb	r3, [r3, #0]
 8018c08:	009b      	lsls	r3, r3, #2
 8018c0a:	18d3      	adds	r3, r2, r3
 8018c0c:	881b      	ldrh	r3, [r3, #0]
 8018c0e:	b29a      	uxth	r2, r3
 8018c10:	203a      	movs	r0, #58	@ 0x3a
 8018c12:	183b      	adds	r3, r7, r0
 8018c14:	495b      	ldr	r1, [pc, #364]	@ (8018d84 <USB_ActivateEndpoint+0x6a8>)
 8018c16:	400a      	ands	r2, r1
 8018c18:	801a      	strh	r2, [r3, #0]
 8018c1a:	687a      	ldr	r2, [r7, #4]
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	009b      	lsls	r3, r3, #2
 8018c22:	18d3      	adds	r3, r2, r3
 8018c24:	183a      	adds	r2, r7, r0
 8018c26:	8812      	ldrh	r2, [r2, #0]
 8018c28:	495d      	ldr	r1, [pc, #372]	@ (8018da0 <USB_ActivateEndpoint+0x6c4>)
 8018c2a:	430a      	orrs	r2, r1
 8018c2c:	b292      	uxth	r2, r2
 8018c2e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018c30:	687a      	ldr	r2, [r7, #4]
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	781b      	ldrb	r3, [r3, #0]
 8018c36:	009b      	lsls	r3, r3, #2
 8018c38:	18d3      	adds	r3, r2, r3
 8018c3a:	881b      	ldrh	r3, [r3, #0]
 8018c3c:	b29a      	uxth	r2, r3
 8018c3e:	2038      	movs	r0, #56	@ 0x38
 8018c40:	183b      	adds	r3, r7, r0
 8018c42:	4952      	ldr	r1, [pc, #328]	@ (8018d8c <USB_ActivateEndpoint+0x6b0>)
 8018c44:	400a      	ands	r2, r1
 8018c46:	801a      	strh	r2, [r3, #0]
 8018c48:	183b      	adds	r3, r7, r0
 8018c4a:	183a      	adds	r2, r7, r0
 8018c4c:	8812      	ldrh	r2, [r2, #0]
 8018c4e:	2180      	movs	r1, #128	@ 0x80
 8018c50:	0149      	lsls	r1, r1, #5
 8018c52:	404a      	eors	r2, r1
 8018c54:	801a      	strh	r2, [r3, #0]
 8018c56:	183b      	adds	r3, r7, r0
 8018c58:	183a      	adds	r2, r7, r0
 8018c5a:	8812      	ldrh	r2, [r2, #0]
 8018c5c:	2180      	movs	r1, #128	@ 0x80
 8018c5e:	0189      	lsls	r1, r1, #6
 8018c60:	404a      	eors	r2, r1
 8018c62:	801a      	strh	r2, [r3, #0]
 8018c64:	687a      	ldr	r2, [r7, #4]
 8018c66:	683b      	ldr	r3, [r7, #0]
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	009b      	lsls	r3, r3, #2
 8018c6c:	18d3      	adds	r3, r2, r3
 8018c6e:	183a      	adds	r2, r7, r0
 8018c70:	8812      	ldrh	r2, [r2, #0]
 8018c72:	4947      	ldr	r1, [pc, #284]	@ (8018d90 <USB_ActivateEndpoint+0x6b4>)
 8018c74:	430a      	orrs	r2, r1
 8018c76:	b292      	uxth	r2, r2
 8018c78:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018c7a:	687a      	ldr	r2, [r7, #4]
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	781b      	ldrb	r3, [r3, #0]
 8018c80:	009b      	lsls	r3, r3, #2
 8018c82:	18d3      	adds	r3, r2, r3
 8018c84:	881b      	ldrh	r3, [r3, #0]
 8018c86:	b29a      	uxth	r2, r3
 8018c88:	2036      	movs	r0, #54	@ 0x36
 8018c8a:	183b      	adds	r3, r7, r0
 8018c8c:	4945      	ldr	r1, [pc, #276]	@ (8018da4 <USB_ActivateEndpoint+0x6c8>)
 8018c8e:	400a      	ands	r2, r1
 8018c90:	801a      	strh	r2, [r3, #0]
 8018c92:	687a      	ldr	r2, [r7, #4]
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	781b      	ldrb	r3, [r3, #0]
 8018c98:	009b      	lsls	r3, r3, #2
 8018c9a:	18d3      	adds	r3, r2, r3
 8018c9c:	183a      	adds	r2, r7, r0
 8018c9e:	8812      	ldrh	r2, [r2, #0]
 8018ca0:	493b      	ldr	r1, [pc, #236]	@ (8018d90 <USB_ActivateEndpoint+0x6b4>)
 8018ca2:	430a      	orrs	r2, r1
 8018ca4:	b292      	uxth	r2, r2
 8018ca6:	801a      	strh	r2, [r3, #0]
 8018ca8:	e0ac      	b.n	8018e04 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018caa:	687a      	ldr	r2, [r7, #4]
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	781b      	ldrb	r3, [r3, #0]
 8018cb0:	009b      	lsls	r3, r3, #2
 8018cb2:	18d2      	adds	r2, r2, r3
 8018cb4:	214e      	movs	r1, #78	@ 0x4e
 8018cb6:	187b      	adds	r3, r7, r1
 8018cb8:	8812      	ldrh	r2, [r2, #0]
 8018cba:	801a      	strh	r2, [r3, #0]
 8018cbc:	187b      	adds	r3, r7, r1
 8018cbe:	881a      	ldrh	r2, [r3, #0]
 8018cc0:	2380      	movs	r3, #128	@ 0x80
 8018cc2:	01db      	lsls	r3, r3, #7
 8018cc4:	4013      	ands	r3, r2
 8018cc6:	d016      	beq.n	8018cf6 <USB_ActivateEndpoint+0x61a>
 8018cc8:	687a      	ldr	r2, [r7, #4]
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	009b      	lsls	r3, r3, #2
 8018cd0:	18d3      	adds	r3, r2, r3
 8018cd2:	881b      	ldrh	r3, [r3, #0]
 8018cd4:	b29a      	uxth	r2, r3
 8018cd6:	204c      	movs	r0, #76	@ 0x4c
 8018cd8:	183b      	adds	r3, r7, r0
 8018cda:	492a      	ldr	r1, [pc, #168]	@ (8018d84 <USB_ActivateEndpoint+0x6a8>)
 8018cdc:	400a      	ands	r2, r1
 8018cde:	801a      	strh	r2, [r3, #0]
 8018ce0:	687a      	ldr	r2, [r7, #4]
 8018ce2:	683b      	ldr	r3, [r7, #0]
 8018ce4:	781b      	ldrb	r3, [r3, #0]
 8018ce6:	009b      	lsls	r3, r3, #2
 8018ce8:	18d3      	adds	r3, r2, r3
 8018cea:	183a      	adds	r2, r7, r0
 8018cec:	8812      	ldrh	r2, [r2, #0]
 8018cee:	4926      	ldr	r1, [pc, #152]	@ (8018d88 <USB_ActivateEndpoint+0x6ac>)
 8018cf0:	430a      	orrs	r2, r1
 8018cf2:	b292      	uxth	r2, r2
 8018cf4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	781b      	ldrb	r3, [r3, #0]
 8018cfc:	009b      	lsls	r3, r3, #2
 8018cfe:	18d2      	adds	r2, r2, r3
 8018d00:	214a      	movs	r1, #74	@ 0x4a
 8018d02:	187b      	adds	r3, r7, r1
 8018d04:	8812      	ldrh	r2, [r2, #0]
 8018d06:	801a      	strh	r2, [r3, #0]
 8018d08:	187b      	adds	r3, r7, r1
 8018d0a:	881b      	ldrh	r3, [r3, #0]
 8018d0c:	2240      	movs	r2, #64	@ 0x40
 8018d0e:	4013      	ands	r3, r2
 8018d10:	d016      	beq.n	8018d40 <USB_ActivateEndpoint+0x664>
 8018d12:	687a      	ldr	r2, [r7, #4]
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	009b      	lsls	r3, r3, #2
 8018d1a:	18d3      	adds	r3, r2, r3
 8018d1c:	881b      	ldrh	r3, [r3, #0]
 8018d1e:	b29a      	uxth	r2, r3
 8018d20:	2048      	movs	r0, #72	@ 0x48
 8018d22:	183b      	adds	r3, r7, r0
 8018d24:	4917      	ldr	r1, [pc, #92]	@ (8018d84 <USB_ActivateEndpoint+0x6a8>)
 8018d26:	400a      	ands	r2, r1
 8018d28:	801a      	strh	r2, [r3, #0]
 8018d2a:	687a      	ldr	r2, [r7, #4]
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	781b      	ldrb	r3, [r3, #0]
 8018d30:	009b      	lsls	r3, r3, #2
 8018d32:	18d3      	adds	r3, r2, r3
 8018d34:	183a      	adds	r2, r7, r0
 8018d36:	8812      	ldrh	r2, [r2, #0]
 8018d38:	4919      	ldr	r1, [pc, #100]	@ (8018da0 <USB_ActivateEndpoint+0x6c4>)
 8018d3a:	430a      	orrs	r2, r1
 8018d3c:	b292      	uxth	r2, r2
 8018d3e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	78db      	ldrb	r3, [r3, #3]
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	d02f      	beq.n	8018da8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018d48:	687a      	ldr	r2, [r7, #4]
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	781b      	ldrb	r3, [r3, #0]
 8018d4e:	009b      	lsls	r3, r3, #2
 8018d50:	18d3      	adds	r3, r2, r3
 8018d52:	881b      	ldrh	r3, [r3, #0]
 8018d54:	b29a      	uxth	r2, r3
 8018d56:	2044      	movs	r0, #68	@ 0x44
 8018d58:	183b      	adds	r3, r7, r0
 8018d5a:	4912      	ldr	r1, [pc, #72]	@ (8018da4 <USB_ActivateEndpoint+0x6c8>)
 8018d5c:	400a      	ands	r2, r1
 8018d5e:	801a      	strh	r2, [r3, #0]
 8018d60:	183b      	adds	r3, r7, r0
 8018d62:	183a      	adds	r2, r7, r0
 8018d64:	8812      	ldrh	r2, [r2, #0]
 8018d66:	2120      	movs	r1, #32
 8018d68:	404a      	eors	r2, r1
 8018d6a:	801a      	strh	r2, [r3, #0]
 8018d6c:	687a      	ldr	r2, [r7, #4]
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	781b      	ldrb	r3, [r3, #0]
 8018d72:	009b      	lsls	r3, r3, #2
 8018d74:	18d3      	adds	r3, r2, r3
 8018d76:	183a      	adds	r2, r7, r0
 8018d78:	8812      	ldrh	r2, [r2, #0]
 8018d7a:	4905      	ldr	r1, [pc, #20]	@ (8018d90 <USB_ActivateEndpoint+0x6b4>)
 8018d7c:	430a      	orrs	r2, r1
 8018d7e:	b292      	uxth	r2, r2
 8018d80:	801a      	strh	r2, [r3, #0]
 8018d82:	e028      	b.n	8018dd6 <USB_ActivateEndpoint+0x6fa>
 8018d84:	ffff8f8f 	.word	0xffff8f8f
 8018d88:	ffffc080 	.word	0xffffc080
 8018d8c:	ffffbf8f 	.word	0xffffbf8f
 8018d90:	ffff8080 	.word	0xffff8080
 8018d94:	ffff8180 	.word	0xffff8180
 8018d98:	ffff8e8f 	.word	0xffff8e8f
 8018d9c:	00000404 	.word	0x00000404
 8018da0:	ffff80c0 	.word	0xffff80c0
 8018da4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018da8:	687a      	ldr	r2, [r7, #4]
 8018daa:	683b      	ldr	r3, [r7, #0]
 8018dac:	781b      	ldrb	r3, [r3, #0]
 8018dae:	009b      	lsls	r3, r3, #2
 8018db0:	18d3      	adds	r3, r2, r3
 8018db2:	881b      	ldrh	r3, [r3, #0]
 8018db4:	b29a      	uxth	r2, r3
 8018db6:	2046      	movs	r0, #70	@ 0x46
 8018db8:	183b      	adds	r3, r7, r0
 8018dba:	4916      	ldr	r1, [pc, #88]	@ (8018e14 <USB_ActivateEndpoint+0x738>)
 8018dbc:	400a      	ands	r2, r1
 8018dbe:	801a      	strh	r2, [r3, #0]
 8018dc0:	687a      	ldr	r2, [r7, #4]
 8018dc2:	683b      	ldr	r3, [r7, #0]
 8018dc4:	781b      	ldrb	r3, [r3, #0]
 8018dc6:	009b      	lsls	r3, r3, #2
 8018dc8:	18d3      	adds	r3, r2, r3
 8018dca:	183a      	adds	r2, r7, r0
 8018dcc:	8812      	ldrh	r2, [r2, #0]
 8018dce:	4912      	ldr	r1, [pc, #72]	@ (8018e18 <USB_ActivateEndpoint+0x73c>)
 8018dd0:	430a      	orrs	r2, r1
 8018dd2:	b292      	uxth	r2, r2
 8018dd4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018dd6:	687a      	ldr	r2, [r7, #4]
 8018dd8:	683b      	ldr	r3, [r7, #0]
 8018dda:	781b      	ldrb	r3, [r3, #0]
 8018ddc:	009b      	lsls	r3, r3, #2
 8018dde:	18d3      	adds	r3, r2, r3
 8018de0:	881b      	ldrh	r3, [r3, #0]
 8018de2:	b29a      	uxth	r2, r3
 8018de4:	2042      	movs	r0, #66	@ 0x42
 8018de6:	183b      	adds	r3, r7, r0
 8018de8:	490c      	ldr	r1, [pc, #48]	@ (8018e1c <USB_ActivateEndpoint+0x740>)
 8018dea:	400a      	ands	r2, r1
 8018dec:	801a      	strh	r2, [r3, #0]
 8018dee:	687a      	ldr	r2, [r7, #4]
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	781b      	ldrb	r3, [r3, #0]
 8018df4:	009b      	lsls	r3, r3, #2
 8018df6:	18d3      	adds	r3, r2, r3
 8018df8:	183a      	adds	r2, r7, r0
 8018dfa:	8812      	ldrh	r2, [r2, #0]
 8018dfc:	4906      	ldr	r1, [pc, #24]	@ (8018e18 <USB_ActivateEndpoint+0x73c>)
 8018dfe:	430a      	orrs	r2, r1
 8018e00:	b292      	uxth	r2, r2
 8018e02:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018e04:	236f      	movs	r3, #111	@ 0x6f
 8018e06:	18fb      	adds	r3, r7, r3
 8018e08:	781b      	ldrb	r3, [r3, #0]
}
 8018e0a:	0018      	movs	r0, r3
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	b01c      	add	sp, #112	@ 0x70
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	46c0      	nop			@ (mov r8, r8)
 8018e14:	ffff8fbf 	.word	0xffff8fbf
 8018e18:	ffff8080 	.word	0xffff8080
 8018e1c:	ffffbf8f 	.word	0xffffbf8f

08018e20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b08c      	sub	sp, #48	@ 0x30
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
 8018e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	7b1b      	ldrb	r3, [r3, #12]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d000      	beq.n	8018e34 <USB_DeactivateEndpoint+0x14>
 8018e32:	e07e      	b.n	8018f32 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8018e34:	683b      	ldr	r3, [r7, #0]
 8018e36:	785b      	ldrb	r3, [r3, #1]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d03c      	beq.n	8018eb6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018e3c:	687a      	ldr	r2, [r7, #4]
 8018e3e:	683b      	ldr	r3, [r7, #0]
 8018e40:	781b      	ldrb	r3, [r3, #0]
 8018e42:	009b      	lsls	r3, r3, #2
 8018e44:	18d2      	adds	r2, r2, r3
 8018e46:	210c      	movs	r1, #12
 8018e48:	187b      	adds	r3, r7, r1
 8018e4a:	8812      	ldrh	r2, [r2, #0]
 8018e4c:	801a      	strh	r2, [r3, #0]
 8018e4e:	187b      	adds	r3, r7, r1
 8018e50:	881b      	ldrh	r3, [r3, #0]
 8018e52:	2240      	movs	r2, #64	@ 0x40
 8018e54:	4013      	ands	r3, r2
 8018e56:	d016      	beq.n	8018e86 <USB_DeactivateEndpoint+0x66>
 8018e58:	687a      	ldr	r2, [r7, #4]
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	781b      	ldrb	r3, [r3, #0]
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	18d3      	adds	r3, r2, r3
 8018e62:	881b      	ldrh	r3, [r3, #0]
 8018e64:	b29a      	uxth	r2, r3
 8018e66:	200a      	movs	r0, #10
 8018e68:	183b      	adds	r3, r7, r0
 8018e6a:	49c7      	ldr	r1, [pc, #796]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 8018e6c:	400a      	ands	r2, r1
 8018e6e:	801a      	strh	r2, [r3, #0]
 8018e70:	687a      	ldr	r2, [r7, #4]
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	781b      	ldrb	r3, [r3, #0]
 8018e76:	009b      	lsls	r3, r3, #2
 8018e78:	18d3      	adds	r3, r2, r3
 8018e7a:	183a      	adds	r2, r7, r0
 8018e7c:	8812      	ldrh	r2, [r2, #0]
 8018e7e:	49c3      	ldr	r1, [pc, #780]	@ (801918c <USB_DeactivateEndpoint+0x36c>)
 8018e80:	430a      	orrs	r2, r1
 8018e82:	b292      	uxth	r2, r2
 8018e84:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018e86:	687a      	ldr	r2, [r7, #4]
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	781b      	ldrb	r3, [r3, #0]
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	18d3      	adds	r3, r2, r3
 8018e90:	881b      	ldrh	r3, [r3, #0]
 8018e92:	b29a      	uxth	r2, r3
 8018e94:	2008      	movs	r0, #8
 8018e96:	183b      	adds	r3, r7, r0
 8018e98:	49bd      	ldr	r1, [pc, #756]	@ (8019190 <USB_DeactivateEndpoint+0x370>)
 8018e9a:	400a      	ands	r2, r1
 8018e9c:	801a      	strh	r2, [r3, #0]
 8018e9e:	687a      	ldr	r2, [r7, #4]
 8018ea0:	683b      	ldr	r3, [r7, #0]
 8018ea2:	781b      	ldrb	r3, [r3, #0]
 8018ea4:	009b      	lsls	r3, r3, #2
 8018ea6:	18d3      	adds	r3, r2, r3
 8018ea8:	183a      	adds	r2, r7, r0
 8018eaa:	8812      	ldrh	r2, [r2, #0]
 8018eac:	49b9      	ldr	r1, [pc, #740]	@ (8019194 <USB_DeactivateEndpoint+0x374>)
 8018eae:	430a      	orrs	r2, r1
 8018eb0:	b292      	uxth	r2, r2
 8018eb2:	801a      	strh	r2, [r3, #0]
 8018eb4:	e163      	b.n	801917e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018eb6:	687a      	ldr	r2, [r7, #4]
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	781b      	ldrb	r3, [r3, #0]
 8018ebc:	009b      	lsls	r3, r3, #2
 8018ebe:	18d2      	adds	r2, r2, r3
 8018ec0:	2112      	movs	r1, #18
 8018ec2:	187b      	adds	r3, r7, r1
 8018ec4:	8812      	ldrh	r2, [r2, #0]
 8018ec6:	801a      	strh	r2, [r3, #0]
 8018ec8:	187b      	adds	r3, r7, r1
 8018eca:	881a      	ldrh	r2, [r3, #0]
 8018ecc:	2380      	movs	r3, #128	@ 0x80
 8018ece:	01db      	lsls	r3, r3, #7
 8018ed0:	4013      	ands	r3, r2
 8018ed2:	d016      	beq.n	8018f02 <USB_DeactivateEndpoint+0xe2>
 8018ed4:	687a      	ldr	r2, [r7, #4]
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	781b      	ldrb	r3, [r3, #0]
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	18d3      	adds	r3, r2, r3
 8018ede:	881b      	ldrh	r3, [r3, #0]
 8018ee0:	b29a      	uxth	r2, r3
 8018ee2:	2010      	movs	r0, #16
 8018ee4:	183b      	adds	r3, r7, r0
 8018ee6:	49a8      	ldr	r1, [pc, #672]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 8018ee8:	400a      	ands	r2, r1
 8018eea:	801a      	strh	r2, [r3, #0]
 8018eec:	687a      	ldr	r2, [r7, #4]
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	781b      	ldrb	r3, [r3, #0]
 8018ef2:	009b      	lsls	r3, r3, #2
 8018ef4:	18d3      	adds	r3, r2, r3
 8018ef6:	183a      	adds	r2, r7, r0
 8018ef8:	8812      	ldrh	r2, [r2, #0]
 8018efa:	49a7      	ldr	r1, [pc, #668]	@ (8019198 <USB_DeactivateEndpoint+0x378>)
 8018efc:	430a      	orrs	r2, r1
 8018efe:	b292      	uxth	r2, r2
 8018f00:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018f02:	687a      	ldr	r2, [r7, #4]
 8018f04:	683b      	ldr	r3, [r7, #0]
 8018f06:	781b      	ldrb	r3, [r3, #0]
 8018f08:	009b      	lsls	r3, r3, #2
 8018f0a:	18d3      	adds	r3, r2, r3
 8018f0c:	881b      	ldrh	r3, [r3, #0]
 8018f0e:	b29a      	uxth	r2, r3
 8018f10:	200e      	movs	r0, #14
 8018f12:	183b      	adds	r3, r7, r0
 8018f14:	49a1      	ldr	r1, [pc, #644]	@ (801919c <USB_DeactivateEndpoint+0x37c>)
 8018f16:	400a      	ands	r2, r1
 8018f18:	801a      	strh	r2, [r3, #0]
 8018f1a:	687a      	ldr	r2, [r7, #4]
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	781b      	ldrb	r3, [r3, #0]
 8018f20:	009b      	lsls	r3, r3, #2
 8018f22:	18d3      	adds	r3, r2, r3
 8018f24:	183a      	adds	r2, r7, r0
 8018f26:	8812      	ldrh	r2, [r2, #0]
 8018f28:	499a      	ldr	r1, [pc, #616]	@ (8019194 <USB_DeactivateEndpoint+0x374>)
 8018f2a:	430a      	orrs	r2, r1
 8018f2c:	b292      	uxth	r2, r2
 8018f2e:	801a      	strh	r2, [r3, #0]
 8018f30:	e125      	b.n	801917e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	785b      	ldrb	r3, [r3, #1]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d000      	beq.n	8018f3c <USB_DeactivateEndpoint+0x11c>
 8018f3a:	e090      	b.n	801905e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	683b      	ldr	r3, [r7, #0]
 8018f40:	781b      	ldrb	r3, [r3, #0]
 8018f42:	009b      	lsls	r3, r3, #2
 8018f44:	18d2      	adds	r2, r2, r3
 8018f46:	2120      	movs	r1, #32
 8018f48:	187b      	adds	r3, r7, r1
 8018f4a:	8812      	ldrh	r2, [r2, #0]
 8018f4c:	801a      	strh	r2, [r3, #0]
 8018f4e:	187b      	adds	r3, r7, r1
 8018f50:	881a      	ldrh	r2, [r3, #0]
 8018f52:	2380      	movs	r3, #128	@ 0x80
 8018f54:	01db      	lsls	r3, r3, #7
 8018f56:	4013      	ands	r3, r2
 8018f58:	d016      	beq.n	8018f88 <USB_DeactivateEndpoint+0x168>
 8018f5a:	687a      	ldr	r2, [r7, #4]
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	781b      	ldrb	r3, [r3, #0]
 8018f60:	009b      	lsls	r3, r3, #2
 8018f62:	18d3      	adds	r3, r2, r3
 8018f64:	881b      	ldrh	r3, [r3, #0]
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	201e      	movs	r0, #30
 8018f6a:	183b      	adds	r3, r7, r0
 8018f6c:	4986      	ldr	r1, [pc, #536]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 8018f6e:	400a      	ands	r2, r1
 8018f70:	801a      	strh	r2, [r3, #0]
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	009b      	lsls	r3, r3, #2
 8018f7a:	18d3      	adds	r3, r2, r3
 8018f7c:	183a      	adds	r2, r7, r0
 8018f7e:	8812      	ldrh	r2, [r2, #0]
 8018f80:	4985      	ldr	r1, [pc, #532]	@ (8019198 <USB_DeactivateEndpoint+0x378>)
 8018f82:	430a      	orrs	r2, r1
 8018f84:	b292      	uxth	r2, r2
 8018f86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018f88:	687a      	ldr	r2, [r7, #4]
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	781b      	ldrb	r3, [r3, #0]
 8018f8e:	009b      	lsls	r3, r3, #2
 8018f90:	18d2      	adds	r2, r2, r3
 8018f92:	211c      	movs	r1, #28
 8018f94:	187b      	adds	r3, r7, r1
 8018f96:	8812      	ldrh	r2, [r2, #0]
 8018f98:	801a      	strh	r2, [r3, #0]
 8018f9a:	187b      	adds	r3, r7, r1
 8018f9c:	881b      	ldrh	r3, [r3, #0]
 8018f9e:	2240      	movs	r2, #64	@ 0x40
 8018fa0:	4013      	ands	r3, r2
 8018fa2:	d016      	beq.n	8018fd2 <USB_DeactivateEndpoint+0x1b2>
 8018fa4:	687a      	ldr	r2, [r7, #4]
 8018fa6:	683b      	ldr	r3, [r7, #0]
 8018fa8:	781b      	ldrb	r3, [r3, #0]
 8018faa:	009b      	lsls	r3, r3, #2
 8018fac:	18d3      	adds	r3, r2, r3
 8018fae:	881b      	ldrh	r3, [r3, #0]
 8018fb0:	b29a      	uxth	r2, r3
 8018fb2:	201a      	movs	r0, #26
 8018fb4:	183b      	adds	r3, r7, r0
 8018fb6:	4974      	ldr	r1, [pc, #464]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 8018fb8:	400a      	ands	r2, r1
 8018fba:	801a      	strh	r2, [r3, #0]
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	683b      	ldr	r3, [r7, #0]
 8018fc0:	781b      	ldrb	r3, [r3, #0]
 8018fc2:	009b      	lsls	r3, r3, #2
 8018fc4:	18d3      	adds	r3, r2, r3
 8018fc6:	183a      	adds	r2, r7, r0
 8018fc8:	8812      	ldrh	r2, [r2, #0]
 8018fca:	4970      	ldr	r1, [pc, #448]	@ (801918c <USB_DeactivateEndpoint+0x36c>)
 8018fcc:	430a      	orrs	r2, r1
 8018fce:	b292      	uxth	r2, r2
 8018fd0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018fd2:	687a      	ldr	r2, [r7, #4]
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	781b      	ldrb	r3, [r3, #0]
 8018fd8:	009b      	lsls	r3, r3, #2
 8018fda:	18d3      	adds	r3, r2, r3
 8018fdc:	881b      	ldrh	r3, [r3, #0]
 8018fde:	b29a      	uxth	r2, r3
 8018fe0:	2018      	movs	r0, #24
 8018fe2:	183b      	adds	r3, r7, r0
 8018fe4:	4968      	ldr	r1, [pc, #416]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 8018fe6:	400a      	ands	r2, r1
 8018fe8:	801a      	strh	r2, [r3, #0]
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	009b      	lsls	r3, r3, #2
 8018ff2:	18d3      	adds	r3, r2, r3
 8018ff4:	183a      	adds	r2, r7, r0
 8018ff6:	8812      	ldrh	r2, [r2, #0]
 8018ff8:	4964      	ldr	r1, [pc, #400]	@ (801918c <USB_DeactivateEndpoint+0x36c>)
 8018ffa:	430a      	orrs	r2, r1
 8018ffc:	b292      	uxth	r2, r2
 8018ffe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019000:	687a      	ldr	r2, [r7, #4]
 8019002:	683b      	ldr	r3, [r7, #0]
 8019004:	781b      	ldrb	r3, [r3, #0]
 8019006:	009b      	lsls	r3, r3, #2
 8019008:	18d3      	adds	r3, r2, r3
 801900a:	881b      	ldrh	r3, [r3, #0]
 801900c:	b29a      	uxth	r2, r3
 801900e:	2016      	movs	r0, #22
 8019010:	183b      	adds	r3, r7, r0
 8019012:	4962      	ldr	r1, [pc, #392]	@ (801919c <USB_DeactivateEndpoint+0x37c>)
 8019014:	400a      	ands	r2, r1
 8019016:	801a      	strh	r2, [r3, #0]
 8019018:	687a      	ldr	r2, [r7, #4]
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	781b      	ldrb	r3, [r3, #0]
 801901e:	009b      	lsls	r3, r3, #2
 8019020:	18d3      	adds	r3, r2, r3
 8019022:	183a      	adds	r2, r7, r0
 8019024:	8812      	ldrh	r2, [r2, #0]
 8019026:	495b      	ldr	r1, [pc, #364]	@ (8019194 <USB_DeactivateEndpoint+0x374>)
 8019028:	430a      	orrs	r2, r1
 801902a:	b292      	uxth	r2, r2
 801902c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801902e:	687a      	ldr	r2, [r7, #4]
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	781b      	ldrb	r3, [r3, #0]
 8019034:	009b      	lsls	r3, r3, #2
 8019036:	18d3      	adds	r3, r2, r3
 8019038:	881b      	ldrh	r3, [r3, #0]
 801903a:	b29a      	uxth	r2, r3
 801903c:	2014      	movs	r0, #20
 801903e:	183b      	adds	r3, r7, r0
 8019040:	4953      	ldr	r1, [pc, #332]	@ (8019190 <USB_DeactivateEndpoint+0x370>)
 8019042:	400a      	ands	r2, r1
 8019044:	801a      	strh	r2, [r3, #0]
 8019046:	687a      	ldr	r2, [r7, #4]
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	009b      	lsls	r3, r3, #2
 801904e:	18d3      	adds	r3, r2, r3
 8019050:	183a      	adds	r2, r7, r0
 8019052:	8812      	ldrh	r2, [r2, #0]
 8019054:	494f      	ldr	r1, [pc, #316]	@ (8019194 <USB_DeactivateEndpoint+0x374>)
 8019056:	430a      	orrs	r2, r1
 8019058:	b292      	uxth	r2, r2
 801905a:	801a      	strh	r2, [r3, #0]
 801905c:	e08f      	b.n	801917e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801905e:	687a      	ldr	r2, [r7, #4]
 8019060:	683b      	ldr	r3, [r7, #0]
 8019062:	781b      	ldrb	r3, [r3, #0]
 8019064:	009b      	lsls	r3, r3, #2
 8019066:	18d2      	adds	r2, r2, r3
 8019068:	212e      	movs	r1, #46	@ 0x2e
 801906a:	187b      	adds	r3, r7, r1
 801906c:	8812      	ldrh	r2, [r2, #0]
 801906e:	801a      	strh	r2, [r3, #0]
 8019070:	187b      	adds	r3, r7, r1
 8019072:	881a      	ldrh	r2, [r3, #0]
 8019074:	2380      	movs	r3, #128	@ 0x80
 8019076:	01db      	lsls	r3, r3, #7
 8019078:	4013      	ands	r3, r2
 801907a:	d016      	beq.n	80190aa <USB_DeactivateEndpoint+0x28a>
 801907c:	687a      	ldr	r2, [r7, #4]
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	781b      	ldrb	r3, [r3, #0]
 8019082:	009b      	lsls	r3, r3, #2
 8019084:	18d3      	adds	r3, r2, r3
 8019086:	881b      	ldrh	r3, [r3, #0]
 8019088:	b29a      	uxth	r2, r3
 801908a:	202c      	movs	r0, #44	@ 0x2c
 801908c:	183b      	adds	r3, r7, r0
 801908e:	493e      	ldr	r1, [pc, #248]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 8019090:	400a      	ands	r2, r1
 8019092:	801a      	strh	r2, [r3, #0]
 8019094:	687a      	ldr	r2, [r7, #4]
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	781b      	ldrb	r3, [r3, #0]
 801909a:	009b      	lsls	r3, r3, #2
 801909c:	18d3      	adds	r3, r2, r3
 801909e:	183a      	adds	r2, r7, r0
 80190a0:	8812      	ldrh	r2, [r2, #0]
 80190a2:	493d      	ldr	r1, [pc, #244]	@ (8019198 <USB_DeactivateEndpoint+0x378>)
 80190a4:	430a      	orrs	r2, r1
 80190a6:	b292      	uxth	r2, r2
 80190a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80190aa:	687a      	ldr	r2, [r7, #4]
 80190ac:	683b      	ldr	r3, [r7, #0]
 80190ae:	781b      	ldrb	r3, [r3, #0]
 80190b0:	009b      	lsls	r3, r3, #2
 80190b2:	18d2      	adds	r2, r2, r3
 80190b4:	212a      	movs	r1, #42	@ 0x2a
 80190b6:	187b      	adds	r3, r7, r1
 80190b8:	8812      	ldrh	r2, [r2, #0]
 80190ba:	801a      	strh	r2, [r3, #0]
 80190bc:	187b      	adds	r3, r7, r1
 80190be:	881b      	ldrh	r3, [r3, #0]
 80190c0:	2240      	movs	r2, #64	@ 0x40
 80190c2:	4013      	ands	r3, r2
 80190c4:	d016      	beq.n	80190f4 <USB_DeactivateEndpoint+0x2d4>
 80190c6:	687a      	ldr	r2, [r7, #4]
 80190c8:	683b      	ldr	r3, [r7, #0]
 80190ca:	781b      	ldrb	r3, [r3, #0]
 80190cc:	009b      	lsls	r3, r3, #2
 80190ce:	18d3      	adds	r3, r2, r3
 80190d0:	881b      	ldrh	r3, [r3, #0]
 80190d2:	b29a      	uxth	r2, r3
 80190d4:	2028      	movs	r0, #40	@ 0x28
 80190d6:	183b      	adds	r3, r7, r0
 80190d8:	492b      	ldr	r1, [pc, #172]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 80190da:	400a      	ands	r2, r1
 80190dc:	801a      	strh	r2, [r3, #0]
 80190de:	687a      	ldr	r2, [r7, #4]
 80190e0:	683b      	ldr	r3, [r7, #0]
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	009b      	lsls	r3, r3, #2
 80190e6:	18d3      	adds	r3, r2, r3
 80190e8:	183a      	adds	r2, r7, r0
 80190ea:	8812      	ldrh	r2, [r2, #0]
 80190ec:	4927      	ldr	r1, [pc, #156]	@ (801918c <USB_DeactivateEndpoint+0x36c>)
 80190ee:	430a      	orrs	r2, r1
 80190f0:	b292      	uxth	r2, r2
 80190f2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80190f4:	687a      	ldr	r2, [r7, #4]
 80190f6:	683b      	ldr	r3, [r7, #0]
 80190f8:	781b      	ldrb	r3, [r3, #0]
 80190fa:	009b      	lsls	r3, r3, #2
 80190fc:	18d3      	adds	r3, r2, r3
 80190fe:	881b      	ldrh	r3, [r3, #0]
 8019100:	b29a      	uxth	r2, r3
 8019102:	2026      	movs	r0, #38	@ 0x26
 8019104:	183b      	adds	r3, r7, r0
 8019106:	4920      	ldr	r1, [pc, #128]	@ (8019188 <USB_DeactivateEndpoint+0x368>)
 8019108:	400a      	ands	r2, r1
 801910a:	801a      	strh	r2, [r3, #0]
 801910c:	687a      	ldr	r2, [r7, #4]
 801910e:	683b      	ldr	r3, [r7, #0]
 8019110:	781b      	ldrb	r3, [r3, #0]
 8019112:	009b      	lsls	r3, r3, #2
 8019114:	18d3      	adds	r3, r2, r3
 8019116:	183a      	adds	r2, r7, r0
 8019118:	8812      	ldrh	r2, [r2, #0]
 801911a:	491f      	ldr	r1, [pc, #124]	@ (8019198 <USB_DeactivateEndpoint+0x378>)
 801911c:	430a      	orrs	r2, r1
 801911e:	b292      	uxth	r2, r2
 8019120:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019122:	687a      	ldr	r2, [r7, #4]
 8019124:	683b      	ldr	r3, [r7, #0]
 8019126:	781b      	ldrb	r3, [r3, #0]
 8019128:	009b      	lsls	r3, r3, #2
 801912a:	18d3      	adds	r3, r2, r3
 801912c:	881b      	ldrh	r3, [r3, #0]
 801912e:	b29a      	uxth	r2, r3
 8019130:	2024      	movs	r0, #36	@ 0x24
 8019132:	183b      	adds	r3, r7, r0
 8019134:	4916      	ldr	r1, [pc, #88]	@ (8019190 <USB_DeactivateEndpoint+0x370>)
 8019136:	400a      	ands	r2, r1
 8019138:	801a      	strh	r2, [r3, #0]
 801913a:	687a      	ldr	r2, [r7, #4]
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	781b      	ldrb	r3, [r3, #0]
 8019140:	009b      	lsls	r3, r3, #2
 8019142:	18d3      	adds	r3, r2, r3
 8019144:	183a      	adds	r2, r7, r0
 8019146:	8812      	ldrh	r2, [r2, #0]
 8019148:	4912      	ldr	r1, [pc, #72]	@ (8019194 <USB_DeactivateEndpoint+0x374>)
 801914a:	430a      	orrs	r2, r1
 801914c:	b292      	uxth	r2, r2
 801914e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019150:	687a      	ldr	r2, [r7, #4]
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	009b      	lsls	r3, r3, #2
 8019158:	18d3      	adds	r3, r2, r3
 801915a:	881b      	ldrh	r3, [r3, #0]
 801915c:	b29a      	uxth	r2, r3
 801915e:	2022      	movs	r0, #34	@ 0x22
 8019160:	183b      	adds	r3, r7, r0
 8019162:	490e      	ldr	r1, [pc, #56]	@ (801919c <USB_DeactivateEndpoint+0x37c>)
 8019164:	400a      	ands	r2, r1
 8019166:	801a      	strh	r2, [r3, #0]
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	683b      	ldr	r3, [r7, #0]
 801916c:	781b      	ldrb	r3, [r3, #0]
 801916e:	009b      	lsls	r3, r3, #2
 8019170:	18d3      	adds	r3, r2, r3
 8019172:	183a      	adds	r2, r7, r0
 8019174:	8812      	ldrh	r2, [r2, #0]
 8019176:	4907      	ldr	r1, [pc, #28]	@ (8019194 <USB_DeactivateEndpoint+0x374>)
 8019178:	430a      	orrs	r2, r1
 801917a:	b292      	uxth	r2, r2
 801917c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801917e:	2300      	movs	r3, #0
}
 8019180:	0018      	movs	r0, r3
 8019182:	46bd      	mov	sp, r7
 8019184:	b00c      	add	sp, #48	@ 0x30
 8019186:	bd80      	pop	{r7, pc}
 8019188:	ffff8f8f 	.word	0xffff8f8f
 801918c:	ffff80c0 	.word	0xffff80c0
 8019190:	ffff8fbf 	.word	0xffff8fbf
 8019194:	ffff8080 	.word	0xffff8080
 8019198:	ffffc080 	.word	0xffffc080
 801919c:	ffffbf8f 	.word	0xffffbf8f

080191a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80191a0:	b590      	push	{r4, r7, lr}
 80191a2:	b0c3      	sub	sp, #268	@ 0x10c
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80191aa:	683b      	ldr	r3, [r7, #0]
 80191ac:	785b      	ldrb	r3, [r3, #1]
 80191ae:	2b01      	cmp	r3, #1
 80191b0:	d001      	beq.n	80191b6 <USB_EPStartXfer+0x16>
 80191b2:	f000 fd2d 	bl	8019c10 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80191b6:	683b      	ldr	r3, [r7, #0]
 80191b8:	699a      	ldr	r2, [r3, #24]
 80191ba:	683b      	ldr	r3, [r7, #0]
 80191bc:	691b      	ldr	r3, [r3, #16]
 80191be:	429a      	cmp	r2, r3
 80191c0:	d905      	bls.n	80191ce <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	691b      	ldr	r3, [r3, #16]
 80191c6:	1d7a      	adds	r2, r7, #5
 80191c8:	32ff      	adds	r2, #255	@ 0xff
 80191ca:	6013      	str	r3, [r2, #0]
 80191cc:	e004      	b.n	80191d8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	699b      	ldr	r3, [r3, #24]
 80191d2:	1d7a      	adds	r2, r7, #5
 80191d4:	32ff      	adds	r2, #255	@ 0xff
 80191d6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80191d8:	683b      	ldr	r3, [r7, #0]
 80191da:	7b1b      	ldrb	r3, [r3, #12]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d125      	bne.n	801922c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	6959      	ldr	r1, [r3, #20]
 80191e4:	683b      	ldr	r3, [r7, #0]
 80191e6:	88da      	ldrh	r2, [r3, #6]
 80191e8:	1d7b      	adds	r3, r7, #5
 80191ea:	33ff      	adds	r3, #255	@ 0xff
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	b29b      	uxth	r3, r3
 80191f0:	6878      	ldr	r0, [r7, #4]
 80191f2:	f001 fa47 	bl	801a684 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	613b      	str	r3, [r7, #16]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	2250      	movs	r2, #80	@ 0x50
 80191fe:	5a9b      	ldrh	r3, [r3, r2]
 8019200:	b29b      	uxth	r3, r3
 8019202:	001a      	movs	r2, r3
 8019204:	693b      	ldr	r3, [r7, #16]
 8019206:	189b      	adds	r3, r3, r2
 8019208:	613b      	str	r3, [r7, #16]
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	781b      	ldrb	r3, [r3, #0]
 801920e:	00da      	lsls	r2, r3, #3
 8019210:	693b      	ldr	r3, [r7, #16]
 8019212:	18d3      	adds	r3, r2, r3
 8019214:	4ad7      	ldr	r2, [pc, #860]	@ (8019574 <USB_EPStartXfer+0x3d4>)
 8019216:	4694      	mov	ip, r2
 8019218:	4463      	add	r3, ip
 801921a:	60fb      	str	r3, [r7, #12]
 801921c:	1d7b      	adds	r3, r7, #5
 801921e:	33ff      	adds	r3, #255	@ 0xff
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	b29a      	uxth	r2, r3
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	801a      	strh	r2, [r3, #0]
 8019228:	f000 fccd 	bl	8019bc6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	78db      	ldrb	r3, [r3, #3]
 8019230:	2b02      	cmp	r3, #2
 8019232:	d000      	beq.n	8019236 <USB_EPStartXfer+0x96>
 8019234:	e362      	b.n	80198fc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	6a1a      	ldr	r2, [r3, #32]
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	691b      	ldr	r3, [r3, #16]
 801923e:	429a      	cmp	r2, r3
 8019240:	d800      	bhi.n	8019244 <USB_EPStartXfer+0xa4>
 8019242:	e309      	b.n	8019858 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019244:	687a      	ldr	r2, [r7, #4]
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	009b      	lsls	r3, r3, #2
 801924c:	18d3      	adds	r3, r2, r3
 801924e:	881b      	ldrh	r3, [r3, #0]
 8019250:	b29a      	uxth	r2, r3
 8019252:	2056      	movs	r0, #86	@ 0x56
 8019254:	183b      	adds	r3, r7, r0
 8019256:	49c8      	ldr	r1, [pc, #800]	@ (8019578 <USB_EPStartXfer+0x3d8>)
 8019258:	400a      	ands	r2, r1
 801925a:	801a      	strh	r2, [r3, #0]
 801925c:	687a      	ldr	r2, [r7, #4]
 801925e:	683b      	ldr	r3, [r7, #0]
 8019260:	781b      	ldrb	r3, [r3, #0]
 8019262:	009b      	lsls	r3, r3, #2
 8019264:	18d3      	adds	r3, r2, r3
 8019266:	183a      	adds	r2, r7, r0
 8019268:	8812      	ldrh	r2, [r2, #0]
 801926a:	49c4      	ldr	r1, [pc, #784]	@ (801957c <USB_EPStartXfer+0x3dc>)
 801926c:	430a      	orrs	r2, r1
 801926e:	b292      	uxth	r2, r2
 8019270:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	6a1a      	ldr	r2, [r3, #32]
 8019276:	1d7b      	adds	r3, r7, #5
 8019278:	33ff      	adds	r3, #255	@ 0xff
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	1ad2      	subs	r2, r2, r3
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	781b      	ldrb	r3, [r3, #0]
 8019288:	009b      	lsls	r3, r3, #2
 801928a:	18d3      	adds	r3, r2, r3
 801928c:	881b      	ldrh	r3, [r3, #0]
 801928e:	b29b      	uxth	r3, r3
 8019290:	001a      	movs	r2, r3
 8019292:	2340      	movs	r3, #64	@ 0x40
 8019294:	4013      	ands	r3, r2
 8019296:	d100      	bne.n	801929a <USB_EPStartXfer+0xfa>
 8019298:	e176      	b.n	8019588 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	633b      	str	r3, [r7, #48]	@ 0x30
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	785b      	ldrb	r3, [r3, #1]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d000      	beq.n	80192a8 <USB_EPStartXfer+0x108>
 80192a6:	e074      	b.n	8019392 <USB_EPStartXfer+0x1f2>
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	2250      	movs	r2, #80	@ 0x50
 80192b0:	5a9b      	ldrh	r3, [r3, r2]
 80192b2:	b29b      	uxth	r3, r3
 80192b4:	001a      	movs	r2, r3
 80192b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192b8:	189b      	adds	r3, r3, r2
 80192ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	781b      	ldrb	r3, [r3, #0]
 80192c0:	00da      	lsls	r2, r3, #3
 80192c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192c4:	18d3      	adds	r3, r2, r3
 80192c6:	4aae      	ldr	r2, [pc, #696]	@ (8019580 <USB_EPStartXfer+0x3e0>)
 80192c8:	4694      	mov	ip, r2
 80192ca:	4463      	add	r3, ip
 80192cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80192ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d0:	881b      	ldrh	r3, [r3, #0]
 80192d2:	b29b      	uxth	r3, r3
 80192d4:	059b      	lsls	r3, r3, #22
 80192d6:	0d9b      	lsrs	r3, r3, #22
 80192d8:	b29a      	uxth	r2, r3
 80192da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192dc:	801a      	strh	r2, [r3, #0]
 80192de:	1d7b      	adds	r3, r7, #5
 80192e0:	33ff      	adds	r3, #255	@ 0xff
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80192e6:	d924      	bls.n	8019332 <USB_EPStartXfer+0x192>
 80192e8:	1d7b      	adds	r3, r7, #5
 80192ea:	33ff      	adds	r3, #255	@ 0xff
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	095b      	lsrs	r3, r3, #5
 80192f0:	1c7a      	adds	r2, r7, #1
 80192f2:	32ff      	adds	r2, #255	@ 0xff
 80192f4:	6013      	str	r3, [r2, #0]
 80192f6:	1d7b      	adds	r3, r7, #5
 80192f8:	33ff      	adds	r3, #255	@ 0xff
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	221f      	movs	r2, #31
 80192fe:	4013      	ands	r3, r2
 8019300:	d106      	bne.n	8019310 <USB_EPStartXfer+0x170>
 8019302:	1c7b      	adds	r3, r7, #1
 8019304:	33ff      	adds	r3, #255	@ 0xff
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	3b01      	subs	r3, #1
 801930a:	1c7a      	adds	r2, r7, #1
 801930c:	32ff      	adds	r2, #255	@ 0xff
 801930e:	6013      	str	r3, [r2, #0]
 8019310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019312:	881b      	ldrh	r3, [r3, #0]
 8019314:	b29a      	uxth	r2, r3
 8019316:	1c7b      	adds	r3, r7, #1
 8019318:	33ff      	adds	r3, #255	@ 0xff
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	b29b      	uxth	r3, r3
 801931e:	029b      	lsls	r3, r3, #10
 8019320:	b29b      	uxth	r3, r3
 8019322:	4313      	orrs	r3, r2
 8019324:	b29b      	uxth	r3, r3
 8019326:	4a97      	ldr	r2, [pc, #604]	@ (8019584 <USB_EPStartXfer+0x3e4>)
 8019328:	4313      	orrs	r3, r2
 801932a:	b29a      	uxth	r2, r3
 801932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801932e:	801a      	strh	r2, [r3, #0]
 8019330:	e04a      	b.n	80193c8 <USB_EPStartXfer+0x228>
 8019332:	1d7b      	adds	r3, r7, #5
 8019334:	33ff      	adds	r3, #255	@ 0xff
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d108      	bne.n	801934e <USB_EPStartXfer+0x1ae>
 801933c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801933e:	881b      	ldrh	r3, [r3, #0]
 8019340:	b29b      	uxth	r3, r3
 8019342:	4a90      	ldr	r2, [pc, #576]	@ (8019584 <USB_EPStartXfer+0x3e4>)
 8019344:	4313      	orrs	r3, r2
 8019346:	b29a      	uxth	r2, r3
 8019348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801934a:	801a      	strh	r2, [r3, #0]
 801934c:	e03c      	b.n	80193c8 <USB_EPStartXfer+0x228>
 801934e:	1d7b      	adds	r3, r7, #5
 8019350:	33ff      	adds	r3, #255	@ 0xff
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	085b      	lsrs	r3, r3, #1
 8019356:	1c7a      	adds	r2, r7, #1
 8019358:	32ff      	adds	r2, #255	@ 0xff
 801935a:	6013      	str	r3, [r2, #0]
 801935c:	1d7b      	adds	r3, r7, #5
 801935e:	33ff      	adds	r3, #255	@ 0xff
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	2201      	movs	r2, #1
 8019364:	4013      	ands	r3, r2
 8019366:	d006      	beq.n	8019376 <USB_EPStartXfer+0x1d6>
 8019368:	1c7b      	adds	r3, r7, #1
 801936a:	33ff      	adds	r3, #255	@ 0xff
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	3301      	adds	r3, #1
 8019370:	1c7a      	adds	r2, r7, #1
 8019372:	32ff      	adds	r2, #255	@ 0xff
 8019374:	6013      	str	r3, [r2, #0]
 8019376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019378:	881b      	ldrh	r3, [r3, #0]
 801937a:	b29a      	uxth	r2, r3
 801937c:	1c7b      	adds	r3, r7, #1
 801937e:	33ff      	adds	r3, #255	@ 0xff
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	b29b      	uxth	r3, r3
 8019384:	029b      	lsls	r3, r3, #10
 8019386:	b29b      	uxth	r3, r3
 8019388:	4313      	orrs	r3, r2
 801938a:	b29a      	uxth	r2, r3
 801938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938e:	801a      	strh	r2, [r3, #0]
 8019390:	e01a      	b.n	80193c8 <USB_EPStartXfer+0x228>
 8019392:	683b      	ldr	r3, [r7, #0]
 8019394:	785b      	ldrb	r3, [r3, #1]
 8019396:	2b01      	cmp	r3, #1
 8019398:	d116      	bne.n	80193c8 <USB_EPStartXfer+0x228>
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2250      	movs	r2, #80	@ 0x50
 801939e:	5a9b      	ldrh	r3, [r3, r2]
 80193a0:	b29b      	uxth	r3, r3
 80193a2:	001a      	movs	r2, r3
 80193a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193a6:	189b      	adds	r3, r3, r2
 80193a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	781b      	ldrb	r3, [r3, #0]
 80193ae:	00da      	lsls	r2, r3, #3
 80193b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193b2:	18d3      	adds	r3, r2, r3
 80193b4:	4a72      	ldr	r2, [pc, #456]	@ (8019580 <USB_EPStartXfer+0x3e0>)
 80193b6:	4694      	mov	ip, r2
 80193b8:	4463      	add	r3, ip
 80193ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80193bc:	1d7b      	adds	r3, r7, #5
 80193be:	33ff      	adds	r3, #255	@ 0xff
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	b29a      	uxth	r2, r3
 80193c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80193c8:	2076      	movs	r0, #118	@ 0x76
 80193ca:	183b      	adds	r3, r7, r0
 80193cc:	683a      	ldr	r2, [r7, #0]
 80193ce:	8952      	ldrh	r2, [r2, #10]
 80193d0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80193d2:	683b      	ldr	r3, [r7, #0]
 80193d4:	6959      	ldr	r1, [r3, #20]
 80193d6:	1d7b      	adds	r3, r7, #5
 80193d8:	33ff      	adds	r3, #255	@ 0xff
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	b29c      	uxth	r4, r3
 80193de:	183b      	adds	r3, r7, r0
 80193e0:	881a      	ldrh	r2, [r3, #0]
 80193e2:	6878      	ldr	r0, [r7, #4]
 80193e4:	0023      	movs	r3, r4
 80193e6:	f001 f94d 	bl	801a684 <USB_WritePMA>
            ep->xfer_buff += len;
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	695a      	ldr	r2, [r3, #20]
 80193ee:	1d7b      	adds	r3, r7, #5
 80193f0:	33ff      	adds	r3, #255	@ 0xff
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	18d2      	adds	r2, r2, r3
 80193f6:	683b      	ldr	r3, [r7, #0]
 80193f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	6a1a      	ldr	r2, [r3, #32]
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	691b      	ldr	r3, [r3, #16]
 8019402:	429a      	cmp	r2, r3
 8019404:	d908      	bls.n	8019418 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	6a1a      	ldr	r2, [r3, #32]
 801940a:	1d7b      	adds	r3, r7, #5
 801940c:	33ff      	adds	r3, #255	@ 0xff
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	1ad2      	subs	r2, r2, r3
 8019412:	683b      	ldr	r3, [r7, #0]
 8019414:	621a      	str	r2, [r3, #32]
 8019416:	e007      	b.n	8019428 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	6a1b      	ldr	r3, [r3, #32]
 801941c:	1d7a      	adds	r2, r7, #5
 801941e:	32ff      	adds	r2, #255	@ 0xff
 8019420:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	2200      	movs	r2, #0
 8019426:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	785b      	ldrb	r3, [r3, #1]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d000      	beq.n	8019432 <USB_EPStartXfer+0x292>
 8019430:	e070      	b.n	8019514 <USB_EPStartXfer+0x374>
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	61bb      	str	r3, [r7, #24]
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	2250      	movs	r2, #80	@ 0x50
 801943a:	5a9b      	ldrh	r3, [r3, r2]
 801943c:	b29b      	uxth	r3, r3
 801943e:	001a      	movs	r2, r3
 8019440:	69bb      	ldr	r3, [r7, #24]
 8019442:	189b      	adds	r3, r3, r2
 8019444:	61bb      	str	r3, [r7, #24]
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	781b      	ldrb	r3, [r3, #0]
 801944a:	00da      	lsls	r2, r3, #3
 801944c:	69bb      	ldr	r3, [r7, #24]
 801944e:	18d3      	adds	r3, r2, r3
 8019450:	4a48      	ldr	r2, [pc, #288]	@ (8019574 <USB_EPStartXfer+0x3d4>)
 8019452:	4694      	mov	ip, r2
 8019454:	4463      	add	r3, ip
 8019456:	617b      	str	r3, [r7, #20]
 8019458:	697b      	ldr	r3, [r7, #20]
 801945a:	881b      	ldrh	r3, [r3, #0]
 801945c:	b29b      	uxth	r3, r3
 801945e:	059b      	lsls	r3, r3, #22
 8019460:	0d9b      	lsrs	r3, r3, #22
 8019462:	b29a      	uxth	r2, r3
 8019464:	697b      	ldr	r3, [r7, #20]
 8019466:	801a      	strh	r2, [r3, #0]
 8019468:	1d7b      	adds	r3, r7, #5
 801946a:	33ff      	adds	r3, #255	@ 0xff
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019470:	d922      	bls.n	80194b8 <USB_EPStartXfer+0x318>
 8019472:	1d7b      	adds	r3, r7, #5
 8019474:	33ff      	adds	r3, #255	@ 0xff
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	095b      	lsrs	r3, r3, #5
 801947a:	21fc      	movs	r1, #252	@ 0xfc
 801947c:	187a      	adds	r2, r7, r1
 801947e:	6013      	str	r3, [r2, #0]
 8019480:	1d7b      	adds	r3, r7, #5
 8019482:	33ff      	adds	r3, #255	@ 0xff
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	221f      	movs	r2, #31
 8019488:	4013      	ands	r3, r2
 801948a:	d104      	bne.n	8019496 <USB_EPStartXfer+0x2f6>
 801948c:	187b      	adds	r3, r7, r1
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	3b01      	subs	r3, #1
 8019492:	187a      	adds	r2, r7, r1
 8019494:	6013      	str	r3, [r2, #0]
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	881b      	ldrh	r3, [r3, #0]
 801949a:	b29a      	uxth	r2, r3
 801949c:	23fc      	movs	r3, #252	@ 0xfc
 801949e:	18fb      	adds	r3, r7, r3
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	b29b      	uxth	r3, r3
 80194a4:	029b      	lsls	r3, r3, #10
 80194a6:	b29b      	uxth	r3, r3
 80194a8:	4313      	orrs	r3, r2
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	4a35      	ldr	r2, [pc, #212]	@ (8019584 <USB_EPStartXfer+0x3e4>)
 80194ae:	4313      	orrs	r3, r2
 80194b0:	b29a      	uxth	r2, r3
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	801a      	strh	r2, [r3, #0]
 80194b6:	e04a      	b.n	801954e <USB_EPStartXfer+0x3ae>
 80194b8:	1d7b      	adds	r3, r7, #5
 80194ba:	33ff      	adds	r3, #255	@ 0xff
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d108      	bne.n	80194d4 <USB_EPStartXfer+0x334>
 80194c2:	697b      	ldr	r3, [r7, #20]
 80194c4:	881b      	ldrh	r3, [r3, #0]
 80194c6:	b29b      	uxth	r3, r3
 80194c8:	4a2e      	ldr	r2, [pc, #184]	@ (8019584 <USB_EPStartXfer+0x3e4>)
 80194ca:	4313      	orrs	r3, r2
 80194cc:	b29a      	uxth	r2, r3
 80194ce:	697b      	ldr	r3, [r7, #20]
 80194d0:	801a      	strh	r2, [r3, #0]
 80194d2:	e03c      	b.n	801954e <USB_EPStartXfer+0x3ae>
 80194d4:	1d7b      	adds	r3, r7, #5
 80194d6:	33ff      	adds	r3, #255	@ 0xff
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	085b      	lsrs	r3, r3, #1
 80194dc:	21fc      	movs	r1, #252	@ 0xfc
 80194de:	187a      	adds	r2, r7, r1
 80194e0:	6013      	str	r3, [r2, #0]
 80194e2:	1d7b      	adds	r3, r7, #5
 80194e4:	33ff      	adds	r3, #255	@ 0xff
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	2201      	movs	r2, #1
 80194ea:	4013      	ands	r3, r2
 80194ec:	d004      	beq.n	80194f8 <USB_EPStartXfer+0x358>
 80194ee:	187b      	adds	r3, r7, r1
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	3301      	adds	r3, #1
 80194f4:	187a      	adds	r2, r7, r1
 80194f6:	6013      	str	r3, [r2, #0]
 80194f8:	697b      	ldr	r3, [r7, #20]
 80194fa:	881b      	ldrh	r3, [r3, #0]
 80194fc:	b29a      	uxth	r2, r3
 80194fe:	23fc      	movs	r3, #252	@ 0xfc
 8019500:	18fb      	adds	r3, r7, r3
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	b29b      	uxth	r3, r3
 8019506:	029b      	lsls	r3, r3, #10
 8019508:	b29b      	uxth	r3, r3
 801950a:	4313      	orrs	r3, r2
 801950c:	b29a      	uxth	r2, r3
 801950e:	697b      	ldr	r3, [r7, #20]
 8019510:	801a      	strh	r2, [r3, #0]
 8019512:	e01c      	b.n	801954e <USB_EPStartXfer+0x3ae>
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	785b      	ldrb	r3, [r3, #1]
 8019518:	2b01      	cmp	r3, #1
 801951a:	d118      	bne.n	801954e <USB_EPStartXfer+0x3ae>
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	623b      	str	r3, [r7, #32]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	2250      	movs	r2, #80	@ 0x50
 8019524:	5a9b      	ldrh	r3, [r3, r2]
 8019526:	b29b      	uxth	r3, r3
 8019528:	001a      	movs	r2, r3
 801952a:	6a3b      	ldr	r3, [r7, #32]
 801952c:	189b      	adds	r3, r3, r2
 801952e:	623b      	str	r3, [r7, #32]
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	781b      	ldrb	r3, [r3, #0]
 8019534:	00da      	lsls	r2, r3, #3
 8019536:	6a3b      	ldr	r3, [r7, #32]
 8019538:	18d3      	adds	r3, r2, r3
 801953a:	4a0e      	ldr	r2, [pc, #56]	@ (8019574 <USB_EPStartXfer+0x3d4>)
 801953c:	4694      	mov	ip, r2
 801953e:	4463      	add	r3, ip
 8019540:	61fb      	str	r3, [r7, #28]
 8019542:	1d7b      	adds	r3, r7, #5
 8019544:	33ff      	adds	r3, #255	@ 0xff
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	b29a      	uxth	r2, r3
 801954a:	69fb      	ldr	r3, [r7, #28]
 801954c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801954e:	2076      	movs	r0, #118	@ 0x76
 8019550:	183b      	adds	r3, r7, r0
 8019552:	683a      	ldr	r2, [r7, #0]
 8019554:	8912      	ldrh	r2, [r2, #8]
 8019556:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	6959      	ldr	r1, [r3, #20]
 801955c:	1d7b      	adds	r3, r7, #5
 801955e:	33ff      	adds	r3, #255	@ 0xff
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	b29c      	uxth	r4, r3
 8019564:	183b      	adds	r3, r7, r0
 8019566:	881a      	ldrh	r2, [r3, #0]
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	0023      	movs	r3, r4
 801956c:	f001 f88a 	bl	801a684 <USB_WritePMA>
 8019570:	e329      	b.n	8019bc6 <USB_EPStartXfer+0xa26>
 8019572:	46c0      	nop			@ (mov r8, r8)
 8019574:	00000402 	.word	0x00000402
 8019578:	ffff8f8f 	.word	0xffff8f8f
 801957c:	ffff8180 	.word	0xffff8180
 8019580:	00000406 	.word	0x00000406
 8019584:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019588:	683b      	ldr	r3, [r7, #0]
 801958a:	785b      	ldrb	r3, [r3, #1]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d000      	beq.n	8019592 <USB_EPStartXfer+0x3f2>
 8019590:	e070      	b.n	8019674 <USB_EPStartXfer+0x4d4>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	2250      	movs	r2, #80	@ 0x50
 801959a:	5a9b      	ldrh	r3, [r3, r2]
 801959c:	b29b      	uxth	r3, r3
 801959e:	001a      	movs	r2, r3
 80195a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80195a2:	189b      	adds	r3, r3, r2
 80195a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	781b      	ldrb	r3, [r3, #0]
 80195aa:	00da      	lsls	r2, r3, #3
 80195ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80195ae:	18d3      	adds	r3, r2, r3
 80195b0:	4acd      	ldr	r2, [pc, #820]	@ (80198e8 <USB_EPStartXfer+0x748>)
 80195b2:	4694      	mov	ip, r2
 80195b4:	4463      	add	r3, ip
 80195b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80195b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195ba:	881b      	ldrh	r3, [r3, #0]
 80195bc:	b29b      	uxth	r3, r3
 80195be:	059b      	lsls	r3, r3, #22
 80195c0:	0d9b      	lsrs	r3, r3, #22
 80195c2:	b29a      	uxth	r2, r3
 80195c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195c6:	801a      	strh	r2, [r3, #0]
 80195c8:	1d7b      	adds	r3, r7, #5
 80195ca:	33ff      	adds	r3, #255	@ 0xff
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80195d0:	d922      	bls.n	8019618 <USB_EPStartXfer+0x478>
 80195d2:	1d7b      	adds	r3, r7, #5
 80195d4:	33ff      	adds	r3, #255	@ 0xff
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	095b      	lsrs	r3, r3, #5
 80195da:	21f8      	movs	r1, #248	@ 0xf8
 80195dc:	187a      	adds	r2, r7, r1
 80195de:	6013      	str	r3, [r2, #0]
 80195e0:	1d7b      	adds	r3, r7, #5
 80195e2:	33ff      	adds	r3, #255	@ 0xff
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	221f      	movs	r2, #31
 80195e8:	4013      	ands	r3, r2
 80195ea:	d104      	bne.n	80195f6 <USB_EPStartXfer+0x456>
 80195ec:	187b      	adds	r3, r7, r1
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	3b01      	subs	r3, #1
 80195f2:	187a      	adds	r2, r7, r1
 80195f4:	6013      	str	r3, [r2, #0]
 80195f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195f8:	881b      	ldrh	r3, [r3, #0]
 80195fa:	b29a      	uxth	r2, r3
 80195fc:	23f8      	movs	r3, #248	@ 0xf8
 80195fe:	18fb      	adds	r3, r7, r3
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	b29b      	uxth	r3, r3
 8019604:	029b      	lsls	r3, r3, #10
 8019606:	b29b      	uxth	r3, r3
 8019608:	4313      	orrs	r3, r2
 801960a:	b29b      	uxth	r3, r3
 801960c:	4ab7      	ldr	r2, [pc, #732]	@ (80198ec <USB_EPStartXfer+0x74c>)
 801960e:	4313      	orrs	r3, r2
 8019610:	b29a      	uxth	r2, r3
 8019612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019614:	801a      	strh	r2, [r3, #0]
 8019616:	e04a      	b.n	80196ae <USB_EPStartXfer+0x50e>
 8019618:	1d7b      	adds	r3, r7, #5
 801961a:	33ff      	adds	r3, #255	@ 0xff
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d108      	bne.n	8019634 <USB_EPStartXfer+0x494>
 8019622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019624:	881b      	ldrh	r3, [r3, #0]
 8019626:	b29b      	uxth	r3, r3
 8019628:	4ab0      	ldr	r2, [pc, #704]	@ (80198ec <USB_EPStartXfer+0x74c>)
 801962a:	4313      	orrs	r3, r2
 801962c:	b29a      	uxth	r2, r3
 801962e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019630:	801a      	strh	r2, [r3, #0]
 8019632:	e03c      	b.n	80196ae <USB_EPStartXfer+0x50e>
 8019634:	1d7b      	adds	r3, r7, #5
 8019636:	33ff      	adds	r3, #255	@ 0xff
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	085b      	lsrs	r3, r3, #1
 801963c:	21f8      	movs	r1, #248	@ 0xf8
 801963e:	187a      	adds	r2, r7, r1
 8019640:	6013      	str	r3, [r2, #0]
 8019642:	1d7b      	adds	r3, r7, #5
 8019644:	33ff      	adds	r3, #255	@ 0xff
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2201      	movs	r2, #1
 801964a:	4013      	ands	r3, r2
 801964c:	d004      	beq.n	8019658 <USB_EPStartXfer+0x4b8>
 801964e:	187b      	adds	r3, r7, r1
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	3301      	adds	r3, #1
 8019654:	187a      	adds	r2, r7, r1
 8019656:	6013      	str	r3, [r2, #0]
 8019658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801965a:	881b      	ldrh	r3, [r3, #0]
 801965c:	b29a      	uxth	r2, r3
 801965e:	23f8      	movs	r3, #248	@ 0xf8
 8019660:	18fb      	adds	r3, r7, r3
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	b29b      	uxth	r3, r3
 8019666:	029b      	lsls	r3, r3, #10
 8019668:	b29b      	uxth	r3, r3
 801966a:	4313      	orrs	r3, r2
 801966c:	b29a      	uxth	r2, r3
 801966e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019670:	801a      	strh	r2, [r3, #0]
 8019672:	e01c      	b.n	80196ae <USB_EPStartXfer+0x50e>
 8019674:	683b      	ldr	r3, [r7, #0]
 8019676:	785b      	ldrb	r3, [r3, #1]
 8019678:	2b01      	cmp	r3, #1
 801967a:	d118      	bne.n	80196ae <USB_EPStartXfer+0x50e>
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2250      	movs	r2, #80	@ 0x50
 8019684:	5a9b      	ldrh	r3, [r3, r2]
 8019686:	b29b      	uxth	r3, r3
 8019688:	001a      	movs	r2, r3
 801968a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801968c:	189b      	adds	r3, r3, r2
 801968e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019690:	683b      	ldr	r3, [r7, #0]
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	00da      	lsls	r2, r3, #3
 8019696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019698:	18d3      	adds	r3, r2, r3
 801969a:	4a93      	ldr	r2, [pc, #588]	@ (80198e8 <USB_EPStartXfer+0x748>)
 801969c:	4694      	mov	ip, r2
 801969e:	4463      	add	r3, ip
 80196a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80196a2:	1d7b      	adds	r3, r7, #5
 80196a4:	33ff      	adds	r3, #255	@ 0xff
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80196ae:	2076      	movs	r0, #118	@ 0x76
 80196b0:	183b      	adds	r3, r7, r0
 80196b2:	683a      	ldr	r2, [r7, #0]
 80196b4:	8912      	ldrh	r2, [r2, #8]
 80196b6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80196b8:	683b      	ldr	r3, [r7, #0]
 80196ba:	6959      	ldr	r1, [r3, #20]
 80196bc:	1d7b      	adds	r3, r7, #5
 80196be:	33ff      	adds	r3, #255	@ 0xff
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	b29c      	uxth	r4, r3
 80196c4:	183b      	adds	r3, r7, r0
 80196c6:	881a      	ldrh	r2, [r3, #0]
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	0023      	movs	r3, r4
 80196cc:	f000 ffda 	bl	801a684 <USB_WritePMA>
            ep->xfer_buff += len;
 80196d0:	683b      	ldr	r3, [r7, #0]
 80196d2:	695a      	ldr	r2, [r3, #20]
 80196d4:	1d7b      	adds	r3, r7, #5
 80196d6:	33ff      	adds	r3, #255	@ 0xff
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	18d2      	adds	r2, r2, r3
 80196dc:	683b      	ldr	r3, [r7, #0]
 80196de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	6a1a      	ldr	r2, [r3, #32]
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	691b      	ldr	r3, [r3, #16]
 80196e8:	429a      	cmp	r2, r3
 80196ea:	d908      	bls.n	80196fe <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	6a1a      	ldr	r2, [r3, #32]
 80196f0:	1d7b      	adds	r3, r7, #5
 80196f2:	33ff      	adds	r3, #255	@ 0xff
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	1ad2      	subs	r2, r2, r3
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	621a      	str	r2, [r3, #32]
 80196fc:	e007      	b.n	801970e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	6a1b      	ldr	r3, [r3, #32]
 8019702:	1d7a      	adds	r2, r7, #5
 8019704:	32ff      	adds	r2, #255	@ 0xff
 8019706:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	2200      	movs	r2, #0
 801970c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	643b      	str	r3, [r7, #64]	@ 0x40
 8019712:	683b      	ldr	r3, [r7, #0]
 8019714:	785b      	ldrb	r3, [r3, #1]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d000      	beq.n	801971c <USB_EPStartXfer+0x57c>
 801971a:	e070      	b.n	80197fe <USB_EPStartXfer+0x65e>
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2250      	movs	r2, #80	@ 0x50
 8019724:	5a9b      	ldrh	r3, [r3, r2]
 8019726:	b29b      	uxth	r3, r3
 8019728:	001a      	movs	r2, r3
 801972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801972c:	189b      	adds	r3, r3, r2
 801972e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	781b      	ldrb	r3, [r3, #0]
 8019734:	00da      	lsls	r2, r3, #3
 8019736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019738:	18d3      	adds	r3, r2, r3
 801973a:	4a6d      	ldr	r2, [pc, #436]	@ (80198f0 <USB_EPStartXfer+0x750>)
 801973c:	4694      	mov	ip, r2
 801973e:	4463      	add	r3, ip
 8019740:	637b      	str	r3, [r7, #52]	@ 0x34
 8019742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019744:	881b      	ldrh	r3, [r3, #0]
 8019746:	b29b      	uxth	r3, r3
 8019748:	059b      	lsls	r3, r3, #22
 801974a:	0d9b      	lsrs	r3, r3, #22
 801974c:	b29a      	uxth	r2, r3
 801974e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019750:	801a      	strh	r2, [r3, #0]
 8019752:	1d7b      	adds	r3, r7, #5
 8019754:	33ff      	adds	r3, #255	@ 0xff
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	2b3e      	cmp	r3, #62	@ 0x3e
 801975a:	d922      	bls.n	80197a2 <USB_EPStartXfer+0x602>
 801975c:	1d7b      	adds	r3, r7, #5
 801975e:	33ff      	adds	r3, #255	@ 0xff
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	095b      	lsrs	r3, r3, #5
 8019764:	21f4      	movs	r1, #244	@ 0xf4
 8019766:	187a      	adds	r2, r7, r1
 8019768:	6013      	str	r3, [r2, #0]
 801976a:	1d7b      	adds	r3, r7, #5
 801976c:	33ff      	adds	r3, #255	@ 0xff
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	221f      	movs	r2, #31
 8019772:	4013      	ands	r3, r2
 8019774:	d104      	bne.n	8019780 <USB_EPStartXfer+0x5e0>
 8019776:	187b      	adds	r3, r7, r1
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	3b01      	subs	r3, #1
 801977c:	187a      	adds	r2, r7, r1
 801977e:	6013      	str	r3, [r2, #0]
 8019780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019782:	881b      	ldrh	r3, [r3, #0]
 8019784:	b29a      	uxth	r2, r3
 8019786:	23f4      	movs	r3, #244	@ 0xf4
 8019788:	18fb      	adds	r3, r7, r3
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	b29b      	uxth	r3, r3
 801978e:	029b      	lsls	r3, r3, #10
 8019790:	b29b      	uxth	r3, r3
 8019792:	4313      	orrs	r3, r2
 8019794:	b29b      	uxth	r3, r3
 8019796:	4a55      	ldr	r2, [pc, #340]	@ (80198ec <USB_EPStartXfer+0x74c>)
 8019798:	4313      	orrs	r3, r2
 801979a:	b29a      	uxth	r2, r3
 801979c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801979e:	801a      	strh	r2, [r3, #0]
 80197a0:	e048      	b.n	8019834 <USB_EPStartXfer+0x694>
 80197a2:	1d7b      	adds	r3, r7, #5
 80197a4:	33ff      	adds	r3, #255	@ 0xff
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d108      	bne.n	80197be <USB_EPStartXfer+0x61e>
 80197ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197ae:	881b      	ldrh	r3, [r3, #0]
 80197b0:	b29b      	uxth	r3, r3
 80197b2:	4a4e      	ldr	r2, [pc, #312]	@ (80198ec <USB_EPStartXfer+0x74c>)
 80197b4:	4313      	orrs	r3, r2
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197ba:	801a      	strh	r2, [r3, #0]
 80197bc:	e03a      	b.n	8019834 <USB_EPStartXfer+0x694>
 80197be:	1d7b      	adds	r3, r7, #5
 80197c0:	33ff      	adds	r3, #255	@ 0xff
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	085b      	lsrs	r3, r3, #1
 80197c6:	21f4      	movs	r1, #244	@ 0xf4
 80197c8:	187a      	adds	r2, r7, r1
 80197ca:	6013      	str	r3, [r2, #0]
 80197cc:	1d7b      	adds	r3, r7, #5
 80197ce:	33ff      	adds	r3, #255	@ 0xff
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	2201      	movs	r2, #1
 80197d4:	4013      	ands	r3, r2
 80197d6:	d004      	beq.n	80197e2 <USB_EPStartXfer+0x642>
 80197d8:	187b      	adds	r3, r7, r1
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	3301      	adds	r3, #1
 80197de:	187a      	adds	r2, r7, r1
 80197e0:	6013      	str	r3, [r2, #0]
 80197e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197e4:	881b      	ldrh	r3, [r3, #0]
 80197e6:	b29a      	uxth	r2, r3
 80197e8:	23f4      	movs	r3, #244	@ 0xf4
 80197ea:	18fb      	adds	r3, r7, r3
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	b29b      	uxth	r3, r3
 80197f0:	029b      	lsls	r3, r3, #10
 80197f2:	b29b      	uxth	r3, r3
 80197f4:	4313      	orrs	r3, r2
 80197f6:	b29a      	uxth	r2, r3
 80197f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197fa:	801a      	strh	r2, [r3, #0]
 80197fc:	e01a      	b.n	8019834 <USB_EPStartXfer+0x694>
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	785b      	ldrb	r3, [r3, #1]
 8019802:	2b01      	cmp	r3, #1
 8019804:	d116      	bne.n	8019834 <USB_EPStartXfer+0x694>
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2250      	movs	r2, #80	@ 0x50
 801980a:	5a9b      	ldrh	r3, [r3, r2]
 801980c:	b29b      	uxth	r3, r3
 801980e:	001a      	movs	r2, r3
 8019810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019812:	189b      	adds	r3, r3, r2
 8019814:	643b      	str	r3, [r7, #64]	@ 0x40
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	781b      	ldrb	r3, [r3, #0]
 801981a:	00da      	lsls	r2, r3, #3
 801981c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801981e:	18d3      	adds	r3, r2, r3
 8019820:	4a33      	ldr	r2, [pc, #204]	@ (80198f0 <USB_EPStartXfer+0x750>)
 8019822:	4694      	mov	ip, r2
 8019824:	4463      	add	r3, ip
 8019826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019828:	1d7b      	adds	r3, r7, #5
 801982a:	33ff      	adds	r3, #255	@ 0xff
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	b29a      	uxth	r2, r3
 8019830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019832:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019834:	2076      	movs	r0, #118	@ 0x76
 8019836:	183b      	adds	r3, r7, r0
 8019838:	683a      	ldr	r2, [r7, #0]
 801983a:	8952      	ldrh	r2, [r2, #10]
 801983c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	6959      	ldr	r1, [r3, #20]
 8019842:	1d7b      	adds	r3, r7, #5
 8019844:	33ff      	adds	r3, #255	@ 0xff
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	b29c      	uxth	r4, r3
 801984a:	183b      	adds	r3, r7, r0
 801984c:	881a      	ldrh	r2, [r3, #0]
 801984e:	6878      	ldr	r0, [r7, #4]
 8019850:	0023      	movs	r3, r4
 8019852:	f000 ff17 	bl	801a684 <USB_WritePMA>
 8019856:	e1b6      	b.n	8019bc6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	6a1b      	ldr	r3, [r3, #32]
 801985c:	1d7a      	adds	r2, r7, #5
 801985e:	32ff      	adds	r2, #255	@ 0xff
 8019860:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	18d3      	adds	r3, r2, r3
 801986c:	881b      	ldrh	r3, [r3, #0]
 801986e:	b29a      	uxth	r2, r3
 8019870:	2062      	movs	r0, #98	@ 0x62
 8019872:	183b      	adds	r3, r7, r0
 8019874:	491f      	ldr	r1, [pc, #124]	@ (80198f4 <USB_EPStartXfer+0x754>)
 8019876:	400a      	ands	r2, r1
 8019878:	801a      	strh	r2, [r3, #0]
 801987a:	687a      	ldr	r2, [r7, #4]
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	009b      	lsls	r3, r3, #2
 8019882:	18d3      	adds	r3, r2, r3
 8019884:	183a      	adds	r2, r7, r0
 8019886:	8812      	ldrh	r2, [r2, #0]
 8019888:	491b      	ldr	r1, [pc, #108]	@ (80198f8 <USB_EPStartXfer+0x758>)
 801988a:	430a      	orrs	r2, r1
 801988c:	b292      	uxth	r2, r2
 801988e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2250      	movs	r2, #80	@ 0x50
 8019898:	5a9b      	ldrh	r3, [r3, r2]
 801989a:	b29b      	uxth	r3, r3
 801989c:	001a      	movs	r2, r3
 801989e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80198a0:	189b      	adds	r3, r3, r2
 80198a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	781b      	ldrb	r3, [r3, #0]
 80198a8:	00da      	lsls	r2, r3, #3
 80198aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80198ac:	18d3      	adds	r3, r2, r3
 80198ae:	4a0e      	ldr	r2, [pc, #56]	@ (80198e8 <USB_EPStartXfer+0x748>)
 80198b0:	4694      	mov	ip, r2
 80198b2:	4463      	add	r3, ip
 80198b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80198b6:	1d7b      	adds	r3, r7, #5
 80198b8:	33ff      	adds	r3, #255	@ 0xff
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	b29a      	uxth	r2, r3
 80198be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80198c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80198c2:	2076      	movs	r0, #118	@ 0x76
 80198c4:	183b      	adds	r3, r7, r0
 80198c6:	683a      	ldr	r2, [r7, #0]
 80198c8:	8912      	ldrh	r2, [r2, #8]
 80198ca:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80198cc:	683b      	ldr	r3, [r7, #0]
 80198ce:	6959      	ldr	r1, [r3, #20]
 80198d0:	1d7b      	adds	r3, r7, #5
 80198d2:	33ff      	adds	r3, #255	@ 0xff
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	b29c      	uxth	r4, r3
 80198d8:	183b      	adds	r3, r7, r0
 80198da:	881a      	ldrh	r2, [r3, #0]
 80198dc:	6878      	ldr	r0, [r7, #4]
 80198de:	0023      	movs	r3, r4
 80198e0:	f000 fed0 	bl	801a684 <USB_WritePMA>
 80198e4:	e16f      	b.n	8019bc6 <USB_EPStartXfer+0xa26>
 80198e6:	46c0      	nop			@ (mov r8, r8)
 80198e8:	00000402 	.word	0x00000402
 80198ec:	ffff8000 	.word	0xffff8000
 80198f0:	00000406 	.word	0x00000406
 80198f4:	ffff8e8f 	.word	0xffff8e8f
 80198f8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	6a1a      	ldr	r2, [r3, #32]
 8019900:	1d7b      	adds	r3, r7, #5
 8019902:	33ff      	adds	r3, #255	@ 0xff
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	1ad2      	subs	r2, r2, r3
 8019908:	683b      	ldr	r3, [r7, #0]
 801990a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801990c:	687a      	ldr	r2, [r7, #4]
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	009b      	lsls	r3, r3, #2
 8019914:	18d3      	adds	r3, r2, r3
 8019916:	881b      	ldrh	r3, [r3, #0]
 8019918:	b29b      	uxth	r3, r3
 801991a:	001a      	movs	r2, r3
 801991c:	2340      	movs	r3, #64	@ 0x40
 801991e:	4013      	ands	r3, r2
 8019920:	d100      	bne.n	8019924 <USB_EPStartXfer+0x784>
 8019922:	e0a4      	b.n	8019a6e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	673b      	str	r3, [r7, #112]	@ 0x70
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	785b      	ldrb	r3, [r3, #1]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d000      	beq.n	8019932 <USB_EPStartXfer+0x792>
 8019930:	e070      	b.n	8019a14 <USB_EPStartXfer+0x874>
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	2250      	movs	r2, #80	@ 0x50
 801993a:	5a9b      	ldrh	r3, [r3, r2]
 801993c:	b29b      	uxth	r3, r3
 801993e:	001a      	movs	r2, r3
 8019940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019942:	189b      	adds	r3, r3, r2
 8019944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019946:	683b      	ldr	r3, [r7, #0]
 8019948:	781b      	ldrb	r3, [r3, #0]
 801994a:	00da      	lsls	r2, r3, #3
 801994c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801994e:	18d3      	adds	r3, r2, r3
 8019950:	4abc      	ldr	r2, [pc, #752]	@ (8019c44 <USB_EPStartXfer+0xaa4>)
 8019952:	4694      	mov	ip, r2
 8019954:	4463      	add	r3, ip
 8019956:	667b      	str	r3, [r7, #100]	@ 0x64
 8019958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801995a:	881b      	ldrh	r3, [r3, #0]
 801995c:	b29b      	uxth	r3, r3
 801995e:	059b      	lsls	r3, r3, #22
 8019960:	0d9b      	lsrs	r3, r3, #22
 8019962:	b29a      	uxth	r2, r3
 8019964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019966:	801a      	strh	r2, [r3, #0]
 8019968:	1d7b      	adds	r3, r7, #5
 801996a:	33ff      	adds	r3, #255	@ 0xff
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019970:	d922      	bls.n	80199b8 <USB_EPStartXfer+0x818>
 8019972:	1d7b      	adds	r3, r7, #5
 8019974:	33ff      	adds	r3, #255	@ 0xff
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	095b      	lsrs	r3, r3, #5
 801997a:	21f0      	movs	r1, #240	@ 0xf0
 801997c:	187a      	adds	r2, r7, r1
 801997e:	6013      	str	r3, [r2, #0]
 8019980:	1d7b      	adds	r3, r7, #5
 8019982:	33ff      	adds	r3, #255	@ 0xff
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	221f      	movs	r2, #31
 8019988:	4013      	ands	r3, r2
 801998a:	d104      	bne.n	8019996 <USB_EPStartXfer+0x7f6>
 801998c:	187b      	adds	r3, r7, r1
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	3b01      	subs	r3, #1
 8019992:	187a      	adds	r2, r7, r1
 8019994:	6013      	str	r3, [r2, #0]
 8019996:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019998:	881b      	ldrh	r3, [r3, #0]
 801999a:	b29a      	uxth	r2, r3
 801999c:	23f0      	movs	r3, #240	@ 0xf0
 801999e:	18fb      	adds	r3, r7, r3
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	b29b      	uxth	r3, r3
 80199a4:	029b      	lsls	r3, r3, #10
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	4313      	orrs	r3, r2
 80199aa:	b29b      	uxth	r3, r3
 80199ac:	4aa6      	ldr	r2, [pc, #664]	@ (8019c48 <USB_EPStartXfer+0xaa8>)
 80199ae:	4313      	orrs	r3, r2
 80199b0:	b29a      	uxth	r2, r3
 80199b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199b4:	801a      	strh	r2, [r3, #0]
 80199b6:	e048      	b.n	8019a4a <USB_EPStartXfer+0x8aa>
 80199b8:	1d7b      	adds	r3, r7, #5
 80199ba:	33ff      	adds	r3, #255	@ 0xff
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d108      	bne.n	80199d4 <USB_EPStartXfer+0x834>
 80199c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199c4:	881b      	ldrh	r3, [r3, #0]
 80199c6:	b29b      	uxth	r3, r3
 80199c8:	4a9f      	ldr	r2, [pc, #636]	@ (8019c48 <USB_EPStartXfer+0xaa8>)
 80199ca:	4313      	orrs	r3, r2
 80199cc:	b29a      	uxth	r2, r3
 80199ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199d0:	801a      	strh	r2, [r3, #0]
 80199d2:	e03a      	b.n	8019a4a <USB_EPStartXfer+0x8aa>
 80199d4:	1d7b      	adds	r3, r7, #5
 80199d6:	33ff      	adds	r3, #255	@ 0xff
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	085b      	lsrs	r3, r3, #1
 80199dc:	21f0      	movs	r1, #240	@ 0xf0
 80199de:	187a      	adds	r2, r7, r1
 80199e0:	6013      	str	r3, [r2, #0]
 80199e2:	1d7b      	adds	r3, r7, #5
 80199e4:	33ff      	adds	r3, #255	@ 0xff
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	2201      	movs	r2, #1
 80199ea:	4013      	ands	r3, r2
 80199ec:	d004      	beq.n	80199f8 <USB_EPStartXfer+0x858>
 80199ee:	187b      	adds	r3, r7, r1
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	3301      	adds	r3, #1
 80199f4:	187a      	adds	r2, r7, r1
 80199f6:	6013      	str	r3, [r2, #0]
 80199f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199fa:	881b      	ldrh	r3, [r3, #0]
 80199fc:	b29a      	uxth	r2, r3
 80199fe:	23f0      	movs	r3, #240	@ 0xf0
 8019a00:	18fb      	adds	r3, r7, r3
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	b29b      	uxth	r3, r3
 8019a06:	029b      	lsls	r3, r3, #10
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	4313      	orrs	r3, r2
 8019a0c:	b29a      	uxth	r2, r3
 8019a0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a10:	801a      	strh	r2, [r3, #0]
 8019a12:	e01a      	b.n	8019a4a <USB_EPStartXfer+0x8aa>
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	785b      	ldrb	r3, [r3, #1]
 8019a18:	2b01      	cmp	r3, #1
 8019a1a:	d116      	bne.n	8019a4a <USB_EPStartXfer+0x8aa>
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	2250      	movs	r2, #80	@ 0x50
 8019a20:	5a9b      	ldrh	r3, [r3, r2]
 8019a22:	b29b      	uxth	r3, r3
 8019a24:	001a      	movs	r2, r3
 8019a26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019a28:	189b      	adds	r3, r3, r2
 8019a2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	00da      	lsls	r2, r3, #3
 8019a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019a34:	18d3      	adds	r3, r2, r3
 8019a36:	4a83      	ldr	r2, [pc, #524]	@ (8019c44 <USB_EPStartXfer+0xaa4>)
 8019a38:	4694      	mov	ip, r2
 8019a3a:	4463      	add	r3, ip
 8019a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019a3e:	1d7b      	adds	r3, r7, #5
 8019a40:	33ff      	adds	r3, #255	@ 0xff
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019a48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8019a4a:	2076      	movs	r0, #118	@ 0x76
 8019a4c:	183b      	adds	r3, r7, r0
 8019a4e:	683a      	ldr	r2, [r7, #0]
 8019a50:	8952      	ldrh	r2, [r2, #10]
 8019a52:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019a54:	683b      	ldr	r3, [r7, #0]
 8019a56:	6959      	ldr	r1, [r3, #20]
 8019a58:	1d7b      	adds	r3, r7, #5
 8019a5a:	33ff      	adds	r3, #255	@ 0xff
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	b29c      	uxth	r4, r3
 8019a60:	183b      	adds	r3, r7, r0
 8019a62:	881a      	ldrh	r2, [r3, #0]
 8019a64:	6878      	ldr	r0, [r7, #4]
 8019a66:	0023      	movs	r3, r4
 8019a68:	f000 fe0c 	bl	801a684 <USB_WritePMA>
 8019a6c:	e0ab      	b.n	8019bc6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019a6e:	683b      	ldr	r3, [r7, #0]
 8019a70:	785b      	ldrb	r3, [r3, #1]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d000      	beq.n	8019a78 <USB_EPStartXfer+0x8d8>
 8019a76:	e070      	b.n	8019b5a <USB_EPStartXfer+0x9ba>
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	2250      	movs	r2, #80	@ 0x50
 8019a80:	5a9b      	ldrh	r3, [r3, r2]
 8019a82:	b29b      	uxth	r3, r3
 8019a84:	001a      	movs	r2, r3
 8019a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019a88:	189b      	adds	r3, r3, r2
 8019a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019a8c:	683b      	ldr	r3, [r7, #0]
 8019a8e:	781b      	ldrb	r3, [r3, #0]
 8019a90:	00da      	lsls	r2, r3, #3
 8019a92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019a94:	18d3      	adds	r3, r2, r3
 8019a96:	4a6d      	ldr	r2, [pc, #436]	@ (8019c4c <USB_EPStartXfer+0xaac>)
 8019a98:	4694      	mov	ip, r2
 8019a9a:	4463      	add	r3, ip
 8019a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019aa0:	881b      	ldrh	r3, [r3, #0]
 8019aa2:	b29b      	uxth	r3, r3
 8019aa4:	059b      	lsls	r3, r3, #22
 8019aa6:	0d9b      	lsrs	r3, r3, #22
 8019aa8:	b29a      	uxth	r2, r3
 8019aaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019aac:	801a      	strh	r2, [r3, #0]
 8019aae:	1d7b      	adds	r3, r7, #5
 8019ab0:	33ff      	adds	r3, #255	@ 0xff
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	2b3e      	cmp	r3, #62	@ 0x3e
 8019ab6:	d922      	bls.n	8019afe <USB_EPStartXfer+0x95e>
 8019ab8:	1d7b      	adds	r3, r7, #5
 8019aba:	33ff      	adds	r3, #255	@ 0xff
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	095b      	lsrs	r3, r3, #5
 8019ac0:	21ec      	movs	r1, #236	@ 0xec
 8019ac2:	187a      	adds	r2, r7, r1
 8019ac4:	6013      	str	r3, [r2, #0]
 8019ac6:	1d7b      	adds	r3, r7, #5
 8019ac8:	33ff      	adds	r3, #255	@ 0xff
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	221f      	movs	r2, #31
 8019ace:	4013      	ands	r3, r2
 8019ad0:	d104      	bne.n	8019adc <USB_EPStartXfer+0x93c>
 8019ad2:	187b      	adds	r3, r7, r1
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	3b01      	subs	r3, #1
 8019ad8:	187a      	adds	r2, r7, r1
 8019ada:	6013      	str	r3, [r2, #0]
 8019adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019ade:	881b      	ldrh	r3, [r3, #0]
 8019ae0:	b29a      	uxth	r2, r3
 8019ae2:	23ec      	movs	r3, #236	@ 0xec
 8019ae4:	18fb      	adds	r3, r7, r3
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	b29b      	uxth	r3, r3
 8019aea:	029b      	lsls	r3, r3, #10
 8019aec:	b29b      	uxth	r3, r3
 8019aee:	4313      	orrs	r3, r2
 8019af0:	b29b      	uxth	r3, r3
 8019af2:	4a55      	ldr	r2, [pc, #340]	@ (8019c48 <USB_EPStartXfer+0xaa8>)
 8019af4:	4313      	orrs	r3, r2
 8019af6:	b29a      	uxth	r2, r3
 8019af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019afa:	801a      	strh	r2, [r3, #0]
 8019afc:	e052      	b.n	8019ba4 <USB_EPStartXfer+0xa04>
 8019afe:	1d7b      	adds	r3, r7, #5
 8019b00:	33ff      	adds	r3, #255	@ 0xff
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d108      	bne.n	8019b1a <USB_EPStartXfer+0x97a>
 8019b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019b0a:	881b      	ldrh	r3, [r3, #0]
 8019b0c:	b29b      	uxth	r3, r3
 8019b0e:	4a4e      	ldr	r2, [pc, #312]	@ (8019c48 <USB_EPStartXfer+0xaa8>)
 8019b10:	4313      	orrs	r3, r2
 8019b12:	b29a      	uxth	r2, r3
 8019b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019b16:	801a      	strh	r2, [r3, #0]
 8019b18:	e044      	b.n	8019ba4 <USB_EPStartXfer+0xa04>
 8019b1a:	1d7b      	adds	r3, r7, #5
 8019b1c:	33ff      	adds	r3, #255	@ 0xff
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	085b      	lsrs	r3, r3, #1
 8019b22:	21ec      	movs	r1, #236	@ 0xec
 8019b24:	187a      	adds	r2, r7, r1
 8019b26:	6013      	str	r3, [r2, #0]
 8019b28:	1d7b      	adds	r3, r7, #5
 8019b2a:	33ff      	adds	r3, #255	@ 0xff
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	2201      	movs	r2, #1
 8019b30:	4013      	ands	r3, r2
 8019b32:	d004      	beq.n	8019b3e <USB_EPStartXfer+0x99e>
 8019b34:	187b      	adds	r3, r7, r1
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	3301      	adds	r3, #1
 8019b3a:	187a      	adds	r2, r7, r1
 8019b3c:	6013      	str	r3, [r2, #0]
 8019b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019b40:	881b      	ldrh	r3, [r3, #0]
 8019b42:	b29a      	uxth	r2, r3
 8019b44:	23ec      	movs	r3, #236	@ 0xec
 8019b46:	18fb      	adds	r3, r7, r3
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	b29b      	uxth	r3, r3
 8019b4c:	029b      	lsls	r3, r3, #10
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	4313      	orrs	r3, r2
 8019b52:	b29a      	uxth	r2, r3
 8019b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019b56:	801a      	strh	r2, [r3, #0]
 8019b58:	e024      	b.n	8019ba4 <USB_EPStartXfer+0xa04>
 8019b5a:	683b      	ldr	r3, [r7, #0]
 8019b5c:	785b      	ldrb	r3, [r3, #1]
 8019b5e:	2b01      	cmp	r3, #1
 8019b60:	d120      	bne.n	8019ba4 <USB_EPStartXfer+0xa04>
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	2184      	movs	r1, #132	@ 0x84
 8019b66:	187a      	adds	r2, r7, r1
 8019b68:	6013      	str	r3, [r2, #0]
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	2250      	movs	r2, #80	@ 0x50
 8019b6e:	5a9b      	ldrh	r3, [r3, r2]
 8019b70:	b29b      	uxth	r3, r3
 8019b72:	001a      	movs	r2, r3
 8019b74:	187b      	adds	r3, r7, r1
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	189b      	adds	r3, r3, r2
 8019b7a:	187a      	adds	r2, r7, r1
 8019b7c:	6013      	str	r3, [r2, #0]
 8019b7e:	683b      	ldr	r3, [r7, #0]
 8019b80:	781b      	ldrb	r3, [r3, #0]
 8019b82:	00da      	lsls	r2, r3, #3
 8019b84:	187b      	adds	r3, r7, r1
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	18d3      	adds	r3, r2, r3
 8019b8a:	4a30      	ldr	r2, [pc, #192]	@ (8019c4c <USB_EPStartXfer+0xaac>)
 8019b8c:	4694      	mov	ip, r2
 8019b8e:	4463      	add	r3, ip
 8019b90:	2180      	movs	r1, #128	@ 0x80
 8019b92:	187a      	adds	r2, r7, r1
 8019b94:	6013      	str	r3, [r2, #0]
 8019b96:	1d7b      	adds	r3, r7, #5
 8019b98:	33ff      	adds	r3, #255	@ 0xff
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	b29a      	uxth	r2, r3
 8019b9e:	187b      	adds	r3, r7, r1
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019ba4:	2076      	movs	r0, #118	@ 0x76
 8019ba6:	183b      	adds	r3, r7, r0
 8019ba8:	683a      	ldr	r2, [r7, #0]
 8019baa:	8912      	ldrh	r2, [r2, #8]
 8019bac:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019bae:	683b      	ldr	r3, [r7, #0]
 8019bb0:	6959      	ldr	r1, [r3, #20]
 8019bb2:	1d7b      	adds	r3, r7, #5
 8019bb4:	33ff      	adds	r3, #255	@ 0xff
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	b29c      	uxth	r4, r3
 8019bba:	183b      	adds	r3, r7, r0
 8019bbc:	881a      	ldrh	r2, [r3, #0]
 8019bbe:	6878      	ldr	r0, [r7, #4]
 8019bc0:	0023      	movs	r3, r4
 8019bc2:	f000 fd5f 	bl	801a684 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8019bc6:	687a      	ldr	r2, [r7, #4]
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	009b      	lsls	r3, r3, #2
 8019bce:	18d3      	adds	r3, r2, r3
 8019bd0:	881b      	ldrh	r3, [r3, #0]
 8019bd2:	b29a      	uxth	r2, r3
 8019bd4:	200a      	movs	r0, #10
 8019bd6:	183b      	adds	r3, r7, r0
 8019bd8:	491d      	ldr	r1, [pc, #116]	@ (8019c50 <USB_EPStartXfer+0xab0>)
 8019bda:	400a      	ands	r2, r1
 8019bdc:	801a      	strh	r2, [r3, #0]
 8019bde:	183b      	adds	r3, r7, r0
 8019be0:	183a      	adds	r2, r7, r0
 8019be2:	8812      	ldrh	r2, [r2, #0]
 8019be4:	2110      	movs	r1, #16
 8019be6:	404a      	eors	r2, r1
 8019be8:	801a      	strh	r2, [r3, #0]
 8019bea:	183b      	adds	r3, r7, r0
 8019bec:	183a      	adds	r2, r7, r0
 8019bee:	8812      	ldrh	r2, [r2, #0]
 8019bf0:	2120      	movs	r1, #32
 8019bf2:	404a      	eors	r2, r1
 8019bf4:	801a      	strh	r2, [r3, #0]
 8019bf6:	687a      	ldr	r2, [r7, #4]
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	009b      	lsls	r3, r3, #2
 8019bfe:	18d3      	adds	r3, r2, r3
 8019c00:	183a      	adds	r2, r7, r0
 8019c02:	8812      	ldrh	r2, [r2, #0]
 8019c04:	4913      	ldr	r1, [pc, #76]	@ (8019c54 <USB_EPStartXfer+0xab4>)
 8019c06:	430a      	orrs	r2, r1
 8019c08:	b292      	uxth	r2, r2
 8019c0a:	801a      	strh	r2, [r3, #0]
 8019c0c:	f000 fbf4 	bl	801a3f8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	7b1b      	ldrb	r3, [r3, #12]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d000      	beq.n	8019c1a <USB_EPStartXfer+0xa7a>
 8019c18:	e0a9      	b.n	8019d6e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	699a      	ldr	r2, [r3, #24]
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	691b      	ldr	r3, [r3, #16]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d918      	bls.n	8019c58 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	691b      	ldr	r3, [r3, #16]
 8019c2a:	1d7a      	adds	r2, r7, #5
 8019c2c:	32ff      	adds	r2, #255	@ 0xff
 8019c2e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	699a      	ldr	r2, [r3, #24]
 8019c34:	1d7b      	adds	r3, r7, #5
 8019c36:	33ff      	adds	r3, #255	@ 0xff
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	1ad2      	subs	r2, r2, r3
 8019c3c:	683b      	ldr	r3, [r7, #0]
 8019c3e:	619a      	str	r2, [r3, #24]
 8019c40:	e012      	b.n	8019c68 <USB_EPStartXfer+0xac8>
 8019c42:	46c0      	nop			@ (mov r8, r8)
 8019c44:	00000406 	.word	0x00000406
 8019c48:	ffff8000 	.word	0xffff8000
 8019c4c:	00000402 	.word	0x00000402
 8019c50:	ffff8fbf 	.word	0xffff8fbf
 8019c54:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	699b      	ldr	r3, [r3, #24]
 8019c5c:	1d7a      	adds	r2, r7, #5
 8019c5e:	32ff      	adds	r2, #255	@ 0xff
 8019c60:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	2200      	movs	r2, #0
 8019c66:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	2190      	movs	r1, #144	@ 0x90
 8019c6c:	187a      	adds	r2, r7, r1
 8019c6e:	6013      	str	r3, [r2, #0]
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2250      	movs	r2, #80	@ 0x50
 8019c74:	5a9b      	ldrh	r3, [r3, r2]
 8019c76:	b29b      	uxth	r3, r3
 8019c78:	001a      	movs	r2, r3
 8019c7a:	187b      	adds	r3, r7, r1
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	189b      	adds	r3, r3, r2
 8019c80:	187a      	adds	r2, r7, r1
 8019c82:	6013      	str	r3, [r2, #0]
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	781b      	ldrb	r3, [r3, #0]
 8019c88:	00da      	lsls	r2, r3, #3
 8019c8a:	187b      	adds	r3, r7, r1
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	18d3      	adds	r3, r2, r3
 8019c90:	4acf      	ldr	r2, [pc, #828]	@ (8019fd0 <USB_EPStartXfer+0xe30>)
 8019c92:	4694      	mov	ip, r2
 8019c94:	4463      	add	r3, ip
 8019c96:	218c      	movs	r1, #140	@ 0x8c
 8019c98:	187a      	adds	r2, r7, r1
 8019c9a:	6013      	str	r3, [r2, #0]
 8019c9c:	187b      	adds	r3, r7, r1
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	881b      	ldrh	r3, [r3, #0]
 8019ca2:	b29b      	uxth	r3, r3
 8019ca4:	059b      	lsls	r3, r3, #22
 8019ca6:	0d9b      	lsrs	r3, r3, #22
 8019ca8:	b29a      	uxth	r2, r3
 8019caa:	187b      	adds	r3, r7, r1
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	801a      	strh	r2, [r3, #0]
 8019cb0:	1d7b      	adds	r3, r7, #5
 8019cb2:	33ff      	adds	r3, #255	@ 0xff
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8019cb8:	d925      	bls.n	8019d06 <USB_EPStartXfer+0xb66>
 8019cba:	1d7b      	adds	r3, r7, #5
 8019cbc:	33ff      	adds	r3, #255	@ 0xff
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	095b      	lsrs	r3, r3, #5
 8019cc2:	21e8      	movs	r1, #232	@ 0xe8
 8019cc4:	187a      	adds	r2, r7, r1
 8019cc6:	6013      	str	r3, [r2, #0]
 8019cc8:	1d7b      	adds	r3, r7, #5
 8019cca:	33ff      	adds	r3, #255	@ 0xff
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	221f      	movs	r2, #31
 8019cd0:	4013      	ands	r3, r2
 8019cd2:	d104      	bne.n	8019cde <USB_EPStartXfer+0xb3e>
 8019cd4:	187b      	adds	r3, r7, r1
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	3b01      	subs	r3, #1
 8019cda:	187a      	adds	r2, r7, r1
 8019cdc:	6013      	str	r3, [r2, #0]
 8019cde:	218c      	movs	r1, #140	@ 0x8c
 8019ce0:	187b      	adds	r3, r7, r1
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	881b      	ldrh	r3, [r3, #0]
 8019ce6:	b29a      	uxth	r2, r3
 8019ce8:	23e8      	movs	r3, #232	@ 0xe8
 8019cea:	18fb      	adds	r3, r7, r3
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	029b      	lsls	r3, r3, #10
 8019cf2:	b29b      	uxth	r3, r3
 8019cf4:	4313      	orrs	r3, r2
 8019cf6:	b29b      	uxth	r3, r3
 8019cf8:	4ab6      	ldr	r2, [pc, #728]	@ (8019fd4 <USB_EPStartXfer+0xe34>)
 8019cfa:	4313      	orrs	r3, r2
 8019cfc:	b29a      	uxth	r2, r3
 8019cfe:	187b      	adds	r3, r7, r1
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	801a      	strh	r2, [r3, #0]
 8019d04:	e353      	b.n	801a3ae <USB_EPStartXfer+0x120e>
 8019d06:	1d7b      	adds	r3, r7, #5
 8019d08:	33ff      	adds	r3, #255	@ 0xff
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d10b      	bne.n	8019d28 <USB_EPStartXfer+0xb88>
 8019d10:	218c      	movs	r1, #140	@ 0x8c
 8019d12:	187b      	adds	r3, r7, r1
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	881b      	ldrh	r3, [r3, #0]
 8019d18:	b29b      	uxth	r3, r3
 8019d1a:	4aae      	ldr	r2, [pc, #696]	@ (8019fd4 <USB_EPStartXfer+0xe34>)
 8019d1c:	4313      	orrs	r3, r2
 8019d1e:	b29a      	uxth	r2, r3
 8019d20:	187b      	adds	r3, r7, r1
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	801a      	strh	r2, [r3, #0]
 8019d26:	e342      	b.n	801a3ae <USB_EPStartXfer+0x120e>
 8019d28:	1d7b      	adds	r3, r7, #5
 8019d2a:	33ff      	adds	r3, #255	@ 0xff
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	085b      	lsrs	r3, r3, #1
 8019d30:	21e8      	movs	r1, #232	@ 0xe8
 8019d32:	187a      	adds	r2, r7, r1
 8019d34:	6013      	str	r3, [r2, #0]
 8019d36:	1d7b      	adds	r3, r7, #5
 8019d38:	33ff      	adds	r3, #255	@ 0xff
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	2201      	movs	r2, #1
 8019d3e:	4013      	ands	r3, r2
 8019d40:	d004      	beq.n	8019d4c <USB_EPStartXfer+0xbac>
 8019d42:	187b      	adds	r3, r7, r1
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	3301      	adds	r3, #1
 8019d48:	187a      	adds	r2, r7, r1
 8019d4a:	6013      	str	r3, [r2, #0]
 8019d4c:	218c      	movs	r1, #140	@ 0x8c
 8019d4e:	187b      	adds	r3, r7, r1
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	881b      	ldrh	r3, [r3, #0]
 8019d54:	b29a      	uxth	r2, r3
 8019d56:	23e8      	movs	r3, #232	@ 0xe8
 8019d58:	18fb      	adds	r3, r7, r3
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	b29b      	uxth	r3, r3
 8019d5e:	029b      	lsls	r3, r3, #10
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	4313      	orrs	r3, r2
 8019d64:	b29a      	uxth	r2, r3
 8019d66:	187b      	adds	r3, r7, r1
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	801a      	strh	r2, [r3, #0]
 8019d6c:	e31f      	b.n	801a3ae <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8019d6e:	683b      	ldr	r3, [r7, #0]
 8019d70:	78db      	ldrb	r3, [r3, #3]
 8019d72:	2b02      	cmp	r3, #2
 8019d74:	d000      	beq.n	8019d78 <USB_EPStartXfer+0xbd8>
 8019d76:	e191      	b.n	801a09c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	785b      	ldrb	r3, [r3, #1]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d000      	beq.n	8019d82 <USB_EPStartXfer+0xbe2>
 8019d80:	e07c      	b.n	8019e7c <USB_EPStartXfer+0xcdc>
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	21ac      	movs	r1, #172	@ 0xac
 8019d86:	187a      	adds	r2, r7, r1
 8019d88:	6013      	str	r3, [r2, #0]
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	2250      	movs	r2, #80	@ 0x50
 8019d8e:	5a9b      	ldrh	r3, [r3, r2]
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	001a      	movs	r2, r3
 8019d94:	187b      	adds	r3, r7, r1
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	189b      	adds	r3, r3, r2
 8019d9a:	187a      	adds	r2, r7, r1
 8019d9c:	6013      	str	r3, [r2, #0]
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	781b      	ldrb	r3, [r3, #0]
 8019da2:	00da      	lsls	r2, r3, #3
 8019da4:	187b      	adds	r3, r7, r1
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	18d3      	adds	r3, r2, r3
 8019daa:	4a8b      	ldr	r2, [pc, #556]	@ (8019fd8 <USB_EPStartXfer+0xe38>)
 8019dac:	4694      	mov	ip, r2
 8019dae:	4463      	add	r3, ip
 8019db0:	21a8      	movs	r1, #168	@ 0xa8
 8019db2:	187a      	adds	r2, r7, r1
 8019db4:	6013      	str	r3, [r2, #0]
 8019db6:	187b      	adds	r3, r7, r1
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	881b      	ldrh	r3, [r3, #0]
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	059b      	lsls	r3, r3, #22
 8019dc0:	0d9b      	lsrs	r3, r3, #22
 8019dc2:	b29a      	uxth	r2, r3
 8019dc4:	187b      	adds	r3, r7, r1
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	801a      	strh	r2, [r3, #0]
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	691b      	ldr	r3, [r3, #16]
 8019dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8019dd0:	d923      	bls.n	8019e1a <USB_EPStartXfer+0xc7a>
 8019dd2:	683b      	ldr	r3, [r7, #0]
 8019dd4:	691b      	ldr	r3, [r3, #16]
 8019dd6:	095b      	lsrs	r3, r3, #5
 8019dd8:	21e4      	movs	r1, #228	@ 0xe4
 8019dda:	187a      	adds	r2, r7, r1
 8019ddc:	6013      	str	r3, [r2, #0]
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	691b      	ldr	r3, [r3, #16]
 8019de2:	221f      	movs	r2, #31
 8019de4:	4013      	ands	r3, r2
 8019de6:	d104      	bne.n	8019df2 <USB_EPStartXfer+0xc52>
 8019de8:	187b      	adds	r3, r7, r1
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	3b01      	subs	r3, #1
 8019dee:	187a      	adds	r2, r7, r1
 8019df0:	6013      	str	r3, [r2, #0]
 8019df2:	21a8      	movs	r1, #168	@ 0xa8
 8019df4:	187b      	adds	r3, r7, r1
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	881b      	ldrh	r3, [r3, #0]
 8019dfa:	b29a      	uxth	r2, r3
 8019dfc:	23e4      	movs	r3, #228	@ 0xe4
 8019dfe:	18fb      	adds	r3, r7, r3
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	029b      	lsls	r3, r3, #10
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	4313      	orrs	r3, r2
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	4a71      	ldr	r2, [pc, #452]	@ (8019fd4 <USB_EPStartXfer+0xe34>)
 8019e0e:	4313      	orrs	r3, r2
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	187b      	adds	r3, r7, r1
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	801a      	strh	r2, [r3, #0]
 8019e18:	e054      	b.n	8019ec4 <USB_EPStartXfer+0xd24>
 8019e1a:	683b      	ldr	r3, [r7, #0]
 8019e1c:	691b      	ldr	r3, [r3, #16]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d10b      	bne.n	8019e3a <USB_EPStartXfer+0xc9a>
 8019e22:	21a8      	movs	r1, #168	@ 0xa8
 8019e24:	187b      	adds	r3, r7, r1
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	881b      	ldrh	r3, [r3, #0]
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	4a69      	ldr	r2, [pc, #420]	@ (8019fd4 <USB_EPStartXfer+0xe34>)
 8019e2e:	4313      	orrs	r3, r2
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	187b      	adds	r3, r7, r1
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	801a      	strh	r2, [r3, #0]
 8019e38:	e044      	b.n	8019ec4 <USB_EPStartXfer+0xd24>
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	691b      	ldr	r3, [r3, #16]
 8019e3e:	085b      	lsrs	r3, r3, #1
 8019e40:	21e4      	movs	r1, #228	@ 0xe4
 8019e42:	187a      	adds	r2, r7, r1
 8019e44:	6013      	str	r3, [r2, #0]
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	691b      	ldr	r3, [r3, #16]
 8019e4a:	2201      	movs	r2, #1
 8019e4c:	4013      	ands	r3, r2
 8019e4e:	d004      	beq.n	8019e5a <USB_EPStartXfer+0xcba>
 8019e50:	187b      	adds	r3, r7, r1
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	3301      	adds	r3, #1
 8019e56:	187a      	adds	r2, r7, r1
 8019e58:	6013      	str	r3, [r2, #0]
 8019e5a:	21a8      	movs	r1, #168	@ 0xa8
 8019e5c:	187b      	adds	r3, r7, r1
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	881b      	ldrh	r3, [r3, #0]
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	23e4      	movs	r3, #228	@ 0xe4
 8019e66:	18fb      	adds	r3, r7, r3
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	029b      	lsls	r3, r3, #10
 8019e6e:	b29b      	uxth	r3, r3
 8019e70:	4313      	orrs	r3, r2
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	187b      	adds	r3, r7, r1
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	801a      	strh	r2, [r3, #0]
 8019e7a:	e023      	b.n	8019ec4 <USB_EPStartXfer+0xd24>
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	785b      	ldrb	r3, [r3, #1]
 8019e80:	2b01      	cmp	r3, #1
 8019e82:	d11f      	bne.n	8019ec4 <USB_EPStartXfer+0xd24>
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	21b4      	movs	r1, #180	@ 0xb4
 8019e88:	187a      	adds	r2, r7, r1
 8019e8a:	6013      	str	r3, [r2, #0]
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	2250      	movs	r2, #80	@ 0x50
 8019e90:	5a9b      	ldrh	r3, [r3, r2]
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	001a      	movs	r2, r3
 8019e96:	187b      	adds	r3, r7, r1
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	189b      	adds	r3, r3, r2
 8019e9c:	187a      	adds	r2, r7, r1
 8019e9e:	6013      	str	r3, [r2, #0]
 8019ea0:	683b      	ldr	r3, [r7, #0]
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	00da      	lsls	r2, r3, #3
 8019ea6:	187b      	adds	r3, r7, r1
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	18d3      	adds	r3, r2, r3
 8019eac:	4a4a      	ldr	r2, [pc, #296]	@ (8019fd8 <USB_EPStartXfer+0xe38>)
 8019eae:	4694      	mov	ip, r2
 8019eb0:	4463      	add	r3, ip
 8019eb2:	21b0      	movs	r1, #176	@ 0xb0
 8019eb4:	187a      	adds	r2, r7, r1
 8019eb6:	6013      	str	r3, [r2, #0]
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	691b      	ldr	r3, [r3, #16]
 8019ebc:	b29a      	uxth	r2, r3
 8019ebe:	187b      	adds	r3, r7, r1
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	801a      	strh	r2, [r3, #0]
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	22a4      	movs	r2, #164	@ 0xa4
 8019ec8:	18ba      	adds	r2, r7, r2
 8019eca:	6013      	str	r3, [r2, #0]
 8019ecc:	683b      	ldr	r3, [r7, #0]
 8019ece:	785b      	ldrb	r3, [r3, #1]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d000      	beq.n	8019ed6 <USB_EPStartXfer+0xd36>
 8019ed4:	e082      	b.n	8019fdc <USB_EPStartXfer+0xe3c>
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	219c      	movs	r1, #156	@ 0x9c
 8019eda:	187a      	adds	r2, r7, r1
 8019edc:	6013      	str	r3, [r2, #0]
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	2250      	movs	r2, #80	@ 0x50
 8019ee2:	5a9b      	ldrh	r3, [r3, r2]
 8019ee4:	b29b      	uxth	r3, r3
 8019ee6:	001a      	movs	r2, r3
 8019ee8:	187b      	adds	r3, r7, r1
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	189b      	adds	r3, r3, r2
 8019eee:	187a      	adds	r2, r7, r1
 8019ef0:	6013      	str	r3, [r2, #0]
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	781b      	ldrb	r3, [r3, #0]
 8019ef6:	00da      	lsls	r2, r3, #3
 8019ef8:	187b      	adds	r3, r7, r1
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	18d3      	adds	r3, r2, r3
 8019efe:	4a34      	ldr	r2, [pc, #208]	@ (8019fd0 <USB_EPStartXfer+0xe30>)
 8019f00:	4694      	mov	ip, r2
 8019f02:	4463      	add	r3, ip
 8019f04:	2198      	movs	r1, #152	@ 0x98
 8019f06:	187a      	adds	r2, r7, r1
 8019f08:	6013      	str	r3, [r2, #0]
 8019f0a:	187b      	adds	r3, r7, r1
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	881b      	ldrh	r3, [r3, #0]
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	059b      	lsls	r3, r3, #22
 8019f14:	0d9b      	lsrs	r3, r3, #22
 8019f16:	b29a      	uxth	r2, r3
 8019f18:	187b      	adds	r3, r7, r1
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	801a      	strh	r2, [r3, #0]
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	691b      	ldr	r3, [r3, #16]
 8019f22:	2b3e      	cmp	r3, #62	@ 0x3e
 8019f24:	d923      	bls.n	8019f6e <USB_EPStartXfer+0xdce>
 8019f26:	683b      	ldr	r3, [r7, #0]
 8019f28:	691b      	ldr	r3, [r3, #16]
 8019f2a:	095b      	lsrs	r3, r3, #5
 8019f2c:	21e0      	movs	r1, #224	@ 0xe0
 8019f2e:	187a      	adds	r2, r7, r1
 8019f30:	6013      	str	r3, [r2, #0]
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	691b      	ldr	r3, [r3, #16]
 8019f36:	221f      	movs	r2, #31
 8019f38:	4013      	ands	r3, r2
 8019f3a:	d104      	bne.n	8019f46 <USB_EPStartXfer+0xda6>
 8019f3c:	187b      	adds	r3, r7, r1
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	3b01      	subs	r3, #1
 8019f42:	187a      	adds	r2, r7, r1
 8019f44:	6013      	str	r3, [r2, #0]
 8019f46:	2198      	movs	r1, #152	@ 0x98
 8019f48:	187b      	adds	r3, r7, r1
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	881b      	ldrh	r3, [r3, #0]
 8019f4e:	b29a      	uxth	r2, r3
 8019f50:	23e0      	movs	r3, #224	@ 0xe0
 8019f52:	18fb      	adds	r3, r7, r3
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	b29b      	uxth	r3, r3
 8019f58:	029b      	lsls	r3, r3, #10
 8019f5a:	b29b      	uxth	r3, r3
 8019f5c:	4313      	orrs	r3, r2
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	4a1c      	ldr	r2, [pc, #112]	@ (8019fd4 <USB_EPStartXfer+0xe34>)
 8019f62:	4313      	orrs	r3, r2
 8019f64:	b29a      	uxth	r2, r3
 8019f66:	187b      	adds	r3, r7, r1
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	801a      	strh	r2, [r3, #0]
 8019f6c:	e057      	b.n	801a01e <USB_EPStartXfer+0xe7e>
 8019f6e:	683b      	ldr	r3, [r7, #0]
 8019f70:	691b      	ldr	r3, [r3, #16]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d10b      	bne.n	8019f8e <USB_EPStartXfer+0xdee>
 8019f76:	2198      	movs	r1, #152	@ 0x98
 8019f78:	187b      	adds	r3, r7, r1
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	881b      	ldrh	r3, [r3, #0]
 8019f7e:	b29b      	uxth	r3, r3
 8019f80:	4a14      	ldr	r2, [pc, #80]	@ (8019fd4 <USB_EPStartXfer+0xe34>)
 8019f82:	4313      	orrs	r3, r2
 8019f84:	b29a      	uxth	r2, r3
 8019f86:	187b      	adds	r3, r7, r1
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	801a      	strh	r2, [r3, #0]
 8019f8c:	e047      	b.n	801a01e <USB_EPStartXfer+0xe7e>
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	691b      	ldr	r3, [r3, #16]
 8019f92:	085b      	lsrs	r3, r3, #1
 8019f94:	21e0      	movs	r1, #224	@ 0xe0
 8019f96:	187a      	adds	r2, r7, r1
 8019f98:	6013      	str	r3, [r2, #0]
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	691b      	ldr	r3, [r3, #16]
 8019f9e:	2201      	movs	r2, #1
 8019fa0:	4013      	ands	r3, r2
 8019fa2:	d004      	beq.n	8019fae <USB_EPStartXfer+0xe0e>
 8019fa4:	187b      	adds	r3, r7, r1
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	3301      	adds	r3, #1
 8019faa:	187a      	adds	r2, r7, r1
 8019fac:	6013      	str	r3, [r2, #0]
 8019fae:	2198      	movs	r1, #152	@ 0x98
 8019fb0:	187b      	adds	r3, r7, r1
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	881b      	ldrh	r3, [r3, #0]
 8019fb6:	b29a      	uxth	r2, r3
 8019fb8:	23e0      	movs	r3, #224	@ 0xe0
 8019fba:	18fb      	adds	r3, r7, r3
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	029b      	lsls	r3, r3, #10
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	4313      	orrs	r3, r2
 8019fc6:	b29a      	uxth	r2, r3
 8019fc8:	187b      	adds	r3, r7, r1
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	801a      	strh	r2, [r3, #0]
 8019fce:	e026      	b.n	801a01e <USB_EPStartXfer+0xe7e>
 8019fd0:	00000406 	.word	0x00000406
 8019fd4:	ffff8000 	.word	0xffff8000
 8019fd8:	00000402 	.word	0x00000402
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	785b      	ldrb	r3, [r3, #1]
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d11c      	bne.n	801a01e <USB_EPStartXfer+0xe7e>
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	2250      	movs	r2, #80	@ 0x50
 8019fe8:	5a9b      	ldrh	r3, [r3, r2]
 8019fea:	b29b      	uxth	r3, r3
 8019fec:	001a      	movs	r2, r3
 8019fee:	21a4      	movs	r1, #164	@ 0xa4
 8019ff0:	187b      	adds	r3, r7, r1
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	189b      	adds	r3, r3, r2
 8019ff6:	187a      	adds	r2, r7, r1
 8019ff8:	6013      	str	r3, [r2, #0]
 8019ffa:	683b      	ldr	r3, [r7, #0]
 8019ffc:	781b      	ldrb	r3, [r3, #0]
 8019ffe:	00da      	lsls	r2, r3, #3
 801a000:	187b      	adds	r3, r7, r1
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	18d3      	adds	r3, r2, r3
 801a006:	4ad2      	ldr	r2, [pc, #840]	@ (801a350 <USB_EPStartXfer+0x11b0>)
 801a008:	4694      	mov	ip, r2
 801a00a:	4463      	add	r3, ip
 801a00c:	21a0      	movs	r1, #160	@ 0xa0
 801a00e:	187a      	adds	r2, r7, r1
 801a010:	6013      	str	r3, [r2, #0]
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	691b      	ldr	r3, [r3, #16]
 801a016:	b29a      	uxth	r2, r3
 801a018:	187b      	adds	r3, r7, r1
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a01e:	683b      	ldr	r3, [r7, #0]
 801a020:	69db      	ldr	r3, [r3, #28]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d100      	bne.n	801a028 <USB_EPStartXfer+0xe88>
 801a026:	e1c2      	b.n	801a3ae <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a028:	687a      	ldr	r2, [r7, #4]
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	781b      	ldrb	r3, [r3, #0]
 801a02e:	009b      	lsls	r3, r3, #2
 801a030:	18d2      	adds	r2, r2, r3
 801a032:	2196      	movs	r1, #150	@ 0x96
 801a034:	187b      	adds	r3, r7, r1
 801a036:	8812      	ldrh	r2, [r2, #0]
 801a038:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a03a:	187b      	adds	r3, r7, r1
 801a03c:	881a      	ldrh	r2, [r3, #0]
 801a03e:	2380      	movs	r3, #128	@ 0x80
 801a040:	01db      	lsls	r3, r3, #7
 801a042:	4013      	ands	r3, r2
 801a044:	d004      	beq.n	801a050 <USB_EPStartXfer+0xeb0>
 801a046:	187b      	adds	r3, r7, r1
 801a048:	881b      	ldrh	r3, [r3, #0]
 801a04a:	2240      	movs	r2, #64	@ 0x40
 801a04c:	4013      	ands	r3, r2
 801a04e:	d10d      	bne.n	801a06c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a050:	2196      	movs	r1, #150	@ 0x96
 801a052:	187b      	adds	r3, r7, r1
 801a054:	881a      	ldrh	r2, [r3, #0]
 801a056:	2380      	movs	r3, #128	@ 0x80
 801a058:	01db      	lsls	r3, r3, #7
 801a05a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a05c:	d000      	beq.n	801a060 <USB_EPStartXfer+0xec0>
 801a05e:	e1a6      	b.n	801a3ae <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a060:	187b      	adds	r3, r7, r1
 801a062:	881b      	ldrh	r3, [r3, #0]
 801a064:	2240      	movs	r2, #64	@ 0x40
 801a066:	4013      	ands	r3, r2
 801a068:	d000      	beq.n	801a06c <USB_EPStartXfer+0xecc>
 801a06a:	e1a0      	b.n	801a3ae <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801a06c:	687a      	ldr	r2, [r7, #4]
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	781b      	ldrb	r3, [r3, #0]
 801a072:	009b      	lsls	r3, r3, #2
 801a074:	18d3      	adds	r3, r2, r3
 801a076:	881b      	ldrh	r3, [r3, #0]
 801a078:	b29a      	uxth	r2, r3
 801a07a:	2094      	movs	r0, #148	@ 0x94
 801a07c:	183b      	adds	r3, r7, r0
 801a07e:	49b5      	ldr	r1, [pc, #724]	@ (801a354 <USB_EPStartXfer+0x11b4>)
 801a080:	400a      	ands	r2, r1
 801a082:	801a      	strh	r2, [r3, #0]
 801a084:	687a      	ldr	r2, [r7, #4]
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	781b      	ldrb	r3, [r3, #0]
 801a08a:	009b      	lsls	r3, r3, #2
 801a08c:	18d3      	adds	r3, r2, r3
 801a08e:	183a      	adds	r2, r7, r0
 801a090:	8812      	ldrh	r2, [r2, #0]
 801a092:	49b1      	ldr	r1, [pc, #708]	@ (801a358 <USB_EPStartXfer+0x11b8>)
 801a094:	430a      	orrs	r2, r1
 801a096:	b292      	uxth	r2, r2
 801a098:	801a      	strh	r2, [r3, #0]
 801a09a:	e188      	b.n	801a3ae <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a09c:	683b      	ldr	r3, [r7, #0]
 801a09e:	78db      	ldrb	r3, [r3, #3]
 801a0a0:	2b01      	cmp	r3, #1
 801a0a2:	d000      	beq.n	801a0a6 <USB_EPStartXfer+0xf06>
 801a0a4:	e181      	b.n	801a3aa <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	699a      	ldr	r2, [r3, #24]
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	691b      	ldr	r3, [r3, #16]
 801a0ae:	429a      	cmp	r2, r3
 801a0b0:	d90d      	bls.n	801a0ce <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	691b      	ldr	r3, [r3, #16]
 801a0b6:	1d7a      	adds	r2, r7, #5
 801a0b8:	32ff      	adds	r2, #255	@ 0xff
 801a0ba:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a0bc:	683b      	ldr	r3, [r7, #0]
 801a0be:	699a      	ldr	r2, [r3, #24]
 801a0c0:	1d7b      	adds	r3, r7, #5
 801a0c2:	33ff      	adds	r3, #255	@ 0xff
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	1ad2      	subs	r2, r2, r3
 801a0c8:	683b      	ldr	r3, [r7, #0]
 801a0ca:	619a      	str	r2, [r3, #24]
 801a0cc:	e007      	b.n	801a0de <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	699b      	ldr	r3, [r3, #24]
 801a0d2:	1d7a      	adds	r2, r7, #5
 801a0d4:	32ff      	adds	r2, #255	@ 0xff
 801a0d6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	2200      	movs	r2, #0
 801a0dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801a0de:	683b      	ldr	r3, [r7, #0]
 801a0e0:	785b      	ldrb	r3, [r3, #1]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d000      	beq.n	801a0e8 <USB_EPStartXfer+0xf48>
 801a0e6:	e082      	b.n	801a1ee <USB_EPStartXfer+0x104e>
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	21cc      	movs	r1, #204	@ 0xcc
 801a0ec:	187a      	adds	r2, r7, r1
 801a0ee:	6013      	str	r3, [r2, #0]
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	2250      	movs	r2, #80	@ 0x50
 801a0f4:	5a9b      	ldrh	r3, [r3, r2]
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	001a      	movs	r2, r3
 801a0fa:	187b      	adds	r3, r7, r1
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	189b      	adds	r3, r3, r2
 801a100:	187a      	adds	r2, r7, r1
 801a102:	6013      	str	r3, [r2, #0]
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	781b      	ldrb	r3, [r3, #0]
 801a108:	00da      	lsls	r2, r3, #3
 801a10a:	187b      	adds	r3, r7, r1
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	18d3      	adds	r3, r2, r3
 801a110:	4a92      	ldr	r2, [pc, #584]	@ (801a35c <USB_EPStartXfer+0x11bc>)
 801a112:	4694      	mov	ip, r2
 801a114:	4463      	add	r3, ip
 801a116:	21c8      	movs	r1, #200	@ 0xc8
 801a118:	187a      	adds	r2, r7, r1
 801a11a:	6013      	str	r3, [r2, #0]
 801a11c:	187b      	adds	r3, r7, r1
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	881b      	ldrh	r3, [r3, #0]
 801a122:	b29b      	uxth	r3, r3
 801a124:	059b      	lsls	r3, r3, #22
 801a126:	0d9b      	lsrs	r3, r3, #22
 801a128:	b29a      	uxth	r2, r3
 801a12a:	187b      	adds	r3, r7, r1
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	801a      	strh	r2, [r3, #0]
 801a130:	1d7b      	adds	r3, r7, #5
 801a132:	33ff      	adds	r3, #255	@ 0xff
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	2b3e      	cmp	r3, #62	@ 0x3e
 801a138:	d925      	bls.n	801a186 <USB_EPStartXfer+0xfe6>
 801a13a:	1d7b      	adds	r3, r7, #5
 801a13c:	33ff      	adds	r3, #255	@ 0xff
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	095b      	lsrs	r3, r3, #5
 801a142:	21dc      	movs	r1, #220	@ 0xdc
 801a144:	187a      	adds	r2, r7, r1
 801a146:	6013      	str	r3, [r2, #0]
 801a148:	1d7b      	adds	r3, r7, #5
 801a14a:	33ff      	adds	r3, #255	@ 0xff
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	221f      	movs	r2, #31
 801a150:	4013      	ands	r3, r2
 801a152:	d104      	bne.n	801a15e <USB_EPStartXfer+0xfbe>
 801a154:	187b      	adds	r3, r7, r1
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	3b01      	subs	r3, #1
 801a15a:	187a      	adds	r2, r7, r1
 801a15c:	6013      	str	r3, [r2, #0]
 801a15e:	21c8      	movs	r1, #200	@ 0xc8
 801a160:	187b      	adds	r3, r7, r1
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	881b      	ldrh	r3, [r3, #0]
 801a166:	b29a      	uxth	r2, r3
 801a168:	23dc      	movs	r3, #220	@ 0xdc
 801a16a:	18fb      	adds	r3, r7, r3
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	b29b      	uxth	r3, r3
 801a170:	029b      	lsls	r3, r3, #10
 801a172:	b29b      	uxth	r3, r3
 801a174:	4313      	orrs	r3, r2
 801a176:	b29b      	uxth	r3, r3
 801a178:	4a79      	ldr	r2, [pc, #484]	@ (801a360 <USB_EPStartXfer+0x11c0>)
 801a17a:	4313      	orrs	r3, r2
 801a17c:	b29a      	uxth	r2, r3
 801a17e:	187b      	adds	r3, r7, r1
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	801a      	strh	r2, [r3, #0]
 801a184:	e058      	b.n	801a238 <USB_EPStartXfer+0x1098>
 801a186:	1d7b      	adds	r3, r7, #5
 801a188:	33ff      	adds	r3, #255	@ 0xff
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d10b      	bne.n	801a1a8 <USB_EPStartXfer+0x1008>
 801a190:	21c8      	movs	r1, #200	@ 0xc8
 801a192:	187b      	adds	r3, r7, r1
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	881b      	ldrh	r3, [r3, #0]
 801a198:	b29b      	uxth	r3, r3
 801a19a:	4a71      	ldr	r2, [pc, #452]	@ (801a360 <USB_EPStartXfer+0x11c0>)
 801a19c:	4313      	orrs	r3, r2
 801a19e:	b29a      	uxth	r2, r3
 801a1a0:	187b      	adds	r3, r7, r1
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	801a      	strh	r2, [r3, #0]
 801a1a6:	e047      	b.n	801a238 <USB_EPStartXfer+0x1098>
 801a1a8:	1d7b      	adds	r3, r7, #5
 801a1aa:	33ff      	adds	r3, #255	@ 0xff
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	085b      	lsrs	r3, r3, #1
 801a1b0:	21dc      	movs	r1, #220	@ 0xdc
 801a1b2:	187a      	adds	r2, r7, r1
 801a1b4:	6013      	str	r3, [r2, #0]
 801a1b6:	1d7b      	adds	r3, r7, #5
 801a1b8:	33ff      	adds	r3, #255	@ 0xff
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	2201      	movs	r2, #1
 801a1be:	4013      	ands	r3, r2
 801a1c0:	d004      	beq.n	801a1cc <USB_EPStartXfer+0x102c>
 801a1c2:	187b      	adds	r3, r7, r1
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	3301      	adds	r3, #1
 801a1c8:	187a      	adds	r2, r7, r1
 801a1ca:	6013      	str	r3, [r2, #0]
 801a1cc:	21c8      	movs	r1, #200	@ 0xc8
 801a1ce:	187b      	adds	r3, r7, r1
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	881b      	ldrh	r3, [r3, #0]
 801a1d4:	b29a      	uxth	r2, r3
 801a1d6:	23dc      	movs	r3, #220	@ 0xdc
 801a1d8:	18fb      	adds	r3, r7, r3
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	b29b      	uxth	r3, r3
 801a1de:	029b      	lsls	r3, r3, #10
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	4313      	orrs	r3, r2
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	187b      	adds	r3, r7, r1
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	801a      	strh	r2, [r3, #0]
 801a1ec:	e024      	b.n	801a238 <USB_EPStartXfer+0x1098>
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	785b      	ldrb	r3, [r3, #1]
 801a1f2:	2b01      	cmp	r3, #1
 801a1f4:	d120      	bne.n	801a238 <USB_EPStartXfer+0x1098>
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	21d4      	movs	r1, #212	@ 0xd4
 801a1fa:	187a      	adds	r2, r7, r1
 801a1fc:	6013      	str	r3, [r2, #0]
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2250      	movs	r2, #80	@ 0x50
 801a202:	5a9b      	ldrh	r3, [r3, r2]
 801a204:	b29b      	uxth	r3, r3
 801a206:	001a      	movs	r2, r3
 801a208:	187b      	adds	r3, r7, r1
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	189b      	adds	r3, r3, r2
 801a20e:	187a      	adds	r2, r7, r1
 801a210:	6013      	str	r3, [r2, #0]
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	781b      	ldrb	r3, [r3, #0]
 801a216:	00da      	lsls	r2, r3, #3
 801a218:	187b      	adds	r3, r7, r1
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	18d3      	adds	r3, r2, r3
 801a21e:	4a4f      	ldr	r2, [pc, #316]	@ (801a35c <USB_EPStartXfer+0x11bc>)
 801a220:	4694      	mov	ip, r2
 801a222:	4463      	add	r3, ip
 801a224:	21d0      	movs	r1, #208	@ 0xd0
 801a226:	187a      	adds	r2, r7, r1
 801a228:	6013      	str	r3, [r2, #0]
 801a22a:	1d7b      	adds	r3, r7, #5
 801a22c:	33ff      	adds	r3, #255	@ 0xff
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	b29a      	uxth	r2, r3
 801a232:	187b      	adds	r3, r7, r1
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	801a      	strh	r2, [r3, #0]
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	22c4      	movs	r2, #196	@ 0xc4
 801a23c:	18ba      	adds	r2, r7, r2
 801a23e:	6013      	str	r3, [r2, #0]
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	785b      	ldrb	r3, [r3, #1]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d000      	beq.n	801a24a <USB_EPStartXfer+0x10aa>
 801a248:	e08c      	b.n	801a364 <USB_EPStartXfer+0x11c4>
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	21bc      	movs	r1, #188	@ 0xbc
 801a24e:	187a      	adds	r2, r7, r1
 801a250:	6013      	str	r3, [r2, #0]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	2250      	movs	r2, #80	@ 0x50
 801a256:	5a9b      	ldrh	r3, [r3, r2]
 801a258:	b29b      	uxth	r3, r3
 801a25a:	001a      	movs	r2, r3
 801a25c:	187b      	adds	r3, r7, r1
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	189b      	adds	r3, r3, r2
 801a262:	187a      	adds	r2, r7, r1
 801a264:	6013      	str	r3, [r2, #0]
 801a266:	683b      	ldr	r3, [r7, #0]
 801a268:	781b      	ldrb	r3, [r3, #0]
 801a26a:	00da      	lsls	r2, r3, #3
 801a26c:	187b      	adds	r3, r7, r1
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	18d3      	adds	r3, r2, r3
 801a272:	4a37      	ldr	r2, [pc, #220]	@ (801a350 <USB_EPStartXfer+0x11b0>)
 801a274:	4694      	mov	ip, r2
 801a276:	4463      	add	r3, ip
 801a278:	21b8      	movs	r1, #184	@ 0xb8
 801a27a:	187a      	adds	r2, r7, r1
 801a27c:	6013      	str	r3, [r2, #0]
 801a27e:	187b      	adds	r3, r7, r1
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	881b      	ldrh	r3, [r3, #0]
 801a284:	b29b      	uxth	r3, r3
 801a286:	059b      	lsls	r3, r3, #22
 801a288:	0d9b      	lsrs	r3, r3, #22
 801a28a:	b29a      	uxth	r2, r3
 801a28c:	187b      	adds	r3, r7, r1
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	801a      	strh	r2, [r3, #0]
 801a292:	1d7b      	adds	r3, r7, #5
 801a294:	33ff      	adds	r3, #255	@ 0xff
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	2b3e      	cmp	r3, #62	@ 0x3e
 801a29a:	d925      	bls.n	801a2e8 <USB_EPStartXfer+0x1148>
 801a29c:	1d7b      	adds	r3, r7, #5
 801a29e:	33ff      	adds	r3, #255	@ 0xff
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	095b      	lsrs	r3, r3, #5
 801a2a4:	21d8      	movs	r1, #216	@ 0xd8
 801a2a6:	187a      	adds	r2, r7, r1
 801a2a8:	6013      	str	r3, [r2, #0]
 801a2aa:	1d7b      	adds	r3, r7, #5
 801a2ac:	33ff      	adds	r3, #255	@ 0xff
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	221f      	movs	r2, #31
 801a2b2:	4013      	ands	r3, r2
 801a2b4:	d104      	bne.n	801a2c0 <USB_EPStartXfer+0x1120>
 801a2b6:	187b      	adds	r3, r7, r1
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	3b01      	subs	r3, #1
 801a2bc:	187a      	adds	r2, r7, r1
 801a2be:	6013      	str	r3, [r2, #0]
 801a2c0:	21b8      	movs	r1, #184	@ 0xb8
 801a2c2:	187b      	adds	r3, r7, r1
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	881b      	ldrh	r3, [r3, #0]
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	23d8      	movs	r3, #216	@ 0xd8
 801a2cc:	18fb      	adds	r3, r7, r3
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	b29b      	uxth	r3, r3
 801a2d2:	029b      	lsls	r3, r3, #10
 801a2d4:	b29b      	uxth	r3, r3
 801a2d6:	4313      	orrs	r3, r2
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	4a21      	ldr	r2, [pc, #132]	@ (801a360 <USB_EPStartXfer+0x11c0>)
 801a2dc:	4313      	orrs	r3, r2
 801a2de:	b29a      	uxth	r2, r3
 801a2e0:	187b      	adds	r3, r7, r1
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	801a      	strh	r2, [r3, #0]
 801a2e6:	e062      	b.n	801a3ae <USB_EPStartXfer+0x120e>
 801a2e8:	1d7b      	adds	r3, r7, #5
 801a2ea:	33ff      	adds	r3, #255	@ 0xff
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d10b      	bne.n	801a30a <USB_EPStartXfer+0x116a>
 801a2f2:	21b8      	movs	r1, #184	@ 0xb8
 801a2f4:	187b      	adds	r3, r7, r1
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	881b      	ldrh	r3, [r3, #0]
 801a2fa:	b29b      	uxth	r3, r3
 801a2fc:	4a18      	ldr	r2, [pc, #96]	@ (801a360 <USB_EPStartXfer+0x11c0>)
 801a2fe:	4313      	orrs	r3, r2
 801a300:	b29a      	uxth	r2, r3
 801a302:	187b      	adds	r3, r7, r1
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	801a      	strh	r2, [r3, #0]
 801a308:	e051      	b.n	801a3ae <USB_EPStartXfer+0x120e>
 801a30a:	1d7b      	adds	r3, r7, #5
 801a30c:	33ff      	adds	r3, #255	@ 0xff
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	085b      	lsrs	r3, r3, #1
 801a312:	21d8      	movs	r1, #216	@ 0xd8
 801a314:	187a      	adds	r2, r7, r1
 801a316:	6013      	str	r3, [r2, #0]
 801a318:	1d7b      	adds	r3, r7, #5
 801a31a:	33ff      	adds	r3, #255	@ 0xff
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	2201      	movs	r2, #1
 801a320:	4013      	ands	r3, r2
 801a322:	d004      	beq.n	801a32e <USB_EPStartXfer+0x118e>
 801a324:	187b      	adds	r3, r7, r1
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	3301      	adds	r3, #1
 801a32a:	187a      	adds	r2, r7, r1
 801a32c:	6013      	str	r3, [r2, #0]
 801a32e:	21b8      	movs	r1, #184	@ 0xb8
 801a330:	187b      	adds	r3, r7, r1
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	881b      	ldrh	r3, [r3, #0]
 801a336:	b29a      	uxth	r2, r3
 801a338:	23d8      	movs	r3, #216	@ 0xd8
 801a33a:	18fb      	adds	r3, r7, r3
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	b29b      	uxth	r3, r3
 801a340:	029b      	lsls	r3, r3, #10
 801a342:	b29b      	uxth	r3, r3
 801a344:	4313      	orrs	r3, r2
 801a346:	b29a      	uxth	r2, r3
 801a348:	187b      	adds	r3, r7, r1
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	801a      	strh	r2, [r3, #0]
 801a34e:	e02e      	b.n	801a3ae <USB_EPStartXfer+0x120e>
 801a350:	00000406 	.word	0x00000406
 801a354:	ffff8f8f 	.word	0xffff8f8f
 801a358:	ffff80c0 	.word	0xffff80c0
 801a35c:	00000402 	.word	0x00000402
 801a360:	ffff8000 	.word	0xffff8000
 801a364:	683b      	ldr	r3, [r7, #0]
 801a366:	785b      	ldrb	r3, [r3, #1]
 801a368:	2b01      	cmp	r3, #1
 801a36a:	d120      	bne.n	801a3ae <USB_EPStartXfer+0x120e>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	2250      	movs	r2, #80	@ 0x50
 801a370:	5a9b      	ldrh	r3, [r3, r2]
 801a372:	b29b      	uxth	r3, r3
 801a374:	001a      	movs	r2, r3
 801a376:	21c4      	movs	r1, #196	@ 0xc4
 801a378:	187b      	adds	r3, r7, r1
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	189b      	adds	r3, r3, r2
 801a37e:	187a      	adds	r2, r7, r1
 801a380:	6013      	str	r3, [r2, #0]
 801a382:	683b      	ldr	r3, [r7, #0]
 801a384:	781b      	ldrb	r3, [r3, #0]
 801a386:	00da      	lsls	r2, r3, #3
 801a388:	187b      	adds	r3, r7, r1
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	18d3      	adds	r3, r2, r3
 801a38e:	4a1d      	ldr	r2, [pc, #116]	@ (801a404 <USB_EPStartXfer+0x1264>)
 801a390:	4694      	mov	ip, r2
 801a392:	4463      	add	r3, ip
 801a394:	21c0      	movs	r1, #192	@ 0xc0
 801a396:	187a      	adds	r2, r7, r1
 801a398:	6013      	str	r3, [r2, #0]
 801a39a:	1d7b      	adds	r3, r7, #5
 801a39c:	33ff      	adds	r3, #255	@ 0xff
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	b29a      	uxth	r2, r3
 801a3a2:	187b      	adds	r3, r7, r1
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	801a      	strh	r2, [r3, #0]
 801a3a8:	e001      	b.n	801a3ae <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801a3aa:	2301      	movs	r3, #1
 801a3ac:	e025      	b.n	801a3fa <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a3ae:	687a      	ldr	r2, [r7, #4]
 801a3b0:	683b      	ldr	r3, [r7, #0]
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	009b      	lsls	r3, r3, #2
 801a3b6:	18d3      	adds	r3, r2, r3
 801a3b8:	881b      	ldrh	r3, [r3, #0]
 801a3ba:	b29a      	uxth	r2, r3
 801a3bc:	208a      	movs	r0, #138	@ 0x8a
 801a3be:	183b      	adds	r3, r7, r0
 801a3c0:	4911      	ldr	r1, [pc, #68]	@ (801a408 <USB_EPStartXfer+0x1268>)
 801a3c2:	400a      	ands	r2, r1
 801a3c4:	801a      	strh	r2, [r3, #0]
 801a3c6:	183b      	adds	r3, r7, r0
 801a3c8:	183a      	adds	r2, r7, r0
 801a3ca:	8812      	ldrh	r2, [r2, #0]
 801a3cc:	2180      	movs	r1, #128	@ 0x80
 801a3ce:	0149      	lsls	r1, r1, #5
 801a3d0:	404a      	eors	r2, r1
 801a3d2:	801a      	strh	r2, [r3, #0]
 801a3d4:	183b      	adds	r3, r7, r0
 801a3d6:	183a      	adds	r2, r7, r0
 801a3d8:	8812      	ldrh	r2, [r2, #0]
 801a3da:	2180      	movs	r1, #128	@ 0x80
 801a3dc:	0189      	lsls	r1, r1, #6
 801a3de:	404a      	eors	r2, r1
 801a3e0:	801a      	strh	r2, [r3, #0]
 801a3e2:	687a      	ldr	r2, [r7, #4]
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	18d3      	adds	r3, r2, r3
 801a3ec:	183a      	adds	r2, r7, r0
 801a3ee:	8812      	ldrh	r2, [r2, #0]
 801a3f0:	4906      	ldr	r1, [pc, #24]	@ (801a40c <USB_EPStartXfer+0x126c>)
 801a3f2:	430a      	orrs	r2, r1
 801a3f4:	b292      	uxth	r2, r2
 801a3f6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a3f8:	2300      	movs	r3, #0
}
 801a3fa:	0018      	movs	r0, r3
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	b043      	add	sp, #268	@ 0x10c
 801a400:	bd90      	pop	{r4, r7, pc}
 801a402:	46c0      	nop			@ (mov r8, r8)
 801a404:	00000406 	.word	0x00000406
 801a408:	ffffbf8f 	.word	0xffffbf8f
 801a40c:	ffff8080 	.word	0xffff8080

0801a410 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b084      	sub	sp, #16
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
 801a418:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801a41a:	683b      	ldr	r3, [r7, #0]
 801a41c:	785b      	ldrb	r3, [r3, #1]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d01d      	beq.n	801a45e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801a422:	687a      	ldr	r2, [r7, #4]
 801a424:	683b      	ldr	r3, [r7, #0]
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	009b      	lsls	r3, r3, #2
 801a42a:	18d3      	adds	r3, r2, r3
 801a42c:	881b      	ldrh	r3, [r3, #0]
 801a42e:	b29a      	uxth	r2, r3
 801a430:	200c      	movs	r0, #12
 801a432:	183b      	adds	r3, r7, r0
 801a434:	491b      	ldr	r1, [pc, #108]	@ (801a4a4 <USB_EPSetStall+0x94>)
 801a436:	400a      	ands	r2, r1
 801a438:	801a      	strh	r2, [r3, #0]
 801a43a:	183b      	adds	r3, r7, r0
 801a43c:	183a      	adds	r2, r7, r0
 801a43e:	8812      	ldrh	r2, [r2, #0]
 801a440:	2110      	movs	r1, #16
 801a442:	404a      	eors	r2, r1
 801a444:	801a      	strh	r2, [r3, #0]
 801a446:	687a      	ldr	r2, [r7, #4]
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	009b      	lsls	r3, r3, #2
 801a44e:	18d3      	adds	r3, r2, r3
 801a450:	183a      	adds	r2, r7, r0
 801a452:	8812      	ldrh	r2, [r2, #0]
 801a454:	4914      	ldr	r1, [pc, #80]	@ (801a4a8 <USB_EPSetStall+0x98>)
 801a456:	430a      	orrs	r2, r1
 801a458:	b292      	uxth	r2, r2
 801a45a:	801a      	strh	r2, [r3, #0]
 801a45c:	e01d      	b.n	801a49a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801a45e:	687a      	ldr	r2, [r7, #4]
 801a460:	683b      	ldr	r3, [r7, #0]
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	009b      	lsls	r3, r3, #2
 801a466:	18d3      	adds	r3, r2, r3
 801a468:	881b      	ldrh	r3, [r3, #0]
 801a46a:	b29a      	uxth	r2, r3
 801a46c:	200e      	movs	r0, #14
 801a46e:	183b      	adds	r3, r7, r0
 801a470:	490e      	ldr	r1, [pc, #56]	@ (801a4ac <USB_EPSetStall+0x9c>)
 801a472:	400a      	ands	r2, r1
 801a474:	801a      	strh	r2, [r3, #0]
 801a476:	183b      	adds	r3, r7, r0
 801a478:	183a      	adds	r2, r7, r0
 801a47a:	8812      	ldrh	r2, [r2, #0]
 801a47c:	2180      	movs	r1, #128	@ 0x80
 801a47e:	0149      	lsls	r1, r1, #5
 801a480:	404a      	eors	r2, r1
 801a482:	801a      	strh	r2, [r3, #0]
 801a484:	687a      	ldr	r2, [r7, #4]
 801a486:	683b      	ldr	r3, [r7, #0]
 801a488:	781b      	ldrb	r3, [r3, #0]
 801a48a:	009b      	lsls	r3, r3, #2
 801a48c:	18d3      	adds	r3, r2, r3
 801a48e:	183a      	adds	r2, r7, r0
 801a490:	8812      	ldrh	r2, [r2, #0]
 801a492:	4905      	ldr	r1, [pc, #20]	@ (801a4a8 <USB_EPSetStall+0x98>)
 801a494:	430a      	orrs	r2, r1
 801a496:	b292      	uxth	r2, r2
 801a498:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a49a:	2300      	movs	r3, #0
}
 801a49c:	0018      	movs	r0, r3
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	b004      	add	sp, #16
 801a4a2:	bd80      	pop	{r7, pc}
 801a4a4:	ffff8fbf 	.word	0xffff8fbf
 801a4a8:	ffff8080 	.word	0xffff8080
 801a4ac:	ffffbf8f 	.word	0xffffbf8f

0801a4b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b086      	sub	sp, #24
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
 801a4b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a4ba:	683b      	ldr	r3, [r7, #0]
 801a4bc:	7b1b      	ldrb	r3, [r3, #12]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d000      	beq.n	801a4c4 <USB_EPClearStall+0x14>
 801a4c2:	e095      	b.n	801a5f0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801a4c4:	683b      	ldr	r3, [r7, #0]
 801a4c6:	785b      	ldrb	r3, [r3, #1]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d046      	beq.n	801a55a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	781b      	ldrb	r3, [r3, #0]
 801a4d2:	009b      	lsls	r3, r3, #2
 801a4d4:	18d2      	adds	r2, r2, r3
 801a4d6:	2110      	movs	r1, #16
 801a4d8:	187b      	adds	r3, r7, r1
 801a4da:	8812      	ldrh	r2, [r2, #0]
 801a4dc:	801a      	strh	r2, [r3, #0]
 801a4de:	187b      	adds	r3, r7, r1
 801a4e0:	881b      	ldrh	r3, [r3, #0]
 801a4e2:	2240      	movs	r2, #64	@ 0x40
 801a4e4:	4013      	ands	r3, r2
 801a4e6:	d016      	beq.n	801a516 <USB_EPClearStall+0x66>
 801a4e8:	687a      	ldr	r2, [r7, #4]
 801a4ea:	683b      	ldr	r3, [r7, #0]
 801a4ec:	781b      	ldrb	r3, [r3, #0]
 801a4ee:	009b      	lsls	r3, r3, #2
 801a4f0:	18d3      	adds	r3, r2, r3
 801a4f2:	881b      	ldrh	r3, [r3, #0]
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	200e      	movs	r0, #14
 801a4f8:	183b      	adds	r3, r7, r0
 801a4fa:	4940      	ldr	r1, [pc, #256]	@ (801a5fc <USB_EPClearStall+0x14c>)
 801a4fc:	400a      	ands	r2, r1
 801a4fe:	801a      	strh	r2, [r3, #0]
 801a500:	687a      	ldr	r2, [r7, #4]
 801a502:	683b      	ldr	r3, [r7, #0]
 801a504:	781b      	ldrb	r3, [r3, #0]
 801a506:	009b      	lsls	r3, r3, #2
 801a508:	18d3      	adds	r3, r2, r3
 801a50a:	183a      	adds	r2, r7, r0
 801a50c:	8812      	ldrh	r2, [r2, #0]
 801a50e:	493c      	ldr	r1, [pc, #240]	@ (801a600 <USB_EPClearStall+0x150>)
 801a510:	430a      	orrs	r2, r1
 801a512:	b292      	uxth	r2, r2
 801a514:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a516:	683b      	ldr	r3, [r7, #0]
 801a518:	78db      	ldrb	r3, [r3, #3]
 801a51a:	2b01      	cmp	r3, #1
 801a51c:	d068      	beq.n	801a5f0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a51e:	687a      	ldr	r2, [r7, #4]
 801a520:	683b      	ldr	r3, [r7, #0]
 801a522:	781b      	ldrb	r3, [r3, #0]
 801a524:	009b      	lsls	r3, r3, #2
 801a526:	18d3      	adds	r3, r2, r3
 801a528:	881b      	ldrh	r3, [r3, #0]
 801a52a:	b29a      	uxth	r2, r3
 801a52c:	200c      	movs	r0, #12
 801a52e:	183b      	adds	r3, r7, r0
 801a530:	4934      	ldr	r1, [pc, #208]	@ (801a604 <USB_EPClearStall+0x154>)
 801a532:	400a      	ands	r2, r1
 801a534:	801a      	strh	r2, [r3, #0]
 801a536:	183b      	adds	r3, r7, r0
 801a538:	183a      	adds	r2, r7, r0
 801a53a:	8812      	ldrh	r2, [r2, #0]
 801a53c:	2120      	movs	r1, #32
 801a53e:	404a      	eors	r2, r1
 801a540:	801a      	strh	r2, [r3, #0]
 801a542:	687a      	ldr	r2, [r7, #4]
 801a544:	683b      	ldr	r3, [r7, #0]
 801a546:	781b      	ldrb	r3, [r3, #0]
 801a548:	009b      	lsls	r3, r3, #2
 801a54a:	18d3      	adds	r3, r2, r3
 801a54c:	183a      	adds	r2, r7, r0
 801a54e:	8812      	ldrh	r2, [r2, #0]
 801a550:	492d      	ldr	r1, [pc, #180]	@ (801a608 <USB_EPClearStall+0x158>)
 801a552:	430a      	orrs	r2, r1
 801a554:	b292      	uxth	r2, r2
 801a556:	801a      	strh	r2, [r3, #0]
 801a558:	e04a      	b.n	801a5f0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a55a:	687a      	ldr	r2, [r7, #4]
 801a55c:	683b      	ldr	r3, [r7, #0]
 801a55e:	781b      	ldrb	r3, [r3, #0]
 801a560:	009b      	lsls	r3, r3, #2
 801a562:	18d2      	adds	r2, r2, r3
 801a564:	2116      	movs	r1, #22
 801a566:	187b      	adds	r3, r7, r1
 801a568:	8812      	ldrh	r2, [r2, #0]
 801a56a:	801a      	strh	r2, [r3, #0]
 801a56c:	187b      	adds	r3, r7, r1
 801a56e:	881a      	ldrh	r2, [r3, #0]
 801a570:	2380      	movs	r3, #128	@ 0x80
 801a572:	01db      	lsls	r3, r3, #7
 801a574:	4013      	ands	r3, r2
 801a576:	d016      	beq.n	801a5a6 <USB_EPClearStall+0xf6>
 801a578:	687a      	ldr	r2, [r7, #4]
 801a57a:	683b      	ldr	r3, [r7, #0]
 801a57c:	781b      	ldrb	r3, [r3, #0]
 801a57e:	009b      	lsls	r3, r3, #2
 801a580:	18d3      	adds	r3, r2, r3
 801a582:	881b      	ldrh	r3, [r3, #0]
 801a584:	b29a      	uxth	r2, r3
 801a586:	2014      	movs	r0, #20
 801a588:	183b      	adds	r3, r7, r0
 801a58a:	491c      	ldr	r1, [pc, #112]	@ (801a5fc <USB_EPClearStall+0x14c>)
 801a58c:	400a      	ands	r2, r1
 801a58e:	801a      	strh	r2, [r3, #0]
 801a590:	687a      	ldr	r2, [r7, #4]
 801a592:	683b      	ldr	r3, [r7, #0]
 801a594:	781b      	ldrb	r3, [r3, #0]
 801a596:	009b      	lsls	r3, r3, #2
 801a598:	18d3      	adds	r3, r2, r3
 801a59a:	183a      	adds	r2, r7, r0
 801a59c:	8812      	ldrh	r2, [r2, #0]
 801a59e:	491b      	ldr	r1, [pc, #108]	@ (801a60c <USB_EPClearStall+0x15c>)
 801a5a0:	430a      	orrs	r2, r1
 801a5a2:	b292      	uxth	r2, r2
 801a5a4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a5a6:	687a      	ldr	r2, [r7, #4]
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	009b      	lsls	r3, r3, #2
 801a5ae:	18d3      	adds	r3, r2, r3
 801a5b0:	881b      	ldrh	r3, [r3, #0]
 801a5b2:	b29a      	uxth	r2, r3
 801a5b4:	2012      	movs	r0, #18
 801a5b6:	183b      	adds	r3, r7, r0
 801a5b8:	4915      	ldr	r1, [pc, #84]	@ (801a610 <USB_EPClearStall+0x160>)
 801a5ba:	400a      	ands	r2, r1
 801a5bc:	801a      	strh	r2, [r3, #0]
 801a5be:	183b      	adds	r3, r7, r0
 801a5c0:	183a      	adds	r2, r7, r0
 801a5c2:	8812      	ldrh	r2, [r2, #0]
 801a5c4:	2180      	movs	r1, #128	@ 0x80
 801a5c6:	0149      	lsls	r1, r1, #5
 801a5c8:	404a      	eors	r2, r1
 801a5ca:	801a      	strh	r2, [r3, #0]
 801a5cc:	183b      	adds	r3, r7, r0
 801a5ce:	183a      	adds	r2, r7, r0
 801a5d0:	8812      	ldrh	r2, [r2, #0]
 801a5d2:	2180      	movs	r1, #128	@ 0x80
 801a5d4:	0189      	lsls	r1, r1, #6
 801a5d6:	404a      	eors	r2, r1
 801a5d8:	801a      	strh	r2, [r3, #0]
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	781b      	ldrb	r3, [r3, #0]
 801a5e0:	009b      	lsls	r3, r3, #2
 801a5e2:	18d3      	adds	r3, r2, r3
 801a5e4:	183a      	adds	r2, r7, r0
 801a5e6:	8812      	ldrh	r2, [r2, #0]
 801a5e8:	4907      	ldr	r1, [pc, #28]	@ (801a608 <USB_EPClearStall+0x158>)
 801a5ea:	430a      	orrs	r2, r1
 801a5ec:	b292      	uxth	r2, r2
 801a5ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a5f0:	2300      	movs	r3, #0
}
 801a5f2:	0018      	movs	r0, r3
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	b006      	add	sp, #24
 801a5f8:	bd80      	pop	{r7, pc}
 801a5fa:	46c0      	nop			@ (mov r8, r8)
 801a5fc:	ffff8f8f 	.word	0xffff8f8f
 801a600:	ffff80c0 	.word	0xffff80c0
 801a604:	ffff8fbf 	.word	0xffff8fbf
 801a608:	ffff8080 	.word	0xffff8080
 801a60c:	ffffc080 	.word	0xffffc080
 801a610:	ffffbf8f 	.word	0xffffbf8f

0801a614 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b082      	sub	sp, #8
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
 801a61c:	000a      	movs	r2, r1
 801a61e:	1cfb      	adds	r3, r7, #3
 801a620:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a622:	1cfb      	adds	r3, r7, #3
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d103      	bne.n	801a632 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	224c      	movs	r2, #76	@ 0x4c
 801a62e:	2180      	movs	r1, #128	@ 0x80
 801a630:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a632:	2300      	movs	r3, #0
}
 801a634:	0018      	movs	r0, r3
 801a636:	46bd      	mov	sp, r7
 801a638:	b002      	add	sp, #8
 801a63a:	bd80      	pop	{r7, pc}

0801a63c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b082      	sub	sp, #8
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	2258      	movs	r2, #88	@ 0x58
 801a648:	5a9b      	ldrh	r3, [r3, r2]
 801a64a:	b29b      	uxth	r3, r3
 801a64c:	4a05      	ldr	r2, [pc, #20]	@ (801a664 <USB_DevConnect+0x28>)
 801a64e:	4313      	orrs	r3, r2
 801a650:	b299      	uxth	r1, r3
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	2258      	movs	r2, #88	@ 0x58
 801a656:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a658:	2300      	movs	r3, #0
}
 801a65a:	0018      	movs	r0, r3
 801a65c:	46bd      	mov	sp, r7
 801a65e:	b002      	add	sp, #8
 801a660:	bd80      	pop	{r7, pc}
 801a662:	46c0      	nop			@ (mov r8, r8)
 801a664:	ffff8000 	.word	0xffff8000

0801a668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b084      	sub	sp, #16
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	2244      	movs	r2, #68	@ 0x44
 801a674:	5a9b      	ldrh	r3, [r3, r2]
 801a676:	b29b      	uxth	r3, r3
 801a678:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a67a:	68fb      	ldr	r3, [r7, #12]
}
 801a67c:	0018      	movs	r0, r3
 801a67e:	46bd      	mov	sp, r7
 801a680:	b004      	add	sp, #16
 801a682:	bd80      	pop	{r7, pc}

0801a684 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a684:	b580      	push	{r7, lr}
 801a686:	b08a      	sub	sp, #40	@ 0x28
 801a688:	af00      	add	r7, sp, #0
 801a68a:	60f8      	str	r0, [r7, #12]
 801a68c:	60b9      	str	r1, [r7, #8]
 801a68e:	0019      	movs	r1, r3
 801a690:	1dbb      	adds	r3, r7, #6
 801a692:	801a      	strh	r2, [r3, #0]
 801a694:	1d3b      	adds	r3, r7, #4
 801a696:	1c0a      	adds	r2, r1, #0
 801a698:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a69a:	1d3b      	adds	r3, r7, #4
 801a69c:	881b      	ldrh	r3, [r3, #0]
 801a69e:	3301      	adds	r3, #1
 801a6a0:	085b      	lsrs	r3, r3, #1
 801a6a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a6a8:	68bb      	ldr	r3, [r7, #8]
 801a6aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a6ac:	1dbb      	adds	r3, r7, #6
 801a6ae:	881a      	ldrh	r2, [r3, #0]
 801a6b0:	697b      	ldr	r3, [r7, #20]
 801a6b2:	18d3      	adds	r3, r2, r3
 801a6b4:	2280      	movs	r2, #128	@ 0x80
 801a6b6:	00d2      	lsls	r2, r2, #3
 801a6b8:	4694      	mov	ip, r2
 801a6ba:	4463      	add	r3, ip
 801a6bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a6be:	69bb      	ldr	r3, [r7, #24]
 801a6c0:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6c2:	e020      	b.n	801a706 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a6c4:	69fb      	ldr	r3, [r7, #28]
 801a6c6:	781a      	ldrb	r2, [r3, #0]
 801a6c8:	2112      	movs	r1, #18
 801a6ca:	187b      	adds	r3, r7, r1
 801a6cc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a6ce:	69fb      	ldr	r3, [r7, #28]
 801a6d0:	3301      	adds	r3, #1
 801a6d2:	781b      	ldrb	r3, [r3, #0]
 801a6d4:	021b      	lsls	r3, r3, #8
 801a6d6:	b21a      	sxth	r2, r3
 801a6d8:	187b      	adds	r3, r7, r1
 801a6da:	2000      	movs	r0, #0
 801a6dc:	5e1b      	ldrsh	r3, [r3, r0]
 801a6de:	4313      	orrs	r3, r2
 801a6e0:	b21a      	sxth	r2, r3
 801a6e2:	187b      	adds	r3, r7, r1
 801a6e4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a6e6:	6a3b      	ldr	r3, [r7, #32]
 801a6e8:	187a      	adds	r2, r7, r1
 801a6ea:	8812      	ldrh	r2, [r2, #0]
 801a6ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a6ee:	6a3b      	ldr	r3, [r7, #32]
 801a6f0:	3302      	adds	r3, #2
 801a6f2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801a6f4:	69fb      	ldr	r3, [r7, #28]
 801a6f6:	3301      	adds	r3, #1
 801a6f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801a6fa:	69fb      	ldr	r3, [r7, #28]
 801a6fc:	3301      	adds	r3, #1
 801a6fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a702:	3b01      	subs	r3, #1
 801a704:	627b      	str	r3, [r7, #36]	@ 0x24
 801a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d1db      	bne.n	801a6c4 <USB_WritePMA+0x40>
  }
}
 801a70c:	46c0      	nop			@ (mov r8, r8)
 801a70e:	46c0      	nop			@ (mov r8, r8)
 801a710:	46bd      	mov	sp, r7
 801a712:	b00a      	add	sp, #40	@ 0x28
 801a714:	bd80      	pop	{r7, pc}

0801a716 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a716:	b580      	push	{r7, lr}
 801a718:	b08a      	sub	sp, #40	@ 0x28
 801a71a:	af00      	add	r7, sp, #0
 801a71c:	60f8      	str	r0, [r7, #12]
 801a71e:	60b9      	str	r1, [r7, #8]
 801a720:	0019      	movs	r1, r3
 801a722:	1dbb      	adds	r3, r7, #6
 801a724:	801a      	strh	r2, [r3, #0]
 801a726:	1d3b      	adds	r3, r7, #4
 801a728:	1c0a      	adds	r2, r1, #0
 801a72a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801a72c:	1d3b      	adds	r3, r7, #4
 801a72e:	881b      	ldrh	r3, [r3, #0]
 801a730:	085b      	lsrs	r3, r3, #1
 801a732:	b29b      	uxth	r3, r3
 801a734:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a73e:	1dbb      	adds	r3, r7, #6
 801a740:	881a      	ldrh	r2, [r3, #0]
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	18d3      	adds	r3, r2, r3
 801a746:	2280      	movs	r2, #128	@ 0x80
 801a748:	00d2      	lsls	r2, r2, #3
 801a74a:	4694      	mov	ip, r2
 801a74c:	4463      	add	r3, ip
 801a74e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a750:	69bb      	ldr	r3, [r7, #24]
 801a752:	627b      	str	r3, [r7, #36]	@ 0x24
 801a754:	e018      	b.n	801a788 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801a756:	6a3b      	ldr	r3, [r7, #32]
 801a758:	881b      	ldrh	r3, [r3, #0]
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801a75e:	6a3b      	ldr	r3, [r7, #32]
 801a760:	3302      	adds	r3, #2
 801a762:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	b2da      	uxtb	r2, r3
 801a768:	69fb      	ldr	r3, [r7, #28]
 801a76a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a76c:	69fb      	ldr	r3, [r7, #28]
 801a76e:	3301      	adds	r3, #1
 801a770:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801a772:	693b      	ldr	r3, [r7, #16]
 801a774:	0a1b      	lsrs	r3, r3, #8
 801a776:	b2da      	uxtb	r2, r3
 801a778:	69fb      	ldr	r3, [r7, #28]
 801a77a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a77c:	69fb      	ldr	r3, [r7, #28]
 801a77e:	3301      	adds	r3, #1
 801a780:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a784:	3b01      	subs	r3, #1
 801a786:	627b      	str	r3, [r7, #36]	@ 0x24
 801a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d1e3      	bne.n	801a756 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801a78e:	1d3b      	adds	r3, r7, #4
 801a790:	881b      	ldrh	r3, [r3, #0]
 801a792:	2201      	movs	r2, #1
 801a794:	4013      	ands	r3, r2
 801a796:	b29b      	uxth	r3, r3
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d007      	beq.n	801a7ac <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801a79c:	6a3b      	ldr	r3, [r7, #32]
 801a79e:	881b      	ldrh	r3, [r3, #0]
 801a7a0:	b29b      	uxth	r3, r3
 801a7a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a7a4:	693b      	ldr	r3, [r7, #16]
 801a7a6:	b2da      	uxtb	r2, r3
 801a7a8:	69fb      	ldr	r3, [r7, #28]
 801a7aa:	701a      	strb	r2, [r3, #0]
  }
}
 801a7ac:	46c0      	nop			@ (mov r8, r8)
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	b00a      	add	sp, #40	@ 0x28
 801a7b2:	bd80      	pop	{r7, pc}

0801a7b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b084      	sub	sp, #16
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	6078      	str	r0, [r7, #4]
 801a7bc:	000a      	movs	r2, r1
 801a7be:	1cfb      	adds	r3, r7, #3
 801a7c0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a7c2:	230f      	movs	r3, #15
 801a7c4:	18fb      	adds	r3, r7, r3
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	7c1b      	ldrb	r3, [r3, #16]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d116      	bne.n	801a800 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a7d2:	2380      	movs	r3, #128	@ 0x80
 801a7d4:	009b      	lsls	r3, r3, #2
 801a7d6:	6878      	ldr	r0, [r7, #4]
 801a7d8:	2202      	movs	r2, #2
 801a7da:	2181      	movs	r1, #129	@ 0x81
 801a7dc:	f002 f8eb 	bl	801c9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	2201      	movs	r2, #1
 801a7e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a7e6:	2380      	movs	r3, #128	@ 0x80
 801a7e8:	009b      	lsls	r3, r3, #2
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	2202      	movs	r2, #2
 801a7ee:	2101      	movs	r1, #1
 801a7f0:	f002 f8e1 	bl	801c9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a7f4:	687a      	ldr	r2, [r7, #4]
 801a7f6:	23b6      	movs	r3, #182	@ 0xb6
 801a7f8:	005b      	lsls	r3, r3, #1
 801a7fa:	2101      	movs	r1, #1
 801a7fc:	50d1      	str	r1, [r2, r3]
 801a7fe:	e013      	b.n	801a828 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	2340      	movs	r3, #64	@ 0x40
 801a804:	2202      	movs	r2, #2
 801a806:	2181      	movs	r1, #129	@ 0x81
 801a808:	f002 f8d5 	bl	801c9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	2201      	movs	r2, #1
 801a810:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a812:	6878      	ldr	r0, [r7, #4]
 801a814:	2340      	movs	r3, #64	@ 0x40
 801a816:	2202      	movs	r2, #2
 801a818:	2101      	movs	r1, #1
 801a81a:	f002 f8cc 	bl	801c9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a81e:	687a      	ldr	r2, [r7, #4]
 801a820:	23b6      	movs	r3, #182	@ 0xb6
 801a822:	005b      	lsls	r3, r3, #1
 801a824:	2101      	movs	r1, #1
 801a826:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a828:	6878      	ldr	r0, [r7, #4]
 801a82a:	2308      	movs	r3, #8
 801a82c:	2203      	movs	r2, #3
 801a82e:	2182      	movs	r1, #130	@ 0x82
 801a830:	f002 f8c1 	bl	801c9b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	2201      	movs	r2, #1
 801a838:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a83a:	2387      	movs	r3, #135	@ 0x87
 801a83c:	009b      	lsls	r3, r3, #2
 801a83e:	0018      	movs	r0, r3
 801a840:	f002 fa52 	bl	801cce8 <USBD_static_malloc>
 801a844:	0001      	movs	r1, r0
 801a846:	687a      	ldr	r2, [r7, #4]
 801a848:	23ae      	movs	r3, #174	@ 0xae
 801a84a:	009b      	lsls	r3, r3, #2
 801a84c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801a84e:	687a      	ldr	r2, [r7, #4]
 801a850:	23ae      	movs	r3, #174	@ 0xae
 801a852:	009b      	lsls	r3, r3, #2
 801a854:	58d3      	ldr	r3, [r2, r3]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d104      	bne.n	801a864 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801a85a:	230f      	movs	r3, #15
 801a85c:	18fb      	adds	r3, r7, r3
 801a85e:	2201      	movs	r2, #1
 801a860:	701a      	strb	r2, [r3, #0]
 801a862:	e02c      	b.n	801a8be <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a864:	687a      	ldr	r2, [r7, #4]
 801a866:	23ae      	movs	r3, #174	@ 0xae
 801a868:	009b      	lsls	r3, r3, #2
 801a86a:	58d3      	ldr	r3, [r2, r3]
 801a86c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a86e:	687a      	ldr	r2, [r7, #4]
 801a870:	23af      	movs	r3, #175	@ 0xaf
 801a872:	009b      	lsls	r3, r3, #2
 801a874:	58d3      	ldr	r3, [r2, r3]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801a87a:	68ba      	ldr	r2, [r7, #8]
 801a87c:	2385      	movs	r3, #133	@ 0x85
 801a87e:	009b      	lsls	r3, r3, #2
 801a880:	2100      	movs	r1, #0
 801a882:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801a884:	68ba      	ldr	r2, [r7, #8]
 801a886:	2386      	movs	r3, #134	@ 0x86
 801a888:	009b      	lsls	r3, r3, #2
 801a88a:	2100      	movs	r1, #0
 801a88c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	7c1b      	ldrb	r3, [r3, #16]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d10a      	bne.n	801a8ac <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a896:	68ba      	ldr	r2, [r7, #8]
 801a898:	2381      	movs	r3, #129	@ 0x81
 801a89a:	009b      	lsls	r3, r3, #2
 801a89c:	58d2      	ldr	r2, [r2, r3]
 801a89e:	2380      	movs	r3, #128	@ 0x80
 801a8a0:	009b      	lsls	r3, r3, #2
 801a8a2:	6878      	ldr	r0, [r7, #4]
 801a8a4:	2101      	movs	r1, #1
 801a8a6:	f002 f9d1 	bl	801cc4c <USBD_LL_PrepareReceive>
 801a8aa:	e008      	b.n	801a8be <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a8ac:	68ba      	ldr	r2, [r7, #8]
 801a8ae:	2381      	movs	r3, #129	@ 0x81
 801a8b0:	009b      	lsls	r3, r3, #2
 801a8b2:	58d2      	ldr	r2, [r2, r3]
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	2340      	movs	r3, #64	@ 0x40
 801a8b8:	2101      	movs	r1, #1
 801a8ba:	f002 f9c7 	bl	801cc4c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a8be:	230f      	movs	r3, #15
 801a8c0:	18fb      	adds	r3, r7, r3
 801a8c2:	781b      	ldrb	r3, [r3, #0]
}
 801a8c4:	0018      	movs	r0, r3
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	b004      	add	sp, #16
 801a8ca:	bd80      	pop	{r7, pc}

0801a8cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	b084      	sub	sp, #16
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
 801a8d4:	000a      	movs	r2, r1
 801a8d6:	1cfb      	adds	r3, r7, #3
 801a8d8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a8da:	230f      	movs	r3, #15
 801a8dc:	18fb      	adds	r3, r7, r3
 801a8de:	2200      	movs	r2, #0
 801a8e0:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	2181      	movs	r1, #129	@ 0x81
 801a8e6:	0018      	movs	r0, r3
 801a8e8:	f002 f89c 	bl	801ca24 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	2101      	movs	r1, #1
 801a8f6:	0018      	movs	r0, r3
 801a8f8:	f002 f894 	bl	801ca24 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a8fc:	687a      	ldr	r2, [r7, #4]
 801a8fe:	23b6      	movs	r3, #182	@ 0xb6
 801a900:	005b      	lsls	r3, r3, #1
 801a902:	2100      	movs	r1, #0
 801a904:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	2182      	movs	r1, #130	@ 0x82
 801a90a:	0018      	movs	r0, r3
 801a90c:	f002 f88a 	bl	801ca24 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	2200      	movs	r2, #0
 801a914:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	23ae      	movs	r3, #174	@ 0xae
 801a91a:	009b      	lsls	r3, r3, #2
 801a91c:	58d3      	ldr	r3, [r2, r3]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d011      	beq.n	801a946 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a922:	687a      	ldr	r2, [r7, #4]
 801a924:	23af      	movs	r3, #175	@ 0xaf
 801a926:	009b      	lsls	r3, r3, #2
 801a928:	58d3      	ldr	r3, [r2, r3]
 801a92a:	685b      	ldr	r3, [r3, #4]
 801a92c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a92e:	687a      	ldr	r2, [r7, #4]
 801a930:	23ae      	movs	r3, #174	@ 0xae
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	58d3      	ldr	r3, [r2, r3]
 801a936:	0018      	movs	r0, r3
 801a938:	f002 f9e2 	bl	801cd00 <USBD_static_free>
    pdev->pClassData = NULL;
 801a93c:	687a      	ldr	r2, [r7, #4]
 801a93e:	23ae      	movs	r3, #174	@ 0xae
 801a940:	009b      	lsls	r3, r3, #2
 801a942:	2100      	movs	r1, #0
 801a944:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801a946:	230f      	movs	r3, #15
 801a948:	18fb      	adds	r3, r7, r3
 801a94a:	781b      	ldrb	r3, [r3, #0]
}
 801a94c:	0018      	movs	r0, r3
 801a94e:	46bd      	mov	sp, r7
 801a950:	b004      	add	sp, #16
 801a952:	bd80      	pop	{r7, pc}

0801a954 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b086      	sub	sp, #24
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
 801a95c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a95e:	687a      	ldr	r2, [r7, #4]
 801a960:	23ae      	movs	r3, #174	@ 0xae
 801a962:	009b      	lsls	r3, r3, #2
 801a964:	58d3      	ldr	r3, [r2, r3]
 801a966:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801a968:	230f      	movs	r3, #15
 801a96a:	18fb      	adds	r3, r7, r3
 801a96c:	2200      	movs	r2, #0
 801a96e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a970:	230c      	movs	r3, #12
 801a972:	18fb      	adds	r3, r7, r3
 801a974:	2200      	movs	r2, #0
 801a976:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a978:	2317      	movs	r3, #23
 801a97a:	18fb      	adds	r3, r7, r3
 801a97c:	2200      	movs	r2, #0
 801a97e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a980:	683b      	ldr	r3, [r7, #0]
 801a982:	781b      	ldrb	r3, [r3, #0]
 801a984:	001a      	movs	r2, r3
 801a986:	2360      	movs	r3, #96	@ 0x60
 801a988:	4013      	ands	r3, r2
 801a98a:	d03d      	beq.n	801aa08 <USBD_CDC_Setup+0xb4>
 801a98c:	2b20      	cmp	r3, #32
 801a98e:	d000      	beq.n	801a992 <USBD_CDC_Setup+0x3e>
 801a990:	e094      	b.n	801aabc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a992:	683b      	ldr	r3, [r7, #0]
 801a994:	88db      	ldrh	r3, [r3, #6]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d02b      	beq.n	801a9f2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a99a:	683b      	ldr	r3, [r7, #0]
 801a99c:	781b      	ldrb	r3, [r3, #0]
 801a99e:	b25b      	sxtb	r3, r3
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	da12      	bge.n	801a9ca <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a9a4:	687a      	ldr	r2, [r7, #4]
 801a9a6:	23af      	movs	r3, #175	@ 0xaf
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	58d3      	ldr	r3, [r2, r3]
 801a9ac:	689b      	ldr	r3, [r3, #8]
 801a9ae:	683a      	ldr	r2, [r7, #0]
 801a9b0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a9b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a9b4:	683a      	ldr	r2, [r7, #0]
 801a9b6:	88d2      	ldrh	r2, [r2, #6]
 801a9b8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a9ba:	6939      	ldr	r1, [r7, #16]
 801a9bc:	683b      	ldr	r3, [r7, #0]
 801a9be:	88da      	ldrh	r2, [r3, #6]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	0018      	movs	r0, r3
 801a9c4:	f001 fbaf 	bl	801c126 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a9c8:	e083      	b.n	801aad2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	7859      	ldrb	r1, [r3, #1]
 801a9ce:	693a      	ldr	r2, [r7, #16]
 801a9d0:	2380      	movs	r3, #128	@ 0x80
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a9d6:	683b      	ldr	r3, [r7, #0]
 801a9d8:	88db      	ldrh	r3, [r3, #6]
 801a9da:	b2d9      	uxtb	r1, r3
 801a9dc:	693b      	ldr	r3, [r7, #16]
 801a9de:	4a40      	ldr	r2, [pc, #256]	@ (801aae0 <USBD_CDC_Setup+0x18c>)
 801a9e0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a9e2:	6939      	ldr	r1, [r7, #16]
 801a9e4:	683b      	ldr	r3, [r7, #0]
 801a9e6:	88da      	ldrh	r2, [r3, #6]
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	0018      	movs	r0, r3
 801a9ec:	f001 fbce 	bl	801c18c <USBD_CtlPrepareRx>
      break;
 801a9f0:	e06f      	b.n	801aad2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a9f2:	687a      	ldr	r2, [r7, #4]
 801a9f4:	23af      	movs	r3, #175	@ 0xaf
 801a9f6:	009b      	lsls	r3, r3, #2
 801a9f8:	58d3      	ldr	r3, [r2, r3]
 801a9fa:	689b      	ldr	r3, [r3, #8]
 801a9fc:	683a      	ldr	r2, [r7, #0]
 801a9fe:	7850      	ldrb	r0, [r2, #1]
 801aa00:	6839      	ldr	r1, [r7, #0]
 801aa02:	2200      	movs	r2, #0
 801aa04:	4798      	blx	r3
      break;
 801aa06:	e064      	b.n	801aad2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801aa08:	683b      	ldr	r3, [r7, #0]
 801aa0a:	785b      	ldrb	r3, [r3, #1]
 801aa0c:	2b0b      	cmp	r3, #11
 801aa0e:	d037      	beq.n	801aa80 <USBD_CDC_Setup+0x12c>
 801aa10:	dc47      	bgt.n	801aaa2 <USBD_CDC_Setup+0x14e>
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d002      	beq.n	801aa1c <USBD_CDC_Setup+0xc8>
 801aa16:	2b0a      	cmp	r3, #10
 801aa18:	d019      	beq.n	801aa4e <USBD_CDC_Setup+0xfa>
 801aa1a:	e042      	b.n	801aaa2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aa1c:	687a      	ldr	r2, [r7, #4]
 801aa1e:	23a7      	movs	r3, #167	@ 0xa7
 801aa20:	009b      	lsls	r3, r3, #2
 801aa22:	5cd3      	ldrb	r3, [r2, r3]
 801aa24:	2b03      	cmp	r3, #3
 801aa26:	d107      	bne.n	801aa38 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801aa28:	230c      	movs	r3, #12
 801aa2a:	18f9      	adds	r1, r7, r3
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2202      	movs	r2, #2
 801aa30:	0018      	movs	r0, r3
 801aa32:	f001 fb78 	bl	801c126 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801aa36:	e040      	b.n	801aaba <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801aa38:	683a      	ldr	r2, [r7, #0]
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	0011      	movs	r1, r2
 801aa3e:	0018      	movs	r0, r3
 801aa40:	f001 faf3 	bl	801c02a <USBD_CtlError>
            ret = USBD_FAIL;
 801aa44:	2317      	movs	r3, #23
 801aa46:	18fb      	adds	r3, r7, r3
 801aa48:	2202      	movs	r2, #2
 801aa4a:	701a      	strb	r2, [r3, #0]
          break;
 801aa4c:	e035      	b.n	801aaba <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aa4e:	687a      	ldr	r2, [r7, #4]
 801aa50:	23a7      	movs	r3, #167	@ 0xa7
 801aa52:	009b      	lsls	r3, r3, #2
 801aa54:	5cd3      	ldrb	r3, [r2, r3]
 801aa56:	2b03      	cmp	r3, #3
 801aa58:	d107      	bne.n	801aa6a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801aa5a:	230f      	movs	r3, #15
 801aa5c:	18f9      	adds	r1, r7, r3
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	2201      	movs	r2, #1
 801aa62:	0018      	movs	r0, r3
 801aa64:	f001 fb5f 	bl	801c126 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801aa68:	e027      	b.n	801aaba <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801aa6a:	683a      	ldr	r2, [r7, #0]
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	0011      	movs	r1, r2
 801aa70:	0018      	movs	r0, r3
 801aa72:	f001 fada 	bl	801c02a <USBD_CtlError>
            ret = USBD_FAIL;
 801aa76:	2317      	movs	r3, #23
 801aa78:	18fb      	adds	r3, r7, r3
 801aa7a:	2202      	movs	r2, #2
 801aa7c:	701a      	strb	r2, [r3, #0]
          break;
 801aa7e:	e01c      	b.n	801aaba <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801aa80:	687a      	ldr	r2, [r7, #4]
 801aa82:	23a7      	movs	r3, #167	@ 0xa7
 801aa84:	009b      	lsls	r3, r3, #2
 801aa86:	5cd3      	ldrb	r3, [r2, r3]
 801aa88:	2b03      	cmp	r3, #3
 801aa8a:	d015      	beq.n	801aab8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801aa8c:	683a      	ldr	r2, [r7, #0]
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	0011      	movs	r1, r2
 801aa92:	0018      	movs	r0, r3
 801aa94:	f001 fac9 	bl	801c02a <USBD_CtlError>
            ret = USBD_FAIL;
 801aa98:	2317      	movs	r3, #23
 801aa9a:	18fb      	adds	r3, r7, r3
 801aa9c:	2202      	movs	r2, #2
 801aa9e:	701a      	strb	r2, [r3, #0]
          }
          break;
 801aaa0:	e00a      	b.n	801aab8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801aaa2:	683a      	ldr	r2, [r7, #0]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	0011      	movs	r1, r2
 801aaa8:	0018      	movs	r0, r3
 801aaaa:	f001 fabe 	bl	801c02a <USBD_CtlError>
          ret = USBD_FAIL;
 801aaae:	2317      	movs	r3, #23
 801aab0:	18fb      	adds	r3, r7, r3
 801aab2:	2202      	movs	r2, #2
 801aab4:	701a      	strb	r2, [r3, #0]
          break;
 801aab6:	e000      	b.n	801aaba <USBD_CDC_Setup+0x166>
          break;
 801aab8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801aaba:	e00a      	b.n	801aad2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801aabc:	683a      	ldr	r2, [r7, #0]
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	0011      	movs	r1, r2
 801aac2:	0018      	movs	r0, r3
 801aac4:	f001 fab1 	bl	801c02a <USBD_CtlError>
      ret = USBD_FAIL;
 801aac8:	2317      	movs	r3, #23
 801aaca:	18fb      	adds	r3, r7, r3
 801aacc:	2202      	movs	r2, #2
 801aace:	701a      	strb	r2, [r3, #0]
      break;
 801aad0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801aad2:	2317      	movs	r3, #23
 801aad4:	18fb      	adds	r3, r7, r3
 801aad6:	781b      	ldrb	r3, [r3, #0]
}
 801aad8:	0018      	movs	r0, r3
 801aada:	46bd      	mov	sp, r7
 801aadc:	b006      	add	sp, #24
 801aade:	bd80      	pop	{r7, pc}
 801aae0:	00000201 	.word	0x00000201

0801aae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b084      	sub	sp, #16
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
 801aaec:	000a      	movs	r2, r1
 801aaee:	1cfb      	adds	r3, r7, #3
 801aaf0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801aaf2:	687a      	ldr	r2, [r7, #4]
 801aaf4:	23ae      	movs	r3, #174	@ 0xae
 801aaf6:	009b      	lsls	r3, r3, #2
 801aaf8:	58d3      	ldr	r3, [r2, r3]
 801aafa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801aafc:	687a      	ldr	r2, [r7, #4]
 801aafe:	23b0      	movs	r3, #176	@ 0xb0
 801ab00:	009b      	lsls	r3, r3, #2
 801ab02:	58d3      	ldr	r3, [r2, r3]
 801ab04:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801ab06:	687a      	ldr	r2, [r7, #4]
 801ab08:	23ae      	movs	r3, #174	@ 0xae
 801ab0a:	009b      	lsls	r3, r3, #2
 801ab0c:	58d3      	ldr	r3, [r2, r3]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d03e      	beq.n	801ab90 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801ab12:	1cfb      	adds	r3, r7, #3
 801ab14:	781a      	ldrb	r2, [r3, #0]
 801ab16:	6879      	ldr	r1, [r7, #4]
 801ab18:	0013      	movs	r3, r2
 801ab1a:	009b      	lsls	r3, r3, #2
 801ab1c:	189b      	adds	r3, r3, r2
 801ab1e:	009b      	lsls	r3, r3, #2
 801ab20:	18cb      	adds	r3, r1, r3
 801ab22:	331c      	adds	r3, #28
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d02b      	beq.n	801ab82 <USBD_CDC_DataIn+0x9e>
 801ab2a:	1cfb      	adds	r3, r7, #3
 801ab2c:	781a      	ldrb	r2, [r3, #0]
 801ab2e:	6879      	ldr	r1, [r7, #4]
 801ab30:	0013      	movs	r3, r2
 801ab32:	009b      	lsls	r3, r3, #2
 801ab34:	189b      	adds	r3, r3, r2
 801ab36:	009b      	lsls	r3, r3, #2
 801ab38:	18cb      	adds	r3, r1, r3
 801ab3a:	331c      	adds	r3, #28
 801ab3c:	6818      	ldr	r0, [r3, #0]
 801ab3e:	1cfb      	adds	r3, r7, #3
 801ab40:	781a      	ldrb	r2, [r3, #0]
 801ab42:	68b9      	ldr	r1, [r7, #8]
 801ab44:	0013      	movs	r3, r2
 801ab46:	009b      	lsls	r3, r3, #2
 801ab48:	189b      	adds	r3, r3, r2
 801ab4a:	00db      	lsls	r3, r3, #3
 801ab4c:	18cb      	adds	r3, r1, r3
 801ab4e:	3338      	adds	r3, #56	@ 0x38
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	0019      	movs	r1, r3
 801ab54:	f7e5 fbac 	bl	80002b0 <__aeabi_uidivmod>
 801ab58:	1e0b      	subs	r3, r1, #0
 801ab5a:	d112      	bne.n	801ab82 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801ab5c:	1cfb      	adds	r3, r7, #3
 801ab5e:	781a      	ldrb	r2, [r3, #0]
 801ab60:	6879      	ldr	r1, [r7, #4]
 801ab62:	0013      	movs	r3, r2
 801ab64:	009b      	lsls	r3, r3, #2
 801ab66:	189b      	adds	r3, r3, r2
 801ab68:	009b      	lsls	r3, r3, #2
 801ab6a:	18cb      	adds	r3, r1, r3
 801ab6c:	331c      	adds	r3, #28
 801ab6e:	2200      	movs	r2, #0
 801ab70:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ab72:	1cfb      	adds	r3, r7, #3
 801ab74:	7819      	ldrb	r1, [r3, #0]
 801ab76:	6878      	ldr	r0, [r7, #4]
 801ab78:	2300      	movs	r3, #0
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	f002 f82f 	bl	801cbde <USBD_LL_Transmit>
 801ab80:	e004      	b.n	801ab8c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ab82:	68fa      	ldr	r2, [r7, #12]
 801ab84:	2385      	movs	r3, #133	@ 0x85
 801ab86:	009b      	lsls	r3, r3, #2
 801ab88:	2100      	movs	r1, #0
 801ab8a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801ab8c:	2300      	movs	r3, #0
 801ab8e:	e000      	b.n	801ab92 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801ab90:	2302      	movs	r3, #2
  }
}
 801ab92:	0018      	movs	r0, r3
 801ab94:	46bd      	mov	sp, r7
 801ab96:	b004      	add	sp, #16
 801ab98:	bd80      	pop	{r7, pc}

0801ab9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ab9a:	b580      	push	{r7, lr}
 801ab9c:	b084      	sub	sp, #16
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	6078      	str	r0, [r7, #4]
 801aba2:	000a      	movs	r2, r1
 801aba4:	1cfb      	adds	r3, r7, #3
 801aba6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aba8:	687a      	ldr	r2, [r7, #4]
 801abaa:	23ae      	movs	r3, #174	@ 0xae
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	58d3      	ldr	r3, [r2, r3]
 801abb0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801abb2:	1cfb      	adds	r3, r7, #3
 801abb4:	781a      	ldrb	r2, [r3, #0]
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	0011      	movs	r1, r2
 801abba:	0018      	movs	r0, r3
 801abbc:	f002 f87d 	bl	801ccba <USBD_LL_GetRxDataSize>
 801abc0:	0001      	movs	r1, r0
 801abc2:	68fa      	ldr	r2, [r7, #12]
 801abc4:	2383      	movs	r3, #131	@ 0x83
 801abc6:	009b      	lsls	r3, r3, #2
 801abc8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801abca:	687a      	ldr	r2, [r7, #4]
 801abcc:	23ae      	movs	r3, #174	@ 0xae
 801abce:	009b      	lsls	r3, r3, #2
 801abd0:	58d3      	ldr	r3, [r2, r3]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d011      	beq.n	801abfa <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801abd6:	687a      	ldr	r2, [r7, #4]
 801abd8:	23af      	movs	r3, #175	@ 0xaf
 801abda:	009b      	lsls	r3, r3, #2
 801abdc:	58d3      	ldr	r3, [r2, r3]
 801abde:	68da      	ldr	r2, [r3, #12]
 801abe0:	68f9      	ldr	r1, [r7, #12]
 801abe2:	2381      	movs	r3, #129	@ 0x81
 801abe4:	009b      	lsls	r3, r3, #2
 801abe6:	58c8      	ldr	r0, [r1, r3]
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	2183      	movs	r1, #131	@ 0x83
 801abec:	0089      	lsls	r1, r1, #2
 801abee:	468c      	mov	ip, r1
 801abf0:	4463      	add	r3, ip
 801abf2:	0019      	movs	r1, r3
 801abf4:	4790      	blx	r2

    return USBD_OK;
 801abf6:	2300      	movs	r3, #0
 801abf8:	e000      	b.n	801abfc <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801abfa:	2302      	movs	r3, #2
  }
}
 801abfc:	0018      	movs	r0, r3
 801abfe:	46bd      	mov	sp, r7
 801ac00:	b004      	add	sp, #16
 801ac02:	bd80      	pop	{r7, pc}

0801ac04 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801ac04:	b590      	push	{r4, r7, lr}
 801ac06:	b085      	sub	sp, #20
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ac0c:	687a      	ldr	r2, [r7, #4]
 801ac0e:	23ae      	movs	r3, #174	@ 0xae
 801ac10:	009b      	lsls	r3, r3, #2
 801ac12:	58d3      	ldr	r3, [r2, r3]
 801ac14:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ac16:	687a      	ldr	r2, [r7, #4]
 801ac18:	23af      	movs	r3, #175	@ 0xaf
 801ac1a:	009b      	lsls	r3, r3, #2
 801ac1c:	58d3      	ldr	r3, [r2, r3]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d018      	beq.n	801ac54 <USBD_CDC_EP0_RxReady+0x50>
 801ac22:	68fa      	ldr	r2, [r7, #12]
 801ac24:	2380      	movs	r3, #128	@ 0x80
 801ac26:	009b      	lsls	r3, r3, #2
 801ac28:	5cd3      	ldrb	r3, [r2, r3]
 801ac2a:	2bff      	cmp	r3, #255	@ 0xff
 801ac2c:	d012      	beq.n	801ac54 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ac2e:	687a      	ldr	r2, [r7, #4]
 801ac30:	23af      	movs	r3, #175	@ 0xaf
 801ac32:	009b      	lsls	r3, r3, #2
 801ac34:	58d3      	ldr	r3, [r2, r3]
 801ac36:	689b      	ldr	r3, [r3, #8]
 801ac38:	68f9      	ldr	r1, [r7, #12]
 801ac3a:	2280      	movs	r2, #128	@ 0x80
 801ac3c:	0092      	lsls	r2, r2, #2
 801ac3e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801ac40:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801ac42:	68fa      	ldr	r2, [r7, #12]
 801ac44:	4c06      	ldr	r4, [pc, #24]	@ (801ac60 <USBD_CDC_EP0_RxReady+0x5c>)
 801ac46:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ac48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ac4a:	68fa      	ldr	r2, [r7, #12]
 801ac4c:	2380      	movs	r3, #128	@ 0x80
 801ac4e:	009b      	lsls	r3, r3, #2
 801ac50:	21ff      	movs	r1, #255	@ 0xff
 801ac52:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801ac54:	2300      	movs	r3, #0
}
 801ac56:	0018      	movs	r0, r3
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	b005      	add	sp, #20
 801ac5c:	bd90      	pop	{r4, r7, pc}
 801ac5e:	46c0      	nop			@ (mov r8, r8)
 801ac60:	00000201 	.word	0x00000201

0801ac64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ac64:	b580      	push	{r7, lr}
 801ac66:	b082      	sub	sp, #8
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	2243      	movs	r2, #67	@ 0x43
 801ac70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ac72:	4b02      	ldr	r3, [pc, #8]	@ (801ac7c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ac74:	0018      	movs	r0, r3
 801ac76:	46bd      	mov	sp, r7
 801ac78:	b002      	add	sp, #8
 801ac7a:	bd80      	pop	{r7, pc}
 801ac7c:	20000168 	.word	0x20000168

0801ac80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b082      	sub	sp, #8
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	2243      	movs	r2, #67	@ 0x43
 801ac8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801ac8e:	4b02      	ldr	r3, [pc, #8]	@ (801ac98 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801ac90:	0018      	movs	r0, r3
 801ac92:	46bd      	mov	sp, r7
 801ac94:	b002      	add	sp, #8
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	20000124 	.word	0x20000124

0801ac9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b082      	sub	sp, #8
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	2243      	movs	r2, #67	@ 0x43
 801aca8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801acaa:	4b02      	ldr	r3, [pc, #8]	@ (801acb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801acac:	0018      	movs	r0, r3
 801acae:	46bd      	mov	sp, r7
 801acb0:	b002      	add	sp, #8
 801acb2:	bd80      	pop	{r7, pc}
 801acb4:	200001ac 	.word	0x200001ac

0801acb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b082      	sub	sp, #8
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	220a      	movs	r2, #10
 801acc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801acc6:	4b02      	ldr	r3, [pc, #8]	@ (801acd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801acc8:	0018      	movs	r0, r3
 801acca:	46bd      	mov	sp, r7
 801accc:	b002      	add	sp, #8
 801acce:	bd80      	pop	{r7, pc}
 801acd0:	200000e0 	.word	0x200000e0

0801acd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b084      	sub	sp, #16
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
 801acdc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801acde:	200f      	movs	r0, #15
 801ace0:	183b      	adds	r3, r7, r0
 801ace2:	2202      	movs	r2, #2
 801ace4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d007      	beq.n	801acfc <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801acec:	687a      	ldr	r2, [r7, #4]
 801acee:	23af      	movs	r3, #175	@ 0xaf
 801acf0:	009b      	lsls	r3, r3, #2
 801acf2:	6839      	ldr	r1, [r7, #0]
 801acf4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801acf6:	183b      	adds	r3, r7, r0
 801acf8:	2200      	movs	r2, #0
 801acfa:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801acfc:	230f      	movs	r3, #15
 801acfe:	18fb      	adds	r3, r7, r3
 801ad00:	781b      	ldrb	r3, [r3, #0]
}
 801ad02:	0018      	movs	r0, r3
 801ad04:	46bd      	mov	sp, r7
 801ad06:	b004      	add	sp, #16
 801ad08:	bd80      	pop	{r7, pc}

0801ad0a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801ad0a:	b580      	push	{r7, lr}
 801ad0c:	b086      	sub	sp, #24
 801ad0e:	af00      	add	r7, sp, #0
 801ad10:	60f8      	str	r0, [r7, #12]
 801ad12:	60b9      	str	r1, [r7, #8]
 801ad14:	1dbb      	adds	r3, r7, #6
 801ad16:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ad18:	68fa      	ldr	r2, [r7, #12]
 801ad1a:	23ae      	movs	r3, #174	@ 0xae
 801ad1c:	009b      	lsls	r3, r3, #2
 801ad1e:	58d3      	ldr	r3, [r2, r3]
 801ad20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801ad22:	697a      	ldr	r2, [r7, #20]
 801ad24:	2382      	movs	r3, #130	@ 0x82
 801ad26:	009b      	lsls	r3, r3, #2
 801ad28:	68b9      	ldr	r1, [r7, #8]
 801ad2a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801ad2c:	1dbb      	adds	r3, r7, #6
 801ad2e:	8819      	ldrh	r1, [r3, #0]
 801ad30:	697a      	ldr	r2, [r7, #20]
 801ad32:	2384      	movs	r3, #132	@ 0x84
 801ad34:	009b      	lsls	r3, r3, #2
 801ad36:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801ad38:	2300      	movs	r3, #0
}
 801ad3a:	0018      	movs	r0, r3
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	b006      	add	sp, #24
 801ad40:	bd80      	pop	{r7, pc}

0801ad42 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801ad42:	b580      	push	{r7, lr}
 801ad44:	b084      	sub	sp, #16
 801ad46:	af00      	add	r7, sp, #0
 801ad48:	6078      	str	r0, [r7, #4]
 801ad4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ad4c:	687a      	ldr	r2, [r7, #4]
 801ad4e:	23ae      	movs	r3, #174	@ 0xae
 801ad50:	009b      	lsls	r3, r3, #2
 801ad52:	58d3      	ldr	r3, [r2, r3]
 801ad54:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801ad56:	68fa      	ldr	r2, [r7, #12]
 801ad58:	2381      	movs	r3, #129	@ 0x81
 801ad5a:	009b      	lsls	r3, r3, #2
 801ad5c:	6839      	ldr	r1, [r7, #0]
 801ad5e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801ad60:	2300      	movs	r3, #0
}
 801ad62:	0018      	movs	r0, r3
 801ad64:	46bd      	mov	sp, r7
 801ad66:	b004      	add	sp, #16
 801ad68:	bd80      	pop	{r7, pc}

0801ad6a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801ad6a:	b580      	push	{r7, lr}
 801ad6c:	b084      	sub	sp, #16
 801ad6e:	af00      	add	r7, sp, #0
 801ad70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ad72:	687a      	ldr	r2, [r7, #4]
 801ad74:	23ae      	movs	r3, #174	@ 0xae
 801ad76:	009b      	lsls	r3, r3, #2
 801ad78:	58d3      	ldr	r3, [r2, r3]
 801ad7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801ad7c:	687a      	ldr	r2, [r7, #4]
 801ad7e:	23ae      	movs	r3, #174	@ 0xae
 801ad80:	009b      	lsls	r3, r3, #2
 801ad82:	58d3      	ldr	r3, [r2, r3]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d022      	beq.n	801adce <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801ad88:	68fa      	ldr	r2, [r7, #12]
 801ad8a:	2385      	movs	r3, #133	@ 0x85
 801ad8c:	009b      	lsls	r3, r3, #2
 801ad8e:	58d3      	ldr	r3, [r2, r3]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d11a      	bne.n	801adca <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801ad94:	68fa      	ldr	r2, [r7, #12]
 801ad96:	2385      	movs	r3, #133	@ 0x85
 801ad98:	009b      	lsls	r3, r3, #2
 801ad9a:	2101      	movs	r1, #1
 801ad9c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801ad9e:	68fa      	ldr	r2, [r7, #12]
 801ada0:	2384      	movs	r3, #132	@ 0x84
 801ada2:	009b      	lsls	r3, r3, #2
 801ada4:	58d2      	ldr	r2, [r2, r3]
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801adaa:	68fa      	ldr	r2, [r7, #12]
 801adac:	2382      	movs	r3, #130	@ 0x82
 801adae:	009b      	lsls	r3, r3, #2
 801adb0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801adb2:	68fa      	ldr	r2, [r7, #12]
 801adb4:	2384      	movs	r3, #132	@ 0x84
 801adb6:	009b      	lsls	r3, r3, #2
 801adb8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801adba:	b29b      	uxth	r3, r3
 801adbc:	6878      	ldr	r0, [r7, #4]
 801adbe:	000a      	movs	r2, r1
 801adc0:	2181      	movs	r1, #129	@ 0x81
 801adc2:	f001 ff0c 	bl	801cbde <USBD_LL_Transmit>

      return USBD_OK;
 801adc6:	2300      	movs	r3, #0
 801adc8:	e002      	b.n	801add0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801adca:	2301      	movs	r3, #1
 801adcc:	e000      	b.n	801add0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801adce:	2302      	movs	r3, #2
  }
}
 801add0:	0018      	movs	r0, r3
 801add2:	46bd      	mov	sp, r7
 801add4:	b004      	add	sp, #16
 801add6:	bd80      	pop	{r7, pc}

0801add8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	b084      	sub	sp, #16
 801addc:	af00      	add	r7, sp, #0
 801adde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ade0:	687a      	ldr	r2, [r7, #4]
 801ade2:	23ae      	movs	r3, #174	@ 0xae
 801ade4:	009b      	lsls	r3, r3, #2
 801ade6:	58d3      	ldr	r3, [r2, r3]
 801ade8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801adea:	687a      	ldr	r2, [r7, #4]
 801adec:	23ae      	movs	r3, #174	@ 0xae
 801adee:	009b      	lsls	r3, r3, #2
 801adf0:	58d3      	ldr	r3, [r2, r3]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d019      	beq.n	801ae2a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	7c1b      	ldrb	r3, [r3, #16]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d10a      	bne.n	801ae14 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801adfe:	68fa      	ldr	r2, [r7, #12]
 801ae00:	2381      	movs	r3, #129	@ 0x81
 801ae02:	009b      	lsls	r3, r3, #2
 801ae04:	58d2      	ldr	r2, [r2, r3]
 801ae06:	2380      	movs	r3, #128	@ 0x80
 801ae08:	009b      	lsls	r3, r3, #2
 801ae0a:	6878      	ldr	r0, [r7, #4]
 801ae0c:	2101      	movs	r1, #1
 801ae0e:	f001 ff1d 	bl	801cc4c <USBD_LL_PrepareReceive>
 801ae12:	e008      	b.n	801ae26 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ae14:	68fa      	ldr	r2, [r7, #12]
 801ae16:	2381      	movs	r3, #129	@ 0x81
 801ae18:	009b      	lsls	r3, r3, #2
 801ae1a:	58d2      	ldr	r2, [r2, r3]
 801ae1c:	6878      	ldr	r0, [r7, #4]
 801ae1e:	2340      	movs	r3, #64	@ 0x40
 801ae20:	2101      	movs	r1, #1
 801ae22:	f001 ff13 	bl	801cc4c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801ae26:	2300      	movs	r3, #0
 801ae28:	e000      	b.n	801ae2c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801ae2a:	2302      	movs	r3, #2
  }
}
 801ae2c:	0018      	movs	r0, r3
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	b004      	add	sp, #16
 801ae32:	bd80      	pop	{r7, pc}

0801ae34 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ae34:	b580      	push	{r7, lr}
 801ae36:	b084      	sub	sp, #16
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	60f8      	str	r0, [r7, #12]
 801ae3c:	60b9      	str	r1, [r7, #8]
 801ae3e:	1dfb      	adds	r3, r7, #7
 801ae40:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d101      	bne.n	801ae4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801ae48:	2302      	movs	r3, #2
 801ae4a:	e020      	b.n	801ae8e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801ae4c:	68fa      	ldr	r2, [r7, #12]
 801ae4e:	23ad      	movs	r3, #173	@ 0xad
 801ae50:	009b      	lsls	r3, r3, #2
 801ae52:	58d3      	ldr	r3, [r2, r3]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d004      	beq.n	801ae62 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801ae58:	68fa      	ldr	r2, [r7, #12]
 801ae5a:	23ad      	movs	r3, #173	@ 0xad
 801ae5c:	009b      	lsls	r3, r3, #2
 801ae5e:	2100      	movs	r1, #0
 801ae60:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801ae62:	68bb      	ldr	r3, [r7, #8]
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d004      	beq.n	801ae72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801ae68:	68fa      	ldr	r2, [r7, #12]
 801ae6a:	23ac      	movs	r3, #172	@ 0xac
 801ae6c:	009b      	lsls	r3, r3, #2
 801ae6e:	68b9      	ldr	r1, [r7, #8]
 801ae70:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ae72:	68fa      	ldr	r2, [r7, #12]
 801ae74:	23a7      	movs	r3, #167	@ 0xa7
 801ae76:	009b      	lsls	r3, r3, #2
 801ae78:	2101      	movs	r1, #1
 801ae7a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	1dfa      	adds	r2, r7, #7
 801ae80:	7812      	ldrb	r2, [r2, #0]
 801ae82:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	0018      	movs	r0, r3
 801ae88:	f001 fd0c 	bl	801c8a4 <USBD_LL_Init>

  return USBD_OK;
 801ae8c:	2300      	movs	r3, #0
}
 801ae8e:	0018      	movs	r0, r3
 801ae90:	46bd      	mov	sp, r7
 801ae92:	b004      	add	sp, #16
 801ae94:	bd80      	pop	{r7, pc}

0801ae96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801ae96:	b580      	push	{r7, lr}
 801ae98:	b084      	sub	sp, #16
 801ae9a:	af00      	add	r7, sp, #0
 801ae9c:	6078      	str	r0, [r7, #4]
 801ae9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801aea0:	200f      	movs	r0, #15
 801aea2:	183b      	adds	r3, r7, r0
 801aea4:	2200      	movs	r2, #0
 801aea6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d008      	beq.n	801aec0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801aeae:	687a      	ldr	r2, [r7, #4]
 801aeb0:	23ad      	movs	r3, #173	@ 0xad
 801aeb2:	009b      	lsls	r3, r3, #2
 801aeb4:	6839      	ldr	r1, [r7, #0]
 801aeb6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801aeb8:	183b      	adds	r3, r7, r0
 801aeba:	2200      	movs	r2, #0
 801aebc:	701a      	strb	r2, [r3, #0]
 801aebe:	e003      	b.n	801aec8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801aec0:	230f      	movs	r3, #15
 801aec2:	18fb      	adds	r3, r7, r3
 801aec4:	2202      	movs	r2, #2
 801aec6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801aec8:	230f      	movs	r3, #15
 801aeca:	18fb      	adds	r3, r7, r3
 801aecc:	781b      	ldrb	r3, [r3, #0]
}
 801aece:	0018      	movs	r0, r3
 801aed0:	46bd      	mov	sp, r7
 801aed2:	b004      	add	sp, #16
 801aed4:	bd80      	pop	{r7, pc}

0801aed6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801aed6:	b580      	push	{r7, lr}
 801aed8:	b082      	sub	sp, #8
 801aeda:	af00      	add	r7, sp, #0
 801aedc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	0018      	movs	r0, r3
 801aee2:	f001 fd43 	bl	801c96c <USBD_LL_Start>

  return USBD_OK;
 801aee6:	2300      	movs	r3, #0
}
 801aee8:	0018      	movs	r0, r3
 801aeea:	46bd      	mov	sp, r7
 801aeec:	b002      	add	sp, #8
 801aeee:	bd80      	pop	{r7, pc}

0801aef0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b082      	sub	sp, #8
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801aef8:	2300      	movs	r3, #0
}
 801aefa:	0018      	movs	r0, r3
 801aefc:	46bd      	mov	sp, r7
 801aefe:	b002      	add	sp, #8
 801af00:	bd80      	pop	{r7, pc}

0801af02 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801af02:	b590      	push	{r4, r7, lr}
 801af04:	b085      	sub	sp, #20
 801af06:	af00      	add	r7, sp, #0
 801af08:	6078      	str	r0, [r7, #4]
 801af0a:	000a      	movs	r2, r1
 801af0c:	1cfb      	adds	r3, r7, #3
 801af0e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801af10:	240f      	movs	r4, #15
 801af12:	193b      	adds	r3, r7, r4
 801af14:	2202      	movs	r2, #2
 801af16:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801af18:	687a      	ldr	r2, [r7, #4]
 801af1a:	23ad      	movs	r3, #173	@ 0xad
 801af1c:	009b      	lsls	r3, r3, #2
 801af1e:	58d3      	ldr	r3, [r2, r3]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d00e      	beq.n	801af42 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801af24:	687a      	ldr	r2, [r7, #4]
 801af26:	23ad      	movs	r3, #173	@ 0xad
 801af28:	009b      	lsls	r3, r3, #2
 801af2a:	58d3      	ldr	r3, [r2, r3]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	1cfa      	adds	r2, r7, #3
 801af30:	7811      	ldrb	r1, [r2, #0]
 801af32:	687a      	ldr	r2, [r7, #4]
 801af34:	0010      	movs	r0, r2
 801af36:	4798      	blx	r3
 801af38:	1e03      	subs	r3, r0, #0
 801af3a:	d102      	bne.n	801af42 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801af3c:	193b      	adds	r3, r7, r4
 801af3e:	2200      	movs	r2, #0
 801af40:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801af42:	230f      	movs	r3, #15
 801af44:	18fb      	adds	r3, r7, r3
 801af46:	781b      	ldrb	r3, [r3, #0]
}
 801af48:	0018      	movs	r0, r3
 801af4a:	46bd      	mov	sp, r7
 801af4c:	b005      	add	sp, #20
 801af4e:	bd90      	pop	{r4, r7, pc}

0801af50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801af50:	b580      	push	{r7, lr}
 801af52:	b082      	sub	sp, #8
 801af54:	af00      	add	r7, sp, #0
 801af56:	6078      	str	r0, [r7, #4]
 801af58:	000a      	movs	r2, r1
 801af5a:	1cfb      	adds	r3, r7, #3
 801af5c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801af5e:	687a      	ldr	r2, [r7, #4]
 801af60:	23ad      	movs	r3, #173	@ 0xad
 801af62:	009b      	lsls	r3, r3, #2
 801af64:	58d3      	ldr	r3, [r2, r3]
 801af66:	685b      	ldr	r3, [r3, #4]
 801af68:	1cfa      	adds	r2, r7, #3
 801af6a:	7811      	ldrb	r1, [r2, #0]
 801af6c:	687a      	ldr	r2, [r7, #4]
 801af6e:	0010      	movs	r0, r2
 801af70:	4798      	blx	r3

  return USBD_OK;
 801af72:	2300      	movs	r3, #0
}
 801af74:	0018      	movs	r0, r3
 801af76:	46bd      	mov	sp, r7
 801af78:	b002      	add	sp, #8
 801af7a:	bd80      	pop	{r7, pc}

0801af7c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b082      	sub	sp, #8
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
 801af84:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	22aa      	movs	r2, #170	@ 0xaa
 801af8a:	0092      	lsls	r2, r2, #2
 801af8c:	4694      	mov	ip, r2
 801af8e:	4463      	add	r3, ip
 801af90:	683a      	ldr	r2, [r7, #0]
 801af92:	0011      	movs	r1, r2
 801af94:	0018      	movs	r0, r3
 801af96:	f001 f810 	bl	801bfba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801af9a:	687a      	ldr	r2, [r7, #4]
 801af9c:	23a5      	movs	r3, #165	@ 0xa5
 801af9e:	009b      	lsls	r3, r3, #2
 801afa0:	2101      	movs	r1, #1
 801afa2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	4a23      	ldr	r2, [pc, #140]	@ (801b034 <USBD_LL_SetupStage+0xb8>)
 801afa8:	5a9b      	ldrh	r3, [r3, r2]
 801afaa:	0019      	movs	r1, r3
 801afac:	687a      	ldr	r2, [r7, #4]
 801afae:	23a6      	movs	r3, #166	@ 0xa6
 801afb0:	009b      	lsls	r3, r3, #2
 801afb2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801afb4:	687a      	ldr	r2, [r7, #4]
 801afb6:	23aa      	movs	r3, #170	@ 0xaa
 801afb8:	009b      	lsls	r3, r3, #2
 801afba:	5cd3      	ldrb	r3, [r2, r3]
 801afbc:	001a      	movs	r2, r3
 801afbe:	231f      	movs	r3, #31
 801afc0:	4013      	ands	r3, r2
 801afc2:	2b02      	cmp	r3, #2
 801afc4:	d019      	beq.n	801affa <USBD_LL_SetupStage+0x7e>
 801afc6:	d822      	bhi.n	801b00e <USBD_LL_SetupStage+0x92>
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d002      	beq.n	801afd2 <USBD_LL_SetupStage+0x56>
 801afcc:	2b01      	cmp	r3, #1
 801afce:	d00a      	beq.n	801afe6 <USBD_LL_SetupStage+0x6a>
 801afd0:	e01d      	b.n	801b00e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	22aa      	movs	r2, #170	@ 0xaa
 801afd6:	0092      	lsls	r2, r2, #2
 801afd8:	189a      	adds	r2, r3, r2
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	0011      	movs	r1, r2
 801afde:	0018      	movs	r0, r3
 801afe0:	f000 fa10 	bl	801b404 <USBD_StdDevReq>
      break;
 801afe4:	e020      	b.n	801b028 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	22aa      	movs	r2, #170	@ 0xaa
 801afea:	0092      	lsls	r2, r2, #2
 801afec:	189a      	adds	r2, r3, r2
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	0011      	movs	r1, r2
 801aff2:	0018      	movs	r0, r3
 801aff4:	f000 fa78 	bl	801b4e8 <USBD_StdItfReq>
      break;
 801aff8:	e016      	b.n	801b028 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	22aa      	movs	r2, #170	@ 0xaa
 801affe:	0092      	lsls	r2, r2, #2
 801b000:	189a      	adds	r2, r3, r2
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	0011      	movs	r1, r2
 801b006:	0018      	movs	r0, r3
 801b008:	f000 fac5 	bl	801b596 <USBD_StdEPReq>
      break;
 801b00c:	e00c      	b.n	801b028 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b00e:	687a      	ldr	r2, [r7, #4]
 801b010:	23aa      	movs	r3, #170	@ 0xaa
 801b012:	009b      	lsls	r3, r3, #2
 801b014:	5cd3      	ldrb	r3, [r2, r3]
 801b016:	227f      	movs	r2, #127	@ 0x7f
 801b018:	4393      	bics	r3, r2
 801b01a:	b2da      	uxtb	r2, r3
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	0011      	movs	r1, r2
 801b020:	0018      	movs	r0, r3
 801b022:	f001 fd2a 	bl	801ca7a <USBD_LL_StallEP>
      break;
 801b026:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b028:	2300      	movs	r3, #0
}
 801b02a:	0018      	movs	r0, r3
 801b02c:	46bd      	mov	sp, r7
 801b02e:	b002      	add	sp, #8
 801b030:	bd80      	pop	{r7, pc}
 801b032:	46c0      	nop			@ (mov r8, r8)
 801b034:	000002ae 	.word	0x000002ae

0801b038 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b086      	sub	sp, #24
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	60f8      	str	r0, [r7, #12]
 801b040:	607a      	str	r2, [r7, #4]
 801b042:	200b      	movs	r0, #11
 801b044:	183b      	adds	r3, r7, r0
 801b046:	1c0a      	adds	r2, r1, #0
 801b048:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b04a:	183b      	adds	r3, r7, r0
 801b04c:	781b      	ldrb	r3, [r3, #0]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d154      	bne.n	801b0fc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	3355      	adds	r3, #85	@ 0x55
 801b056:	33ff      	adds	r3, #255	@ 0xff
 801b058:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b05a:	68fa      	ldr	r2, [r7, #12]
 801b05c:	23a5      	movs	r3, #165	@ 0xa5
 801b05e:	009b      	lsls	r3, r3, #2
 801b060:	58d3      	ldr	r3, [r2, r3]
 801b062:	2b03      	cmp	r3, #3
 801b064:	d139      	bne.n	801b0da <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801b066:	697b      	ldr	r3, [r7, #20]
 801b068:	68da      	ldr	r2, [r3, #12]
 801b06a:	697b      	ldr	r3, [r7, #20]
 801b06c:	691b      	ldr	r3, [r3, #16]
 801b06e:	429a      	cmp	r2, r3
 801b070:	d919      	bls.n	801b0a6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801b072:	697b      	ldr	r3, [r7, #20]
 801b074:	68da      	ldr	r2, [r3, #12]
 801b076:	697b      	ldr	r3, [r7, #20]
 801b078:	691b      	ldr	r3, [r3, #16]
 801b07a:	1ad2      	subs	r2, r2, r3
 801b07c:	697b      	ldr	r3, [r7, #20]
 801b07e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b080:	697b      	ldr	r3, [r7, #20]
 801b082:	68da      	ldr	r2, [r3, #12]
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b088:	429a      	cmp	r2, r3
 801b08a:	d203      	bcs.n	801b094 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b08c:	697b      	ldr	r3, [r7, #20]
 801b08e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801b090:	b29b      	uxth	r3, r3
 801b092:	e002      	b.n	801b09a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b094:	697b      	ldr	r3, [r7, #20]
 801b096:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b098:	b29b      	uxth	r3, r3
 801b09a:	6879      	ldr	r1, [r7, #4]
 801b09c:	68f8      	ldr	r0, [r7, #12]
 801b09e:	001a      	movs	r2, r3
 801b0a0:	f001 f898 	bl	801c1d4 <USBD_CtlContinueRx>
 801b0a4:	e045      	b.n	801b132 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b0a6:	68fa      	ldr	r2, [r7, #12]
 801b0a8:	23ad      	movs	r3, #173	@ 0xad
 801b0aa:	009b      	lsls	r3, r3, #2
 801b0ac:	58d3      	ldr	r3, [r2, r3]
 801b0ae:	691b      	ldr	r3, [r3, #16]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d00d      	beq.n	801b0d0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b0b4:	68fa      	ldr	r2, [r7, #12]
 801b0b6:	23a7      	movs	r3, #167	@ 0xa7
 801b0b8:	009b      	lsls	r3, r3, #2
 801b0ba:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b0bc:	2b03      	cmp	r3, #3
 801b0be:	d107      	bne.n	801b0d0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b0c0:	68fa      	ldr	r2, [r7, #12]
 801b0c2:	23ad      	movs	r3, #173	@ 0xad
 801b0c4:	009b      	lsls	r3, r3, #2
 801b0c6:	58d3      	ldr	r3, [r2, r3]
 801b0c8:	691b      	ldr	r3, [r3, #16]
 801b0ca:	68fa      	ldr	r2, [r7, #12]
 801b0cc:	0010      	movs	r0, r2
 801b0ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	0018      	movs	r0, r3
 801b0d4:	f001 f891 	bl	801c1fa <USBD_CtlSendStatus>
 801b0d8:	e02b      	b.n	801b132 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b0da:	68fa      	ldr	r2, [r7, #12]
 801b0dc:	23a5      	movs	r3, #165	@ 0xa5
 801b0de:	009b      	lsls	r3, r3, #2
 801b0e0:	58d3      	ldr	r3, [r2, r3]
 801b0e2:	2b05      	cmp	r3, #5
 801b0e4:	d125      	bne.n	801b132 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801b0e6:	68fa      	ldr	r2, [r7, #12]
 801b0e8:	23a5      	movs	r3, #165	@ 0xa5
 801b0ea:	009b      	lsls	r3, r3, #2
 801b0ec:	2100      	movs	r1, #0
 801b0ee:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	2100      	movs	r1, #0
 801b0f4:	0018      	movs	r0, r3
 801b0f6:	f001 fcc0 	bl	801ca7a <USBD_LL_StallEP>
 801b0fa:	e01a      	b.n	801b132 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801b0fc:	68fa      	ldr	r2, [r7, #12]
 801b0fe:	23ad      	movs	r3, #173	@ 0xad
 801b100:	009b      	lsls	r3, r3, #2
 801b102:	58d3      	ldr	r3, [r2, r3]
 801b104:	699b      	ldr	r3, [r3, #24]
 801b106:	2b00      	cmp	r3, #0
 801b108:	d011      	beq.n	801b12e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b10a:	68fa      	ldr	r2, [r7, #12]
 801b10c:	23a7      	movs	r3, #167	@ 0xa7
 801b10e:	009b      	lsls	r3, r3, #2
 801b110:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801b112:	2b03      	cmp	r3, #3
 801b114:	d10b      	bne.n	801b12e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801b116:	68fa      	ldr	r2, [r7, #12]
 801b118:	23ad      	movs	r3, #173	@ 0xad
 801b11a:	009b      	lsls	r3, r3, #2
 801b11c:	58d3      	ldr	r3, [r2, r3]
 801b11e:	699b      	ldr	r3, [r3, #24]
 801b120:	220b      	movs	r2, #11
 801b122:	18ba      	adds	r2, r7, r2
 801b124:	7811      	ldrb	r1, [r2, #0]
 801b126:	68fa      	ldr	r2, [r7, #12]
 801b128:	0010      	movs	r0, r2
 801b12a:	4798      	blx	r3
 801b12c:	e001      	b.n	801b132 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b12e:	2302      	movs	r3, #2
 801b130:	e000      	b.n	801b134 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801b132:	2300      	movs	r3, #0
}
 801b134:	0018      	movs	r0, r3
 801b136:	46bd      	mov	sp, r7
 801b138:	b006      	add	sp, #24
 801b13a:	bd80      	pop	{r7, pc}

0801b13c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b086      	sub	sp, #24
 801b140:	af00      	add	r7, sp, #0
 801b142:	60f8      	str	r0, [r7, #12]
 801b144:	607a      	str	r2, [r7, #4]
 801b146:	200b      	movs	r0, #11
 801b148:	183b      	adds	r3, r7, r0
 801b14a:	1c0a      	adds	r2, r1, #0
 801b14c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b14e:	183b      	adds	r3, r7, r0
 801b150:	781b      	ldrb	r3, [r3, #0]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d000      	beq.n	801b158 <USBD_LL_DataInStage+0x1c>
 801b156:	e08e      	b.n	801b276 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	3314      	adds	r3, #20
 801b15c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b15e:	68fa      	ldr	r2, [r7, #12]
 801b160:	23a5      	movs	r3, #165	@ 0xa5
 801b162:	009b      	lsls	r3, r3, #2
 801b164:	58d3      	ldr	r3, [r2, r3]
 801b166:	2b02      	cmp	r3, #2
 801b168:	d164      	bne.n	801b234 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	68da      	ldr	r2, [r3, #12]
 801b16e:	697b      	ldr	r3, [r7, #20]
 801b170:	691b      	ldr	r3, [r3, #16]
 801b172:	429a      	cmp	r2, r3
 801b174:	d915      	bls.n	801b1a2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	68da      	ldr	r2, [r3, #12]
 801b17a:	697b      	ldr	r3, [r7, #20]
 801b17c:	691b      	ldr	r3, [r3, #16]
 801b17e:	1ad2      	subs	r2, r2, r3
 801b180:	697b      	ldr	r3, [r7, #20]
 801b182:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801b184:	697b      	ldr	r3, [r7, #20]
 801b186:	68db      	ldr	r3, [r3, #12]
 801b188:	b29a      	uxth	r2, r3
 801b18a:	6879      	ldr	r1, [r7, #4]
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	0018      	movs	r0, r3
 801b190:	f000 ffe9 	bl	801c166 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b194:	68f8      	ldr	r0, [r7, #12]
 801b196:	2300      	movs	r3, #0
 801b198:	2200      	movs	r2, #0
 801b19a:	2100      	movs	r1, #0
 801b19c:	f001 fd56 	bl	801cc4c <USBD_LL_PrepareReceive>
 801b1a0:	e059      	b.n	801b256 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b1a2:	697b      	ldr	r3, [r7, #20]
 801b1a4:	689a      	ldr	r2, [r3, #8]
 801b1a6:	697b      	ldr	r3, [r7, #20]
 801b1a8:	691b      	ldr	r3, [r3, #16]
 801b1aa:	0019      	movs	r1, r3
 801b1ac:	0010      	movs	r0, r2
 801b1ae:	f7e5 f87f 	bl	80002b0 <__aeabi_uidivmod>
 801b1b2:	1e0b      	subs	r3, r1, #0
 801b1b4:	d11f      	bne.n	801b1f6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	689a      	ldr	r2, [r3, #8]
 801b1ba:	697b      	ldr	r3, [r7, #20]
 801b1bc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	d319      	bcc.n	801b1f6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801b1c2:	697b      	ldr	r3, [r7, #20]
 801b1c4:	689a      	ldr	r2, [r3, #8]
 801b1c6:	68f9      	ldr	r1, [r7, #12]
 801b1c8:	23a6      	movs	r3, #166	@ 0xa6
 801b1ca:	009b      	lsls	r3, r3, #2
 801b1cc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801b1ce:	429a      	cmp	r2, r3
 801b1d0:	d211      	bcs.n	801b1f6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	2100      	movs	r1, #0
 801b1d8:	0018      	movs	r0, r3
 801b1da:	f000 ffc4 	bl	801c166 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b1de:	68fa      	ldr	r2, [r7, #12]
 801b1e0:	23a6      	movs	r3, #166	@ 0xa6
 801b1e2:	009b      	lsls	r3, r3, #2
 801b1e4:	2100      	movs	r1, #0
 801b1e6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b1e8:	68f8      	ldr	r0, [r7, #12]
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	2100      	movs	r1, #0
 801b1f0:	f001 fd2c 	bl	801cc4c <USBD_LL_PrepareReceive>
 801b1f4:	e02f      	b.n	801b256 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b1f6:	68fa      	ldr	r2, [r7, #12]
 801b1f8:	23ad      	movs	r3, #173	@ 0xad
 801b1fa:	009b      	lsls	r3, r3, #2
 801b1fc:	58d3      	ldr	r3, [r2, r3]
 801b1fe:	68db      	ldr	r3, [r3, #12]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d00d      	beq.n	801b220 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b204:	68fa      	ldr	r2, [r7, #12]
 801b206:	23a7      	movs	r3, #167	@ 0xa7
 801b208:	009b      	lsls	r3, r3, #2
 801b20a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b20c:	2b03      	cmp	r3, #3
 801b20e:	d107      	bne.n	801b220 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801b210:	68fa      	ldr	r2, [r7, #12]
 801b212:	23ad      	movs	r3, #173	@ 0xad
 801b214:	009b      	lsls	r3, r3, #2
 801b216:	58d3      	ldr	r3, [r2, r3]
 801b218:	68db      	ldr	r3, [r3, #12]
 801b21a:	68fa      	ldr	r2, [r7, #12]
 801b21c:	0010      	movs	r0, r2
 801b21e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	2180      	movs	r1, #128	@ 0x80
 801b224:	0018      	movs	r0, r3
 801b226:	f001 fc28 	bl	801ca7a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	0018      	movs	r0, r3
 801b22e:	f000 fff8 	bl	801c222 <USBD_CtlReceiveStatus>
 801b232:	e010      	b.n	801b256 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b234:	68fa      	ldr	r2, [r7, #12]
 801b236:	23a5      	movs	r3, #165	@ 0xa5
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	58d3      	ldr	r3, [r2, r3]
 801b23c:	2b04      	cmp	r3, #4
 801b23e:	d005      	beq.n	801b24c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801b240:	68fa      	ldr	r2, [r7, #12]
 801b242:	23a5      	movs	r3, #165	@ 0xa5
 801b244:	009b      	lsls	r3, r3, #2
 801b246:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d104      	bne.n	801b256 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	2180      	movs	r1, #128	@ 0x80
 801b250:	0018      	movs	r0, r3
 801b252:	f001 fc12 	bl	801ca7a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801b256:	68fa      	ldr	r2, [r7, #12]
 801b258:	23a8      	movs	r3, #168	@ 0xa8
 801b25a:	009b      	lsls	r3, r3, #2
 801b25c:	5cd3      	ldrb	r3, [r2, r3]
 801b25e:	2b01      	cmp	r3, #1
 801b260:	d124      	bne.n	801b2ac <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	0018      	movs	r0, r3
 801b266:	f7ff fe43 	bl	801aef0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b26a:	68fa      	ldr	r2, [r7, #12]
 801b26c:	23a8      	movs	r3, #168	@ 0xa8
 801b26e:	009b      	lsls	r3, r3, #2
 801b270:	2100      	movs	r1, #0
 801b272:	54d1      	strb	r1, [r2, r3]
 801b274:	e01a      	b.n	801b2ac <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801b276:	68fa      	ldr	r2, [r7, #12]
 801b278:	23ad      	movs	r3, #173	@ 0xad
 801b27a:	009b      	lsls	r3, r3, #2
 801b27c:	58d3      	ldr	r3, [r2, r3]
 801b27e:	695b      	ldr	r3, [r3, #20]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d011      	beq.n	801b2a8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b284:	68fa      	ldr	r2, [r7, #12]
 801b286:	23a7      	movs	r3, #167	@ 0xa7
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801b28c:	2b03      	cmp	r3, #3
 801b28e:	d10b      	bne.n	801b2a8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801b290:	68fa      	ldr	r2, [r7, #12]
 801b292:	23ad      	movs	r3, #173	@ 0xad
 801b294:	009b      	lsls	r3, r3, #2
 801b296:	58d3      	ldr	r3, [r2, r3]
 801b298:	695b      	ldr	r3, [r3, #20]
 801b29a:	220b      	movs	r2, #11
 801b29c:	18ba      	adds	r2, r7, r2
 801b29e:	7811      	ldrb	r1, [r2, #0]
 801b2a0:	68fa      	ldr	r2, [r7, #12]
 801b2a2:	0010      	movs	r0, r2
 801b2a4:	4798      	blx	r3
 801b2a6:	e001      	b.n	801b2ac <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b2a8:	2302      	movs	r3, #2
 801b2aa:	e000      	b.n	801b2ae <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801b2ac:	2300      	movs	r3, #0
}
 801b2ae:	0018      	movs	r0, r3
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	b006      	add	sp, #24
 801b2b4:	bd80      	pop	{r7, pc}

0801b2b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b2b6:	b580      	push	{r7, lr}
 801b2b8:	b082      	sub	sp, #8
 801b2ba:	af00      	add	r7, sp, #0
 801b2bc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b2be:	6878      	ldr	r0, [r7, #4]
 801b2c0:	2340      	movs	r3, #64	@ 0x40
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	2100      	movs	r1, #0
 801b2c6:	f001 fb76 	bl	801c9b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b2ca:	687a      	ldr	r2, [r7, #4]
 801b2cc:	23ac      	movs	r3, #172	@ 0xac
 801b2ce:	005b      	lsls	r3, r3, #1
 801b2d0:	2101      	movs	r1, #1
 801b2d2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b2d4:	687a      	ldr	r2, [r7, #4]
 801b2d6:	23b2      	movs	r3, #178	@ 0xb2
 801b2d8:	005b      	lsls	r3, r3, #1
 801b2da:	2140      	movs	r1, #64	@ 0x40
 801b2dc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b2de:	6878      	ldr	r0, [r7, #4]
 801b2e0:	2340      	movs	r3, #64	@ 0x40
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	2180      	movs	r1, #128	@ 0x80
 801b2e6:	f001 fb66 	bl	801c9b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	2201      	movs	r2, #1
 801b2ee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	2240      	movs	r2, #64	@ 0x40
 801b2f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b2f6:	687a      	ldr	r2, [r7, #4]
 801b2f8:	23a7      	movs	r3, #167	@ 0xa7
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	2101      	movs	r1, #1
 801b2fe:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801b300:	687a      	ldr	r2, [r7, #4]
 801b302:	23a5      	movs	r3, #165	@ 0xa5
 801b304:	009b      	lsls	r3, r3, #2
 801b306:	2100      	movs	r1, #0
 801b308:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	2200      	movs	r2, #0
 801b30e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b310:	687a      	ldr	r2, [r7, #4]
 801b312:	23a9      	movs	r3, #169	@ 0xa9
 801b314:	009b      	lsls	r3, r3, #2
 801b316:	2100      	movs	r1, #0
 801b318:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801b31a:	687a      	ldr	r2, [r7, #4]
 801b31c:	23ae      	movs	r3, #174	@ 0xae
 801b31e:	009b      	lsls	r3, r3, #2
 801b320:	58d3      	ldr	r3, [r2, r3]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d00a      	beq.n	801b33c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801b326:	687a      	ldr	r2, [r7, #4]
 801b328:	23ad      	movs	r3, #173	@ 0xad
 801b32a:	009b      	lsls	r3, r3, #2
 801b32c:	58d3      	ldr	r3, [r2, r3]
 801b32e:	685a      	ldr	r2, [r3, #4]
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	685b      	ldr	r3, [r3, #4]
 801b334:	b2d9      	uxtb	r1, r3
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	0018      	movs	r0, r3
 801b33a:	4790      	blx	r2
  }

  return USBD_OK;
 801b33c:	2300      	movs	r3, #0
}
 801b33e:	0018      	movs	r0, r3
 801b340:	46bd      	mov	sp, r7
 801b342:	b002      	add	sp, #8
 801b344:	bd80      	pop	{r7, pc}

0801b346 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b346:	b580      	push	{r7, lr}
 801b348:	b082      	sub	sp, #8
 801b34a:	af00      	add	r7, sp, #0
 801b34c:	6078      	str	r0, [r7, #4]
 801b34e:	000a      	movs	r2, r1
 801b350:	1cfb      	adds	r3, r7, #3
 801b352:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	1cfa      	adds	r2, r7, #3
 801b358:	7812      	ldrb	r2, [r2, #0]
 801b35a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b35c:	2300      	movs	r3, #0
}
 801b35e:	0018      	movs	r0, r3
 801b360:	46bd      	mov	sp, r7
 801b362:	b002      	add	sp, #8
 801b364:	bd80      	pop	{r7, pc}
	...

0801b368 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b082      	sub	sp, #8
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801b370:	687a      	ldr	r2, [r7, #4]
 801b372:	23a7      	movs	r3, #167	@ 0xa7
 801b374:	009b      	lsls	r3, r3, #2
 801b376:	5cd1      	ldrb	r1, [r2, r3]
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	4a06      	ldr	r2, [pc, #24]	@ (801b394 <USBD_LL_Suspend+0x2c>)
 801b37c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801b37e:	687a      	ldr	r2, [r7, #4]
 801b380:	23a7      	movs	r3, #167	@ 0xa7
 801b382:	009b      	lsls	r3, r3, #2
 801b384:	2104      	movs	r1, #4
 801b386:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801b388:	2300      	movs	r3, #0
}
 801b38a:	0018      	movs	r0, r3
 801b38c:	46bd      	mov	sp, r7
 801b38e:	b002      	add	sp, #8
 801b390:	bd80      	pop	{r7, pc}
 801b392:	46c0      	nop			@ (mov r8, r8)
 801b394:	0000029d 	.word	0x0000029d

0801b398 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b398:	b580      	push	{r7, lr}
 801b39a:	b082      	sub	sp, #8
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b3a0:	687a      	ldr	r2, [r7, #4]
 801b3a2:	23a7      	movs	r3, #167	@ 0xa7
 801b3a4:	009b      	lsls	r3, r3, #2
 801b3a6:	5cd3      	ldrb	r3, [r2, r3]
 801b3a8:	2b04      	cmp	r3, #4
 801b3aa:	d106      	bne.n	801b3ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	4a05      	ldr	r2, [pc, #20]	@ (801b3c4 <USBD_LL_Resume+0x2c>)
 801b3b0:	5c99      	ldrb	r1, [r3, r2]
 801b3b2:	687a      	ldr	r2, [r7, #4]
 801b3b4:	23a7      	movs	r3, #167	@ 0xa7
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801b3ba:	2300      	movs	r3, #0
}
 801b3bc:	0018      	movs	r0, r3
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	b002      	add	sp, #8
 801b3c2:	bd80      	pop	{r7, pc}
 801b3c4:	0000029d 	.word	0x0000029d

0801b3c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b3c8:	b580      	push	{r7, lr}
 801b3ca:	b082      	sub	sp, #8
 801b3cc:	af00      	add	r7, sp, #0
 801b3ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b3d0:	687a      	ldr	r2, [r7, #4]
 801b3d2:	23a7      	movs	r3, #167	@ 0xa7
 801b3d4:	009b      	lsls	r3, r3, #2
 801b3d6:	5cd3      	ldrb	r3, [r2, r3]
 801b3d8:	2b03      	cmp	r3, #3
 801b3da:	d10e      	bne.n	801b3fa <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801b3dc:	687a      	ldr	r2, [r7, #4]
 801b3de:	23ad      	movs	r3, #173	@ 0xad
 801b3e0:	009b      	lsls	r3, r3, #2
 801b3e2:	58d3      	ldr	r3, [r2, r3]
 801b3e4:	69db      	ldr	r3, [r3, #28]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d007      	beq.n	801b3fa <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801b3ea:	687a      	ldr	r2, [r7, #4]
 801b3ec:	23ad      	movs	r3, #173	@ 0xad
 801b3ee:	009b      	lsls	r3, r3, #2
 801b3f0:	58d3      	ldr	r3, [r2, r3]
 801b3f2:	69db      	ldr	r3, [r3, #28]
 801b3f4:	687a      	ldr	r2, [r7, #4]
 801b3f6:	0010      	movs	r0, r2
 801b3f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b3fa:	2300      	movs	r3, #0
}
 801b3fc:	0018      	movs	r0, r3
 801b3fe:	46bd      	mov	sp, r7
 801b400:	b002      	add	sp, #8
 801b402:	bd80      	pop	{r7, pc}

0801b404 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b084      	sub	sp, #16
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
 801b40c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b40e:	230f      	movs	r3, #15
 801b410:	18fb      	adds	r3, r7, r3
 801b412:	2200      	movs	r2, #0
 801b414:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b416:	683b      	ldr	r3, [r7, #0]
 801b418:	781b      	ldrb	r3, [r3, #0]
 801b41a:	001a      	movs	r2, r3
 801b41c:	2360      	movs	r3, #96	@ 0x60
 801b41e:	4013      	ands	r3, r2
 801b420:	2b40      	cmp	r3, #64	@ 0x40
 801b422:	d004      	beq.n	801b42e <USBD_StdDevReq+0x2a>
 801b424:	d84f      	bhi.n	801b4c6 <USBD_StdDevReq+0xc2>
 801b426:	2b00      	cmp	r3, #0
 801b428:	d00b      	beq.n	801b442 <USBD_StdDevReq+0x3e>
 801b42a:	2b20      	cmp	r3, #32
 801b42c:	d14b      	bne.n	801b4c6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b42e:	687a      	ldr	r2, [r7, #4]
 801b430:	23ad      	movs	r3, #173	@ 0xad
 801b432:	009b      	lsls	r3, r3, #2
 801b434:	58d3      	ldr	r3, [r2, r3]
 801b436:	689b      	ldr	r3, [r3, #8]
 801b438:	6839      	ldr	r1, [r7, #0]
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	0010      	movs	r0, r2
 801b43e:	4798      	blx	r3
      break;
 801b440:	e048      	b.n	801b4d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b442:	683b      	ldr	r3, [r7, #0]
 801b444:	785b      	ldrb	r3, [r3, #1]
 801b446:	2b09      	cmp	r3, #9
 801b448:	d835      	bhi.n	801b4b6 <USBD_StdDevReq+0xb2>
 801b44a:	009a      	lsls	r2, r3, #2
 801b44c:	4b25      	ldr	r3, [pc, #148]	@ (801b4e4 <USBD_StdDevReq+0xe0>)
 801b44e:	18d3      	adds	r3, r2, r3
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b454:	683a      	ldr	r2, [r7, #0]
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	0011      	movs	r1, r2
 801b45a:	0018      	movs	r0, r3
 801b45c:	f000 fa52 	bl	801b904 <USBD_GetDescriptor>
          break;
 801b460:	e030      	b.n	801b4c4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b462:	683a      	ldr	r2, [r7, #0]
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	0011      	movs	r1, r2
 801b468:	0018      	movs	r0, r3
 801b46a:	f000 fbfd 	bl	801bc68 <USBD_SetAddress>
          break;
 801b46e:	e029      	b.n	801b4c4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801b470:	683a      	ldr	r2, [r7, #0]
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	0011      	movs	r1, r2
 801b476:	0018      	movs	r0, r3
 801b478:	f000 fc4a 	bl	801bd10 <USBD_SetConfig>
          break;
 801b47c:	e022      	b.n	801b4c4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b47e:	683a      	ldr	r2, [r7, #0]
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	0011      	movs	r1, r2
 801b484:	0018      	movs	r0, r3
 801b486:	f000 fce7 	bl	801be58 <USBD_GetConfig>
          break;
 801b48a:	e01b      	b.n	801b4c4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b48c:	683a      	ldr	r2, [r7, #0]
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	0011      	movs	r1, r2
 801b492:	0018      	movs	r0, r3
 801b494:	f000 fd1b 	bl	801bece <USBD_GetStatus>
          break;
 801b498:	e014      	b.n	801b4c4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b49a:	683a      	ldr	r2, [r7, #0]
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	0011      	movs	r1, r2
 801b4a0:	0018      	movs	r0, r3
 801b4a2:	f000 fd4e 	bl	801bf42 <USBD_SetFeature>
          break;
 801b4a6:	e00d      	b.n	801b4c4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b4a8:	683a      	ldr	r2, [r7, #0]
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	0011      	movs	r1, r2
 801b4ae:	0018      	movs	r0, r3
 801b4b0:	f000 fd5d 	bl	801bf6e <USBD_ClrFeature>
          break;
 801b4b4:	e006      	b.n	801b4c4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b4b6:	683a      	ldr	r2, [r7, #0]
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	0011      	movs	r1, r2
 801b4bc:	0018      	movs	r0, r3
 801b4be:	f000 fdb4 	bl	801c02a <USBD_CtlError>
          break;
 801b4c2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b4c4:	e006      	b.n	801b4d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801b4c6:	683a      	ldr	r2, [r7, #0]
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	0011      	movs	r1, r2
 801b4cc:	0018      	movs	r0, r3
 801b4ce:	f000 fdac 	bl	801c02a <USBD_CtlError>
      break;
 801b4d2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b4d4:	230f      	movs	r3, #15
 801b4d6:	18fb      	adds	r3, r7, r3
 801b4d8:	781b      	ldrb	r3, [r3, #0]
}
 801b4da:	0018      	movs	r0, r3
 801b4dc:	46bd      	mov	sp, r7
 801b4de:	b004      	add	sp, #16
 801b4e0:	bd80      	pop	{r7, pc}
 801b4e2:	46c0      	nop			@ (mov r8, r8)
 801b4e4:	080249c0 	.word	0x080249c0

0801b4e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801b4e8:	b5b0      	push	{r4, r5, r7, lr}
 801b4ea:	b084      	sub	sp, #16
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	6078      	str	r0, [r7, #4]
 801b4f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b4f2:	230f      	movs	r3, #15
 801b4f4:	18fb      	adds	r3, r7, r3
 801b4f6:	2200      	movs	r2, #0
 801b4f8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b4fa:	683b      	ldr	r3, [r7, #0]
 801b4fc:	781b      	ldrb	r3, [r3, #0]
 801b4fe:	001a      	movs	r2, r3
 801b500:	2360      	movs	r3, #96	@ 0x60
 801b502:	4013      	ands	r3, r2
 801b504:	2b40      	cmp	r3, #64	@ 0x40
 801b506:	d004      	beq.n	801b512 <USBD_StdItfReq+0x2a>
 801b508:	d839      	bhi.n	801b57e <USBD_StdItfReq+0x96>
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d001      	beq.n	801b512 <USBD_StdItfReq+0x2a>
 801b50e:	2b20      	cmp	r3, #32
 801b510:	d135      	bne.n	801b57e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b512:	687a      	ldr	r2, [r7, #4]
 801b514:	23a7      	movs	r3, #167	@ 0xa7
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	5cd3      	ldrb	r3, [r2, r3]
 801b51a:	3b01      	subs	r3, #1
 801b51c:	2b02      	cmp	r3, #2
 801b51e:	d825      	bhi.n	801b56c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	889b      	ldrh	r3, [r3, #4]
 801b524:	b2db      	uxtb	r3, r3
 801b526:	2b01      	cmp	r3, #1
 801b528:	d819      	bhi.n	801b55e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b52a:	687a      	ldr	r2, [r7, #4]
 801b52c:	23ad      	movs	r3, #173	@ 0xad
 801b52e:	009b      	lsls	r3, r3, #2
 801b530:	58d3      	ldr	r3, [r2, r3]
 801b532:	689b      	ldr	r3, [r3, #8]
 801b534:	250f      	movs	r5, #15
 801b536:	197c      	adds	r4, r7, r5
 801b538:	6839      	ldr	r1, [r7, #0]
 801b53a:	687a      	ldr	r2, [r7, #4]
 801b53c:	0010      	movs	r0, r2
 801b53e:	4798      	blx	r3
 801b540:	0003      	movs	r3, r0
 801b542:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b544:	683b      	ldr	r3, [r7, #0]
 801b546:	88db      	ldrh	r3, [r3, #6]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d116      	bne.n	801b57a <USBD_StdItfReq+0x92>
 801b54c:	197b      	adds	r3, r7, r5
 801b54e:	781b      	ldrb	r3, [r3, #0]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d112      	bne.n	801b57a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	0018      	movs	r0, r3
 801b558:	f000 fe4f 	bl	801c1fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b55c:	e00d      	b.n	801b57a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b55e:	683a      	ldr	r2, [r7, #0]
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	0011      	movs	r1, r2
 801b564:	0018      	movs	r0, r3
 801b566:	f000 fd60 	bl	801c02a <USBD_CtlError>
          break;
 801b56a:	e006      	b.n	801b57a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b56c:	683a      	ldr	r2, [r7, #0]
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	0011      	movs	r1, r2
 801b572:	0018      	movs	r0, r3
 801b574:	f000 fd59 	bl	801c02a <USBD_CtlError>
          break;
 801b578:	e000      	b.n	801b57c <USBD_StdItfReq+0x94>
          break;
 801b57a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b57c:	e006      	b.n	801b58c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b57e:	683a      	ldr	r2, [r7, #0]
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	0011      	movs	r1, r2
 801b584:	0018      	movs	r0, r3
 801b586:	f000 fd50 	bl	801c02a <USBD_CtlError>
      break;
 801b58a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b58c:	2300      	movs	r3, #0
}
 801b58e:	0018      	movs	r0, r3
 801b590:	46bd      	mov	sp, r7
 801b592:	b004      	add	sp, #16
 801b594:	bdb0      	pop	{r4, r5, r7, pc}

0801b596 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b596:	b5b0      	push	{r4, r5, r7, lr}
 801b598:	b084      	sub	sp, #16
 801b59a:	af00      	add	r7, sp, #0
 801b59c:	6078      	str	r0, [r7, #4]
 801b59e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b5a0:	230f      	movs	r3, #15
 801b5a2:	18fb      	adds	r3, r7, r3
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b5a8:	683b      	ldr	r3, [r7, #0]
 801b5aa:	889a      	ldrh	r2, [r3, #4]
 801b5ac:	230e      	movs	r3, #14
 801b5ae:	18fb      	adds	r3, r7, r3
 801b5b0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b5b2:	683b      	ldr	r3, [r7, #0]
 801b5b4:	781b      	ldrb	r3, [r3, #0]
 801b5b6:	001a      	movs	r2, r3
 801b5b8:	2360      	movs	r3, #96	@ 0x60
 801b5ba:	4013      	ands	r3, r2
 801b5bc:	2b40      	cmp	r3, #64	@ 0x40
 801b5be:	d006      	beq.n	801b5ce <USBD_StdEPReq+0x38>
 801b5c0:	d900      	bls.n	801b5c4 <USBD_StdEPReq+0x2e>
 801b5c2:	e190      	b.n	801b8e6 <USBD_StdEPReq+0x350>
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d00c      	beq.n	801b5e2 <USBD_StdEPReq+0x4c>
 801b5c8:	2b20      	cmp	r3, #32
 801b5ca:	d000      	beq.n	801b5ce <USBD_StdEPReq+0x38>
 801b5cc:	e18b      	b.n	801b8e6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b5ce:	687a      	ldr	r2, [r7, #4]
 801b5d0:	23ad      	movs	r3, #173	@ 0xad
 801b5d2:	009b      	lsls	r3, r3, #2
 801b5d4:	58d3      	ldr	r3, [r2, r3]
 801b5d6:	689b      	ldr	r3, [r3, #8]
 801b5d8:	6839      	ldr	r1, [r7, #0]
 801b5da:	687a      	ldr	r2, [r7, #4]
 801b5dc:	0010      	movs	r0, r2
 801b5de:	4798      	blx	r3
      break;
 801b5e0:	e188      	b.n	801b8f4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b5e2:	683b      	ldr	r3, [r7, #0]
 801b5e4:	781b      	ldrb	r3, [r3, #0]
 801b5e6:	001a      	movs	r2, r3
 801b5e8:	2360      	movs	r3, #96	@ 0x60
 801b5ea:	4013      	ands	r3, r2
 801b5ec:	2b20      	cmp	r3, #32
 801b5ee:	d10f      	bne.n	801b610 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b5f0:	687a      	ldr	r2, [r7, #4]
 801b5f2:	23ad      	movs	r3, #173	@ 0xad
 801b5f4:	009b      	lsls	r3, r3, #2
 801b5f6:	58d3      	ldr	r3, [r2, r3]
 801b5f8:	689b      	ldr	r3, [r3, #8]
 801b5fa:	250f      	movs	r5, #15
 801b5fc:	197c      	adds	r4, r7, r5
 801b5fe:	6839      	ldr	r1, [r7, #0]
 801b600:	687a      	ldr	r2, [r7, #4]
 801b602:	0010      	movs	r0, r2
 801b604:	4798      	blx	r3
 801b606:	0003      	movs	r3, r0
 801b608:	7023      	strb	r3, [r4, #0]

        return ret;
 801b60a:	197b      	adds	r3, r7, r5
 801b60c:	781b      	ldrb	r3, [r3, #0]
 801b60e:	e174      	b.n	801b8fa <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b610:	683b      	ldr	r3, [r7, #0]
 801b612:	785b      	ldrb	r3, [r3, #1]
 801b614:	2b03      	cmp	r3, #3
 801b616:	d007      	beq.n	801b628 <USBD_StdEPReq+0x92>
 801b618:	dd00      	ble.n	801b61c <USBD_StdEPReq+0x86>
 801b61a:	e15c      	b.n	801b8d6 <USBD_StdEPReq+0x340>
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d100      	bne.n	801b622 <USBD_StdEPReq+0x8c>
 801b620:	e092      	b.n	801b748 <USBD_StdEPReq+0x1b2>
 801b622:	2b01      	cmp	r3, #1
 801b624:	d04b      	beq.n	801b6be <USBD_StdEPReq+0x128>
 801b626:	e156      	b.n	801b8d6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b628:	687a      	ldr	r2, [r7, #4]
 801b62a:	23a7      	movs	r3, #167	@ 0xa7
 801b62c:	009b      	lsls	r3, r3, #2
 801b62e:	5cd3      	ldrb	r3, [r2, r3]
 801b630:	2b02      	cmp	r3, #2
 801b632:	d002      	beq.n	801b63a <USBD_StdEPReq+0xa4>
 801b634:	2b03      	cmp	r3, #3
 801b636:	d01d      	beq.n	801b674 <USBD_StdEPReq+0xde>
 801b638:	e039      	b.n	801b6ae <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b63a:	220e      	movs	r2, #14
 801b63c:	18bb      	adds	r3, r7, r2
 801b63e:	781b      	ldrb	r3, [r3, #0]
 801b640:	2b00      	cmp	r3, #0
 801b642:	d010      	beq.n	801b666 <USBD_StdEPReq+0xd0>
 801b644:	18bb      	adds	r3, r7, r2
 801b646:	781b      	ldrb	r3, [r3, #0]
 801b648:	2b80      	cmp	r3, #128	@ 0x80
 801b64a:	d00c      	beq.n	801b666 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b64c:	18bb      	adds	r3, r7, r2
 801b64e:	781a      	ldrb	r2, [r3, #0]
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	0011      	movs	r1, r2
 801b654:	0018      	movs	r0, r3
 801b656:	f001 fa10 	bl	801ca7a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	2180      	movs	r1, #128	@ 0x80
 801b65e:	0018      	movs	r0, r3
 801b660:	f001 fa0b 	bl	801ca7a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b664:	e02a      	b.n	801b6bc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b666:	683a      	ldr	r2, [r7, #0]
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	0011      	movs	r1, r2
 801b66c:	0018      	movs	r0, r3
 801b66e:	f000 fcdc 	bl	801c02a <USBD_CtlError>
              break;
 801b672:	e023      	b.n	801b6bc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b674:	683b      	ldr	r3, [r7, #0]
 801b676:	885b      	ldrh	r3, [r3, #2]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d113      	bne.n	801b6a4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b67c:	220e      	movs	r2, #14
 801b67e:	18bb      	adds	r3, r7, r2
 801b680:	781b      	ldrb	r3, [r3, #0]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d00e      	beq.n	801b6a4 <USBD_StdEPReq+0x10e>
 801b686:	18bb      	adds	r3, r7, r2
 801b688:	781b      	ldrb	r3, [r3, #0]
 801b68a:	2b80      	cmp	r3, #128	@ 0x80
 801b68c:	d00a      	beq.n	801b6a4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b68e:	683b      	ldr	r3, [r7, #0]
 801b690:	88db      	ldrh	r3, [r3, #6]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d106      	bne.n	801b6a4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b696:	18bb      	adds	r3, r7, r2
 801b698:	781a      	ldrb	r2, [r3, #0]
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	0011      	movs	r1, r2
 801b69e:	0018      	movs	r0, r3
 801b6a0:	f001 f9eb 	bl	801ca7a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	0018      	movs	r0, r3
 801b6a8:	f000 fda7 	bl	801c1fa <USBD_CtlSendStatus>

              break;
 801b6ac:	e006      	b.n	801b6bc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b6ae:	683a      	ldr	r2, [r7, #0]
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	0011      	movs	r1, r2
 801b6b4:	0018      	movs	r0, r3
 801b6b6:	f000 fcb8 	bl	801c02a <USBD_CtlError>
              break;
 801b6ba:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b6bc:	e112      	b.n	801b8e4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b6be:	687a      	ldr	r2, [r7, #4]
 801b6c0:	23a7      	movs	r3, #167	@ 0xa7
 801b6c2:	009b      	lsls	r3, r3, #2
 801b6c4:	5cd3      	ldrb	r3, [r2, r3]
 801b6c6:	2b02      	cmp	r3, #2
 801b6c8:	d002      	beq.n	801b6d0 <USBD_StdEPReq+0x13a>
 801b6ca:	2b03      	cmp	r3, #3
 801b6cc:	d01d      	beq.n	801b70a <USBD_StdEPReq+0x174>
 801b6ce:	e032      	b.n	801b736 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b6d0:	220e      	movs	r2, #14
 801b6d2:	18bb      	adds	r3, r7, r2
 801b6d4:	781b      	ldrb	r3, [r3, #0]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d010      	beq.n	801b6fc <USBD_StdEPReq+0x166>
 801b6da:	18bb      	adds	r3, r7, r2
 801b6dc:	781b      	ldrb	r3, [r3, #0]
 801b6de:	2b80      	cmp	r3, #128	@ 0x80
 801b6e0:	d00c      	beq.n	801b6fc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b6e2:	18bb      	adds	r3, r7, r2
 801b6e4:	781a      	ldrb	r2, [r3, #0]
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	0011      	movs	r1, r2
 801b6ea:	0018      	movs	r0, r3
 801b6ec:	f001 f9c5 	bl	801ca7a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2180      	movs	r1, #128	@ 0x80
 801b6f4:	0018      	movs	r0, r3
 801b6f6:	f001 f9c0 	bl	801ca7a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b6fa:	e024      	b.n	801b746 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801b6fc:	683a      	ldr	r2, [r7, #0]
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	0011      	movs	r1, r2
 801b702:	0018      	movs	r0, r3
 801b704:	f000 fc91 	bl	801c02a <USBD_CtlError>
              break;
 801b708:	e01d      	b.n	801b746 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	885b      	ldrh	r3, [r3, #2]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d118      	bne.n	801b744 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b712:	210e      	movs	r1, #14
 801b714:	187b      	adds	r3, r7, r1
 801b716:	781b      	ldrb	r3, [r3, #0]
 801b718:	227f      	movs	r2, #127	@ 0x7f
 801b71a:	4013      	ands	r3, r2
 801b71c:	d006      	beq.n	801b72c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801b71e:	187b      	adds	r3, r7, r1
 801b720:	781a      	ldrb	r2, [r3, #0]
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	0011      	movs	r1, r2
 801b726:	0018      	movs	r0, r3
 801b728:	f001 f9d2 	bl	801cad0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	0018      	movs	r0, r3
 801b730:	f000 fd63 	bl	801c1fa <USBD_CtlSendStatus>
              }
              break;
 801b734:	e006      	b.n	801b744 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801b736:	683a      	ldr	r2, [r7, #0]
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	0011      	movs	r1, r2
 801b73c:	0018      	movs	r0, r3
 801b73e:	f000 fc74 	bl	801c02a <USBD_CtlError>
              break;
 801b742:	e000      	b.n	801b746 <USBD_StdEPReq+0x1b0>
              break;
 801b744:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b746:	e0cd      	b.n	801b8e4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b748:	687a      	ldr	r2, [r7, #4]
 801b74a:	23a7      	movs	r3, #167	@ 0xa7
 801b74c:	009b      	lsls	r3, r3, #2
 801b74e:	5cd3      	ldrb	r3, [r2, r3]
 801b750:	2b02      	cmp	r3, #2
 801b752:	d002      	beq.n	801b75a <USBD_StdEPReq+0x1c4>
 801b754:	2b03      	cmp	r3, #3
 801b756:	d03c      	beq.n	801b7d2 <USBD_StdEPReq+0x23c>
 801b758:	e0b5      	b.n	801b8c6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b75a:	220e      	movs	r2, #14
 801b75c:	18bb      	adds	r3, r7, r2
 801b75e:	781b      	ldrb	r3, [r3, #0]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d00a      	beq.n	801b77a <USBD_StdEPReq+0x1e4>
 801b764:	18bb      	adds	r3, r7, r2
 801b766:	781b      	ldrb	r3, [r3, #0]
 801b768:	2b80      	cmp	r3, #128	@ 0x80
 801b76a:	d006      	beq.n	801b77a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801b76c:	683a      	ldr	r2, [r7, #0]
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	0011      	movs	r1, r2
 801b772:	0018      	movs	r0, r3
 801b774:	f000 fc59 	bl	801c02a <USBD_CtlError>
                break;
 801b778:	e0ac      	b.n	801b8d4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b77a:	220e      	movs	r2, #14
 801b77c:	18bb      	adds	r3, r7, r2
 801b77e:	781b      	ldrb	r3, [r3, #0]
 801b780:	b25b      	sxtb	r3, r3
 801b782:	2b00      	cmp	r3, #0
 801b784:	da0c      	bge.n	801b7a0 <USBD_StdEPReq+0x20a>
 801b786:	18bb      	adds	r3, r7, r2
 801b788:	781b      	ldrb	r3, [r3, #0]
 801b78a:	227f      	movs	r2, #127	@ 0x7f
 801b78c:	401a      	ands	r2, r3
 801b78e:	0013      	movs	r3, r2
 801b790:	009b      	lsls	r3, r3, #2
 801b792:	189b      	adds	r3, r3, r2
 801b794:	009b      	lsls	r3, r3, #2
 801b796:	3310      	adds	r3, #16
 801b798:	687a      	ldr	r2, [r7, #4]
 801b79a:	18d3      	adds	r3, r2, r3
 801b79c:	3304      	adds	r3, #4
 801b79e:	e00d      	b.n	801b7bc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b7a0:	230e      	movs	r3, #14
 801b7a2:	18fb      	adds	r3, r7, r3
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	227f      	movs	r2, #127	@ 0x7f
 801b7a8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b7aa:	0013      	movs	r3, r2
 801b7ac:	009b      	lsls	r3, r3, #2
 801b7ae:	189b      	adds	r3, r3, r2
 801b7b0:	009b      	lsls	r3, r3, #2
 801b7b2:	3351      	adds	r3, #81	@ 0x51
 801b7b4:	33ff      	adds	r3, #255	@ 0xff
 801b7b6:	687a      	ldr	r2, [r7, #4]
 801b7b8:	18d3      	adds	r3, r2, r3
 801b7ba:	3304      	adds	r3, #4
 801b7bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b7be:	68bb      	ldr	r3, [r7, #8]
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b7c4:	68b9      	ldr	r1, [r7, #8]
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	2202      	movs	r2, #2
 801b7ca:	0018      	movs	r0, r3
 801b7cc:	f000 fcab 	bl	801c126 <USBD_CtlSendData>
              break;
 801b7d0:	e080      	b.n	801b8d4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b7d2:	220e      	movs	r2, #14
 801b7d4:	18bb      	adds	r3, r7, r2
 801b7d6:	781b      	ldrb	r3, [r3, #0]
 801b7d8:	b25b      	sxtb	r3, r3
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	da14      	bge.n	801b808 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b7de:	18bb      	adds	r3, r7, r2
 801b7e0:	781b      	ldrb	r3, [r3, #0]
 801b7e2:	220f      	movs	r2, #15
 801b7e4:	401a      	ands	r2, r3
 801b7e6:	6879      	ldr	r1, [r7, #4]
 801b7e8:	0013      	movs	r3, r2
 801b7ea:	009b      	lsls	r3, r3, #2
 801b7ec:	189b      	adds	r3, r3, r2
 801b7ee:	009b      	lsls	r3, r3, #2
 801b7f0:	18cb      	adds	r3, r1, r3
 801b7f2:	3318      	adds	r3, #24
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d11e      	bne.n	801b838 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b7fa:	683a      	ldr	r2, [r7, #0]
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	0011      	movs	r1, r2
 801b800:	0018      	movs	r0, r3
 801b802:	f000 fc12 	bl	801c02a <USBD_CtlError>
                  break;
 801b806:	e065      	b.n	801b8d4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b808:	230e      	movs	r3, #14
 801b80a:	18fb      	adds	r3, r7, r3
 801b80c:	781b      	ldrb	r3, [r3, #0]
 801b80e:	220f      	movs	r2, #15
 801b810:	401a      	ands	r2, r3
 801b812:	6878      	ldr	r0, [r7, #4]
 801b814:	23ac      	movs	r3, #172	@ 0xac
 801b816:	0059      	lsls	r1, r3, #1
 801b818:	0013      	movs	r3, r2
 801b81a:	009b      	lsls	r3, r3, #2
 801b81c:	189b      	adds	r3, r3, r2
 801b81e:	009b      	lsls	r3, r3, #2
 801b820:	18c3      	adds	r3, r0, r3
 801b822:	185b      	adds	r3, r3, r1
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d106      	bne.n	801b838 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b82a:	683a      	ldr	r2, [r7, #0]
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	0011      	movs	r1, r2
 801b830:	0018      	movs	r0, r3
 801b832:	f000 fbfa 	bl	801c02a <USBD_CtlError>
                  break;
 801b836:	e04d      	b.n	801b8d4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b838:	220e      	movs	r2, #14
 801b83a:	18bb      	adds	r3, r7, r2
 801b83c:	781b      	ldrb	r3, [r3, #0]
 801b83e:	b25b      	sxtb	r3, r3
 801b840:	2b00      	cmp	r3, #0
 801b842:	da0c      	bge.n	801b85e <USBD_StdEPReq+0x2c8>
 801b844:	18bb      	adds	r3, r7, r2
 801b846:	781b      	ldrb	r3, [r3, #0]
 801b848:	227f      	movs	r2, #127	@ 0x7f
 801b84a:	401a      	ands	r2, r3
 801b84c:	0013      	movs	r3, r2
 801b84e:	009b      	lsls	r3, r3, #2
 801b850:	189b      	adds	r3, r3, r2
 801b852:	009b      	lsls	r3, r3, #2
 801b854:	3310      	adds	r3, #16
 801b856:	687a      	ldr	r2, [r7, #4]
 801b858:	18d3      	adds	r3, r2, r3
 801b85a:	3304      	adds	r3, #4
 801b85c:	e00d      	b.n	801b87a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b85e:	230e      	movs	r3, #14
 801b860:	18fb      	adds	r3, r7, r3
 801b862:	781b      	ldrb	r3, [r3, #0]
 801b864:	227f      	movs	r2, #127	@ 0x7f
 801b866:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b868:	0013      	movs	r3, r2
 801b86a:	009b      	lsls	r3, r3, #2
 801b86c:	189b      	adds	r3, r3, r2
 801b86e:	009b      	lsls	r3, r3, #2
 801b870:	3351      	adds	r3, #81	@ 0x51
 801b872:	33ff      	adds	r3, #255	@ 0xff
 801b874:	687a      	ldr	r2, [r7, #4]
 801b876:	18d3      	adds	r3, r2, r3
 801b878:	3304      	adds	r3, #4
 801b87a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b87c:	220e      	movs	r2, #14
 801b87e:	18bb      	adds	r3, r7, r2
 801b880:	781b      	ldrb	r3, [r3, #0]
 801b882:	2b00      	cmp	r3, #0
 801b884:	d003      	beq.n	801b88e <USBD_StdEPReq+0x2f8>
 801b886:	18bb      	adds	r3, r7, r2
 801b888:	781b      	ldrb	r3, [r3, #0]
 801b88a:	2b80      	cmp	r3, #128	@ 0x80
 801b88c:	d103      	bne.n	801b896 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801b88e:	68bb      	ldr	r3, [r7, #8]
 801b890:	2200      	movs	r2, #0
 801b892:	601a      	str	r2, [r3, #0]
 801b894:	e010      	b.n	801b8b8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b896:	230e      	movs	r3, #14
 801b898:	18fb      	adds	r3, r7, r3
 801b89a:	781a      	ldrb	r2, [r3, #0]
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	0011      	movs	r1, r2
 801b8a0:	0018      	movs	r0, r3
 801b8a2:	f001 f940 	bl	801cb26 <USBD_LL_IsStallEP>
 801b8a6:	1e03      	subs	r3, r0, #0
 801b8a8:	d003      	beq.n	801b8b2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b8aa:	68bb      	ldr	r3, [r7, #8]
 801b8ac:	2201      	movs	r2, #1
 801b8ae:	601a      	str	r2, [r3, #0]
 801b8b0:	e002      	b.n	801b8b8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b8b8:	68b9      	ldr	r1, [r7, #8]
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	2202      	movs	r2, #2
 801b8be:	0018      	movs	r0, r3
 801b8c0:	f000 fc31 	bl	801c126 <USBD_CtlSendData>
              break;
 801b8c4:	e006      	b.n	801b8d4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b8c6:	683a      	ldr	r2, [r7, #0]
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	0011      	movs	r1, r2
 801b8cc:	0018      	movs	r0, r3
 801b8ce:	f000 fbac 	bl	801c02a <USBD_CtlError>
              break;
 801b8d2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b8d4:	e006      	b.n	801b8e4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b8d6:	683a      	ldr	r2, [r7, #0]
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	0011      	movs	r1, r2
 801b8dc:	0018      	movs	r0, r3
 801b8de:	f000 fba4 	bl	801c02a <USBD_CtlError>
          break;
 801b8e2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b8e4:	e006      	b.n	801b8f4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b8e6:	683a      	ldr	r2, [r7, #0]
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	0011      	movs	r1, r2
 801b8ec:	0018      	movs	r0, r3
 801b8ee:	f000 fb9c 	bl	801c02a <USBD_CtlError>
      break;
 801b8f2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b8f4:	230f      	movs	r3, #15
 801b8f6:	18fb      	adds	r3, r7, r3
 801b8f8:	781b      	ldrb	r3, [r3, #0]
}
 801b8fa:	0018      	movs	r0, r3
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	b004      	add	sp, #16
 801b900:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b904 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b084      	sub	sp, #16
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
 801b90c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b90e:	2308      	movs	r3, #8
 801b910:	18fb      	adds	r3, r7, r3
 801b912:	2200      	movs	r2, #0
 801b914:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b916:	2300      	movs	r3, #0
 801b918:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b91a:	230b      	movs	r3, #11
 801b91c:	18fb      	adds	r3, r7, r3
 801b91e:	2200      	movs	r2, #0
 801b920:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b922:	683b      	ldr	r3, [r7, #0]
 801b924:	885b      	ldrh	r3, [r3, #2]
 801b926:	0a1b      	lsrs	r3, r3, #8
 801b928:	b29b      	uxth	r3, r3
 801b92a:	2b07      	cmp	r3, #7
 801b92c:	d900      	bls.n	801b930 <USBD_GetDescriptor+0x2c>
 801b92e:	e159      	b.n	801bbe4 <USBD_GetDescriptor+0x2e0>
 801b930:	009a      	lsls	r2, r3, #2
 801b932:	4bcb      	ldr	r3, [pc, #812]	@ (801bc60 <USBD_GetDescriptor+0x35c>)
 801b934:	18d3      	adds	r3, r2, r3
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b93a:	687a      	ldr	r2, [r7, #4]
 801b93c:	23ac      	movs	r3, #172	@ 0xac
 801b93e:	009b      	lsls	r3, r3, #2
 801b940:	58d3      	ldr	r3, [r2, r3]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	687a      	ldr	r2, [r7, #4]
 801b946:	7c12      	ldrb	r2, [r2, #16]
 801b948:	2108      	movs	r1, #8
 801b94a:	1879      	adds	r1, r7, r1
 801b94c:	0010      	movs	r0, r2
 801b94e:	4798      	blx	r3
 801b950:	0003      	movs	r3, r0
 801b952:	60fb      	str	r3, [r7, #12]
      break;
 801b954:	e153      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	7c1b      	ldrb	r3, [r3, #16]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d10f      	bne.n	801b97e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b95e:	687a      	ldr	r2, [r7, #4]
 801b960:	23ad      	movs	r3, #173	@ 0xad
 801b962:	009b      	lsls	r3, r3, #2
 801b964:	58d3      	ldr	r3, [r2, r3]
 801b966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b968:	2208      	movs	r2, #8
 801b96a:	18ba      	adds	r2, r7, r2
 801b96c:	0010      	movs	r0, r2
 801b96e:	4798      	blx	r3
 801b970:	0003      	movs	r3, r0
 801b972:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	3301      	adds	r3, #1
 801b978:	2202      	movs	r2, #2
 801b97a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b97c:	e13f      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b97e:	687a      	ldr	r2, [r7, #4]
 801b980:	23ad      	movs	r3, #173	@ 0xad
 801b982:	009b      	lsls	r3, r3, #2
 801b984:	58d3      	ldr	r3, [r2, r3]
 801b986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b988:	2208      	movs	r2, #8
 801b98a:	18ba      	adds	r2, r7, r2
 801b98c:	0010      	movs	r0, r2
 801b98e:	4798      	blx	r3
 801b990:	0003      	movs	r3, r0
 801b992:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	3301      	adds	r3, #1
 801b998:	2202      	movs	r2, #2
 801b99a:	701a      	strb	r2, [r3, #0]
      break;
 801b99c:	e12f      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b99e:	683b      	ldr	r3, [r7, #0]
 801b9a0:	885b      	ldrh	r3, [r3, #2]
 801b9a2:	b2db      	uxtb	r3, r3
 801b9a4:	2b05      	cmp	r3, #5
 801b9a6:	d900      	bls.n	801b9aa <USBD_GetDescriptor+0xa6>
 801b9a8:	e0d0      	b.n	801bb4c <USBD_GetDescriptor+0x248>
 801b9aa:	009a      	lsls	r2, r3, #2
 801b9ac:	4bad      	ldr	r3, [pc, #692]	@ (801bc64 <USBD_GetDescriptor+0x360>)
 801b9ae:	18d3      	adds	r3, r2, r3
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b9b4:	687a      	ldr	r2, [r7, #4]
 801b9b6:	23ac      	movs	r3, #172	@ 0xac
 801b9b8:	009b      	lsls	r3, r3, #2
 801b9ba:	58d3      	ldr	r3, [r2, r3]
 801b9bc:	685b      	ldr	r3, [r3, #4]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d00d      	beq.n	801b9de <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b9c2:	687a      	ldr	r2, [r7, #4]
 801b9c4:	23ac      	movs	r3, #172	@ 0xac
 801b9c6:	009b      	lsls	r3, r3, #2
 801b9c8:	58d3      	ldr	r3, [r2, r3]
 801b9ca:	685b      	ldr	r3, [r3, #4]
 801b9cc:	687a      	ldr	r2, [r7, #4]
 801b9ce:	7c12      	ldrb	r2, [r2, #16]
 801b9d0:	2108      	movs	r1, #8
 801b9d2:	1879      	adds	r1, r7, r1
 801b9d4:	0010      	movs	r0, r2
 801b9d6:	4798      	blx	r3
 801b9d8:	0003      	movs	r3, r0
 801b9da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b9dc:	e0c3      	b.n	801bb66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b9de:	683a      	ldr	r2, [r7, #0]
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	0011      	movs	r1, r2
 801b9e4:	0018      	movs	r0, r3
 801b9e6:	f000 fb20 	bl	801c02a <USBD_CtlError>
            err++;
 801b9ea:	210b      	movs	r1, #11
 801b9ec:	187b      	adds	r3, r7, r1
 801b9ee:	781a      	ldrb	r2, [r3, #0]
 801b9f0:	187b      	adds	r3, r7, r1
 801b9f2:	3201      	adds	r2, #1
 801b9f4:	701a      	strb	r2, [r3, #0]
          break;
 801b9f6:	e0b6      	b.n	801bb66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b9f8:	687a      	ldr	r2, [r7, #4]
 801b9fa:	23ac      	movs	r3, #172	@ 0xac
 801b9fc:	009b      	lsls	r3, r3, #2
 801b9fe:	58d3      	ldr	r3, [r2, r3]
 801ba00:	689b      	ldr	r3, [r3, #8]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d00d      	beq.n	801ba22 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ba06:	687a      	ldr	r2, [r7, #4]
 801ba08:	23ac      	movs	r3, #172	@ 0xac
 801ba0a:	009b      	lsls	r3, r3, #2
 801ba0c:	58d3      	ldr	r3, [r2, r3]
 801ba0e:	689b      	ldr	r3, [r3, #8]
 801ba10:	687a      	ldr	r2, [r7, #4]
 801ba12:	7c12      	ldrb	r2, [r2, #16]
 801ba14:	2108      	movs	r1, #8
 801ba16:	1879      	adds	r1, r7, r1
 801ba18:	0010      	movs	r0, r2
 801ba1a:	4798      	blx	r3
 801ba1c:	0003      	movs	r3, r0
 801ba1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba20:	e0a1      	b.n	801bb66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba22:	683a      	ldr	r2, [r7, #0]
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	0011      	movs	r1, r2
 801ba28:	0018      	movs	r0, r3
 801ba2a:	f000 fafe 	bl	801c02a <USBD_CtlError>
            err++;
 801ba2e:	210b      	movs	r1, #11
 801ba30:	187b      	adds	r3, r7, r1
 801ba32:	781a      	ldrb	r2, [r3, #0]
 801ba34:	187b      	adds	r3, r7, r1
 801ba36:	3201      	adds	r2, #1
 801ba38:	701a      	strb	r2, [r3, #0]
          break;
 801ba3a:	e094      	b.n	801bb66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ba3c:	687a      	ldr	r2, [r7, #4]
 801ba3e:	23ac      	movs	r3, #172	@ 0xac
 801ba40:	009b      	lsls	r3, r3, #2
 801ba42:	58d3      	ldr	r3, [r2, r3]
 801ba44:	68db      	ldr	r3, [r3, #12]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d00d      	beq.n	801ba66 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ba4a:	687a      	ldr	r2, [r7, #4]
 801ba4c:	23ac      	movs	r3, #172	@ 0xac
 801ba4e:	009b      	lsls	r3, r3, #2
 801ba50:	58d3      	ldr	r3, [r2, r3]
 801ba52:	68db      	ldr	r3, [r3, #12]
 801ba54:	687a      	ldr	r2, [r7, #4]
 801ba56:	7c12      	ldrb	r2, [r2, #16]
 801ba58:	2108      	movs	r1, #8
 801ba5a:	1879      	adds	r1, r7, r1
 801ba5c:	0010      	movs	r0, r2
 801ba5e:	4798      	blx	r3
 801ba60:	0003      	movs	r3, r0
 801ba62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba64:	e07f      	b.n	801bb66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba66:	683a      	ldr	r2, [r7, #0]
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	0011      	movs	r1, r2
 801ba6c:	0018      	movs	r0, r3
 801ba6e:	f000 fadc 	bl	801c02a <USBD_CtlError>
            err++;
 801ba72:	210b      	movs	r1, #11
 801ba74:	187b      	adds	r3, r7, r1
 801ba76:	781a      	ldrb	r2, [r3, #0]
 801ba78:	187b      	adds	r3, r7, r1
 801ba7a:	3201      	adds	r2, #1
 801ba7c:	701a      	strb	r2, [r3, #0]
          break;
 801ba7e:	e072      	b.n	801bb66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ba80:	687a      	ldr	r2, [r7, #4]
 801ba82:	23ac      	movs	r3, #172	@ 0xac
 801ba84:	009b      	lsls	r3, r3, #2
 801ba86:	58d3      	ldr	r3, [r2, r3]
 801ba88:	691b      	ldr	r3, [r3, #16]
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	d00d      	beq.n	801baaa <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ba8e:	687a      	ldr	r2, [r7, #4]
 801ba90:	23ac      	movs	r3, #172	@ 0xac
 801ba92:	009b      	lsls	r3, r3, #2
 801ba94:	58d3      	ldr	r3, [r2, r3]
 801ba96:	691b      	ldr	r3, [r3, #16]
 801ba98:	687a      	ldr	r2, [r7, #4]
 801ba9a:	7c12      	ldrb	r2, [r2, #16]
 801ba9c:	2108      	movs	r1, #8
 801ba9e:	1879      	adds	r1, r7, r1
 801baa0:	0010      	movs	r0, r2
 801baa2:	4798      	blx	r3
 801baa4:	0003      	movs	r3, r0
 801baa6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801baa8:	e05d      	b.n	801bb66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801baaa:	683a      	ldr	r2, [r7, #0]
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	0011      	movs	r1, r2
 801bab0:	0018      	movs	r0, r3
 801bab2:	f000 faba 	bl	801c02a <USBD_CtlError>
            err++;
 801bab6:	210b      	movs	r1, #11
 801bab8:	187b      	adds	r3, r7, r1
 801baba:	781a      	ldrb	r2, [r3, #0]
 801babc:	187b      	adds	r3, r7, r1
 801babe:	3201      	adds	r2, #1
 801bac0:	701a      	strb	r2, [r3, #0]
          break;
 801bac2:	e050      	b.n	801bb66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801bac4:	687a      	ldr	r2, [r7, #4]
 801bac6:	23ac      	movs	r3, #172	@ 0xac
 801bac8:	009b      	lsls	r3, r3, #2
 801baca:	58d3      	ldr	r3, [r2, r3]
 801bacc:	695b      	ldr	r3, [r3, #20]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d00d      	beq.n	801baee <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801bad2:	687a      	ldr	r2, [r7, #4]
 801bad4:	23ac      	movs	r3, #172	@ 0xac
 801bad6:	009b      	lsls	r3, r3, #2
 801bad8:	58d3      	ldr	r3, [r2, r3]
 801bada:	695b      	ldr	r3, [r3, #20]
 801badc:	687a      	ldr	r2, [r7, #4]
 801bade:	7c12      	ldrb	r2, [r2, #16]
 801bae0:	2108      	movs	r1, #8
 801bae2:	1879      	adds	r1, r7, r1
 801bae4:	0010      	movs	r0, r2
 801bae6:	4798      	blx	r3
 801bae8:	0003      	movs	r3, r0
 801baea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801baec:	e03b      	b.n	801bb66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801baee:	683a      	ldr	r2, [r7, #0]
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	0011      	movs	r1, r2
 801baf4:	0018      	movs	r0, r3
 801baf6:	f000 fa98 	bl	801c02a <USBD_CtlError>
            err++;
 801bafa:	210b      	movs	r1, #11
 801bafc:	187b      	adds	r3, r7, r1
 801bafe:	781a      	ldrb	r2, [r3, #0]
 801bb00:	187b      	adds	r3, r7, r1
 801bb02:	3201      	adds	r2, #1
 801bb04:	701a      	strb	r2, [r3, #0]
          break;
 801bb06:	e02e      	b.n	801bb66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801bb08:	687a      	ldr	r2, [r7, #4]
 801bb0a:	23ac      	movs	r3, #172	@ 0xac
 801bb0c:	009b      	lsls	r3, r3, #2
 801bb0e:	58d3      	ldr	r3, [r2, r3]
 801bb10:	699b      	ldr	r3, [r3, #24]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d00d      	beq.n	801bb32 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801bb16:	687a      	ldr	r2, [r7, #4]
 801bb18:	23ac      	movs	r3, #172	@ 0xac
 801bb1a:	009b      	lsls	r3, r3, #2
 801bb1c:	58d3      	ldr	r3, [r2, r3]
 801bb1e:	699b      	ldr	r3, [r3, #24]
 801bb20:	687a      	ldr	r2, [r7, #4]
 801bb22:	7c12      	ldrb	r2, [r2, #16]
 801bb24:	2108      	movs	r1, #8
 801bb26:	1879      	adds	r1, r7, r1
 801bb28:	0010      	movs	r0, r2
 801bb2a:	4798      	blx	r3
 801bb2c:	0003      	movs	r3, r0
 801bb2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb30:	e019      	b.n	801bb66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801bb32:	683a      	ldr	r2, [r7, #0]
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	0011      	movs	r1, r2
 801bb38:	0018      	movs	r0, r3
 801bb3a:	f000 fa76 	bl	801c02a <USBD_CtlError>
            err++;
 801bb3e:	210b      	movs	r1, #11
 801bb40:	187b      	adds	r3, r7, r1
 801bb42:	781a      	ldrb	r2, [r3, #0]
 801bb44:	187b      	adds	r3, r7, r1
 801bb46:	3201      	adds	r2, #1
 801bb48:	701a      	strb	r2, [r3, #0]
          break;
 801bb4a:	e00c      	b.n	801bb66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801bb4c:	683a      	ldr	r2, [r7, #0]
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	0011      	movs	r1, r2
 801bb52:	0018      	movs	r0, r3
 801bb54:	f000 fa69 	bl	801c02a <USBD_CtlError>
          err++;
 801bb58:	210b      	movs	r1, #11
 801bb5a:	187b      	adds	r3, r7, r1
 801bb5c:	781a      	ldrb	r2, [r3, #0]
 801bb5e:	187b      	adds	r3, r7, r1
 801bb60:	3201      	adds	r2, #1
 801bb62:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801bb64:	e04b      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>
 801bb66:	e04a      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	7c1b      	ldrb	r3, [r3, #16]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d10b      	bne.n	801bb88 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	23ad      	movs	r3, #173	@ 0xad
 801bb74:	009b      	lsls	r3, r3, #2
 801bb76:	58d3      	ldr	r3, [r2, r3]
 801bb78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bb7a:	2208      	movs	r2, #8
 801bb7c:	18ba      	adds	r2, r7, r2
 801bb7e:	0010      	movs	r0, r2
 801bb80:	4798      	blx	r3
 801bb82:	0003      	movs	r3, r0
 801bb84:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bb86:	e03a      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801bb88:	683a      	ldr	r2, [r7, #0]
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	0011      	movs	r1, r2
 801bb8e:	0018      	movs	r0, r3
 801bb90:	f000 fa4b 	bl	801c02a <USBD_CtlError>
        err++;
 801bb94:	210b      	movs	r1, #11
 801bb96:	187b      	adds	r3, r7, r1
 801bb98:	781a      	ldrb	r2, [r3, #0]
 801bb9a:	187b      	adds	r3, r7, r1
 801bb9c:	3201      	adds	r2, #1
 801bb9e:	701a      	strb	r2, [r3, #0]
      break;
 801bba0:	e02d      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	7c1b      	ldrb	r3, [r3, #16]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d10f      	bne.n	801bbca <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801bbaa:	687a      	ldr	r2, [r7, #4]
 801bbac:	23ad      	movs	r3, #173	@ 0xad
 801bbae:	009b      	lsls	r3, r3, #2
 801bbb0:	58d3      	ldr	r3, [r2, r3]
 801bbb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bbb4:	2208      	movs	r2, #8
 801bbb6:	18ba      	adds	r2, r7, r2
 801bbb8:	0010      	movs	r0, r2
 801bbba:	4798      	blx	r3
 801bbbc:	0003      	movs	r3, r0
 801bbbe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	3301      	adds	r3, #1
 801bbc4:	2207      	movs	r2, #7
 801bbc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bbc8:	e019      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801bbca:	683a      	ldr	r2, [r7, #0]
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	0011      	movs	r1, r2
 801bbd0:	0018      	movs	r0, r3
 801bbd2:	f000 fa2a 	bl	801c02a <USBD_CtlError>
        err++;
 801bbd6:	210b      	movs	r1, #11
 801bbd8:	187b      	adds	r3, r7, r1
 801bbda:	781a      	ldrb	r2, [r3, #0]
 801bbdc:	187b      	adds	r3, r7, r1
 801bbde:	3201      	adds	r2, #1
 801bbe0:	701a      	strb	r2, [r3, #0]
      break;
 801bbe2:	e00c      	b.n	801bbfe <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801bbe4:	683a      	ldr	r2, [r7, #0]
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	0011      	movs	r1, r2
 801bbea:	0018      	movs	r0, r3
 801bbec:	f000 fa1d 	bl	801c02a <USBD_CtlError>
      err++;
 801bbf0:	210b      	movs	r1, #11
 801bbf2:	187b      	adds	r3, r7, r1
 801bbf4:	781a      	ldrb	r2, [r3, #0]
 801bbf6:	187b      	adds	r3, r7, r1
 801bbf8:	3201      	adds	r2, #1
 801bbfa:	701a      	strb	r2, [r3, #0]
      break;
 801bbfc:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801bbfe:	230b      	movs	r3, #11
 801bc00:	18fb      	adds	r3, r7, r3
 801bc02:	781b      	ldrb	r3, [r3, #0]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d127      	bne.n	801bc58 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801bc08:	2108      	movs	r1, #8
 801bc0a:	187b      	adds	r3, r7, r1
 801bc0c:	881b      	ldrh	r3, [r3, #0]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d019      	beq.n	801bc46 <USBD_GetDescriptor+0x342>
 801bc12:	683b      	ldr	r3, [r7, #0]
 801bc14:	88db      	ldrh	r3, [r3, #6]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d015      	beq.n	801bc46 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801bc1a:	683b      	ldr	r3, [r7, #0]
 801bc1c:	88da      	ldrh	r2, [r3, #6]
 801bc1e:	187b      	adds	r3, r7, r1
 801bc20:	881b      	ldrh	r3, [r3, #0]
 801bc22:	1c18      	adds	r0, r3, #0
 801bc24:	1c11      	adds	r1, r2, #0
 801bc26:	b28a      	uxth	r2, r1
 801bc28:	b283      	uxth	r3, r0
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	d900      	bls.n	801bc30 <USBD_GetDescriptor+0x32c>
 801bc2e:	1c01      	adds	r1, r0, #0
 801bc30:	b28a      	uxth	r2, r1
 801bc32:	2108      	movs	r1, #8
 801bc34:	187b      	adds	r3, r7, r1
 801bc36:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bc38:	187b      	adds	r3, r7, r1
 801bc3a:	881a      	ldrh	r2, [r3, #0]
 801bc3c:	68f9      	ldr	r1, [r7, #12]
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	0018      	movs	r0, r3
 801bc42:	f000 fa70 	bl	801c126 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801bc46:	683b      	ldr	r3, [r7, #0]
 801bc48:	88db      	ldrh	r3, [r3, #6]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d105      	bne.n	801bc5a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	0018      	movs	r0, r3
 801bc52:	f000 fad2 	bl	801c1fa <USBD_CtlSendStatus>
 801bc56:	e000      	b.n	801bc5a <USBD_GetDescriptor+0x356>
    return;
 801bc58:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	b004      	add	sp, #16
 801bc5e:	bd80      	pop	{r7, pc}
 801bc60:	080249e8 	.word	0x080249e8
 801bc64:	08024a08 	.word	0x08024a08

0801bc68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bc68:	b590      	push	{r4, r7, lr}
 801bc6a:	b085      	sub	sp, #20
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	6078      	str	r0, [r7, #4]
 801bc70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bc72:	683b      	ldr	r3, [r7, #0]
 801bc74:	889b      	ldrh	r3, [r3, #4]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d13d      	bne.n	801bcf6 <USBD_SetAddress+0x8e>
 801bc7a:	683b      	ldr	r3, [r7, #0]
 801bc7c:	88db      	ldrh	r3, [r3, #6]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d139      	bne.n	801bcf6 <USBD_SetAddress+0x8e>
 801bc82:	683b      	ldr	r3, [r7, #0]
 801bc84:	885b      	ldrh	r3, [r3, #2]
 801bc86:	2b7f      	cmp	r3, #127	@ 0x7f
 801bc88:	d835      	bhi.n	801bcf6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bc8a:	683b      	ldr	r3, [r7, #0]
 801bc8c:	885b      	ldrh	r3, [r3, #2]
 801bc8e:	b2da      	uxtb	r2, r3
 801bc90:	230f      	movs	r3, #15
 801bc92:	18fb      	adds	r3, r7, r3
 801bc94:	217f      	movs	r1, #127	@ 0x7f
 801bc96:	400a      	ands	r2, r1
 801bc98:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc9a:	687a      	ldr	r2, [r7, #4]
 801bc9c:	23a7      	movs	r3, #167	@ 0xa7
 801bc9e:	009b      	lsls	r3, r3, #2
 801bca0:	5cd3      	ldrb	r3, [r2, r3]
 801bca2:	2b03      	cmp	r3, #3
 801bca4:	d106      	bne.n	801bcb4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801bca6:	683a      	ldr	r2, [r7, #0]
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	0011      	movs	r1, r2
 801bcac:	0018      	movs	r0, r3
 801bcae:	f000 f9bc 	bl	801c02a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bcb2:	e027      	b.n	801bd04 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	240f      	movs	r4, #15
 801bcb8:	193a      	adds	r2, r7, r4
 801bcba:	4914      	ldr	r1, [pc, #80]	@ (801bd0c <USBD_SetAddress+0xa4>)
 801bcbc:	7812      	ldrb	r2, [r2, #0]
 801bcbe:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bcc0:	193b      	adds	r3, r7, r4
 801bcc2:	781a      	ldrb	r2, [r3, #0]
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	0011      	movs	r1, r2
 801bcc8:	0018      	movs	r0, r3
 801bcca:	f000 ff5d 	bl	801cb88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	0018      	movs	r0, r3
 801bcd2:	f000 fa92 	bl	801c1fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bcd6:	193b      	adds	r3, r7, r4
 801bcd8:	781b      	ldrb	r3, [r3, #0]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d005      	beq.n	801bcea <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bcde:	687a      	ldr	r2, [r7, #4]
 801bce0:	23a7      	movs	r3, #167	@ 0xa7
 801bce2:	009b      	lsls	r3, r3, #2
 801bce4:	2102      	movs	r1, #2
 801bce6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bce8:	e00c      	b.n	801bd04 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bcea:	687a      	ldr	r2, [r7, #4]
 801bcec:	23a7      	movs	r3, #167	@ 0xa7
 801bcee:	009b      	lsls	r3, r3, #2
 801bcf0:	2101      	movs	r1, #1
 801bcf2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bcf4:	e006      	b.n	801bd04 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801bcf6:	683a      	ldr	r2, [r7, #0]
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	0011      	movs	r1, r2
 801bcfc:	0018      	movs	r0, r3
 801bcfe:	f000 f994 	bl	801c02a <USBD_CtlError>
  }
}
 801bd02:	46c0      	nop			@ (mov r8, r8)
 801bd04:	46c0      	nop			@ (mov r8, r8)
 801bd06:	46bd      	mov	sp, r7
 801bd08:	b005      	add	sp, #20
 801bd0a:	bd90      	pop	{r4, r7, pc}
 801bd0c:	0000029e 	.word	0x0000029e

0801bd10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b082      	sub	sp, #8
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	6078      	str	r0, [r7, #4]
 801bd18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	885b      	ldrh	r3, [r3, #2]
 801bd1e:	b2da      	uxtb	r2, r3
 801bd20:	4b4c      	ldr	r3, [pc, #304]	@ (801be54 <USBD_SetConfig+0x144>)
 801bd22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801bd24:	4b4b      	ldr	r3, [pc, #300]	@ (801be54 <USBD_SetConfig+0x144>)
 801bd26:	781b      	ldrb	r3, [r3, #0]
 801bd28:	2b01      	cmp	r3, #1
 801bd2a:	d906      	bls.n	801bd3a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801bd2c:	683a      	ldr	r2, [r7, #0]
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	0011      	movs	r1, r2
 801bd32:	0018      	movs	r0, r3
 801bd34:	f000 f979 	bl	801c02a <USBD_CtlError>
 801bd38:	e088      	b.n	801be4c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801bd3a:	687a      	ldr	r2, [r7, #4]
 801bd3c:	23a7      	movs	r3, #167	@ 0xa7
 801bd3e:	009b      	lsls	r3, r3, #2
 801bd40:	5cd3      	ldrb	r3, [r2, r3]
 801bd42:	2b02      	cmp	r3, #2
 801bd44:	d002      	beq.n	801bd4c <USBD_SetConfig+0x3c>
 801bd46:	2b03      	cmp	r3, #3
 801bd48:	d029      	beq.n	801bd9e <USBD_SetConfig+0x8e>
 801bd4a:	e071      	b.n	801be30 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801bd4c:	4b41      	ldr	r3, [pc, #260]	@ (801be54 <USBD_SetConfig+0x144>)
 801bd4e:	781b      	ldrb	r3, [r3, #0]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d01f      	beq.n	801bd94 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801bd54:	4b3f      	ldr	r3, [pc, #252]	@ (801be54 <USBD_SetConfig+0x144>)
 801bd56:	781b      	ldrb	r3, [r3, #0]
 801bd58:	001a      	movs	r2, r3
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801bd5e:	687a      	ldr	r2, [r7, #4]
 801bd60:	23a7      	movs	r3, #167	@ 0xa7
 801bd62:	009b      	lsls	r3, r3, #2
 801bd64:	2103      	movs	r1, #3
 801bd66:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801bd68:	4b3a      	ldr	r3, [pc, #232]	@ (801be54 <USBD_SetConfig+0x144>)
 801bd6a:	781a      	ldrb	r2, [r3, #0]
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	0011      	movs	r1, r2
 801bd70:	0018      	movs	r0, r3
 801bd72:	f7ff f8c6 	bl	801af02 <USBD_SetClassConfig>
 801bd76:	0003      	movs	r3, r0
 801bd78:	2b02      	cmp	r3, #2
 801bd7a:	d106      	bne.n	801bd8a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801bd7c:	683a      	ldr	r2, [r7, #0]
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	0011      	movs	r1, r2
 801bd82:	0018      	movs	r0, r3
 801bd84:	f000 f951 	bl	801c02a <USBD_CtlError>
            return;
 801bd88:	e060      	b.n	801be4c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	0018      	movs	r0, r3
 801bd8e:	f000 fa34 	bl	801c1fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801bd92:	e05b      	b.n	801be4c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	0018      	movs	r0, r3
 801bd98:	f000 fa2f 	bl	801c1fa <USBD_CtlSendStatus>
        break;
 801bd9c:	e056      	b.n	801be4c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801bd9e:	4b2d      	ldr	r3, [pc, #180]	@ (801be54 <USBD_SetConfig+0x144>)
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d115      	bne.n	801bdd2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bda6:	687a      	ldr	r2, [r7, #4]
 801bda8:	23a7      	movs	r3, #167	@ 0xa7
 801bdaa:	009b      	lsls	r3, r3, #2
 801bdac:	2102      	movs	r1, #2
 801bdae:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801bdb0:	4b28      	ldr	r3, [pc, #160]	@ (801be54 <USBD_SetConfig+0x144>)
 801bdb2:	781b      	ldrb	r3, [r3, #0]
 801bdb4:	001a      	movs	r2, r3
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801bdba:	4b26      	ldr	r3, [pc, #152]	@ (801be54 <USBD_SetConfig+0x144>)
 801bdbc:	781a      	ldrb	r2, [r3, #0]
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	0011      	movs	r1, r2
 801bdc2:	0018      	movs	r0, r3
 801bdc4:	f7ff f8c4 	bl	801af50 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	0018      	movs	r0, r3
 801bdcc:	f000 fa15 	bl	801c1fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801bdd0:	e03c      	b.n	801be4c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801bdd2:	4b20      	ldr	r3, [pc, #128]	@ (801be54 <USBD_SetConfig+0x144>)
 801bdd4:	781b      	ldrb	r3, [r3, #0]
 801bdd6:	001a      	movs	r2, r3
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	685b      	ldr	r3, [r3, #4]
 801bddc:	429a      	cmp	r2, r3
 801bdde:	d022      	beq.n	801be26 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	685b      	ldr	r3, [r3, #4]
 801bde4:	b2da      	uxtb	r2, r3
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	0011      	movs	r1, r2
 801bdea:	0018      	movs	r0, r3
 801bdec:	f7ff f8b0 	bl	801af50 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801bdf0:	4b18      	ldr	r3, [pc, #96]	@ (801be54 <USBD_SetConfig+0x144>)
 801bdf2:	781b      	ldrb	r3, [r3, #0]
 801bdf4:	001a      	movs	r2, r3
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801bdfa:	4b16      	ldr	r3, [pc, #88]	@ (801be54 <USBD_SetConfig+0x144>)
 801bdfc:	781a      	ldrb	r2, [r3, #0]
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	0011      	movs	r1, r2
 801be02:	0018      	movs	r0, r3
 801be04:	f7ff f87d 	bl	801af02 <USBD_SetClassConfig>
 801be08:	0003      	movs	r3, r0
 801be0a:	2b02      	cmp	r3, #2
 801be0c:	d106      	bne.n	801be1c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801be0e:	683a      	ldr	r2, [r7, #0]
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	0011      	movs	r1, r2
 801be14:	0018      	movs	r0, r3
 801be16:	f000 f908 	bl	801c02a <USBD_CtlError>
            return;
 801be1a:	e017      	b.n	801be4c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	0018      	movs	r0, r3
 801be20:	f000 f9eb 	bl	801c1fa <USBD_CtlSendStatus>
        break;
 801be24:	e012      	b.n	801be4c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	0018      	movs	r0, r3
 801be2a:	f000 f9e6 	bl	801c1fa <USBD_CtlSendStatus>
        break;
 801be2e:	e00d      	b.n	801be4c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801be30:	683a      	ldr	r2, [r7, #0]
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	0011      	movs	r1, r2
 801be36:	0018      	movs	r0, r3
 801be38:	f000 f8f7 	bl	801c02a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801be3c:	4b05      	ldr	r3, [pc, #20]	@ (801be54 <USBD_SetConfig+0x144>)
 801be3e:	781a      	ldrb	r2, [r3, #0]
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	0011      	movs	r1, r2
 801be44:	0018      	movs	r0, r3
 801be46:	f7ff f883 	bl	801af50 <USBD_ClrClassConfig>
        break;
 801be4a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801be4c:	46bd      	mov	sp, r7
 801be4e:	b002      	add	sp, #8
 801be50:	bd80      	pop	{r7, pc}
 801be52:	46c0      	nop			@ (mov r8, r8)
 801be54:	2000251c 	.word	0x2000251c

0801be58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b082      	sub	sp, #8
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
 801be60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801be62:	683b      	ldr	r3, [r7, #0]
 801be64:	88db      	ldrh	r3, [r3, #6]
 801be66:	2b01      	cmp	r3, #1
 801be68:	d006      	beq.n	801be78 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801be6a:	683a      	ldr	r2, [r7, #0]
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	0011      	movs	r1, r2
 801be70:	0018      	movs	r0, r3
 801be72:	f000 f8da 	bl	801c02a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801be76:	e026      	b.n	801bec6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801be78:	687a      	ldr	r2, [r7, #4]
 801be7a:	23a7      	movs	r3, #167	@ 0xa7
 801be7c:	009b      	lsls	r3, r3, #2
 801be7e:	5cd3      	ldrb	r3, [r2, r3]
 801be80:	2b02      	cmp	r3, #2
 801be82:	dc02      	bgt.n	801be8a <USBD_GetConfig+0x32>
 801be84:	2b00      	cmp	r3, #0
 801be86:	dc03      	bgt.n	801be90 <USBD_GetConfig+0x38>
 801be88:	e016      	b.n	801beb8 <USBD_GetConfig+0x60>
 801be8a:	2b03      	cmp	r3, #3
 801be8c:	d00c      	beq.n	801bea8 <USBD_GetConfig+0x50>
 801be8e:	e013      	b.n	801beb8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2200      	movs	r2, #0
 801be94:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	3308      	adds	r3, #8
 801be9a:	0019      	movs	r1, r3
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	2201      	movs	r2, #1
 801bea0:	0018      	movs	r0, r3
 801bea2:	f000 f940 	bl	801c126 <USBD_CtlSendData>
        break;
 801bea6:	e00e      	b.n	801bec6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	1d19      	adds	r1, r3, #4
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	2201      	movs	r2, #1
 801beb0:	0018      	movs	r0, r3
 801beb2:	f000 f938 	bl	801c126 <USBD_CtlSendData>
        break;
 801beb6:	e006      	b.n	801bec6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801beb8:	683a      	ldr	r2, [r7, #0]
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	0011      	movs	r1, r2
 801bebe:	0018      	movs	r0, r3
 801bec0:	f000 f8b3 	bl	801c02a <USBD_CtlError>
        break;
 801bec4:	46c0      	nop			@ (mov r8, r8)
}
 801bec6:	46c0      	nop			@ (mov r8, r8)
 801bec8:	46bd      	mov	sp, r7
 801beca:	b002      	add	sp, #8
 801becc:	bd80      	pop	{r7, pc}

0801bece <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bece:	b580      	push	{r7, lr}
 801bed0:	b082      	sub	sp, #8
 801bed2:	af00      	add	r7, sp, #0
 801bed4:	6078      	str	r0, [r7, #4]
 801bed6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bed8:	687a      	ldr	r2, [r7, #4]
 801beda:	23a7      	movs	r3, #167	@ 0xa7
 801bedc:	009b      	lsls	r3, r3, #2
 801bede:	5cd3      	ldrb	r3, [r2, r3]
 801bee0:	3b01      	subs	r3, #1
 801bee2:	2b02      	cmp	r3, #2
 801bee4:	d822      	bhi.n	801bf2c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801bee6:	683b      	ldr	r3, [r7, #0]
 801bee8:	88db      	ldrh	r3, [r3, #6]
 801beea:	2b02      	cmp	r3, #2
 801beec:	d006      	beq.n	801befc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801beee:	683a      	ldr	r2, [r7, #0]
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	0011      	movs	r1, r2
 801bef4:	0018      	movs	r0, r3
 801bef6:	f000 f898 	bl	801c02a <USBD_CtlError>
        break;
 801befa:	e01e      	b.n	801bf3a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	2201      	movs	r2, #1
 801bf00:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801bf02:	687a      	ldr	r2, [r7, #4]
 801bf04:	23a9      	movs	r3, #169	@ 0xa9
 801bf06:	009b      	lsls	r3, r3, #2
 801bf08:	58d3      	ldr	r3, [r2, r3]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d005      	beq.n	801bf1a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	68db      	ldr	r3, [r3, #12]
 801bf12:	2202      	movs	r2, #2
 801bf14:	431a      	orrs	r2, r3
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	330c      	adds	r3, #12
 801bf1e:	0019      	movs	r1, r3
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	2202      	movs	r2, #2
 801bf24:	0018      	movs	r0, r3
 801bf26:	f000 f8fe 	bl	801c126 <USBD_CtlSendData>
      break;
 801bf2a:	e006      	b.n	801bf3a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801bf2c:	683a      	ldr	r2, [r7, #0]
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	0011      	movs	r1, r2
 801bf32:	0018      	movs	r0, r3
 801bf34:	f000 f879 	bl	801c02a <USBD_CtlError>
      break;
 801bf38:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bf3a:	46c0      	nop			@ (mov r8, r8)
 801bf3c:	46bd      	mov	sp, r7
 801bf3e:	b002      	add	sp, #8
 801bf40:	bd80      	pop	{r7, pc}

0801bf42 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bf42:	b580      	push	{r7, lr}
 801bf44:	b082      	sub	sp, #8
 801bf46:	af00      	add	r7, sp, #0
 801bf48:	6078      	str	r0, [r7, #4]
 801bf4a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	885b      	ldrh	r3, [r3, #2]
 801bf50:	2b01      	cmp	r3, #1
 801bf52:	d108      	bne.n	801bf66 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801bf54:	687a      	ldr	r2, [r7, #4]
 801bf56:	23a9      	movs	r3, #169	@ 0xa9
 801bf58:	009b      	lsls	r3, r3, #2
 801bf5a:	2101      	movs	r1, #1
 801bf5c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	0018      	movs	r0, r3
 801bf62:	f000 f94a 	bl	801c1fa <USBD_CtlSendStatus>
  }
}
 801bf66:	46c0      	nop			@ (mov r8, r8)
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	b002      	add	sp, #8
 801bf6c:	bd80      	pop	{r7, pc}

0801bf6e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bf6e:	b580      	push	{r7, lr}
 801bf70:	b082      	sub	sp, #8
 801bf72:	af00      	add	r7, sp, #0
 801bf74:	6078      	str	r0, [r7, #4]
 801bf76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bf78:	687a      	ldr	r2, [r7, #4]
 801bf7a:	23a7      	movs	r3, #167	@ 0xa7
 801bf7c:	009b      	lsls	r3, r3, #2
 801bf7e:	5cd3      	ldrb	r3, [r2, r3]
 801bf80:	3b01      	subs	r3, #1
 801bf82:	2b02      	cmp	r3, #2
 801bf84:	d80d      	bhi.n	801bfa2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bf86:	683b      	ldr	r3, [r7, #0]
 801bf88:	885b      	ldrh	r3, [r3, #2]
 801bf8a:	2b01      	cmp	r3, #1
 801bf8c:	d110      	bne.n	801bfb0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801bf8e:	687a      	ldr	r2, [r7, #4]
 801bf90:	23a9      	movs	r3, #169	@ 0xa9
 801bf92:	009b      	lsls	r3, r3, #2
 801bf94:	2100      	movs	r1, #0
 801bf96:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	0018      	movs	r0, r3
 801bf9c:	f000 f92d 	bl	801c1fa <USBD_CtlSendStatus>
      }
      break;
 801bfa0:	e006      	b.n	801bfb0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801bfa2:	683a      	ldr	r2, [r7, #0]
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	0011      	movs	r1, r2
 801bfa8:	0018      	movs	r0, r3
 801bfaa:	f000 f83e 	bl	801c02a <USBD_CtlError>
      break;
 801bfae:	e000      	b.n	801bfb2 <USBD_ClrFeature+0x44>
      break;
 801bfb0:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bfb2:	46c0      	nop			@ (mov r8, r8)
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	b002      	add	sp, #8
 801bfb8:	bd80      	pop	{r7, pc}

0801bfba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801bfba:	b580      	push	{r7, lr}
 801bfbc:	b082      	sub	sp, #8
 801bfbe:	af00      	add	r7, sp, #0
 801bfc0:	6078      	str	r0, [r7, #4]
 801bfc2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801bfc4:	683b      	ldr	r3, [r7, #0]
 801bfc6:	781a      	ldrb	r2, [r3, #0]
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801bfcc:	683b      	ldr	r3, [r7, #0]
 801bfce:	785a      	ldrb	r2, [r3, #1]
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801bfd4:	683b      	ldr	r3, [r7, #0]
 801bfd6:	3302      	adds	r3, #2
 801bfd8:	781b      	ldrb	r3, [r3, #0]
 801bfda:	001a      	movs	r2, r3
 801bfdc:	683b      	ldr	r3, [r7, #0]
 801bfde:	3303      	adds	r3, #3
 801bfe0:	781b      	ldrb	r3, [r3, #0]
 801bfe2:	021b      	lsls	r3, r3, #8
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	18d3      	adds	r3, r2, r3
 801bfe8:	b29a      	uxth	r2, r3
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801bfee:	683b      	ldr	r3, [r7, #0]
 801bff0:	3304      	adds	r3, #4
 801bff2:	781b      	ldrb	r3, [r3, #0]
 801bff4:	001a      	movs	r2, r3
 801bff6:	683b      	ldr	r3, [r7, #0]
 801bff8:	3305      	adds	r3, #5
 801bffa:	781b      	ldrb	r3, [r3, #0]
 801bffc:	021b      	lsls	r3, r3, #8
 801bffe:	b29b      	uxth	r3, r3
 801c000:	18d3      	adds	r3, r2, r3
 801c002:	b29a      	uxth	r2, r3
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c008:	683b      	ldr	r3, [r7, #0]
 801c00a:	3306      	adds	r3, #6
 801c00c:	781b      	ldrb	r3, [r3, #0]
 801c00e:	001a      	movs	r2, r3
 801c010:	683b      	ldr	r3, [r7, #0]
 801c012:	3307      	adds	r3, #7
 801c014:	781b      	ldrb	r3, [r3, #0]
 801c016:	021b      	lsls	r3, r3, #8
 801c018:	b29b      	uxth	r3, r3
 801c01a:	18d3      	adds	r3, r2, r3
 801c01c:	b29a      	uxth	r2, r3
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	80da      	strh	r2, [r3, #6]

}
 801c022:	46c0      	nop			@ (mov r8, r8)
 801c024:	46bd      	mov	sp, r7
 801c026:	b002      	add	sp, #8
 801c028:	bd80      	pop	{r7, pc}

0801c02a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c02a:	b580      	push	{r7, lr}
 801c02c:	b082      	sub	sp, #8
 801c02e:	af00      	add	r7, sp, #0
 801c030:	6078      	str	r0, [r7, #4]
 801c032:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	2180      	movs	r1, #128	@ 0x80
 801c038:	0018      	movs	r0, r3
 801c03a:	f000 fd1e 	bl	801ca7a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	2100      	movs	r1, #0
 801c042:	0018      	movs	r0, r3
 801c044:	f000 fd19 	bl	801ca7a <USBD_LL_StallEP>
}
 801c048:	46c0      	nop			@ (mov r8, r8)
 801c04a:	46bd      	mov	sp, r7
 801c04c:	b002      	add	sp, #8
 801c04e:	bd80      	pop	{r7, pc}

0801c050 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c050:	b590      	push	{r4, r7, lr}
 801c052:	b087      	sub	sp, #28
 801c054:	af00      	add	r7, sp, #0
 801c056:	60f8      	str	r0, [r7, #12]
 801c058:	60b9      	str	r1, [r7, #8]
 801c05a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c05c:	2417      	movs	r4, #23
 801c05e:	193b      	adds	r3, r7, r4
 801c060:	2200      	movs	r2, #0
 801c062:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d03c      	beq.n	801c0e4 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	0018      	movs	r0, r3
 801c06e:	f000 f83d 	bl	801c0ec <USBD_GetLen>
 801c072:	0003      	movs	r3, r0
 801c074:	3301      	adds	r3, #1
 801c076:	b29b      	uxth	r3, r3
 801c078:	18db      	adds	r3, r3, r3
 801c07a:	b29a      	uxth	r2, r3
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801c080:	193b      	adds	r3, r7, r4
 801c082:	781b      	ldrb	r3, [r3, #0]
 801c084:	193a      	adds	r2, r7, r4
 801c086:	1c59      	adds	r1, r3, #1
 801c088:	7011      	strb	r1, [r2, #0]
 801c08a:	001a      	movs	r2, r3
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	189b      	adds	r3, r3, r2
 801c090:	687a      	ldr	r2, [r7, #4]
 801c092:	7812      	ldrb	r2, [r2, #0]
 801c094:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c096:	193b      	adds	r3, r7, r4
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	193a      	adds	r2, r7, r4
 801c09c:	1c59      	adds	r1, r3, #1
 801c09e:	7011      	strb	r1, [r2, #0]
 801c0a0:	001a      	movs	r2, r3
 801c0a2:	68bb      	ldr	r3, [r7, #8]
 801c0a4:	189b      	adds	r3, r3, r2
 801c0a6:	2203      	movs	r2, #3
 801c0a8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c0aa:	e017      	b.n	801c0dc <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	1c5a      	adds	r2, r3, #1
 801c0b0:	60fa      	str	r2, [r7, #12]
 801c0b2:	2417      	movs	r4, #23
 801c0b4:	193a      	adds	r2, r7, r4
 801c0b6:	7812      	ldrb	r2, [r2, #0]
 801c0b8:	1939      	adds	r1, r7, r4
 801c0ba:	1c50      	adds	r0, r2, #1
 801c0bc:	7008      	strb	r0, [r1, #0]
 801c0be:	0011      	movs	r1, r2
 801c0c0:	68ba      	ldr	r2, [r7, #8]
 801c0c2:	1852      	adds	r2, r2, r1
 801c0c4:	781b      	ldrb	r3, [r3, #0]
 801c0c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c0c8:	193b      	adds	r3, r7, r4
 801c0ca:	781b      	ldrb	r3, [r3, #0]
 801c0cc:	193a      	adds	r2, r7, r4
 801c0ce:	1c59      	adds	r1, r3, #1
 801c0d0:	7011      	strb	r1, [r2, #0]
 801c0d2:	001a      	movs	r2, r3
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	189b      	adds	r3, r3, r2
 801c0d8:	2200      	movs	r2, #0
 801c0da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	781b      	ldrb	r3, [r3, #0]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d1e3      	bne.n	801c0ac <USBD_GetString+0x5c>
    }
  }
}
 801c0e4:	46c0      	nop			@ (mov r8, r8)
 801c0e6:	46bd      	mov	sp, r7
 801c0e8:	b007      	add	sp, #28
 801c0ea:	bd90      	pop	{r4, r7, pc}

0801c0ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c0ec:	b580      	push	{r7, lr}
 801c0ee:	b084      	sub	sp, #16
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c0f4:	230f      	movs	r3, #15
 801c0f6:	18fb      	adds	r3, r7, r3
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801c0fc:	e008      	b.n	801c110 <USBD_GetLen+0x24>
  {
    len++;
 801c0fe:	210f      	movs	r1, #15
 801c100:	187b      	adds	r3, r7, r1
 801c102:	781a      	ldrb	r2, [r3, #0]
 801c104:	187b      	adds	r3, r7, r1
 801c106:	3201      	adds	r2, #1
 801c108:	701a      	strb	r2, [r3, #0]
    buf++;
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	3301      	adds	r3, #1
 801c10e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	781b      	ldrb	r3, [r3, #0]
 801c114:	2b00      	cmp	r3, #0
 801c116:	d1f2      	bne.n	801c0fe <USBD_GetLen+0x12>
  }

  return len;
 801c118:	230f      	movs	r3, #15
 801c11a:	18fb      	adds	r3, r7, r3
 801c11c:	781b      	ldrb	r3, [r3, #0]
}
 801c11e:	0018      	movs	r0, r3
 801c120:	46bd      	mov	sp, r7
 801c122:	b004      	add	sp, #16
 801c124:	bd80      	pop	{r7, pc}

0801c126 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801c126:	b580      	push	{r7, lr}
 801c128:	b084      	sub	sp, #16
 801c12a:	af00      	add	r7, sp, #0
 801c12c:	60f8      	str	r0, [r7, #12]
 801c12e:	60b9      	str	r1, [r7, #8]
 801c130:	1dbb      	adds	r3, r7, #6
 801c132:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c134:	68fa      	ldr	r2, [r7, #12]
 801c136:	23a5      	movs	r3, #165	@ 0xa5
 801c138:	009b      	lsls	r3, r3, #2
 801c13a:	2102      	movs	r1, #2
 801c13c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801c13e:	1dbb      	adds	r3, r7, #6
 801c140:	881a      	ldrh	r2, [r3, #0]
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801c146:	1dbb      	adds	r3, r7, #6
 801c148:	881a      	ldrh	r2, [r3, #0]
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c14e:	1dbb      	adds	r3, r7, #6
 801c150:	881b      	ldrh	r3, [r3, #0]
 801c152:	68ba      	ldr	r2, [r7, #8]
 801c154:	68f8      	ldr	r0, [r7, #12]
 801c156:	2100      	movs	r1, #0
 801c158:	f000 fd41 	bl	801cbde <USBD_LL_Transmit>

  return USBD_OK;
 801c15c:	2300      	movs	r3, #0
}
 801c15e:	0018      	movs	r0, r3
 801c160:	46bd      	mov	sp, r7
 801c162:	b004      	add	sp, #16
 801c164:	bd80      	pop	{r7, pc}

0801c166 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801c166:	b580      	push	{r7, lr}
 801c168:	b084      	sub	sp, #16
 801c16a:	af00      	add	r7, sp, #0
 801c16c:	60f8      	str	r0, [r7, #12]
 801c16e:	60b9      	str	r1, [r7, #8]
 801c170:	1dbb      	adds	r3, r7, #6
 801c172:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c174:	1dbb      	adds	r3, r7, #6
 801c176:	881b      	ldrh	r3, [r3, #0]
 801c178:	68ba      	ldr	r2, [r7, #8]
 801c17a:	68f8      	ldr	r0, [r7, #12]
 801c17c:	2100      	movs	r1, #0
 801c17e:	f000 fd2e 	bl	801cbde <USBD_LL_Transmit>

  return USBD_OK;
 801c182:	2300      	movs	r3, #0
}
 801c184:	0018      	movs	r0, r3
 801c186:	46bd      	mov	sp, r7
 801c188:	b004      	add	sp, #16
 801c18a:	bd80      	pop	{r7, pc}

0801c18c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b084      	sub	sp, #16
 801c190:	af00      	add	r7, sp, #0
 801c192:	60f8      	str	r0, [r7, #12]
 801c194:	60b9      	str	r1, [r7, #8]
 801c196:	1dbb      	adds	r3, r7, #6
 801c198:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c19a:	68fa      	ldr	r2, [r7, #12]
 801c19c:	23a5      	movs	r3, #165	@ 0xa5
 801c19e:	009b      	lsls	r3, r3, #2
 801c1a0:	2103      	movs	r1, #3
 801c1a2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801c1a4:	1dbb      	adds	r3, r7, #6
 801c1a6:	8819      	ldrh	r1, [r3, #0]
 801c1a8:	68fa      	ldr	r2, [r7, #12]
 801c1aa:	23ae      	movs	r3, #174	@ 0xae
 801c1ac:	005b      	lsls	r3, r3, #1
 801c1ae:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801c1b0:	1dbb      	adds	r3, r7, #6
 801c1b2:	8819      	ldrh	r1, [r3, #0]
 801c1b4:	68fa      	ldr	r2, [r7, #12]
 801c1b6:	23b0      	movs	r3, #176	@ 0xb0
 801c1b8:	005b      	lsls	r3, r3, #1
 801c1ba:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c1bc:	1dbb      	adds	r3, r7, #6
 801c1be:	881b      	ldrh	r3, [r3, #0]
 801c1c0:	68ba      	ldr	r2, [r7, #8]
 801c1c2:	68f8      	ldr	r0, [r7, #12]
 801c1c4:	2100      	movs	r1, #0
 801c1c6:	f000 fd41 	bl	801cc4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c1ca:	2300      	movs	r3, #0
}
 801c1cc:	0018      	movs	r0, r3
 801c1ce:	46bd      	mov	sp, r7
 801c1d0:	b004      	add	sp, #16
 801c1d2:	bd80      	pop	{r7, pc}

0801c1d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b084      	sub	sp, #16
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	60f8      	str	r0, [r7, #12]
 801c1dc:	60b9      	str	r1, [r7, #8]
 801c1de:	1dbb      	adds	r3, r7, #6
 801c1e0:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c1e2:	1dbb      	adds	r3, r7, #6
 801c1e4:	881b      	ldrh	r3, [r3, #0]
 801c1e6:	68ba      	ldr	r2, [r7, #8]
 801c1e8:	68f8      	ldr	r0, [r7, #12]
 801c1ea:	2100      	movs	r1, #0
 801c1ec:	f000 fd2e 	bl	801cc4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c1f0:	2300      	movs	r3, #0
}
 801c1f2:	0018      	movs	r0, r3
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	b004      	add	sp, #16
 801c1f8:	bd80      	pop	{r7, pc}

0801c1fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c1fa:	b580      	push	{r7, lr}
 801c1fc:	b082      	sub	sp, #8
 801c1fe:	af00      	add	r7, sp, #0
 801c200:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c202:	687a      	ldr	r2, [r7, #4]
 801c204:	23a5      	movs	r3, #165	@ 0xa5
 801c206:	009b      	lsls	r3, r3, #2
 801c208:	2104      	movs	r1, #4
 801c20a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c20c:	6878      	ldr	r0, [r7, #4]
 801c20e:	2300      	movs	r3, #0
 801c210:	2200      	movs	r2, #0
 801c212:	2100      	movs	r1, #0
 801c214:	f000 fce3 	bl	801cbde <USBD_LL_Transmit>

  return USBD_OK;
 801c218:	2300      	movs	r3, #0
}
 801c21a:	0018      	movs	r0, r3
 801c21c:	46bd      	mov	sp, r7
 801c21e:	b002      	add	sp, #8
 801c220:	bd80      	pop	{r7, pc}

0801c222 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c222:	b580      	push	{r7, lr}
 801c224:	b082      	sub	sp, #8
 801c226:	af00      	add	r7, sp, #0
 801c228:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	23a5      	movs	r3, #165	@ 0xa5
 801c22e:	009b      	lsls	r3, r3, #2
 801c230:	2105      	movs	r1, #5
 801c232:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c234:	6878      	ldr	r0, [r7, #4]
 801c236:	2300      	movs	r3, #0
 801c238:	2200      	movs	r2, #0
 801c23a:	2100      	movs	r1, #0
 801c23c:	f000 fd06 	bl	801cc4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c240:	2300      	movs	r3, #0
}
 801c242:	0018      	movs	r0, r3
 801c244:	46bd      	mov	sp, r7
 801c246:	b002      	add	sp, #8
 801c248:	bd80      	pop	{r7, pc}
	...

0801c24c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c250:	4914      	ldr	r1, [pc, #80]	@ (801c2a4 <MX_USB_DEVICE_Init+0x58>)
 801c252:	4b15      	ldr	r3, [pc, #84]	@ (801c2a8 <MX_USB_DEVICE_Init+0x5c>)
 801c254:	2200      	movs	r2, #0
 801c256:	0018      	movs	r0, r3
 801c258:	f7fe fdec 	bl	801ae34 <USBD_Init>
 801c25c:	1e03      	subs	r3, r0, #0
 801c25e:	d001      	beq.n	801c264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c260:	f7eb fee0 	bl	8008024 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c264:	4a11      	ldr	r2, [pc, #68]	@ (801c2ac <MX_USB_DEVICE_Init+0x60>)
 801c266:	4b10      	ldr	r3, [pc, #64]	@ (801c2a8 <MX_USB_DEVICE_Init+0x5c>)
 801c268:	0011      	movs	r1, r2
 801c26a:	0018      	movs	r0, r3
 801c26c:	f7fe fe13 	bl	801ae96 <USBD_RegisterClass>
 801c270:	1e03      	subs	r3, r0, #0
 801c272:	d001      	beq.n	801c278 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801c274:	f7eb fed6 	bl	8008024 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c278:	4a0d      	ldr	r2, [pc, #52]	@ (801c2b0 <MX_USB_DEVICE_Init+0x64>)
 801c27a:	4b0b      	ldr	r3, [pc, #44]	@ (801c2a8 <MX_USB_DEVICE_Init+0x5c>)
 801c27c:	0011      	movs	r1, r2
 801c27e:	0018      	movs	r0, r3
 801c280:	f7fe fd28 	bl	801acd4 <USBD_CDC_RegisterInterface>
 801c284:	1e03      	subs	r3, r0, #0
 801c286:	d001      	beq.n	801c28c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801c288:	f7eb fecc 	bl	8008024 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c28c:	4b06      	ldr	r3, [pc, #24]	@ (801c2a8 <MX_USB_DEVICE_Init+0x5c>)
 801c28e:	0018      	movs	r0, r3
 801c290:	f7fe fe21 	bl	801aed6 <USBD_Start>
 801c294:	1e03      	subs	r3, r0, #0
 801c296:	d001      	beq.n	801c29c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801c298:	f7eb fec4 	bl	8008024 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c29c:	46c0      	nop			@ (mov r8, r8)
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	bd80      	pop	{r7, pc}
 801c2a2:	46c0      	nop			@ (mov r8, r8)
 801c2a4:	20000200 	.word	0x20000200
 801c2a8:	20002520 	.word	0x20002520
 801c2ac:	200000ec 	.word	0x200000ec
 801c2b0:	200001f0 	.word	0x200001f0

0801c2b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c2b4:	b580      	push	{r7, lr}
 801c2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c2b8:	4907      	ldr	r1, [pc, #28]	@ (801c2d8 <CDC_Init_FS+0x24>)
 801c2ba:	4b08      	ldr	r3, [pc, #32]	@ (801c2dc <CDC_Init_FS+0x28>)
 801c2bc:	2200      	movs	r2, #0
 801c2be:	0018      	movs	r0, r3
 801c2c0:	f7fe fd23 	bl	801ad0a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c2c4:	4a06      	ldr	r2, [pc, #24]	@ (801c2e0 <CDC_Init_FS+0x2c>)
 801c2c6:	4b05      	ldr	r3, [pc, #20]	@ (801c2dc <CDC_Init_FS+0x28>)
 801c2c8:	0011      	movs	r1, r2
 801c2ca:	0018      	movs	r0, r3
 801c2cc:	f7fe fd39 	bl	801ad42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c2d0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c2d2:	0018      	movs	r0, r3
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	bd80      	pop	{r7, pc}
 801c2d8:	20002ca4 	.word	0x20002ca4
 801c2dc:	20002520 	.word	0x20002520
 801c2e0:	200028a4 	.word	0x200028a4

0801c2e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c2e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c2ea:	0018      	movs	r0, r3
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bd80      	pop	{r7, pc}

0801c2f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b082      	sub	sp, #8
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6039      	str	r1, [r7, #0]
 801c2f8:	0011      	movs	r1, r2
 801c2fa:	1dfb      	adds	r3, r7, #7
 801c2fc:	1c02      	adds	r2, r0, #0
 801c2fe:	701a      	strb	r2, [r3, #0]
 801c300:	1d3b      	adds	r3, r7, #4
 801c302:	1c0a      	adds	r2, r1, #0
 801c304:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c306:	1dfb      	adds	r3, r7, #7
 801c308:	781b      	ldrb	r3, [r3, #0]
 801c30a:	2b23      	cmp	r3, #35	@ 0x23
 801c30c:	d804      	bhi.n	801c318 <CDC_Control_FS+0x28>
 801c30e:	009a      	lsls	r2, r3, #2
 801c310:	4b04      	ldr	r3, [pc, #16]	@ (801c324 <CDC_Control_FS+0x34>)
 801c312:	18d3      	adds	r3, r2, r3
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c318:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801c31a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c31c:	0018      	movs	r0, r3
 801c31e:	46bd      	mov	sp, r7
 801c320:	b002      	add	sp, #8
 801c322:	bd80      	pop	{r7, pc}
 801c324:	08024a20 	.word	0x08024a20

0801c328 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c328:	b580      	push	{r7, lr}
 801c32a:	b082      	sub	sp, #8
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
 801c330:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801c332:	4b12      	ldr	r3, [pc, #72]	@ (801c37c <CDC_Receive_FS+0x54>)
 801c334:	781b      	ldrb	r3, [r3, #0]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d013      	beq.n	801c362 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801c33a:	683b      	ldr	r3, [r7, #0]
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	b29a      	uxth	r2, r3
 801c340:	2301      	movs	r3, #1
 801c342:	425b      	negs	r3, r3
 801c344:	6879      	ldr	r1, [r7, #4]
 801c346:	480e      	ldr	r0, [pc, #56]	@ (801c380 <CDC_Receive_FS+0x58>)
 801c348:	f7fa fa46 	bl	80167d8 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c34c:	687a      	ldr	r2, [r7, #4]
 801c34e:	4b0d      	ldr	r3, [pc, #52]	@ (801c384 <CDC_Receive_FS+0x5c>)
 801c350:	0011      	movs	r1, r2
 801c352:	0018      	movs	r0, r3
 801c354:	f7fe fcf5 	bl	801ad42 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c358:	4b0a      	ldr	r3, [pc, #40]	@ (801c384 <CDC_Receive_FS+0x5c>)
 801c35a:	0018      	movs	r0, r3
 801c35c:	f7fe fd3c 	bl	801add8 <USBD_CDC_ReceivePacket>
 801c360:	e006      	b.n	801c370 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801c362:	683b      	ldr	r3, [r7, #0]
 801c364:	681a      	ldr	r2, [r3, #0]
 801c366:	4b08      	ldr	r3, [pc, #32]	@ (801c388 <CDC_Receive_FS+0x60>)
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	18d2      	adds	r2, r2, r3
 801c36c:	4b06      	ldr	r3, [pc, #24]	@ (801c388 <CDC_Receive_FS+0x60>)
 801c36e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801c370:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c372:	0018      	movs	r0, r3
 801c374:	46bd      	mov	sp, r7
 801c376:	b002      	add	sp, #8
 801c378:	bd80      	pop	{r7, pc}
 801c37a:	46c0      	nop			@ (mov r8, r8)
 801c37c:	200027e4 	.word	0x200027e4
 801c380:	200027e8 	.word	0x200027e8
 801c384:	20002520 	.word	0x20002520
 801c388:	200028a0 	.word	0x200028a0

0801c38c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c38c:	b5b0      	push	{r4, r5, r7, lr}
 801c38e:	b084      	sub	sp, #16
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]
 801c394:	000a      	movs	r2, r1
 801c396:	1cbb      	adds	r3, r7, #2
 801c398:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c39a:	230f      	movs	r3, #15
 801c39c:	18fb      	adds	r3, r7, r3
 801c39e:	2200      	movs	r2, #0
 801c3a0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c3a2:	4a11      	ldr	r2, [pc, #68]	@ (801c3e8 <CDC_Transmit_FS+0x5c>)
 801c3a4:	23ae      	movs	r3, #174	@ 0xae
 801c3a6:	009b      	lsls	r3, r3, #2
 801c3a8:	58d3      	ldr	r3, [r2, r3]
 801c3aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c3ac:	68ba      	ldr	r2, [r7, #8]
 801c3ae:	2385      	movs	r3, #133	@ 0x85
 801c3b0:	009b      	lsls	r3, r3, #2
 801c3b2:	58d3      	ldr	r3, [r2, r3]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d001      	beq.n	801c3bc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801c3b8:	2301      	movs	r3, #1
 801c3ba:	e010      	b.n	801c3de <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c3bc:	1cbb      	adds	r3, r7, #2
 801c3be:	881a      	ldrh	r2, [r3, #0]
 801c3c0:	6879      	ldr	r1, [r7, #4]
 801c3c2:	4b09      	ldr	r3, [pc, #36]	@ (801c3e8 <CDC_Transmit_FS+0x5c>)
 801c3c4:	0018      	movs	r0, r3
 801c3c6:	f7fe fca0 	bl	801ad0a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c3ca:	250f      	movs	r5, #15
 801c3cc:	197c      	adds	r4, r7, r5
 801c3ce:	4b06      	ldr	r3, [pc, #24]	@ (801c3e8 <CDC_Transmit_FS+0x5c>)
 801c3d0:	0018      	movs	r0, r3
 801c3d2:	f7fe fcca 	bl	801ad6a <USBD_CDC_TransmitPacket>
 801c3d6:	0003      	movs	r3, r0
 801c3d8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801c3da:	197b      	adds	r3, r7, r5
 801c3dc:	781b      	ldrb	r3, [r3, #0]
}
 801c3de:	0018      	movs	r0, r3
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	b004      	add	sp, #16
 801c3e4:	bdb0      	pop	{r4, r5, r7, pc}
 801c3e6:	46c0      	nop			@ (mov r8, r8)
 801c3e8:	20002520 	.word	0x20002520

0801c3ec <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	af00      	add	r7, sp, #0
  ESPProg = true;
 801c3f0:	4b02      	ldr	r3, [pc, #8]	@ (801c3fc <EnableESPProg+0x10>)
 801c3f2:	2201      	movs	r2, #1
 801c3f4:	701a      	strb	r2, [r3, #0]
}
 801c3f6:	46c0      	nop			@ (mov r8, r8)
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	bd80      	pop	{r7, pc}
 801c3fc:	200027e4 	.word	0x200027e4

0801c400 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801c404:	4b01      	ldr	r3, [pc, #4]	@ (801c40c <GetUsbRxPointer+0xc>)
}
 801c406:	0018      	movs	r0, r3
 801c408:	46bd      	mov	sp, r7
 801c40a:	bd80      	pop	{r7, pc}
 801c40c:	200028a4 	.word	0x200028a4

0801c410 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801c414:	4b07      	ldr	r3, [pc, #28]	@ (801c434 <ResetUsbRxDataSize+0x24>)
 801c416:	2200      	movs	r2, #0
 801c418:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801c41a:	4a07      	ldr	r2, [pc, #28]	@ (801c438 <ResetUsbRxDataSize+0x28>)
 801c41c:	4b07      	ldr	r3, [pc, #28]	@ (801c43c <ResetUsbRxDataSize+0x2c>)
 801c41e:	0011      	movs	r1, r2
 801c420:	0018      	movs	r0, r3
 801c422:	f7fe fc8e 	bl	801ad42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c426:	4b05      	ldr	r3, [pc, #20]	@ (801c43c <ResetUsbRxDataSize+0x2c>)
 801c428:	0018      	movs	r0, r3
 801c42a:	f7fe fcd5 	bl	801add8 <USBD_CDC_ReceivePacket>
}
 801c42e:	46c0      	nop			@ (mov r8, r8)
 801c430:	46bd      	mov	sp, r7
 801c432:	bd80      	pop	{r7, pc}
 801c434:	200028a0 	.word	0x200028a0
 801c438:	200028a4 	.word	0x200028a4
 801c43c:	20002520 	.word	0x20002520

0801c440 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801c440:	b580      	push	{r7, lr}
 801c442:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801c444:	4b02      	ldr	r3, [pc, #8]	@ (801c450 <GetUsbRxDataSize+0x10>)
 801c446:	681b      	ldr	r3, [r3, #0]
}
 801c448:	0018      	movs	r0, r3
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}
 801c44e:	46c0      	nop			@ (mov r8, r8)
 801c450:	200028a0 	.word	0x200028a0

0801c454 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801c454:	b580      	push	{r7, lr}
 801c456:	b082      	sub	sp, #8
 801c458:	af00      	add	r7, sp, #0
 801c45a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801c45c:	687a      	ldr	r2, [r7, #4]
 801c45e:	4b07      	ldr	r3, [pc, #28]	@ (801c47c <GetUsbRxNextChunk+0x28>)
 801c460:	18d2      	adds	r2, r2, r3
 801c462:	4b07      	ldr	r3, [pc, #28]	@ (801c480 <GetUsbRxNextChunk+0x2c>)
 801c464:	0011      	movs	r1, r2
 801c466:	0018      	movs	r0, r3
 801c468:	f7fe fc6b 	bl	801ad42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c46c:	4b04      	ldr	r3, [pc, #16]	@ (801c480 <GetUsbRxNextChunk+0x2c>)
 801c46e:	0018      	movs	r0, r3
 801c470:	f7fe fcb2 	bl	801add8 <USBD_CDC_ReceivePacket>
}
 801c474:	46c0      	nop			@ (mov r8, r8)
 801c476:	46bd      	mov	sp, r7
 801c478:	b002      	add	sp, #8
 801c47a:	bd80      	pop	{r7, pc}
 801c47c:	200028a4 	.word	0x200028a4
 801c480:	20002520 	.word	0x20002520

0801c484 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c484:	b580      	push	{r7, lr}
 801c486:	b082      	sub	sp, #8
 801c488:	af00      	add	r7, sp, #0
 801c48a:	0002      	movs	r2, r0
 801c48c:	6039      	str	r1, [r7, #0]
 801c48e:	1dfb      	adds	r3, r7, #7
 801c490:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c492:	683b      	ldr	r3, [r7, #0]
 801c494:	2212      	movs	r2, #18
 801c496:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c498:	4b02      	ldr	r3, [pc, #8]	@ (801c4a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c49a:	0018      	movs	r0, r3
 801c49c:	46bd      	mov	sp, r7
 801c49e:	b002      	add	sp, #8
 801c4a0:	bd80      	pop	{r7, pc}
 801c4a2:	46c0      	nop			@ (mov r8, r8)
 801c4a4:	2000021c 	.word	0x2000021c

0801c4a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	0002      	movs	r2, r0
 801c4b0:	6039      	str	r1, [r7, #0]
 801c4b2:	1dfb      	adds	r3, r7, #7
 801c4b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	2204      	movs	r2, #4
 801c4ba:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c4bc:	4b02      	ldr	r3, [pc, #8]	@ (801c4c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c4be:	0018      	movs	r0, r3
 801c4c0:	46bd      	mov	sp, r7
 801c4c2:	b002      	add	sp, #8
 801c4c4:	bd80      	pop	{r7, pc}
 801c4c6:	46c0      	nop			@ (mov r8, r8)
 801c4c8:	20000230 	.word	0x20000230

0801c4cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b082      	sub	sp, #8
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	0002      	movs	r2, r0
 801c4d4:	6039      	str	r1, [r7, #0]
 801c4d6:	1dfb      	adds	r3, r7, #7
 801c4d8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c4da:	1dfb      	adds	r3, r7, #7
 801c4dc:	781b      	ldrb	r3, [r3, #0]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d106      	bne.n	801c4f0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c4e2:	683a      	ldr	r2, [r7, #0]
 801c4e4:	4908      	ldr	r1, [pc, #32]	@ (801c508 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c4e6:	4b09      	ldr	r3, [pc, #36]	@ (801c50c <USBD_FS_ProductStrDescriptor+0x40>)
 801c4e8:	0018      	movs	r0, r3
 801c4ea:	f7ff fdb1 	bl	801c050 <USBD_GetString>
 801c4ee:	e005      	b.n	801c4fc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c4f0:	683a      	ldr	r2, [r7, #0]
 801c4f2:	4905      	ldr	r1, [pc, #20]	@ (801c508 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c4f4:	4b05      	ldr	r3, [pc, #20]	@ (801c50c <USBD_FS_ProductStrDescriptor+0x40>)
 801c4f6:	0018      	movs	r0, r3
 801c4f8:	f7ff fdaa 	bl	801c050 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c4fc:	4b02      	ldr	r3, [pc, #8]	@ (801c508 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801c4fe:	0018      	movs	r0, r3
 801c500:	46bd      	mov	sp, r7
 801c502:	b002      	add	sp, #8
 801c504:	bd80      	pop	{r7, pc}
 801c506:	46c0      	nop			@ (mov r8, r8)
 801c508:	200030a4 	.word	0x200030a4
 801c50c:	080244b0 	.word	0x080244b0

0801c510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c510:	b580      	push	{r7, lr}
 801c512:	b082      	sub	sp, #8
 801c514:	af00      	add	r7, sp, #0
 801c516:	0002      	movs	r2, r0
 801c518:	6039      	str	r1, [r7, #0]
 801c51a:	1dfb      	adds	r3, r7, #7
 801c51c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c51e:	683a      	ldr	r2, [r7, #0]
 801c520:	4904      	ldr	r1, [pc, #16]	@ (801c534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c522:	4b05      	ldr	r3, [pc, #20]	@ (801c538 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c524:	0018      	movs	r0, r3
 801c526:	f7ff fd93 	bl	801c050 <USBD_GetString>
  return USBD_StrDesc;
 801c52a:	4b02      	ldr	r3, [pc, #8]	@ (801c534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c52c:	0018      	movs	r0, r3
 801c52e:	46bd      	mov	sp, r7
 801c530:	b002      	add	sp, #8
 801c532:	bd80      	pop	{r7, pc}
 801c534:	200030a4 	.word	0x200030a4
 801c538:	080244c8 	.word	0x080244c8

0801c53c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b082      	sub	sp, #8
 801c540:	af00      	add	r7, sp, #0
 801c542:	0002      	movs	r2, r0
 801c544:	6039      	str	r1, [r7, #0]
 801c546:	1dfb      	adds	r3, r7, #7
 801c548:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c54a:	683b      	ldr	r3, [r7, #0]
 801c54c:	221a      	movs	r2, #26
 801c54e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c550:	f000 f84c 	bl	801c5ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c554:	4b02      	ldr	r3, [pc, #8]	@ (801c560 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c556:	0018      	movs	r0, r3
 801c558:	46bd      	mov	sp, r7
 801c55a:	b002      	add	sp, #8
 801c55c:	bd80      	pop	{r7, pc}
 801c55e:	46c0      	nop			@ (mov r8, r8)
 801c560:	20000234 	.word	0x20000234

0801c564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c564:	b580      	push	{r7, lr}
 801c566:	b082      	sub	sp, #8
 801c568:	af00      	add	r7, sp, #0
 801c56a:	0002      	movs	r2, r0
 801c56c:	6039      	str	r1, [r7, #0]
 801c56e:	1dfb      	adds	r3, r7, #7
 801c570:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c572:	1dfb      	adds	r3, r7, #7
 801c574:	781b      	ldrb	r3, [r3, #0]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d106      	bne.n	801c588 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c57a:	683a      	ldr	r2, [r7, #0]
 801c57c:	4908      	ldr	r1, [pc, #32]	@ (801c5a0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c57e:	4b09      	ldr	r3, [pc, #36]	@ (801c5a4 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c580:	0018      	movs	r0, r3
 801c582:	f7ff fd65 	bl	801c050 <USBD_GetString>
 801c586:	e005      	b.n	801c594 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c588:	683a      	ldr	r2, [r7, #0]
 801c58a:	4905      	ldr	r1, [pc, #20]	@ (801c5a0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c58c:	4b05      	ldr	r3, [pc, #20]	@ (801c5a4 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c58e:	0018      	movs	r0, r3
 801c590:	f7ff fd5e 	bl	801c050 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c594:	4b02      	ldr	r3, [pc, #8]	@ (801c5a0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c596:	0018      	movs	r0, r3
 801c598:	46bd      	mov	sp, r7
 801c59a:	b002      	add	sp, #8
 801c59c:	bd80      	pop	{r7, pc}
 801c59e:	46c0      	nop			@ (mov r8, r8)
 801c5a0:	200030a4 	.word	0x200030a4
 801c5a4:	080244dc 	.word	0x080244dc

0801c5a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b082      	sub	sp, #8
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	0002      	movs	r2, r0
 801c5b0:	6039      	str	r1, [r7, #0]
 801c5b2:	1dfb      	adds	r3, r7, #7
 801c5b4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c5b6:	1dfb      	adds	r3, r7, #7
 801c5b8:	781b      	ldrb	r3, [r3, #0]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d106      	bne.n	801c5cc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c5be:	683a      	ldr	r2, [r7, #0]
 801c5c0:	4908      	ldr	r1, [pc, #32]	@ (801c5e4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c5c2:	4b09      	ldr	r3, [pc, #36]	@ (801c5e8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c5c4:	0018      	movs	r0, r3
 801c5c6:	f7ff fd43 	bl	801c050 <USBD_GetString>
 801c5ca:	e005      	b.n	801c5d8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c5cc:	683a      	ldr	r2, [r7, #0]
 801c5ce:	4905      	ldr	r1, [pc, #20]	@ (801c5e4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c5d0:	4b05      	ldr	r3, [pc, #20]	@ (801c5e8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c5d2:	0018      	movs	r0, r3
 801c5d4:	f7ff fd3c 	bl	801c050 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c5d8:	4b02      	ldr	r3, [pc, #8]	@ (801c5e4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c5da:	0018      	movs	r0, r3
 801c5dc:	46bd      	mov	sp, r7
 801c5de:	b002      	add	sp, #8
 801c5e0:	bd80      	pop	{r7, pc}
 801c5e2:	46c0      	nop			@ (mov r8, r8)
 801c5e4:	200030a4 	.word	0x200030a4
 801c5e8:	080244e8 	.word	0x080244e8

0801c5ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b084      	sub	sp, #16
 801c5f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c5f2:	4b10      	ldr	r3, [pc, #64]	@ (801c634 <Get_SerialNum+0x48>)
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c5f8:	4b0f      	ldr	r3, [pc, #60]	@ (801c638 <Get_SerialNum+0x4c>)
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c5fe:	4b0f      	ldr	r3, [pc, #60]	@ (801c63c <Get_SerialNum+0x50>)
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c604:	68fa      	ldr	r2, [r7, #12]
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	18d3      	adds	r3, r2, r3
 801c60a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d00b      	beq.n	801c62a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c612:	490b      	ldr	r1, [pc, #44]	@ (801c640 <Get_SerialNum+0x54>)
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	2208      	movs	r2, #8
 801c618:	0018      	movs	r0, r3
 801c61a:	f000 f815 	bl	801c648 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c61e:	4909      	ldr	r1, [pc, #36]	@ (801c644 <Get_SerialNum+0x58>)
 801c620:	68bb      	ldr	r3, [r7, #8]
 801c622:	2204      	movs	r2, #4
 801c624:	0018      	movs	r0, r3
 801c626:	f000 f80f 	bl	801c648 <IntToUnicode>
  }
}
 801c62a:	46c0      	nop			@ (mov r8, r8)
 801c62c:	46bd      	mov	sp, r7
 801c62e:	b004      	add	sp, #16
 801c630:	bd80      	pop	{r7, pc}
 801c632:	46c0      	nop			@ (mov r8, r8)
 801c634:	1ff80050 	.word	0x1ff80050
 801c638:	1ff80054 	.word	0x1ff80054
 801c63c:	1ff80058 	.word	0x1ff80058
 801c640:	20000236 	.word	0x20000236
 801c644:	20000246 	.word	0x20000246

0801c648 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c648:	b580      	push	{r7, lr}
 801c64a:	b086      	sub	sp, #24
 801c64c:	af00      	add	r7, sp, #0
 801c64e:	60f8      	str	r0, [r7, #12]
 801c650:	60b9      	str	r1, [r7, #8]
 801c652:	1dfb      	adds	r3, r7, #7
 801c654:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c656:	2117      	movs	r1, #23
 801c658:	187b      	adds	r3, r7, r1
 801c65a:	2200      	movs	r2, #0
 801c65c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c65e:	187b      	adds	r3, r7, r1
 801c660:	2200      	movs	r2, #0
 801c662:	701a      	strb	r2, [r3, #0]
 801c664:	e02f      	b.n	801c6c6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	0f1b      	lsrs	r3, r3, #28
 801c66a:	2b09      	cmp	r3, #9
 801c66c:	d80d      	bhi.n	801c68a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	0f1b      	lsrs	r3, r3, #28
 801c672:	b2da      	uxtb	r2, r3
 801c674:	2317      	movs	r3, #23
 801c676:	18fb      	adds	r3, r7, r3
 801c678:	781b      	ldrb	r3, [r3, #0]
 801c67a:	005b      	lsls	r3, r3, #1
 801c67c:	0019      	movs	r1, r3
 801c67e:	68bb      	ldr	r3, [r7, #8]
 801c680:	185b      	adds	r3, r3, r1
 801c682:	3230      	adds	r2, #48	@ 0x30
 801c684:	b2d2      	uxtb	r2, r2
 801c686:	701a      	strb	r2, [r3, #0]
 801c688:	e00c      	b.n	801c6a4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	0f1b      	lsrs	r3, r3, #28
 801c68e:	b2da      	uxtb	r2, r3
 801c690:	2317      	movs	r3, #23
 801c692:	18fb      	adds	r3, r7, r3
 801c694:	781b      	ldrb	r3, [r3, #0]
 801c696:	005b      	lsls	r3, r3, #1
 801c698:	0019      	movs	r1, r3
 801c69a:	68bb      	ldr	r3, [r7, #8]
 801c69c:	185b      	adds	r3, r3, r1
 801c69e:	3237      	adds	r2, #55	@ 0x37
 801c6a0:	b2d2      	uxtb	r2, r2
 801c6a2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	011b      	lsls	r3, r3, #4
 801c6a8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c6aa:	2117      	movs	r1, #23
 801c6ac:	187b      	adds	r3, r7, r1
 801c6ae:	781b      	ldrb	r3, [r3, #0]
 801c6b0:	005b      	lsls	r3, r3, #1
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	68ba      	ldr	r2, [r7, #8]
 801c6b6:	18d3      	adds	r3, r2, r3
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c6bc:	187b      	adds	r3, r7, r1
 801c6be:	781a      	ldrb	r2, [r3, #0]
 801c6c0:	187b      	adds	r3, r7, r1
 801c6c2:	3201      	adds	r2, #1
 801c6c4:	701a      	strb	r2, [r3, #0]
 801c6c6:	2317      	movs	r3, #23
 801c6c8:	18fa      	adds	r2, r7, r3
 801c6ca:	1dfb      	adds	r3, r7, #7
 801c6cc:	7812      	ldrb	r2, [r2, #0]
 801c6ce:	781b      	ldrb	r3, [r3, #0]
 801c6d0:	429a      	cmp	r2, r3
 801c6d2:	d3c8      	bcc.n	801c666 <IntToUnicode+0x1e>
  }
}
 801c6d4:	46c0      	nop			@ (mov r8, r8)
 801c6d6:	46c0      	nop			@ (mov r8, r8)
 801c6d8:	46bd      	mov	sp, r7
 801c6da:	b006      	add	sp, #24
 801c6dc:	bd80      	pop	{r7, pc}
	...

0801c6e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b082      	sub	sp, #8
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	4a0a      	ldr	r2, [pc, #40]	@ (801c718 <HAL_PCD_MspInit+0x38>)
 801c6ee:	4293      	cmp	r3, r2
 801c6f0:	d10e      	bne.n	801c710 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801c6f2:	4b0a      	ldr	r3, [pc, #40]	@ (801c71c <HAL_PCD_MspInit+0x3c>)
 801c6f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c6f6:	4b09      	ldr	r3, [pc, #36]	@ (801c71c <HAL_PCD_MspInit+0x3c>)
 801c6f8:	2180      	movs	r1, #128	@ 0x80
 801c6fa:	0409      	lsls	r1, r1, #16
 801c6fc:	430a      	orrs	r2, r1
 801c6fe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801c700:	2200      	movs	r2, #0
 801c702:	2100      	movs	r1, #0
 801c704:	201f      	movs	r0, #31
 801c706:	f7f2 fadf 	bl	800ecc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801c70a:	201f      	movs	r0, #31
 801c70c:	f7f2 faf1 	bl	800ecf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801c710:	46c0      	nop			@ (mov r8, r8)
 801c712:	46bd      	mov	sp, r7
 801c714:	b002      	add	sp, #8
 801c716:	bd80      	pop	{r7, pc}
 801c718:	40005c00 	.word	0x40005c00
 801c71c:	40021000 	.word	0x40021000

0801c720 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c720:	b580      	push	{r7, lr}
 801c722:	b082      	sub	sp, #8
 801c724:	af00      	add	r7, sp, #0
 801c726:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c728:	687a      	ldr	r2, [r7, #4]
 801c72a:	23bc      	movs	r3, #188	@ 0xbc
 801c72c:	009b      	lsls	r3, r3, #2
 801c72e:	58d2      	ldr	r2, [r2, r3]
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	21ac      	movs	r1, #172	@ 0xac
 801c734:	0089      	lsls	r1, r1, #2
 801c736:	468c      	mov	ip, r1
 801c738:	4463      	add	r3, ip
 801c73a:	0019      	movs	r1, r3
 801c73c:	0010      	movs	r0, r2
 801c73e:	f7fe fc1d 	bl	801af7c <USBD_LL_SetupStage>
}
 801c742:	46c0      	nop			@ (mov r8, r8)
 801c744:	46bd      	mov	sp, r7
 801c746:	b002      	add	sp, #8
 801c748:	bd80      	pop	{r7, pc}

0801c74a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c74a:	b590      	push	{r4, r7, lr}
 801c74c:	b083      	sub	sp, #12
 801c74e:	af00      	add	r7, sp, #0
 801c750:	6078      	str	r0, [r7, #4]
 801c752:	000a      	movs	r2, r1
 801c754:	1cfb      	adds	r3, r7, #3
 801c756:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c758:	687a      	ldr	r2, [r7, #4]
 801c75a:	23bc      	movs	r3, #188	@ 0xbc
 801c75c:	009b      	lsls	r3, r3, #2
 801c75e:	58d4      	ldr	r4, [r2, r3]
 801c760:	1cfb      	adds	r3, r7, #3
 801c762:	781a      	ldrb	r2, [r3, #0]
 801c764:	6878      	ldr	r0, [r7, #4]
 801c766:	23be      	movs	r3, #190	@ 0xbe
 801c768:	0059      	lsls	r1, r3, #1
 801c76a:	0013      	movs	r3, r2
 801c76c:	009b      	lsls	r3, r3, #2
 801c76e:	189b      	adds	r3, r3, r2
 801c770:	00db      	lsls	r3, r3, #3
 801c772:	18c3      	adds	r3, r0, r3
 801c774:	185b      	adds	r3, r3, r1
 801c776:	681a      	ldr	r2, [r3, #0]
 801c778:	1cfb      	adds	r3, r7, #3
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	0019      	movs	r1, r3
 801c77e:	0020      	movs	r0, r4
 801c780:	f7fe fc5a 	bl	801b038 <USBD_LL_DataOutStage>
}
 801c784:	46c0      	nop			@ (mov r8, r8)
 801c786:	46bd      	mov	sp, r7
 801c788:	b003      	add	sp, #12
 801c78a:	bd90      	pop	{r4, r7, pc}

0801c78c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b082      	sub	sp, #8
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
 801c794:	000a      	movs	r2, r1
 801c796:	1cfb      	adds	r3, r7, #3
 801c798:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c79a:	687a      	ldr	r2, [r7, #4]
 801c79c:	23bc      	movs	r3, #188	@ 0xbc
 801c79e:	009b      	lsls	r3, r3, #2
 801c7a0:	58d0      	ldr	r0, [r2, r3]
 801c7a2:	1cfb      	adds	r3, r7, #3
 801c7a4:	781a      	ldrb	r2, [r3, #0]
 801c7a6:	6879      	ldr	r1, [r7, #4]
 801c7a8:	0013      	movs	r3, r2
 801c7aa:	009b      	lsls	r3, r3, #2
 801c7ac:	189b      	adds	r3, r3, r2
 801c7ae:	00db      	lsls	r3, r3, #3
 801c7b0:	18cb      	adds	r3, r1, r3
 801c7b2:	333c      	adds	r3, #60	@ 0x3c
 801c7b4:	681a      	ldr	r2, [r3, #0]
 801c7b6:	1cfb      	adds	r3, r7, #3
 801c7b8:	781b      	ldrb	r3, [r3, #0]
 801c7ba:	0019      	movs	r1, r3
 801c7bc:	f7fe fcbe 	bl	801b13c <USBD_LL_DataInStage>
}
 801c7c0:	46c0      	nop			@ (mov r8, r8)
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	b002      	add	sp, #8
 801c7c6:	bd80      	pop	{r7, pc}

0801c7c8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b082      	sub	sp, #8
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c7d0:	687a      	ldr	r2, [r7, #4]
 801c7d2:	23bc      	movs	r3, #188	@ 0xbc
 801c7d4:	009b      	lsls	r3, r3, #2
 801c7d6:	58d3      	ldr	r3, [r2, r3]
 801c7d8:	0018      	movs	r0, r3
 801c7da:	f7fe fdf5 	bl	801b3c8 <USBD_LL_SOF>
}
 801c7de:	46c0      	nop			@ (mov r8, r8)
 801c7e0:	46bd      	mov	sp, r7
 801c7e2:	b002      	add	sp, #8
 801c7e4:	bd80      	pop	{r7, pc}

0801c7e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7e6:	b580      	push	{r7, lr}
 801c7e8:	b084      	sub	sp, #16
 801c7ea:	af00      	add	r7, sp, #0
 801c7ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c7ee:	230f      	movs	r3, #15
 801c7f0:	18fb      	adds	r3, r7, r3
 801c7f2:	2201      	movs	r2, #1
 801c7f4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	689b      	ldr	r3, [r3, #8]
 801c7fa:	2b02      	cmp	r3, #2
 801c7fc:	d001      	beq.n	801c802 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801c7fe:	f7eb fc11 	bl	8008024 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	23bc      	movs	r3, #188	@ 0xbc
 801c806:	009b      	lsls	r3, r3, #2
 801c808:	58d2      	ldr	r2, [r2, r3]
 801c80a:	230f      	movs	r3, #15
 801c80c:	18fb      	adds	r3, r7, r3
 801c80e:	781b      	ldrb	r3, [r3, #0]
 801c810:	0019      	movs	r1, r3
 801c812:	0010      	movs	r0, r2
 801c814:	f7fe fd97 	bl	801b346 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c818:	687a      	ldr	r2, [r7, #4]
 801c81a:	23bc      	movs	r3, #188	@ 0xbc
 801c81c:	009b      	lsls	r3, r3, #2
 801c81e:	58d3      	ldr	r3, [r2, r3]
 801c820:	0018      	movs	r0, r3
 801c822:	f7fe fd48 	bl	801b2b6 <USBD_LL_Reset>
}
 801c826:	46c0      	nop			@ (mov r8, r8)
 801c828:	46bd      	mov	sp, r7
 801c82a:	b004      	add	sp, #16
 801c82c:	bd80      	pop	{r7, pc}
	...

0801c830 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c830:	b580      	push	{r7, lr}
 801c832:	b082      	sub	sp, #8
 801c834:	af00      	add	r7, sp, #0
 801c836:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c838:	687a      	ldr	r2, [r7, #4]
 801c83a:	23bc      	movs	r3, #188	@ 0xbc
 801c83c:	009b      	lsls	r3, r3, #2
 801c83e:	58d3      	ldr	r3, [r2, r3]
 801c840:	0018      	movs	r0, r3
 801c842:	f7fe fd91 	bl	801b368 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	699b      	ldr	r3, [r3, #24]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d005      	beq.n	801c85a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c84e:	4b05      	ldr	r3, [pc, #20]	@ (801c864 <HAL_PCD_SuspendCallback+0x34>)
 801c850:	691a      	ldr	r2, [r3, #16]
 801c852:	4b04      	ldr	r3, [pc, #16]	@ (801c864 <HAL_PCD_SuspendCallback+0x34>)
 801c854:	2106      	movs	r1, #6
 801c856:	430a      	orrs	r2, r1
 801c858:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801c85a:	46c0      	nop			@ (mov r8, r8)
 801c85c:	46bd      	mov	sp, r7
 801c85e:	b002      	add	sp, #8
 801c860:	bd80      	pop	{r7, pc}
 801c862:	46c0      	nop			@ (mov r8, r8)
 801c864:	e000ed00 	.word	0xe000ed00

0801c868 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c868:	b580      	push	{r7, lr}
 801c86a:	b082      	sub	sp, #8
 801c86c:	af00      	add	r7, sp, #0
 801c86e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	699b      	ldr	r3, [r3, #24]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d007      	beq.n	801c888 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c878:	4b09      	ldr	r3, [pc, #36]	@ (801c8a0 <HAL_PCD_ResumeCallback+0x38>)
 801c87a:	691a      	ldr	r2, [r3, #16]
 801c87c:	4b08      	ldr	r3, [pc, #32]	@ (801c8a0 <HAL_PCD_ResumeCallback+0x38>)
 801c87e:	2106      	movs	r1, #6
 801c880:	438a      	bics	r2, r1
 801c882:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801c884:	f000 fa44 	bl	801cd10 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c888:	687a      	ldr	r2, [r7, #4]
 801c88a:	23bc      	movs	r3, #188	@ 0xbc
 801c88c:	009b      	lsls	r3, r3, #2
 801c88e:	58d3      	ldr	r3, [r2, r3]
 801c890:	0018      	movs	r0, r3
 801c892:	f7fe fd81 	bl	801b398 <USBD_LL_Resume>
}
 801c896:	46c0      	nop			@ (mov r8, r8)
 801c898:	46bd      	mov	sp, r7
 801c89a:	b002      	add	sp, #8
 801c89c:	bd80      	pop	{r7, pc}
 801c89e:	46c0      	nop			@ (mov r8, r8)
 801c8a0:	e000ed00 	.word	0xe000ed00

0801c8a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b082      	sub	sp, #8
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c8ac:	4a2d      	ldr	r2, [pc, #180]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8ae:	23bc      	movs	r3, #188	@ 0xbc
 801c8b0:	009b      	lsls	r3, r3, #2
 801c8b2:	6879      	ldr	r1, [r7, #4]
 801c8b4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c8b6:	687a      	ldr	r2, [r7, #4]
 801c8b8:	23b0      	movs	r3, #176	@ 0xb0
 801c8ba:	009b      	lsls	r3, r3, #2
 801c8bc:	4929      	ldr	r1, [pc, #164]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8be:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c8c0:	4b28      	ldr	r3, [pc, #160]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8c2:	4a29      	ldr	r2, [pc, #164]	@ (801c968 <USBD_LL_Init+0xc4>)
 801c8c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c8c6:	4b27      	ldr	r3, [pc, #156]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8c8:	2208      	movs	r2, #8
 801c8ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c8cc:	4b25      	ldr	r3, [pc, #148]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8ce:	2202      	movs	r2, #2
 801c8d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c8d2:	4b24      	ldr	r3, [pc, #144]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8d4:	2202      	movs	r2, #2
 801c8d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c8d8:	4b22      	ldr	r3, [pc, #136]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8da:	2200      	movs	r2, #0
 801c8dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c8de:	4b21      	ldr	r3, [pc, #132]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8e0:	2200      	movs	r2, #0
 801c8e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c8e4:	4b1f      	ldr	r3, [pc, #124]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c8ea:	4b1e      	ldr	r3, [pc, #120]	@ (801c964 <USBD_LL_Init+0xc0>)
 801c8ec:	0018      	movs	r0, r3
 801c8ee:	f7f5 ff95 	bl	801281c <HAL_PCD_Init>
 801c8f2:	1e03      	subs	r3, r0, #0
 801c8f4:	d001      	beq.n	801c8fa <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c8f6:	f7eb fb95 	bl	8008024 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c8fa:	687a      	ldr	r2, [r7, #4]
 801c8fc:	23b0      	movs	r3, #176	@ 0xb0
 801c8fe:	009b      	lsls	r3, r3, #2
 801c900:	58d0      	ldr	r0, [r2, r3]
 801c902:	2318      	movs	r3, #24
 801c904:	2200      	movs	r2, #0
 801c906:	2100      	movs	r1, #0
 801c908:	f7f7 fd56 	bl	80143b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c90c:	687a      	ldr	r2, [r7, #4]
 801c90e:	23b0      	movs	r3, #176	@ 0xb0
 801c910:	009b      	lsls	r3, r3, #2
 801c912:	58d0      	ldr	r0, [r2, r3]
 801c914:	2358      	movs	r3, #88	@ 0x58
 801c916:	2200      	movs	r2, #0
 801c918:	2180      	movs	r1, #128	@ 0x80
 801c91a:	f7f7 fd4d 	bl	80143b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c91e:	687a      	ldr	r2, [r7, #4]
 801c920:	23b0      	movs	r3, #176	@ 0xb0
 801c922:	009b      	lsls	r3, r3, #2
 801c924:	58d0      	ldr	r0, [r2, r3]
 801c926:	23c0      	movs	r3, #192	@ 0xc0
 801c928:	2200      	movs	r2, #0
 801c92a:	2181      	movs	r1, #129	@ 0x81
 801c92c:	f7f7 fd44 	bl	80143b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c930:	687a      	ldr	r2, [r7, #4]
 801c932:	23b0      	movs	r3, #176	@ 0xb0
 801c934:	009b      	lsls	r3, r3, #2
 801c936:	58d0      	ldr	r0, [r2, r3]
 801c938:	2388      	movs	r3, #136	@ 0x88
 801c93a:	005b      	lsls	r3, r3, #1
 801c93c:	2200      	movs	r2, #0
 801c93e:	2101      	movs	r1, #1
 801c940:	f7f7 fd3a 	bl	80143b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801c944:	687a      	ldr	r2, [r7, #4]
 801c946:	23b0      	movs	r3, #176	@ 0xb0
 801c948:	009b      	lsls	r3, r3, #2
 801c94a:	58d0      	ldr	r0, [r2, r3]
 801c94c:	2380      	movs	r3, #128	@ 0x80
 801c94e:	005b      	lsls	r3, r3, #1
 801c950:	2200      	movs	r2, #0
 801c952:	2182      	movs	r1, #130	@ 0x82
 801c954:	f7f7 fd30 	bl	80143b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801c958:	2300      	movs	r3, #0
}
 801c95a:	0018      	movs	r0, r3
 801c95c:	46bd      	mov	sp, r7
 801c95e:	b002      	add	sp, #8
 801c960:	bd80      	pop	{r7, pc}
 801c962:	46c0      	nop			@ (mov r8, r8)
 801c964:	200032a4 	.word	0x200032a4
 801c968:	40005c00 	.word	0x40005c00

0801c96c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c96e:	b085      	sub	sp, #20
 801c970:	af00      	add	r7, sp, #0
 801c972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c974:	210f      	movs	r1, #15
 801c976:	187b      	adds	r3, r7, r1
 801c978:	2200      	movs	r2, #0
 801c97a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c97c:	260e      	movs	r6, #14
 801c97e:	19bb      	adds	r3, r7, r6
 801c980:	2200      	movs	r2, #0
 801c982:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c984:	687a      	ldr	r2, [r7, #4]
 801c986:	23b0      	movs	r3, #176	@ 0xb0
 801c988:	009b      	lsls	r3, r3, #2
 801c98a:	58d3      	ldr	r3, [r2, r3]
 801c98c:	000d      	movs	r5, r1
 801c98e:	187c      	adds	r4, r7, r1
 801c990:	0018      	movs	r0, r3
 801c992:	f7f6 f843 	bl	8012a1c <HAL_PCD_Start>
 801c996:	0003      	movs	r3, r0
 801c998:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c99a:	19bc      	adds	r4, r7, r6
 801c99c:	197b      	adds	r3, r7, r5
 801c99e:	781b      	ldrb	r3, [r3, #0]
 801c9a0:	0018      	movs	r0, r3
 801c9a2:	f000 f9bc 	bl	801cd1e <USBD_Get_USB_Status>
 801c9a6:	0003      	movs	r3, r0
 801c9a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c9aa:	19bb      	adds	r3, r7, r6
 801c9ac:	781b      	ldrb	r3, [r3, #0]
}
 801c9ae:	0018      	movs	r0, r3
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	b005      	add	sp, #20
 801c9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c9b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c9b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9b8:	b085      	sub	sp, #20
 801c9ba:	af00      	add	r7, sp, #0
 801c9bc:	6078      	str	r0, [r7, #4]
 801c9be:	000c      	movs	r4, r1
 801c9c0:	0010      	movs	r0, r2
 801c9c2:	0019      	movs	r1, r3
 801c9c4:	1cfb      	adds	r3, r7, #3
 801c9c6:	1c22      	adds	r2, r4, #0
 801c9c8:	701a      	strb	r2, [r3, #0]
 801c9ca:	1cbb      	adds	r3, r7, #2
 801c9cc:	1c02      	adds	r2, r0, #0
 801c9ce:	701a      	strb	r2, [r3, #0]
 801c9d0:	003b      	movs	r3, r7
 801c9d2:	1c0a      	adds	r2, r1, #0
 801c9d4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9d6:	260f      	movs	r6, #15
 801c9d8:	19bb      	adds	r3, r7, r6
 801c9da:	2200      	movs	r2, #0
 801c9dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c9de:	250e      	movs	r5, #14
 801c9e0:	197b      	adds	r3, r7, r5
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c9e6:	687a      	ldr	r2, [r7, #4]
 801c9e8:	23b0      	movs	r3, #176	@ 0xb0
 801c9ea:	009b      	lsls	r3, r3, #2
 801c9ec:	58d0      	ldr	r0, [r2, r3]
 801c9ee:	19bc      	adds	r4, r7, r6
 801c9f0:	1cbb      	adds	r3, r7, #2
 801c9f2:	781d      	ldrb	r5, [r3, #0]
 801c9f4:	003b      	movs	r3, r7
 801c9f6:	881a      	ldrh	r2, [r3, #0]
 801c9f8:	1cfb      	adds	r3, r7, #3
 801c9fa:	7819      	ldrb	r1, [r3, #0]
 801c9fc:	002b      	movs	r3, r5
 801c9fe:	f7f6 f9a2 	bl	8012d46 <HAL_PCD_EP_Open>
 801ca02:	0003      	movs	r3, r0
 801ca04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca06:	250e      	movs	r5, #14
 801ca08:	197c      	adds	r4, r7, r5
 801ca0a:	19bb      	adds	r3, r7, r6
 801ca0c:	781b      	ldrb	r3, [r3, #0]
 801ca0e:	0018      	movs	r0, r3
 801ca10:	f000 f985 	bl	801cd1e <USBD_Get_USB_Status>
 801ca14:	0003      	movs	r3, r0
 801ca16:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ca18:	197b      	adds	r3, r7, r5
 801ca1a:	781b      	ldrb	r3, [r3, #0]
}
 801ca1c:	0018      	movs	r0, r3
 801ca1e:	46bd      	mov	sp, r7
 801ca20:	b005      	add	sp, #20
 801ca22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca24 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca26:	b085      	sub	sp, #20
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	6078      	str	r0, [r7, #4]
 801ca2c:	000a      	movs	r2, r1
 801ca2e:	1cfb      	adds	r3, r7, #3
 801ca30:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca32:	210f      	movs	r1, #15
 801ca34:	187b      	adds	r3, r7, r1
 801ca36:	2200      	movs	r2, #0
 801ca38:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca3a:	260e      	movs	r6, #14
 801ca3c:	19bb      	adds	r3, r7, r6
 801ca3e:	2200      	movs	r2, #0
 801ca40:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ca42:	687a      	ldr	r2, [r7, #4]
 801ca44:	23b0      	movs	r3, #176	@ 0xb0
 801ca46:	009b      	lsls	r3, r3, #2
 801ca48:	58d2      	ldr	r2, [r2, r3]
 801ca4a:	000d      	movs	r5, r1
 801ca4c:	187c      	adds	r4, r7, r1
 801ca4e:	1cfb      	adds	r3, r7, #3
 801ca50:	781b      	ldrb	r3, [r3, #0]
 801ca52:	0019      	movs	r1, r3
 801ca54:	0010      	movs	r0, r2
 801ca56:	f7f6 f9e5 	bl	8012e24 <HAL_PCD_EP_Close>
 801ca5a:	0003      	movs	r3, r0
 801ca5c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca5e:	19bc      	adds	r4, r7, r6
 801ca60:	197b      	adds	r3, r7, r5
 801ca62:	781b      	ldrb	r3, [r3, #0]
 801ca64:	0018      	movs	r0, r3
 801ca66:	f000 f95a 	bl	801cd1e <USBD_Get_USB_Status>
 801ca6a:	0003      	movs	r3, r0
 801ca6c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ca6e:	19bb      	adds	r3, r7, r6
 801ca70:	781b      	ldrb	r3, [r3, #0]
}
 801ca72:	0018      	movs	r0, r3
 801ca74:	46bd      	mov	sp, r7
 801ca76:	b005      	add	sp, #20
 801ca78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca7a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca7c:	b085      	sub	sp, #20
 801ca7e:	af00      	add	r7, sp, #0
 801ca80:	6078      	str	r0, [r7, #4]
 801ca82:	000a      	movs	r2, r1
 801ca84:	1cfb      	adds	r3, r7, #3
 801ca86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca88:	210f      	movs	r1, #15
 801ca8a:	187b      	adds	r3, r7, r1
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca90:	260e      	movs	r6, #14
 801ca92:	19bb      	adds	r3, r7, r6
 801ca94:	2200      	movs	r2, #0
 801ca96:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ca98:	687a      	ldr	r2, [r7, #4]
 801ca9a:	23b0      	movs	r3, #176	@ 0xb0
 801ca9c:	009b      	lsls	r3, r3, #2
 801ca9e:	58d2      	ldr	r2, [r2, r3]
 801caa0:	000d      	movs	r5, r1
 801caa2:	187c      	adds	r4, r7, r1
 801caa4:	1cfb      	adds	r3, r7, #3
 801caa6:	781b      	ldrb	r3, [r3, #0]
 801caa8:	0019      	movs	r1, r3
 801caaa:	0010      	movs	r0, r2
 801caac:	f7f6 fa97 	bl	8012fde <HAL_PCD_EP_SetStall>
 801cab0:	0003      	movs	r3, r0
 801cab2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cab4:	19bc      	adds	r4, r7, r6
 801cab6:	197b      	adds	r3, r7, r5
 801cab8:	781b      	ldrb	r3, [r3, #0]
 801caba:	0018      	movs	r0, r3
 801cabc:	f000 f92f 	bl	801cd1e <USBD_Get_USB_Status>
 801cac0:	0003      	movs	r3, r0
 801cac2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cac4:	19bb      	adds	r3, r7, r6
 801cac6:	781b      	ldrb	r3, [r3, #0]
}
 801cac8:	0018      	movs	r0, r3
 801caca:	46bd      	mov	sp, r7
 801cacc:	b005      	add	sp, #20
 801cace:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cad0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cad2:	b085      	sub	sp, #20
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
 801cad8:	000a      	movs	r2, r1
 801cada:	1cfb      	adds	r3, r7, #3
 801cadc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cade:	210f      	movs	r1, #15
 801cae0:	187b      	adds	r3, r7, r1
 801cae2:	2200      	movs	r2, #0
 801cae4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cae6:	260e      	movs	r6, #14
 801cae8:	19bb      	adds	r3, r7, r6
 801caea:	2200      	movs	r2, #0
 801caec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801caee:	687a      	ldr	r2, [r7, #4]
 801caf0:	23b0      	movs	r3, #176	@ 0xb0
 801caf2:	009b      	lsls	r3, r3, #2
 801caf4:	58d2      	ldr	r2, [r2, r3]
 801caf6:	000d      	movs	r5, r1
 801caf8:	187c      	adds	r4, r7, r1
 801cafa:	1cfb      	adds	r3, r7, #3
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	0019      	movs	r1, r3
 801cb00:	0010      	movs	r0, r2
 801cb02:	f7f6 fac8 	bl	8013096 <HAL_PCD_EP_ClrStall>
 801cb06:	0003      	movs	r3, r0
 801cb08:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb0a:	19bc      	adds	r4, r7, r6
 801cb0c:	197b      	adds	r3, r7, r5
 801cb0e:	781b      	ldrb	r3, [r3, #0]
 801cb10:	0018      	movs	r0, r3
 801cb12:	f000 f904 	bl	801cd1e <USBD_Get_USB_Status>
 801cb16:	0003      	movs	r3, r0
 801cb18:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cb1a:	19bb      	adds	r3, r7, r6
 801cb1c:	781b      	ldrb	r3, [r3, #0]
}
 801cb1e:	0018      	movs	r0, r3
 801cb20:	46bd      	mov	sp, r7
 801cb22:	b005      	add	sp, #20
 801cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb26 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cb26:	b580      	push	{r7, lr}
 801cb28:	b084      	sub	sp, #16
 801cb2a:	af00      	add	r7, sp, #0
 801cb2c:	6078      	str	r0, [r7, #4]
 801cb2e:	000a      	movs	r2, r1
 801cb30:	1cfb      	adds	r3, r7, #3
 801cb32:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801cb34:	687a      	ldr	r2, [r7, #4]
 801cb36:	23b0      	movs	r3, #176	@ 0xb0
 801cb38:	009b      	lsls	r3, r3, #2
 801cb3a:	58d3      	ldr	r3, [r2, r3]
 801cb3c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801cb3e:	1cfb      	adds	r3, r7, #3
 801cb40:	781b      	ldrb	r3, [r3, #0]
 801cb42:	b25b      	sxtb	r3, r3
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	da0d      	bge.n	801cb64 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cb48:	1cfb      	adds	r3, r7, #3
 801cb4a:	781b      	ldrb	r3, [r3, #0]
 801cb4c:	227f      	movs	r2, #127	@ 0x7f
 801cb4e:	4013      	ands	r3, r2
 801cb50:	68f9      	ldr	r1, [r7, #12]
 801cb52:	1c5a      	adds	r2, r3, #1
 801cb54:	0013      	movs	r3, r2
 801cb56:	009b      	lsls	r3, r3, #2
 801cb58:	189b      	adds	r3, r3, r2
 801cb5a:	00db      	lsls	r3, r3, #3
 801cb5c:	18cb      	adds	r3, r1, r3
 801cb5e:	3302      	adds	r3, #2
 801cb60:	781b      	ldrb	r3, [r3, #0]
 801cb62:	e00d      	b.n	801cb80 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cb64:	1cfb      	adds	r3, r7, #3
 801cb66:	781b      	ldrb	r3, [r3, #0]
 801cb68:	227f      	movs	r2, #127	@ 0x7f
 801cb6a:	401a      	ands	r2, r3
 801cb6c:	68f8      	ldr	r0, [r7, #12]
 801cb6e:	23b5      	movs	r3, #181	@ 0xb5
 801cb70:	0059      	lsls	r1, r3, #1
 801cb72:	0013      	movs	r3, r2
 801cb74:	009b      	lsls	r3, r3, #2
 801cb76:	189b      	adds	r3, r3, r2
 801cb78:	00db      	lsls	r3, r3, #3
 801cb7a:	18c3      	adds	r3, r0, r3
 801cb7c:	185b      	adds	r3, r3, r1
 801cb7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cb80:	0018      	movs	r0, r3
 801cb82:	46bd      	mov	sp, r7
 801cb84:	b004      	add	sp, #16
 801cb86:	bd80      	pop	{r7, pc}

0801cb88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801cb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb8a:	b085      	sub	sp, #20
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	6078      	str	r0, [r7, #4]
 801cb90:	000a      	movs	r2, r1
 801cb92:	1cfb      	adds	r3, r7, #3
 801cb94:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb96:	210f      	movs	r1, #15
 801cb98:	187b      	adds	r3, r7, r1
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb9e:	260e      	movs	r6, #14
 801cba0:	19bb      	adds	r3, r7, r6
 801cba2:	2200      	movs	r2, #0
 801cba4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801cba6:	687a      	ldr	r2, [r7, #4]
 801cba8:	23b0      	movs	r3, #176	@ 0xb0
 801cbaa:	009b      	lsls	r3, r3, #2
 801cbac:	58d2      	ldr	r2, [r2, r3]
 801cbae:	000d      	movs	r5, r1
 801cbb0:	187c      	adds	r4, r7, r1
 801cbb2:	1cfb      	adds	r3, r7, #3
 801cbb4:	781b      	ldrb	r3, [r3, #0]
 801cbb6:	0019      	movs	r1, r3
 801cbb8:	0010      	movs	r0, r2
 801cbba:	f7f6 f899 	bl	8012cf0 <HAL_PCD_SetAddress>
 801cbbe:	0003      	movs	r3, r0
 801cbc0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cbc2:	19bc      	adds	r4, r7, r6
 801cbc4:	197b      	adds	r3, r7, r5
 801cbc6:	781b      	ldrb	r3, [r3, #0]
 801cbc8:	0018      	movs	r0, r3
 801cbca:	f000 f8a8 	bl	801cd1e <USBD_Get_USB_Status>
 801cbce:	0003      	movs	r3, r0
 801cbd0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cbd2:	19bb      	adds	r3, r7, r6
 801cbd4:	781b      	ldrb	r3, [r3, #0]
}
 801cbd6:	0018      	movs	r0, r3
 801cbd8:	46bd      	mov	sp, r7
 801cbda:	b005      	add	sp, #20
 801cbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cbde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cbde:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbe0:	b087      	sub	sp, #28
 801cbe2:	af00      	add	r7, sp, #0
 801cbe4:	60f8      	str	r0, [r7, #12]
 801cbe6:	0008      	movs	r0, r1
 801cbe8:	607a      	str	r2, [r7, #4]
 801cbea:	0019      	movs	r1, r3
 801cbec:	230b      	movs	r3, #11
 801cbee:	18fb      	adds	r3, r7, r3
 801cbf0:	1c02      	adds	r2, r0, #0
 801cbf2:	701a      	strb	r2, [r3, #0]
 801cbf4:	2408      	movs	r4, #8
 801cbf6:	193b      	adds	r3, r7, r4
 801cbf8:	1c0a      	adds	r2, r1, #0
 801cbfa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cbfc:	2117      	movs	r1, #23
 801cbfe:	187b      	adds	r3, r7, r1
 801cc00:	2200      	movs	r2, #0
 801cc02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc04:	2516      	movs	r5, #22
 801cc06:	197b      	adds	r3, r7, r5
 801cc08:	2200      	movs	r2, #0
 801cc0a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cc0c:	68fa      	ldr	r2, [r7, #12]
 801cc0e:	23b0      	movs	r3, #176	@ 0xb0
 801cc10:	009b      	lsls	r3, r3, #2
 801cc12:	58d0      	ldr	r0, [r2, r3]
 801cc14:	193b      	adds	r3, r7, r4
 801cc16:	881d      	ldrh	r5, [r3, #0]
 801cc18:	000e      	movs	r6, r1
 801cc1a:	187c      	adds	r4, r7, r1
 801cc1c:	687a      	ldr	r2, [r7, #4]
 801cc1e:	230b      	movs	r3, #11
 801cc20:	18fb      	adds	r3, r7, r3
 801cc22:	7819      	ldrb	r1, [r3, #0]
 801cc24:	002b      	movs	r3, r5
 801cc26:	f7f6 f99e 	bl	8012f66 <HAL_PCD_EP_Transmit>
 801cc2a:	0003      	movs	r3, r0
 801cc2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cc2e:	2516      	movs	r5, #22
 801cc30:	197c      	adds	r4, r7, r5
 801cc32:	19bb      	adds	r3, r7, r6
 801cc34:	781b      	ldrb	r3, [r3, #0]
 801cc36:	0018      	movs	r0, r3
 801cc38:	f000 f871 	bl	801cd1e <USBD_Get_USB_Status>
 801cc3c:	0003      	movs	r3, r0
 801cc3e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cc40:	197b      	adds	r3, r7, r5
 801cc42:	781b      	ldrb	r3, [r3, #0]
}
 801cc44:	0018      	movs	r0, r3
 801cc46:	46bd      	mov	sp, r7
 801cc48:	b007      	add	sp, #28
 801cc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc4e:	b087      	sub	sp, #28
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	60f8      	str	r0, [r7, #12]
 801cc54:	0008      	movs	r0, r1
 801cc56:	607a      	str	r2, [r7, #4]
 801cc58:	0019      	movs	r1, r3
 801cc5a:	230b      	movs	r3, #11
 801cc5c:	18fb      	adds	r3, r7, r3
 801cc5e:	1c02      	adds	r2, r0, #0
 801cc60:	701a      	strb	r2, [r3, #0]
 801cc62:	2408      	movs	r4, #8
 801cc64:	193b      	adds	r3, r7, r4
 801cc66:	1c0a      	adds	r2, r1, #0
 801cc68:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cc6a:	2117      	movs	r1, #23
 801cc6c:	187b      	adds	r3, r7, r1
 801cc6e:	2200      	movs	r2, #0
 801cc70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc72:	2516      	movs	r5, #22
 801cc74:	197b      	adds	r3, r7, r5
 801cc76:	2200      	movs	r2, #0
 801cc78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cc7a:	68fa      	ldr	r2, [r7, #12]
 801cc7c:	23b0      	movs	r3, #176	@ 0xb0
 801cc7e:	009b      	lsls	r3, r3, #2
 801cc80:	58d0      	ldr	r0, [r2, r3]
 801cc82:	193b      	adds	r3, r7, r4
 801cc84:	881d      	ldrh	r5, [r3, #0]
 801cc86:	000e      	movs	r6, r1
 801cc88:	187c      	adds	r4, r7, r1
 801cc8a:	687a      	ldr	r2, [r7, #4]
 801cc8c:	230b      	movs	r3, #11
 801cc8e:	18fb      	adds	r3, r7, r3
 801cc90:	7819      	ldrb	r1, [r3, #0]
 801cc92:	002b      	movs	r3, r5
 801cc94:	f7f6 f917 	bl	8012ec6 <HAL_PCD_EP_Receive>
 801cc98:	0003      	movs	r3, r0
 801cc9a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cc9c:	2516      	movs	r5, #22
 801cc9e:	197c      	adds	r4, r7, r5
 801cca0:	19bb      	adds	r3, r7, r6
 801cca2:	781b      	ldrb	r3, [r3, #0]
 801cca4:	0018      	movs	r0, r3
 801cca6:	f000 f83a 	bl	801cd1e <USBD_Get_USB_Status>
 801ccaa:	0003      	movs	r3, r0
 801ccac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ccae:	197b      	adds	r3, r7, r5
 801ccb0:	781b      	ldrb	r3, [r3, #0]
}
 801ccb2:	0018      	movs	r0, r3
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	b007      	add	sp, #28
 801ccb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ccba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ccba:	b580      	push	{r7, lr}
 801ccbc:	b082      	sub	sp, #8
 801ccbe:	af00      	add	r7, sp, #0
 801ccc0:	6078      	str	r0, [r7, #4]
 801ccc2:	000a      	movs	r2, r1
 801ccc4:	1cfb      	adds	r3, r7, #3
 801ccc6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ccc8:	687a      	ldr	r2, [r7, #4]
 801ccca:	23b0      	movs	r3, #176	@ 0xb0
 801cccc:	009b      	lsls	r3, r3, #2
 801ccce:	58d2      	ldr	r2, [r2, r3]
 801ccd0:	1cfb      	adds	r3, r7, #3
 801ccd2:	781b      	ldrb	r3, [r3, #0]
 801ccd4:	0019      	movs	r1, r3
 801ccd6:	0010      	movs	r0, r2
 801ccd8:	f7f6 f92c 	bl	8012f34 <HAL_PCD_EP_GetRxCount>
 801ccdc:	0003      	movs	r3, r0
}
 801ccde:	0018      	movs	r0, r3
 801cce0:	46bd      	mov	sp, r7
 801cce2:	b002      	add	sp, #8
 801cce4:	bd80      	pop	{r7, pc}
	...

0801cce8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cce8:	b580      	push	{r7, lr}
 801ccea:	b082      	sub	sp, #8
 801ccec:	af00      	add	r7, sp, #0
 801ccee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ccf0:	4b02      	ldr	r3, [pc, #8]	@ (801ccfc <USBD_static_malloc+0x14>)
}
 801ccf2:	0018      	movs	r0, r3
 801ccf4:	46bd      	mov	sp, r7
 801ccf6:	b002      	add	sp, #8
 801ccf8:	bd80      	pop	{r7, pc}
 801ccfa:	46c0      	nop			@ (mov r8, r8)
 801ccfc:	20003598 	.word	0x20003598

0801cd00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cd00:	b580      	push	{r7, lr}
 801cd02:	b082      	sub	sp, #8
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	6078      	str	r0, [r7, #4]

}
 801cd08:	46c0      	nop			@ (mov r8, r8)
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	b002      	add	sp, #8
 801cd0e:	bd80      	pop	{r7, pc}

0801cd10 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801cd14:	f7eb f83c 	bl	8007d90 <SystemClock_Config>
}
 801cd18:	46c0      	nop			@ (mov r8, r8)
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	bd80      	pop	{r7, pc}

0801cd1e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cd1e:	b580      	push	{r7, lr}
 801cd20:	b084      	sub	sp, #16
 801cd22:	af00      	add	r7, sp, #0
 801cd24:	0002      	movs	r2, r0
 801cd26:	1dfb      	adds	r3, r7, #7
 801cd28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cd2a:	230f      	movs	r3, #15
 801cd2c:	18fb      	adds	r3, r7, r3
 801cd2e:	2200      	movs	r2, #0
 801cd30:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801cd32:	1dfb      	adds	r3, r7, #7
 801cd34:	781b      	ldrb	r3, [r3, #0]
 801cd36:	2b03      	cmp	r3, #3
 801cd38:	d017      	beq.n	801cd6a <USBD_Get_USB_Status+0x4c>
 801cd3a:	dc1b      	bgt.n	801cd74 <USBD_Get_USB_Status+0x56>
 801cd3c:	2b02      	cmp	r3, #2
 801cd3e:	d00f      	beq.n	801cd60 <USBD_Get_USB_Status+0x42>
 801cd40:	dc18      	bgt.n	801cd74 <USBD_Get_USB_Status+0x56>
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d002      	beq.n	801cd4c <USBD_Get_USB_Status+0x2e>
 801cd46:	2b01      	cmp	r3, #1
 801cd48:	d005      	beq.n	801cd56 <USBD_Get_USB_Status+0x38>
 801cd4a:	e013      	b.n	801cd74 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801cd4c:	230f      	movs	r3, #15
 801cd4e:	18fb      	adds	r3, r7, r3
 801cd50:	2200      	movs	r2, #0
 801cd52:	701a      	strb	r2, [r3, #0]
    break;
 801cd54:	e013      	b.n	801cd7e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801cd56:	230f      	movs	r3, #15
 801cd58:	18fb      	adds	r3, r7, r3
 801cd5a:	2202      	movs	r2, #2
 801cd5c:	701a      	strb	r2, [r3, #0]
    break;
 801cd5e:	e00e      	b.n	801cd7e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801cd60:	230f      	movs	r3, #15
 801cd62:	18fb      	adds	r3, r7, r3
 801cd64:	2201      	movs	r2, #1
 801cd66:	701a      	strb	r2, [r3, #0]
    break;
 801cd68:	e009      	b.n	801cd7e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801cd6a:	230f      	movs	r3, #15
 801cd6c:	18fb      	adds	r3, r7, r3
 801cd6e:	2202      	movs	r2, #2
 801cd70:	701a      	strb	r2, [r3, #0]
    break;
 801cd72:	e004      	b.n	801cd7e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801cd74:	230f      	movs	r3, #15
 801cd76:	18fb      	adds	r3, r7, r3
 801cd78:	2202      	movs	r2, #2
 801cd7a:	701a      	strb	r2, [r3, #0]
    break;
 801cd7c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801cd7e:	230f      	movs	r3, #15
 801cd80:	18fb      	adds	r3, r7, r3
 801cd82:	781b      	ldrb	r3, [r3, #0]
}
 801cd84:	0018      	movs	r0, r3
 801cd86:	46bd      	mov	sp, r7
 801cd88:	b004      	add	sp, #16
 801cd8a:	bd80      	pop	{r7, pc}

0801cd8c <arm_cfft_radix4by2_q31>:
 801cd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd8e:	465f      	mov	r7, fp
 801cd90:	4656      	mov	r6, sl
 801cd92:	464d      	mov	r5, r9
 801cd94:	4644      	mov	r4, r8
 801cd96:	000b      	movs	r3, r1
 801cd98:	b4f0      	push	{r4, r5, r6, r7}
 801cd9a:	085b      	lsrs	r3, r3, #1
 801cd9c:	b08f      	sub	sp, #60	@ 0x3c
 801cd9e:	910a      	str	r1, [sp, #40]	@ 0x28
 801cda0:	0007      	movs	r7, r0
 801cda2:	9009      	str	r0, [sp, #36]	@ 0x24
 801cda4:	0011      	movs	r1, r2
 801cda6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cda8:	930c      	str	r3, [sp, #48]	@ 0x30
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d100      	bne.n	801cdb0 <arm_cfft_radix4by2_q31+0x24>
 801cdae:	e0a0      	b.n	801cef2 <arm_cfft_radix4by2_q31+0x166>
 801cdb0:	0002      	movs	r2, r0
 801cdb2:	00db      	lsls	r3, r3, #3
 801cdb4:	3204      	adds	r2, #4
 801cdb6:	4691      	mov	r9, r2
 801cdb8:	4698      	mov	r8, r3
 801cdba:	000a      	movs	r2, r1
 801cdbc:	464e      	mov	r6, r9
 801cdbe:	4442      	add	r2, r8
 801cdc0:	4699      	mov	r9, r3
 801cdc2:	4688      	mov	r8, r1
 801cdc4:	9208      	str	r2, [sp, #32]
 801cdc6:	900d      	str	r0, [sp, #52]	@ 0x34
 801cdc8:	4643      	mov	r3, r8
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	469b      	mov	fp, r3
 801cdce:	4643      	mov	r3, r8
 801cdd0:	685b      	ldr	r3, [r3, #4]
 801cdd2:	469a      	mov	sl, r3
 801cdd4:	683b      	ldr	r3, [r7, #0]
 801cdd6:	109c      	asrs	r4, r3, #2
 801cdd8:	464b      	mov	r3, r9
 801cdda:	58fb      	ldr	r3, [r7, r3]
 801cddc:	109a      	asrs	r2, r3, #2
 801cdde:	18a3      	adds	r3, r4, r2
 801cde0:	603b      	str	r3, [r7, #0]
 801cde2:	6833      	ldr	r3, [r6, #0]
 801cde4:	1aa4      	subs	r4, r4, r2
 801cde6:	109d      	asrs	r5, r3, #2
 801cde8:	464b      	mov	r3, r9
 801cdea:	58f3      	ldr	r3, [r6, r3]
 801cdec:	17e2      	asrs	r2, r4, #31
 801cdee:	109b      	asrs	r3, r3, #2
 801cdf0:	18e9      	adds	r1, r5, r3
 801cdf2:	6031      	str	r1, [r6, #0]
 801cdf4:	0011      	movs	r1, r2
 801cdf6:	465a      	mov	r2, fp
 801cdf8:	17d2      	asrs	r2, r2, #31
 801cdfa:	0010      	movs	r0, r2
 801cdfc:	4652      	mov	r2, sl
 801cdfe:	1aed      	subs	r5, r5, r3
 801ce00:	17eb      	asrs	r3, r5, #31
 801ce02:	17d2      	asrs	r2, r2, #31
 801ce04:	9307      	str	r3, [sp, #28]
 801ce06:	9204      	str	r2, [sp, #16]
 801ce08:	0003      	movs	r3, r0
 801ce0a:	465a      	mov	r2, fp
 801ce0c:	9006      	str	r0, [sp, #24]
 801ce0e:	0020      	movs	r0, r4
 801ce10:	9105      	str	r1, [sp, #20]
 801ce12:	f7e3 fbd5 	bl	80005c0 <__aeabi_lmul>
 801ce16:	2280      	movs	r2, #128	@ 0x80
 801ce18:	2300      	movs	r3, #0
 801ce1a:	0612      	lsls	r2, r2, #24
 801ce1c:	1880      	adds	r0, r0, r2
 801ce1e:	4159      	adcs	r1, r3
 801ce20:	2300      	movs	r3, #0
 801ce22:	9101      	str	r1, [sp, #4]
 801ce24:	9300      	str	r3, [sp, #0]
 801ce26:	4652      	mov	r2, sl
 801ce28:	9b04      	ldr	r3, [sp, #16]
 801ce2a:	0028      	movs	r0, r5
 801ce2c:	17e9      	asrs	r1, r5, #31
 801ce2e:	f7e3 fbc7 	bl	80005c0 <__aeabi_lmul>
 801ce32:	9a00      	ldr	r2, [sp, #0]
 801ce34:	9b01      	ldr	r3, [sp, #4]
 801ce36:	1880      	adds	r0, r0, r2
 801ce38:	4159      	adcs	r1, r3
 801ce3a:	2280      	movs	r2, #128	@ 0x80
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	0612      	lsls	r2, r2, #24
 801ce40:	1880      	adds	r0, r0, r2
 801ce42:	4159      	adcs	r1, r3
 801ce44:	464a      	mov	r2, r9
 801ce46:	004b      	lsls	r3, r1, #1
 801ce48:	50bb      	str	r3, [r7, r2]
 801ce4a:	4658      	mov	r0, fp
 801ce4c:	002a      	movs	r2, r5
 801ce4e:	9b07      	ldr	r3, [sp, #28]
 801ce50:	9906      	ldr	r1, [sp, #24]
 801ce52:	f7e3 fbb5 	bl	80005c0 <__aeabi_lmul>
 801ce56:	2280      	movs	r2, #128	@ 0x80
 801ce58:	2300      	movs	r3, #0
 801ce5a:	0612      	lsls	r2, r2, #24
 801ce5c:	1880      	adds	r0, r0, r2
 801ce5e:	4159      	adcs	r1, r3
 801ce60:	2000      	movs	r0, #0
 801ce62:	9103      	str	r1, [sp, #12]
 801ce64:	9002      	str	r0, [sp, #8]
 801ce66:	4652      	mov	r2, sl
 801ce68:	9b04      	ldr	r3, [sp, #16]
 801ce6a:	0020      	movs	r0, r4
 801ce6c:	9905      	ldr	r1, [sp, #20]
 801ce6e:	f7e3 fba7 	bl	80005c0 <__aeabi_lmul>
 801ce72:	9a02      	ldr	r2, [sp, #8]
 801ce74:	9b03      	ldr	r3, [sp, #12]
 801ce76:	1a12      	subs	r2, r2, r0
 801ce78:	418b      	sbcs	r3, r1
 801ce7a:	2080      	movs	r0, #128	@ 0x80
 801ce7c:	2100      	movs	r1, #0
 801ce7e:	0600      	lsls	r0, r0, #24
 801ce80:	1812      	adds	r2, r2, r0
 801ce82:	414b      	adcs	r3, r1
 801ce84:	464a      	mov	r2, r9
 801ce86:	005b      	lsls	r3, r3, #1
 801ce88:	50b3      	str	r3, [r6, r2]
 801ce8a:	2308      	movs	r3, #8
 801ce8c:	469c      	mov	ip, r3
 801ce8e:	9b08      	ldr	r3, [sp, #32]
 801ce90:	44e0      	add	r8, ip
 801ce92:	3708      	adds	r7, #8
 801ce94:	3608      	adds	r6, #8
 801ce96:	4598      	cmp	r8, r3
 801ce98:	d196      	bne.n	801cdc8 <arm_cfft_radix4by2_q31+0x3c>
 801ce9a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ce9c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ce9e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cea0:	2302      	movs	r3, #2
 801cea2:	003a      	movs	r2, r7
 801cea4:	0029      	movs	r1, r5
 801cea6:	0020      	movs	r0, r4
 801cea8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801ceaa:	f000 f957 	bl	801d15c <arm_radix4_butterfly_q31>
 801ceae:	46a4      	mov	ip, r4
 801ceb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ceb2:	2302      	movs	r3, #2
 801ceb4:	0088      	lsls	r0, r1, #2
 801ceb6:	4460      	add	r0, ip
 801ceb8:	003a      	movs	r2, r7
 801ceba:	0029      	movs	r1, r5
 801cebc:	f000 f94e 	bl	801d15c <arm_radix4_butterfly_q31>
 801cec0:	46a4      	mov	ip, r4
 801cec2:	0128      	lsls	r0, r5, #4
 801cec4:	4460      	add	r0, ip
 801cec6:	6833      	ldr	r3, [r6, #0]
 801cec8:	005b      	lsls	r3, r3, #1
 801ceca:	6033      	str	r3, [r6, #0]
 801cecc:	6873      	ldr	r3, [r6, #4]
 801cece:	005b      	lsls	r3, r3, #1
 801ced0:	6073      	str	r3, [r6, #4]
 801ced2:	68b3      	ldr	r3, [r6, #8]
 801ced4:	005b      	lsls	r3, r3, #1
 801ced6:	60b3      	str	r3, [r6, #8]
 801ced8:	68f3      	ldr	r3, [r6, #12]
 801ceda:	005b      	lsls	r3, r3, #1
 801cedc:	60f3      	str	r3, [r6, #12]
 801cede:	3610      	adds	r6, #16
 801cee0:	42b0      	cmp	r0, r6
 801cee2:	d1f0      	bne.n	801cec6 <arm_cfft_radix4by2_q31+0x13a>
 801cee4:	b00f      	add	sp, #60	@ 0x3c
 801cee6:	bc3c      	pop	{r2, r3, r4, r5}
 801cee8:	4690      	mov	r8, r2
 801ceea:	4699      	mov	r9, r3
 801ceec:	46a2      	mov	sl, r4
 801ceee:	46ab      	mov	fp, r5
 801cef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cef2:	2302      	movs	r3, #2
 801cef4:	2100      	movs	r1, #0
 801cef6:	0015      	movs	r5, r2
 801cef8:	f000 f930 	bl	801d15c <arm_radix4_butterfly_q31>
 801cefc:	46bc      	mov	ip, r7
 801cefe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf00:	002a      	movs	r2, r5
 801cf02:	0098      	lsls	r0, r3, #2
 801cf04:	4460      	add	r0, ip
 801cf06:	2302      	movs	r3, #2
 801cf08:	2100      	movs	r1, #0
 801cf0a:	f000 f927 	bl	801d15c <arm_radix4_butterfly_q31>
 801cf0e:	e7e9      	b.n	801cee4 <arm_cfft_radix4by2_q31+0x158>

0801cf10 <arm_cfft_radix4by2_inverse_q31>:
 801cf10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf12:	465f      	mov	r7, fp
 801cf14:	4656      	mov	r6, sl
 801cf16:	464d      	mov	r5, r9
 801cf18:	4644      	mov	r4, r8
 801cf1a:	000b      	movs	r3, r1
 801cf1c:	b4f0      	push	{r4, r5, r6, r7}
 801cf1e:	085b      	lsrs	r3, r3, #1
 801cf20:	b08f      	sub	sp, #60	@ 0x3c
 801cf22:	910a      	str	r1, [sp, #40]	@ 0x28
 801cf24:	0007      	movs	r7, r0
 801cf26:	9009      	str	r0, [sp, #36]	@ 0x24
 801cf28:	0011      	movs	r1, r2
 801cf2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cf2c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d100      	bne.n	801cf34 <arm_cfft_radix4by2_inverse_q31+0x24>
 801cf32:	e0a0      	b.n	801d076 <arm_cfft_radix4by2_inverse_q31+0x166>
 801cf34:	0002      	movs	r2, r0
 801cf36:	00db      	lsls	r3, r3, #3
 801cf38:	3204      	adds	r2, #4
 801cf3a:	4691      	mov	r9, r2
 801cf3c:	4698      	mov	r8, r3
 801cf3e:	000a      	movs	r2, r1
 801cf40:	464e      	mov	r6, r9
 801cf42:	4442      	add	r2, r8
 801cf44:	4699      	mov	r9, r3
 801cf46:	4688      	mov	r8, r1
 801cf48:	9208      	str	r2, [sp, #32]
 801cf4a:	900d      	str	r0, [sp, #52]	@ 0x34
 801cf4c:	4643      	mov	r3, r8
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	469b      	mov	fp, r3
 801cf52:	4643      	mov	r3, r8
 801cf54:	685b      	ldr	r3, [r3, #4]
 801cf56:	469a      	mov	sl, r3
 801cf58:	683b      	ldr	r3, [r7, #0]
 801cf5a:	109c      	asrs	r4, r3, #2
 801cf5c:	464b      	mov	r3, r9
 801cf5e:	58fb      	ldr	r3, [r7, r3]
 801cf60:	109a      	asrs	r2, r3, #2
 801cf62:	18a3      	adds	r3, r4, r2
 801cf64:	603b      	str	r3, [r7, #0]
 801cf66:	6833      	ldr	r3, [r6, #0]
 801cf68:	1aa4      	subs	r4, r4, r2
 801cf6a:	109d      	asrs	r5, r3, #2
 801cf6c:	464b      	mov	r3, r9
 801cf6e:	58f3      	ldr	r3, [r6, r3]
 801cf70:	17e2      	asrs	r2, r4, #31
 801cf72:	109b      	asrs	r3, r3, #2
 801cf74:	18e9      	adds	r1, r5, r3
 801cf76:	6031      	str	r1, [r6, #0]
 801cf78:	0011      	movs	r1, r2
 801cf7a:	465a      	mov	r2, fp
 801cf7c:	17d2      	asrs	r2, r2, #31
 801cf7e:	0010      	movs	r0, r2
 801cf80:	4652      	mov	r2, sl
 801cf82:	1aed      	subs	r5, r5, r3
 801cf84:	17eb      	asrs	r3, r5, #31
 801cf86:	17d2      	asrs	r2, r2, #31
 801cf88:	9307      	str	r3, [sp, #28]
 801cf8a:	9204      	str	r2, [sp, #16]
 801cf8c:	0003      	movs	r3, r0
 801cf8e:	465a      	mov	r2, fp
 801cf90:	9006      	str	r0, [sp, #24]
 801cf92:	0020      	movs	r0, r4
 801cf94:	9105      	str	r1, [sp, #20]
 801cf96:	f7e3 fb13 	bl	80005c0 <__aeabi_lmul>
 801cf9a:	2280      	movs	r2, #128	@ 0x80
 801cf9c:	2300      	movs	r3, #0
 801cf9e:	0612      	lsls	r2, r2, #24
 801cfa0:	1880      	adds	r0, r0, r2
 801cfa2:	4159      	adcs	r1, r3
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	9101      	str	r1, [sp, #4]
 801cfa8:	9300      	str	r3, [sp, #0]
 801cfaa:	4652      	mov	r2, sl
 801cfac:	9b04      	ldr	r3, [sp, #16]
 801cfae:	0028      	movs	r0, r5
 801cfb0:	17e9      	asrs	r1, r5, #31
 801cfb2:	f7e3 fb05 	bl	80005c0 <__aeabi_lmul>
 801cfb6:	9a00      	ldr	r2, [sp, #0]
 801cfb8:	9b01      	ldr	r3, [sp, #4]
 801cfba:	1a12      	subs	r2, r2, r0
 801cfbc:	418b      	sbcs	r3, r1
 801cfbe:	2080      	movs	r0, #128	@ 0x80
 801cfc0:	2100      	movs	r1, #0
 801cfc2:	0600      	lsls	r0, r0, #24
 801cfc4:	1812      	adds	r2, r2, r0
 801cfc6:	414b      	adcs	r3, r1
 801cfc8:	464a      	mov	r2, r9
 801cfca:	005b      	lsls	r3, r3, #1
 801cfcc:	50bb      	str	r3, [r7, r2]
 801cfce:	4658      	mov	r0, fp
 801cfd0:	002a      	movs	r2, r5
 801cfd2:	9b07      	ldr	r3, [sp, #28]
 801cfd4:	9906      	ldr	r1, [sp, #24]
 801cfd6:	f7e3 faf3 	bl	80005c0 <__aeabi_lmul>
 801cfda:	2280      	movs	r2, #128	@ 0x80
 801cfdc:	2300      	movs	r3, #0
 801cfde:	0612      	lsls	r2, r2, #24
 801cfe0:	1880      	adds	r0, r0, r2
 801cfe2:	4159      	adcs	r1, r3
 801cfe4:	2000      	movs	r0, #0
 801cfe6:	9103      	str	r1, [sp, #12]
 801cfe8:	9002      	str	r0, [sp, #8]
 801cfea:	4652      	mov	r2, sl
 801cfec:	9b04      	ldr	r3, [sp, #16]
 801cfee:	0020      	movs	r0, r4
 801cff0:	9905      	ldr	r1, [sp, #20]
 801cff2:	f7e3 fae5 	bl	80005c0 <__aeabi_lmul>
 801cff6:	9b02      	ldr	r3, [sp, #8]
 801cff8:	9c03      	ldr	r4, [sp, #12]
 801cffa:	18c0      	adds	r0, r0, r3
 801cffc:	4161      	adcs	r1, r4
 801cffe:	2380      	movs	r3, #128	@ 0x80
 801d000:	2400      	movs	r4, #0
 801d002:	061b      	lsls	r3, r3, #24
 801d004:	18c0      	adds	r0, r0, r3
 801d006:	4161      	adcs	r1, r4
 801d008:	464a      	mov	r2, r9
 801d00a:	004b      	lsls	r3, r1, #1
 801d00c:	50b3      	str	r3, [r6, r2]
 801d00e:	2308      	movs	r3, #8
 801d010:	469c      	mov	ip, r3
 801d012:	9b08      	ldr	r3, [sp, #32]
 801d014:	44e0      	add	r8, ip
 801d016:	3708      	adds	r7, #8
 801d018:	3608      	adds	r6, #8
 801d01a:	4598      	cmp	r8, r3
 801d01c:	d196      	bne.n	801cf4c <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d01e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d020:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d022:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d024:	2302      	movs	r3, #2
 801d026:	003a      	movs	r2, r7
 801d028:	0029      	movs	r1, r5
 801d02a:	0020      	movs	r0, r4
 801d02c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d02e:	f000 fb3b 	bl	801d6a8 <arm_radix4_butterfly_inverse_q31>
 801d032:	46a4      	mov	ip, r4
 801d034:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d036:	2302      	movs	r3, #2
 801d038:	0088      	lsls	r0, r1, #2
 801d03a:	4460      	add	r0, ip
 801d03c:	003a      	movs	r2, r7
 801d03e:	0029      	movs	r1, r5
 801d040:	f000 fb32 	bl	801d6a8 <arm_radix4_butterfly_inverse_q31>
 801d044:	46a4      	mov	ip, r4
 801d046:	0128      	lsls	r0, r5, #4
 801d048:	4460      	add	r0, ip
 801d04a:	6833      	ldr	r3, [r6, #0]
 801d04c:	005b      	lsls	r3, r3, #1
 801d04e:	6033      	str	r3, [r6, #0]
 801d050:	6873      	ldr	r3, [r6, #4]
 801d052:	005b      	lsls	r3, r3, #1
 801d054:	6073      	str	r3, [r6, #4]
 801d056:	68b3      	ldr	r3, [r6, #8]
 801d058:	005b      	lsls	r3, r3, #1
 801d05a:	60b3      	str	r3, [r6, #8]
 801d05c:	68f3      	ldr	r3, [r6, #12]
 801d05e:	005b      	lsls	r3, r3, #1
 801d060:	60f3      	str	r3, [r6, #12]
 801d062:	3610      	adds	r6, #16
 801d064:	42b0      	cmp	r0, r6
 801d066:	d1f0      	bne.n	801d04a <arm_cfft_radix4by2_inverse_q31+0x13a>
 801d068:	b00f      	add	sp, #60	@ 0x3c
 801d06a:	bc3c      	pop	{r2, r3, r4, r5}
 801d06c:	4690      	mov	r8, r2
 801d06e:	4699      	mov	r9, r3
 801d070:	46a2      	mov	sl, r4
 801d072:	46ab      	mov	fp, r5
 801d074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d076:	2302      	movs	r3, #2
 801d078:	2100      	movs	r1, #0
 801d07a:	0015      	movs	r5, r2
 801d07c:	f000 fb14 	bl	801d6a8 <arm_radix4_butterfly_inverse_q31>
 801d080:	46bc      	mov	ip, r7
 801d082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d084:	002a      	movs	r2, r5
 801d086:	0098      	lsls	r0, r3, #2
 801d088:	4460      	add	r0, ip
 801d08a:	2302      	movs	r3, #2
 801d08c:	2100      	movs	r1, #0
 801d08e:	f000 fb0b 	bl	801d6a8 <arm_radix4_butterfly_inverse_q31>
 801d092:	e7e9      	b.n	801d068 <arm_cfft_radix4by2_inverse_q31+0x158>

0801d094 <arm_cfft_q31>:
 801d094:	b570      	push	{r4, r5, r6, lr}
 801d096:	001e      	movs	r6, r3
 801d098:	2380      	movs	r3, #128	@ 0x80
 801d09a:	000d      	movs	r5, r1
 801d09c:	0004      	movs	r4, r0
 801d09e:	8801      	ldrh	r1, [r0, #0]
 801d0a0:	005b      	lsls	r3, r3, #1
 801d0a2:	2a01      	cmp	r2, #1
 801d0a4:	d028      	beq.n	801d0f8 <arm_cfft_q31+0x64>
 801d0a6:	4299      	cmp	r1, r3
 801d0a8:	d020      	beq.n	801d0ec <arm_cfft_q31+0x58>
 801d0aa:	d812      	bhi.n	801d0d2 <arm_cfft_q31+0x3e>
 801d0ac:	2920      	cmp	r1, #32
 801d0ae:	d004      	beq.n	801d0ba <arm_cfft_q31+0x26>
 801d0b0:	d949      	bls.n	801d146 <arm_cfft_q31+0xb2>
 801d0b2:	2940      	cmp	r1, #64	@ 0x40
 801d0b4:	d01a      	beq.n	801d0ec <arm_cfft_q31+0x58>
 801d0b6:	2980      	cmp	r1, #128	@ 0x80
 801d0b8:	d103      	bne.n	801d0c2 <arm_cfft_q31+0x2e>
 801d0ba:	6862      	ldr	r2, [r4, #4]
 801d0bc:	0028      	movs	r0, r5
 801d0be:	f7ff fe65 	bl	801cd8c <arm_cfft_radix4by2_q31>
 801d0c2:	2e00      	cmp	r6, #0
 801d0c4:	d004      	beq.n	801d0d0 <arm_cfft_q31+0x3c>
 801d0c6:	68a2      	ldr	r2, [r4, #8]
 801d0c8:	89a1      	ldrh	r1, [r4, #12]
 801d0ca:	0028      	movs	r0, r5
 801d0cc:	f7e3 f81c 	bl	8000108 <arm_bitreversal_32>
 801d0d0:	bd70      	pop	{r4, r5, r6, pc}
 801d0d2:	2380      	movs	r3, #128	@ 0x80
 801d0d4:	00db      	lsls	r3, r3, #3
 801d0d6:	4299      	cmp	r1, r3
 801d0d8:	d008      	beq.n	801d0ec <arm_cfft_q31+0x58>
 801d0da:	d92f      	bls.n	801d13c <arm_cfft_q31+0xa8>
 801d0dc:	2380      	movs	r3, #128	@ 0x80
 801d0de:	011b      	lsls	r3, r3, #4
 801d0e0:	4299      	cmp	r1, r3
 801d0e2:	d0ea      	beq.n	801d0ba <arm_cfft_q31+0x26>
 801d0e4:	2380      	movs	r3, #128	@ 0x80
 801d0e6:	015b      	lsls	r3, r3, #5
 801d0e8:	4299      	cmp	r1, r3
 801d0ea:	d1ea      	bne.n	801d0c2 <arm_cfft_q31+0x2e>
 801d0ec:	2301      	movs	r3, #1
 801d0ee:	6862      	ldr	r2, [r4, #4]
 801d0f0:	0028      	movs	r0, r5
 801d0f2:	f000 f833 	bl	801d15c <arm_radix4_butterfly_q31>
 801d0f6:	e7e4      	b.n	801d0c2 <arm_cfft_q31+0x2e>
 801d0f8:	4299      	cmp	r1, r3
 801d0fa:	d019      	beq.n	801d130 <arm_cfft_q31+0x9c>
 801d0fc:	d80b      	bhi.n	801d116 <arm_cfft_q31+0x82>
 801d0fe:	2920      	cmp	r1, #32
 801d100:	d004      	beq.n	801d10c <arm_cfft_q31+0x78>
 801d102:	d928      	bls.n	801d156 <arm_cfft_q31+0xc2>
 801d104:	2940      	cmp	r1, #64	@ 0x40
 801d106:	d013      	beq.n	801d130 <arm_cfft_q31+0x9c>
 801d108:	2980      	cmp	r1, #128	@ 0x80
 801d10a:	d1da      	bne.n	801d0c2 <arm_cfft_q31+0x2e>
 801d10c:	6862      	ldr	r2, [r4, #4]
 801d10e:	0028      	movs	r0, r5
 801d110:	f7ff fefe 	bl	801cf10 <arm_cfft_radix4by2_inverse_q31>
 801d114:	e7d5      	b.n	801d0c2 <arm_cfft_q31+0x2e>
 801d116:	2380      	movs	r3, #128	@ 0x80
 801d118:	00db      	lsls	r3, r3, #3
 801d11a:	4299      	cmp	r1, r3
 801d11c:	d008      	beq.n	801d130 <arm_cfft_q31+0x9c>
 801d11e:	d915      	bls.n	801d14c <arm_cfft_q31+0xb8>
 801d120:	2380      	movs	r3, #128	@ 0x80
 801d122:	011b      	lsls	r3, r3, #4
 801d124:	4299      	cmp	r1, r3
 801d126:	d0f1      	beq.n	801d10c <arm_cfft_q31+0x78>
 801d128:	2380      	movs	r3, #128	@ 0x80
 801d12a:	015b      	lsls	r3, r3, #5
 801d12c:	4299      	cmp	r1, r3
 801d12e:	d1c8      	bne.n	801d0c2 <arm_cfft_q31+0x2e>
 801d130:	2301      	movs	r3, #1
 801d132:	6862      	ldr	r2, [r4, #4]
 801d134:	0028      	movs	r0, r5
 801d136:	f000 fab7 	bl	801d6a8 <arm_radix4_butterfly_inverse_q31>
 801d13a:	e7c2      	b.n	801d0c2 <arm_cfft_q31+0x2e>
 801d13c:	2380      	movs	r3, #128	@ 0x80
 801d13e:	009b      	lsls	r3, r3, #2
 801d140:	4299      	cmp	r1, r3
 801d142:	d0ba      	beq.n	801d0ba <arm_cfft_q31+0x26>
 801d144:	e7bd      	b.n	801d0c2 <arm_cfft_q31+0x2e>
 801d146:	2910      	cmp	r1, #16
 801d148:	d1bb      	bne.n	801d0c2 <arm_cfft_q31+0x2e>
 801d14a:	e7cf      	b.n	801d0ec <arm_cfft_q31+0x58>
 801d14c:	2380      	movs	r3, #128	@ 0x80
 801d14e:	009b      	lsls	r3, r3, #2
 801d150:	4299      	cmp	r1, r3
 801d152:	d0db      	beq.n	801d10c <arm_cfft_q31+0x78>
 801d154:	e7b5      	b.n	801d0c2 <arm_cfft_q31+0x2e>
 801d156:	2910      	cmp	r1, #16
 801d158:	d1b3      	bne.n	801d0c2 <arm_cfft_q31+0x2e>
 801d15a:	e7e9      	b.n	801d130 <arm_cfft_q31+0x9c>

0801d15c <arm_radix4_butterfly_q31>:
 801d15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d15e:	464d      	mov	r5, r9
 801d160:	4644      	mov	r4, r8
 801d162:	465f      	mov	r7, fp
 801d164:	4656      	mov	r6, sl
 801d166:	469c      	mov	ip, r3
 801d168:	b4f0      	push	{r4, r5, r6, r7}
 801d16a:	b0a7      	sub	sp, #156	@ 0x9c
 801d16c:	9114      	str	r1, [sp, #80]	@ 0x50
 801d16e:	0889      	lsrs	r1, r1, #2
 801d170:	9310      	str	r3, [sp, #64]	@ 0x40
 801d172:	00cb      	lsls	r3, r1, #3
 801d174:	0015      	movs	r5, r2
 801d176:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d178:	18c2      	adds	r2, r0, r3
 801d17a:	000c      	movs	r4, r1
 801d17c:	469a      	mov	sl, r3
 801d17e:	9124      	str	r1, [sp, #144]	@ 0x90
 801d180:	18d1      	adds	r1, r2, r3
 801d182:	4663      	mov	r3, ip
 801d184:	468b      	mov	fp, r1
 801d186:	0119      	lsls	r1, r3, #4
 801d188:	910d      	str	r1, [sp, #52]	@ 0x34
 801d18a:	00d9      	lsls	r1, r3, #3
 801d18c:	005b      	lsls	r3, r3, #1
 801d18e:	4463      	add	r3, ip
 801d190:	910e      	str	r1, [sp, #56]	@ 0x38
 801d192:	00d9      	lsls	r1, r3, #3
 801d194:	465b      	mov	r3, fp
 801d196:	44da      	add	sl, fp
 801d198:	4690      	mov	r8, r2
 801d19a:	4683      	mov	fp, r0
 801d19c:	4699      	mov	r9, r3
 801d19e:	9022      	str	r0, [sp, #136]	@ 0x88
 801d1a0:	9025      	str	r0, [sp, #148]	@ 0x94
 801d1a2:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d1a4:	9502      	str	r5, [sp, #8]
 801d1a6:	9500      	str	r5, [sp, #0]
 801d1a8:	9501      	str	r5, [sp, #4]
 801d1aa:	9407      	str	r4, [sp, #28]
 801d1ac:	465b      	mov	r3, fp
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	4642      	mov	r2, r8
 801d1b2:	111c      	asrs	r4, r3, #4
 801d1b4:	464b      	mov	r3, r9
 801d1b6:	4658      	mov	r0, fp
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	6812      	ldr	r2, [r2, #0]
 801d1bc:	111b      	asrs	r3, r3, #4
 801d1be:	18e7      	adds	r7, r4, r3
 801d1c0:	1ae3      	subs	r3, r4, r3
 801d1c2:	1114      	asrs	r4, r2, #4
 801d1c4:	4652      	mov	r2, sl
 801d1c6:	6840      	ldr	r0, [r0, #4]
 801d1c8:	6812      	ldr	r2, [r2, #0]
 801d1ca:	1105      	asrs	r5, r0, #4
 801d1cc:	4648      	mov	r0, r9
 801d1ce:	9303      	str	r3, [sp, #12]
 801d1d0:	1113      	asrs	r3, r2, #4
 801d1d2:	18e2      	adds	r2, r4, r3
 801d1d4:	465c      	mov	r4, fp
 801d1d6:	6840      	ldr	r0, [r0, #4]
 801d1d8:	1103      	asrs	r3, r0, #4
 801d1da:	18ee      	adds	r6, r5, r3
 801d1dc:	1ae8      	subs	r0, r5, r3
 801d1de:	18bb      	adds	r3, r7, r2
 801d1e0:	6023      	str	r3, [r4, #0]
 801d1e2:	4644      	mov	r4, r8
 801d1e4:	6864      	ldr	r4, [r4, #4]
 801d1e6:	9004      	str	r0, [sp, #16]
 801d1e8:	1125      	asrs	r5, r4, #4
 801d1ea:	4654      	mov	r4, sl
 801d1ec:	6864      	ldr	r4, [r4, #4]
 801d1ee:	1123      	asrs	r3, r4, #4
 801d1f0:	465c      	mov	r4, fp
 801d1f2:	18eb      	adds	r3, r5, r3
 801d1f4:	18f1      	adds	r1, r6, r3
 801d1f6:	6061      	str	r1, [r4, #4]
 801d1f8:	4655      	mov	r5, sl
 801d1fa:	4644      	mov	r4, r8
 801d1fc:	686d      	ldr	r5, [r5, #4]
 801d1fe:	6864      	ldr	r4, [r4, #4]
 801d200:	1129      	asrs	r1, r5, #4
 801d202:	1124      	asrs	r4, r4, #4
 801d204:	1a64      	subs	r4, r4, r1
 801d206:	4641      	mov	r1, r8
 801d208:	6809      	ldr	r1, [r1, #0]
 801d20a:	9405      	str	r4, [sp, #20]
 801d20c:	1108      	asrs	r0, r1, #4
 801d20e:	4651      	mov	r1, sl
 801d210:	6809      	ldr	r1, [r1, #0]
 801d212:	1abc      	subs	r4, r7, r2
 801d214:	1109      	asrs	r1, r1, #4
 801d216:	1a41      	subs	r1, r0, r1
 801d218:	17e2      	asrs	r2, r4, #31
 801d21a:	9106      	str	r1, [sp, #24]
 801d21c:	0011      	movs	r1, r2
 801d21e:	9a01      	ldr	r2, [sp, #4]
 801d220:	9108      	str	r1, [sp, #32]
 801d222:	6817      	ldr	r7, [r2, #0]
 801d224:	17fd      	asrs	r5, r7, #31
 801d226:	0028      	movs	r0, r5
 801d228:	1af5      	subs	r5, r6, r3
 801d22a:	17ee      	asrs	r6, r5, #31
 801d22c:	960a      	str	r6, [sp, #40]	@ 0x28
 801d22e:	6856      	ldr	r6, [r2, #4]
 801d230:	9009      	str	r0, [sp, #36]	@ 0x24
 801d232:	17f3      	asrs	r3, r6, #31
 801d234:	003a      	movs	r2, r7
 801d236:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d238:	0003      	movs	r3, r0
 801d23a:	0020      	movs	r0, r4
 801d23c:	f7e3 f9c0 	bl	80005c0 <__aeabi_lmul>
 801d240:	0032      	movs	r2, r6
 801d242:	17f3      	asrs	r3, r6, #31
 801d244:	910c      	str	r1, [sp, #48]	@ 0x30
 801d246:	0028      	movs	r0, r5
 801d248:	17e9      	asrs	r1, r5, #31
 801d24a:	f7e3 f9b9 	bl	80005c0 <__aeabi_lmul>
 801d24e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d250:	002a      	movs	r2, r5
 801d252:	4684      	mov	ip, r0
 801d254:	4640      	mov	r0, r8
 801d256:	4461      	add	r1, ip
 801d258:	0049      	lsls	r1, r1, #1
 801d25a:	6001      	str	r1, [r0, #0]
 801d25c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d260:	0038      	movs	r0, r7
 801d262:	f7e3 f9ad 	bl	80005c0 <__aeabi_lmul>
 801d266:	0032      	movs	r2, r6
 801d268:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d26a:	000d      	movs	r5, r1
 801d26c:	0020      	movs	r0, r4
 801d26e:	9908      	ldr	r1, [sp, #32]
 801d270:	f7e3 f9a6 	bl	80005c0 <__aeabi_lmul>
 801d274:	4646      	mov	r6, r8
 801d276:	1a6d      	subs	r5, r5, r1
 801d278:	006d      	lsls	r5, r5, #1
 801d27a:	6075      	str	r5, [r6, #4]
 801d27c:	9903      	ldr	r1, [sp, #12]
 801d27e:	9d05      	ldr	r5, [sp, #20]
 801d280:	000c      	movs	r4, r1
 801d282:	46ac      	mov	ip, r5
 801d284:	4464      	add	r4, ip
 801d286:	17e6      	asrs	r6, r4, #31
 801d288:	0031      	movs	r1, r6
 801d28a:	9b00      	ldr	r3, [sp, #0]
 801d28c:	9804      	ldr	r0, [sp, #16]
 801d28e:	681e      	ldr	r6, [r3, #0]
 801d290:	17f7      	asrs	r7, r6, #31
 801d292:	9709      	str	r7, [sp, #36]	@ 0x24
 801d294:	9f06      	ldr	r7, [sp, #24]
 801d296:	0032      	movs	r2, r6
 801d298:	1bc7      	subs	r7, r0, r7
 801d29a:	17fd      	asrs	r5, r7, #31
 801d29c:	950a      	str	r5, [sp, #40]	@ 0x28
 801d29e:	685d      	ldr	r5, [r3, #4]
 801d2a0:	17f3      	asrs	r3, r6, #31
 801d2a2:	17e8      	asrs	r0, r5, #31
 801d2a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d2a6:	0020      	movs	r0, r4
 801d2a8:	9108      	str	r1, [sp, #32]
 801d2aa:	f7e3 f989 	bl	80005c0 <__aeabi_lmul>
 801d2ae:	002a      	movs	r2, r5
 801d2b0:	17eb      	asrs	r3, r5, #31
 801d2b2:	910c      	str	r1, [sp, #48]	@ 0x30
 801d2b4:	0038      	movs	r0, r7
 801d2b6:	17f9      	asrs	r1, r7, #31
 801d2b8:	f7e3 f982 	bl	80005c0 <__aeabi_lmul>
 801d2bc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d2be:	003a      	movs	r2, r7
 801d2c0:	4684      	mov	ip, r0
 801d2c2:	4648      	mov	r0, r9
 801d2c4:	4461      	add	r1, ip
 801d2c6:	0049      	lsls	r1, r1, #1
 801d2c8:	6001      	str	r1, [r0, #0]
 801d2ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d2cc:	0030      	movs	r0, r6
 801d2ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d2d0:	f7e3 f976 	bl	80005c0 <__aeabi_lmul>
 801d2d4:	002a      	movs	r2, r5
 801d2d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2d8:	000e      	movs	r6, r1
 801d2da:	0020      	movs	r0, r4
 801d2dc:	9908      	ldr	r1, [sp, #32]
 801d2de:	f7e3 f96f 	bl	80005c0 <__aeabi_lmul>
 801d2e2:	464c      	mov	r4, r9
 801d2e4:	9d05      	ldr	r5, [sp, #20]
 801d2e6:	1a76      	subs	r6, r6, r1
 801d2e8:	9903      	ldr	r1, [sp, #12]
 801d2ea:	0076      	lsls	r6, r6, #1
 801d2ec:	6066      	str	r6, [r4, #4]
 801d2ee:	1b4c      	subs	r4, r1, r5
 801d2f0:	9e06      	ldr	r6, [sp, #24]
 801d2f2:	17e1      	asrs	r1, r4, #31
 801d2f4:	9103      	str	r1, [sp, #12]
 801d2f6:	9902      	ldr	r1, [sp, #8]
 801d2f8:	46b4      	mov	ip, r6
 801d2fa:	680f      	ldr	r7, [r1, #0]
 801d2fc:	9804      	ldr	r0, [sp, #16]
 801d2fe:	17fd      	asrs	r5, r7, #31
 801d300:	002b      	movs	r3, r5
 801d302:	684e      	ldr	r6, [r1, #4]
 801d304:	4460      	add	r0, ip
 801d306:	0005      	movs	r5, r0
 801d308:	17c0      	asrs	r0, r0, #31
 801d30a:	9005      	str	r0, [sp, #20]
 801d30c:	17f0      	asrs	r0, r6, #31
 801d30e:	9006      	str	r0, [sp, #24]
 801d310:	003a      	movs	r2, r7
 801d312:	0020      	movs	r0, r4
 801d314:	17e1      	asrs	r1, r4, #31
 801d316:	9304      	str	r3, [sp, #16]
 801d318:	f7e3 f952 	bl	80005c0 <__aeabi_lmul>
 801d31c:	0032      	movs	r2, r6
 801d31e:	9108      	str	r1, [sp, #32]
 801d320:	17f3      	asrs	r3, r6, #31
 801d322:	0028      	movs	r0, r5
 801d324:	17e9      	asrs	r1, r5, #31
 801d326:	f7e3 f94b 	bl	80005c0 <__aeabi_lmul>
 801d32a:	9808      	ldr	r0, [sp, #32]
 801d32c:	002a      	movs	r2, r5
 801d32e:	4684      	mov	ip, r0
 801d330:	4650      	mov	r0, sl
 801d332:	4461      	add	r1, ip
 801d334:	0049      	lsls	r1, r1, #1
 801d336:	6001      	str	r1, [r0, #0]
 801d338:	9b05      	ldr	r3, [sp, #20]
 801d33a:	9904      	ldr	r1, [sp, #16]
 801d33c:	0038      	movs	r0, r7
 801d33e:	f7e3 f93f 	bl	80005c0 <__aeabi_lmul>
 801d342:	0020      	movs	r0, r4
 801d344:	2408      	movs	r4, #8
 801d346:	000d      	movs	r5, r1
 801d348:	0032      	movs	r2, r6
 801d34a:	9b06      	ldr	r3, [sp, #24]
 801d34c:	9903      	ldr	r1, [sp, #12]
 801d34e:	f7e3 f937 	bl	80005c0 <__aeabi_lmul>
 801d352:	46a4      	mov	ip, r4
 801d354:	4650      	mov	r0, sl
 801d356:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d358:	44e3      	add	fp, ip
 801d35a:	44e0      	add	r8, ip
 801d35c:	44e1      	add	r9, ip
 801d35e:	44e2      	add	sl, ip
 801d360:	46a4      	mov	ip, r4
 801d362:	1a6d      	subs	r5, r5, r1
 801d364:	006d      	lsls	r5, r5, #1
 801d366:	9a01      	ldr	r2, [sp, #4]
 801d368:	6045      	str	r5, [r0, #4]
 801d36a:	9807      	ldr	r0, [sp, #28]
 801d36c:	4462      	add	r2, ip
 801d36e:	3801      	subs	r0, #1
 801d370:	9201      	str	r2, [sp, #4]
 801d372:	9007      	str	r0, [sp, #28]
 801d374:	9b00      	ldr	r3, [sp, #0]
 801d376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d378:	9902      	ldr	r1, [sp, #8]
 801d37a:	4694      	mov	ip, r2
 801d37c:	4463      	add	r3, ip
 801d37e:	9300      	str	r3, [sp, #0]
 801d380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d382:	469c      	mov	ip, r3
 801d384:	4461      	add	r1, ip
 801d386:	9102      	str	r1, [sp, #8]
 801d388:	2800      	cmp	r0, #0
 801d38a:	d000      	beq.n	801d38e <arm_radix4_butterfly_q31+0x232>
 801d38c:	e70e      	b.n	801d1ac <arm_radix4_butterfly_q31+0x50>
 801d38e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d390:	009b      	lsls	r3, r3, #2
 801d392:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d394:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d396:	9320      	str	r3, [sp, #128]	@ 0x80
 801d398:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d39a:	2b04      	cmp	r3, #4
 801d39c:	d800      	bhi.n	801d3a0 <arm_radix4_butterfly_q31+0x244>
 801d39e:	e180      	b.n	801d6a2 <arm_radix4_butterfly_q31+0x546>
 801d3a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d3a2:	0893      	lsrs	r3, r2, #2
 801d3a4:	1e59      	subs	r1, r3, #1
 801d3a6:	9321      	str	r3, [sp, #132]	@ 0x84
 801d3a8:	00db      	lsls	r3, r3, #3
 801d3aa:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d3ac:	00d3      	lsls	r3, r2, #3
 801d3ae:	9300      	str	r3, [sp, #0]
 801d3b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d3b2:	911a      	str	r1, [sp, #104]	@ 0x68
 801d3b4:	00da      	lsls	r2, r3, #3
 801d3b6:	921e      	str	r2, [sp, #120]	@ 0x78
 801d3b8:	011a      	lsls	r2, r3, #4
 801d3ba:	921d      	str	r2, [sp, #116]	@ 0x74
 801d3bc:	001a      	movs	r2, r3
 801d3be:	4694      	mov	ip, r2
 801d3c0:	005b      	lsls	r3, r3, #1
 801d3c2:	4463      	add	r3, ip
 801d3c4:	00db      	lsls	r3, r3, #3
 801d3c6:	931c      	str	r3, [sp, #112]	@ 0x70
 801d3c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d3ca:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d3cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d3ce:	9318      	str	r3, [sp, #96]	@ 0x60
 801d3d0:	9319      	str	r3, [sp, #100]	@ 0x64
 801d3d2:	9316      	str	r3, [sp, #88]	@ 0x58
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	9315      	str	r3, [sp, #84]	@ 0x54
 801d3d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d3da:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d3dc:	681a      	ldr	r2, [r3, #0]
 801d3de:	685b      	ldr	r3, [r3, #4]
 801d3e0:	9205      	str	r2, [sp, #20]
 801d3e2:	9306      	str	r3, [sp, #24]
 801d3e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d3e6:	468c      	mov	ip, r1
 801d3e8:	681a      	ldr	r2, [r3, #0]
 801d3ea:	685b      	ldr	r3, [r3, #4]
 801d3ec:	9207      	str	r2, [sp, #28]
 801d3ee:	9308      	str	r3, [sp, #32]
 801d3f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d3f2:	681a      	ldr	r2, [r3, #0]
 801d3f4:	685b      	ldr	r3, [r3, #4]
 801d3f6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d3f8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d3fa:	930a      	str	r3, [sp, #40]	@ 0x28
 801d3fc:	0013      	movs	r3, r2
 801d3fe:	4463      	add	r3, ip
 801d400:	4698      	mov	r8, r3
 801d402:	0013      	movs	r3, r2
 801d404:	4442      	add	r2, r8
 801d406:	4691      	mov	r9, r2
 801d408:	001a      	movs	r2, r3
 801d40a:	444a      	add	r2, r9
 801d40c:	4692      	mov	sl, r2
 801d40e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d410:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d412:	4293      	cmp	r3, r2
 801d414:	d800      	bhi.n	801d418 <arm_radix4_butterfly_q31+0x2bc>
 801d416:	e0dd      	b.n	801d5d4 <arm_radix4_butterfly_q31+0x478>
 801d418:	4694      	mov	ip, r2
 801d41a:	468b      	mov	fp, r1
 801d41c:	4644      	mov	r4, r8
 801d41e:	4655      	mov	r5, sl
 801d420:	9b07      	ldr	r3, [sp, #28]
 801d422:	17db      	asrs	r3, r3, #31
 801d424:	930c      	str	r3, [sp, #48]	@ 0x30
 801d426:	9b08      	ldr	r3, [sp, #32]
 801d428:	17db      	asrs	r3, r3, #31
 801d42a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d42c:	9b05      	ldr	r3, [sp, #20]
 801d42e:	17db      	asrs	r3, r3, #31
 801d430:	930e      	str	r3, [sp, #56]	@ 0x38
 801d432:	9b06      	ldr	r3, [sp, #24]
 801d434:	17db      	asrs	r3, r3, #31
 801d436:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d43a:	17db      	asrs	r3, r3, #31
 801d43c:	9310      	str	r3, [sp, #64]	@ 0x40
 801d43e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d440:	17db      	asrs	r3, r3, #31
 801d442:	9311      	str	r3, [sp, #68]	@ 0x44
 801d444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d446:	4463      	add	r3, ip
 801d448:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d44a:	465b      	mov	r3, fp
 801d44c:	4659      	mov	r1, fp
 801d44e:	681a      	ldr	r2, [r3, #0]
 801d450:	464b      	mov	r3, r9
 801d452:	684f      	ldr	r7, [r1, #4]
 801d454:	4649      	mov	r1, r9
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	18d6      	adds	r6, r2, r3
 801d45a:	1ad3      	subs	r3, r2, r3
 801d45c:	9301      	str	r3, [sp, #4]
 801d45e:	684b      	ldr	r3, [r1, #4]
 801d460:	18f8      	adds	r0, r7, r3
 801d462:	1af9      	subs	r1, r7, r3
 801d464:	6827      	ldr	r7, [r4, #0]
 801d466:	9102      	str	r1, [sp, #8]
 801d468:	003a      	movs	r2, r7
 801d46a:	682f      	ldr	r7, [r5, #0]
 801d46c:	46bc      	mov	ip, r7
 801d46e:	465f      	mov	r7, fp
 801d470:	4462      	add	r2, ip
 801d472:	18b3      	adds	r3, r6, r2
 801d474:	109b      	asrs	r3, r3, #2
 801d476:	603b      	str	r3, [r7, #0]
 801d478:	6867      	ldr	r7, [r4, #4]
 801d47a:	1ab6      	subs	r6, r6, r2
 801d47c:	46b8      	mov	r8, r7
 801d47e:	686f      	ldr	r7, [r5, #4]
 801d480:	17f2      	asrs	r2, r6, #31
 801d482:	46bc      	mov	ip, r7
 801d484:	44e0      	add	r8, ip
 801d486:	4643      	mov	r3, r8
 801d488:	465f      	mov	r7, fp
 801d48a:	18c1      	adds	r1, r0, r3
 801d48c:	1089      	asrs	r1, r1, #2
 801d48e:	6079      	str	r1, [r7, #4]
 801d490:	9900      	ldr	r1, [sp, #0]
 801d492:	4690      	mov	r8, r2
 801d494:	468c      	mov	ip, r1
 801d496:	6867      	ldr	r7, [r4, #4]
 801d498:	6869      	ldr	r1, [r5, #4]
 801d49a:	44e3      	add	fp, ip
 801d49c:	1a7f      	subs	r7, r7, r1
 801d49e:	9703      	str	r7, [sp, #12]
 801d4a0:	6829      	ldr	r1, [r5, #0]
 801d4a2:	6827      	ldr	r7, [r4, #0]
 801d4a4:	1a7f      	subs	r7, r7, r1
 801d4a6:	9704      	str	r7, [sp, #16]
 801d4a8:	1ac7      	subs	r7, r0, r3
 801d4aa:	17fa      	asrs	r2, r7, #31
 801d4ac:	4692      	mov	sl, r2
 801d4ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4b0:	9a07      	ldr	r2, [sp, #28]
 801d4b2:	0030      	movs	r0, r6
 801d4b4:	4641      	mov	r1, r8
 801d4b6:	f7e3 f883 	bl	80005c0 <__aeabi_lmul>
 801d4ba:	9a08      	ldr	r2, [sp, #32]
 801d4bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d4be:	9112      	str	r1, [sp, #72]	@ 0x48
 801d4c0:	0038      	movs	r0, r7
 801d4c2:	4651      	mov	r1, sl
 801d4c4:	f7e3 f87c 	bl	80005c0 <__aeabi_lmul>
 801d4c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d4ca:	9a07      	ldr	r2, [sp, #28]
 801d4cc:	4684      	mov	ip, r0
 801d4ce:	4461      	add	r1, ip
 801d4d0:	1049      	asrs	r1, r1, #1
 801d4d2:	6021      	str	r1, [r4, #0]
 801d4d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4d6:	0038      	movs	r0, r7
 801d4d8:	4651      	mov	r1, sl
 801d4da:	f7e3 f871 	bl	80005c0 <__aeabi_lmul>
 801d4de:	9a08      	ldr	r2, [sp, #32]
 801d4e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d4e2:	000f      	movs	r7, r1
 801d4e4:	0030      	movs	r0, r6
 801d4e6:	4641      	mov	r1, r8
 801d4e8:	f7e3 f86a 	bl	80005c0 <__aeabi_lmul>
 801d4ec:	9b00      	ldr	r3, [sp, #0]
 801d4ee:	9a01      	ldr	r2, [sp, #4]
 801d4f0:	469c      	mov	ip, r3
 801d4f2:	9803      	ldr	r0, [sp, #12]
 801d4f4:	1a7f      	subs	r7, r7, r1
 801d4f6:	107f      	asrs	r7, r7, #1
 801d4f8:	6067      	str	r7, [r4, #4]
 801d4fa:	0016      	movs	r6, r2
 801d4fc:	4464      	add	r4, ip
 801d4fe:	4684      	mov	ip, r0
 801d500:	4466      	add	r6, ip
 801d502:	17f2      	asrs	r2, r6, #31
 801d504:	4690      	mov	r8, r2
 801d506:	9902      	ldr	r1, [sp, #8]
 801d508:	9f04      	ldr	r7, [sp, #16]
 801d50a:	0030      	movs	r0, r6
 801d50c:	1bcf      	subs	r7, r1, r7
 801d50e:	17fa      	asrs	r2, r7, #31
 801d510:	4692      	mov	sl, r2
 801d512:	4641      	mov	r1, r8
 801d514:	9a05      	ldr	r2, [sp, #20]
 801d516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d518:	f7e3 f852 	bl	80005c0 <__aeabi_lmul>
 801d51c:	9a06      	ldr	r2, [sp, #24]
 801d51e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d520:	9112      	str	r1, [sp, #72]	@ 0x48
 801d522:	0038      	movs	r0, r7
 801d524:	4651      	mov	r1, sl
 801d526:	f7e3 f84b 	bl	80005c0 <__aeabi_lmul>
 801d52a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d52c:	9a05      	ldr	r2, [sp, #20]
 801d52e:	4684      	mov	ip, r0
 801d530:	4648      	mov	r0, r9
 801d532:	4461      	add	r1, ip
 801d534:	1049      	asrs	r1, r1, #1
 801d536:	6001      	str	r1, [r0, #0]
 801d538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d53a:	0038      	movs	r0, r7
 801d53c:	4651      	mov	r1, sl
 801d53e:	f7e3 f83f 	bl	80005c0 <__aeabi_lmul>
 801d542:	9a06      	ldr	r2, [sp, #24]
 801d544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d546:	000f      	movs	r7, r1
 801d548:	0030      	movs	r0, r6
 801d54a:	4641      	mov	r1, r8
 801d54c:	f7e3 f838 	bl	80005c0 <__aeabi_lmul>
 801d550:	464e      	mov	r6, r9
 801d552:	9a00      	ldr	r2, [sp, #0]
 801d554:	9b01      	ldr	r3, [sp, #4]
 801d556:	4694      	mov	ip, r2
 801d558:	9803      	ldr	r0, [sp, #12]
 801d55a:	1a7f      	subs	r7, r7, r1
 801d55c:	107f      	asrs	r7, r7, #1
 801d55e:	6077      	str	r7, [r6, #4]
 801d560:	1a1e      	subs	r6, r3, r0
 801d562:	9b04      	ldr	r3, [sp, #16]
 801d564:	44e1      	add	r9, ip
 801d566:	469c      	mov	ip, r3
 801d568:	17f0      	asrs	r0, r6, #31
 801d56a:	4680      	mov	r8, r0
 801d56c:	9902      	ldr	r1, [sp, #8]
 801d56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d570:	4461      	add	r1, ip
 801d572:	17cb      	asrs	r3, r1, #31
 801d574:	000f      	movs	r7, r1
 801d576:	469a      	mov	sl, r3
 801d578:	0030      	movs	r0, r6
 801d57a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d57c:	4641      	mov	r1, r8
 801d57e:	f7e3 f81f 	bl	80005c0 <__aeabi_lmul>
 801d582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d584:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d586:	9101      	str	r1, [sp, #4]
 801d588:	0038      	movs	r0, r7
 801d58a:	4651      	mov	r1, sl
 801d58c:	f7e3 f818 	bl	80005c0 <__aeabi_lmul>
 801d590:	9801      	ldr	r0, [sp, #4]
 801d592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d594:	4684      	mov	ip, r0
 801d596:	4461      	add	r1, ip
 801d598:	1049      	asrs	r1, r1, #1
 801d59a:	6029      	str	r1, [r5, #0]
 801d59c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d59e:	0038      	movs	r0, r7
 801d5a0:	4651      	mov	r1, sl
 801d5a2:	f7e3 f80d 	bl	80005c0 <__aeabi_lmul>
 801d5a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d5a8:	000f      	movs	r7, r1
 801d5aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d5ac:	0030      	movs	r0, r6
 801d5ae:	4641      	mov	r1, r8
 801d5b0:	f7e3 f806 	bl	80005c0 <__aeabi_lmul>
 801d5b4:	1a7f      	subs	r7, r7, r1
 801d5b6:	107f      	asrs	r7, r7, #1
 801d5b8:	606f      	str	r7, [r5, #4]
 801d5ba:	9a00      	ldr	r2, [sp, #0]
 801d5bc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d5be:	4694      	mov	ip, r2
 801d5c0:	4465      	add	r5, ip
 801d5c2:	468c      	mov	ip, r1
 801d5c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d5c6:	0013      	movs	r3, r2
 801d5c8:	4462      	add	r2, ip
 801d5ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d5cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d5ce:	429a      	cmp	r2, r3
 801d5d0:	d900      	bls.n	801d5d4 <arm_radix4_butterfly_q31+0x478>
 801d5d2:	e73a      	b.n	801d44a <arm_radix4_butterfly_q31+0x2ee>
 801d5d4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d5d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d5d8:	468c      	mov	ip, r1
 801d5da:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d5dc:	4462      	add	r2, ip
 801d5de:	468c      	mov	ip, r1
 801d5e0:	9216      	str	r2, [sp, #88]	@ 0x58
 801d5e2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d5e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d5e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d5e8:	4462      	add	r2, ip
 801d5ea:	468c      	mov	ip, r1
 801d5ec:	9219      	str	r2, [sp, #100]	@ 0x64
 801d5ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d5f0:	3301      	adds	r3, #1
 801d5f2:	4462      	add	r2, ip
 801d5f4:	9218      	str	r2, [sp, #96]	@ 0x60
 801d5f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d5f8:	9315      	str	r3, [sp, #84]	@ 0x54
 801d5fa:	3208      	adds	r2, #8
 801d5fc:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d5fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d600:	4293      	cmp	r3, r2
 801d602:	d800      	bhi.n	801d606 <arm_radix4_butterfly_q31+0x4aa>
 801d604:	e6e8      	b.n	801d3d8 <arm_radix4_butterfly_q31+0x27c>
 801d606:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d608:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d60a:	009b      	lsls	r3, r3, #2
 801d60c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d60e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d610:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d612:	089b      	lsrs	r3, r3, #2
 801d614:	9320      	str	r3, [sp, #128]	@ 0x80
 801d616:	2b04      	cmp	r3, #4
 801d618:	d900      	bls.n	801d61c <arm_radix4_butterfly_q31+0x4c0>
 801d61a:	e6c1      	b.n	801d3a0 <arm_radix4_butterfly_q31+0x244>
 801d61c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d61e:	469a      	mov	sl, r3
 801d620:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d622:	691c      	ldr	r4, [r3, #16]
 801d624:	685a      	ldr	r2, [r3, #4]
 801d626:	46a1      	mov	r9, r4
 801d628:	4690      	mov	r8, r2
 801d62a:	6819      	ldr	r1, [r3, #0]
 801d62c:	689a      	ldr	r2, [r3, #8]
 801d62e:	699f      	ldr	r7, [r3, #24]
 801d630:	188d      	adds	r5, r1, r2
 801d632:	444d      	add	r5, r9
 801d634:	19ed      	adds	r5, r5, r7
 801d636:	69de      	ldr	r6, [r3, #28]
 801d638:	601d      	str	r5, [r3, #0]
 801d63a:	4645      	mov	r5, r8
 801d63c:	46b4      	mov	ip, r6
 801d63e:	68d8      	ldr	r0, [r3, #12]
 801d640:	695c      	ldr	r4, [r3, #20]
 801d642:	182d      	adds	r5, r5, r0
 801d644:	192d      	adds	r5, r5, r4
 801d646:	4465      	add	r5, ip
 801d648:	605d      	str	r5, [r3, #4]
 801d64a:	1a8d      	subs	r5, r1, r2
 801d64c:	444d      	add	r5, r9
 801d64e:	1bed      	subs	r5, r5, r7
 801d650:	609d      	str	r5, [r3, #8]
 801d652:	4645      	mov	r5, r8
 801d654:	1a2d      	subs	r5, r5, r0
 801d656:	192d      	adds	r5, r5, r4
 801d658:	1bad      	subs	r5, r5, r6
 801d65a:	464e      	mov	r6, r9
 801d65c:	60dd      	str	r5, [r3, #12]
 801d65e:	180d      	adds	r5, r1, r0
 801d660:	1bad      	subs	r5, r5, r6
 801d662:	4666      	mov	r6, ip
 801d664:	1bad      	subs	r5, r5, r6
 801d666:	611d      	str	r5, [r3, #16]
 801d668:	4645      	mov	r5, r8
 801d66a:	1aad      	subs	r5, r5, r2
 801d66c:	4442      	add	r2, r8
 801d66e:	1b12      	subs	r2, r2, r4
 801d670:	1bd2      	subs	r2, r2, r7
 801d672:	1a08      	subs	r0, r1, r0
 801d674:	61da      	str	r2, [r3, #28]
 801d676:	4649      	mov	r1, r9
 801d678:	2201      	movs	r2, #1
 801d67a:	1a41      	subs	r1, r0, r1
 801d67c:	4252      	negs	r2, r2
 801d67e:	4461      	add	r1, ip
 801d680:	4694      	mov	ip, r2
 801d682:	44e2      	add	sl, ip
 801d684:	4652      	mov	r2, sl
 801d686:	1b2d      	subs	r5, r5, r4
 801d688:	19ed      	adds	r5, r5, r7
 801d68a:	615d      	str	r5, [r3, #20]
 801d68c:	6199      	str	r1, [r3, #24]
 801d68e:	3320      	adds	r3, #32
 801d690:	2a00      	cmp	r2, #0
 801d692:	d1c6      	bne.n	801d622 <arm_radix4_butterfly_q31+0x4c6>
 801d694:	b027      	add	sp, #156	@ 0x9c
 801d696:	bc3c      	pop	{r2, r3, r4, r5}
 801d698:	4690      	mov	r8, r2
 801d69a:	4699      	mov	r9, r3
 801d69c:	46a2      	mov	sl, r4
 801d69e:	46ab      	mov	fp, r5
 801d6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6a2:	469a      	mov	sl, r3
 801d6a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d6a6:	e7bc      	b.n	801d622 <arm_radix4_butterfly_q31+0x4c6>

0801d6a8 <arm_radix4_butterfly_inverse_q31>:
 801d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6aa:	464d      	mov	r5, r9
 801d6ac:	4644      	mov	r4, r8
 801d6ae:	465f      	mov	r7, fp
 801d6b0:	4656      	mov	r6, sl
 801d6b2:	b4f0      	push	{r4, r5, r6, r7}
 801d6b4:	b0a7      	sub	sp, #156	@ 0x9c
 801d6b6:	469c      	mov	ip, r3
 801d6b8:	9114      	str	r1, [sp, #80]	@ 0x50
 801d6ba:	0889      	lsrs	r1, r1, #2
 801d6bc:	9310      	str	r3, [sp, #64]	@ 0x40
 801d6be:	00cb      	lsls	r3, r1, #3
 801d6c0:	0015      	movs	r5, r2
 801d6c2:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d6c4:	18c2      	adds	r2, r0, r3
 801d6c6:	000c      	movs	r4, r1
 801d6c8:	9124      	str	r1, [sp, #144]	@ 0x90
 801d6ca:	18d1      	adds	r1, r2, r3
 801d6cc:	468b      	mov	fp, r1
 801d6ce:	469a      	mov	sl, r3
 801d6d0:	4663      	mov	r3, ip
 801d6d2:	44da      	add	sl, fp
 801d6d4:	46d0      	mov	r8, sl
 801d6d6:	4681      	mov	r9, r0
 801d6d8:	4692      	mov	sl, r2
 801d6da:	0119      	lsls	r1, r3, #4
 801d6dc:	910d      	str	r1, [sp, #52]	@ 0x34
 801d6de:	00d9      	lsls	r1, r3, #3
 801d6e0:	005b      	lsls	r3, r3, #1
 801d6e2:	4463      	add	r3, ip
 801d6e4:	910e      	str	r1, [sp, #56]	@ 0x38
 801d6e6:	00d9      	lsls	r1, r3, #3
 801d6e8:	9022      	str	r0, [sp, #136]	@ 0x88
 801d6ea:	9025      	str	r0, [sp, #148]	@ 0x94
 801d6ec:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d6ee:	9502      	str	r5, [sp, #8]
 801d6f0:	9500      	str	r5, [sp, #0]
 801d6f2:	9501      	str	r5, [sp, #4]
 801d6f4:	9409      	str	r4, [sp, #36]	@ 0x24
 801d6f6:	464b      	mov	r3, r9
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	4652      	mov	r2, sl
 801d6fc:	111c      	asrs	r4, r3, #4
 801d6fe:	465b      	mov	r3, fp
 801d700:	4648      	mov	r0, r9
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	6812      	ldr	r2, [r2, #0]
 801d706:	6840      	ldr	r0, [r0, #4]
 801d708:	111b      	asrs	r3, r3, #4
 801d70a:	18e7      	adds	r7, r4, r3
 801d70c:	1ae3      	subs	r3, r4, r3
 801d70e:	1114      	asrs	r4, r2, #4
 801d710:	4642      	mov	r2, r8
 801d712:	1105      	asrs	r5, r0, #4
 801d714:	4658      	mov	r0, fp
 801d716:	6812      	ldr	r2, [r2, #0]
 801d718:	6840      	ldr	r0, [r0, #4]
 801d71a:	9303      	str	r3, [sp, #12]
 801d71c:	1113      	asrs	r3, r2, #4
 801d71e:	18e2      	adds	r2, r4, r3
 801d720:	1103      	asrs	r3, r0, #4
 801d722:	18ee      	adds	r6, r5, r3
 801d724:	1ae8      	subs	r0, r5, r3
 801d726:	464d      	mov	r5, r9
 801d728:	18bb      	adds	r3, r7, r2
 801d72a:	602b      	str	r3, [r5, #0]
 801d72c:	4641      	mov	r1, r8
 801d72e:	4655      	mov	r5, sl
 801d730:	6849      	ldr	r1, [r1, #4]
 801d732:	686d      	ldr	r5, [r5, #4]
 801d734:	110b      	asrs	r3, r1, #4
 801d736:	112d      	asrs	r5, r5, #4
 801d738:	18eb      	adds	r3, r5, r3
 801d73a:	464d      	mov	r5, r9
 801d73c:	18f1      	adds	r1, r6, r3
 801d73e:	6069      	str	r1, [r5, #4]
 801d740:	4655      	mov	r5, sl
 801d742:	686d      	ldr	r5, [r5, #4]
 801d744:	9004      	str	r0, [sp, #16]
 801d746:	112c      	asrs	r4, r5, #4
 801d748:	4645      	mov	r5, r8
 801d74a:	686d      	ldr	r5, [r5, #4]
 801d74c:	1129      	asrs	r1, r5, #4
 801d74e:	1a65      	subs	r5, r4, r1
 801d750:	4651      	mov	r1, sl
 801d752:	6809      	ldr	r1, [r1, #0]
 801d754:	1abc      	subs	r4, r7, r2
 801d756:	1108      	asrs	r0, r1, #4
 801d758:	4641      	mov	r1, r8
 801d75a:	17e2      	asrs	r2, r4, #31
 801d75c:	6809      	ldr	r1, [r1, #0]
 801d75e:	9207      	str	r2, [sp, #28]
 801d760:	9a01      	ldr	r2, [sp, #4]
 801d762:	1109      	asrs	r1, r1, #4
 801d764:	6817      	ldr	r7, [r2, #0]
 801d766:	1a41      	subs	r1, r0, r1
 801d768:	9106      	str	r1, [sp, #24]
 801d76a:	0039      	movs	r1, r7
 801d76c:	17ff      	asrs	r7, r7, #31
 801d76e:	0038      	movs	r0, r7
 801d770:	9505      	str	r5, [sp, #20]
 801d772:	1af5      	subs	r5, r6, r3
 801d774:	17ef      	asrs	r7, r5, #31
 801d776:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d778:	6857      	ldr	r7, [r2, #4]
 801d77a:	0003      	movs	r3, r0
 801d77c:	17fe      	asrs	r6, r7, #31
 801d77e:	000a      	movs	r2, r1
 801d780:	9108      	str	r1, [sp, #32]
 801d782:	900a      	str	r0, [sp, #40]	@ 0x28
 801d784:	17e1      	asrs	r1, r4, #31
 801d786:	0020      	movs	r0, r4
 801d788:	960c      	str	r6, [sp, #48]	@ 0x30
 801d78a:	f7e2 ff19 	bl	80005c0 <__aeabi_lmul>
 801d78e:	003a      	movs	r2, r7
 801d790:	17fb      	asrs	r3, r7, #31
 801d792:	000e      	movs	r6, r1
 801d794:	0028      	movs	r0, r5
 801d796:	17e9      	asrs	r1, r5, #31
 801d798:	f7e2 ff12 	bl	80005c0 <__aeabi_lmul>
 801d79c:	4653      	mov	r3, sl
 801d79e:	1a76      	subs	r6, r6, r1
 801d7a0:	0076      	lsls	r6, r6, #1
 801d7a2:	601e      	str	r6, [r3, #0]
 801d7a4:	002a      	movs	r2, r5
 801d7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d7a8:	9808      	ldr	r0, [sp, #32]
 801d7aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d7ac:	f7e2 ff08 	bl	80005c0 <__aeabi_lmul>
 801d7b0:	003a      	movs	r2, r7
 801d7b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d7b4:	000d      	movs	r5, r1
 801d7b6:	0020      	movs	r0, r4
 801d7b8:	9907      	ldr	r1, [sp, #28]
 801d7ba:	f7e2 ff01 	bl	80005c0 <__aeabi_lmul>
 801d7be:	4657      	mov	r7, sl
 801d7c0:	186d      	adds	r5, r5, r1
 801d7c2:	006d      	lsls	r5, r5, #1
 801d7c4:	607d      	str	r5, [r7, #4]
 801d7c6:	9b03      	ldr	r3, [sp, #12]
 801d7c8:	9e06      	ldr	r6, [sp, #24]
 801d7ca:	9d05      	ldr	r5, [sp, #20]
 801d7cc:	46b4      	mov	ip, r6
 801d7ce:	1b5d      	subs	r5, r3, r5
 801d7d0:	9b00      	ldr	r3, [sp, #0]
 801d7d2:	17ef      	asrs	r7, r5, #31
 801d7d4:	0039      	movs	r1, r7
 801d7d6:	681f      	ldr	r7, [r3, #0]
 801d7d8:	17fc      	asrs	r4, r7, #31
 801d7da:	0020      	movs	r0, r4
 801d7dc:	9c04      	ldr	r4, [sp, #16]
 801d7de:	4464      	add	r4, ip
 801d7e0:	17e6      	asrs	r6, r4, #31
 801d7e2:	9407      	str	r4, [sp, #28]
 801d7e4:	9608      	str	r6, [sp, #32]
 801d7e6:	685e      	ldr	r6, [r3, #4]
 801d7e8:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d7ea:	17f2      	asrs	r2, r6, #31
 801d7ec:	0003      	movs	r3, r0
 801d7ee:	920c      	str	r2, [sp, #48]	@ 0x30
 801d7f0:	0028      	movs	r0, r5
 801d7f2:	003a      	movs	r2, r7
 801d7f4:	910a      	str	r1, [sp, #40]	@ 0x28
 801d7f6:	f7e2 fee3 	bl	80005c0 <__aeabi_lmul>
 801d7fa:	0032      	movs	r2, r6
 801d7fc:	17f3      	asrs	r3, r6, #31
 801d7fe:	9807      	ldr	r0, [sp, #28]
 801d800:	000c      	movs	r4, r1
 801d802:	9908      	ldr	r1, [sp, #32]
 801d804:	f7e2 fedc 	bl	80005c0 <__aeabi_lmul>
 801d808:	4658      	mov	r0, fp
 801d80a:	1a64      	subs	r4, r4, r1
 801d80c:	0064      	lsls	r4, r4, #1
 801d80e:	9a07      	ldr	r2, [sp, #28]
 801d810:	6004      	str	r4, [r0, #0]
 801d812:	9b08      	ldr	r3, [sp, #32]
 801d814:	0038      	movs	r0, r7
 801d816:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d818:	f7e2 fed2 	bl	80005c0 <__aeabi_lmul>
 801d81c:	0032      	movs	r2, r6
 801d81e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d820:	000c      	movs	r4, r1
 801d822:	0028      	movs	r0, r5
 801d824:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d826:	f7e2 fecb 	bl	80005c0 <__aeabi_lmul>
 801d82a:	9d05      	ldr	r5, [sp, #20]
 801d82c:	465f      	mov	r7, fp
 801d82e:	46ac      	mov	ip, r5
 801d830:	1864      	adds	r4, r4, r1
 801d832:	9903      	ldr	r1, [sp, #12]
 801d834:	0064      	lsls	r4, r4, #1
 801d836:	4461      	add	r1, ip
 801d838:	607c      	str	r4, [r7, #4]
 801d83a:	000c      	movs	r4, r1
 801d83c:	17c9      	asrs	r1, r1, #31
 801d83e:	9105      	str	r1, [sp, #20]
 801d840:	9902      	ldr	r1, [sp, #8]
 801d842:	9804      	ldr	r0, [sp, #16]
 801d844:	680d      	ldr	r5, [r1, #0]
 801d846:	9e06      	ldr	r6, [sp, #24]
 801d848:	002b      	movs	r3, r5
 801d84a:	17ed      	asrs	r5, r5, #31
 801d84c:	684f      	ldr	r7, [r1, #4]
 801d84e:	9503      	str	r5, [sp, #12]
 801d850:	1b85      	subs	r5, r0, r6
 801d852:	17e8      	asrs	r0, r5, #31
 801d854:	001a      	movs	r2, r3
 801d856:	9006      	str	r0, [sp, #24]
 801d858:	17fe      	asrs	r6, r7, #31
 801d85a:	9304      	str	r3, [sp, #16]
 801d85c:	0020      	movs	r0, r4
 801d85e:	9b03      	ldr	r3, [sp, #12]
 801d860:	17e1      	asrs	r1, r4, #31
 801d862:	9607      	str	r6, [sp, #28]
 801d864:	f7e2 feac 	bl	80005c0 <__aeabi_lmul>
 801d868:	003a      	movs	r2, r7
 801d86a:	000e      	movs	r6, r1
 801d86c:	17fb      	asrs	r3, r7, #31
 801d86e:	0028      	movs	r0, r5
 801d870:	17e9      	asrs	r1, r5, #31
 801d872:	f7e2 fea5 	bl	80005c0 <__aeabi_lmul>
 801d876:	4640      	mov	r0, r8
 801d878:	1a76      	subs	r6, r6, r1
 801d87a:	0076      	lsls	r6, r6, #1
 801d87c:	002a      	movs	r2, r5
 801d87e:	9b06      	ldr	r3, [sp, #24]
 801d880:	6006      	str	r6, [r0, #0]
 801d882:	9903      	ldr	r1, [sp, #12]
 801d884:	9804      	ldr	r0, [sp, #16]
 801d886:	f7e2 fe9b 	bl	80005c0 <__aeabi_lmul>
 801d88a:	0020      	movs	r0, r4
 801d88c:	2408      	movs	r4, #8
 801d88e:	9b07      	ldr	r3, [sp, #28]
 801d890:	000d      	movs	r5, r1
 801d892:	003a      	movs	r2, r7
 801d894:	9905      	ldr	r1, [sp, #20]
 801d896:	f7e2 fe93 	bl	80005c0 <__aeabi_lmul>
 801d89a:	4640      	mov	r0, r8
 801d89c:	46a4      	mov	ip, r4
 801d89e:	186d      	adds	r5, r5, r1
 801d8a0:	006d      	lsls	r5, r5, #1
 801d8a2:	6045      	str	r5, [r0, #4]
 801d8a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d8a6:	44e1      	add	r9, ip
 801d8a8:	3801      	subs	r0, #1
 801d8aa:	9009      	str	r0, [sp, #36]	@ 0x24
 801d8ac:	9a01      	ldr	r2, [sp, #4]
 801d8ae:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d8b0:	44e2      	add	sl, ip
 801d8b2:	44e3      	add	fp, ip
 801d8b4:	44e0      	add	r8, ip
 801d8b6:	46a4      	mov	ip, r4
 801d8b8:	4462      	add	r2, ip
 801d8ba:	9201      	str	r2, [sp, #4]
 801d8bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8be:	9b00      	ldr	r3, [sp, #0]
 801d8c0:	4694      	mov	ip, r2
 801d8c2:	4463      	add	r3, ip
 801d8c4:	9300      	str	r3, [sp, #0]
 801d8c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d8c8:	9902      	ldr	r1, [sp, #8]
 801d8ca:	469c      	mov	ip, r3
 801d8cc:	4461      	add	r1, ip
 801d8ce:	9102      	str	r1, [sp, #8]
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	d000      	beq.n	801d8d6 <arm_radix4_butterfly_inverse_q31+0x22e>
 801d8d4:	e70f      	b.n	801d6f6 <arm_radix4_butterfly_inverse_q31+0x4e>
 801d8d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d8d8:	009b      	lsls	r3, r3, #2
 801d8da:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d8dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d8de:	9320      	str	r3, [sp, #128]	@ 0x80
 801d8e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d8e2:	2b04      	cmp	r3, #4
 801d8e4:	d800      	bhi.n	801d8e8 <arm_radix4_butterfly_inverse_q31+0x240>
 801d8e6:	e17c      	b.n	801dbe2 <arm_radix4_butterfly_inverse_q31+0x53a>
 801d8e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d8ea:	0893      	lsrs	r3, r2, #2
 801d8ec:	1e59      	subs	r1, r3, #1
 801d8ee:	9321      	str	r3, [sp, #132]	@ 0x84
 801d8f0:	00db      	lsls	r3, r3, #3
 801d8f2:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d8f4:	00d3      	lsls	r3, r2, #3
 801d8f6:	9300      	str	r3, [sp, #0]
 801d8f8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d8fa:	911a      	str	r1, [sp, #104]	@ 0x68
 801d8fc:	00da      	lsls	r2, r3, #3
 801d8fe:	921e      	str	r2, [sp, #120]	@ 0x78
 801d900:	011a      	lsls	r2, r3, #4
 801d902:	921d      	str	r2, [sp, #116]	@ 0x74
 801d904:	001a      	movs	r2, r3
 801d906:	4694      	mov	ip, r2
 801d908:	005b      	lsls	r3, r3, #1
 801d90a:	4463      	add	r3, ip
 801d90c:	00db      	lsls	r3, r3, #3
 801d90e:	931c      	str	r3, [sp, #112]	@ 0x70
 801d910:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d912:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d916:	9318      	str	r3, [sp, #96]	@ 0x60
 801d918:	9319      	str	r3, [sp, #100]	@ 0x64
 801d91a:	9316      	str	r3, [sp, #88]	@ 0x58
 801d91c:	2300      	movs	r3, #0
 801d91e:	9315      	str	r3, [sp, #84]	@ 0x54
 801d920:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d922:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d924:	681a      	ldr	r2, [r3, #0]
 801d926:	685b      	ldr	r3, [r3, #4]
 801d928:	9205      	str	r2, [sp, #20]
 801d92a:	9306      	str	r3, [sp, #24]
 801d92c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d92e:	468c      	mov	ip, r1
 801d930:	681a      	ldr	r2, [r3, #0]
 801d932:	685b      	ldr	r3, [r3, #4]
 801d934:	9207      	str	r2, [sp, #28]
 801d936:	9308      	str	r3, [sp, #32]
 801d938:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d93a:	681a      	ldr	r2, [r3, #0]
 801d93c:	685b      	ldr	r3, [r3, #4]
 801d93e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d940:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d942:	930a      	str	r3, [sp, #40]	@ 0x28
 801d944:	0013      	movs	r3, r2
 801d946:	4463      	add	r3, ip
 801d948:	4698      	mov	r8, r3
 801d94a:	0013      	movs	r3, r2
 801d94c:	4442      	add	r2, r8
 801d94e:	4691      	mov	r9, r2
 801d950:	001a      	movs	r2, r3
 801d952:	444a      	add	r2, r9
 801d954:	4692      	mov	sl, r2
 801d956:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d958:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d95a:	4293      	cmp	r3, r2
 801d95c:	d800      	bhi.n	801d960 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801d95e:	e0d9      	b.n	801db14 <arm_radix4_butterfly_inverse_q31+0x46c>
 801d960:	4694      	mov	ip, r2
 801d962:	4644      	mov	r4, r8
 801d964:	4655      	mov	r5, sl
 801d966:	4688      	mov	r8, r1
 801d968:	9b07      	ldr	r3, [sp, #28]
 801d96a:	17db      	asrs	r3, r3, #31
 801d96c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d96e:	9b08      	ldr	r3, [sp, #32]
 801d970:	17db      	asrs	r3, r3, #31
 801d972:	930d      	str	r3, [sp, #52]	@ 0x34
 801d974:	9b05      	ldr	r3, [sp, #20]
 801d976:	17db      	asrs	r3, r3, #31
 801d978:	930e      	str	r3, [sp, #56]	@ 0x38
 801d97a:	9b06      	ldr	r3, [sp, #24]
 801d97c:	17db      	asrs	r3, r3, #31
 801d97e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d982:	17db      	asrs	r3, r3, #31
 801d984:	9310      	str	r3, [sp, #64]	@ 0x40
 801d986:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d988:	17db      	asrs	r3, r3, #31
 801d98a:	9311      	str	r3, [sp, #68]	@ 0x44
 801d98c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d98e:	4463      	add	r3, ip
 801d990:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d992:	4643      	mov	r3, r8
 801d994:	4641      	mov	r1, r8
 801d996:	681a      	ldr	r2, [r3, #0]
 801d998:	464b      	mov	r3, r9
 801d99a:	684f      	ldr	r7, [r1, #4]
 801d99c:	4649      	mov	r1, r9
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	18d6      	adds	r6, r2, r3
 801d9a2:	1ad3      	subs	r3, r2, r3
 801d9a4:	9301      	str	r3, [sp, #4]
 801d9a6:	684b      	ldr	r3, [r1, #4]
 801d9a8:	1af9      	subs	r1, r7, r3
 801d9aa:	9102      	str	r1, [sp, #8]
 801d9ac:	6829      	ldr	r1, [r5, #0]
 801d9ae:	18f8      	adds	r0, r7, r3
 801d9b0:	468c      	mov	ip, r1
 801d9b2:	6827      	ldr	r7, [r4, #0]
 801d9b4:	4467      	add	r7, ip
 801d9b6:	003a      	movs	r2, r7
 801d9b8:	19f3      	adds	r3, r6, r7
 801d9ba:	4647      	mov	r7, r8
 801d9bc:	109b      	asrs	r3, r3, #2
 801d9be:	603b      	str	r3, [r7, #0]
 801d9c0:	6869      	ldr	r1, [r5, #4]
 801d9c2:	6867      	ldr	r7, [r4, #4]
 801d9c4:	468c      	mov	ip, r1
 801d9c6:	4467      	add	r7, ip
 801d9c8:	003b      	movs	r3, r7
 801d9ca:	19c1      	adds	r1, r0, r7
 801d9cc:	4647      	mov	r7, r8
 801d9ce:	1ab6      	subs	r6, r6, r2
 801d9d0:	1089      	asrs	r1, r1, #2
 801d9d2:	6079      	str	r1, [r7, #4]
 801d9d4:	17f2      	asrs	r2, r6, #31
 801d9d6:	9900      	ldr	r1, [sp, #0]
 801d9d8:	4692      	mov	sl, r2
 801d9da:	468c      	mov	ip, r1
 801d9dc:	6867      	ldr	r7, [r4, #4]
 801d9de:	6869      	ldr	r1, [r5, #4]
 801d9e0:	44e0      	add	r8, ip
 801d9e2:	1a7f      	subs	r7, r7, r1
 801d9e4:	9703      	str	r7, [sp, #12]
 801d9e6:	6821      	ldr	r1, [r4, #0]
 801d9e8:	682f      	ldr	r7, [r5, #0]
 801d9ea:	1bc9      	subs	r1, r1, r7
 801d9ec:	1ac7      	subs	r7, r0, r3
 801d9ee:	17fa      	asrs	r2, r7, #31
 801d9f0:	4693      	mov	fp, r2
 801d9f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d9f4:	9a07      	ldr	r2, [sp, #28]
 801d9f6:	9104      	str	r1, [sp, #16]
 801d9f8:	0030      	movs	r0, r6
 801d9fa:	4651      	mov	r1, sl
 801d9fc:	f7e2 fde0 	bl	80005c0 <__aeabi_lmul>
 801da00:	9a08      	ldr	r2, [sp, #32]
 801da02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da04:	9112      	str	r1, [sp, #72]	@ 0x48
 801da06:	0038      	movs	r0, r7
 801da08:	4659      	mov	r1, fp
 801da0a:	f7e2 fdd9 	bl	80005c0 <__aeabi_lmul>
 801da0e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801da10:	9a07      	ldr	r2, [sp, #28]
 801da12:	1a41      	subs	r1, r0, r1
 801da14:	1049      	asrs	r1, r1, #1
 801da16:	6021      	str	r1, [r4, #0]
 801da18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da1a:	0038      	movs	r0, r7
 801da1c:	4659      	mov	r1, fp
 801da1e:	f7e2 fdcf 	bl	80005c0 <__aeabi_lmul>
 801da22:	9a08      	ldr	r2, [sp, #32]
 801da24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da26:	000f      	movs	r7, r1
 801da28:	0030      	movs	r0, r6
 801da2a:	4651      	mov	r1, sl
 801da2c:	f7e2 fdc8 	bl	80005c0 <__aeabi_lmul>
 801da30:	9b00      	ldr	r3, [sp, #0]
 801da32:	187f      	adds	r7, r7, r1
 801da34:	469c      	mov	ip, r3
 801da36:	107f      	asrs	r7, r7, #1
 801da38:	6067      	str	r7, [r4, #4]
 801da3a:	9a01      	ldr	r2, [sp, #4]
 801da3c:	9f03      	ldr	r7, [sp, #12]
 801da3e:	9802      	ldr	r0, [sp, #8]
 801da40:	1bd7      	subs	r7, r2, r7
 801da42:	17fe      	asrs	r6, r7, #31
 801da44:	0031      	movs	r1, r6
 801da46:	9e04      	ldr	r6, [sp, #16]
 801da48:	4682      	mov	sl, r0
 801da4a:	4464      	add	r4, ip
 801da4c:	46b4      	mov	ip, r6
 801da4e:	44e2      	add	sl, ip
 801da50:	4652      	mov	r2, sl
 801da52:	17d2      	asrs	r2, r2, #31
 801da54:	4693      	mov	fp, r2
 801da56:	0038      	movs	r0, r7
 801da58:	9a05      	ldr	r2, [sp, #20]
 801da5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da5c:	9112      	str	r1, [sp, #72]	@ 0x48
 801da5e:	f7e2 fdaf 	bl	80005c0 <__aeabi_lmul>
 801da62:	9a06      	ldr	r2, [sp, #24]
 801da64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da66:	000e      	movs	r6, r1
 801da68:	4650      	mov	r0, sl
 801da6a:	4659      	mov	r1, fp
 801da6c:	f7e2 fda8 	bl	80005c0 <__aeabi_lmul>
 801da70:	4648      	mov	r0, r9
 801da72:	1a76      	subs	r6, r6, r1
 801da74:	1076      	asrs	r6, r6, #1
 801da76:	6006      	str	r6, [r0, #0]
 801da78:	9a05      	ldr	r2, [sp, #20]
 801da7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da7c:	4650      	mov	r0, sl
 801da7e:	4659      	mov	r1, fp
 801da80:	f7e2 fd9e 	bl	80005c0 <__aeabi_lmul>
 801da84:	9a06      	ldr	r2, [sp, #24]
 801da86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da88:	000e      	movs	r6, r1
 801da8a:	0038      	movs	r0, r7
 801da8c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801da8e:	f7e2 fd97 	bl	80005c0 <__aeabi_lmul>
 801da92:	9a00      	ldr	r2, [sp, #0]
 801da94:	9f03      	ldr	r7, [sp, #12]
 801da96:	4694      	mov	ip, r2
 801da98:	1876      	adds	r6, r6, r1
 801da9a:	4649      	mov	r1, r9
 801da9c:	44e1      	add	r9, ip
 801da9e:	46bc      	mov	ip, r7
 801daa0:	9b01      	ldr	r3, [sp, #4]
 801daa2:	1076      	asrs	r6, r6, #1
 801daa4:	4463      	add	r3, ip
 801daa6:	17df      	asrs	r7, r3, #31
 801daa8:	604e      	str	r6, [r1, #4]
 801daaa:	46ba      	mov	sl, r7
 801daac:	001e      	movs	r6, r3
 801daae:	9802      	ldr	r0, [sp, #8]
 801dab0:	9b04      	ldr	r3, [sp, #16]
 801dab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dab4:	1ac7      	subs	r7, r0, r3
 801dab6:	17fb      	asrs	r3, r7, #31
 801dab8:	469b      	mov	fp, r3
 801daba:	0030      	movs	r0, r6
 801dabc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dabe:	4651      	mov	r1, sl
 801dac0:	f7e2 fd7e 	bl	80005c0 <__aeabi_lmul>
 801dac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dac6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dac8:	9101      	str	r1, [sp, #4]
 801daca:	0038      	movs	r0, r7
 801dacc:	4659      	mov	r1, fp
 801dace:	f7e2 fd77 	bl	80005c0 <__aeabi_lmul>
 801dad2:	9801      	ldr	r0, [sp, #4]
 801dad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dad6:	1a41      	subs	r1, r0, r1
 801dad8:	1049      	asrs	r1, r1, #1
 801dada:	6029      	str	r1, [r5, #0]
 801dadc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dade:	0038      	movs	r0, r7
 801dae0:	4659      	mov	r1, fp
 801dae2:	f7e2 fd6d 	bl	80005c0 <__aeabi_lmul>
 801dae6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dae8:	000f      	movs	r7, r1
 801daea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801daec:	0030      	movs	r0, r6
 801daee:	4651      	mov	r1, sl
 801daf0:	f7e2 fd66 	bl	80005c0 <__aeabi_lmul>
 801daf4:	187f      	adds	r7, r7, r1
 801daf6:	107f      	asrs	r7, r7, #1
 801daf8:	606f      	str	r7, [r5, #4]
 801dafa:	9a00      	ldr	r2, [sp, #0]
 801dafc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801dafe:	4694      	mov	ip, r2
 801db00:	4465      	add	r5, ip
 801db02:	468c      	mov	ip, r1
 801db04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801db06:	0013      	movs	r3, r2
 801db08:	4462      	add	r2, ip
 801db0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801db0c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801db0e:	429a      	cmp	r2, r3
 801db10:	d900      	bls.n	801db14 <arm_radix4_butterfly_inverse_q31+0x46c>
 801db12:	e73e      	b.n	801d992 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801db14:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801db16:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801db18:	468c      	mov	ip, r1
 801db1a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801db1c:	4462      	add	r2, ip
 801db1e:	468c      	mov	ip, r1
 801db20:	9216      	str	r2, [sp, #88]	@ 0x58
 801db22:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801db24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801db26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801db28:	4462      	add	r2, ip
 801db2a:	468c      	mov	ip, r1
 801db2c:	9219      	str	r2, [sp, #100]	@ 0x64
 801db2e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801db30:	3301      	adds	r3, #1
 801db32:	4462      	add	r2, ip
 801db34:	9218      	str	r2, [sp, #96]	@ 0x60
 801db36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801db38:	9315      	str	r3, [sp, #84]	@ 0x54
 801db3a:	3208      	adds	r2, #8
 801db3c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801db3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801db40:	4293      	cmp	r3, r2
 801db42:	d800      	bhi.n	801db46 <arm_radix4_butterfly_inverse_q31+0x49e>
 801db44:	e6ec      	b.n	801d920 <arm_radix4_butterfly_inverse_q31+0x278>
 801db46:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801db48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801db4a:	009b      	lsls	r3, r3, #2
 801db4c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801db4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801db50:	9213      	str	r2, [sp, #76]	@ 0x4c
 801db52:	089b      	lsrs	r3, r3, #2
 801db54:	9320      	str	r3, [sp, #128]	@ 0x80
 801db56:	2b04      	cmp	r3, #4
 801db58:	d900      	bls.n	801db5c <arm_radix4_butterfly_inverse_q31+0x4b4>
 801db5a:	e6c5      	b.n	801d8e8 <arm_radix4_butterfly_inverse_q31+0x240>
 801db5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801db5e:	469a      	mov	sl, r3
 801db60:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801db62:	681a      	ldr	r2, [r3, #0]
 801db64:	6918      	ldr	r0, [r3, #16]
 801db66:	4691      	mov	r9, r2
 801db68:	464c      	mov	r4, r9
 801db6a:	4680      	mov	r8, r0
 801db6c:	69de      	ldr	r6, [r3, #28]
 801db6e:	689d      	ldr	r5, [r3, #8]
 801db70:	46b4      	mov	ip, r6
 801db72:	6998      	ldr	r0, [r3, #24]
 801db74:	1964      	adds	r4, r4, r5
 801db76:	6859      	ldr	r1, [r3, #4]
 801db78:	68da      	ldr	r2, [r3, #12]
 801db7a:	4444      	add	r4, r8
 801db7c:	695f      	ldr	r7, [r3, #20]
 801db7e:	1824      	adds	r4, r4, r0
 801db80:	601c      	str	r4, [r3, #0]
 801db82:	188c      	adds	r4, r1, r2
 801db84:	19e4      	adds	r4, r4, r7
 801db86:	4464      	add	r4, ip
 801db88:	605c      	str	r4, [r3, #4]
 801db8a:	464c      	mov	r4, r9
 801db8c:	1b64      	subs	r4, r4, r5
 801db8e:	4444      	add	r4, r8
 801db90:	1a24      	subs	r4, r4, r0
 801db92:	609c      	str	r4, [r3, #8]
 801db94:	1a8c      	subs	r4, r1, r2
 801db96:	19e4      	adds	r4, r4, r7
 801db98:	1ba4      	subs	r4, r4, r6
 801db9a:	60dc      	str	r4, [r3, #12]
 801db9c:	464c      	mov	r4, r9
 801db9e:	4646      	mov	r6, r8
 801dba0:	1aa4      	subs	r4, r4, r2
 801dba2:	1ba4      	subs	r4, r4, r6
 801dba4:	4464      	add	r4, ip
 801dba6:	611c      	str	r4, [r3, #16]
 801dba8:	194c      	adds	r4, r1, r5
 801dbaa:	1be4      	subs	r4, r4, r7
 801dbac:	1a24      	subs	r4, r4, r0
 801dbae:	615c      	str	r4, [r3, #20]
 801dbb0:	4644      	mov	r4, r8
 801dbb2:	4666      	mov	r6, ip
 801dbb4:	444a      	add	r2, r9
 801dbb6:	1b12      	subs	r2, r2, r4
 801dbb8:	1b92      	subs	r2, r2, r6
 801dbba:	619a      	str	r2, [r3, #24]
 801dbbc:	1b4a      	subs	r2, r1, r5
 801dbbe:	1bd1      	subs	r1, r2, r7
 801dbc0:	2201      	movs	r2, #1
 801dbc2:	4252      	negs	r2, r2
 801dbc4:	4694      	mov	ip, r2
 801dbc6:	44e2      	add	sl, ip
 801dbc8:	4652      	mov	r2, sl
 801dbca:	1809      	adds	r1, r1, r0
 801dbcc:	61d9      	str	r1, [r3, #28]
 801dbce:	3320      	adds	r3, #32
 801dbd0:	2a00      	cmp	r2, #0
 801dbd2:	d1c6      	bne.n	801db62 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801dbd4:	b027      	add	sp, #156	@ 0x9c
 801dbd6:	bc3c      	pop	{r2, r3, r4, r5}
 801dbd8:	4690      	mov	r8, r2
 801dbda:	4699      	mov	r9, r3
 801dbdc:	46a2      	mov	sl, r4
 801dbde:	46ab      	mov	fp, r5
 801dbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbe2:	469a      	mov	sl, r3
 801dbe4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dbe6:	e7bc      	b.n	801db62 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801dbe8 <arm_cmplx_mag_squared_q31>:
 801dbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbea:	464f      	mov	r7, r9
 801dbec:	4646      	mov	r6, r8
 801dbee:	0004      	movs	r4, r0
 801dbf0:	b4c0      	push	{r6, r7}
 801dbf2:	0016      	movs	r6, r2
 801dbf4:	000f      	movs	r7, r1
 801dbf6:	2a00      	cmp	r2, #0
 801dbf8:	d018      	beq.n	801dc2c <arm_cmplx_mag_squared_q31+0x44>
 801dbfa:	6823      	ldr	r3, [r4, #0]
 801dbfc:	6822      	ldr	r2, [r4, #0]
 801dbfe:	17d9      	asrs	r1, r3, #31
 801dc00:	6863      	ldr	r3, [r4, #4]
 801dc02:	0010      	movs	r0, r2
 801dc04:	4698      	mov	r8, r3
 801dc06:	17db      	asrs	r3, r3, #31
 801dc08:	4699      	mov	r9, r3
 801dc0a:	000b      	movs	r3, r1
 801dc0c:	f7e2 fcd8 	bl	80005c0 <__aeabi_lmul>
 801dc10:	4642      	mov	r2, r8
 801dc12:	104d      	asrs	r5, r1, #1
 801dc14:	464b      	mov	r3, r9
 801dc16:	4640      	mov	r0, r8
 801dc18:	4649      	mov	r1, r9
 801dc1a:	f7e2 fcd1 	bl	80005c0 <__aeabi_lmul>
 801dc1e:	1049      	asrs	r1, r1, #1
 801dc20:	1869      	adds	r1, r5, r1
 801dc22:	3e01      	subs	r6, #1
 801dc24:	c702      	stmia	r7!, {r1}
 801dc26:	3408      	adds	r4, #8
 801dc28:	2e00      	cmp	r6, #0
 801dc2a:	d1e6      	bne.n	801dbfa <arm_cmplx_mag_squared_q31+0x12>
 801dc2c:	bc0c      	pop	{r2, r3}
 801dc2e:	4690      	mov	r8, r2
 801dc30:	4699      	mov	r9, r3
 801dc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801dc34 <arm_mult_q31>:
 801dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc36:	4646      	mov	r6, r8
 801dc38:	464f      	mov	r7, r9
 801dc3a:	4690      	mov	r8, r2
 801dc3c:	b4c0      	push	{r6, r7}
 801dc3e:	001d      	movs	r5, r3
 801dc40:	0006      	movs	r6, r0
 801dc42:	000f      	movs	r7, r1
 801dc44:	2400      	movs	r4, #0
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d020      	beq.n	801dc8c <arm_mult_q31+0x58>
 801dc4a:	4b12      	ldr	r3, [pc, #72]	@ (801dc94 <arm_mult_q31+0x60>)
 801dc4c:	4699      	mov	r9, r3
 801dc4e:	e007      	b.n	801dc60 <arm_mult_q31+0x2c>
 801dc50:	464b      	mov	r3, r9
 801dc52:	4059      	eors	r1, r3
 801dc54:	4643      	mov	r3, r8
 801dc56:	3d01      	subs	r5, #1
 801dc58:	5119      	str	r1, [r3, r4]
 801dc5a:	3404      	adds	r4, #4
 801dc5c:	2d00      	cmp	r5, #0
 801dc5e:	d015      	beq.n	801dc8c <arm_mult_q31+0x58>
 801dc60:	5933      	ldr	r3, [r6, r4]
 801dc62:	593a      	ldr	r2, [r7, r4]
 801dc64:	17d9      	asrs	r1, r3, #31
 801dc66:	593b      	ldr	r3, [r7, r4]
 801dc68:	5930      	ldr	r0, [r6, r4]
 801dc6a:	17db      	asrs	r3, r3, #31
 801dc6c:	f7e2 fca8 	bl	80005c0 <__aeabi_lmul>
 801dc70:	004b      	lsls	r3, r1, #1
 801dc72:	0fc0      	lsrs	r0, r0, #31
 801dc74:	4318      	orrs	r0, r3
 801dc76:	17c9      	asrs	r1, r1, #31
 801dc78:	17c3      	asrs	r3, r0, #31
 801dc7a:	428b      	cmp	r3, r1
 801dc7c:	d1e8      	bne.n	801dc50 <arm_mult_q31+0x1c>
 801dc7e:	0001      	movs	r1, r0
 801dc80:	4643      	mov	r3, r8
 801dc82:	3d01      	subs	r5, #1
 801dc84:	5119      	str	r1, [r3, r4]
 801dc86:	3404      	adds	r4, #4
 801dc88:	2d00      	cmp	r5, #0
 801dc8a:	d1e9      	bne.n	801dc60 <arm_mult_q31+0x2c>
 801dc8c:	bc0c      	pop	{r2, r3}
 801dc8e:	4690      	mov	r8, r2
 801dc90:	4699      	mov	r9, r3
 801dc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc94:	7fffffff 	.word	0x7fffffff

0801dc98 <arm_add_q31>:
 801dc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc9a:	465f      	mov	r7, fp
 801dc9c:	4656      	mov	r6, sl
 801dc9e:	464d      	mov	r5, r9
 801dca0:	4644      	mov	r4, r8
 801dca2:	b4f0      	push	{r4, r5, r6, r7}
 801dca4:	4693      	mov	fp, r2
 801dca6:	b083      	sub	sp, #12
 801dca8:	4681      	mov	r9, r0
 801dcaa:	468a      	mov	sl, r1
 801dcac:	4698      	mov	r8, r3
 801dcae:	2200      	movs	r2, #0
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d020      	beq.n	801dcf6 <arm_add_q31+0x5e>
 801dcb4:	4649      	mov	r1, r9
 801dcb6:	4653      	mov	r3, sl
 801dcb8:	588e      	ldr	r6, [r1, r2]
 801dcba:	589b      	ldr	r3, [r3, r2]
 801dcbc:	17f7      	asrs	r7, r6, #31
 801dcbe:	001c      	movs	r4, r3
 801dcc0:	0030      	movs	r0, r6
 801dcc2:	0039      	movs	r1, r7
 801dcc4:	17dd      	asrs	r5, r3, #31
 801dcc6:	46b4      	mov	ip, r6
 801dcc8:	1900      	adds	r0, r0, r4
 801dcca:	4169      	adcs	r1, r5
 801dccc:	4463      	add	r3, ip
 801dcce:	9000      	str	r0, [sp, #0]
 801dcd0:	9101      	str	r1, [sp, #4]
 801dcd2:	17d9      	asrs	r1, r3, #31
 801dcd4:	468c      	mov	ip, r1
 801dcd6:	9901      	ldr	r1, [sp, #4]
 801dcd8:	458c      	cmp	ip, r1
 801dcda:	d002      	beq.n	801dce2 <arm_add_q31+0x4a>
 801dcdc:	17cb      	asrs	r3, r1, #31
 801dcde:	4909      	ldr	r1, [pc, #36]	@ (801dd04 <arm_add_q31+0x6c>)
 801dce0:	404b      	eors	r3, r1
 801dce2:	4659      	mov	r1, fp
 801dce4:	508b      	str	r3, [r1, r2]
 801dce6:	2301      	movs	r3, #1
 801dce8:	425b      	negs	r3, r3
 801dcea:	469c      	mov	ip, r3
 801dcec:	44e0      	add	r8, ip
 801dcee:	4643      	mov	r3, r8
 801dcf0:	3204      	adds	r2, #4
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d1de      	bne.n	801dcb4 <arm_add_q31+0x1c>
 801dcf6:	b003      	add	sp, #12
 801dcf8:	bc3c      	pop	{r2, r3, r4, r5}
 801dcfa:	4690      	mov	r8, r2
 801dcfc:	4699      	mov	r9, r3
 801dcfe:	46a2      	mov	sl, r4
 801dd00:	46ab      	mov	fp, r5
 801dd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd04:	7fffffff 	.word	0x7fffffff

0801dd08 <atof>:
 801dd08:	b510      	push	{r4, lr}
 801dd0a:	2100      	movs	r1, #0
 801dd0c:	f000 fe12 	bl	801e934 <strtod>
 801dd10:	bd10      	pop	{r4, pc}

0801dd12 <atoi>:
 801dd12:	b510      	push	{r4, lr}
 801dd14:	220a      	movs	r2, #10
 801dd16:	2100      	movs	r1, #0
 801dd18:	f000 fea4 	bl	801ea64 <strtol>
 801dd1c:	bd10      	pop	{r4, pc}
	...

0801dd20 <sulp>:
 801dd20:	b570      	push	{r4, r5, r6, lr}
 801dd22:	0016      	movs	r6, r2
 801dd24:	000d      	movs	r5, r1
 801dd26:	f003 fcf3 	bl	8021710 <__ulp>
 801dd2a:	2e00      	cmp	r6, #0
 801dd2c:	d00d      	beq.n	801dd4a <sulp+0x2a>
 801dd2e:	236b      	movs	r3, #107	@ 0x6b
 801dd30:	006a      	lsls	r2, r5, #1
 801dd32:	0d52      	lsrs	r2, r2, #21
 801dd34:	1a9b      	subs	r3, r3, r2
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	dd07      	ble.n	801dd4a <sulp+0x2a>
 801dd3a:	2400      	movs	r4, #0
 801dd3c:	4a03      	ldr	r2, [pc, #12]	@ (801dd4c <sulp+0x2c>)
 801dd3e:	051b      	lsls	r3, r3, #20
 801dd40:	189d      	adds	r5, r3, r2
 801dd42:	002b      	movs	r3, r5
 801dd44:	0022      	movs	r2, r4
 801dd46:	f7e4 fc79 	bl	800263c <__aeabi_dmul>
 801dd4a:	bd70      	pop	{r4, r5, r6, pc}
 801dd4c:	3ff00000 	.word	0x3ff00000

0801dd50 <_strtod_l>:
 801dd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd52:	b0a3      	sub	sp, #140	@ 0x8c
 801dd54:	921b      	str	r2, [sp, #108]	@ 0x6c
 801dd56:	2200      	movs	r2, #0
 801dd58:	2600      	movs	r6, #0
 801dd5a:	2700      	movs	r7, #0
 801dd5c:	9005      	str	r0, [sp, #20]
 801dd5e:	9109      	str	r1, [sp, #36]	@ 0x24
 801dd60:	921e      	str	r2, [sp, #120]	@ 0x78
 801dd62:	911d      	str	r1, [sp, #116]	@ 0x74
 801dd64:	780a      	ldrb	r2, [r1, #0]
 801dd66:	2a2b      	cmp	r2, #43	@ 0x2b
 801dd68:	d053      	beq.n	801de12 <_strtod_l+0xc2>
 801dd6a:	d83f      	bhi.n	801ddec <_strtod_l+0x9c>
 801dd6c:	2a0d      	cmp	r2, #13
 801dd6e:	d839      	bhi.n	801dde4 <_strtod_l+0x94>
 801dd70:	2a08      	cmp	r2, #8
 801dd72:	d839      	bhi.n	801dde8 <_strtod_l+0x98>
 801dd74:	2a00      	cmp	r2, #0
 801dd76:	d042      	beq.n	801ddfe <_strtod_l+0xae>
 801dd78:	2200      	movs	r2, #0
 801dd7a:	9212      	str	r2, [sp, #72]	@ 0x48
 801dd7c:	2100      	movs	r1, #0
 801dd7e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801dd80:	910c      	str	r1, [sp, #48]	@ 0x30
 801dd82:	782a      	ldrb	r2, [r5, #0]
 801dd84:	2a30      	cmp	r2, #48	@ 0x30
 801dd86:	d000      	beq.n	801dd8a <_strtod_l+0x3a>
 801dd88:	e083      	b.n	801de92 <_strtod_l+0x142>
 801dd8a:	786a      	ldrb	r2, [r5, #1]
 801dd8c:	3120      	adds	r1, #32
 801dd8e:	438a      	bics	r2, r1
 801dd90:	2a58      	cmp	r2, #88	@ 0x58
 801dd92:	d000      	beq.n	801dd96 <_strtod_l+0x46>
 801dd94:	e073      	b.n	801de7e <_strtod_l+0x12e>
 801dd96:	9302      	str	r3, [sp, #8]
 801dd98:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd9a:	4a95      	ldr	r2, [pc, #596]	@ (801dff0 <_strtod_l+0x2a0>)
 801dd9c:	9301      	str	r3, [sp, #4]
 801dd9e:	ab1e      	add	r3, sp, #120	@ 0x78
 801dda0:	9300      	str	r3, [sp, #0]
 801dda2:	9805      	ldr	r0, [sp, #20]
 801dda4:	ab1f      	add	r3, sp, #124	@ 0x7c
 801dda6:	a91d      	add	r1, sp, #116	@ 0x74
 801dda8:	f002 fd62 	bl	8020870 <__gethex>
 801ddac:	230f      	movs	r3, #15
 801ddae:	0002      	movs	r2, r0
 801ddb0:	401a      	ands	r2, r3
 801ddb2:	0004      	movs	r4, r0
 801ddb4:	9206      	str	r2, [sp, #24]
 801ddb6:	4218      	tst	r0, r3
 801ddb8:	d005      	beq.n	801ddc6 <_strtod_l+0x76>
 801ddba:	2a06      	cmp	r2, #6
 801ddbc:	d12b      	bne.n	801de16 <_strtod_l+0xc6>
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	3501      	adds	r5, #1
 801ddc2:	951d      	str	r5, [sp, #116]	@ 0x74
 801ddc4:	9312      	str	r3, [sp, #72]	@ 0x48
 801ddc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d002      	beq.n	801ddd2 <_strtod_l+0x82>
 801ddcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ddce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ddd0:	6013      	str	r3, [r2, #0]
 801ddd2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d019      	beq.n	801de0c <_strtod_l+0xbc>
 801ddd8:	2380      	movs	r3, #128	@ 0x80
 801ddda:	0030      	movs	r0, r6
 801dddc:	061b      	lsls	r3, r3, #24
 801ddde:	18f9      	adds	r1, r7, r3
 801dde0:	b023      	add	sp, #140	@ 0x8c
 801dde2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dde4:	2a20      	cmp	r2, #32
 801dde6:	d1c7      	bne.n	801dd78 <_strtod_l+0x28>
 801dde8:	3101      	adds	r1, #1
 801ddea:	e7ba      	b.n	801dd62 <_strtod_l+0x12>
 801ddec:	2a2d      	cmp	r2, #45	@ 0x2d
 801ddee:	d1c3      	bne.n	801dd78 <_strtod_l+0x28>
 801ddf0:	3a2c      	subs	r2, #44	@ 0x2c
 801ddf2:	9212      	str	r2, [sp, #72]	@ 0x48
 801ddf4:	1c4a      	adds	r2, r1, #1
 801ddf6:	921d      	str	r2, [sp, #116]	@ 0x74
 801ddf8:	784a      	ldrb	r2, [r1, #1]
 801ddfa:	2a00      	cmp	r2, #0
 801ddfc:	d1be      	bne.n	801dd7c <_strtod_l+0x2c>
 801ddfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de00:	931d      	str	r3, [sp, #116]	@ 0x74
 801de02:	2300      	movs	r3, #0
 801de04:	9312      	str	r3, [sp, #72]	@ 0x48
 801de06:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d1df      	bne.n	801ddcc <_strtod_l+0x7c>
 801de0c:	0030      	movs	r0, r6
 801de0e:	0039      	movs	r1, r7
 801de10:	e7e6      	b.n	801dde0 <_strtod_l+0x90>
 801de12:	2200      	movs	r2, #0
 801de14:	e7ed      	b.n	801ddf2 <_strtod_l+0xa2>
 801de16:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801de18:	2a00      	cmp	r2, #0
 801de1a:	d007      	beq.n	801de2c <_strtod_l+0xdc>
 801de1c:	2135      	movs	r1, #53	@ 0x35
 801de1e:	a820      	add	r0, sp, #128	@ 0x80
 801de20:	f003 fd6c 	bl	80218fc <__copybits>
 801de24:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801de26:	9805      	ldr	r0, [sp, #20]
 801de28:	f003 f926 	bl	8021078 <_Bfree>
 801de2c:	9806      	ldr	r0, [sp, #24]
 801de2e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801de30:	3801      	subs	r0, #1
 801de32:	2804      	cmp	r0, #4
 801de34:	d806      	bhi.n	801de44 <_strtod_l+0xf4>
 801de36:	f7e2 f9a1 	bl	800017c <__gnu_thumb1_case_uqi>
 801de3a:	0312      	.short	0x0312
 801de3c:	1e1c      	.short	0x1e1c
 801de3e:	12          	.byte	0x12
 801de3f:	00          	.byte	0x00
 801de40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801de42:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801de44:	05e4      	lsls	r4, r4, #23
 801de46:	d502      	bpl.n	801de4e <_strtod_l+0xfe>
 801de48:	2380      	movs	r3, #128	@ 0x80
 801de4a:	061b      	lsls	r3, r3, #24
 801de4c:	431f      	orrs	r7, r3
 801de4e:	4b69      	ldr	r3, [pc, #420]	@ (801dff4 <_strtod_l+0x2a4>)
 801de50:	423b      	tst	r3, r7
 801de52:	d1b8      	bne.n	801ddc6 <_strtod_l+0x76>
 801de54:	f001 fd90 	bl	801f978 <__errno>
 801de58:	2322      	movs	r3, #34	@ 0x22
 801de5a:	6003      	str	r3, [r0, #0]
 801de5c:	e7b3      	b.n	801ddc6 <_strtod_l+0x76>
 801de5e:	4966      	ldr	r1, [pc, #408]	@ (801dff8 <_strtod_l+0x2a8>)
 801de60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801de62:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801de64:	400a      	ands	r2, r1
 801de66:	4965      	ldr	r1, [pc, #404]	@ (801dffc <_strtod_l+0x2ac>)
 801de68:	185b      	adds	r3, r3, r1
 801de6a:	051b      	lsls	r3, r3, #20
 801de6c:	431a      	orrs	r2, r3
 801de6e:	0017      	movs	r7, r2
 801de70:	e7e8      	b.n	801de44 <_strtod_l+0xf4>
 801de72:	4f60      	ldr	r7, [pc, #384]	@ (801dff4 <_strtod_l+0x2a4>)
 801de74:	e7e6      	b.n	801de44 <_strtod_l+0xf4>
 801de76:	2601      	movs	r6, #1
 801de78:	4f61      	ldr	r7, [pc, #388]	@ (801e000 <_strtod_l+0x2b0>)
 801de7a:	4276      	negs	r6, r6
 801de7c:	e7e2      	b.n	801de44 <_strtod_l+0xf4>
 801de7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de80:	1c5a      	adds	r2, r3, #1
 801de82:	921d      	str	r2, [sp, #116]	@ 0x74
 801de84:	785b      	ldrb	r3, [r3, #1]
 801de86:	2b30      	cmp	r3, #48	@ 0x30
 801de88:	d0f9      	beq.n	801de7e <_strtod_l+0x12e>
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d09b      	beq.n	801ddc6 <_strtod_l+0x76>
 801de8e:	2301      	movs	r3, #1
 801de90:	930c      	str	r3, [sp, #48]	@ 0x30
 801de92:	2500      	movs	r5, #0
 801de94:	220a      	movs	r2, #10
 801de96:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de98:	950d      	str	r5, [sp, #52]	@ 0x34
 801de9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801de9c:	9508      	str	r5, [sp, #32]
 801de9e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801dea0:	7804      	ldrb	r4, [r0, #0]
 801dea2:	0023      	movs	r3, r4
 801dea4:	3b30      	subs	r3, #48	@ 0x30
 801dea6:	b2d9      	uxtb	r1, r3
 801dea8:	2909      	cmp	r1, #9
 801deaa:	d927      	bls.n	801defc <_strtod_l+0x1ac>
 801deac:	2201      	movs	r2, #1
 801deae:	4955      	ldr	r1, [pc, #340]	@ (801e004 <_strtod_l+0x2b4>)
 801deb0:	f001 fcd4 	bl	801f85c <strncmp>
 801deb4:	2800      	cmp	r0, #0
 801deb6:	d031      	beq.n	801df1c <_strtod_l+0x1cc>
 801deb8:	2000      	movs	r0, #0
 801deba:	0023      	movs	r3, r4
 801debc:	4684      	mov	ip, r0
 801debe:	9a08      	ldr	r2, [sp, #32]
 801dec0:	900e      	str	r0, [sp, #56]	@ 0x38
 801dec2:	9206      	str	r2, [sp, #24]
 801dec4:	2220      	movs	r2, #32
 801dec6:	0019      	movs	r1, r3
 801dec8:	4391      	bics	r1, r2
 801deca:	000a      	movs	r2, r1
 801decc:	2100      	movs	r1, #0
 801dece:	9107      	str	r1, [sp, #28]
 801ded0:	2a45      	cmp	r2, #69	@ 0x45
 801ded2:	d000      	beq.n	801ded6 <_strtod_l+0x186>
 801ded4:	e0c0      	b.n	801e058 <_strtod_l+0x308>
 801ded6:	9b06      	ldr	r3, [sp, #24]
 801ded8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801deda:	4303      	orrs	r3, r0
 801dedc:	4313      	orrs	r3, r2
 801dede:	428b      	cmp	r3, r1
 801dee0:	d08d      	beq.n	801ddfe <_strtod_l+0xae>
 801dee2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dee4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dee6:	3301      	adds	r3, #1
 801dee8:	931d      	str	r3, [sp, #116]	@ 0x74
 801deea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801deec:	785b      	ldrb	r3, [r3, #1]
 801deee:	2b2b      	cmp	r3, #43	@ 0x2b
 801def0:	d070      	beq.n	801dfd4 <_strtod_l+0x284>
 801def2:	000c      	movs	r4, r1
 801def4:	2b2d      	cmp	r3, #45	@ 0x2d
 801def6:	d173      	bne.n	801dfe0 <_strtod_l+0x290>
 801def8:	2401      	movs	r4, #1
 801defa:	e06c      	b.n	801dfd6 <_strtod_l+0x286>
 801defc:	9908      	ldr	r1, [sp, #32]
 801defe:	2908      	cmp	r1, #8
 801df00:	dc09      	bgt.n	801df16 <_strtod_l+0x1c6>
 801df02:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801df04:	4351      	muls	r1, r2
 801df06:	185b      	adds	r3, r3, r1
 801df08:	930d      	str	r3, [sp, #52]	@ 0x34
 801df0a:	9b08      	ldr	r3, [sp, #32]
 801df0c:	3001      	adds	r0, #1
 801df0e:	3301      	adds	r3, #1
 801df10:	9308      	str	r3, [sp, #32]
 801df12:	901d      	str	r0, [sp, #116]	@ 0x74
 801df14:	e7c3      	b.n	801de9e <_strtod_l+0x14e>
 801df16:	4355      	muls	r5, r2
 801df18:	195d      	adds	r5, r3, r5
 801df1a:	e7f6      	b.n	801df0a <_strtod_l+0x1ba>
 801df1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df1e:	1c5a      	adds	r2, r3, #1
 801df20:	921d      	str	r2, [sp, #116]	@ 0x74
 801df22:	9a08      	ldr	r2, [sp, #32]
 801df24:	785b      	ldrb	r3, [r3, #1]
 801df26:	2a00      	cmp	r2, #0
 801df28:	d03a      	beq.n	801dfa0 <_strtod_l+0x250>
 801df2a:	900e      	str	r0, [sp, #56]	@ 0x38
 801df2c:	9206      	str	r2, [sp, #24]
 801df2e:	001a      	movs	r2, r3
 801df30:	3a30      	subs	r2, #48	@ 0x30
 801df32:	2a09      	cmp	r2, #9
 801df34:	d912      	bls.n	801df5c <_strtod_l+0x20c>
 801df36:	2201      	movs	r2, #1
 801df38:	4694      	mov	ip, r2
 801df3a:	e7c3      	b.n	801dec4 <_strtod_l+0x174>
 801df3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df3e:	3001      	adds	r0, #1
 801df40:	1c5a      	adds	r2, r3, #1
 801df42:	921d      	str	r2, [sp, #116]	@ 0x74
 801df44:	785b      	ldrb	r3, [r3, #1]
 801df46:	2b30      	cmp	r3, #48	@ 0x30
 801df48:	d0f8      	beq.n	801df3c <_strtod_l+0x1ec>
 801df4a:	001a      	movs	r2, r3
 801df4c:	3a31      	subs	r2, #49	@ 0x31
 801df4e:	2a08      	cmp	r2, #8
 801df50:	d83b      	bhi.n	801dfca <_strtod_l+0x27a>
 801df52:	900e      	str	r0, [sp, #56]	@ 0x38
 801df54:	2000      	movs	r0, #0
 801df56:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801df58:	9006      	str	r0, [sp, #24]
 801df5a:	9213      	str	r2, [sp, #76]	@ 0x4c
 801df5c:	001a      	movs	r2, r3
 801df5e:	1c41      	adds	r1, r0, #1
 801df60:	3a30      	subs	r2, #48	@ 0x30
 801df62:	2b30      	cmp	r3, #48	@ 0x30
 801df64:	d016      	beq.n	801df94 <_strtod_l+0x244>
 801df66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df68:	185b      	adds	r3, r3, r1
 801df6a:	930e      	str	r3, [sp, #56]	@ 0x38
 801df6c:	9b06      	ldr	r3, [sp, #24]
 801df6e:	210a      	movs	r1, #10
 801df70:	469c      	mov	ip, r3
 801df72:	4484      	add	ip, r0
 801df74:	459c      	cmp	ip, r3
 801df76:	d115      	bne.n	801dfa4 <_strtod_l+0x254>
 801df78:	9906      	ldr	r1, [sp, #24]
 801df7a:	9b06      	ldr	r3, [sp, #24]
 801df7c:	3101      	adds	r1, #1
 801df7e:	1809      	adds	r1, r1, r0
 801df80:	181b      	adds	r3, r3, r0
 801df82:	9106      	str	r1, [sp, #24]
 801df84:	2b08      	cmp	r3, #8
 801df86:	dc19      	bgt.n	801dfbc <_strtod_l+0x26c>
 801df88:	230a      	movs	r3, #10
 801df8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801df8c:	434b      	muls	r3, r1
 801df8e:	2100      	movs	r1, #0
 801df90:	18d3      	adds	r3, r2, r3
 801df92:	930d      	str	r3, [sp, #52]	@ 0x34
 801df94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df96:	0008      	movs	r0, r1
 801df98:	1c5a      	adds	r2, r3, #1
 801df9a:	921d      	str	r2, [sp, #116]	@ 0x74
 801df9c:	785b      	ldrb	r3, [r3, #1]
 801df9e:	e7c6      	b.n	801df2e <_strtod_l+0x1de>
 801dfa0:	9808      	ldr	r0, [sp, #32]
 801dfa2:	e7d0      	b.n	801df46 <_strtod_l+0x1f6>
 801dfa4:	1c5c      	adds	r4, r3, #1
 801dfa6:	2b08      	cmp	r3, #8
 801dfa8:	dc04      	bgt.n	801dfb4 <_strtod_l+0x264>
 801dfaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dfac:	434b      	muls	r3, r1
 801dfae:	930d      	str	r3, [sp, #52]	@ 0x34
 801dfb0:	0023      	movs	r3, r4
 801dfb2:	e7df      	b.n	801df74 <_strtod_l+0x224>
 801dfb4:	2c10      	cmp	r4, #16
 801dfb6:	dcfb      	bgt.n	801dfb0 <_strtod_l+0x260>
 801dfb8:	434d      	muls	r5, r1
 801dfba:	e7f9      	b.n	801dfb0 <_strtod_l+0x260>
 801dfbc:	2100      	movs	r1, #0
 801dfbe:	2b0f      	cmp	r3, #15
 801dfc0:	dce8      	bgt.n	801df94 <_strtod_l+0x244>
 801dfc2:	230a      	movs	r3, #10
 801dfc4:	435d      	muls	r5, r3
 801dfc6:	1955      	adds	r5, r2, r5
 801dfc8:	e7e4      	b.n	801df94 <_strtod_l+0x244>
 801dfca:	2200      	movs	r2, #0
 801dfcc:	920e      	str	r2, [sp, #56]	@ 0x38
 801dfce:	9206      	str	r2, [sp, #24]
 801dfd0:	3201      	adds	r2, #1
 801dfd2:	e7b1      	b.n	801df38 <_strtod_l+0x1e8>
 801dfd4:	2400      	movs	r4, #0
 801dfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfd8:	3302      	adds	r3, #2
 801dfda:	931d      	str	r3, [sp, #116]	@ 0x74
 801dfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfde:	789b      	ldrb	r3, [r3, #2]
 801dfe0:	001a      	movs	r2, r3
 801dfe2:	3a30      	subs	r2, #48	@ 0x30
 801dfe4:	2a09      	cmp	r2, #9
 801dfe6:	d913      	bls.n	801e010 <_strtod_l+0x2c0>
 801dfe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dfea:	921d      	str	r2, [sp, #116]	@ 0x74
 801dfec:	2200      	movs	r2, #0
 801dfee:	e032      	b.n	801e056 <_strtod_l+0x306>
 801dff0:	08024eb8 	.word	0x08024eb8
 801dff4:	7ff00000 	.word	0x7ff00000
 801dff8:	ffefffff 	.word	0xffefffff
 801dffc:	00000433 	.word	0x00000433
 801e000:	7fffffff 	.word	0x7fffffff
 801e004:	08024ea0 	.word	0x08024ea0
 801e008:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e00a:	1c5a      	adds	r2, r3, #1
 801e00c:	921d      	str	r2, [sp, #116]	@ 0x74
 801e00e:	785b      	ldrb	r3, [r3, #1]
 801e010:	2b30      	cmp	r3, #48	@ 0x30
 801e012:	d0f9      	beq.n	801e008 <_strtod_l+0x2b8>
 801e014:	2200      	movs	r2, #0
 801e016:	9207      	str	r2, [sp, #28]
 801e018:	001a      	movs	r2, r3
 801e01a:	3a31      	subs	r2, #49	@ 0x31
 801e01c:	2a08      	cmp	r2, #8
 801e01e:	d81b      	bhi.n	801e058 <_strtod_l+0x308>
 801e020:	3b30      	subs	r3, #48	@ 0x30
 801e022:	9310      	str	r3, [sp, #64]	@ 0x40
 801e024:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e026:	9307      	str	r3, [sp, #28]
 801e028:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e02a:	1c59      	adds	r1, r3, #1
 801e02c:	911d      	str	r1, [sp, #116]	@ 0x74
 801e02e:	785b      	ldrb	r3, [r3, #1]
 801e030:	001a      	movs	r2, r3
 801e032:	3a30      	subs	r2, #48	@ 0x30
 801e034:	2a09      	cmp	r2, #9
 801e036:	d93a      	bls.n	801e0ae <_strtod_l+0x35e>
 801e038:	9a07      	ldr	r2, [sp, #28]
 801e03a:	1a8a      	subs	r2, r1, r2
 801e03c:	49b4      	ldr	r1, [pc, #720]	@ (801e310 <_strtod_l+0x5c0>)
 801e03e:	9107      	str	r1, [sp, #28]
 801e040:	2a08      	cmp	r2, #8
 801e042:	dc04      	bgt.n	801e04e <_strtod_l+0x2fe>
 801e044:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e046:	9207      	str	r2, [sp, #28]
 801e048:	428a      	cmp	r2, r1
 801e04a:	dd00      	ble.n	801e04e <_strtod_l+0x2fe>
 801e04c:	9107      	str	r1, [sp, #28]
 801e04e:	2c00      	cmp	r4, #0
 801e050:	d002      	beq.n	801e058 <_strtod_l+0x308>
 801e052:	9a07      	ldr	r2, [sp, #28]
 801e054:	4252      	negs	r2, r2
 801e056:	9207      	str	r2, [sp, #28]
 801e058:	9a06      	ldr	r2, [sp, #24]
 801e05a:	2a00      	cmp	r2, #0
 801e05c:	d14d      	bne.n	801e0fa <_strtod_l+0x3aa>
 801e05e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e060:	4310      	orrs	r0, r2
 801e062:	d000      	beq.n	801e066 <_strtod_l+0x316>
 801e064:	e6af      	b.n	801ddc6 <_strtod_l+0x76>
 801e066:	4662      	mov	r2, ip
 801e068:	2a00      	cmp	r2, #0
 801e06a:	d000      	beq.n	801e06e <_strtod_l+0x31e>
 801e06c:	e6c7      	b.n	801ddfe <_strtod_l+0xae>
 801e06e:	2b69      	cmp	r3, #105	@ 0x69
 801e070:	d027      	beq.n	801e0c2 <_strtod_l+0x372>
 801e072:	dc23      	bgt.n	801e0bc <_strtod_l+0x36c>
 801e074:	2b49      	cmp	r3, #73	@ 0x49
 801e076:	d024      	beq.n	801e0c2 <_strtod_l+0x372>
 801e078:	2b4e      	cmp	r3, #78	@ 0x4e
 801e07a:	d000      	beq.n	801e07e <_strtod_l+0x32e>
 801e07c:	e6bf      	b.n	801ddfe <_strtod_l+0xae>
 801e07e:	49a5      	ldr	r1, [pc, #660]	@ (801e314 <_strtod_l+0x5c4>)
 801e080:	a81d      	add	r0, sp, #116	@ 0x74
 801e082:	f002 fe2b 	bl	8020cdc <__match>
 801e086:	2800      	cmp	r0, #0
 801e088:	d100      	bne.n	801e08c <_strtod_l+0x33c>
 801e08a:	e6b8      	b.n	801ddfe <_strtod_l+0xae>
 801e08c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e08e:	781b      	ldrb	r3, [r3, #0]
 801e090:	2b28      	cmp	r3, #40	@ 0x28
 801e092:	d12c      	bne.n	801e0ee <_strtod_l+0x39e>
 801e094:	49a0      	ldr	r1, [pc, #640]	@ (801e318 <_strtod_l+0x5c8>)
 801e096:	aa20      	add	r2, sp, #128	@ 0x80
 801e098:	a81d      	add	r0, sp, #116	@ 0x74
 801e09a:	f002 fe33 	bl	8020d04 <__hexnan>
 801e09e:	2805      	cmp	r0, #5
 801e0a0:	d125      	bne.n	801e0ee <_strtod_l+0x39e>
 801e0a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e0a4:	4a9d      	ldr	r2, [pc, #628]	@ (801e31c <_strtod_l+0x5cc>)
 801e0a6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e0a8:	431a      	orrs	r2, r3
 801e0aa:	0017      	movs	r7, r2
 801e0ac:	e68b      	b.n	801ddc6 <_strtod_l+0x76>
 801e0ae:	220a      	movs	r2, #10
 801e0b0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e0b2:	434a      	muls	r2, r1
 801e0b4:	18d2      	adds	r2, r2, r3
 801e0b6:	3a30      	subs	r2, #48	@ 0x30
 801e0b8:	9210      	str	r2, [sp, #64]	@ 0x40
 801e0ba:	e7b5      	b.n	801e028 <_strtod_l+0x2d8>
 801e0bc:	2b6e      	cmp	r3, #110	@ 0x6e
 801e0be:	d0de      	beq.n	801e07e <_strtod_l+0x32e>
 801e0c0:	e69d      	b.n	801ddfe <_strtod_l+0xae>
 801e0c2:	4997      	ldr	r1, [pc, #604]	@ (801e320 <_strtod_l+0x5d0>)
 801e0c4:	a81d      	add	r0, sp, #116	@ 0x74
 801e0c6:	f002 fe09 	bl	8020cdc <__match>
 801e0ca:	2800      	cmp	r0, #0
 801e0cc:	d100      	bne.n	801e0d0 <_strtod_l+0x380>
 801e0ce:	e696      	b.n	801ddfe <_strtod_l+0xae>
 801e0d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e0d2:	4994      	ldr	r1, [pc, #592]	@ (801e324 <_strtod_l+0x5d4>)
 801e0d4:	3b01      	subs	r3, #1
 801e0d6:	a81d      	add	r0, sp, #116	@ 0x74
 801e0d8:	931d      	str	r3, [sp, #116]	@ 0x74
 801e0da:	f002 fdff 	bl	8020cdc <__match>
 801e0de:	2800      	cmp	r0, #0
 801e0e0:	d102      	bne.n	801e0e8 <_strtod_l+0x398>
 801e0e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e0e4:	3301      	adds	r3, #1
 801e0e6:	931d      	str	r3, [sp, #116]	@ 0x74
 801e0e8:	2600      	movs	r6, #0
 801e0ea:	4f8c      	ldr	r7, [pc, #560]	@ (801e31c <_strtod_l+0x5cc>)
 801e0ec:	e66b      	b.n	801ddc6 <_strtod_l+0x76>
 801e0ee:	488e      	ldr	r0, [pc, #568]	@ (801e328 <_strtod_l+0x5d8>)
 801e0f0:	f001 fc84 	bl	801f9fc <nan>
 801e0f4:	0006      	movs	r6, r0
 801e0f6:	000f      	movs	r7, r1
 801e0f8:	e665      	b.n	801ddc6 <_strtod_l+0x76>
 801e0fa:	9b07      	ldr	r3, [sp, #28]
 801e0fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e0fe:	1a9b      	subs	r3, r3, r2
 801e100:	930c      	str	r3, [sp, #48]	@ 0x30
 801e102:	9b08      	ldr	r3, [sp, #32]
 801e104:	2b00      	cmp	r3, #0
 801e106:	d101      	bne.n	801e10c <_strtod_l+0x3bc>
 801e108:	9b06      	ldr	r3, [sp, #24]
 801e10a:	9308      	str	r3, [sp, #32]
 801e10c:	9c06      	ldr	r4, [sp, #24]
 801e10e:	2c10      	cmp	r4, #16
 801e110:	dd00      	ble.n	801e114 <_strtod_l+0x3c4>
 801e112:	2410      	movs	r4, #16
 801e114:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e116:	f7e5 f981 	bl	800341c <__aeabi_ui2d>
 801e11a:	9b06      	ldr	r3, [sp, #24]
 801e11c:	0006      	movs	r6, r0
 801e11e:	000f      	movs	r7, r1
 801e120:	2b09      	cmp	r3, #9
 801e122:	dc13      	bgt.n	801e14c <_strtod_l+0x3fc>
 801e124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e126:	2b00      	cmp	r3, #0
 801e128:	d100      	bne.n	801e12c <_strtod_l+0x3dc>
 801e12a:	e64c      	b.n	801ddc6 <_strtod_l+0x76>
 801e12c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e12e:	2b00      	cmp	r3, #0
 801e130:	dc00      	bgt.n	801e134 <_strtod_l+0x3e4>
 801e132:	e07e      	b.n	801e232 <_strtod_l+0x4e2>
 801e134:	2b16      	cmp	r3, #22
 801e136:	dc63      	bgt.n	801e200 <_strtod_l+0x4b0>
 801e138:	497c      	ldr	r1, [pc, #496]	@ (801e32c <_strtod_l+0x5dc>)
 801e13a:	00db      	lsls	r3, r3, #3
 801e13c:	18c9      	adds	r1, r1, r3
 801e13e:	0032      	movs	r2, r6
 801e140:	6808      	ldr	r0, [r1, #0]
 801e142:	6849      	ldr	r1, [r1, #4]
 801e144:	003b      	movs	r3, r7
 801e146:	f7e4 fa79 	bl	800263c <__aeabi_dmul>
 801e14a:	e7d3      	b.n	801e0f4 <_strtod_l+0x3a4>
 801e14c:	0022      	movs	r2, r4
 801e14e:	4b77      	ldr	r3, [pc, #476]	@ (801e32c <_strtod_l+0x5dc>)
 801e150:	3a09      	subs	r2, #9
 801e152:	00d2      	lsls	r2, r2, #3
 801e154:	189b      	adds	r3, r3, r2
 801e156:	681a      	ldr	r2, [r3, #0]
 801e158:	685b      	ldr	r3, [r3, #4]
 801e15a:	f7e4 fa6f 	bl	800263c <__aeabi_dmul>
 801e15e:	0006      	movs	r6, r0
 801e160:	0028      	movs	r0, r5
 801e162:	000f      	movs	r7, r1
 801e164:	f7e5 f95a 	bl	800341c <__aeabi_ui2d>
 801e168:	000b      	movs	r3, r1
 801e16a:	0002      	movs	r2, r0
 801e16c:	0039      	movs	r1, r7
 801e16e:	0030      	movs	r0, r6
 801e170:	f7e3 fabc 	bl	80016ec <__aeabi_dadd>
 801e174:	9b06      	ldr	r3, [sp, #24]
 801e176:	0006      	movs	r6, r0
 801e178:	000f      	movs	r7, r1
 801e17a:	2b0f      	cmp	r3, #15
 801e17c:	ddd2      	ble.n	801e124 <_strtod_l+0x3d4>
 801e17e:	9b06      	ldr	r3, [sp, #24]
 801e180:	1b1c      	subs	r4, r3, r4
 801e182:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e184:	18e4      	adds	r4, r4, r3
 801e186:	2c00      	cmp	r4, #0
 801e188:	dc00      	bgt.n	801e18c <_strtod_l+0x43c>
 801e18a:	e09b      	b.n	801e2c4 <_strtod_l+0x574>
 801e18c:	220f      	movs	r2, #15
 801e18e:	0023      	movs	r3, r4
 801e190:	4013      	ands	r3, r2
 801e192:	4214      	tst	r4, r2
 801e194:	d00a      	beq.n	801e1ac <_strtod_l+0x45c>
 801e196:	4965      	ldr	r1, [pc, #404]	@ (801e32c <_strtod_l+0x5dc>)
 801e198:	00db      	lsls	r3, r3, #3
 801e19a:	18c9      	adds	r1, r1, r3
 801e19c:	0032      	movs	r2, r6
 801e19e:	6808      	ldr	r0, [r1, #0]
 801e1a0:	6849      	ldr	r1, [r1, #4]
 801e1a2:	003b      	movs	r3, r7
 801e1a4:	f7e4 fa4a 	bl	800263c <__aeabi_dmul>
 801e1a8:	0006      	movs	r6, r0
 801e1aa:	000f      	movs	r7, r1
 801e1ac:	230f      	movs	r3, #15
 801e1ae:	439c      	bics	r4, r3
 801e1b0:	d073      	beq.n	801e29a <_strtod_l+0x54a>
 801e1b2:	3326      	adds	r3, #38	@ 0x26
 801e1b4:	33ff      	adds	r3, #255	@ 0xff
 801e1b6:	429c      	cmp	r4, r3
 801e1b8:	dd4b      	ble.n	801e252 <_strtod_l+0x502>
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	9306      	str	r3, [sp, #24]
 801e1be:	9307      	str	r3, [sp, #28]
 801e1c0:	930d      	str	r3, [sp, #52]	@ 0x34
 801e1c2:	9308      	str	r3, [sp, #32]
 801e1c4:	2322      	movs	r3, #34	@ 0x22
 801e1c6:	2600      	movs	r6, #0
 801e1c8:	9a05      	ldr	r2, [sp, #20]
 801e1ca:	4f54      	ldr	r7, [pc, #336]	@ (801e31c <_strtod_l+0x5cc>)
 801e1cc:	6013      	str	r3, [r2, #0]
 801e1ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e1d0:	42b3      	cmp	r3, r6
 801e1d2:	d100      	bne.n	801e1d6 <_strtod_l+0x486>
 801e1d4:	e5f7      	b.n	801ddc6 <_strtod_l+0x76>
 801e1d6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e1d8:	9805      	ldr	r0, [sp, #20]
 801e1da:	f002 ff4d 	bl	8021078 <_Bfree>
 801e1de:	9908      	ldr	r1, [sp, #32]
 801e1e0:	9805      	ldr	r0, [sp, #20]
 801e1e2:	f002 ff49 	bl	8021078 <_Bfree>
 801e1e6:	9907      	ldr	r1, [sp, #28]
 801e1e8:	9805      	ldr	r0, [sp, #20]
 801e1ea:	f002 ff45 	bl	8021078 <_Bfree>
 801e1ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e1f0:	9805      	ldr	r0, [sp, #20]
 801e1f2:	f002 ff41 	bl	8021078 <_Bfree>
 801e1f6:	9906      	ldr	r1, [sp, #24]
 801e1f8:	9805      	ldr	r0, [sp, #20]
 801e1fa:	f002 ff3d 	bl	8021078 <_Bfree>
 801e1fe:	e5e2      	b.n	801ddc6 <_strtod_l+0x76>
 801e200:	2325      	movs	r3, #37	@ 0x25
 801e202:	9a06      	ldr	r2, [sp, #24]
 801e204:	1a9b      	subs	r3, r3, r2
 801e206:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e208:	4293      	cmp	r3, r2
 801e20a:	dbb8      	blt.n	801e17e <_strtod_l+0x42e>
 801e20c:	240f      	movs	r4, #15
 801e20e:	9b06      	ldr	r3, [sp, #24]
 801e210:	4d46      	ldr	r5, [pc, #280]	@ (801e32c <_strtod_l+0x5dc>)
 801e212:	1ae4      	subs	r4, r4, r3
 801e214:	00e1      	lsls	r1, r4, #3
 801e216:	1869      	adds	r1, r5, r1
 801e218:	0032      	movs	r2, r6
 801e21a:	6808      	ldr	r0, [r1, #0]
 801e21c:	6849      	ldr	r1, [r1, #4]
 801e21e:	003b      	movs	r3, r7
 801e220:	f7e4 fa0c 	bl	800263c <__aeabi_dmul>
 801e224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e226:	1b1c      	subs	r4, r3, r4
 801e228:	00e4      	lsls	r4, r4, #3
 801e22a:	192d      	adds	r5, r5, r4
 801e22c:	682a      	ldr	r2, [r5, #0]
 801e22e:	686b      	ldr	r3, [r5, #4]
 801e230:	e789      	b.n	801e146 <_strtod_l+0x3f6>
 801e232:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e234:	3316      	adds	r3, #22
 801e236:	dba2      	blt.n	801e17e <_strtod_l+0x42e>
 801e238:	9907      	ldr	r1, [sp, #28]
 801e23a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e23c:	4b3b      	ldr	r3, [pc, #236]	@ (801e32c <_strtod_l+0x5dc>)
 801e23e:	1a52      	subs	r2, r2, r1
 801e240:	00d2      	lsls	r2, r2, #3
 801e242:	189b      	adds	r3, r3, r2
 801e244:	0030      	movs	r0, r6
 801e246:	681a      	ldr	r2, [r3, #0]
 801e248:	685b      	ldr	r3, [r3, #4]
 801e24a:	0039      	movs	r1, r7
 801e24c:	f7e3 fdb2 	bl	8001db4 <__aeabi_ddiv>
 801e250:	e750      	b.n	801e0f4 <_strtod_l+0x3a4>
 801e252:	2300      	movs	r3, #0
 801e254:	0030      	movs	r0, r6
 801e256:	0039      	movs	r1, r7
 801e258:	4d35      	ldr	r5, [pc, #212]	@ (801e330 <_strtod_l+0x5e0>)
 801e25a:	1124      	asrs	r4, r4, #4
 801e25c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e25e:	2c01      	cmp	r4, #1
 801e260:	dc1e      	bgt.n	801e2a0 <_strtod_l+0x550>
 801e262:	2b00      	cmp	r3, #0
 801e264:	d001      	beq.n	801e26a <_strtod_l+0x51a>
 801e266:	0006      	movs	r6, r0
 801e268:	000f      	movs	r7, r1
 801e26a:	4b32      	ldr	r3, [pc, #200]	@ (801e334 <_strtod_l+0x5e4>)
 801e26c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e26e:	18ff      	adds	r7, r7, r3
 801e270:	4b2f      	ldr	r3, [pc, #188]	@ (801e330 <_strtod_l+0x5e0>)
 801e272:	00d5      	lsls	r5, r2, #3
 801e274:	195d      	adds	r5, r3, r5
 801e276:	0032      	movs	r2, r6
 801e278:	6828      	ldr	r0, [r5, #0]
 801e27a:	6869      	ldr	r1, [r5, #4]
 801e27c:	003b      	movs	r3, r7
 801e27e:	f7e4 f9dd 	bl	800263c <__aeabi_dmul>
 801e282:	4b26      	ldr	r3, [pc, #152]	@ (801e31c <_strtod_l+0x5cc>)
 801e284:	4a2c      	ldr	r2, [pc, #176]	@ (801e338 <_strtod_l+0x5e8>)
 801e286:	0006      	movs	r6, r0
 801e288:	400b      	ands	r3, r1
 801e28a:	4293      	cmp	r3, r2
 801e28c:	d895      	bhi.n	801e1ba <_strtod_l+0x46a>
 801e28e:	4a2b      	ldr	r2, [pc, #172]	@ (801e33c <_strtod_l+0x5ec>)
 801e290:	4293      	cmp	r3, r2
 801e292:	d913      	bls.n	801e2bc <_strtod_l+0x56c>
 801e294:	2601      	movs	r6, #1
 801e296:	4f2a      	ldr	r7, [pc, #168]	@ (801e340 <_strtod_l+0x5f0>)
 801e298:	4276      	negs	r6, r6
 801e29a:	2300      	movs	r3, #0
 801e29c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e29e:	e086      	b.n	801e3ae <_strtod_l+0x65e>
 801e2a0:	2201      	movs	r2, #1
 801e2a2:	4214      	tst	r4, r2
 801e2a4:	d004      	beq.n	801e2b0 <_strtod_l+0x560>
 801e2a6:	682a      	ldr	r2, [r5, #0]
 801e2a8:	686b      	ldr	r3, [r5, #4]
 801e2aa:	f7e4 f9c7 	bl	800263c <__aeabi_dmul>
 801e2ae:	2301      	movs	r3, #1
 801e2b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e2b2:	1064      	asrs	r4, r4, #1
 801e2b4:	3201      	adds	r2, #1
 801e2b6:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2b8:	3508      	adds	r5, #8
 801e2ba:	e7d0      	b.n	801e25e <_strtod_l+0x50e>
 801e2bc:	23d4      	movs	r3, #212	@ 0xd4
 801e2be:	049b      	lsls	r3, r3, #18
 801e2c0:	18cf      	adds	r7, r1, r3
 801e2c2:	e7ea      	b.n	801e29a <_strtod_l+0x54a>
 801e2c4:	2c00      	cmp	r4, #0
 801e2c6:	d0e8      	beq.n	801e29a <_strtod_l+0x54a>
 801e2c8:	4264      	negs	r4, r4
 801e2ca:	230f      	movs	r3, #15
 801e2cc:	0022      	movs	r2, r4
 801e2ce:	401a      	ands	r2, r3
 801e2d0:	421c      	tst	r4, r3
 801e2d2:	d00a      	beq.n	801e2ea <_strtod_l+0x59a>
 801e2d4:	4b15      	ldr	r3, [pc, #84]	@ (801e32c <_strtod_l+0x5dc>)
 801e2d6:	00d2      	lsls	r2, r2, #3
 801e2d8:	189b      	adds	r3, r3, r2
 801e2da:	0030      	movs	r0, r6
 801e2dc:	681a      	ldr	r2, [r3, #0]
 801e2de:	685b      	ldr	r3, [r3, #4]
 801e2e0:	0039      	movs	r1, r7
 801e2e2:	f7e3 fd67 	bl	8001db4 <__aeabi_ddiv>
 801e2e6:	0006      	movs	r6, r0
 801e2e8:	000f      	movs	r7, r1
 801e2ea:	1124      	asrs	r4, r4, #4
 801e2ec:	d0d5      	beq.n	801e29a <_strtod_l+0x54a>
 801e2ee:	2c1f      	cmp	r4, #31
 801e2f0:	dd28      	ble.n	801e344 <_strtod_l+0x5f4>
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	9306      	str	r3, [sp, #24]
 801e2f6:	9307      	str	r3, [sp, #28]
 801e2f8:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2fa:	9308      	str	r3, [sp, #32]
 801e2fc:	2322      	movs	r3, #34	@ 0x22
 801e2fe:	9a05      	ldr	r2, [sp, #20]
 801e300:	2600      	movs	r6, #0
 801e302:	6013      	str	r3, [r2, #0]
 801e304:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e306:	2700      	movs	r7, #0
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d000      	beq.n	801e30e <_strtod_l+0x5be>
 801e30c:	e763      	b.n	801e1d6 <_strtod_l+0x486>
 801e30e:	e55a      	b.n	801ddc6 <_strtod_l+0x76>
 801e310:	00004e1f 	.word	0x00004e1f
 801e314:	08025006 	.word	0x08025006
 801e318:	08024ea4 	.word	0x08024ea4
 801e31c:	7ff00000 	.word	0x7ff00000
 801e320:	08024ffe 	.word	0x08024ffe
 801e324:	08025038 	.word	0x08025038
 801e328:	080252c4 	.word	0x080252c4
 801e32c:	080251b0 	.word	0x080251b0
 801e330:	08025188 	.word	0x08025188
 801e334:	fcb00000 	.word	0xfcb00000
 801e338:	7ca00000 	.word	0x7ca00000
 801e33c:	7c900000 	.word	0x7c900000
 801e340:	7fefffff 	.word	0x7fefffff
 801e344:	2310      	movs	r3, #16
 801e346:	0022      	movs	r2, r4
 801e348:	401a      	ands	r2, r3
 801e34a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e34c:	421c      	tst	r4, r3
 801e34e:	d001      	beq.n	801e354 <_strtod_l+0x604>
 801e350:	335a      	adds	r3, #90	@ 0x5a
 801e352:	9309      	str	r3, [sp, #36]	@ 0x24
 801e354:	0030      	movs	r0, r6
 801e356:	0039      	movs	r1, r7
 801e358:	2300      	movs	r3, #0
 801e35a:	4dbf      	ldr	r5, [pc, #764]	@ (801e658 <_strtod_l+0x908>)
 801e35c:	2201      	movs	r2, #1
 801e35e:	4214      	tst	r4, r2
 801e360:	d004      	beq.n	801e36c <_strtod_l+0x61c>
 801e362:	682a      	ldr	r2, [r5, #0]
 801e364:	686b      	ldr	r3, [r5, #4]
 801e366:	f7e4 f969 	bl	800263c <__aeabi_dmul>
 801e36a:	2301      	movs	r3, #1
 801e36c:	1064      	asrs	r4, r4, #1
 801e36e:	3508      	adds	r5, #8
 801e370:	2c00      	cmp	r4, #0
 801e372:	d1f3      	bne.n	801e35c <_strtod_l+0x60c>
 801e374:	2b00      	cmp	r3, #0
 801e376:	d001      	beq.n	801e37c <_strtod_l+0x62c>
 801e378:	0006      	movs	r6, r0
 801e37a:	000f      	movs	r7, r1
 801e37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e37e:	2b00      	cmp	r3, #0
 801e380:	d00d      	beq.n	801e39e <_strtod_l+0x64e>
 801e382:	236b      	movs	r3, #107	@ 0x6b
 801e384:	007a      	lsls	r2, r7, #1
 801e386:	0d52      	lsrs	r2, r2, #21
 801e388:	0039      	movs	r1, r7
 801e38a:	1a9b      	subs	r3, r3, r2
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	dd06      	ble.n	801e39e <_strtod_l+0x64e>
 801e390:	2b1f      	cmp	r3, #31
 801e392:	dd5a      	ble.n	801e44a <_strtod_l+0x6fa>
 801e394:	2600      	movs	r6, #0
 801e396:	2b34      	cmp	r3, #52	@ 0x34
 801e398:	dd50      	ble.n	801e43c <_strtod_l+0x6ec>
 801e39a:	27dc      	movs	r7, #220	@ 0xdc
 801e39c:	04bf      	lsls	r7, r7, #18
 801e39e:	2200      	movs	r2, #0
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	0030      	movs	r0, r6
 801e3a4:	0039      	movs	r1, r7
 801e3a6:	f7e2 f883 	bl	80004b0 <__aeabi_dcmpeq>
 801e3aa:	2800      	cmp	r0, #0
 801e3ac:	d1a1      	bne.n	801e2f2 <_strtod_l+0x5a2>
 801e3ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3b0:	9a08      	ldr	r2, [sp, #32]
 801e3b2:	9300      	str	r3, [sp, #0]
 801e3b4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e3b6:	9b06      	ldr	r3, [sp, #24]
 801e3b8:	9805      	ldr	r0, [sp, #20]
 801e3ba:	f002 fec5 	bl	8021148 <__s2b>
 801e3be:	900d      	str	r0, [sp, #52]	@ 0x34
 801e3c0:	2800      	cmp	r0, #0
 801e3c2:	d100      	bne.n	801e3c6 <_strtod_l+0x676>
 801e3c4:	e6f9      	b.n	801e1ba <_strtod_l+0x46a>
 801e3c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3c8:	9907      	ldr	r1, [sp, #28]
 801e3ca:	17da      	asrs	r2, r3, #31
 801e3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3ce:	1a5b      	subs	r3, r3, r1
 801e3d0:	401a      	ands	r2, r3
 801e3d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3d4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e3d6:	43db      	mvns	r3, r3
 801e3d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e3da:	17db      	asrs	r3, r3, #31
 801e3dc:	401a      	ands	r2, r3
 801e3de:	2300      	movs	r3, #0
 801e3e0:	921a      	str	r2, [sp, #104]	@ 0x68
 801e3e2:	9306      	str	r3, [sp, #24]
 801e3e4:	9307      	str	r3, [sp, #28]
 801e3e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3e8:	9805      	ldr	r0, [sp, #20]
 801e3ea:	6859      	ldr	r1, [r3, #4]
 801e3ec:	f002 fe00 	bl	8020ff0 <_Balloc>
 801e3f0:	9008      	str	r0, [sp, #32]
 801e3f2:	2800      	cmp	r0, #0
 801e3f4:	d100      	bne.n	801e3f8 <_strtod_l+0x6a8>
 801e3f6:	e6e5      	b.n	801e1c4 <_strtod_l+0x474>
 801e3f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3fa:	300c      	adds	r0, #12
 801e3fc:	0019      	movs	r1, r3
 801e3fe:	691a      	ldr	r2, [r3, #16]
 801e400:	310c      	adds	r1, #12
 801e402:	3202      	adds	r2, #2
 801e404:	0092      	lsls	r2, r2, #2
 801e406:	f001 faef 	bl	801f9e8 <memcpy>
 801e40a:	ab20      	add	r3, sp, #128	@ 0x80
 801e40c:	9301      	str	r3, [sp, #4]
 801e40e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e410:	9300      	str	r3, [sp, #0]
 801e412:	0032      	movs	r2, r6
 801e414:	003b      	movs	r3, r7
 801e416:	9805      	ldr	r0, [sp, #20]
 801e418:	9610      	str	r6, [sp, #64]	@ 0x40
 801e41a:	9711      	str	r7, [sp, #68]	@ 0x44
 801e41c:	f003 f9e4 	bl	80217e8 <__d2b>
 801e420:	901e      	str	r0, [sp, #120]	@ 0x78
 801e422:	2800      	cmp	r0, #0
 801e424:	d100      	bne.n	801e428 <_strtod_l+0x6d8>
 801e426:	e6cd      	b.n	801e1c4 <_strtod_l+0x474>
 801e428:	2101      	movs	r1, #1
 801e42a:	9805      	ldr	r0, [sp, #20]
 801e42c:	f002 ff28 	bl	8021280 <__i2b>
 801e430:	9007      	str	r0, [sp, #28]
 801e432:	2800      	cmp	r0, #0
 801e434:	d10e      	bne.n	801e454 <_strtod_l+0x704>
 801e436:	2300      	movs	r3, #0
 801e438:	9307      	str	r3, [sp, #28]
 801e43a:	e6c3      	b.n	801e1c4 <_strtod_l+0x474>
 801e43c:	234b      	movs	r3, #75	@ 0x4b
 801e43e:	1a9a      	subs	r2, r3, r2
 801e440:	3b4c      	subs	r3, #76	@ 0x4c
 801e442:	4093      	lsls	r3, r2
 801e444:	4019      	ands	r1, r3
 801e446:	000f      	movs	r7, r1
 801e448:	e7a9      	b.n	801e39e <_strtod_l+0x64e>
 801e44a:	2201      	movs	r2, #1
 801e44c:	4252      	negs	r2, r2
 801e44e:	409a      	lsls	r2, r3
 801e450:	4016      	ands	r6, r2
 801e452:	e7a4      	b.n	801e39e <_strtod_l+0x64e>
 801e454:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e456:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e458:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801e45a:	1ad4      	subs	r4, r2, r3
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	db01      	blt.n	801e464 <_strtod_l+0x714>
 801e460:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e462:	195d      	adds	r5, r3, r5
 801e464:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e466:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e468:	1a5b      	subs	r3, r3, r1
 801e46a:	2136      	movs	r1, #54	@ 0x36
 801e46c:	189b      	adds	r3, r3, r2
 801e46e:	1a8a      	subs	r2, r1, r2
 801e470:	497a      	ldr	r1, [pc, #488]	@ (801e65c <_strtod_l+0x90c>)
 801e472:	2001      	movs	r0, #1
 801e474:	468c      	mov	ip, r1
 801e476:	2100      	movs	r1, #0
 801e478:	3b01      	subs	r3, #1
 801e47a:	9116      	str	r1, [sp, #88]	@ 0x58
 801e47c:	9014      	str	r0, [sp, #80]	@ 0x50
 801e47e:	4563      	cmp	r3, ip
 801e480:	da06      	bge.n	801e490 <_strtod_l+0x740>
 801e482:	4661      	mov	r1, ip
 801e484:	1ac9      	subs	r1, r1, r3
 801e486:	1a52      	subs	r2, r2, r1
 801e488:	291f      	cmp	r1, #31
 801e48a:	dc3f      	bgt.n	801e50c <_strtod_l+0x7bc>
 801e48c:	4088      	lsls	r0, r1
 801e48e:	9014      	str	r0, [sp, #80]	@ 0x50
 801e490:	18ab      	adds	r3, r5, r2
 801e492:	930e      	str	r3, [sp, #56]	@ 0x38
 801e494:	18a4      	adds	r4, r4, r2
 801e496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e498:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e49a:	191c      	adds	r4, r3, r4
 801e49c:	002b      	movs	r3, r5
 801e49e:	4295      	cmp	r5, r2
 801e4a0:	dd00      	ble.n	801e4a4 <_strtod_l+0x754>
 801e4a2:	0013      	movs	r3, r2
 801e4a4:	42a3      	cmp	r3, r4
 801e4a6:	dd00      	ble.n	801e4aa <_strtod_l+0x75a>
 801e4a8:	0023      	movs	r3, r4
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	dd04      	ble.n	801e4b8 <_strtod_l+0x768>
 801e4ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e4b0:	1ae4      	subs	r4, r4, r3
 801e4b2:	1ad2      	subs	r2, r2, r3
 801e4b4:	920e      	str	r2, [sp, #56]	@ 0x38
 801e4b6:	1aed      	subs	r5, r5, r3
 801e4b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	dd16      	ble.n	801e4ec <_strtod_l+0x79c>
 801e4be:	001a      	movs	r2, r3
 801e4c0:	9907      	ldr	r1, [sp, #28]
 801e4c2:	9805      	ldr	r0, [sp, #20]
 801e4c4:	f002 ffa6 	bl	8021414 <__pow5mult>
 801e4c8:	9007      	str	r0, [sp, #28]
 801e4ca:	2800      	cmp	r0, #0
 801e4cc:	d0b3      	beq.n	801e436 <_strtod_l+0x6e6>
 801e4ce:	0001      	movs	r1, r0
 801e4d0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e4d2:	9805      	ldr	r0, [sp, #20]
 801e4d4:	f002 feec 	bl	80212b0 <__multiply>
 801e4d8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e4da:	2800      	cmp	r0, #0
 801e4dc:	d100      	bne.n	801e4e0 <_strtod_l+0x790>
 801e4de:	e671      	b.n	801e1c4 <_strtod_l+0x474>
 801e4e0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e4e2:	9805      	ldr	r0, [sp, #20]
 801e4e4:	f002 fdc8 	bl	8021078 <_Bfree>
 801e4e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4ea:	931e      	str	r3, [sp, #120]	@ 0x78
 801e4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	dc12      	bgt.n	801e518 <_strtod_l+0x7c8>
 801e4f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	dd18      	ble.n	801e52a <_strtod_l+0x7da>
 801e4f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e4fa:	9908      	ldr	r1, [sp, #32]
 801e4fc:	9805      	ldr	r0, [sp, #20]
 801e4fe:	f002 ff89 	bl	8021414 <__pow5mult>
 801e502:	9008      	str	r0, [sp, #32]
 801e504:	2800      	cmp	r0, #0
 801e506:	d110      	bne.n	801e52a <_strtod_l+0x7da>
 801e508:	2300      	movs	r3, #0
 801e50a:	e65a      	b.n	801e1c2 <_strtod_l+0x472>
 801e50c:	4954      	ldr	r1, [pc, #336]	@ (801e660 <_strtod_l+0x910>)
 801e50e:	1acb      	subs	r3, r1, r3
 801e510:	0001      	movs	r1, r0
 801e512:	4099      	lsls	r1, r3
 801e514:	9116      	str	r1, [sp, #88]	@ 0x58
 801e516:	e7ba      	b.n	801e48e <_strtod_l+0x73e>
 801e518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e51a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e51c:	9805      	ldr	r0, [sp, #20]
 801e51e:	f002 ffd5 	bl	80214cc <__lshift>
 801e522:	901e      	str	r0, [sp, #120]	@ 0x78
 801e524:	2800      	cmp	r0, #0
 801e526:	d1e4      	bne.n	801e4f2 <_strtod_l+0x7a2>
 801e528:	e64c      	b.n	801e1c4 <_strtod_l+0x474>
 801e52a:	2c00      	cmp	r4, #0
 801e52c:	dd07      	ble.n	801e53e <_strtod_l+0x7ee>
 801e52e:	0022      	movs	r2, r4
 801e530:	9908      	ldr	r1, [sp, #32]
 801e532:	9805      	ldr	r0, [sp, #20]
 801e534:	f002 ffca 	bl	80214cc <__lshift>
 801e538:	9008      	str	r0, [sp, #32]
 801e53a:	2800      	cmp	r0, #0
 801e53c:	d0e4      	beq.n	801e508 <_strtod_l+0x7b8>
 801e53e:	2d00      	cmp	r5, #0
 801e540:	dd08      	ble.n	801e554 <_strtod_l+0x804>
 801e542:	002a      	movs	r2, r5
 801e544:	9907      	ldr	r1, [sp, #28]
 801e546:	9805      	ldr	r0, [sp, #20]
 801e548:	f002 ffc0 	bl	80214cc <__lshift>
 801e54c:	9007      	str	r0, [sp, #28]
 801e54e:	2800      	cmp	r0, #0
 801e550:	d100      	bne.n	801e554 <_strtod_l+0x804>
 801e552:	e637      	b.n	801e1c4 <_strtod_l+0x474>
 801e554:	9a08      	ldr	r2, [sp, #32]
 801e556:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e558:	9805      	ldr	r0, [sp, #20]
 801e55a:	f003 f83f 	bl	80215dc <__mdiff>
 801e55e:	9006      	str	r0, [sp, #24]
 801e560:	2800      	cmp	r0, #0
 801e562:	d100      	bne.n	801e566 <_strtod_l+0x816>
 801e564:	e62e      	b.n	801e1c4 <_strtod_l+0x474>
 801e566:	68c3      	ldr	r3, [r0, #12]
 801e568:	9907      	ldr	r1, [sp, #28]
 801e56a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e56c:	2300      	movs	r3, #0
 801e56e:	60c3      	str	r3, [r0, #12]
 801e570:	f003 f818 	bl	80215a4 <__mcmp>
 801e574:	2800      	cmp	r0, #0
 801e576:	da3b      	bge.n	801e5f0 <_strtod_l+0x8a0>
 801e578:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e57a:	4333      	orrs	r3, r6
 801e57c:	d167      	bne.n	801e64e <_strtod_l+0x8fe>
 801e57e:	033b      	lsls	r3, r7, #12
 801e580:	d165      	bne.n	801e64e <_strtod_l+0x8fe>
 801e582:	22d6      	movs	r2, #214	@ 0xd6
 801e584:	4b37      	ldr	r3, [pc, #220]	@ (801e664 <_strtod_l+0x914>)
 801e586:	04d2      	lsls	r2, r2, #19
 801e588:	403b      	ands	r3, r7
 801e58a:	4293      	cmp	r3, r2
 801e58c:	d95f      	bls.n	801e64e <_strtod_l+0x8fe>
 801e58e:	9b06      	ldr	r3, [sp, #24]
 801e590:	695b      	ldr	r3, [r3, #20]
 801e592:	2b00      	cmp	r3, #0
 801e594:	d103      	bne.n	801e59e <_strtod_l+0x84e>
 801e596:	9b06      	ldr	r3, [sp, #24]
 801e598:	691b      	ldr	r3, [r3, #16]
 801e59a:	2b01      	cmp	r3, #1
 801e59c:	dd57      	ble.n	801e64e <_strtod_l+0x8fe>
 801e59e:	9906      	ldr	r1, [sp, #24]
 801e5a0:	2201      	movs	r2, #1
 801e5a2:	9805      	ldr	r0, [sp, #20]
 801e5a4:	f002 ff92 	bl	80214cc <__lshift>
 801e5a8:	9907      	ldr	r1, [sp, #28]
 801e5aa:	9006      	str	r0, [sp, #24]
 801e5ac:	f002 fffa 	bl	80215a4 <__mcmp>
 801e5b0:	2800      	cmp	r0, #0
 801e5b2:	dd4c      	ble.n	801e64e <_strtod_l+0x8fe>
 801e5b4:	4b2b      	ldr	r3, [pc, #172]	@ (801e664 <_strtod_l+0x914>)
 801e5b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5b8:	403b      	ands	r3, r7
 801e5ba:	2a00      	cmp	r2, #0
 801e5bc:	d074      	beq.n	801e6a8 <_strtod_l+0x958>
 801e5be:	22d6      	movs	r2, #214	@ 0xd6
 801e5c0:	04d2      	lsls	r2, r2, #19
 801e5c2:	4293      	cmp	r3, r2
 801e5c4:	d870      	bhi.n	801e6a8 <_strtod_l+0x958>
 801e5c6:	22dc      	movs	r2, #220	@ 0xdc
 801e5c8:	0492      	lsls	r2, r2, #18
 801e5ca:	4293      	cmp	r3, r2
 801e5cc:	d800      	bhi.n	801e5d0 <_strtod_l+0x880>
 801e5ce:	e695      	b.n	801e2fc <_strtod_l+0x5ac>
 801e5d0:	0030      	movs	r0, r6
 801e5d2:	0039      	movs	r1, r7
 801e5d4:	4b24      	ldr	r3, [pc, #144]	@ (801e668 <_strtod_l+0x918>)
 801e5d6:	2200      	movs	r2, #0
 801e5d8:	f7e4 f830 	bl	800263c <__aeabi_dmul>
 801e5dc:	4b21      	ldr	r3, [pc, #132]	@ (801e664 <_strtod_l+0x914>)
 801e5de:	0006      	movs	r6, r0
 801e5e0:	000f      	movs	r7, r1
 801e5e2:	420b      	tst	r3, r1
 801e5e4:	d000      	beq.n	801e5e8 <_strtod_l+0x898>
 801e5e6:	e5f6      	b.n	801e1d6 <_strtod_l+0x486>
 801e5e8:	2322      	movs	r3, #34	@ 0x22
 801e5ea:	9a05      	ldr	r2, [sp, #20]
 801e5ec:	6013      	str	r3, [r2, #0]
 801e5ee:	e5f2      	b.n	801e1d6 <_strtod_l+0x486>
 801e5f0:	970e      	str	r7, [sp, #56]	@ 0x38
 801e5f2:	2800      	cmp	r0, #0
 801e5f4:	d175      	bne.n	801e6e2 <_strtod_l+0x992>
 801e5f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e5f8:	033b      	lsls	r3, r7, #12
 801e5fa:	0b1b      	lsrs	r3, r3, #12
 801e5fc:	2a00      	cmp	r2, #0
 801e5fe:	d039      	beq.n	801e674 <_strtod_l+0x924>
 801e600:	4a1a      	ldr	r2, [pc, #104]	@ (801e66c <_strtod_l+0x91c>)
 801e602:	4293      	cmp	r3, r2
 801e604:	d138      	bne.n	801e678 <_strtod_l+0x928>
 801e606:	2101      	movs	r1, #1
 801e608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e60a:	4249      	negs	r1, r1
 801e60c:	0032      	movs	r2, r6
 801e60e:	0008      	movs	r0, r1
 801e610:	2b00      	cmp	r3, #0
 801e612:	d00b      	beq.n	801e62c <_strtod_l+0x8dc>
 801e614:	24d4      	movs	r4, #212	@ 0xd4
 801e616:	4b13      	ldr	r3, [pc, #76]	@ (801e664 <_strtod_l+0x914>)
 801e618:	0008      	movs	r0, r1
 801e61a:	403b      	ands	r3, r7
 801e61c:	04e4      	lsls	r4, r4, #19
 801e61e:	42a3      	cmp	r3, r4
 801e620:	d804      	bhi.n	801e62c <_strtod_l+0x8dc>
 801e622:	306c      	adds	r0, #108	@ 0x6c
 801e624:	0d1b      	lsrs	r3, r3, #20
 801e626:	1ac3      	subs	r3, r0, r3
 801e628:	4099      	lsls	r1, r3
 801e62a:	0008      	movs	r0, r1
 801e62c:	4282      	cmp	r2, r0
 801e62e:	d123      	bne.n	801e678 <_strtod_l+0x928>
 801e630:	4b0f      	ldr	r3, [pc, #60]	@ (801e670 <_strtod_l+0x920>)
 801e632:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e634:	4299      	cmp	r1, r3
 801e636:	d102      	bne.n	801e63e <_strtod_l+0x8ee>
 801e638:	3201      	adds	r2, #1
 801e63a:	d100      	bne.n	801e63e <_strtod_l+0x8ee>
 801e63c:	e5c2      	b.n	801e1c4 <_strtod_l+0x474>
 801e63e:	4b09      	ldr	r3, [pc, #36]	@ (801e664 <_strtod_l+0x914>)
 801e640:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e642:	2600      	movs	r6, #0
 801e644:	401a      	ands	r2, r3
 801e646:	0013      	movs	r3, r2
 801e648:	2280      	movs	r2, #128	@ 0x80
 801e64a:	0352      	lsls	r2, r2, #13
 801e64c:	189f      	adds	r7, r3, r2
 801e64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e650:	2b00      	cmp	r3, #0
 801e652:	d1bd      	bne.n	801e5d0 <_strtod_l+0x880>
 801e654:	e5bf      	b.n	801e1d6 <_strtod_l+0x486>
 801e656:	46c0      	nop			@ (mov r8, r8)
 801e658:	08024ed0 	.word	0x08024ed0
 801e65c:	fffffc02 	.word	0xfffffc02
 801e660:	fffffbe2 	.word	0xfffffbe2
 801e664:	7ff00000 	.word	0x7ff00000
 801e668:	39500000 	.word	0x39500000
 801e66c:	000fffff 	.word	0x000fffff
 801e670:	7fefffff 	.word	0x7fefffff
 801e674:	4333      	orrs	r3, r6
 801e676:	d09d      	beq.n	801e5b4 <_strtod_l+0x864>
 801e678:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d01c      	beq.n	801e6b8 <_strtod_l+0x968>
 801e67e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e680:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e682:	4213      	tst	r3, r2
 801e684:	d0e3      	beq.n	801e64e <_strtod_l+0x8fe>
 801e686:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e688:	0030      	movs	r0, r6
 801e68a:	0039      	movs	r1, r7
 801e68c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d016      	beq.n	801e6c0 <_strtod_l+0x970>
 801e692:	f7ff fb45 	bl	801dd20 <sulp>
 801e696:	0002      	movs	r2, r0
 801e698:	000b      	movs	r3, r1
 801e69a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e69c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e69e:	f7e3 f825 	bl	80016ec <__aeabi_dadd>
 801e6a2:	0006      	movs	r6, r0
 801e6a4:	000f      	movs	r7, r1
 801e6a6:	e7d2      	b.n	801e64e <_strtod_l+0x8fe>
 801e6a8:	2601      	movs	r6, #1
 801e6aa:	4a92      	ldr	r2, [pc, #584]	@ (801e8f4 <_strtod_l+0xba4>)
 801e6ac:	4276      	negs	r6, r6
 801e6ae:	189b      	adds	r3, r3, r2
 801e6b0:	4a91      	ldr	r2, [pc, #580]	@ (801e8f8 <_strtod_l+0xba8>)
 801e6b2:	431a      	orrs	r2, r3
 801e6b4:	0017      	movs	r7, r2
 801e6b6:	e7ca      	b.n	801e64e <_strtod_l+0x8fe>
 801e6b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e6ba:	4233      	tst	r3, r6
 801e6bc:	d0c7      	beq.n	801e64e <_strtod_l+0x8fe>
 801e6be:	e7e2      	b.n	801e686 <_strtod_l+0x936>
 801e6c0:	f7ff fb2e 	bl	801dd20 <sulp>
 801e6c4:	0002      	movs	r2, r0
 801e6c6:	000b      	movs	r3, r1
 801e6c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e6ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e6cc:	f7e4 fa7e 	bl	8002bcc <__aeabi_dsub>
 801e6d0:	2200      	movs	r2, #0
 801e6d2:	2300      	movs	r3, #0
 801e6d4:	0006      	movs	r6, r0
 801e6d6:	000f      	movs	r7, r1
 801e6d8:	f7e1 feea 	bl	80004b0 <__aeabi_dcmpeq>
 801e6dc:	2800      	cmp	r0, #0
 801e6de:	d0b6      	beq.n	801e64e <_strtod_l+0x8fe>
 801e6e0:	e60c      	b.n	801e2fc <_strtod_l+0x5ac>
 801e6e2:	9907      	ldr	r1, [sp, #28]
 801e6e4:	9806      	ldr	r0, [sp, #24]
 801e6e6:	f003 f8df 	bl	80218a8 <__ratio>
 801e6ea:	2380      	movs	r3, #128	@ 0x80
 801e6ec:	2200      	movs	r2, #0
 801e6ee:	05db      	lsls	r3, r3, #23
 801e6f0:	0004      	movs	r4, r0
 801e6f2:	000d      	movs	r5, r1
 801e6f4:	f7e1 feec 	bl	80004d0 <__aeabi_dcmple>
 801e6f8:	2800      	cmp	r0, #0
 801e6fa:	d06c      	beq.n	801e7d6 <_strtod_l+0xa86>
 801e6fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d177      	bne.n	801e7f2 <_strtod_l+0xaa2>
 801e702:	2e00      	cmp	r6, #0
 801e704:	d157      	bne.n	801e7b6 <_strtod_l+0xa66>
 801e706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e708:	031b      	lsls	r3, r3, #12
 801e70a:	d15a      	bne.n	801e7c2 <_strtod_l+0xa72>
 801e70c:	2200      	movs	r2, #0
 801e70e:	0020      	movs	r0, r4
 801e710:	0029      	movs	r1, r5
 801e712:	4b7a      	ldr	r3, [pc, #488]	@ (801e8fc <_strtod_l+0xbac>)
 801e714:	f7e1 fed2 	bl	80004bc <__aeabi_dcmplt>
 801e718:	2800      	cmp	r0, #0
 801e71a:	d159      	bne.n	801e7d0 <_strtod_l+0xa80>
 801e71c:	0020      	movs	r0, r4
 801e71e:	0029      	movs	r1, r5
 801e720:	2200      	movs	r2, #0
 801e722:	4b77      	ldr	r3, [pc, #476]	@ (801e900 <_strtod_l+0xbb0>)
 801e724:	f7e3 ff8a 	bl	800263c <__aeabi_dmul>
 801e728:	0004      	movs	r4, r0
 801e72a:	000d      	movs	r5, r1
 801e72c:	2380      	movs	r3, #128	@ 0x80
 801e72e:	061b      	lsls	r3, r3, #24
 801e730:	18eb      	adds	r3, r5, r3
 801e732:	940a      	str	r4, [sp, #40]	@ 0x28
 801e734:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e736:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e73a:	9214      	str	r2, [sp, #80]	@ 0x50
 801e73c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e73e:	4a71      	ldr	r2, [pc, #452]	@ (801e904 <_strtod_l+0xbb4>)
 801e740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e742:	4013      	ands	r3, r2
 801e744:	9316      	str	r3, [sp, #88]	@ 0x58
 801e746:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e748:	4b6f      	ldr	r3, [pc, #444]	@ (801e908 <_strtod_l+0xbb8>)
 801e74a:	429a      	cmp	r2, r3
 801e74c:	d000      	beq.n	801e750 <_strtod_l+0xa00>
 801e74e:	e087      	b.n	801e860 <_strtod_l+0xb10>
 801e750:	4a6e      	ldr	r2, [pc, #440]	@ (801e90c <_strtod_l+0xbbc>)
 801e752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e754:	4694      	mov	ip, r2
 801e756:	4463      	add	r3, ip
 801e758:	001f      	movs	r7, r3
 801e75a:	0030      	movs	r0, r6
 801e75c:	0019      	movs	r1, r3
 801e75e:	f002 ffd7 	bl	8021710 <__ulp>
 801e762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e766:	f7e3 ff69 	bl	800263c <__aeabi_dmul>
 801e76a:	0032      	movs	r2, r6
 801e76c:	003b      	movs	r3, r7
 801e76e:	f7e2 ffbd 	bl	80016ec <__aeabi_dadd>
 801e772:	4a64      	ldr	r2, [pc, #400]	@ (801e904 <_strtod_l+0xbb4>)
 801e774:	4b66      	ldr	r3, [pc, #408]	@ (801e910 <_strtod_l+0xbc0>)
 801e776:	0006      	movs	r6, r0
 801e778:	400a      	ands	r2, r1
 801e77a:	429a      	cmp	r2, r3
 801e77c:	d940      	bls.n	801e800 <_strtod_l+0xab0>
 801e77e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e780:	4a64      	ldr	r2, [pc, #400]	@ (801e914 <_strtod_l+0xbc4>)
 801e782:	4293      	cmp	r3, r2
 801e784:	d103      	bne.n	801e78e <_strtod_l+0xa3e>
 801e786:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e788:	3301      	adds	r3, #1
 801e78a:	d100      	bne.n	801e78e <_strtod_l+0xa3e>
 801e78c:	e51a      	b.n	801e1c4 <_strtod_l+0x474>
 801e78e:	2601      	movs	r6, #1
 801e790:	4f60      	ldr	r7, [pc, #384]	@ (801e914 <_strtod_l+0xbc4>)
 801e792:	4276      	negs	r6, r6
 801e794:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e796:	9805      	ldr	r0, [sp, #20]
 801e798:	f002 fc6e 	bl	8021078 <_Bfree>
 801e79c:	9908      	ldr	r1, [sp, #32]
 801e79e:	9805      	ldr	r0, [sp, #20]
 801e7a0:	f002 fc6a 	bl	8021078 <_Bfree>
 801e7a4:	9907      	ldr	r1, [sp, #28]
 801e7a6:	9805      	ldr	r0, [sp, #20]
 801e7a8:	f002 fc66 	bl	8021078 <_Bfree>
 801e7ac:	9906      	ldr	r1, [sp, #24]
 801e7ae:	9805      	ldr	r0, [sp, #20]
 801e7b0:	f002 fc62 	bl	8021078 <_Bfree>
 801e7b4:	e617      	b.n	801e3e6 <_strtod_l+0x696>
 801e7b6:	2e01      	cmp	r6, #1
 801e7b8:	d103      	bne.n	801e7c2 <_strtod_l+0xa72>
 801e7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d100      	bne.n	801e7c2 <_strtod_l+0xa72>
 801e7c0:	e59c      	b.n	801e2fc <_strtod_l+0x5ac>
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	4c54      	ldr	r4, [pc, #336]	@ (801e918 <_strtod_l+0xbc8>)
 801e7c6:	4d4d      	ldr	r5, [pc, #308]	@ (801e8fc <_strtod_l+0xbac>)
 801e7c8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e7cc:	2400      	movs	r4, #0
 801e7ce:	e7b2      	b.n	801e736 <_strtod_l+0x9e6>
 801e7d0:	2400      	movs	r4, #0
 801e7d2:	4d4b      	ldr	r5, [pc, #300]	@ (801e900 <_strtod_l+0xbb0>)
 801e7d4:	e7aa      	b.n	801e72c <_strtod_l+0x9dc>
 801e7d6:	0020      	movs	r0, r4
 801e7d8:	0029      	movs	r1, r5
 801e7da:	4b49      	ldr	r3, [pc, #292]	@ (801e900 <_strtod_l+0xbb0>)
 801e7dc:	2200      	movs	r2, #0
 801e7de:	f7e3 ff2d 	bl	800263c <__aeabi_dmul>
 801e7e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7e4:	0004      	movs	r4, r0
 801e7e6:	000d      	movs	r5, r1
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d09f      	beq.n	801e72c <_strtod_l+0x9dc>
 801e7ec:	940a      	str	r4, [sp, #40]	@ 0x28
 801e7ee:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e7f0:	e7a1      	b.n	801e736 <_strtod_l+0x9e6>
 801e7f2:	2300      	movs	r3, #0
 801e7f4:	4c41      	ldr	r4, [pc, #260]	@ (801e8fc <_strtod_l+0xbac>)
 801e7f6:	0025      	movs	r5, r4
 801e7f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e7fc:	001c      	movs	r4, r3
 801e7fe:	e79a      	b.n	801e736 <_strtod_l+0x9e6>
 801e800:	23d4      	movs	r3, #212	@ 0xd4
 801e802:	049b      	lsls	r3, r3, #18
 801e804:	18cf      	adds	r7, r1, r3
 801e806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e808:	9710      	str	r7, [sp, #64]	@ 0x40
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d1c2      	bne.n	801e794 <_strtod_l+0xa44>
 801e80e:	4b3d      	ldr	r3, [pc, #244]	@ (801e904 <_strtod_l+0xbb4>)
 801e810:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e812:	403b      	ands	r3, r7
 801e814:	429a      	cmp	r2, r3
 801e816:	d1bd      	bne.n	801e794 <_strtod_l+0xa44>
 801e818:	0020      	movs	r0, r4
 801e81a:	0029      	movs	r1, r5
 801e81c:	f7e1 ff34 	bl	8000688 <__aeabi_d2lz>
 801e820:	f7e1 ff6c 	bl	80006fc <__aeabi_l2d>
 801e824:	0002      	movs	r2, r0
 801e826:	000b      	movs	r3, r1
 801e828:	0020      	movs	r0, r4
 801e82a:	0029      	movs	r1, r5
 801e82c:	f7e4 f9ce 	bl	8002bcc <__aeabi_dsub>
 801e830:	033c      	lsls	r4, r7, #12
 801e832:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e834:	0b24      	lsrs	r4, r4, #12
 801e836:	4334      	orrs	r4, r6
 801e838:	900e      	str	r0, [sp, #56]	@ 0x38
 801e83a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e83c:	4a37      	ldr	r2, [pc, #220]	@ (801e91c <_strtod_l+0xbcc>)
 801e83e:	431c      	orrs	r4, r3
 801e840:	d052      	beq.n	801e8e8 <_strtod_l+0xb98>
 801e842:	4b37      	ldr	r3, [pc, #220]	@ (801e920 <_strtod_l+0xbd0>)
 801e844:	f7e1 fe3a 	bl	80004bc <__aeabi_dcmplt>
 801e848:	2800      	cmp	r0, #0
 801e84a:	d000      	beq.n	801e84e <_strtod_l+0xafe>
 801e84c:	e4c3      	b.n	801e1d6 <_strtod_l+0x486>
 801e84e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e850:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e852:	4a34      	ldr	r2, [pc, #208]	@ (801e924 <_strtod_l+0xbd4>)
 801e854:	4b2a      	ldr	r3, [pc, #168]	@ (801e900 <_strtod_l+0xbb0>)
 801e856:	f7e1 fe45 	bl	80004e4 <__aeabi_dcmpgt>
 801e85a:	2800      	cmp	r0, #0
 801e85c:	d09a      	beq.n	801e794 <_strtod_l+0xa44>
 801e85e:	e4ba      	b.n	801e1d6 <_strtod_l+0x486>
 801e860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e862:	2b00      	cmp	r3, #0
 801e864:	d02a      	beq.n	801e8bc <_strtod_l+0xb6c>
 801e866:	23d4      	movs	r3, #212	@ 0xd4
 801e868:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e86a:	04db      	lsls	r3, r3, #19
 801e86c:	429a      	cmp	r2, r3
 801e86e:	d825      	bhi.n	801e8bc <_strtod_l+0xb6c>
 801e870:	0020      	movs	r0, r4
 801e872:	0029      	movs	r1, r5
 801e874:	4a2c      	ldr	r2, [pc, #176]	@ (801e928 <_strtod_l+0xbd8>)
 801e876:	4b2d      	ldr	r3, [pc, #180]	@ (801e92c <_strtod_l+0xbdc>)
 801e878:	f7e1 fe2a 	bl	80004d0 <__aeabi_dcmple>
 801e87c:	2800      	cmp	r0, #0
 801e87e:	d016      	beq.n	801e8ae <_strtod_l+0xb5e>
 801e880:	0020      	movs	r0, r4
 801e882:	0029      	movs	r1, r5
 801e884:	f7e1 fee2 	bl	800064c <__aeabi_d2uiz>
 801e888:	2800      	cmp	r0, #0
 801e88a:	d100      	bne.n	801e88e <_strtod_l+0xb3e>
 801e88c:	3001      	adds	r0, #1
 801e88e:	f7e4 fdc5 	bl	800341c <__aeabi_ui2d>
 801e892:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e894:	0004      	movs	r4, r0
 801e896:	000d      	movs	r5, r1
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d122      	bne.n	801e8e2 <_strtod_l+0xb92>
 801e89c:	2380      	movs	r3, #128	@ 0x80
 801e89e:	061b      	lsls	r3, r3, #24
 801e8a0:	18cb      	adds	r3, r1, r3
 801e8a2:	9018      	str	r0, [sp, #96]	@ 0x60
 801e8a4:	9319      	str	r3, [sp, #100]	@ 0x64
 801e8a6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e8aa:	9214      	str	r2, [sp, #80]	@ 0x50
 801e8ac:	9315      	str	r3, [sp, #84]	@ 0x54
 801e8ae:	22d6      	movs	r2, #214	@ 0xd6
 801e8b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e8b2:	04d2      	lsls	r2, r2, #19
 801e8b4:	189b      	adds	r3, r3, r2
 801e8b6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e8b8:	1a9b      	subs	r3, r3, r2
 801e8ba:	9315      	str	r3, [sp, #84]	@ 0x54
 801e8bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e8be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e8c0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e8c2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e8c4:	f002 ff24 	bl	8021710 <__ulp>
 801e8c8:	0002      	movs	r2, r0
 801e8ca:	000b      	movs	r3, r1
 801e8cc:	0030      	movs	r0, r6
 801e8ce:	0039      	movs	r1, r7
 801e8d0:	f7e3 feb4 	bl	800263c <__aeabi_dmul>
 801e8d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e8d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e8d8:	f7e2 ff08 	bl	80016ec <__aeabi_dadd>
 801e8dc:	0006      	movs	r6, r0
 801e8de:	000f      	movs	r7, r1
 801e8e0:	e791      	b.n	801e806 <_strtod_l+0xab6>
 801e8e2:	9418      	str	r4, [sp, #96]	@ 0x60
 801e8e4:	9519      	str	r5, [sp, #100]	@ 0x64
 801e8e6:	e7de      	b.n	801e8a6 <_strtod_l+0xb56>
 801e8e8:	4b11      	ldr	r3, [pc, #68]	@ (801e930 <_strtod_l+0xbe0>)
 801e8ea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e8ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e8ee:	f7e1 fde5 	bl	80004bc <__aeabi_dcmplt>
 801e8f2:	e7b2      	b.n	801e85a <_strtod_l+0xb0a>
 801e8f4:	fff00000 	.word	0xfff00000
 801e8f8:	000fffff 	.word	0x000fffff
 801e8fc:	3ff00000 	.word	0x3ff00000
 801e900:	3fe00000 	.word	0x3fe00000
 801e904:	7ff00000 	.word	0x7ff00000
 801e908:	7fe00000 	.word	0x7fe00000
 801e90c:	fcb00000 	.word	0xfcb00000
 801e910:	7c9fffff 	.word	0x7c9fffff
 801e914:	7fefffff 	.word	0x7fefffff
 801e918:	bff00000 	.word	0xbff00000
 801e91c:	94a03595 	.word	0x94a03595
 801e920:	3fdfffff 	.word	0x3fdfffff
 801e924:	35afe535 	.word	0x35afe535
 801e928:	ffc00000 	.word	0xffc00000
 801e92c:	41dfffff 	.word	0x41dfffff
 801e930:	3fcfffff 	.word	0x3fcfffff

0801e934 <strtod>:
 801e934:	b510      	push	{r4, lr}
 801e936:	4c04      	ldr	r4, [pc, #16]	@ (801e948 <strtod+0x14>)
 801e938:	000a      	movs	r2, r1
 801e93a:	0001      	movs	r1, r0
 801e93c:	4b03      	ldr	r3, [pc, #12]	@ (801e94c <strtod+0x18>)
 801e93e:	6820      	ldr	r0, [r4, #0]
 801e940:	f7ff fa06 	bl	801dd50 <_strtod_l>
 801e944:	bd10      	pop	{r4, pc}
 801e946:	46c0      	nop			@ (mov r8, r8)
 801e948:	200003c8 	.word	0x200003c8
 801e94c:	2000025c 	.word	0x2000025c

0801e950 <_strtol_l.constprop.0>:
 801e950:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e952:	b085      	sub	sp, #20
 801e954:	0017      	movs	r7, r2
 801e956:	001e      	movs	r6, r3
 801e958:	9003      	str	r0, [sp, #12]
 801e95a:	9101      	str	r1, [sp, #4]
 801e95c:	2b24      	cmp	r3, #36	@ 0x24
 801e95e:	d844      	bhi.n	801e9ea <_strtol_l.constprop.0+0x9a>
 801e960:	000c      	movs	r4, r1
 801e962:	2b01      	cmp	r3, #1
 801e964:	d041      	beq.n	801e9ea <_strtol_l.constprop.0+0x9a>
 801e966:	4b3d      	ldr	r3, [pc, #244]	@ (801ea5c <_strtol_l.constprop.0+0x10c>)
 801e968:	2208      	movs	r2, #8
 801e96a:	469c      	mov	ip, r3
 801e96c:	0023      	movs	r3, r4
 801e96e:	4661      	mov	r1, ip
 801e970:	781d      	ldrb	r5, [r3, #0]
 801e972:	3401      	adds	r4, #1
 801e974:	5d48      	ldrb	r0, [r1, r5]
 801e976:	0001      	movs	r1, r0
 801e978:	4011      	ands	r1, r2
 801e97a:	4210      	tst	r0, r2
 801e97c:	d1f6      	bne.n	801e96c <_strtol_l.constprop.0+0x1c>
 801e97e:	2d2d      	cmp	r5, #45	@ 0x2d
 801e980:	d13a      	bne.n	801e9f8 <_strtol_l.constprop.0+0xa8>
 801e982:	7825      	ldrb	r5, [r4, #0]
 801e984:	1c9c      	adds	r4, r3, #2
 801e986:	2301      	movs	r3, #1
 801e988:	9300      	str	r3, [sp, #0]
 801e98a:	2210      	movs	r2, #16
 801e98c:	0033      	movs	r3, r6
 801e98e:	4393      	bics	r3, r2
 801e990:	d109      	bne.n	801e9a6 <_strtol_l.constprop.0+0x56>
 801e992:	2d30      	cmp	r5, #48	@ 0x30
 801e994:	d136      	bne.n	801ea04 <_strtol_l.constprop.0+0xb4>
 801e996:	2120      	movs	r1, #32
 801e998:	7823      	ldrb	r3, [r4, #0]
 801e99a:	438b      	bics	r3, r1
 801e99c:	2b58      	cmp	r3, #88	@ 0x58
 801e99e:	d131      	bne.n	801ea04 <_strtol_l.constprop.0+0xb4>
 801e9a0:	0016      	movs	r6, r2
 801e9a2:	7865      	ldrb	r5, [r4, #1]
 801e9a4:	3402      	adds	r4, #2
 801e9a6:	4a2e      	ldr	r2, [pc, #184]	@ (801ea60 <_strtol_l.constprop.0+0x110>)
 801e9a8:	9b00      	ldr	r3, [sp, #0]
 801e9aa:	4694      	mov	ip, r2
 801e9ac:	4463      	add	r3, ip
 801e9ae:	0031      	movs	r1, r6
 801e9b0:	0018      	movs	r0, r3
 801e9b2:	9302      	str	r3, [sp, #8]
 801e9b4:	f7e1 fc7c 	bl	80002b0 <__aeabi_uidivmod>
 801e9b8:	2200      	movs	r2, #0
 801e9ba:	4684      	mov	ip, r0
 801e9bc:	0010      	movs	r0, r2
 801e9be:	002b      	movs	r3, r5
 801e9c0:	3b30      	subs	r3, #48	@ 0x30
 801e9c2:	2b09      	cmp	r3, #9
 801e9c4:	d825      	bhi.n	801ea12 <_strtol_l.constprop.0+0xc2>
 801e9c6:	001d      	movs	r5, r3
 801e9c8:	42ae      	cmp	r6, r5
 801e9ca:	dd31      	ble.n	801ea30 <_strtol_l.constprop.0+0xe0>
 801e9cc:	1c53      	adds	r3, r2, #1
 801e9ce:	d009      	beq.n	801e9e4 <_strtol_l.constprop.0+0x94>
 801e9d0:	2201      	movs	r2, #1
 801e9d2:	4252      	negs	r2, r2
 801e9d4:	4584      	cmp	ip, r0
 801e9d6:	d305      	bcc.n	801e9e4 <_strtol_l.constprop.0+0x94>
 801e9d8:	d101      	bne.n	801e9de <_strtol_l.constprop.0+0x8e>
 801e9da:	42a9      	cmp	r1, r5
 801e9dc:	db25      	blt.n	801ea2a <_strtol_l.constprop.0+0xda>
 801e9de:	2201      	movs	r2, #1
 801e9e0:	4370      	muls	r0, r6
 801e9e2:	1828      	adds	r0, r5, r0
 801e9e4:	7825      	ldrb	r5, [r4, #0]
 801e9e6:	3401      	adds	r4, #1
 801e9e8:	e7e9      	b.n	801e9be <_strtol_l.constprop.0+0x6e>
 801e9ea:	f000 ffc5 	bl	801f978 <__errno>
 801e9ee:	2316      	movs	r3, #22
 801e9f0:	6003      	str	r3, [r0, #0]
 801e9f2:	2000      	movs	r0, #0
 801e9f4:	b005      	add	sp, #20
 801e9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9f8:	9100      	str	r1, [sp, #0]
 801e9fa:	2d2b      	cmp	r5, #43	@ 0x2b
 801e9fc:	d1c5      	bne.n	801e98a <_strtol_l.constprop.0+0x3a>
 801e9fe:	7825      	ldrb	r5, [r4, #0]
 801ea00:	1c9c      	adds	r4, r3, #2
 801ea02:	e7c2      	b.n	801e98a <_strtol_l.constprop.0+0x3a>
 801ea04:	2e00      	cmp	r6, #0
 801ea06:	d1ce      	bne.n	801e9a6 <_strtol_l.constprop.0+0x56>
 801ea08:	3608      	adds	r6, #8
 801ea0a:	2d30      	cmp	r5, #48	@ 0x30
 801ea0c:	d0cb      	beq.n	801e9a6 <_strtol_l.constprop.0+0x56>
 801ea0e:	3602      	adds	r6, #2
 801ea10:	e7c9      	b.n	801e9a6 <_strtol_l.constprop.0+0x56>
 801ea12:	002b      	movs	r3, r5
 801ea14:	3b41      	subs	r3, #65	@ 0x41
 801ea16:	2b19      	cmp	r3, #25
 801ea18:	d801      	bhi.n	801ea1e <_strtol_l.constprop.0+0xce>
 801ea1a:	3d37      	subs	r5, #55	@ 0x37
 801ea1c:	e7d4      	b.n	801e9c8 <_strtol_l.constprop.0+0x78>
 801ea1e:	002b      	movs	r3, r5
 801ea20:	3b61      	subs	r3, #97	@ 0x61
 801ea22:	2b19      	cmp	r3, #25
 801ea24:	d804      	bhi.n	801ea30 <_strtol_l.constprop.0+0xe0>
 801ea26:	3d57      	subs	r5, #87	@ 0x57
 801ea28:	e7ce      	b.n	801e9c8 <_strtol_l.constprop.0+0x78>
 801ea2a:	2201      	movs	r2, #1
 801ea2c:	4252      	negs	r2, r2
 801ea2e:	e7d9      	b.n	801e9e4 <_strtol_l.constprop.0+0x94>
 801ea30:	1c53      	adds	r3, r2, #1
 801ea32:	d108      	bne.n	801ea46 <_strtol_l.constprop.0+0xf6>
 801ea34:	2322      	movs	r3, #34	@ 0x22
 801ea36:	9a03      	ldr	r2, [sp, #12]
 801ea38:	9802      	ldr	r0, [sp, #8]
 801ea3a:	6013      	str	r3, [r2, #0]
 801ea3c:	2f00      	cmp	r7, #0
 801ea3e:	d0d9      	beq.n	801e9f4 <_strtol_l.constprop.0+0xa4>
 801ea40:	1e63      	subs	r3, r4, #1
 801ea42:	9301      	str	r3, [sp, #4]
 801ea44:	e007      	b.n	801ea56 <_strtol_l.constprop.0+0x106>
 801ea46:	9b00      	ldr	r3, [sp, #0]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	d000      	beq.n	801ea4e <_strtol_l.constprop.0+0xfe>
 801ea4c:	4240      	negs	r0, r0
 801ea4e:	2f00      	cmp	r7, #0
 801ea50:	d0d0      	beq.n	801e9f4 <_strtol_l.constprop.0+0xa4>
 801ea52:	2a00      	cmp	r2, #0
 801ea54:	d1f4      	bne.n	801ea40 <_strtol_l.constprop.0+0xf0>
 801ea56:	9b01      	ldr	r3, [sp, #4]
 801ea58:	603b      	str	r3, [r7, #0]
 801ea5a:	e7cb      	b.n	801e9f4 <_strtol_l.constprop.0+0xa4>
 801ea5c:	08024ef9 	.word	0x08024ef9
 801ea60:	7fffffff 	.word	0x7fffffff

0801ea64 <strtol>:
 801ea64:	b510      	push	{r4, lr}
 801ea66:	4c04      	ldr	r4, [pc, #16]	@ (801ea78 <strtol+0x14>)
 801ea68:	0013      	movs	r3, r2
 801ea6a:	000a      	movs	r2, r1
 801ea6c:	0001      	movs	r1, r0
 801ea6e:	6820      	ldr	r0, [r4, #0]
 801ea70:	f7ff ff6e 	bl	801e950 <_strtol_l.constprop.0>
 801ea74:	bd10      	pop	{r4, pc}
 801ea76:	46c0      	nop			@ (mov r8, r8)
 801ea78:	200003c8 	.word	0x200003c8

0801ea7c <__cvt>:
 801ea7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea7e:	001f      	movs	r7, r3
 801ea80:	2300      	movs	r3, #0
 801ea82:	0016      	movs	r6, r2
 801ea84:	b08b      	sub	sp, #44	@ 0x2c
 801ea86:	429f      	cmp	r7, r3
 801ea88:	da04      	bge.n	801ea94 <__cvt+0x18>
 801ea8a:	2180      	movs	r1, #128	@ 0x80
 801ea8c:	0609      	lsls	r1, r1, #24
 801ea8e:	187b      	adds	r3, r7, r1
 801ea90:	001f      	movs	r7, r3
 801ea92:	232d      	movs	r3, #45	@ 0x2d
 801ea94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ea96:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ea98:	7013      	strb	r3, [r2, #0]
 801ea9a:	2320      	movs	r3, #32
 801ea9c:	2203      	movs	r2, #3
 801ea9e:	439d      	bics	r5, r3
 801eaa0:	2d46      	cmp	r5, #70	@ 0x46
 801eaa2:	d007      	beq.n	801eab4 <__cvt+0x38>
 801eaa4:	002b      	movs	r3, r5
 801eaa6:	3b45      	subs	r3, #69	@ 0x45
 801eaa8:	4259      	negs	r1, r3
 801eaaa:	414b      	adcs	r3, r1
 801eaac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801eaae:	3a01      	subs	r2, #1
 801eab0:	18cb      	adds	r3, r1, r3
 801eab2:	9310      	str	r3, [sp, #64]	@ 0x40
 801eab4:	ab09      	add	r3, sp, #36	@ 0x24
 801eab6:	9304      	str	r3, [sp, #16]
 801eab8:	ab08      	add	r3, sp, #32
 801eaba:	9303      	str	r3, [sp, #12]
 801eabc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eabe:	9200      	str	r2, [sp, #0]
 801eac0:	9302      	str	r3, [sp, #8]
 801eac2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eac4:	0032      	movs	r2, r6
 801eac6:	9301      	str	r3, [sp, #4]
 801eac8:	003b      	movs	r3, r7
 801eaca:	f001 f82b 	bl	801fb24 <_dtoa_r>
 801eace:	0004      	movs	r4, r0
 801ead0:	2d47      	cmp	r5, #71	@ 0x47
 801ead2:	d11b      	bne.n	801eb0c <__cvt+0x90>
 801ead4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ead6:	07db      	lsls	r3, r3, #31
 801ead8:	d511      	bpl.n	801eafe <__cvt+0x82>
 801eada:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eadc:	18c3      	adds	r3, r0, r3
 801eade:	9307      	str	r3, [sp, #28]
 801eae0:	2200      	movs	r2, #0
 801eae2:	2300      	movs	r3, #0
 801eae4:	0030      	movs	r0, r6
 801eae6:	0039      	movs	r1, r7
 801eae8:	f7e1 fce2 	bl	80004b0 <__aeabi_dcmpeq>
 801eaec:	2800      	cmp	r0, #0
 801eaee:	d001      	beq.n	801eaf4 <__cvt+0x78>
 801eaf0:	9b07      	ldr	r3, [sp, #28]
 801eaf2:	9309      	str	r3, [sp, #36]	@ 0x24
 801eaf4:	2230      	movs	r2, #48	@ 0x30
 801eaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaf8:	9907      	ldr	r1, [sp, #28]
 801eafa:	428b      	cmp	r3, r1
 801eafc:	d320      	bcc.n	801eb40 <__cvt+0xc4>
 801eafe:	0020      	movs	r0, r4
 801eb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb02:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801eb04:	1b1b      	subs	r3, r3, r4
 801eb06:	6013      	str	r3, [r2, #0]
 801eb08:	b00b      	add	sp, #44	@ 0x2c
 801eb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eb0e:	18c3      	adds	r3, r0, r3
 801eb10:	9307      	str	r3, [sp, #28]
 801eb12:	2d46      	cmp	r5, #70	@ 0x46
 801eb14:	d1e4      	bne.n	801eae0 <__cvt+0x64>
 801eb16:	7803      	ldrb	r3, [r0, #0]
 801eb18:	2b30      	cmp	r3, #48	@ 0x30
 801eb1a:	d10c      	bne.n	801eb36 <__cvt+0xba>
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	2300      	movs	r3, #0
 801eb20:	0030      	movs	r0, r6
 801eb22:	0039      	movs	r1, r7
 801eb24:	f7e1 fcc4 	bl	80004b0 <__aeabi_dcmpeq>
 801eb28:	2800      	cmp	r0, #0
 801eb2a:	d104      	bne.n	801eb36 <__cvt+0xba>
 801eb2c:	2301      	movs	r3, #1
 801eb2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eb30:	1a9b      	subs	r3, r3, r2
 801eb32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eb34:	6013      	str	r3, [r2, #0]
 801eb36:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb38:	9a07      	ldr	r2, [sp, #28]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	18d3      	adds	r3, r2, r3
 801eb3e:	e7ce      	b.n	801eade <__cvt+0x62>
 801eb40:	1c59      	adds	r1, r3, #1
 801eb42:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb44:	701a      	strb	r2, [r3, #0]
 801eb46:	e7d6      	b.n	801eaf6 <__cvt+0x7a>

0801eb48 <__exponent>:
 801eb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb4a:	232b      	movs	r3, #43	@ 0x2b
 801eb4c:	0005      	movs	r5, r0
 801eb4e:	000c      	movs	r4, r1
 801eb50:	b085      	sub	sp, #20
 801eb52:	7002      	strb	r2, [r0, #0]
 801eb54:	2900      	cmp	r1, #0
 801eb56:	da01      	bge.n	801eb5c <__exponent+0x14>
 801eb58:	424c      	negs	r4, r1
 801eb5a:	3302      	adds	r3, #2
 801eb5c:	706b      	strb	r3, [r5, #1]
 801eb5e:	2c09      	cmp	r4, #9
 801eb60:	dd2c      	ble.n	801ebbc <__exponent+0x74>
 801eb62:	ab02      	add	r3, sp, #8
 801eb64:	1dde      	adds	r6, r3, #7
 801eb66:	0020      	movs	r0, r4
 801eb68:	210a      	movs	r1, #10
 801eb6a:	f7e1 fc8b 	bl	8000484 <__aeabi_idivmod>
 801eb6e:	0037      	movs	r7, r6
 801eb70:	3130      	adds	r1, #48	@ 0x30
 801eb72:	3e01      	subs	r6, #1
 801eb74:	0020      	movs	r0, r4
 801eb76:	7031      	strb	r1, [r6, #0]
 801eb78:	210a      	movs	r1, #10
 801eb7a:	9401      	str	r4, [sp, #4]
 801eb7c:	f7e1 fb9c 	bl	80002b8 <__divsi3>
 801eb80:	9b01      	ldr	r3, [sp, #4]
 801eb82:	0004      	movs	r4, r0
 801eb84:	2b63      	cmp	r3, #99	@ 0x63
 801eb86:	dcee      	bgt.n	801eb66 <__exponent+0x1e>
 801eb88:	1eba      	subs	r2, r7, #2
 801eb8a:	1ca8      	adds	r0, r5, #2
 801eb8c:	0001      	movs	r1, r0
 801eb8e:	0013      	movs	r3, r2
 801eb90:	3430      	adds	r4, #48	@ 0x30
 801eb92:	7014      	strb	r4, [r2, #0]
 801eb94:	ac02      	add	r4, sp, #8
 801eb96:	3407      	adds	r4, #7
 801eb98:	429c      	cmp	r4, r3
 801eb9a:	d80a      	bhi.n	801ebb2 <__exponent+0x6a>
 801eb9c:	2300      	movs	r3, #0
 801eb9e:	42a2      	cmp	r2, r4
 801eba0:	d803      	bhi.n	801ebaa <__exponent+0x62>
 801eba2:	3309      	adds	r3, #9
 801eba4:	aa02      	add	r2, sp, #8
 801eba6:	189b      	adds	r3, r3, r2
 801eba8:	1bdb      	subs	r3, r3, r7
 801ebaa:	18c0      	adds	r0, r0, r3
 801ebac:	1b40      	subs	r0, r0, r5
 801ebae:	b005      	add	sp, #20
 801ebb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebb2:	781c      	ldrb	r4, [r3, #0]
 801ebb4:	3301      	adds	r3, #1
 801ebb6:	700c      	strb	r4, [r1, #0]
 801ebb8:	3101      	adds	r1, #1
 801ebba:	e7eb      	b.n	801eb94 <__exponent+0x4c>
 801ebbc:	2330      	movs	r3, #48	@ 0x30
 801ebbe:	18e4      	adds	r4, r4, r3
 801ebc0:	70ab      	strb	r3, [r5, #2]
 801ebc2:	1d28      	adds	r0, r5, #4
 801ebc4:	70ec      	strb	r4, [r5, #3]
 801ebc6:	e7f1      	b.n	801ebac <__exponent+0x64>

0801ebc8 <_printf_float>:
 801ebc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebca:	b097      	sub	sp, #92	@ 0x5c
 801ebcc:	000d      	movs	r5, r1
 801ebce:	920a      	str	r2, [sp, #40]	@ 0x28
 801ebd0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801ebd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebd4:	9009      	str	r0, [sp, #36]	@ 0x24
 801ebd6:	f000 fe7d 	bl	801f8d4 <_localeconv_r>
 801ebda:	6803      	ldr	r3, [r0, #0]
 801ebdc:	0018      	movs	r0, r3
 801ebde:	930d      	str	r3, [sp, #52]	@ 0x34
 801ebe0:	f7e1 fac4 	bl	800016c <strlen>
 801ebe4:	2300      	movs	r3, #0
 801ebe6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ebe8:	9314      	str	r3, [sp, #80]	@ 0x50
 801ebea:	7e2b      	ldrb	r3, [r5, #24]
 801ebec:	2207      	movs	r2, #7
 801ebee:	930c      	str	r3, [sp, #48]	@ 0x30
 801ebf0:	682b      	ldr	r3, [r5, #0]
 801ebf2:	930e      	str	r3, [sp, #56]	@ 0x38
 801ebf4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ebf6:	6823      	ldr	r3, [r4, #0]
 801ebf8:	05c9      	lsls	r1, r1, #23
 801ebfa:	d545      	bpl.n	801ec88 <_printf_float+0xc0>
 801ebfc:	189b      	adds	r3, r3, r2
 801ebfe:	4393      	bics	r3, r2
 801ec00:	001a      	movs	r2, r3
 801ec02:	3208      	adds	r2, #8
 801ec04:	6022      	str	r2, [r4, #0]
 801ec06:	2201      	movs	r2, #1
 801ec08:	681e      	ldr	r6, [r3, #0]
 801ec0a:	685f      	ldr	r7, [r3, #4]
 801ec0c:	007b      	lsls	r3, r7, #1
 801ec0e:	085b      	lsrs	r3, r3, #1
 801ec10:	9311      	str	r3, [sp, #68]	@ 0x44
 801ec12:	9610      	str	r6, [sp, #64]	@ 0x40
 801ec14:	64ae      	str	r6, [r5, #72]	@ 0x48
 801ec16:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801ec18:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ec1a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ec1c:	4ba7      	ldr	r3, [pc, #668]	@ (801eebc <_printf_float+0x2f4>)
 801ec1e:	4252      	negs	r2, r2
 801ec20:	f7e4 fb70 	bl	8003304 <__aeabi_dcmpun>
 801ec24:	2800      	cmp	r0, #0
 801ec26:	d131      	bne.n	801ec8c <_printf_float+0xc4>
 801ec28:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ec2a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ec2c:	2201      	movs	r2, #1
 801ec2e:	4ba3      	ldr	r3, [pc, #652]	@ (801eebc <_printf_float+0x2f4>)
 801ec30:	4252      	negs	r2, r2
 801ec32:	f7e1 fc4d 	bl	80004d0 <__aeabi_dcmple>
 801ec36:	2800      	cmp	r0, #0
 801ec38:	d128      	bne.n	801ec8c <_printf_float+0xc4>
 801ec3a:	2200      	movs	r2, #0
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	0030      	movs	r0, r6
 801ec40:	0039      	movs	r1, r7
 801ec42:	f7e1 fc3b 	bl	80004bc <__aeabi_dcmplt>
 801ec46:	2800      	cmp	r0, #0
 801ec48:	d003      	beq.n	801ec52 <_printf_float+0x8a>
 801ec4a:	002b      	movs	r3, r5
 801ec4c:	222d      	movs	r2, #45	@ 0x2d
 801ec4e:	3343      	adds	r3, #67	@ 0x43
 801ec50:	701a      	strb	r2, [r3, #0]
 801ec52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec54:	4f9a      	ldr	r7, [pc, #616]	@ (801eec0 <_printf_float+0x2f8>)
 801ec56:	2b47      	cmp	r3, #71	@ 0x47
 801ec58:	d900      	bls.n	801ec5c <_printf_float+0x94>
 801ec5a:	4f9a      	ldr	r7, [pc, #616]	@ (801eec4 <_printf_float+0x2fc>)
 801ec5c:	2303      	movs	r3, #3
 801ec5e:	2400      	movs	r4, #0
 801ec60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec62:	612b      	str	r3, [r5, #16]
 801ec64:	3301      	adds	r3, #1
 801ec66:	439a      	bics	r2, r3
 801ec68:	602a      	str	r2, [r5, #0]
 801ec6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec6c:	0029      	movs	r1, r5
 801ec6e:	9300      	str	r3, [sp, #0]
 801ec70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec74:	aa15      	add	r2, sp, #84	@ 0x54
 801ec76:	f000 f9e5 	bl	801f044 <_printf_common>
 801ec7a:	3001      	adds	r0, #1
 801ec7c:	d000      	beq.n	801ec80 <_printf_float+0xb8>
 801ec7e:	e09f      	b.n	801edc0 <_printf_float+0x1f8>
 801ec80:	2001      	movs	r0, #1
 801ec82:	4240      	negs	r0, r0
 801ec84:	b017      	add	sp, #92	@ 0x5c
 801ec86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec88:	3307      	adds	r3, #7
 801ec8a:	e7b8      	b.n	801ebfe <_printf_float+0x36>
 801ec8c:	0032      	movs	r2, r6
 801ec8e:	003b      	movs	r3, r7
 801ec90:	0030      	movs	r0, r6
 801ec92:	0039      	movs	r1, r7
 801ec94:	f7e4 fb36 	bl	8003304 <__aeabi_dcmpun>
 801ec98:	2800      	cmp	r0, #0
 801ec9a:	d00b      	beq.n	801ecb4 <_printf_float+0xec>
 801ec9c:	2f00      	cmp	r7, #0
 801ec9e:	da03      	bge.n	801eca8 <_printf_float+0xe0>
 801eca0:	002b      	movs	r3, r5
 801eca2:	222d      	movs	r2, #45	@ 0x2d
 801eca4:	3343      	adds	r3, #67	@ 0x43
 801eca6:	701a      	strb	r2, [r3, #0]
 801eca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecaa:	4f87      	ldr	r7, [pc, #540]	@ (801eec8 <_printf_float+0x300>)
 801ecac:	2b47      	cmp	r3, #71	@ 0x47
 801ecae:	d9d5      	bls.n	801ec5c <_printf_float+0x94>
 801ecb0:	4f86      	ldr	r7, [pc, #536]	@ (801eecc <_printf_float+0x304>)
 801ecb2:	e7d3      	b.n	801ec5c <_printf_float+0x94>
 801ecb4:	2220      	movs	r2, #32
 801ecb6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ecb8:	686b      	ldr	r3, [r5, #4]
 801ecba:	4394      	bics	r4, r2
 801ecbc:	1c5a      	adds	r2, r3, #1
 801ecbe:	d146      	bne.n	801ed4e <_printf_float+0x186>
 801ecc0:	3307      	adds	r3, #7
 801ecc2:	606b      	str	r3, [r5, #4]
 801ecc4:	2380      	movs	r3, #128	@ 0x80
 801ecc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ecc8:	00db      	lsls	r3, r3, #3
 801ecca:	4313      	orrs	r3, r2
 801eccc:	2200      	movs	r2, #0
 801ecce:	602b      	str	r3, [r5, #0]
 801ecd0:	9206      	str	r2, [sp, #24]
 801ecd2:	aa14      	add	r2, sp, #80	@ 0x50
 801ecd4:	9205      	str	r2, [sp, #20]
 801ecd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ecd8:	a90a      	add	r1, sp, #40	@ 0x28
 801ecda:	9204      	str	r2, [sp, #16]
 801ecdc:	aa13      	add	r2, sp, #76	@ 0x4c
 801ecde:	9203      	str	r2, [sp, #12]
 801ece0:	2223      	movs	r2, #35	@ 0x23
 801ece2:	1852      	adds	r2, r2, r1
 801ece4:	9202      	str	r2, [sp, #8]
 801ece6:	9301      	str	r3, [sp, #4]
 801ece8:	686b      	ldr	r3, [r5, #4]
 801ecea:	0032      	movs	r2, r6
 801ecec:	9300      	str	r3, [sp, #0]
 801ecee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ecf0:	003b      	movs	r3, r7
 801ecf2:	f7ff fec3 	bl	801ea7c <__cvt>
 801ecf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ecf8:	0007      	movs	r7, r0
 801ecfa:	2c47      	cmp	r4, #71	@ 0x47
 801ecfc:	d12d      	bne.n	801ed5a <_printf_float+0x192>
 801ecfe:	1cd3      	adds	r3, r2, #3
 801ed00:	db02      	blt.n	801ed08 <_printf_float+0x140>
 801ed02:	686b      	ldr	r3, [r5, #4]
 801ed04:	429a      	cmp	r2, r3
 801ed06:	dd48      	ble.n	801ed9a <_printf_float+0x1d2>
 801ed08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ed0c:	3b02      	subs	r3, #2
 801ed0e:	b2db      	uxtb	r3, r3
 801ed10:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed12:	0028      	movs	r0, r5
 801ed14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed16:	3901      	subs	r1, #1
 801ed18:	3050      	adds	r0, #80	@ 0x50
 801ed1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ed1c:	f7ff ff14 	bl	801eb48 <__exponent>
 801ed20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ed22:	0004      	movs	r4, r0
 801ed24:	1813      	adds	r3, r2, r0
 801ed26:	612b      	str	r3, [r5, #16]
 801ed28:	2a01      	cmp	r2, #1
 801ed2a:	dc02      	bgt.n	801ed32 <_printf_float+0x16a>
 801ed2c:	682a      	ldr	r2, [r5, #0]
 801ed2e:	07d2      	lsls	r2, r2, #31
 801ed30:	d501      	bpl.n	801ed36 <_printf_float+0x16e>
 801ed32:	3301      	adds	r3, #1
 801ed34:	612b      	str	r3, [r5, #16]
 801ed36:	2323      	movs	r3, #35	@ 0x23
 801ed38:	aa0a      	add	r2, sp, #40	@ 0x28
 801ed3a:	189b      	adds	r3, r3, r2
 801ed3c:	781b      	ldrb	r3, [r3, #0]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d100      	bne.n	801ed44 <_printf_float+0x17c>
 801ed42:	e792      	b.n	801ec6a <_printf_float+0xa2>
 801ed44:	002b      	movs	r3, r5
 801ed46:	222d      	movs	r2, #45	@ 0x2d
 801ed48:	3343      	adds	r3, #67	@ 0x43
 801ed4a:	701a      	strb	r2, [r3, #0]
 801ed4c:	e78d      	b.n	801ec6a <_printf_float+0xa2>
 801ed4e:	2c47      	cmp	r4, #71	@ 0x47
 801ed50:	d1b8      	bne.n	801ecc4 <_printf_float+0xfc>
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d1b6      	bne.n	801ecc4 <_printf_float+0xfc>
 801ed56:	3301      	adds	r3, #1
 801ed58:	e7b3      	b.n	801ecc2 <_printf_float+0xfa>
 801ed5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed5c:	0011      	movs	r1, r2
 801ed5e:	2b65      	cmp	r3, #101	@ 0x65
 801ed60:	d9d7      	bls.n	801ed12 <_printf_float+0x14a>
 801ed62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed64:	2b66      	cmp	r3, #102	@ 0x66
 801ed66:	d11a      	bne.n	801ed9e <_printf_float+0x1d6>
 801ed68:	686b      	ldr	r3, [r5, #4]
 801ed6a:	2a00      	cmp	r2, #0
 801ed6c:	dd09      	ble.n	801ed82 <_printf_float+0x1ba>
 801ed6e:	612a      	str	r2, [r5, #16]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d102      	bne.n	801ed7a <_printf_float+0x1b2>
 801ed74:	6829      	ldr	r1, [r5, #0]
 801ed76:	07c9      	lsls	r1, r1, #31
 801ed78:	d50b      	bpl.n	801ed92 <_printf_float+0x1ca>
 801ed7a:	3301      	adds	r3, #1
 801ed7c:	189b      	adds	r3, r3, r2
 801ed7e:	612b      	str	r3, [r5, #16]
 801ed80:	e007      	b.n	801ed92 <_printf_float+0x1ca>
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d103      	bne.n	801ed8e <_printf_float+0x1c6>
 801ed86:	2201      	movs	r2, #1
 801ed88:	6829      	ldr	r1, [r5, #0]
 801ed8a:	4211      	tst	r1, r2
 801ed8c:	d000      	beq.n	801ed90 <_printf_float+0x1c8>
 801ed8e:	1c9a      	adds	r2, r3, #2
 801ed90:	612a      	str	r2, [r5, #16]
 801ed92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed94:	2400      	movs	r4, #0
 801ed96:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ed98:	e7cd      	b.n	801ed36 <_printf_float+0x16e>
 801ed9a:	2367      	movs	r3, #103	@ 0x67
 801ed9c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eda0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eda2:	4299      	cmp	r1, r3
 801eda4:	db06      	blt.n	801edb4 <_printf_float+0x1ec>
 801eda6:	682b      	ldr	r3, [r5, #0]
 801eda8:	6129      	str	r1, [r5, #16]
 801edaa:	07db      	lsls	r3, r3, #31
 801edac:	d5f1      	bpl.n	801ed92 <_printf_float+0x1ca>
 801edae:	3101      	adds	r1, #1
 801edb0:	6129      	str	r1, [r5, #16]
 801edb2:	e7ee      	b.n	801ed92 <_printf_float+0x1ca>
 801edb4:	2201      	movs	r2, #1
 801edb6:	2900      	cmp	r1, #0
 801edb8:	dce0      	bgt.n	801ed7c <_printf_float+0x1b4>
 801edba:	1892      	adds	r2, r2, r2
 801edbc:	1a52      	subs	r2, r2, r1
 801edbe:	e7dd      	b.n	801ed7c <_printf_float+0x1b4>
 801edc0:	682a      	ldr	r2, [r5, #0]
 801edc2:	0553      	lsls	r3, r2, #21
 801edc4:	d408      	bmi.n	801edd8 <_printf_float+0x210>
 801edc6:	692b      	ldr	r3, [r5, #16]
 801edc8:	003a      	movs	r2, r7
 801edca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801edcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edd0:	47a0      	blx	r4
 801edd2:	3001      	adds	r0, #1
 801edd4:	d129      	bne.n	801ee2a <_printf_float+0x262>
 801edd6:	e753      	b.n	801ec80 <_printf_float+0xb8>
 801edd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801edda:	2b65      	cmp	r3, #101	@ 0x65
 801eddc:	d800      	bhi.n	801ede0 <_printf_float+0x218>
 801edde:	e0da      	b.n	801ef96 <_printf_float+0x3ce>
 801ede0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ede2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ede4:	2200      	movs	r2, #0
 801ede6:	2300      	movs	r3, #0
 801ede8:	f7e1 fb62 	bl	80004b0 <__aeabi_dcmpeq>
 801edec:	2800      	cmp	r0, #0
 801edee:	d033      	beq.n	801ee58 <_printf_float+0x290>
 801edf0:	2301      	movs	r3, #1
 801edf2:	4a37      	ldr	r2, [pc, #220]	@ (801eed0 <_printf_float+0x308>)
 801edf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801edf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edf8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edfa:	47a0      	blx	r4
 801edfc:	3001      	adds	r0, #1
 801edfe:	d100      	bne.n	801ee02 <_printf_float+0x23a>
 801ee00:	e73e      	b.n	801ec80 <_printf_float+0xb8>
 801ee02:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ee04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee06:	42b3      	cmp	r3, r6
 801ee08:	db02      	blt.n	801ee10 <_printf_float+0x248>
 801ee0a:	682b      	ldr	r3, [r5, #0]
 801ee0c:	07db      	lsls	r3, r3, #31
 801ee0e:	d50c      	bpl.n	801ee2a <_printf_float+0x262>
 801ee10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ee12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ee16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee1a:	47a0      	blx	r4
 801ee1c:	2400      	movs	r4, #0
 801ee1e:	3001      	adds	r0, #1
 801ee20:	d100      	bne.n	801ee24 <_printf_float+0x25c>
 801ee22:	e72d      	b.n	801ec80 <_printf_float+0xb8>
 801ee24:	1e73      	subs	r3, r6, #1
 801ee26:	42a3      	cmp	r3, r4
 801ee28:	dc0a      	bgt.n	801ee40 <_printf_float+0x278>
 801ee2a:	682b      	ldr	r3, [r5, #0]
 801ee2c:	079b      	lsls	r3, r3, #30
 801ee2e:	d500      	bpl.n	801ee32 <_printf_float+0x26a>
 801ee30:	e105      	b.n	801f03e <_printf_float+0x476>
 801ee32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ee34:	68e8      	ldr	r0, [r5, #12]
 801ee36:	4298      	cmp	r0, r3
 801ee38:	db00      	blt.n	801ee3c <_printf_float+0x274>
 801ee3a:	e723      	b.n	801ec84 <_printf_float+0xbc>
 801ee3c:	0018      	movs	r0, r3
 801ee3e:	e721      	b.n	801ec84 <_printf_float+0xbc>
 801ee40:	002a      	movs	r2, r5
 801ee42:	2301      	movs	r3, #1
 801ee44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee48:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ee4a:	321a      	adds	r2, #26
 801ee4c:	47b8      	blx	r7
 801ee4e:	3001      	adds	r0, #1
 801ee50:	d100      	bne.n	801ee54 <_printf_float+0x28c>
 801ee52:	e715      	b.n	801ec80 <_printf_float+0xb8>
 801ee54:	3401      	adds	r4, #1
 801ee56:	e7e5      	b.n	801ee24 <_printf_float+0x25c>
 801ee58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	dc3a      	bgt.n	801eed4 <_printf_float+0x30c>
 801ee5e:	2301      	movs	r3, #1
 801ee60:	4a1b      	ldr	r2, [pc, #108]	@ (801eed0 <_printf_float+0x308>)
 801ee62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee66:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ee68:	47a0      	blx	r4
 801ee6a:	3001      	adds	r0, #1
 801ee6c:	d100      	bne.n	801ee70 <_printf_float+0x2a8>
 801ee6e:	e707      	b.n	801ec80 <_printf_float+0xb8>
 801ee70:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ee72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee74:	4333      	orrs	r3, r6
 801ee76:	d102      	bne.n	801ee7e <_printf_float+0x2b6>
 801ee78:	682b      	ldr	r3, [r5, #0]
 801ee7a:	07db      	lsls	r3, r3, #31
 801ee7c:	d5d5      	bpl.n	801ee2a <_printf_float+0x262>
 801ee7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ee82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ee88:	47a0      	blx	r4
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	3001      	adds	r0, #1
 801ee8e:	d100      	bne.n	801ee92 <_printf_float+0x2ca>
 801ee90:	e6f6      	b.n	801ec80 <_printf_float+0xb8>
 801ee92:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee98:	425b      	negs	r3, r3
 801ee9a:	4293      	cmp	r3, r2
 801ee9c:	dc01      	bgt.n	801eea2 <_printf_float+0x2da>
 801ee9e:	0033      	movs	r3, r6
 801eea0:	e792      	b.n	801edc8 <_printf_float+0x200>
 801eea2:	002a      	movs	r2, r5
 801eea4:	2301      	movs	r3, #1
 801eea6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eea8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eeaa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eeac:	321a      	adds	r2, #26
 801eeae:	47a0      	blx	r4
 801eeb0:	3001      	adds	r0, #1
 801eeb2:	d100      	bne.n	801eeb6 <_printf_float+0x2ee>
 801eeb4:	e6e4      	b.n	801ec80 <_printf_float+0xb8>
 801eeb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eeb8:	3301      	adds	r3, #1
 801eeba:	e7ea      	b.n	801ee92 <_printf_float+0x2ca>
 801eebc:	7fefffff 	.word	0x7fefffff
 801eec0:	08024ff9 	.word	0x08024ff9
 801eec4:	08024ffd 	.word	0x08024ffd
 801eec8:	08025001 	.word	0x08025001
 801eecc:	08025005 	.word	0x08025005
 801eed0:	08025009 	.word	0x08025009
 801eed4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eed6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801eed8:	930c      	str	r3, [sp, #48]	@ 0x30
 801eeda:	429e      	cmp	r6, r3
 801eedc:	dd00      	ble.n	801eee0 <_printf_float+0x318>
 801eede:	001e      	movs	r6, r3
 801eee0:	2e00      	cmp	r6, #0
 801eee2:	dc31      	bgt.n	801ef48 <_printf_float+0x380>
 801eee4:	43f3      	mvns	r3, r6
 801eee6:	2400      	movs	r4, #0
 801eee8:	17db      	asrs	r3, r3, #31
 801eeea:	4033      	ands	r3, r6
 801eeec:	930e      	str	r3, [sp, #56]	@ 0x38
 801eeee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801eef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eef2:	1af3      	subs	r3, r6, r3
 801eef4:	42a3      	cmp	r3, r4
 801eef6:	dc30      	bgt.n	801ef5a <_printf_float+0x392>
 801eef8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eefa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eefc:	429a      	cmp	r2, r3
 801eefe:	dc38      	bgt.n	801ef72 <_printf_float+0x3aa>
 801ef00:	682b      	ldr	r3, [r5, #0]
 801ef02:	07db      	lsls	r3, r3, #31
 801ef04:	d435      	bmi.n	801ef72 <_printf_float+0x3aa>
 801ef06:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ef08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef0a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ef0c:	1b9b      	subs	r3, r3, r6
 801ef0e:	1b14      	subs	r4, r2, r4
 801ef10:	429c      	cmp	r4, r3
 801ef12:	dd00      	ble.n	801ef16 <_printf_float+0x34e>
 801ef14:	001c      	movs	r4, r3
 801ef16:	2c00      	cmp	r4, #0
 801ef18:	dc34      	bgt.n	801ef84 <_printf_float+0x3bc>
 801ef1a:	43e3      	mvns	r3, r4
 801ef1c:	2600      	movs	r6, #0
 801ef1e:	17db      	asrs	r3, r3, #31
 801ef20:	401c      	ands	r4, r3
 801ef22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ef26:	1ad3      	subs	r3, r2, r3
 801ef28:	1b1b      	subs	r3, r3, r4
 801ef2a:	42b3      	cmp	r3, r6
 801ef2c:	dc00      	bgt.n	801ef30 <_printf_float+0x368>
 801ef2e:	e77c      	b.n	801ee2a <_printf_float+0x262>
 801ef30:	002a      	movs	r2, r5
 801ef32:	2301      	movs	r3, #1
 801ef34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef38:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ef3a:	321a      	adds	r2, #26
 801ef3c:	47b8      	blx	r7
 801ef3e:	3001      	adds	r0, #1
 801ef40:	d100      	bne.n	801ef44 <_printf_float+0x37c>
 801ef42:	e69d      	b.n	801ec80 <_printf_float+0xb8>
 801ef44:	3601      	adds	r6, #1
 801ef46:	e7ec      	b.n	801ef22 <_printf_float+0x35a>
 801ef48:	0033      	movs	r3, r6
 801ef4a:	003a      	movs	r2, r7
 801ef4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef50:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef52:	47a0      	blx	r4
 801ef54:	3001      	adds	r0, #1
 801ef56:	d1c5      	bne.n	801eee4 <_printf_float+0x31c>
 801ef58:	e692      	b.n	801ec80 <_printf_float+0xb8>
 801ef5a:	002a      	movs	r2, r5
 801ef5c:	2301      	movs	r3, #1
 801ef5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef62:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef64:	321a      	adds	r2, #26
 801ef66:	47b0      	blx	r6
 801ef68:	3001      	adds	r0, #1
 801ef6a:	d100      	bne.n	801ef6e <_printf_float+0x3a6>
 801ef6c:	e688      	b.n	801ec80 <_printf_float+0xb8>
 801ef6e:	3401      	adds	r4, #1
 801ef70:	e7bd      	b.n	801eeee <_printf_float+0x326>
 801ef72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ef76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef7c:	47a0      	blx	r4
 801ef7e:	3001      	adds	r0, #1
 801ef80:	d1c1      	bne.n	801ef06 <_printf_float+0x33e>
 801ef82:	e67d      	b.n	801ec80 <_printf_float+0xb8>
 801ef84:	19ba      	adds	r2, r7, r6
 801ef86:	0023      	movs	r3, r4
 801ef88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef8c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef8e:	47b0      	blx	r6
 801ef90:	3001      	adds	r0, #1
 801ef92:	d1c2      	bne.n	801ef1a <_printf_float+0x352>
 801ef94:	e674      	b.n	801ec80 <_printf_float+0xb8>
 801ef96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ef98:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef9a:	2b01      	cmp	r3, #1
 801ef9c:	dc02      	bgt.n	801efa4 <_printf_float+0x3dc>
 801ef9e:	2301      	movs	r3, #1
 801efa0:	421a      	tst	r2, r3
 801efa2:	d039      	beq.n	801f018 <_printf_float+0x450>
 801efa4:	2301      	movs	r3, #1
 801efa6:	003a      	movs	r2, r7
 801efa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801efaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801efac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801efae:	47b0      	blx	r6
 801efb0:	3001      	adds	r0, #1
 801efb2:	d100      	bne.n	801efb6 <_printf_float+0x3ee>
 801efb4:	e664      	b.n	801ec80 <_printf_float+0xb8>
 801efb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801efb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801efba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801efbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801efbe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801efc0:	47b0      	blx	r6
 801efc2:	3001      	adds	r0, #1
 801efc4:	d100      	bne.n	801efc8 <_printf_float+0x400>
 801efc6:	e65b      	b.n	801ec80 <_printf_float+0xb8>
 801efc8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801efca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801efcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801efce:	2200      	movs	r2, #0
 801efd0:	3b01      	subs	r3, #1
 801efd2:	930c      	str	r3, [sp, #48]	@ 0x30
 801efd4:	2300      	movs	r3, #0
 801efd6:	f7e1 fa6b 	bl	80004b0 <__aeabi_dcmpeq>
 801efda:	2800      	cmp	r0, #0
 801efdc:	d11a      	bne.n	801f014 <_printf_float+0x44c>
 801efde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801efe0:	1c7a      	adds	r2, r7, #1
 801efe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801efe4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801efe6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801efe8:	47b0      	blx	r6
 801efea:	3001      	adds	r0, #1
 801efec:	d10e      	bne.n	801f00c <_printf_float+0x444>
 801efee:	e647      	b.n	801ec80 <_printf_float+0xb8>
 801eff0:	002a      	movs	r2, r5
 801eff2:	2301      	movs	r3, #1
 801eff4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eff8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801effa:	321a      	adds	r2, #26
 801effc:	47b8      	blx	r7
 801effe:	3001      	adds	r0, #1
 801f000:	d100      	bne.n	801f004 <_printf_float+0x43c>
 801f002:	e63d      	b.n	801ec80 <_printf_float+0xb8>
 801f004:	3601      	adds	r6, #1
 801f006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f008:	429e      	cmp	r6, r3
 801f00a:	dbf1      	blt.n	801eff0 <_printf_float+0x428>
 801f00c:	002a      	movs	r2, r5
 801f00e:	0023      	movs	r3, r4
 801f010:	3250      	adds	r2, #80	@ 0x50
 801f012:	e6da      	b.n	801edca <_printf_float+0x202>
 801f014:	2600      	movs	r6, #0
 801f016:	e7f6      	b.n	801f006 <_printf_float+0x43e>
 801f018:	003a      	movs	r2, r7
 801f01a:	e7e2      	b.n	801efe2 <_printf_float+0x41a>
 801f01c:	002a      	movs	r2, r5
 801f01e:	2301      	movs	r3, #1
 801f020:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f024:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f026:	3219      	adds	r2, #25
 801f028:	47b0      	blx	r6
 801f02a:	3001      	adds	r0, #1
 801f02c:	d100      	bne.n	801f030 <_printf_float+0x468>
 801f02e:	e627      	b.n	801ec80 <_printf_float+0xb8>
 801f030:	3401      	adds	r4, #1
 801f032:	68eb      	ldr	r3, [r5, #12]
 801f034:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f036:	1a9b      	subs	r3, r3, r2
 801f038:	42a3      	cmp	r3, r4
 801f03a:	dcef      	bgt.n	801f01c <_printf_float+0x454>
 801f03c:	e6f9      	b.n	801ee32 <_printf_float+0x26a>
 801f03e:	2400      	movs	r4, #0
 801f040:	e7f7      	b.n	801f032 <_printf_float+0x46a>
 801f042:	46c0      	nop			@ (mov r8, r8)

0801f044 <_printf_common>:
 801f044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f046:	0016      	movs	r6, r2
 801f048:	9301      	str	r3, [sp, #4]
 801f04a:	688a      	ldr	r2, [r1, #8]
 801f04c:	690b      	ldr	r3, [r1, #16]
 801f04e:	000c      	movs	r4, r1
 801f050:	9000      	str	r0, [sp, #0]
 801f052:	4293      	cmp	r3, r2
 801f054:	da00      	bge.n	801f058 <_printf_common+0x14>
 801f056:	0013      	movs	r3, r2
 801f058:	0022      	movs	r2, r4
 801f05a:	6033      	str	r3, [r6, #0]
 801f05c:	3243      	adds	r2, #67	@ 0x43
 801f05e:	7812      	ldrb	r2, [r2, #0]
 801f060:	2a00      	cmp	r2, #0
 801f062:	d001      	beq.n	801f068 <_printf_common+0x24>
 801f064:	3301      	adds	r3, #1
 801f066:	6033      	str	r3, [r6, #0]
 801f068:	6823      	ldr	r3, [r4, #0]
 801f06a:	069b      	lsls	r3, r3, #26
 801f06c:	d502      	bpl.n	801f074 <_printf_common+0x30>
 801f06e:	6833      	ldr	r3, [r6, #0]
 801f070:	3302      	adds	r3, #2
 801f072:	6033      	str	r3, [r6, #0]
 801f074:	6822      	ldr	r2, [r4, #0]
 801f076:	2306      	movs	r3, #6
 801f078:	0015      	movs	r5, r2
 801f07a:	401d      	ands	r5, r3
 801f07c:	421a      	tst	r2, r3
 801f07e:	d027      	beq.n	801f0d0 <_printf_common+0x8c>
 801f080:	0023      	movs	r3, r4
 801f082:	3343      	adds	r3, #67	@ 0x43
 801f084:	781b      	ldrb	r3, [r3, #0]
 801f086:	1e5a      	subs	r2, r3, #1
 801f088:	4193      	sbcs	r3, r2
 801f08a:	6822      	ldr	r2, [r4, #0]
 801f08c:	0692      	lsls	r2, r2, #26
 801f08e:	d430      	bmi.n	801f0f2 <_printf_common+0xae>
 801f090:	0022      	movs	r2, r4
 801f092:	9901      	ldr	r1, [sp, #4]
 801f094:	9800      	ldr	r0, [sp, #0]
 801f096:	9d08      	ldr	r5, [sp, #32]
 801f098:	3243      	adds	r2, #67	@ 0x43
 801f09a:	47a8      	blx	r5
 801f09c:	3001      	adds	r0, #1
 801f09e:	d025      	beq.n	801f0ec <_printf_common+0xa8>
 801f0a0:	2206      	movs	r2, #6
 801f0a2:	6823      	ldr	r3, [r4, #0]
 801f0a4:	2500      	movs	r5, #0
 801f0a6:	4013      	ands	r3, r2
 801f0a8:	2b04      	cmp	r3, #4
 801f0aa:	d105      	bne.n	801f0b8 <_printf_common+0x74>
 801f0ac:	6833      	ldr	r3, [r6, #0]
 801f0ae:	68e5      	ldr	r5, [r4, #12]
 801f0b0:	1aed      	subs	r5, r5, r3
 801f0b2:	43eb      	mvns	r3, r5
 801f0b4:	17db      	asrs	r3, r3, #31
 801f0b6:	401d      	ands	r5, r3
 801f0b8:	68a3      	ldr	r3, [r4, #8]
 801f0ba:	6922      	ldr	r2, [r4, #16]
 801f0bc:	4293      	cmp	r3, r2
 801f0be:	dd01      	ble.n	801f0c4 <_printf_common+0x80>
 801f0c0:	1a9b      	subs	r3, r3, r2
 801f0c2:	18ed      	adds	r5, r5, r3
 801f0c4:	2600      	movs	r6, #0
 801f0c6:	42b5      	cmp	r5, r6
 801f0c8:	d120      	bne.n	801f10c <_printf_common+0xc8>
 801f0ca:	2000      	movs	r0, #0
 801f0cc:	e010      	b.n	801f0f0 <_printf_common+0xac>
 801f0ce:	3501      	adds	r5, #1
 801f0d0:	68e3      	ldr	r3, [r4, #12]
 801f0d2:	6832      	ldr	r2, [r6, #0]
 801f0d4:	1a9b      	subs	r3, r3, r2
 801f0d6:	42ab      	cmp	r3, r5
 801f0d8:	ddd2      	ble.n	801f080 <_printf_common+0x3c>
 801f0da:	0022      	movs	r2, r4
 801f0dc:	2301      	movs	r3, #1
 801f0de:	9901      	ldr	r1, [sp, #4]
 801f0e0:	9800      	ldr	r0, [sp, #0]
 801f0e2:	9f08      	ldr	r7, [sp, #32]
 801f0e4:	3219      	adds	r2, #25
 801f0e6:	47b8      	blx	r7
 801f0e8:	3001      	adds	r0, #1
 801f0ea:	d1f0      	bne.n	801f0ce <_printf_common+0x8a>
 801f0ec:	2001      	movs	r0, #1
 801f0ee:	4240      	negs	r0, r0
 801f0f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f0f2:	2030      	movs	r0, #48	@ 0x30
 801f0f4:	18e1      	adds	r1, r4, r3
 801f0f6:	3143      	adds	r1, #67	@ 0x43
 801f0f8:	7008      	strb	r0, [r1, #0]
 801f0fa:	0021      	movs	r1, r4
 801f0fc:	1c5a      	adds	r2, r3, #1
 801f0fe:	3145      	adds	r1, #69	@ 0x45
 801f100:	7809      	ldrb	r1, [r1, #0]
 801f102:	18a2      	adds	r2, r4, r2
 801f104:	3243      	adds	r2, #67	@ 0x43
 801f106:	3302      	adds	r3, #2
 801f108:	7011      	strb	r1, [r2, #0]
 801f10a:	e7c1      	b.n	801f090 <_printf_common+0x4c>
 801f10c:	0022      	movs	r2, r4
 801f10e:	2301      	movs	r3, #1
 801f110:	9901      	ldr	r1, [sp, #4]
 801f112:	9800      	ldr	r0, [sp, #0]
 801f114:	9f08      	ldr	r7, [sp, #32]
 801f116:	321a      	adds	r2, #26
 801f118:	47b8      	blx	r7
 801f11a:	3001      	adds	r0, #1
 801f11c:	d0e6      	beq.n	801f0ec <_printf_common+0xa8>
 801f11e:	3601      	adds	r6, #1
 801f120:	e7d1      	b.n	801f0c6 <_printf_common+0x82>
	...

0801f124 <_printf_i>:
 801f124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f126:	b08b      	sub	sp, #44	@ 0x2c
 801f128:	9206      	str	r2, [sp, #24]
 801f12a:	000a      	movs	r2, r1
 801f12c:	3243      	adds	r2, #67	@ 0x43
 801f12e:	9307      	str	r3, [sp, #28]
 801f130:	9005      	str	r0, [sp, #20]
 801f132:	9203      	str	r2, [sp, #12]
 801f134:	7e0a      	ldrb	r2, [r1, #24]
 801f136:	000c      	movs	r4, r1
 801f138:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f13a:	2a78      	cmp	r2, #120	@ 0x78
 801f13c:	d809      	bhi.n	801f152 <_printf_i+0x2e>
 801f13e:	2a62      	cmp	r2, #98	@ 0x62
 801f140:	d80b      	bhi.n	801f15a <_printf_i+0x36>
 801f142:	2a00      	cmp	r2, #0
 801f144:	d100      	bne.n	801f148 <_printf_i+0x24>
 801f146:	e0bc      	b.n	801f2c2 <_printf_i+0x19e>
 801f148:	497b      	ldr	r1, [pc, #492]	@ (801f338 <_printf_i+0x214>)
 801f14a:	9104      	str	r1, [sp, #16]
 801f14c:	2a58      	cmp	r2, #88	@ 0x58
 801f14e:	d100      	bne.n	801f152 <_printf_i+0x2e>
 801f150:	e090      	b.n	801f274 <_printf_i+0x150>
 801f152:	0025      	movs	r5, r4
 801f154:	3542      	adds	r5, #66	@ 0x42
 801f156:	702a      	strb	r2, [r5, #0]
 801f158:	e022      	b.n	801f1a0 <_printf_i+0x7c>
 801f15a:	0010      	movs	r0, r2
 801f15c:	3863      	subs	r0, #99	@ 0x63
 801f15e:	2815      	cmp	r0, #21
 801f160:	d8f7      	bhi.n	801f152 <_printf_i+0x2e>
 801f162:	f7e1 f815 	bl	8000190 <__gnu_thumb1_case_shi>
 801f166:	0016      	.short	0x0016
 801f168:	fff6001f 	.word	0xfff6001f
 801f16c:	fff6fff6 	.word	0xfff6fff6
 801f170:	001ffff6 	.word	0x001ffff6
 801f174:	fff6fff6 	.word	0xfff6fff6
 801f178:	fff6fff6 	.word	0xfff6fff6
 801f17c:	003600a1 	.word	0x003600a1
 801f180:	fff60080 	.word	0xfff60080
 801f184:	00b2fff6 	.word	0x00b2fff6
 801f188:	0036fff6 	.word	0x0036fff6
 801f18c:	fff6fff6 	.word	0xfff6fff6
 801f190:	0084      	.short	0x0084
 801f192:	0025      	movs	r5, r4
 801f194:	681a      	ldr	r2, [r3, #0]
 801f196:	3542      	adds	r5, #66	@ 0x42
 801f198:	1d11      	adds	r1, r2, #4
 801f19a:	6019      	str	r1, [r3, #0]
 801f19c:	6813      	ldr	r3, [r2, #0]
 801f19e:	702b      	strb	r3, [r5, #0]
 801f1a0:	2301      	movs	r3, #1
 801f1a2:	e0a0      	b.n	801f2e6 <_printf_i+0x1c2>
 801f1a4:	6818      	ldr	r0, [r3, #0]
 801f1a6:	6809      	ldr	r1, [r1, #0]
 801f1a8:	1d02      	adds	r2, r0, #4
 801f1aa:	060d      	lsls	r5, r1, #24
 801f1ac:	d50b      	bpl.n	801f1c6 <_printf_i+0xa2>
 801f1ae:	6806      	ldr	r6, [r0, #0]
 801f1b0:	601a      	str	r2, [r3, #0]
 801f1b2:	2e00      	cmp	r6, #0
 801f1b4:	da03      	bge.n	801f1be <_printf_i+0x9a>
 801f1b6:	232d      	movs	r3, #45	@ 0x2d
 801f1b8:	9a03      	ldr	r2, [sp, #12]
 801f1ba:	4276      	negs	r6, r6
 801f1bc:	7013      	strb	r3, [r2, #0]
 801f1be:	4b5e      	ldr	r3, [pc, #376]	@ (801f338 <_printf_i+0x214>)
 801f1c0:	270a      	movs	r7, #10
 801f1c2:	9304      	str	r3, [sp, #16]
 801f1c4:	e018      	b.n	801f1f8 <_printf_i+0xd4>
 801f1c6:	6806      	ldr	r6, [r0, #0]
 801f1c8:	601a      	str	r2, [r3, #0]
 801f1ca:	0649      	lsls	r1, r1, #25
 801f1cc:	d5f1      	bpl.n	801f1b2 <_printf_i+0x8e>
 801f1ce:	b236      	sxth	r6, r6
 801f1d0:	e7ef      	b.n	801f1b2 <_printf_i+0x8e>
 801f1d2:	6808      	ldr	r0, [r1, #0]
 801f1d4:	6819      	ldr	r1, [r3, #0]
 801f1d6:	c940      	ldmia	r1!, {r6}
 801f1d8:	0605      	lsls	r5, r0, #24
 801f1da:	d402      	bmi.n	801f1e2 <_printf_i+0xbe>
 801f1dc:	0640      	lsls	r0, r0, #25
 801f1de:	d500      	bpl.n	801f1e2 <_printf_i+0xbe>
 801f1e0:	b2b6      	uxth	r6, r6
 801f1e2:	6019      	str	r1, [r3, #0]
 801f1e4:	4b54      	ldr	r3, [pc, #336]	@ (801f338 <_printf_i+0x214>)
 801f1e6:	270a      	movs	r7, #10
 801f1e8:	9304      	str	r3, [sp, #16]
 801f1ea:	2a6f      	cmp	r2, #111	@ 0x6f
 801f1ec:	d100      	bne.n	801f1f0 <_printf_i+0xcc>
 801f1ee:	3f02      	subs	r7, #2
 801f1f0:	0023      	movs	r3, r4
 801f1f2:	2200      	movs	r2, #0
 801f1f4:	3343      	adds	r3, #67	@ 0x43
 801f1f6:	701a      	strb	r2, [r3, #0]
 801f1f8:	6863      	ldr	r3, [r4, #4]
 801f1fa:	60a3      	str	r3, [r4, #8]
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	db03      	blt.n	801f208 <_printf_i+0xe4>
 801f200:	2104      	movs	r1, #4
 801f202:	6822      	ldr	r2, [r4, #0]
 801f204:	438a      	bics	r2, r1
 801f206:	6022      	str	r2, [r4, #0]
 801f208:	2e00      	cmp	r6, #0
 801f20a:	d102      	bne.n	801f212 <_printf_i+0xee>
 801f20c:	9d03      	ldr	r5, [sp, #12]
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d00c      	beq.n	801f22c <_printf_i+0x108>
 801f212:	9d03      	ldr	r5, [sp, #12]
 801f214:	0030      	movs	r0, r6
 801f216:	0039      	movs	r1, r7
 801f218:	f7e1 f84a 	bl	80002b0 <__aeabi_uidivmod>
 801f21c:	9b04      	ldr	r3, [sp, #16]
 801f21e:	3d01      	subs	r5, #1
 801f220:	5c5b      	ldrb	r3, [r3, r1]
 801f222:	702b      	strb	r3, [r5, #0]
 801f224:	0033      	movs	r3, r6
 801f226:	0006      	movs	r6, r0
 801f228:	429f      	cmp	r7, r3
 801f22a:	d9f3      	bls.n	801f214 <_printf_i+0xf0>
 801f22c:	2f08      	cmp	r7, #8
 801f22e:	d109      	bne.n	801f244 <_printf_i+0x120>
 801f230:	6823      	ldr	r3, [r4, #0]
 801f232:	07db      	lsls	r3, r3, #31
 801f234:	d506      	bpl.n	801f244 <_printf_i+0x120>
 801f236:	6862      	ldr	r2, [r4, #4]
 801f238:	6923      	ldr	r3, [r4, #16]
 801f23a:	429a      	cmp	r2, r3
 801f23c:	dc02      	bgt.n	801f244 <_printf_i+0x120>
 801f23e:	2330      	movs	r3, #48	@ 0x30
 801f240:	3d01      	subs	r5, #1
 801f242:	702b      	strb	r3, [r5, #0]
 801f244:	9b03      	ldr	r3, [sp, #12]
 801f246:	1b5b      	subs	r3, r3, r5
 801f248:	6123      	str	r3, [r4, #16]
 801f24a:	9b07      	ldr	r3, [sp, #28]
 801f24c:	0021      	movs	r1, r4
 801f24e:	9300      	str	r3, [sp, #0]
 801f250:	9805      	ldr	r0, [sp, #20]
 801f252:	9b06      	ldr	r3, [sp, #24]
 801f254:	aa09      	add	r2, sp, #36	@ 0x24
 801f256:	f7ff fef5 	bl	801f044 <_printf_common>
 801f25a:	3001      	adds	r0, #1
 801f25c:	d148      	bne.n	801f2f0 <_printf_i+0x1cc>
 801f25e:	2001      	movs	r0, #1
 801f260:	4240      	negs	r0, r0
 801f262:	b00b      	add	sp, #44	@ 0x2c
 801f264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f266:	2220      	movs	r2, #32
 801f268:	6809      	ldr	r1, [r1, #0]
 801f26a:	430a      	orrs	r2, r1
 801f26c:	6022      	str	r2, [r4, #0]
 801f26e:	2278      	movs	r2, #120	@ 0x78
 801f270:	4932      	ldr	r1, [pc, #200]	@ (801f33c <_printf_i+0x218>)
 801f272:	9104      	str	r1, [sp, #16]
 801f274:	0021      	movs	r1, r4
 801f276:	3145      	adds	r1, #69	@ 0x45
 801f278:	700a      	strb	r2, [r1, #0]
 801f27a:	6819      	ldr	r1, [r3, #0]
 801f27c:	6822      	ldr	r2, [r4, #0]
 801f27e:	c940      	ldmia	r1!, {r6}
 801f280:	0610      	lsls	r0, r2, #24
 801f282:	d402      	bmi.n	801f28a <_printf_i+0x166>
 801f284:	0650      	lsls	r0, r2, #25
 801f286:	d500      	bpl.n	801f28a <_printf_i+0x166>
 801f288:	b2b6      	uxth	r6, r6
 801f28a:	6019      	str	r1, [r3, #0]
 801f28c:	07d3      	lsls	r3, r2, #31
 801f28e:	d502      	bpl.n	801f296 <_printf_i+0x172>
 801f290:	2320      	movs	r3, #32
 801f292:	4313      	orrs	r3, r2
 801f294:	6023      	str	r3, [r4, #0]
 801f296:	2e00      	cmp	r6, #0
 801f298:	d001      	beq.n	801f29e <_printf_i+0x17a>
 801f29a:	2710      	movs	r7, #16
 801f29c:	e7a8      	b.n	801f1f0 <_printf_i+0xcc>
 801f29e:	2220      	movs	r2, #32
 801f2a0:	6823      	ldr	r3, [r4, #0]
 801f2a2:	4393      	bics	r3, r2
 801f2a4:	6023      	str	r3, [r4, #0]
 801f2a6:	e7f8      	b.n	801f29a <_printf_i+0x176>
 801f2a8:	681a      	ldr	r2, [r3, #0]
 801f2aa:	680d      	ldr	r5, [r1, #0]
 801f2ac:	1d10      	adds	r0, r2, #4
 801f2ae:	6949      	ldr	r1, [r1, #20]
 801f2b0:	6018      	str	r0, [r3, #0]
 801f2b2:	6813      	ldr	r3, [r2, #0]
 801f2b4:	062e      	lsls	r6, r5, #24
 801f2b6:	d501      	bpl.n	801f2bc <_printf_i+0x198>
 801f2b8:	6019      	str	r1, [r3, #0]
 801f2ba:	e002      	b.n	801f2c2 <_printf_i+0x19e>
 801f2bc:	066d      	lsls	r5, r5, #25
 801f2be:	d5fb      	bpl.n	801f2b8 <_printf_i+0x194>
 801f2c0:	8019      	strh	r1, [r3, #0]
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	9d03      	ldr	r5, [sp, #12]
 801f2c6:	6123      	str	r3, [r4, #16]
 801f2c8:	e7bf      	b.n	801f24a <_printf_i+0x126>
 801f2ca:	681a      	ldr	r2, [r3, #0]
 801f2cc:	1d11      	adds	r1, r2, #4
 801f2ce:	6019      	str	r1, [r3, #0]
 801f2d0:	6815      	ldr	r5, [r2, #0]
 801f2d2:	2100      	movs	r1, #0
 801f2d4:	0028      	movs	r0, r5
 801f2d6:	6862      	ldr	r2, [r4, #4]
 801f2d8:	f000 fb7b 	bl	801f9d2 <memchr>
 801f2dc:	2800      	cmp	r0, #0
 801f2de:	d001      	beq.n	801f2e4 <_printf_i+0x1c0>
 801f2e0:	1b40      	subs	r0, r0, r5
 801f2e2:	6060      	str	r0, [r4, #4]
 801f2e4:	6863      	ldr	r3, [r4, #4]
 801f2e6:	6123      	str	r3, [r4, #16]
 801f2e8:	2300      	movs	r3, #0
 801f2ea:	9a03      	ldr	r2, [sp, #12]
 801f2ec:	7013      	strb	r3, [r2, #0]
 801f2ee:	e7ac      	b.n	801f24a <_printf_i+0x126>
 801f2f0:	002a      	movs	r2, r5
 801f2f2:	6923      	ldr	r3, [r4, #16]
 801f2f4:	9906      	ldr	r1, [sp, #24]
 801f2f6:	9805      	ldr	r0, [sp, #20]
 801f2f8:	9d07      	ldr	r5, [sp, #28]
 801f2fa:	47a8      	blx	r5
 801f2fc:	3001      	adds	r0, #1
 801f2fe:	d0ae      	beq.n	801f25e <_printf_i+0x13a>
 801f300:	6823      	ldr	r3, [r4, #0]
 801f302:	079b      	lsls	r3, r3, #30
 801f304:	d415      	bmi.n	801f332 <_printf_i+0x20e>
 801f306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f308:	68e0      	ldr	r0, [r4, #12]
 801f30a:	4298      	cmp	r0, r3
 801f30c:	daa9      	bge.n	801f262 <_printf_i+0x13e>
 801f30e:	0018      	movs	r0, r3
 801f310:	e7a7      	b.n	801f262 <_printf_i+0x13e>
 801f312:	0022      	movs	r2, r4
 801f314:	2301      	movs	r3, #1
 801f316:	9906      	ldr	r1, [sp, #24]
 801f318:	9805      	ldr	r0, [sp, #20]
 801f31a:	9e07      	ldr	r6, [sp, #28]
 801f31c:	3219      	adds	r2, #25
 801f31e:	47b0      	blx	r6
 801f320:	3001      	adds	r0, #1
 801f322:	d09c      	beq.n	801f25e <_printf_i+0x13a>
 801f324:	3501      	adds	r5, #1
 801f326:	68e3      	ldr	r3, [r4, #12]
 801f328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f32a:	1a9b      	subs	r3, r3, r2
 801f32c:	42ab      	cmp	r3, r5
 801f32e:	dcf0      	bgt.n	801f312 <_printf_i+0x1ee>
 801f330:	e7e9      	b.n	801f306 <_printf_i+0x1e2>
 801f332:	2500      	movs	r5, #0
 801f334:	e7f7      	b.n	801f326 <_printf_i+0x202>
 801f336:	46c0      	nop			@ (mov r8, r8)
 801f338:	0802500b 	.word	0x0802500b
 801f33c:	0802501c 	.word	0x0802501c

0801f340 <std>:
 801f340:	2300      	movs	r3, #0
 801f342:	b510      	push	{r4, lr}
 801f344:	0004      	movs	r4, r0
 801f346:	6003      	str	r3, [r0, #0]
 801f348:	6043      	str	r3, [r0, #4]
 801f34a:	6083      	str	r3, [r0, #8]
 801f34c:	8181      	strh	r1, [r0, #12]
 801f34e:	6643      	str	r3, [r0, #100]	@ 0x64
 801f350:	81c2      	strh	r2, [r0, #14]
 801f352:	6103      	str	r3, [r0, #16]
 801f354:	6143      	str	r3, [r0, #20]
 801f356:	6183      	str	r3, [r0, #24]
 801f358:	0019      	movs	r1, r3
 801f35a:	2208      	movs	r2, #8
 801f35c:	305c      	adds	r0, #92	@ 0x5c
 801f35e:	f000 fa67 	bl	801f830 <memset>
 801f362:	4b0b      	ldr	r3, [pc, #44]	@ (801f390 <std+0x50>)
 801f364:	6224      	str	r4, [r4, #32]
 801f366:	6263      	str	r3, [r4, #36]	@ 0x24
 801f368:	4b0a      	ldr	r3, [pc, #40]	@ (801f394 <std+0x54>)
 801f36a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f36c:	4b0a      	ldr	r3, [pc, #40]	@ (801f398 <std+0x58>)
 801f36e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f370:	4b0a      	ldr	r3, [pc, #40]	@ (801f39c <std+0x5c>)
 801f372:	6323      	str	r3, [r4, #48]	@ 0x30
 801f374:	4b0a      	ldr	r3, [pc, #40]	@ (801f3a0 <std+0x60>)
 801f376:	429c      	cmp	r4, r3
 801f378:	d005      	beq.n	801f386 <std+0x46>
 801f37a:	4b0a      	ldr	r3, [pc, #40]	@ (801f3a4 <std+0x64>)
 801f37c:	429c      	cmp	r4, r3
 801f37e:	d002      	beq.n	801f386 <std+0x46>
 801f380:	4b09      	ldr	r3, [pc, #36]	@ (801f3a8 <std+0x68>)
 801f382:	429c      	cmp	r4, r3
 801f384:	d103      	bne.n	801f38e <std+0x4e>
 801f386:	0020      	movs	r0, r4
 801f388:	3058      	adds	r0, #88	@ 0x58
 801f38a:	f000 fb1f 	bl	801f9cc <__retarget_lock_init_recursive>
 801f38e:	bd10      	pop	{r4, pc}
 801f390:	0801f5e9 	.word	0x0801f5e9
 801f394:	0801f611 	.word	0x0801f611
 801f398:	0801f649 	.word	0x0801f649
 801f39c:	0801f675 	.word	0x0801f675
 801f3a0:	200037b8 	.word	0x200037b8
 801f3a4:	20003820 	.word	0x20003820
 801f3a8:	20003888 	.word	0x20003888

0801f3ac <stdio_exit_handler>:
 801f3ac:	b510      	push	{r4, lr}
 801f3ae:	4a03      	ldr	r2, [pc, #12]	@ (801f3bc <stdio_exit_handler+0x10>)
 801f3b0:	4903      	ldr	r1, [pc, #12]	@ (801f3c0 <stdio_exit_handler+0x14>)
 801f3b2:	4804      	ldr	r0, [pc, #16]	@ (801f3c4 <stdio_exit_handler+0x18>)
 801f3b4:	f000 f86c 	bl	801f490 <_fwalk_sglue>
 801f3b8:	bd10      	pop	{r4, pc}
 801f3ba:	46c0      	nop			@ (mov r8, r8)
 801f3bc:	20000250 	.word	0x20000250
 801f3c0:	08021ff1 	.word	0x08021ff1
 801f3c4:	200003cc 	.word	0x200003cc

0801f3c8 <cleanup_stdio>:
 801f3c8:	6841      	ldr	r1, [r0, #4]
 801f3ca:	4b0b      	ldr	r3, [pc, #44]	@ (801f3f8 <cleanup_stdio+0x30>)
 801f3cc:	b510      	push	{r4, lr}
 801f3ce:	0004      	movs	r4, r0
 801f3d0:	4299      	cmp	r1, r3
 801f3d2:	d001      	beq.n	801f3d8 <cleanup_stdio+0x10>
 801f3d4:	f002 fe0c 	bl	8021ff0 <_fflush_r>
 801f3d8:	68a1      	ldr	r1, [r4, #8]
 801f3da:	4b08      	ldr	r3, [pc, #32]	@ (801f3fc <cleanup_stdio+0x34>)
 801f3dc:	4299      	cmp	r1, r3
 801f3de:	d002      	beq.n	801f3e6 <cleanup_stdio+0x1e>
 801f3e0:	0020      	movs	r0, r4
 801f3e2:	f002 fe05 	bl	8021ff0 <_fflush_r>
 801f3e6:	68e1      	ldr	r1, [r4, #12]
 801f3e8:	4b05      	ldr	r3, [pc, #20]	@ (801f400 <cleanup_stdio+0x38>)
 801f3ea:	4299      	cmp	r1, r3
 801f3ec:	d002      	beq.n	801f3f4 <cleanup_stdio+0x2c>
 801f3ee:	0020      	movs	r0, r4
 801f3f0:	f002 fdfe 	bl	8021ff0 <_fflush_r>
 801f3f4:	bd10      	pop	{r4, pc}
 801f3f6:	46c0      	nop			@ (mov r8, r8)
 801f3f8:	200037b8 	.word	0x200037b8
 801f3fc:	20003820 	.word	0x20003820
 801f400:	20003888 	.word	0x20003888

0801f404 <global_stdio_init.part.0>:
 801f404:	b510      	push	{r4, lr}
 801f406:	4b09      	ldr	r3, [pc, #36]	@ (801f42c <global_stdio_init.part.0+0x28>)
 801f408:	4a09      	ldr	r2, [pc, #36]	@ (801f430 <global_stdio_init.part.0+0x2c>)
 801f40a:	2104      	movs	r1, #4
 801f40c:	601a      	str	r2, [r3, #0]
 801f40e:	4809      	ldr	r0, [pc, #36]	@ (801f434 <global_stdio_init.part.0+0x30>)
 801f410:	2200      	movs	r2, #0
 801f412:	f7ff ff95 	bl	801f340 <std>
 801f416:	2201      	movs	r2, #1
 801f418:	2109      	movs	r1, #9
 801f41a:	4807      	ldr	r0, [pc, #28]	@ (801f438 <global_stdio_init.part.0+0x34>)
 801f41c:	f7ff ff90 	bl	801f340 <std>
 801f420:	2202      	movs	r2, #2
 801f422:	2112      	movs	r1, #18
 801f424:	4805      	ldr	r0, [pc, #20]	@ (801f43c <global_stdio_init.part.0+0x38>)
 801f426:	f7ff ff8b 	bl	801f340 <std>
 801f42a:	bd10      	pop	{r4, pc}
 801f42c:	200038f0 	.word	0x200038f0
 801f430:	0801f3ad 	.word	0x0801f3ad
 801f434:	200037b8 	.word	0x200037b8
 801f438:	20003820 	.word	0x20003820
 801f43c:	20003888 	.word	0x20003888

0801f440 <__sfp_lock_acquire>:
 801f440:	b510      	push	{r4, lr}
 801f442:	4802      	ldr	r0, [pc, #8]	@ (801f44c <__sfp_lock_acquire+0xc>)
 801f444:	f000 fac3 	bl	801f9ce <__retarget_lock_acquire_recursive>
 801f448:	bd10      	pop	{r4, pc}
 801f44a:	46c0      	nop			@ (mov r8, r8)
 801f44c:	200038f9 	.word	0x200038f9

0801f450 <__sfp_lock_release>:
 801f450:	b510      	push	{r4, lr}
 801f452:	4802      	ldr	r0, [pc, #8]	@ (801f45c <__sfp_lock_release+0xc>)
 801f454:	f000 fabc 	bl	801f9d0 <__retarget_lock_release_recursive>
 801f458:	bd10      	pop	{r4, pc}
 801f45a:	46c0      	nop			@ (mov r8, r8)
 801f45c:	200038f9 	.word	0x200038f9

0801f460 <__sinit>:
 801f460:	b510      	push	{r4, lr}
 801f462:	0004      	movs	r4, r0
 801f464:	f7ff ffec 	bl	801f440 <__sfp_lock_acquire>
 801f468:	6a23      	ldr	r3, [r4, #32]
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	d002      	beq.n	801f474 <__sinit+0x14>
 801f46e:	f7ff ffef 	bl	801f450 <__sfp_lock_release>
 801f472:	bd10      	pop	{r4, pc}
 801f474:	4b04      	ldr	r3, [pc, #16]	@ (801f488 <__sinit+0x28>)
 801f476:	6223      	str	r3, [r4, #32]
 801f478:	4b04      	ldr	r3, [pc, #16]	@ (801f48c <__sinit+0x2c>)
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	2b00      	cmp	r3, #0
 801f47e:	d1f6      	bne.n	801f46e <__sinit+0xe>
 801f480:	f7ff ffc0 	bl	801f404 <global_stdio_init.part.0>
 801f484:	e7f3      	b.n	801f46e <__sinit+0xe>
 801f486:	46c0      	nop			@ (mov r8, r8)
 801f488:	0801f3c9 	.word	0x0801f3c9
 801f48c:	200038f0 	.word	0x200038f0

0801f490 <_fwalk_sglue>:
 801f490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f492:	0014      	movs	r4, r2
 801f494:	2600      	movs	r6, #0
 801f496:	9000      	str	r0, [sp, #0]
 801f498:	9101      	str	r1, [sp, #4]
 801f49a:	68a5      	ldr	r5, [r4, #8]
 801f49c:	6867      	ldr	r7, [r4, #4]
 801f49e:	3f01      	subs	r7, #1
 801f4a0:	d504      	bpl.n	801f4ac <_fwalk_sglue+0x1c>
 801f4a2:	6824      	ldr	r4, [r4, #0]
 801f4a4:	2c00      	cmp	r4, #0
 801f4a6:	d1f8      	bne.n	801f49a <_fwalk_sglue+0xa>
 801f4a8:	0030      	movs	r0, r6
 801f4aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f4ac:	89ab      	ldrh	r3, [r5, #12]
 801f4ae:	2b01      	cmp	r3, #1
 801f4b0:	d908      	bls.n	801f4c4 <_fwalk_sglue+0x34>
 801f4b2:	220e      	movs	r2, #14
 801f4b4:	5eab      	ldrsh	r3, [r5, r2]
 801f4b6:	3301      	adds	r3, #1
 801f4b8:	d004      	beq.n	801f4c4 <_fwalk_sglue+0x34>
 801f4ba:	0029      	movs	r1, r5
 801f4bc:	9800      	ldr	r0, [sp, #0]
 801f4be:	9b01      	ldr	r3, [sp, #4]
 801f4c0:	4798      	blx	r3
 801f4c2:	4306      	orrs	r6, r0
 801f4c4:	3568      	adds	r5, #104	@ 0x68
 801f4c6:	e7ea      	b.n	801f49e <_fwalk_sglue+0xe>

0801f4c8 <iprintf>:
 801f4c8:	b40f      	push	{r0, r1, r2, r3}
 801f4ca:	b507      	push	{r0, r1, r2, lr}
 801f4cc:	4905      	ldr	r1, [pc, #20]	@ (801f4e4 <iprintf+0x1c>)
 801f4ce:	ab04      	add	r3, sp, #16
 801f4d0:	6808      	ldr	r0, [r1, #0]
 801f4d2:	cb04      	ldmia	r3!, {r2}
 801f4d4:	6881      	ldr	r1, [r0, #8]
 801f4d6:	9301      	str	r3, [sp, #4]
 801f4d8:	f002 fbe8 	bl	8021cac <_vfiprintf_r>
 801f4dc:	b003      	add	sp, #12
 801f4de:	bc08      	pop	{r3}
 801f4e0:	b004      	add	sp, #16
 801f4e2:	4718      	bx	r3
 801f4e4:	200003c8 	.word	0x200003c8

0801f4e8 <_puts_r>:
 801f4e8:	6a03      	ldr	r3, [r0, #32]
 801f4ea:	b570      	push	{r4, r5, r6, lr}
 801f4ec:	0005      	movs	r5, r0
 801f4ee:	000e      	movs	r6, r1
 801f4f0:	6884      	ldr	r4, [r0, #8]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d101      	bne.n	801f4fa <_puts_r+0x12>
 801f4f6:	f7ff ffb3 	bl	801f460 <__sinit>
 801f4fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f4fc:	07db      	lsls	r3, r3, #31
 801f4fe:	d405      	bmi.n	801f50c <_puts_r+0x24>
 801f500:	89a3      	ldrh	r3, [r4, #12]
 801f502:	059b      	lsls	r3, r3, #22
 801f504:	d402      	bmi.n	801f50c <_puts_r+0x24>
 801f506:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f508:	f000 fa61 	bl	801f9ce <__retarget_lock_acquire_recursive>
 801f50c:	89a3      	ldrh	r3, [r4, #12]
 801f50e:	071b      	lsls	r3, r3, #28
 801f510:	d502      	bpl.n	801f518 <_puts_r+0x30>
 801f512:	6923      	ldr	r3, [r4, #16]
 801f514:	2b00      	cmp	r3, #0
 801f516:	d11f      	bne.n	801f558 <_puts_r+0x70>
 801f518:	0021      	movs	r1, r4
 801f51a:	0028      	movs	r0, r5
 801f51c:	f000 f92a 	bl	801f774 <__swsetup_r>
 801f520:	2800      	cmp	r0, #0
 801f522:	d019      	beq.n	801f558 <_puts_r+0x70>
 801f524:	2501      	movs	r5, #1
 801f526:	426d      	negs	r5, r5
 801f528:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f52a:	07db      	lsls	r3, r3, #31
 801f52c:	d405      	bmi.n	801f53a <_puts_r+0x52>
 801f52e:	89a3      	ldrh	r3, [r4, #12]
 801f530:	059b      	lsls	r3, r3, #22
 801f532:	d402      	bmi.n	801f53a <_puts_r+0x52>
 801f534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f536:	f000 fa4b 	bl	801f9d0 <__retarget_lock_release_recursive>
 801f53a:	0028      	movs	r0, r5
 801f53c:	bd70      	pop	{r4, r5, r6, pc}
 801f53e:	3601      	adds	r6, #1
 801f540:	60a3      	str	r3, [r4, #8]
 801f542:	2b00      	cmp	r3, #0
 801f544:	da04      	bge.n	801f550 <_puts_r+0x68>
 801f546:	69a2      	ldr	r2, [r4, #24]
 801f548:	429a      	cmp	r2, r3
 801f54a:	dc16      	bgt.n	801f57a <_puts_r+0x92>
 801f54c:	290a      	cmp	r1, #10
 801f54e:	d014      	beq.n	801f57a <_puts_r+0x92>
 801f550:	6823      	ldr	r3, [r4, #0]
 801f552:	1c5a      	adds	r2, r3, #1
 801f554:	6022      	str	r2, [r4, #0]
 801f556:	7019      	strb	r1, [r3, #0]
 801f558:	68a3      	ldr	r3, [r4, #8]
 801f55a:	7831      	ldrb	r1, [r6, #0]
 801f55c:	3b01      	subs	r3, #1
 801f55e:	2900      	cmp	r1, #0
 801f560:	d1ed      	bne.n	801f53e <_puts_r+0x56>
 801f562:	60a3      	str	r3, [r4, #8]
 801f564:	2b00      	cmp	r3, #0
 801f566:	da0f      	bge.n	801f588 <_puts_r+0xa0>
 801f568:	0022      	movs	r2, r4
 801f56a:	0028      	movs	r0, r5
 801f56c:	310a      	adds	r1, #10
 801f56e:	f000 f8bf 	bl	801f6f0 <__swbuf_r>
 801f572:	3001      	adds	r0, #1
 801f574:	d0d6      	beq.n	801f524 <_puts_r+0x3c>
 801f576:	250a      	movs	r5, #10
 801f578:	e7d6      	b.n	801f528 <_puts_r+0x40>
 801f57a:	0022      	movs	r2, r4
 801f57c:	0028      	movs	r0, r5
 801f57e:	f000 f8b7 	bl	801f6f0 <__swbuf_r>
 801f582:	3001      	adds	r0, #1
 801f584:	d1e8      	bne.n	801f558 <_puts_r+0x70>
 801f586:	e7cd      	b.n	801f524 <_puts_r+0x3c>
 801f588:	6823      	ldr	r3, [r4, #0]
 801f58a:	1c5a      	adds	r2, r3, #1
 801f58c:	6022      	str	r2, [r4, #0]
 801f58e:	220a      	movs	r2, #10
 801f590:	701a      	strb	r2, [r3, #0]
 801f592:	e7f0      	b.n	801f576 <_puts_r+0x8e>

0801f594 <puts>:
 801f594:	b510      	push	{r4, lr}
 801f596:	4b03      	ldr	r3, [pc, #12]	@ (801f5a4 <puts+0x10>)
 801f598:	0001      	movs	r1, r0
 801f59a:	6818      	ldr	r0, [r3, #0]
 801f59c:	f7ff ffa4 	bl	801f4e8 <_puts_r>
 801f5a0:	bd10      	pop	{r4, pc}
 801f5a2:	46c0      	nop			@ (mov r8, r8)
 801f5a4:	200003c8 	.word	0x200003c8

0801f5a8 <siprintf>:
 801f5a8:	b40e      	push	{r1, r2, r3}
 801f5aa:	b500      	push	{lr}
 801f5ac:	490b      	ldr	r1, [pc, #44]	@ (801f5dc <siprintf+0x34>)
 801f5ae:	b09c      	sub	sp, #112	@ 0x70
 801f5b0:	ab1d      	add	r3, sp, #116	@ 0x74
 801f5b2:	9002      	str	r0, [sp, #8]
 801f5b4:	9006      	str	r0, [sp, #24]
 801f5b6:	9107      	str	r1, [sp, #28]
 801f5b8:	9104      	str	r1, [sp, #16]
 801f5ba:	4809      	ldr	r0, [pc, #36]	@ (801f5e0 <siprintf+0x38>)
 801f5bc:	4909      	ldr	r1, [pc, #36]	@ (801f5e4 <siprintf+0x3c>)
 801f5be:	cb04      	ldmia	r3!, {r2}
 801f5c0:	9105      	str	r1, [sp, #20]
 801f5c2:	6800      	ldr	r0, [r0, #0]
 801f5c4:	a902      	add	r1, sp, #8
 801f5c6:	9301      	str	r3, [sp, #4]
 801f5c8:	f002 fa4a 	bl	8021a60 <_svfiprintf_r>
 801f5cc:	2200      	movs	r2, #0
 801f5ce:	9b02      	ldr	r3, [sp, #8]
 801f5d0:	701a      	strb	r2, [r3, #0]
 801f5d2:	b01c      	add	sp, #112	@ 0x70
 801f5d4:	bc08      	pop	{r3}
 801f5d6:	b003      	add	sp, #12
 801f5d8:	4718      	bx	r3
 801f5da:	46c0      	nop			@ (mov r8, r8)
 801f5dc:	7fffffff 	.word	0x7fffffff
 801f5e0:	200003c8 	.word	0x200003c8
 801f5e4:	ffff0208 	.word	0xffff0208

0801f5e8 <__sread>:
 801f5e8:	b570      	push	{r4, r5, r6, lr}
 801f5ea:	000c      	movs	r4, r1
 801f5ec:	250e      	movs	r5, #14
 801f5ee:	5f49      	ldrsh	r1, [r1, r5]
 801f5f0:	f000 f99a 	bl	801f928 <_read_r>
 801f5f4:	2800      	cmp	r0, #0
 801f5f6:	db03      	blt.n	801f600 <__sread+0x18>
 801f5f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f5fa:	181b      	adds	r3, r3, r0
 801f5fc:	6563      	str	r3, [r4, #84]	@ 0x54
 801f5fe:	bd70      	pop	{r4, r5, r6, pc}
 801f600:	89a3      	ldrh	r3, [r4, #12]
 801f602:	4a02      	ldr	r2, [pc, #8]	@ (801f60c <__sread+0x24>)
 801f604:	4013      	ands	r3, r2
 801f606:	81a3      	strh	r3, [r4, #12]
 801f608:	e7f9      	b.n	801f5fe <__sread+0x16>
 801f60a:	46c0      	nop			@ (mov r8, r8)
 801f60c:	ffffefff 	.word	0xffffefff

0801f610 <__swrite>:
 801f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f612:	001f      	movs	r7, r3
 801f614:	898b      	ldrh	r3, [r1, #12]
 801f616:	0005      	movs	r5, r0
 801f618:	000c      	movs	r4, r1
 801f61a:	0016      	movs	r6, r2
 801f61c:	05db      	lsls	r3, r3, #23
 801f61e:	d505      	bpl.n	801f62c <__swrite+0x1c>
 801f620:	230e      	movs	r3, #14
 801f622:	5ec9      	ldrsh	r1, [r1, r3]
 801f624:	2200      	movs	r2, #0
 801f626:	2302      	movs	r3, #2
 801f628:	f000 f96a 	bl	801f900 <_lseek_r>
 801f62c:	89a3      	ldrh	r3, [r4, #12]
 801f62e:	4a05      	ldr	r2, [pc, #20]	@ (801f644 <__swrite+0x34>)
 801f630:	0028      	movs	r0, r5
 801f632:	4013      	ands	r3, r2
 801f634:	81a3      	strh	r3, [r4, #12]
 801f636:	0032      	movs	r2, r6
 801f638:	230e      	movs	r3, #14
 801f63a:	5ee1      	ldrsh	r1, [r4, r3]
 801f63c:	003b      	movs	r3, r7
 801f63e:	f000 f987 	bl	801f950 <_write_r>
 801f642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f644:	ffffefff 	.word	0xffffefff

0801f648 <__sseek>:
 801f648:	b570      	push	{r4, r5, r6, lr}
 801f64a:	000c      	movs	r4, r1
 801f64c:	250e      	movs	r5, #14
 801f64e:	5f49      	ldrsh	r1, [r1, r5]
 801f650:	f000 f956 	bl	801f900 <_lseek_r>
 801f654:	89a3      	ldrh	r3, [r4, #12]
 801f656:	1c42      	adds	r2, r0, #1
 801f658:	d103      	bne.n	801f662 <__sseek+0x1a>
 801f65a:	4a05      	ldr	r2, [pc, #20]	@ (801f670 <__sseek+0x28>)
 801f65c:	4013      	ands	r3, r2
 801f65e:	81a3      	strh	r3, [r4, #12]
 801f660:	bd70      	pop	{r4, r5, r6, pc}
 801f662:	2280      	movs	r2, #128	@ 0x80
 801f664:	0152      	lsls	r2, r2, #5
 801f666:	4313      	orrs	r3, r2
 801f668:	81a3      	strh	r3, [r4, #12]
 801f66a:	6560      	str	r0, [r4, #84]	@ 0x54
 801f66c:	e7f8      	b.n	801f660 <__sseek+0x18>
 801f66e:	46c0      	nop			@ (mov r8, r8)
 801f670:	ffffefff 	.word	0xffffefff

0801f674 <__sclose>:
 801f674:	b510      	push	{r4, lr}
 801f676:	230e      	movs	r3, #14
 801f678:	5ec9      	ldrsh	r1, [r1, r3]
 801f67a:	f000 f92f 	bl	801f8dc <_close_r>
 801f67e:	bd10      	pop	{r4, pc}

0801f680 <_vsniprintf_r>:
 801f680:	b530      	push	{r4, r5, lr}
 801f682:	0014      	movs	r4, r2
 801f684:	0005      	movs	r5, r0
 801f686:	001a      	movs	r2, r3
 801f688:	b09b      	sub	sp, #108	@ 0x6c
 801f68a:	2c00      	cmp	r4, #0
 801f68c:	da05      	bge.n	801f69a <_vsniprintf_r+0x1a>
 801f68e:	238b      	movs	r3, #139	@ 0x8b
 801f690:	6003      	str	r3, [r0, #0]
 801f692:	2001      	movs	r0, #1
 801f694:	4240      	negs	r0, r0
 801f696:	b01b      	add	sp, #108	@ 0x6c
 801f698:	bd30      	pop	{r4, r5, pc}
 801f69a:	2382      	movs	r3, #130	@ 0x82
 801f69c:	4668      	mov	r0, sp
 801f69e:	009b      	lsls	r3, r3, #2
 801f6a0:	8183      	strh	r3, [r0, #12]
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	9100      	str	r1, [sp, #0]
 801f6a6:	9104      	str	r1, [sp, #16]
 801f6a8:	429c      	cmp	r4, r3
 801f6aa:	d000      	beq.n	801f6ae <_vsniprintf_r+0x2e>
 801f6ac:	1e63      	subs	r3, r4, #1
 801f6ae:	9302      	str	r3, [sp, #8]
 801f6b0:	9305      	str	r3, [sp, #20]
 801f6b2:	2301      	movs	r3, #1
 801f6b4:	4669      	mov	r1, sp
 801f6b6:	425b      	negs	r3, r3
 801f6b8:	81cb      	strh	r3, [r1, #14]
 801f6ba:	0028      	movs	r0, r5
 801f6bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f6be:	f002 f9cf 	bl	8021a60 <_svfiprintf_r>
 801f6c2:	1c43      	adds	r3, r0, #1
 801f6c4:	da01      	bge.n	801f6ca <_vsniprintf_r+0x4a>
 801f6c6:	238b      	movs	r3, #139	@ 0x8b
 801f6c8:	602b      	str	r3, [r5, #0]
 801f6ca:	2c00      	cmp	r4, #0
 801f6cc:	d0e3      	beq.n	801f696 <_vsniprintf_r+0x16>
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	9b00      	ldr	r3, [sp, #0]
 801f6d2:	701a      	strb	r2, [r3, #0]
 801f6d4:	e7df      	b.n	801f696 <_vsniprintf_r+0x16>
	...

0801f6d8 <vsniprintf>:
 801f6d8:	b513      	push	{r0, r1, r4, lr}
 801f6da:	4c04      	ldr	r4, [pc, #16]	@ (801f6ec <vsniprintf+0x14>)
 801f6dc:	9300      	str	r3, [sp, #0]
 801f6de:	0013      	movs	r3, r2
 801f6e0:	000a      	movs	r2, r1
 801f6e2:	0001      	movs	r1, r0
 801f6e4:	6820      	ldr	r0, [r4, #0]
 801f6e6:	f7ff ffcb 	bl	801f680 <_vsniprintf_r>
 801f6ea:	bd16      	pop	{r1, r2, r4, pc}
 801f6ec:	200003c8 	.word	0x200003c8

0801f6f0 <__swbuf_r>:
 801f6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6f2:	0006      	movs	r6, r0
 801f6f4:	000d      	movs	r5, r1
 801f6f6:	0014      	movs	r4, r2
 801f6f8:	2800      	cmp	r0, #0
 801f6fa:	d004      	beq.n	801f706 <__swbuf_r+0x16>
 801f6fc:	6a03      	ldr	r3, [r0, #32]
 801f6fe:	2b00      	cmp	r3, #0
 801f700:	d101      	bne.n	801f706 <__swbuf_r+0x16>
 801f702:	f7ff fead 	bl	801f460 <__sinit>
 801f706:	69a3      	ldr	r3, [r4, #24]
 801f708:	60a3      	str	r3, [r4, #8]
 801f70a:	89a3      	ldrh	r3, [r4, #12]
 801f70c:	071b      	lsls	r3, r3, #28
 801f70e:	d502      	bpl.n	801f716 <__swbuf_r+0x26>
 801f710:	6923      	ldr	r3, [r4, #16]
 801f712:	2b00      	cmp	r3, #0
 801f714:	d109      	bne.n	801f72a <__swbuf_r+0x3a>
 801f716:	0021      	movs	r1, r4
 801f718:	0030      	movs	r0, r6
 801f71a:	f000 f82b 	bl	801f774 <__swsetup_r>
 801f71e:	2800      	cmp	r0, #0
 801f720:	d003      	beq.n	801f72a <__swbuf_r+0x3a>
 801f722:	2501      	movs	r5, #1
 801f724:	426d      	negs	r5, r5
 801f726:	0028      	movs	r0, r5
 801f728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f72a:	6923      	ldr	r3, [r4, #16]
 801f72c:	6820      	ldr	r0, [r4, #0]
 801f72e:	b2ef      	uxtb	r7, r5
 801f730:	1ac0      	subs	r0, r0, r3
 801f732:	6963      	ldr	r3, [r4, #20]
 801f734:	b2ed      	uxtb	r5, r5
 801f736:	4283      	cmp	r3, r0
 801f738:	dc05      	bgt.n	801f746 <__swbuf_r+0x56>
 801f73a:	0021      	movs	r1, r4
 801f73c:	0030      	movs	r0, r6
 801f73e:	f002 fc57 	bl	8021ff0 <_fflush_r>
 801f742:	2800      	cmp	r0, #0
 801f744:	d1ed      	bne.n	801f722 <__swbuf_r+0x32>
 801f746:	68a3      	ldr	r3, [r4, #8]
 801f748:	3001      	adds	r0, #1
 801f74a:	3b01      	subs	r3, #1
 801f74c:	60a3      	str	r3, [r4, #8]
 801f74e:	6823      	ldr	r3, [r4, #0]
 801f750:	1c5a      	adds	r2, r3, #1
 801f752:	6022      	str	r2, [r4, #0]
 801f754:	701f      	strb	r7, [r3, #0]
 801f756:	6963      	ldr	r3, [r4, #20]
 801f758:	4283      	cmp	r3, r0
 801f75a:	d004      	beq.n	801f766 <__swbuf_r+0x76>
 801f75c:	89a3      	ldrh	r3, [r4, #12]
 801f75e:	07db      	lsls	r3, r3, #31
 801f760:	d5e1      	bpl.n	801f726 <__swbuf_r+0x36>
 801f762:	2d0a      	cmp	r5, #10
 801f764:	d1df      	bne.n	801f726 <__swbuf_r+0x36>
 801f766:	0021      	movs	r1, r4
 801f768:	0030      	movs	r0, r6
 801f76a:	f002 fc41 	bl	8021ff0 <_fflush_r>
 801f76e:	2800      	cmp	r0, #0
 801f770:	d0d9      	beq.n	801f726 <__swbuf_r+0x36>
 801f772:	e7d6      	b.n	801f722 <__swbuf_r+0x32>

0801f774 <__swsetup_r>:
 801f774:	4b2d      	ldr	r3, [pc, #180]	@ (801f82c <__swsetup_r+0xb8>)
 801f776:	b570      	push	{r4, r5, r6, lr}
 801f778:	0005      	movs	r5, r0
 801f77a:	6818      	ldr	r0, [r3, #0]
 801f77c:	000c      	movs	r4, r1
 801f77e:	2800      	cmp	r0, #0
 801f780:	d004      	beq.n	801f78c <__swsetup_r+0x18>
 801f782:	6a03      	ldr	r3, [r0, #32]
 801f784:	2b00      	cmp	r3, #0
 801f786:	d101      	bne.n	801f78c <__swsetup_r+0x18>
 801f788:	f7ff fe6a 	bl	801f460 <__sinit>
 801f78c:	230c      	movs	r3, #12
 801f78e:	5ee2      	ldrsh	r2, [r4, r3]
 801f790:	0713      	lsls	r3, r2, #28
 801f792:	d423      	bmi.n	801f7dc <__swsetup_r+0x68>
 801f794:	06d3      	lsls	r3, r2, #27
 801f796:	d407      	bmi.n	801f7a8 <__swsetup_r+0x34>
 801f798:	2309      	movs	r3, #9
 801f79a:	602b      	str	r3, [r5, #0]
 801f79c:	2340      	movs	r3, #64	@ 0x40
 801f79e:	2001      	movs	r0, #1
 801f7a0:	4313      	orrs	r3, r2
 801f7a2:	81a3      	strh	r3, [r4, #12]
 801f7a4:	4240      	negs	r0, r0
 801f7a6:	e03a      	b.n	801f81e <__swsetup_r+0xaa>
 801f7a8:	0752      	lsls	r2, r2, #29
 801f7aa:	d513      	bpl.n	801f7d4 <__swsetup_r+0x60>
 801f7ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f7ae:	2900      	cmp	r1, #0
 801f7b0:	d008      	beq.n	801f7c4 <__swsetup_r+0x50>
 801f7b2:	0023      	movs	r3, r4
 801f7b4:	3344      	adds	r3, #68	@ 0x44
 801f7b6:	4299      	cmp	r1, r3
 801f7b8:	d002      	beq.n	801f7c0 <__swsetup_r+0x4c>
 801f7ba:	0028      	movs	r0, r5
 801f7bc:	f000 ffa6 	bl	802070c <_free_r>
 801f7c0:	2300      	movs	r3, #0
 801f7c2:	6363      	str	r3, [r4, #52]	@ 0x34
 801f7c4:	2224      	movs	r2, #36	@ 0x24
 801f7c6:	89a3      	ldrh	r3, [r4, #12]
 801f7c8:	4393      	bics	r3, r2
 801f7ca:	81a3      	strh	r3, [r4, #12]
 801f7cc:	2300      	movs	r3, #0
 801f7ce:	6063      	str	r3, [r4, #4]
 801f7d0:	6923      	ldr	r3, [r4, #16]
 801f7d2:	6023      	str	r3, [r4, #0]
 801f7d4:	2308      	movs	r3, #8
 801f7d6:	89a2      	ldrh	r2, [r4, #12]
 801f7d8:	4313      	orrs	r3, r2
 801f7da:	81a3      	strh	r3, [r4, #12]
 801f7dc:	6923      	ldr	r3, [r4, #16]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d10b      	bne.n	801f7fa <__swsetup_r+0x86>
 801f7e2:	21a0      	movs	r1, #160	@ 0xa0
 801f7e4:	2280      	movs	r2, #128	@ 0x80
 801f7e6:	89a3      	ldrh	r3, [r4, #12]
 801f7e8:	0089      	lsls	r1, r1, #2
 801f7ea:	0092      	lsls	r2, r2, #2
 801f7ec:	400b      	ands	r3, r1
 801f7ee:	4293      	cmp	r3, r2
 801f7f0:	d003      	beq.n	801f7fa <__swsetup_r+0x86>
 801f7f2:	0021      	movs	r1, r4
 801f7f4:	0028      	movs	r0, r5
 801f7f6:	f002 fc51 	bl	802209c <__smakebuf_r>
 801f7fa:	230c      	movs	r3, #12
 801f7fc:	5ee2      	ldrsh	r2, [r4, r3]
 801f7fe:	2101      	movs	r1, #1
 801f800:	0013      	movs	r3, r2
 801f802:	400b      	ands	r3, r1
 801f804:	420a      	tst	r2, r1
 801f806:	d00b      	beq.n	801f820 <__swsetup_r+0xac>
 801f808:	2300      	movs	r3, #0
 801f80a:	60a3      	str	r3, [r4, #8]
 801f80c:	6963      	ldr	r3, [r4, #20]
 801f80e:	425b      	negs	r3, r3
 801f810:	61a3      	str	r3, [r4, #24]
 801f812:	2000      	movs	r0, #0
 801f814:	6923      	ldr	r3, [r4, #16]
 801f816:	4283      	cmp	r3, r0
 801f818:	d101      	bne.n	801f81e <__swsetup_r+0xaa>
 801f81a:	0613      	lsls	r3, r2, #24
 801f81c:	d4be      	bmi.n	801f79c <__swsetup_r+0x28>
 801f81e:	bd70      	pop	{r4, r5, r6, pc}
 801f820:	0791      	lsls	r1, r2, #30
 801f822:	d400      	bmi.n	801f826 <__swsetup_r+0xb2>
 801f824:	6963      	ldr	r3, [r4, #20]
 801f826:	60a3      	str	r3, [r4, #8]
 801f828:	e7f3      	b.n	801f812 <__swsetup_r+0x9e>
 801f82a:	46c0      	nop			@ (mov r8, r8)
 801f82c:	200003c8 	.word	0x200003c8

0801f830 <memset>:
 801f830:	0003      	movs	r3, r0
 801f832:	1882      	adds	r2, r0, r2
 801f834:	4293      	cmp	r3, r2
 801f836:	d100      	bne.n	801f83a <memset+0xa>
 801f838:	4770      	bx	lr
 801f83a:	7019      	strb	r1, [r3, #0]
 801f83c:	3301      	adds	r3, #1
 801f83e:	e7f9      	b.n	801f834 <memset+0x4>

0801f840 <strchr>:
 801f840:	b2c9      	uxtb	r1, r1
 801f842:	7803      	ldrb	r3, [r0, #0]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d004      	beq.n	801f852 <strchr+0x12>
 801f848:	428b      	cmp	r3, r1
 801f84a:	d100      	bne.n	801f84e <strchr+0xe>
 801f84c:	4770      	bx	lr
 801f84e:	3001      	adds	r0, #1
 801f850:	e7f7      	b.n	801f842 <strchr+0x2>
 801f852:	424b      	negs	r3, r1
 801f854:	4159      	adcs	r1, r3
 801f856:	4249      	negs	r1, r1
 801f858:	4008      	ands	r0, r1
 801f85a:	e7f7      	b.n	801f84c <strchr+0xc>

0801f85c <strncmp>:
 801f85c:	b530      	push	{r4, r5, lr}
 801f85e:	0005      	movs	r5, r0
 801f860:	1e10      	subs	r0, r2, #0
 801f862:	d00b      	beq.n	801f87c <strncmp+0x20>
 801f864:	2400      	movs	r4, #0
 801f866:	3a01      	subs	r2, #1
 801f868:	5d2b      	ldrb	r3, [r5, r4]
 801f86a:	5d08      	ldrb	r0, [r1, r4]
 801f86c:	4283      	cmp	r3, r0
 801f86e:	d104      	bne.n	801f87a <strncmp+0x1e>
 801f870:	42a2      	cmp	r2, r4
 801f872:	d002      	beq.n	801f87a <strncmp+0x1e>
 801f874:	3401      	adds	r4, #1
 801f876:	2b00      	cmp	r3, #0
 801f878:	d1f6      	bne.n	801f868 <strncmp+0xc>
 801f87a:	1a18      	subs	r0, r3, r0
 801f87c:	bd30      	pop	{r4, r5, pc}

0801f87e <strncpy>:
 801f87e:	0003      	movs	r3, r0
 801f880:	b530      	push	{r4, r5, lr}
 801f882:	001d      	movs	r5, r3
 801f884:	2a00      	cmp	r2, #0
 801f886:	d006      	beq.n	801f896 <strncpy+0x18>
 801f888:	780c      	ldrb	r4, [r1, #0]
 801f88a:	3a01      	subs	r2, #1
 801f88c:	3301      	adds	r3, #1
 801f88e:	702c      	strb	r4, [r5, #0]
 801f890:	3101      	adds	r1, #1
 801f892:	2c00      	cmp	r4, #0
 801f894:	d1f5      	bne.n	801f882 <strncpy+0x4>
 801f896:	2100      	movs	r1, #0
 801f898:	189a      	adds	r2, r3, r2
 801f89a:	4293      	cmp	r3, r2
 801f89c:	d100      	bne.n	801f8a0 <strncpy+0x22>
 801f89e:	bd30      	pop	{r4, r5, pc}
 801f8a0:	7019      	strb	r1, [r3, #0]
 801f8a2:	3301      	adds	r3, #1
 801f8a4:	e7f9      	b.n	801f89a <strncpy+0x1c>

0801f8a6 <strstr>:
 801f8a6:	780a      	ldrb	r2, [r1, #0]
 801f8a8:	b530      	push	{r4, r5, lr}
 801f8aa:	2a00      	cmp	r2, #0
 801f8ac:	d10c      	bne.n	801f8c8 <strstr+0x22>
 801f8ae:	bd30      	pop	{r4, r5, pc}
 801f8b0:	429a      	cmp	r2, r3
 801f8b2:	d108      	bne.n	801f8c6 <strstr+0x20>
 801f8b4:	2301      	movs	r3, #1
 801f8b6:	5ccc      	ldrb	r4, [r1, r3]
 801f8b8:	2c00      	cmp	r4, #0
 801f8ba:	d0f8      	beq.n	801f8ae <strstr+0x8>
 801f8bc:	5cc5      	ldrb	r5, [r0, r3]
 801f8be:	42a5      	cmp	r5, r4
 801f8c0:	d101      	bne.n	801f8c6 <strstr+0x20>
 801f8c2:	3301      	adds	r3, #1
 801f8c4:	e7f7      	b.n	801f8b6 <strstr+0x10>
 801f8c6:	3001      	adds	r0, #1
 801f8c8:	7803      	ldrb	r3, [r0, #0]
 801f8ca:	2b00      	cmp	r3, #0
 801f8cc:	d1f0      	bne.n	801f8b0 <strstr+0xa>
 801f8ce:	0018      	movs	r0, r3
 801f8d0:	e7ed      	b.n	801f8ae <strstr+0x8>
	...

0801f8d4 <_localeconv_r>:
 801f8d4:	4800      	ldr	r0, [pc, #0]	@ (801f8d8 <_localeconv_r+0x4>)
 801f8d6:	4770      	bx	lr
 801f8d8:	2000034c 	.word	0x2000034c

0801f8dc <_close_r>:
 801f8dc:	2300      	movs	r3, #0
 801f8de:	b570      	push	{r4, r5, r6, lr}
 801f8e0:	4d06      	ldr	r5, [pc, #24]	@ (801f8fc <_close_r+0x20>)
 801f8e2:	0004      	movs	r4, r0
 801f8e4:	0008      	movs	r0, r1
 801f8e6:	602b      	str	r3, [r5, #0]
 801f8e8:	f7ed fc92 	bl	800d210 <_close>
 801f8ec:	1c43      	adds	r3, r0, #1
 801f8ee:	d103      	bne.n	801f8f8 <_close_r+0x1c>
 801f8f0:	682b      	ldr	r3, [r5, #0]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d000      	beq.n	801f8f8 <_close_r+0x1c>
 801f8f6:	6023      	str	r3, [r4, #0]
 801f8f8:	bd70      	pop	{r4, r5, r6, pc}
 801f8fa:	46c0      	nop			@ (mov r8, r8)
 801f8fc:	200038f4 	.word	0x200038f4

0801f900 <_lseek_r>:
 801f900:	b570      	push	{r4, r5, r6, lr}
 801f902:	0004      	movs	r4, r0
 801f904:	0008      	movs	r0, r1
 801f906:	0011      	movs	r1, r2
 801f908:	001a      	movs	r2, r3
 801f90a:	2300      	movs	r3, #0
 801f90c:	4d05      	ldr	r5, [pc, #20]	@ (801f924 <_lseek_r+0x24>)
 801f90e:	602b      	str	r3, [r5, #0]
 801f910:	f7ed fc9f 	bl	800d252 <_lseek>
 801f914:	1c43      	adds	r3, r0, #1
 801f916:	d103      	bne.n	801f920 <_lseek_r+0x20>
 801f918:	682b      	ldr	r3, [r5, #0]
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	d000      	beq.n	801f920 <_lseek_r+0x20>
 801f91e:	6023      	str	r3, [r4, #0]
 801f920:	bd70      	pop	{r4, r5, r6, pc}
 801f922:	46c0      	nop			@ (mov r8, r8)
 801f924:	200038f4 	.word	0x200038f4

0801f928 <_read_r>:
 801f928:	b570      	push	{r4, r5, r6, lr}
 801f92a:	0004      	movs	r4, r0
 801f92c:	0008      	movs	r0, r1
 801f92e:	0011      	movs	r1, r2
 801f930:	001a      	movs	r2, r3
 801f932:	2300      	movs	r3, #0
 801f934:	4d05      	ldr	r5, [pc, #20]	@ (801f94c <_read_r+0x24>)
 801f936:	602b      	str	r3, [r5, #0]
 801f938:	f7ed fc4d 	bl	800d1d6 <_read>
 801f93c:	1c43      	adds	r3, r0, #1
 801f93e:	d103      	bne.n	801f948 <_read_r+0x20>
 801f940:	682b      	ldr	r3, [r5, #0]
 801f942:	2b00      	cmp	r3, #0
 801f944:	d000      	beq.n	801f948 <_read_r+0x20>
 801f946:	6023      	str	r3, [r4, #0]
 801f948:	bd70      	pop	{r4, r5, r6, pc}
 801f94a:	46c0      	nop			@ (mov r8, r8)
 801f94c:	200038f4 	.word	0x200038f4

0801f950 <_write_r>:
 801f950:	b570      	push	{r4, r5, r6, lr}
 801f952:	0004      	movs	r4, r0
 801f954:	0008      	movs	r0, r1
 801f956:	0011      	movs	r1, r2
 801f958:	001a      	movs	r2, r3
 801f95a:	2300      	movs	r3, #0
 801f95c:	4d05      	ldr	r5, [pc, #20]	@ (801f974 <_write_r+0x24>)
 801f95e:	602b      	str	r3, [r5, #0]
 801f960:	f7ee f90e 	bl	800db80 <_write>
 801f964:	1c43      	adds	r3, r0, #1
 801f966:	d103      	bne.n	801f970 <_write_r+0x20>
 801f968:	682b      	ldr	r3, [r5, #0]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d000      	beq.n	801f970 <_write_r+0x20>
 801f96e:	6023      	str	r3, [r4, #0]
 801f970:	bd70      	pop	{r4, r5, r6, pc}
 801f972:	46c0      	nop			@ (mov r8, r8)
 801f974:	200038f4 	.word	0x200038f4

0801f978 <__errno>:
 801f978:	4b01      	ldr	r3, [pc, #4]	@ (801f980 <__errno+0x8>)
 801f97a:	6818      	ldr	r0, [r3, #0]
 801f97c:	4770      	bx	lr
 801f97e:	46c0      	nop			@ (mov r8, r8)
 801f980:	200003c8 	.word	0x200003c8

0801f984 <__libc_init_array>:
 801f984:	b570      	push	{r4, r5, r6, lr}
 801f986:	2600      	movs	r6, #0
 801f988:	4c0c      	ldr	r4, [pc, #48]	@ (801f9bc <__libc_init_array+0x38>)
 801f98a:	4d0d      	ldr	r5, [pc, #52]	@ (801f9c0 <__libc_init_array+0x3c>)
 801f98c:	1b64      	subs	r4, r4, r5
 801f98e:	10a4      	asrs	r4, r4, #2
 801f990:	42a6      	cmp	r6, r4
 801f992:	d109      	bne.n	801f9a8 <__libc_init_array+0x24>
 801f994:	2600      	movs	r6, #0
 801f996:	f002 fee9 	bl	802276c <_init>
 801f99a:	4c0a      	ldr	r4, [pc, #40]	@ (801f9c4 <__libc_init_array+0x40>)
 801f99c:	4d0a      	ldr	r5, [pc, #40]	@ (801f9c8 <__libc_init_array+0x44>)
 801f99e:	1b64      	subs	r4, r4, r5
 801f9a0:	10a4      	asrs	r4, r4, #2
 801f9a2:	42a6      	cmp	r6, r4
 801f9a4:	d105      	bne.n	801f9b2 <__libc_init_array+0x2e>
 801f9a6:	bd70      	pop	{r4, r5, r6, pc}
 801f9a8:	00b3      	lsls	r3, r6, #2
 801f9aa:	58eb      	ldr	r3, [r5, r3]
 801f9ac:	4798      	blx	r3
 801f9ae:	3601      	adds	r6, #1
 801f9b0:	e7ee      	b.n	801f990 <__libc_init_array+0xc>
 801f9b2:	00b3      	lsls	r3, r6, #2
 801f9b4:	58eb      	ldr	r3, [r5, r3]
 801f9b6:	4798      	blx	r3
 801f9b8:	3601      	adds	r6, #1
 801f9ba:	e7f2      	b.n	801f9a2 <__libc_init_array+0x1e>
 801f9bc:	080252e8 	.word	0x080252e8
 801f9c0:	080252e8 	.word	0x080252e8
 801f9c4:	080252ec 	.word	0x080252ec
 801f9c8:	080252e8 	.word	0x080252e8

0801f9cc <__retarget_lock_init_recursive>:
 801f9cc:	4770      	bx	lr

0801f9ce <__retarget_lock_acquire_recursive>:
 801f9ce:	4770      	bx	lr

0801f9d0 <__retarget_lock_release_recursive>:
 801f9d0:	4770      	bx	lr

0801f9d2 <memchr>:
 801f9d2:	b2c9      	uxtb	r1, r1
 801f9d4:	1882      	adds	r2, r0, r2
 801f9d6:	4290      	cmp	r0, r2
 801f9d8:	d101      	bne.n	801f9de <memchr+0xc>
 801f9da:	2000      	movs	r0, #0
 801f9dc:	4770      	bx	lr
 801f9de:	7803      	ldrb	r3, [r0, #0]
 801f9e0:	428b      	cmp	r3, r1
 801f9e2:	d0fb      	beq.n	801f9dc <memchr+0xa>
 801f9e4:	3001      	adds	r0, #1
 801f9e6:	e7f6      	b.n	801f9d6 <memchr+0x4>

0801f9e8 <memcpy>:
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	b510      	push	{r4, lr}
 801f9ec:	429a      	cmp	r2, r3
 801f9ee:	d100      	bne.n	801f9f2 <memcpy+0xa>
 801f9f0:	bd10      	pop	{r4, pc}
 801f9f2:	5ccc      	ldrb	r4, [r1, r3]
 801f9f4:	54c4      	strb	r4, [r0, r3]
 801f9f6:	3301      	adds	r3, #1
 801f9f8:	e7f8      	b.n	801f9ec <memcpy+0x4>
	...

0801f9fc <nan>:
 801f9fc:	2000      	movs	r0, #0
 801f9fe:	4901      	ldr	r1, [pc, #4]	@ (801fa04 <nan+0x8>)
 801fa00:	4770      	bx	lr
 801fa02:	46c0      	nop			@ (mov r8, r8)
 801fa04:	7ff80000 	.word	0x7ff80000

0801fa08 <quorem>:
 801fa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa0a:	6902      	ldr	r2, [r0, #16]
 801fa0c:	690f      	ldr	r7, [r1, #16]
 801fa0e:	b087      	sub	sp, #28
 801fa10:	0006      	movs	r6, r0
 801fa12:	000b      	movs	r3, r1
 801fa14:	2000      	movs	r0, #0
 801fa16:	9102      	str	r1, [sp, #8]
 801fa18:	42ba      	cmp	r2, r7
 801fa1a:	db6d      	blt.n	801faf8 <quorem+0xf0>
 801fa1c:	3f01      	subs	r7, #1
 801fa1e:	00bc      	lsls	r4, r7, #2
 801fa20:	3314      	adds	r3, #20
 801fa22:	9305      	str	r3, [sp, #20]
 801fa24:	191b      	adds	r3, r3, r4
 801fa26:	9303      	str	r3, [sp, #12]
 801fa28:	0033      	movs	r3, r6
 801fa2a:	3314      	adds	r3, #20
 801fa2c:	191c      	adds	r4, r3, r4
 801fa2e:	9301      	str	r3, [sp, #4]
 801fa30:	6823      	ldr	r3, [r4, #0]
 801fa32:	9304      	str	r3, [sp, #16]
 801fa34:	9b03      	ldr	r3, [sp, #12]
 801fa36:	9804      	ldr	r0, [sp, #16]
 801fa38:	681d      	ldr	r5, [r3, #0]
 801fa3a:	3501      	adds	r5, #1
 801fa3c:	0029      	movs	r1, r5
 801fa3e:	f7e0 fbb1 	bl	80001a4 <__udivsi3>
 801fa42:	9b04      	ldr	r3, [sp, #16]
 801fa44:	9000      	str	r0, [sp, #0]
 801fa46:	42ab      	cmp	r3, r5
 801fa48:	d32b      	bcc.n	801faa2 <quorem+0x9a>
 801fa4a:	9b05      	ldr	r3, [sp, #20]
 801fa4c:	9d01      	ldr	r5, [sp, #4]
 801fa4e:	469c      	mov	ip, r3
 801fa50:	2300      	movs	r3, #0
 801fa52:	9305      	str	r3, [sp, #20]
 801fa54:	9304      	str	r3, [sp, #16]
 801fa56:	4662      	mov	r2, ip
 801fa58:	ca08      	ldmia	r2!, {r3}
 801fa5a:	6828      	ldr	r0, [r5, #0]
 801fa5c:	4694      	mov	ip, r2
 801fa5e:	9a00      	ldr	r2, [sp, #0]
 801fa60:	b299      	uxth	r1, r3
 801fa62:	4351      	muls	r1, r2
 801fa64:	9a05      	ldr	r2, [sp, #20]
 801fa66:	0c1b      	lsrs	r3, r3, #16
 801fa68:	1889      	adds	r1, r1, r2
 801fa6a:	9a00      	ldr	r2, [sp, #0]
 801fa6c:	4353      	muls	r3, r2
 801fa6e:	0c0a      	lsrs	r2, r1, #16
 801fa70:	189b      	adds	r3, r3, r2
 801fa72:	0c1a      	lsrs	r2, r3, #16
 801fa74:	b289      	uxth	r1, r1
 801fa76:	9205      	str	r2, [sp, #20]
 801fa78:	b282      	uxth	r2, r0
 801fa7a:	1a52      	subs	r2, r2, r1
 801fa7c:	9904      	ldr	r1, [sp, #16]
 801fa7e:	0c00      	lsrs	r0, r0, #16
 801fa80:	1852      	adds	r2, r2, r1
 801fa82:	b29b      	uxth	r3, r3
 801fa84:	1411      	asrs	r1, r2, #16
 801fa86:	1ac3      	subs	r3, r0, r3
 801fa88:	185b      	adds	r3, r3, r1
 801fa8a:	1419      	asrs	r1, r3, #16
 801fa8c:	b292      	uxth	r2, r2
 801fa8e:	041b      	lsls	r3, r3, #16
 801fa90:	431a      	orrs	r2, r3
 801fa92:	9b03      	ldr	r3, [sp, #12]
 801fa94:	9104      	str	r1, [sp, #16]
 801fa96:	c504      	stmia	r5!, {r2}
 801fa98:	4563      	cmp	r3, ip
 801fa9a:	d2dc      	bcs.n	801fa56 <quorem+0x4e>
 801fa9c:	6823      	ldr	r3, [r4, #0]
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	d030      	beq.n	801fb04 <quorem+0xfc>
 801faa2:	0030      	movs	r0, r6
 801faa4:	9902      	ldr	r1, [sp, #8]
 801faa6:	f001 fd7d 	bl	80215a4 <__mcmp>
 801faaa:	2800      	cmp	r0, #0
 801faac:	db23      	blt.n	801faf6 <quorem+0xee>
 801faae:	0034      	movs	r4, r6
 801fab0:	2500      	movs	r5, #0
 801fab2:	9902      	ldr	r1, [sp, #8]
 801fab4:	3414      	adds	r4, #20
 801fab6:	3114      	adds	r1, #20
 801fab8:	6823      	ldr	r3, [r4, #0]
 801faba:	c901      	ldmia	r1!, {r0}
 801fabc:	9302      	str	r3, [sp, #8]
 801fabe:	466b      	mov	r3, sp
 801fac0:	891b      	ldrh	r3, [r3, #8]
 801fac2:	b282      	uxth	r2, r0
 801fac4:	1a9a      	subs	r2, r3, r2
 801fac6:	9b02      	ldr	r3, [sp, #8]
 801fac8:	1952      	adds	r2, r2, r5
 801faca:	0c00      	lsrs	r0, r0, #16
 801facc:	0c1b      	lsrs	r3, r3, #16
 801face:	1a1b      	subs	r3, r3, r0
 801fad0:	1410      	asrs	r0, r2, #16
 801fad2:	181b      	adds	r3, r3, r0
 801fad4:	141d      	asrs	r5, r3, #16
 801fad6:	b292      	uxth	r2, r2
 801fad8:	041b      	lsls	r3, r3, #16
 801fada:	431a      	orrs	r2, r3
 801fadc:	9b03      	ldr	r3, [sp, #12]
 801fade:	c404      	stmia	r4!, {r2}
 801fae0:	428b      	cmp	r3, r1
 801fae2:	d2e9      	bcs.n	801fab8 <quorem+0xb0>
 801fae4:	9a01      	ldr	r2, [sp, #4]
 801fae6:	00bb      	lsls	r3, r7, #2
 801fae8:	18d3      	adds	r3, r2, r3
 801faea:	681a      	ldr	r2, [r3, #0]
 801faec:	2a00      	cmp	r2, #0
 801faee:	d013      	beq.n	801fb18 <quorem+0x110>
 801faf0:	9b00      	ldr	r3, [sp, #0]
 801faf2:	3301      	adds	r3, #1
 801faf4:	9300      	str	r3, [sp, #0]
 801faf6:	9800      	ldr	r0, [sp, #0]
 801faf8:	b007      	add	sp, #28
 801fafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fafc:	6823      	ldr	r3, [r4, #0]
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	d104      	bne.n	801fb0c <quorem+0x104>
 801fb02:	3f01      	subs	r7, #1
 801fb04:	9b01      	ldr	r3, [sp, #4]
 801fb06:	3c04      	subs	r4, #4
 801fb08:	42a3      	cmp	r3, r4
 801fb0a:	d3f7      	bcc.n	801fafc <quorem+0xf4>
 801fb0c:	6137      	str	r7, [r6, #16]
 801fb0e:	e7c8      	b.n	801faa2 <quorem+0x9a>
 801fb10:	681a      	ldr	r2, [r3, #0]
 801fb12:	2a00      	cmp	r2, #0
 801fb14:	d104      	bne.n	801fb20 <quorem+0x118>
 801fb16:	3f01      	subs	r7, #1
 801fb18:	9a01      	ldr	r2, [sp, #4]
 801fb1a:	3b04      	subs	r3, #4
 801fb1c:	429a      	cmp	r2, r3
 801fb1e:	d3f7      	bcc.n	801fb10 <quorem+0x108>
 801fb20:	6137      	str	r7, [r6, #16]
 801fb22:	e7e5      	b.n	801faf0 <quorem+0xe8>

0801fb24 <_dtoa_r>:
 801fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb26:	0014      	movs	r4, r2
 801fb28:	001d      	movs	r5, r3
 801fb2a:	69c6      	ldr	r6, [r0, #28]
 801fb2c:	b09d      	sub	sp, #116	@ 0x74
 801fb2e:	940a      	str	r4, [sp, #40]	@ 0x28
 801fb30:	950b      	str	r5, [sp, #44]	@ 0x2c
 801fb32:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801fb34:	9003      	str	r0, [sp, #12]
 801fb36:	2e00      	cmp	r6, #0
 801fb38:	d10f      	bne.n	801fb5a <_dtoa_r+0x36>
 801fb3a:	2010      	movs	r0, #16
 801fb3c:	f001 f98a 	bl	8020e54 <malloc>
 801fb40:	9b03      	ldr	r3, [sp, #12]
 801fb42:	1e02      	subs	r2, r0, #0
 801fb44:	61d8      	str	r0, [r3, #28]
 801fb46:	d104      	bne.n	801fb52 <_dtoa_r+0x2e>
 801fb48:	21ef      	movs	r1, #239	@ 0xef
 801fb4a:	4bc7      	ldr	r3, [pc, #796]	@ (801fe68 <_dtoa_r+0x344>)
 801fb4c:	48c7      	ldr	r0, [pc, #796]	@ (801fe6c <_dtoa_r+0x348>)
 801fb4e:	f002 fb2f 	bl	80221b0 <__assert_func>
 801fb52:	6046      	str	r6, [r0, #4]
 801fb54:	6086      	str	r6, [r0, #8]
 801fb56:	6006      	str	r6, [r0, #0]
 801fb58:	60c6      	str	r6, [r0, #12]
 801fb5a:	9b03      	ldr	r3, [sp, #12]
 801fb5c:	69db      	ldr	r3, [r3, #28]
 801fb5e:	6819      	ldr	r1, [r3, #0]
 801fb60:	2900      	cmp	r1, #0
 801fb62:	d00b      	beq.n	801fb7c <_dtoa_r+0x58>
 801fb64:	685a      	ldr	r2, [r3, #4]
 801fb66:	2301      	movs	r3, #1
 801fb68:	4093      	lsls	r3, r2
 801fb6a:	604a      	str	r2, [r1, #4]
 801fb6c:	608b      	str	r3, [r1, #8]
 801fb6e:	9803      	ldr	r0, [sp, #12]
 801fb70:	f001 fa82 	bl	8021078 <_Bfree>
 801fb74:	2200      	movs	r2, #0
 801fb76:	9b03      	ldr	r3, [sp, #12]
 801fb78:	69db      	ldr	r3, [r3, #28]
 801fb7a:	601a      	str	r2, [r3, #0]
 801fb7c:	2d00      	cmp	r5, #0
 801fb7e:	da1e      	bge.n	801fbbe <_dtoa_r+0x9a>
 801fb80:	2301      	movs	r3, #1
 801fb82:	603b      	str	r3, [r7, #0]
 801fb84:	006b      	lsls	r3, r5, #1
 801fb86:	085b      	lsrs	r3, r3, #1
 801fb88:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fb8a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fb8c:	4bb8      	ldr	r3, [pc, #736]	@ (801fe70 <_dtoa_r+0x34c>)
 801fb8e:	4ab8      	ldr	r2, [pc, #736]	@ (801fe70 <_dtoa_r+0x34c>)
 801fb90:	403b      	ands	r3, r7
 801fb92:	4293      	cmp	r3, r2
 801fb94:	d116      	bne.n	801fbc4 <_dtoa_r+0xa0>
 801fb96:	4bb7      	ldr	r3, [pc, #732]	@ (801fe74 <_dtoa_r+0x350>)
 801fb98:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fb9a:	6013      	str	r3, [r2, #0]
 801fb9c:	033b      	lsls	r3, r7, #12
 801fb9e:	0b1b      	lsrs	r3, r3, #12
 801fba0:	4323      	orrs	r3, r4
 801fba2:	d101      	bne.n	801fba8 <_dtoa_r+0x84>
 801fba4:	f000 fd83 	bl	80206ae <_dtoa_r+0xb8a>
 801fba8:	4bb3      	ldr	r3, [pc, #716]	@ (801fe78 <_dtoa_r+0x354>)
 801fbaa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fbac:	9308      	str	r3, [sp, #32]
 801fbae:	2a00      	cmp	r2, #0
 801fbb0:	d002      	beq.n	801fbb8 <_dtoa_r+0x94>
 801fbb2:	4bb2      	ldr	r3, [pc, #712]	@ (801fe7c <_dtoa_r+0x358>)
 801fbb4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fbb6:	6013      	str	r3, [r2, #0]
 801fbb8:	9808      	ldr	r0, [sp, #32]
 801fbba:	b01d      	add	sp, #116	@ 0x74
 801fbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbbe:	2300      	movs	r3, #0
 801fbc0:	603b      	str	r3, [r7, #0]
 801fbc2:	e7e2      	b.n	801fb8a <_dtoa_r+0x66>
 801fbc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbc8:	9212      	str	r2, [sp, #72]	@ 0x48
 801fbca:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fbcc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fbce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fbd0:	2200      	movs	r2, #0
 801fbd2:	2300      	movs	r3, #0
 801fbd4:	f7e0 fc6c 	bl	80004b0 <__aeabi_dcmpeq>
 801fbd8:	1e06      	subs	r6, r0, #0
 801fbda:	d00b      	beq.n	801fbf4 <_dtoa_r+0xd0>
 801fbdc:	2301      	movs	r3, #1
 801fbde:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fbe0:	6013      	str	r3, [r2, #0]
 801fbe2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d002      	beq.n	801fbee <_dtoa_r+0xca>
 801fbe8:	4ba5      	ldr	r3, [pc, #660]	@ (801fe80 <_dtoa_r+0x35c>)
 801fbea:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fbec:	6013      	str	r3, [r2, #0]
 801fbee:	4ba5      	ldr	r3, [pc, #660]	@ (801fe84 <_dtoa_r+0x360>)
 801fbf0:	9308      	str	r3, [sp, #32]
 801fbf2:	e7e1      	b.n	801fbb8 <_dtoa_r+0x94>
 801fbf4:	ab1a      	add	r3, sp, #104	@ 0x68
 801fbf6:	9301      	str	r3, [sp, #4]
 801fbf8:	ab1b      	add	r3, sp, #108	@ 0x6c
 801fbfa:	9300      	str	r3, [sp, #0]
 801fbfc:	9803      	ldr	r0, [sp, #12]
 801fbfe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fc00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc02:	f001 fdf1 	bl	80217e8 <__d2b>
 801fc06:	007a      	lsls	r2, r7, #1
 801fc08:	9005      	str	r0, [sp, #20]
 801fc0a:	0d52      	lsrs	r2, r2, #21
 801fc0c:	d100      	bne.n	801fc10 <_dtoa_r+0xec>
 801fc0e:	e07b      	b.n	801fd08 <_dtoa_r+0x1e4>
 801fc10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc12:	9618      	str	r6, [sp, #96]	@ 0x60
 801fc14:	0319      	lsls	r1, r3, #12
 801fc16:	4b9c      	ldr	r3, [pc, #624]	@ (801fe88 <_dtoa_r+0x364>)
 801fc18:	0b09      	lsrs	r1, r1, #12
 801fc1a:	430b      	orrs	r3, r1
 801fc1c:	499b      	ldr	r1, [pc, #620]	@ (801fe8c <_dtoa_r+0x368>)
 801fc1e:	1857      	adds	r7, r2, r1
 801fc20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fc22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fc24:	0019      	movs	r1, r3
 801fc26:	2200      	movs	r2, #0
 801fc28:	4b99      	ldr	r3, [pc, #612]	@ (801fe90 <_dtoa_r+0x36c>)
 801fc2a:	f7e2 ffcf 	bl	8002bcc <__aeabi_dsub>
 801fc2e:	4a99      	ldr	r2, [pc, #612]	@ (801fe94 <_dtoa_r+0x370>)
 801fc30:	4b99      	ldr	r3, [pc, #612]	@ (801fe98 <_dtoa_r+0x374>)
 801fc32:	f7e2 fd03 	bl	800263c <__aeabi_dmul>
 801fc36:	4a99      	ldr	r2, [pc, #612]	@ (801fe9c <_dtoa_r+0x378>)
 801fc38:	4b99      	ldr	r3, [pc, #612]	@ (801fea0 <_dtoa_r+0x37c>)
 801fc3a:	f7e1 fd57 	bl	80016ec <__aeabi_dadd>
 801fc3e:	0004      	movs	r4, r0
 801fc40:	0038      	movs	r0, r7
 801fc42:	000d      	movs	r5, r1
 801fc44:	f7e3 fbbc 	bl	80033c0 <__aeabi_i2d>
 801fc48:	4a96      	ldr	r2, [pc, #600]	@ (801fea4 <_dtoa_r+0x380>)
 801fc4a:	4b97      	ldr	r3, [pc, #604]	@ (801fea8 <_dtoa_r+0x384>)
 801fc4c:	f7e2 fcf6 	bl	800263c <__aeabi_dmul>
 801fc50:	0002      	movs	r2, r0
 801fc52:	000b      	movs	r3, r1
 801fc54:	0020      	movs	r0, r4
 801fc56:	0029      	movs	r1, r5
 801fc58:	f7e1 fd48 	bl	80016ec <__aeabi_dadd>
 801fc5c:	0004      	movs	r4, r0
 801fc5e:	000d      	movs	r5, r1
 801fc60:	f7e3 fb72 	bl	8003348 <__aeabi_d2iz>
 801fc64:	2200      	movs	r2, #0
 801fc66:	9004      	str	r0, [sp, #16]
 801fc68:	2300      	movs	r3, #0
 801fc6a:	0020      	movs	r0, r4
 801fc6c:	0029      	movs	r1, r5
 801fc6e:	f7e0 fc25 	bl	80004bc <__aeabi_dcmplt>
 801fc72:	2800      	cmp	r0, #0
 801fc74:	d00b      	beq.n	801fc8e <_dtoa_r+0x16a>
 801fc76:	9804      	ldr	r0, [sp, #16]
 801fc78:	f7e3 fba2 	bl	80033c0 <__aeabi_i2d>
 801fc7c:	002b      	movs	r3, r5
 801fc7e:	0022      	movs	r2, r4
 801fc80:	f7e0 fc16 	bl	80004b0 <__aeabi_dcmpeq>
 801fc84:	4243      	negs	r3, r0
 801fc86:	4158      	adcs	r0, r3
 801fc88:	9b04      	ldr	r3, [sp, #16]
 801fc8a:	1a1b      	subs	r3, r3, r0
 801fc8c:	9304      	str	r3, [sp, #16]
 801fc8e:	2301      	movs	r3, #1
 801fc90:	9315      	str	r3, [sp, #84]	@ 0x54
 801fc92:	9b04      	ldr	r3, [sp, #16]
 801fc94:	2b16      	cmp	r3, #22
 801fc96:	d810      	bhi.n	801fcba <_dtoa_r+0x196>
 801fc98:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fc9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fc9c:	9a04      	ldr	r2, [sp, #16]
 801fc9e:	4b83      	ldr	r3, [pc, #524]	@ (801feac <_dtoa_r+0x388>)
 801fca0:	00d2      	lsls	r2, r2, #3
 801fca2:	189b      	adds	r3, r3, r2
 801fca4:	681a      	ldr	r2, [r3, #0]
 801fca6:	685b      	ldr	r3, [r3, #4]
 801fca8:	f7e0 fc08 	bl	80004bc <__aeabi_dcmplt>
 801fcac:	2800      	cmp	r0, #0
 801fcae:	d047      	beq.n	801fd40 <_dtoa_r+0x21c>
 801fcb0:	9b04      	ldr	r3, [sp, #16]
 801fcb2:	3b01      	subs	r3, #1
 801fcb4:	9304      	str	r3, [sp, #16]
 801fcb6:	2300      	movs	r3, #0
 801fcb8:	9315      	str	r3, [sp, #84]	@ 0x54
 801fcba:	2200      	movs	r2, #0
 801fcbc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fcbe:	9206      	str	r2, [sp, #24]
 801fcc0:	1bdb      	subs	r3, r3, r7
 801fcc2:	1e5a      	subs	r2, r3, #1
 801fcc4:	d53e      	bpl.n	801fd44 <_dtoa_r+0x220>
 801fcc6:	2201      	movs	r2, #1
 801fcc8:	1ad3      	subs	r3, r2, r3
 801fcca:	9306      	str	r3, [sp, #24]
 801fccc:	2300      	movs	r3, #0
 801fcce:	930d      	str	r3, [sp, #52]	@ 0x34
 801fcd0:	9b04      	ldr	r3, [sp, #16]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	db38      	blt.n	801fd48 <_dtoa_r+0x224>
 801fcd6:	9a04      	ldr	r2, [sp, #16]
 801fcd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fcda:	4694      	mov	ip, r2
 801fcdc:	4463      	add	r3, ip
 801fcde:	930d      	str	r3, [sp, #52]	@ 0x34
 801fce0:	2300      	movs	r3, #0
 801fce2:	9214      	str	r2, [sp, #80]	@ 0x50
 801fce4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fce6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fce8:	2401      	movs	r4, #1
 801fcea:	2b09      	cmp	r3, #9
 801fcec:	d867      	bhi.n	801fdbe <_dtoa_r+0x29a>
 801fcee:	2b05      	cmp	r3, #5
 801fcf0:	dd02      	ble.n	801fcf8 <_dtoa_r+0x1d4>
 801fcf2:	2400      	movs	r4, #0
 801fcf4:	3b04      	subs	r3, #4
 801fcf6:	9322      	str	r3, [sp, #136]	@ 0x88
 801fcf8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fcfa:	1e98      	subs	r0, r3, #2
 801fcfc:	2803      	cmp	r0, #3
 801fcfe:	d867      	bhi.n	801fdd0 <_dtoa_r+0x2ac>
 801fd00:	f7e0 fa3c 	bl	800017c <__gnu_thumb1_case_uqi>
 801fd04:	5b383a2b 	.word	0x5b383a2b
 801fd08:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fd0a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801fd0c:	18f6      	adds	r6, r6, r3
 801fd0e:	4b68      	ldr	r3, [pc, #416]	@ (801feb0 <_dtoa_r+0x38c>)
 801fd10:	18f2      	adds	r2, r6, r3
 801fd12:	2a20      	cmp	r2, #32
 801fd14:	dd0f      	ble.n	801fd36 <_dtoa_r+0x212>
 801fd16:	2340      	movs	r3, #64	@ 0x40
 801fd18:	1a9b      	subs	r3, r3, r2
 801fd1a:	409f      	lsls	r7, r3
 801fd1c:	4b65      	ldr	r3, [pc, #404]	@ (801feb4 <_dtoa_r+0x390>)
 801fd1e:	0038      	movs	r0, r7
 801fd20:	18f3      	adds	r3, r6, r3
 801fd22:	40dc      	lsrs	r4, r3
 801fd24:	4320      	orrs	r0, r4
 801fd26:	f7e3 fb79 	bl	800341c <__aeabi_ui2d>
 801fd2a:	2201      	movs	r2, #1
 801fd2c:	4b62      	ldr	r3, [pc, #392]	@ (801feb8 <_dtoa_r+0x394>)
 801fd2e:	1e77      	subs	r7, r6, #1
 801fd30:	18cb      	adds	r3, r1, r3
 801fd32:	9218      	str	r2, [sp, #96]	@ 0x60
 801fd34:	e776      	b.n	801fc24 <_dtoa_r+0x100>
 801fd36:	2320      	movs	r3, #32
 801fd38:	0020      	movs	r0, r4
 801fd3a:	1a9b      	subs	r3, r3, r2
 801fd3c:	4098      	lsls	r0, r3
 801fd3e:	e7f2      	b.n	801fd26 <_dtoa_r+0x202>
 801fd40:	9015      	str	r0, [sp, #84]	@ 0x54
 801fd42:	e7ba      	b.n	801fcba <_dtoa_r+0x196>
 801fd44:	920d      	str	r2, [sp, #52]	@ 0x34
 801fd46:	e7c3      	b.n	801fcd0 <_dtoa_r+0x1ac>
 801fd48:	9b06      	ldr	r3, [sp, #24]
 801fd4a:	9a04      	ldr	r2, [sp, #16]
 801fd4c:	1a9b      	subs	r3, r3, r2
 801fd4e:	9306      	str	r3, [sp, #24]
 801fd50:	4253      	negs	r3, r2
 801fd52:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fd54:	2300      	movs	r3, #0
 801fd56:	9314      	str	r3, [sp, #80]	@ 0x50
 801fd58:	e7c5      	b.n	801fce6 <_dtoa_r+0x1c2>
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	9310      	str	r3, [sp, #64]	@ 0x40
 801fd5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fd60:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd62:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	dc13      	bgt.n	801fd90 <_dtoa_r+0x26c>
 801fd68:	2301      	movs	r3, #1
 801fd6a:	001a      	movs	r2, r3
 801fd6c:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd6e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd70:	9223      	str	r2, [sp, #140]	@ 0x8c
 801fd72:	e00d      	b.n	801fd90 <_dtoa_r+0x26c>
 801fd74:	2301      	movs	r3, #1
 801fd76:	e7f1      	b.n	801fd5c <_dtoa_r+0x238>
 801fd78:	2300      	movs	r3, #0
 801fd7a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fd7c:	9310      	str	r3, [sp, #64]	@ 0x40
 801fd7e:	4694      	mov	ip, r2
 801fd80:	9b04      	ldr	r3, [sp, #16]
 801fd82:	4463      	add	r3, ip
 801fd84:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd86:	3301      	adds	r3, #1
 801fd88:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	dc00      	bgt.n	801fd90 <_dtoa_r+0x26c>
 801fd8e:	2301      	movs	r3, #1
 801fd90:	9a03      	ldr	r2, [sp, #12]
 801fd92:	2100      	movs	r1, #0
 801fd94:	69d0      	ldr	r0, [r2, #28]
 801fd96:	2204      	movs	r2, #4
 801fd98:	0015      	movs	r5, r2
 801fd9a:	3514      	adds	r5, #20
 801fd9c:	429d      	cmp	r5, r3
 801fd9e:	d91b      	bls.n	801fdd8 <_dtoa_r+0x2b4>
 801fda0:	6041      	str	r1, [r0, #4]
 801fda2:	9803      	ldr	r0, [sp, #12]
 801fda4:	f001 f924 	bl	8020ff0 <_Balloc>
 801fda8:	9008      	str	r0, [sp, #32]
 801fdaa:	2800      	cmp	r0, #0
 801fdac:	d117      	bne.n	801fdde <_dtoa_r+0x2ba>
 801fdae:	21b0      	movs	r1, #176	@ 0xb0
 801fdb0:	4b42      	ldr	r3, [pc, #264]	@ (801febc <_dtoa_r+0x398>)
 801fdb2:	482e      	ldr	r0, [pc, #184]	@ (801fe6c <_dtoa_r+0x348>)
 801fdb4:	9a08      	ldr	r2, [sp, #32]
 801fdb6:	31ff      	adds	r1, #255	@ 0xff
 801fdb8:	e6c9      	b.n	801fb4e <_dtoa_r+0x2a>
 801fdba:	2301      	movs	r3, #1
 801fdbc:	e7dd      	b.n	801fd7a <_dtoa_r+0x256>
 801fdbe:	2300      	movs	r3, #0
 801fdc0:	9410      	str	r4, [sp, #64]	@ 0x40
 801fdc2:	9322      	str	r3, [sp, #136]	@ 0x88
 801fdc4:	3b01      	subs	r3, #1
 801fdc6:	930e      	str	r3, [sp, #56]	@ 0x38
 801fdc8:	9309      	str	r3, [sp, #36]	@ 0x24
 801fdca:	2200      	movs	r2, #0
 801fdcc:	3313      	adds	r3, #19
 801fdce:	e7cf      	b.n	801fd70 <_dtoa_r+0x24c>
 801fdd0:	2301      	movs	r3, #1
 801fdd2:	9310      	str	r3, [sp, #64]	@ 0x40
 801fdd4:	3b02      	subs	r3, #2
 801fdd6:	e7f6      	b.n	801fdc6 <_dtoa_r+0x2a2>
 801fdd8:	3101      	adds	r1, #1
 801fdda:	0052      	lsls	r2, r2, #1
 801fddc:	e7dc      	b.n	801fd98 <_dtoa_r+0x274>
 801fdde:	9b03      	ldr	r3, [sp, #12]
 801fde0:	9a08      	ldr	r2, [sp, #32]
 801fde2:	69db      	ldr	r3, [r3, #28]
 801fde4:	601a      	str	r2, [r3, #0]
 801fde6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fde8:	2b0e      	cmp	r3, #14
 801fdea:	d900      	bls.n	801fdee <_dtoa_r+0x2ca>
 801fdec:	e0d9      	b.n	801ffa2 <_dtoa_r+0x47e>
 801fdee:	2c00      	cmp	r4, #0
 801fdf0:	d100      	bne.n	801fdf4 <_dtoa_r+0x2d0>
 801fdf2:	e0d6      	b.n	801ffa2 <_dtoa_r+0x47e>
 801fdf4:	9b04      	ldr	r3, [sp, #16]
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	dd64      	ble.n	801fec4 <_dtoa_r+0x3a0>
 801fdfa:	210f      	movs	r1, #15
 801fdfc:	9a04      	ldr	r2, [sp, #16]
 801fdfe:	4b2b      	ldr	r3, [pc, #172]	@ (801feac <_dtoa_r+0x388>)
 801fe00:	400a      	ands	r2, r1
 801fe02:	00d2      	lsls	r2, r2, #3
 801fe04:	189b      	adds	r3, r3, r2
 801fe06:	681e      	ldr	r6, [r3, #0]
 801fe08:	685f      	ldr	r7, [r3, #4]
 801fe0a:	9b04      	ldr	r3, [sp, #16]
 801fe0c:	2402      	movs	r4, #2
 801fe0e:	111d      	asrs	r5, r3, #4
 801fe10:	05db      	lsls	r3, r3, #23
 801fe12:	d50a      	bpl.n	801fe2a <_dtoa_r+0x306>
 801fe14:	4b2a      	ldr	r3, [pc, #168]	@ (801fec0 <_dtoa_r+0x39c>)
 801fe16:	400d      	ands	r5, r1
 801fe18:	6a1a      	ldr	r2, [r3, #32]
 801fe1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fe1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fe1e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fe20:	f7e1 ffc8 	bl	8001db4 <__aeabi_ddiv>
 801fe24:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe26:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe28:	3401      	adds	r4, #1
 801fe2a:	4b25      	ldr	r3, [pc, #148]	@ (801fec0 <_dtoa_r+0x39c>)
 801fe2c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe2e:	2d00      	cmp	r5, #0
 801fe30:	d108      	bne.n	801fe44 <_dtoa_r+0x320>
 801fe32:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fe34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fe36:	0032      	movs	r2, r6
 801fe38:	003b      	movs	r3, r7
 801fe3a:	f7e1 ffbb 	bl	8001db4 <__aeabi_ddiv>
 801fe3e:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe40:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe42:	e05a      	b.n	801fefa <_dtoa_r+0x3d6>
 801fe44:	2301      	movs	r3, #1
 801fe46:	421d      	tst	r5, r3
 801fe48:	d009      	beq.n	801fe5e <_dtoa_r+0x33a>
 801fe4a:	18e4      	adds	r4, r4, r3
 801fe4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fe4e:	0030      	movs	r0, r6
 801fe50:	681a      	ldr	r2, [r3, #0]
 801fe52:	685b      	ldr	r3, [r3, #4]
 801fe54:	0039      	movs	r1, r7
 801fe56:	f7e2 fbf1 	bl	800263c <__aeabi_dmul>
 801fe5a:	0006      	movs	r6, r0
 801fe5c:	000f      	movs	r7, r1
 801fe5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fe60:	106d      	asrs	r5, r5, #1
 801fe62:	3308      	adds	r3, #8
 801fe64:	e7e2      	b.n	801fe2c <_dtoa_r+0x308>
 801fe66:	46c0      	nop			@ (mov r8, r8)
 801fe68:	08025042 	.word	0x08025042
 801fe6c:	08025059 	.word	0x08025059
 801fe70:	7ff00000 	.word	0x7ff00000
 801fe74:	0000270f 	.word	0x0000270f
 801fe78:	0802503e 	.word	0x0802503e
 801fe7c:	08025041 	.word	0x08025041
 801fe80:	0802500a 	.word	0x0802500a
 801fe84:	08025009 	.word	0x08025009
 801fe88:	3ff00000 	.word	0x3ff00000
 801fe8c:	fffffc01 	.word	0xfffffc01
 801fe90:	3ff80000 	.word	0x3ff80000
 801fe94:	636f4361 	.word	0x636f4361
 801fe98:	3fd287a7 	.word	0x3fd287a7
 801fe9c:	8b60c8b3 	.word	0x8b60c8b3
 801fea0:	3fc68a28 	.word	0x3fc68a28
 801fea4:	509f79fb 	.word	0x509f79fb
 801fea8:	3fd34413 	.word	0x3fd34413
 801feac:	080251b0 	.word	0x080251b0
 801feb0:	00000432 	.word	0x00000432
 801feb4:	00000412 	.word	0x00000412
 801feb8:	fe100000 	.word	0xfe100000
 801febc:	080250b1 	.word	0x080250b1
 801fec0:	08025188 	.word	0x08025188
 801fec4:	9b04      	ldr	r3, [sp, #16]
 801fec6:	2402      	movs	r4, #2
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d016      	beq.n	801fefa <_dtoa_r+0x3d6>
 801fecc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fece:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fed0:	220f      	movs	r2, #15
 801fed2:	425d      	negs	r5, r3
 801fed4:	402a      	ands	r2, r5
 801fed6:	4bd7      	ldr	r3, [pc, #860]	@ (8020234 <_dtoa_r+0x710>)
 801fed8:	00d2      	lsls	r2, r2, #3
 801feda:	189b      	adds	r3, r3, r2
 801fedc:	681a      	ldr	r2, [r3, #0]
 801fede:	685b      	ldr	r3, [r3, #4]
 801fee0:	f7e2 fbac 	bl	800263c <__aeabi_dmul>
 801fee4:	2701      	movs	r7, #1
 801fee6:	2300      	movs	r3, #0
 801fee8:	900a      	str	r0, [sp, #40]	@ 0x28
 801feea:	910b      	str	r1, [sp, #44]	@ 0x2c
 801feec:	4ed2      	ldr	r6, [pc, #840]	@ (8020238 <_dtoa_r+0x714>)
 801feee:	112d      	asrs	r5, r5, #4
 801fef0:	2d00      	cmp	r5, #0
 801fef2:	d000      	beq.n	801fef6 <_dtoa_r+0x3d2>
 801fef4:	e0ba      	b.n	802006c <_dtoa_r+0x548>
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d1a1      	bne.n	801fe3e <_dtoa_r+0x31a>
 801fefa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fefc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fefe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	d100      	bne.n	801ff06 <_dtoa_r+0x3e2>
 801ff04:	e0bd      	b.n	8020082 <_dtoa_r+0x55e>
 801ff06:	2200      	movs	r2, #0
 801ff08:	0030      	movs	r0, r6
 801ff0a:	0039      	movs	r1, r7
 801ff0c:	4bcb      	ldr	r3, [pc, #812]	@ (802023c <_dtoa_r+0x718>)
 801ff0e:	f7e0 fad5 	bl	80004bc <__aeabi_dcmplt>
 801ff12:	2800      	cmp	r0, #0
 801ff14:	d100      	bne.n	801ff18 <_dtoa_r+0x3f4>
 801ff16:	e0b4      	b.n	8020082 <_dtoa_r+0x55e>
 801ff18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d100      	bne.n	801ff20 <_dtoa_r+0x3fc>
 801ff1e:	e0b0      	b.n	8020082 <_dtoa_r+0x55e>
 801ff20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff22:	2b00      	cmp	r3, #0
 801ff24:	dd39      	ble.n	801ff9a <_dtoa_r+0x476>
 801ff26:	9b04      	ldr	r3, [sp, #16]
 801ff28:	2200      	movs	r2, #0
 801ff2a:	3b01      	subs	r3, #1
 801ff2c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ff2e:	0030      	movs	r0, r6
 801ff30:	4bc3      	ldr	r3, [pc, #780]	@ (8020240 <_dtoa_r+0x71c>)
 801ff32:	0039      	movs	r1, r7
 801ff34:	f7e2 fb82 	bl	800263c <__aeabi_dmul>
 801ff38:	900a      	str	r0, [sp, #40]	@ 0x28
 801ff3a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ff3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff3e:	3401      	adds	r4, #1
 801ff40:	0020      	movs	r0, r4
 801ff42:	9311      	str	r3, [sp, #68]	@ 0x44
 801ff44:	f7e3 fa3c 	bl	80033c0 <__aeabi_i2d>
 801ff48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ff4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ff4c:	f7e2 fb76 	bl	800263c <__aeabi_dmul>
 801ff50:	4bbc      	ldr	r3, [pc, #752]	@ (8020244 <_dtoa_r+0x720>)
 801ff52:	2200      	movs	r2, #0
 801ff54:	f7e1 fbca 	bl	80016ec <__aeabi_dadd>
 801ff58:	4bbb      	ldr	r3, [pc, #748]	@ (8020248 <_dtoa_r+0x724>)
 801ff5a:	0006      	movs	r6, r0
 801ff5c:	18cf      	adds	r7, r1, r3
 801ff5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d000      	beq.n	801ff66 <_dtoa_r+0x442>
 801ff64:	e091      	b.n	802008a <_dtoa_r+0x566>
 801ff66:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ff68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ff6a:	2200      	movs	r2, #0
 801ff6c:	4bb7      	ldr	r3, [pc, #732]	@ (802024c <_dtoa_r+0x728>)
 801ff6e:	f7e2 fe2d 	bl	8002bcc <__aeabi_dsub>
 801ff72:	0032      	movs	r2, r6
 801ff74:	003b      	movs	r3, r7
 801ff76:	0004      	movs	r4, r0
 801ff78:	000d      	movs	r5, r1
 801ff7a:	f7e0 fab3 	bl	80004e4 <__aeabi_dcmpgt>
 801ff7e:	2800      	cmp	r0, #0
 801ff80:	d000      	beq.n	801ff84 <_dtoa_r+0x460>
 801ff82:	e29d      	b.n	80204c0 <_dtoa_r+0x99c>
 801ff84:	2180      	movs	r1, #128	@ 0x80
 801ff86:	0609      	lsls	r1, r1, #24
 801ff88:	187b      	adds	r3, r7, r1
 801ff8a:	0032      	movs	r2, r6
 801ff8c:	0020      	movs	r0, r4
 801ff8e:	0029      	movs	r1, r5
 801ff90:	f7e0 fa94 	bl	80004bc <__aeabi_dcmplt>
 801ff94:	2800      	cmp	r0, #0
 801ff96:	d000      	beq.n	801ff9a <_dtoa_r+0x476>
 801ff98:	e130      	b.n	80201fc <_dtoa_r+0x6d8>
 801ff9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ff9c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ff9e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ffa0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ffa2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	da00      	bge.n	801ffaa <_dtoa_r+0x486>
 801ffa8:	e177      	b.n	802029a <_dtoa_r+0x776>
 801ffaa:	9a04      	ldr	r2, [sp, #16]
 801ffac:	2a0e      	cmp	r2, #14
 801ffae:	dd00      	ble.n	801ffb2 <_dtoa_r+0x48e>
 801ffb0:	e173      	b.n	802029a <_dtoa_r+0x776>
 801ffb2:	4ba0      	ldr	r3, [pc, #640]	@ (8020234 <_dtoa_r+0x710>)
 801ffb4:	00d2      	lsls	r2, r2, #3
 801ffb6:	189b      	adds	r3, r3, r2
 801ffb8:	685c      	ldr	r4, [r3, #4]
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	9306      	str	r3, [sp, #24]
 801ffbe:	9407      	str	r4, [sp, #28]
 801ffc0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	da03      	bge.n	801ffce <_dtoa_r+0x4aa>
 801ffc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	dc00      	bgt.n	801ffce <_dtoa_r+0x4aa>
 801ffcc:	e106      	b.n	80201dc <_dtoa_r+0x6b8>
 801ffce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ffd0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ffd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffd4:	9d08      	ldr	r5, [sp, #32]
 801ffd6:	3b01      	subs	r3, #1
 801ffd8:	195b      	adds	r3, r3, r5
 801ffda:	930a      	str	r3, [sp, #40]	@ 0x28
 801ffdc:	9a06      	ldr	r2, [sp, #24]
 801ffde:	9b07      	ldr	r3, [sp, #28]
 801ffe0:	0030      	movs	r0, r6
 801ffe2:	0039      	movs	r1, r7
 801ffe4:	f7e1 fee6 	bl	8001db4 <__aeabi_ddiv>
 801ffe8:	f7e3 f9ae 	bl	8003348 <__aeabi_d2iz>
 801ffec:	9009      	str	r0, [sp, #36]	@ 0x24
 801ffee:	f7e3 f9e7 	bl	80033c0 <__aeabi_i2d>
 801fff2:	9a06      	ldr	r2, [sp, #24]
 801fff4:	9b07      	ldr	r3, [sp, #28]
 801fff6:	f7e2 fb21 	bl	800263c <__aeabi_dmul>
 801fffa:	0002      	movs	r2, r0
 801fffc:	000b      	movs	r3, r1
 801fffe:	0030      	movs	r0, r6
 8020000:	0039      	movs	r1, r7
 8020002:	f7e2 fde3 	bl	8002bcc <__aeabi_dsub>
 8020006:	002b      	movs	r3, r5
 8020008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802000a:	3501      	adds	r5, #1
 802000c:	3230      	adds	r2, #48	@ 0x30
 802000e:	701a      	strb	r2, [r3, #0]
 8020010:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020012:	002c      	movs	r4, r5
 8020014:	429a      	cmp	r2, r3
 8020016:	d000      	beq.n	802001a <_dtoa_r+0x4f6>
 8020018:	e131      	b.n	802027e <_dtoa_r+0x75a>
 802001a:	0002      	movs	r2, r0
 802001c:	000b      	movs	r3, r1
 802001e:	f7e1 fb65 	bl	80016ec <__aeabi_dadd>
 8020022:	9a06      	ldr	r2, [sp, #24]
 8020024:	9b07      	ldr	r3, [sp, #28]
 8020026:	0006      	movs	r6, r0
 8020028:	000f      	movs	r7, r1
 802002a:	f7e0 fa5b 	bl	80004e4 <__aeabi_dcmpgt>
 802002e:	2800      	cmp	r0, #0
 8020030:	d000      	beq.n	8020034 <_dtoa_r+0x510>
 8020032:	e10f      	b.n	8020254 <_dtoa_r+0x730>
 8020034:	9a06      	ldr	r2, [sp, #24]
 8020036:	9b07      	ldr	r3, [sp, #28]
 8020038:	0030      	movs	r0, r6
 802003a:	0039      	movs	r1, r7
 802003c:	f7e0 fa38 	bl	80004b0 <__aeabi_dcmpeq>
 8020040:	2800      	cmp	r0, #0
 8020042:	d003      	beq.n	802004c <_dtoa_r+0x528>
 8020044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020046:	07dd      	lsls	r5, r3, #31
 8020048:	d500      	bpl.n	802004c <_dtoa_r+0x528>
 802004a:	e103      	b.n	8020254 <_dtoa_r+0x730>
 802004c:	9905      	ldr	r1, [sp, #20]
 802004e:	9803      	ldr	r0, [sp, #12]
 8020050:	f001 f812 	bl	8021078 <_Bfree>
 8020054:	2300      	movs	r3, #0
 8020056:	7023      	strb	r3, [r4, #0]
 8020058:	9b04      	ldr	r3, [sp, #16]
 802005a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802005c:	3301      	adds	r3, #1
 802005e:	6013      	str	r3, [r2, #0]
 8020060:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020062:	2b00      	cmp	r3, #0
 8020064:	d100      	bne.n	8020068 <_dtoa_r+0x544>
 8020066:	e5a7      	b.n	801fbb8 <_dtoa_r+0x94>
 8020068:	601c      	str	r4, [r3, #0]
 802006a:	e5a5      	b.n	801fbb8 <_dtoa_r+0x94>
 802006c:	423d      	tst	r5, r7
 802006e:	d005      	beq.n	802007c <_dtoa_r+0x558>
 8020070:	6832      	ldr	r2, [r6, #0]
 8020072:	6873      	ldr	r3, [r6, #4]
 8020074:	f7e2 fae2 	bl	800263c <__aeabi_dmul>
 8020078:	003b      	movs	r3, r7
 802007a:	3401      	adds	r4, #1
 802007c:	106d      	asrs	r5, r5, #1
 802007e:	3608      	adds	r6, #8
 8020080:	e736      	b.n	801fef0 <_dtoa_r+0x3cc>
 8020082:	9b04      	ldr	r3, [sp, #16]
 8020084:	930c      	str	r3, [sp, #48]	@ 0x30
 8020086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020088:	e75a      	b.n	801ff40 <_dtoa_r+0x41c>
 802008a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802008c:	4b69      	ldr	r3, [pc, #420]	@ (8020234 <_dtoa_r+0x710>)
 802008e:	3a01      	subs	r2, #1
 8020090:	00d2      	lsls	r2, r2, #3
 8020092:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020094:	189b      	adds	r3, r3, r2
 8020096:	681a      	ldr	r2, [r3, #0]
 8020098:	685b      	ldr	r3, [r3, #4]
 802009a:	2900      	cmp	r1, #0
 802009c:	d04c      	beq.n	8020138 <_dtoa_r+0x614>
 802009e:	2000      	movs	r0, #0
 80200a0:	496b      	ldr	r1, [pc, #428]	@ (8020250 <_dtoa_r+0x72c>)
 80200a2:	f7e1 fe87 	bl	8001db4 <__aeabi_ddiv>
 80200a6:	0032      	movs	r2, r6
 80200a8:	003b      	movs	r3, r7
 80200aa:	f7e2 fd8f 	bl	8002bcc <__aeabi_dsub>
 80200ae:	9a08      	ldr	r2, [sp, #32]
 80200b0:	0006      	movs	r6, r0
 80200b2:	4694      	mov	ip, r2
 80200b4:	000f      	movs	r7, r1
 80200b6:	9b08      	ldr	r3, [sp, #32]
 80200b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80200ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80200bc:	4463      	add	r3, ip
 80200be:	9311      	str	r3, [sp, #68]	@ 0x44
 80200c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80200c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80200c4:	f7e3 f940 	bl	8003348 <__aeabi_d2iz>
 80200c8:	0005      	movs	r5, r0
 80200ca:	f7e3 f979 	bl	80033c0 <__aeabi_i2d>
 80200ce:	0002      	movs	r2, r0
 80200d0:	000b      	movs	r3, r1
 80200d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80200d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80200d6:	f7e2 fd79 	bl	8002bcc <__aeabi_dsub>
 80200da:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80200dc:	3530      	adds	r5, #48	@ 0x30
 80200de:	1c5c      	adds	r4, r3, #1
 80200e0:	701d      	strb	r5, [r3, #0]
 80200e2:	0032      	movs	r2, r6
 80200e4:	003b      	movs	r3, r7
 80200e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80200e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80200ea:	f7e0 f9e7 	bl	80004bc <__aeabi_dcmplt>
 80200ee:	2800      	cmp	r0, #0
 80200f0:	d16a      	bne.n	80201c8 <_dtoa_r+0x6a4>
 80200f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80200f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80200f6:	2000      	movs	r0, #0
 80200f8:	4950      	ldr	r1, [pc, #320]	@ (802023c <_dtoa_r+0x718>)
 80200fa:	f7e2 fd67 	bl	8002bcc <__aeabi_dsub>
 80200fe:	0032      	movs	r2, r6
 8020100:	003b      	movs	r3, r7
 8020102:	f7e0 f9db 	bl	80004bc <__aeabi_dcmplt>
 8020106:	2800      	cmp	r0, #0
 8020108:	d000      	beq.n	802010c <_dtoa_r+0x5e8>
 802010a:	e0a5      	b.n	8020258 <_dtoa_r+0x734>
 802010c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802010e:	42a3      	cmp	r3, r4
 8020110:	d100      	bne.n	8020114 <_dtoa_r+0x5f0>
 8020112:	e742      	b.n	801ff9a <_dtoa_r+0x476>
 8020114:	2200      	movs	r2, #0
 8020116:	0030      	movs	r0, r6
 8020118:	0039      	movs	r1, r7
 802011a:	4b49      	ldr	r3, [pc, #292]	@ (8020240 <_dtoa_r+0x71c>)
 802011c:	f7e2 fa8e 	bl	800263c <__aeabi_dmul>
 8020120:	2200      	movs	r2, #0
 8020122:	0006      	movs	r6, r0
 8020124:	000f      	movs	r7, r1
 8020126:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802012a:	4b45      	ldr	r3, [pc, #276]	@ (8020240 <_dtoa_r+0x71c>)
 802012c:	f7e2 fa86 	bl	800263c <__aeabi_dmul>
 8020130:	9416      	str	r4, [sp, #88]	@ 0x58
 8020132:	900a      	str	r0, [sp, #40]	@ 0x28
 8020134:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020136:	e7c3      	b.n	80200c0 <_dtoa_r+0x59c>
 8020138:	0030      	movs	r0, r6
 802013a:	0039      	movs	r1, r7
 802013c:	f7e2 fa7e 	bl	800263c <__aeabi_dmul>
 8020140:	9d08      	ldr	r5, [sp, #32]
 8020142:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020144:	002b      	movs	r3, r5
 8020146:	4694      	mov	ip, r2
 8020148:	9016      	str	r0, [sp, #88]	@ 0x58
 802014a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802014c:	4463      	add	r3, ip
 802014e:	9319      	str	r3, [sp, #100]	@ 0x64
 8020150:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020152:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020154:	f7e3 f8f8 	bl	8003348 <__aeabi_d2iz>
 8020158:	0004      	movs	r4, r0
 802015a:	f7e3 f931 	bl	80033c0 <__aeabi_i2d>
 802015e:	000b      	movs	r3, r1
 8020160:	0002      	movs	r2, r0
 8020162:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020166:	f7e2 fd31 	bl	8002bcc <__aeabi_dsub>
 802016a:	3430      	adds	r4, #48	@ 0x30
 802016c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802016e:	702c      	strb	r4, [r5, #0]
 8020170:	3501      	adds	r5, #1
 8020172:	0006      	movs	r6, r0
 8020174:	000f      	movs	r7, r1
 8020176:	42ab      	cmp	r3, r5
 8020178:	d129      	bne.n	80201ce <_dtoa_r+0x6aa>
 802017a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802017c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802017e:	9b08      	ldr	r3, [sp, #32]
 8020180:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020182:	469c      	mov	ip, r3
 8020184:	2200      	movs	r2, #0
 8020186:	4b32      	ldr	r3, [pc, #200]	@ (8020250 <_dtoa_r+0x72c>)
 8020188:	4464      	add	r4, ip
 802018a:	f7e1 faaf 	bl	80016ec <__aeabi_dadd>
 802018e:	0002      	movs	r2, r0
 8020190:	000b      	movs	r3, r1
 8020192:	0030      	movs	r0, r6
 8020194:	0039      	movs	r1, r7
 8020196:	f7e0 f9a5 	bl	80004e4 <__aeabi_dcmpgt>
 802019a:	2800      	cmp	r0, #0
 802019c:	d15c      	bne.n	8020258 <_dtoa_r+0x734>
 802019e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80201a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80201a2:	2000      	movs	r0, #0
 80201a4:	492a      	ldr	r1, [pc, #168]	@ (8020250 <_dtoa_r+0x72c>)
 80201a6:	f7e2 fd11 	bl	8002bcc <__aeabi_dsub>
 80201aa:	0002      	movs	r2, r0
 80201ac:	000b      	movs	r3, r1
 80201ae:	0030      	movs	r0, r6
 80201b0:	0039      	movs	r1, r7
 80201b2:	f7e0 f983 	bl	80004bc <__aeabi_dcmplt>
 80201b6:	2800      	cmp	r0, #0
 80201b8:	d100      	bne.n	80201bc <_dtoa_r+0x698>
 80201ba:	e6ee      	b.n	801ff9a <_dtoa_r+0x476>
 80201bc:	0023      	movs	r3, r4
 80201be:	3c01      	subs	r4, #1
 80201c0:	7822      	ldrb	r2, [r4, #0]
 80201c2:	2a30      	cmp	r2, #48	@ 0x30
 80201c4:	d0fa      	beq.n	80201bc <_dtoa_r+0x698>
 80201c6:	001c      	movs	r4, r3
 80201c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201ca:	9304      	str	r3, [sp, #16]
 80201cc:	e73e      	b.n	802004c <_dtoa_r+0x528>
 80201ce:	2200      	movs	r2, #0
 80201d0:	4b1b      	ldr	r3, [pc, #108]	@ (8020240 <_dtoa_r+0x71c>)
 80201d2:	f7e2 fa33 	bl	800263c <__aeabi_dmul>
 80201d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80201d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80201da:	e7b9      	b.n	8020150 <_dtoa_r+0x62c>
 80201dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d10c      	bne.n	80201fc <_dtoa_r+0x6d8>
 80201e2:	9806      	ldr	r0, [sp, #24]
 80201e4:	9907      	ldr	r1, [sp, #28]
 80201e6:	2200      	movs	r2, #0
 80201e8:	4b18      	ldr	r3, [pc, #96]	@ (802024c <_dtoa_r+0x728>)
 80201ea:	f7e2 fa27 	bl	800263c <__aeabi_dmul>
 80201ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80201f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201f2:	f7e0 f981 	bl	80004f8 <__aeabi_dcmpge>
 80201f6:	2800      	cmp	r0, #0
 80201f8:	d100      	bne.n	80201fc <_dtoa_r+0x6d8>
 80201fa:	e164      	b.n	80204c6 <_dtoa_r+0x9a2>
 80201fc:	2600      	movs	r6, #0
 80201fe:	0037      	movs	r7, r6
 8020200:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020202:	9c08      	ldr	r4, [sp, #32]
 8020204:	43db      	mvns	r3, r3
 8020206:	930c      	str	r3, [sp, #48]	@ 0x30
 8020208:	2300      	movs	r3, #0
 802020a:	9304      	str	r3, [sp, #16]
 802020c:	0031      	movs	r1, r6
 802020e:	9803      	ldr	r0, [sp, #12]
 8020210:	f000 ff32 	bl	8021078 <_Bfree>
 8020214:	2f00      	cmp	r7, #0
 8020216:	d0d7      	beq.n	80201c8 <_dtoa_r+0x6a4>
 8020218:	9b04      	ldr	r3, [sp, #16]
 802021a:	2b00      	cmp	r3, #0
 802021c:	d005      	beq.n	802022a <_dtoa_r+0x706>
 802021e:	42bb      	cmp	r3, r7
 8020220:	d003      	beq.n	802022a <_dtoa_r+0x706>
 8020222:	0019      	movs	r1, r3
 8020224:	9803      	ldr	r0, [sp, #12]
 8020226:	f000 ff27 	bl	8021078 <_Bfree>
 802022a:	0039      	movs	r1, r7
 802022c:	9803      	ldr	r0, [sp, #12]
 802022e:	f000 ff23 	bl	8021078 <_Bfree>
 8020232:	e7c9      	b.n	80201c8 <_dtoa_r+0x6a4>
 8020234:	080251b0 	.word	0x080251b0
 8020238:	08025188 	.word	0x08025188
 802023c:	3ff00000 	.word	0x3ff00000
 8020240:	40240000 	.word	0x40240000
 8020244:	401c0000 	.word	0x401c0000
 8020248:	fcc00000 	.word	0xfcc00000
 802024c:	40140000 	.word	0x40140000
 8020250:	3fe00000 	.word	0x3fe00000
 8020254:	9b04      	ldr	r3, [sp, #16]
 8020256:	930c      	str	r3, [sp, #48]	@ 0x30
 8020258:	0023      	movs	r3, r4
 802025a:	001c      	movs	r4, r3
 802025c:	3b01      	subs	r3, #1
 802025e:	781a      	ldrb	r2, [r3, #0]
 8020260:	2a39      	cmp	r2, #57	@ 0x39
 8020262:	d108      	bne.n	8020276 <_dtoa_r+0x752>
 8020264:	9a08      	ldr	r2, [sp, #32]
 8020266:	429a      	cmp	r2, r3
 8020268:	d1f7      	bne.n	802025a <_dtoa_r+0x736>
 802026a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802026c:	9908      	ldr	r1, [sp, #32]
 802026e:	3201      	adds	r2, #1
 8020270:	920c      	str	r2, [sp, #48]	@ 0x30
 8020272:	2230      	movs	r2, #48	@ 0x30
 8020274:	700a      	strb	r2, [r1, #0]
 8020276:	781a      	ldrb	r2, [r3, #0]
 8020278:	3201      	adds	r2, #1
 802027a:	701a      	strb	r2, [r3, #0]
 802027c:	e7a4      	b.n	80201c8 <_dtoa_r+0x6a4>
 802027e:	2200      	movs	r2, #0
 8020280:	4bc6      	ldr	r3, [pc, #792]	@ (802059c <_dtoa_r+0xa78>)
 8020282:	f7e2 f9db 	bl	800263c <__aeabi_dmul>
 8020286:	2200      	movs	r2, #0
 8020288:	2300      	movs	r3, #0
 802028a:	0006      	movs	r6, r0
 802028c:	000f      	movs	r7, r1
 802028e:	f7e0 f90f 	bl	80004b0 <__aeabi_dcmpeq>
 8020292:	2800      	cmp	r0, #0
 8020294:	d100      	bne.n	8020298 <_dtoa_r+0x774>
 8020296:	e6a1      	b.n	801ffdc <_dtoa_r+0x4b8>
 8020298:	e6d8      	b.n	802004c <_dtoa_r+0x528>
 802029a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 802029c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802029e:	9c06      	ldr	r4, [sp, #24]
 80202a0:	2f00      	cmp	r7, #0
 80202a2:	d014      	beq.n	80202ce <_dtoa_r+0x7aa>
 80202a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80202a6:	2a01      	cmp	r2, #1
 80202a8:	dd00      	ble.n	80202ac <_dtoa_r+0x788>
 80202aa:	e0c8      	b.n	802043e <_dtoa_r+0x91a>
 80202ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80202ae:	2a00      	cmp	r2, #0
 80202b0:	d100      	bne.n	80202b4 <_dtoa_r+0x790>
 80202b2:	e0be      	b.n	8020432 <_dtoa_r+0x90e>
 80202b4:	4aba      	ldr	r2, [pc, #744]	@ (80205a0 <_dtoa_r+0xa7c>)
 80202b6:	189b      	adds	r3, r3, r2
 80202b8:	9a06      	ldr	r2, [sp, #24]
 80202ba:	2101      	movs	r1, #1
 80202bc:	18d2      	adds	r2, r2, r3
 80202be:	9206      	str	r2, [sp, #24]
 80202c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80202c2:	9803      	ldr	r0, [sp, #12]
 80202c4:	18d3      	adds	r3, r2, r3
 80202c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80202c8:	f000 ffda 	bl	8021280 <__i2b>
 80202cc:	0007      	movs	r7, r0
 80202ce:	2c00      	cmp	r4, #0
 80202d0:	d00e      	beq.n	80202f0 <_dtoa_r+0x7cc>
 80202d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	dd0b      	ble.n	80202f0 <_dtoa_r+0x7cc>
 80202d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80202da:	0023      	movs	r3, r4
 80202dc:	4294      	cmp	r4, r2
 80202de:	dd00      	ble.n	80202e2 <_dtoa_r+0x7be>
 80202e0:	0013      	movs	r3, r2
 80202e2:	9a06      	ldr	r2, [sp, #24]
 80202e4:	1ae4      	subs	r4, r4, r3
 80202e6:	1ad2      	subs	r2, r2, r3
 80202e8:	9206      	str	r2, [sp, #24]
 80202ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80202ec:	1ad3      	subs	r3, r2, r3
 80202ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80202f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d01f      	beq.n	8020336 <_dtoa_r+0x812>
 80202f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d100      	bne.n	80202fe <_dtoa_r+0x7da>
 80202fc:	e0b5      	b.n	802046a <_dtoa_r+0x946>
 80202fe:	2d00      	cmp	r5, #0
 8020300:	d010      	beq.n	8020324 <_dtoa_r+0x800>
 8020302:	0039      	movs	r1, r7
 8020304:	002a      	movs	r2, r5
 8020306:	9803      	ldr	r0, [sp, #12]
 8020308:	f001 f884 	bl	8021414 <__pow5mult>
 802030c:	9a05      	ldr	r2, [sp, #20]
 802030e:	0001      	movs	r1, r0
 8020310:	0007      	movs	r7, r0
 8020312:	9803      	ldr	r0, [sp, #12]
 8020314:	f000 ffcc 	bl	80212b0 <__multiply>
 8020318:	0006      	movs	r6, r0
 802031a:	9905      	ldr	r1, [sp, #20]
 802031c:	9803      	ldr	r0, [sp, #12]
 802031e:	f000 feab 	bl	8021078 <_Bfree>
 8020322:	9605      	str	r6, [sp, #20]
 8020324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020326:	1b5a      	subs	r2, r3, r5
 8020328:	42ab      	cmp	r3, r5
 802032a:	d004      	beq.n	8020336 <_dtoa_r+0x812>
 802032c:	9905      	ldr	r1, [sp, #20]
 802032e:	9803      	ldr	r0, [sp, #12]
 8020330:	f001 f870 	bl	8021414 <__pow5mult>
 8020334:	9005      	str	r0, [sp, #20]
 8020336:	2101      	movs	r1, #1
 8020338:	9803      	ldr	r0, [sp, #12]
 802033a:	f000 ffa1 	bl	8021280 <__i2b>
 802033e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020340:	0006      	movs	r6, r0
 8020342:	2b00      	cmp	r3, #0
 8020344:	d100      	bne.n	8020348 <_dtoa_r+0x824>
 8020346:	e1bc      	b.n	80206c2 <_dtoa_r+0xb9e>
 8020348:	001a      	movs	r2, r3
 802034a:	0001      	movs	r1, r0
 802034c:	9803      	ldr	r0, [sp, #12]
 802034e:	f001 f861 	bl	8021414 <__pow5mult>
 8020352:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020354:	0006      	movs	r6, r0
 8020356:	2500      	movs	r5, #0
 8020358:	2b01      	cmp	r3, #1
 802035a:	dc16      	bgt.n	802038a <_dtoa_r+0x866>
 802035c:	2500      	movs	r5, #0
 802035e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020360:	42ab      	cmp	r3, r5
 8020362:	d10e      	bne.n	8020382 <_dtoa_r+0x85e>
 8020364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020366:	031b      	lsls	r3, r3, #12
 8020368:	42ab      	cmp	r3, r5
 802036a:	d10a      	bne.n	8020382 <_dtoa_r+0x85e>
 802036c:	4b8d      	ldr	r3, [pc, #564]	@ (80205a4 <_dtoa_r+0xa80>)
 802036e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020370:	4213      	tst	r3, r2
 8020372:	d006      	beq.n	8020382 <_dtoa_r+0x85e>
 8020374:	9b06      	ldr	r3, [sp, #24]
 8020376:	3501      	adds	r5, #1
 8020378:	3301      	adds	r3, #1
 802037a:	9306      	str	r3, [sp, #24]
 802037c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802037e:	3301      	adds	r3, #1
 8020380:	930d      	str	r3, [sp, #52]	@ 0x34
 8020382:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020384:	2001      	movs	r0, #1
 8020386:	2b00      	cmp	r3, #0
 8020388:	d008      	beq.n	802039c <_dtoa_r+0x878>
 802038a:	6933      	ldr	r3, [r6, #16]
 802038c:	3303      	adds	r3, #3
 802038e:	009b      	lsls	r3, r3, #2
 8020390:	18f3      	adds	r3, r6, r3
 8020392:	6858      	ldr	r0, [r3, #4]
 8020394:	f000 ff24 	bl	80211e0 <__hi0bits>
 8020398:	2320      	movs	r3, #32
 802039a:	1a18      	subs	r0, r3, r0
 802039c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802039e:	1818      	adds	r0, r3, r0
 80203a0:	0002      	movs	r2, r0
 80203a2:	231f      	movs	r3, #31
 80203a4:	401a      	ands	r2, r3
 80203a6:	4218      	tst	r0, r3
 80203a8:	d065      	beq.n	8020476 <_dtoa_r+0x952>
 80203aa:	3301      	adds	r3, #1
 80203ac:	1a9b      	subs	r3, r3, r2
 80203ae:	2b04      	cmp	r3, #4
 80203b0:	dd5d      	ble.n	802046e <_dtoa_r+0x94a>
 80203b2:	231c      	movs	r3, #28
 80203b4:	1a9b      	subs	r3, r3, r2
 80203b6:	9a06      	ldr	r2, [sp, #24]
 80203b8:	18e4      	adds	r4, r4, r3
 80203ba:	18d2      	adds	r2, r2, r3
 80203bc:	9206      	str	r2, [sp, #24]
 80203be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80203c0:	18d3      	adds	r3, r2, r3
 80203c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80203c4:	9b06      	ldr	r3, [sp, #24]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	dd05      	ble.n	80203d6 <_dtoa_r+0x8b2>
 80203ca:	001a      	movs	r2, r3
 80203cc:	9905      	ldr	r1, [sp, #20]
 80203ce:	9803      	ldr	r0, [sp, #12]
 80203d0:	f001 f87c 	bl	80214cc <__lshift>
 80203d4:	9005      	str	r0, [sp, #20]
 80203d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80203d8:	2b00      	cmp	r3, #0
 80203da:	dd05      	ble.n	80203e8 <_dtoa_r+0x8c4>
 80203dc:	0031      	movs	r1, r6
 80203de:	001a      	movs	r2, r3
 80203e0:	9803      	ldr	r0, [sp, #12]
 80203e2:	f001 f873 	bl	80214cc <__lshift>
 80203e6:	0006      	movs	r6, r0
 80203e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	d045      	beq.n	802047a <_dtoa_r+0x956>
 80203ee:	0031      	movs	r1, r6
 80203f0:	9805      	ldr	r0, [sp, #20]
 80203f2:	f001 f8d7 	bl	80215a4 <__mcmp>
 80203f6:	2800      	cmp	r0, #0
 80203f8:	da3f      	bge.n	802047a <_dtoa_r+0x956>
 80203fa:	9b04      	ldr	r3, [sp, #16]
 80203fc:	220a      	movs	r2, #10
 80203fe:	3b01      	subs	r3, #1
 8020400:	930c      	str	r3, [sp, #48]	@ 0x30
 8020402:	9905      	ldr	r1, [sp, #20]
 8020404:	2300      	movs	r3, #0
 8020406:	9803      	ldr	r0, [sp, #12]
 8020408:	f000 fe5a 	bl	80210c0 <__multadd>
 802040c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802040e:	9005      	str	r0, [sp, #20]
 8020410:	2b00      	cmp	r3, #0
 8020412:	d100      	bne.n	8020416 <_dtoa_r+0x8f2>
 8020414:	e15c      	b.n	80206d0 <_dtoa_r+0xbac>
 8020416:	2300      	movs	r3, #0
 8020418:	0039      	movs	r1, r7
 802041a:	220a      	movs	r2, #10
 802041c:	9803      	ldr	r0, [sp, #12]
 802041e:	f000 fe4f 	bl	80210c0 <__multadd>
 8020422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020424:	0007      	movs	r7, r0
 8020426:	2b00      	cmp	r3, #0
 8020428:	dc55      	bgt.n	80204d6 <_dtoa_r+0x9b2>
 802042a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802042c:	2b02      	cmp	r3, #2
 802042e:	dc2d      	bgt.n	802048c <_dtoa_r+0x968>
 8020430:	e051      	b.n	80204d6 <_dtoa_r+0x9b2>
 8020432:	2336      	movs	r3, #54	@ 0x36
 8020434:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020436:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020438:	9c06      	ldr	r4, [sp, #24]
 802043a:	1a9b      	subs	r3, r3, r2
 802043c:	e73c      	b.n	80202b8 <_dtoa_r+0x794>
 802043e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020440:	1e5d      	subs	r5, r3, #1
 8020442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020444:	42ab      	cmp	r3, r5
 8020446:	db08      	blt.n	802045a <_dtoa_r+0x936>
 8020448:	1b5d      	subs	r5, r3, r5
 802044a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802044c:	9c06      	ldr	r4, [sp, #24]
 802044e:	2b00      	cmp	r3, #0
 8020450:	db00      	blt.n	8020454 <_dtoa_r+0x930>
 8020452:	e731      	b.n	80202b8 <_dtoa_r+0x794>
 8020454:	1ae4      	subs	r4, r4, r3
 8020456:	2300      	movs	r3, #0
 8020458:	e72e      	b.n	80202b8 <_dtoa_r+0x794>
 802045a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802045c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802045e:	1aeb      	subs	r3, r5, r3
 8020460:	18d3      	adds	r3, r2, r3
 8020462:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020464:	9314      	str	r3, [sp, #80]	@ 0x50
 8020466:	2500      	movs	r5, #0
 8020468:	e7ef      	b.n	802044a <_dtoa_r+0x926>
 802046a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802046c:	e75e      	b.n	802032c <_dtoa_r+0x808>
 802046e:	2b04      	cmp	r3, #4
 8020470:	d0a8      	beq.n	80203c4 <_dtoa_r+0x8a0>
 8020472:	331c      	adds	r3, #28
 8020474:	e79f      	b.n	80203b6 <_dtoa_r+0x892>
 8020476:	0013      	movs	r3, r2
 8020478:	e7fb      	b.n	8020472 <_dtoa_r+0x94e>
 802047a:	9b04      	ldr	r3, [sp, #16]
 802047c:	930c      	str	r3, [sp, #48]	@ 0x30
 802047e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020480:	930e      	str	r3, [sp, #56]	@ 0x38
 8020482:	2b00      	cmp	r3, #0
 8020484:	dc23      	bgt.n	80204ce <_dtoa_r+0x9aa>
 8020486:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020488:	2b02      	cmp	r3, #2
 802048a:	dd20      	ble.n	80204ce <_dtoa_r+0x9aa>
 802048c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802048e:	2b00      	cmp	r3, #0
 8020490:	d000      	beq.n	8020494 <_dtoa_r+0x970>
 8020492:	e6b5      	b.n	8020200 <_dtoa_r+0x6dc>
 8020494:	0031      	movs	r1, r6
 8020496:	2205      	movs	r2, #5
 8020498:	9803      	ldr	r0, [sp, #12]
 802049a:	f000 fe11 	bl	80210c0 <__multadd>
 802049e:	0006      	movs	r6, r0
 80204a0:	0001      	movs	r1, r0
 80204a2:	9805      	ldr	r0, [sp, #20]
 80204a4:	f001 f87e 	bl	80215a4 <__mcmp>
 80204a8:	2800      	cmp	r0, #0
 80204aa:	dc00      	bgt.n	80204ae <_dtoa_r+0x98a>
 80204ac:	e6a8      	b.n	8020200 <_dtoa_r+0x6dc>
 80204ae:	9b08      	ldr	r3, [sp, #32]
 80204b0:	9a08      	ldr	r2, [sp, #32]
 80204b2:	1c5c      	adds	r4, r3, #1
 80204b4:	2331      	movs	r3, #49	@ 0x31
 80204b6:	7013      	strb	r3, [r2, #0]
 80204b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80204ba:	3301      	adds	r3, #1
 80204bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80204be:	e6a3      	b.n	8020208 <_dtoa_r+0x6e4>
 80204c0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80204c2:	0037      	movs	r7, r6
 80204c4:	e7f3      	b.n	80204ae <_dtoa_r+0x98a>
 80204c6:	9b04      	ldr	r3, [sp, #16]
 80204c8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80204ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80204cc:	e7f9      	b.n	80204c2 <_dtoa_r+0x99e>
 80204ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	d100      	bne.n	80204d6 <_dtoa_r+0x9b2>
 80204d4:	e100      	b.n	80206d8 <_dtoa_r+0xbb4>
 80204d6:	2c00      	cmp	r4, #0
 80204d8:	dd05      	ble.n	80204e6 <_dtoa_r+0x9c2>
 80204da:	0039      	movs	r1, r7
 80204dc:	0022      	movs	r2, r4
 80204de:	9803      	ldr	r0, [sp, #12]
 80204e0:	f000 fff4 	bl	80214cc <__lshift>
 80204e4:	0007      	movs	r7, r0
 80204e6:	0038      	movs	r0, r7
 80204e8:	2d00      	cmp	r5, #0
 80204ea:	d018      	beq.n	802051e <_dtoa_r+0x9fa>
 80204ec:	6879      	ldr	r1, [r7, #4]
 80204ee:	9803      	ldr	r0, [sp, #12]
 80204f0:	f000 fd7e 	bl	8020ff0 <_Balloc>
 80204f4:	1e04      	subs	r4, r0, #0
 80204f6:	d105      	bne.n	8020504 <_dtoa_r+0x9e0>
 80204f8:	0022      	movs	r2, r4
 80204fa:	4b2b      	ldr	r3, [pc, #172]	@ (80205a8 <_dtoa_r+0xa84>)
 80204fc:	482b      	ldr	r0, [pc, #172]	@ (80205ac <_dtoa_r+0xa88>)
 80204fe:	492c      	ldr	r1, [pc, #176]	@ (80205b0 <_dtoa_r+0xa8c>)
 8020500:	f7ff fb25 	bl	801fb4e <_dtoa_r+0x2a>
 8020504:	0039      	movs	r1, r7
 8020506:	693a      	ldr	r2, [r7, #16]
 8020508:	310c      	adds	r1, #12
 802050a:	3202      	adds	r2, #2
 802050c:	0092      	lsls	r2, r2, #2
 802050e:	300c      	adds	r0, #12
 8020510:	f7ff fa6a 	bl	801f9e8 <memcpy>
 8020514:	2201      	movs	r2, #1
 8020516:	0021      	movs	r1, r4
 8020518:	9803      	ldr	r0, [sp, #12]
 802051a:	f000 ffd7 	bl	80214cc <__lshift>
 802051e:	9b08      	ldr	r3, [sp, #32]
 8020520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020522:	9306      	str	r3, [sp, #24]
 8020524:	3b01      	subs	r3, #1
 8020526:	189b      	adds	r3, r3, r2
 8020528:	2201      	movs	r2, #1
 802052a:	9704      	str	r7, [sp, #16]
 802052c:	0007      	movs	r7, r0
 802052e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020532:	4013      	ands	r3, r2
 8020534:	930e      	str	r3, [sp, #56]	@ 0x38
 8020536:	0031      	movs	r1, r6
 8020538:	9805      	ldr	r0, [sp, #20]
 802053a:	f7ff fa65 	bl	801fa08 <quorem>
 802053e:	9904      	ldr	r1, [sp, #16]
 8020540:	0005      	movs	r5, r0
 8020542:	900a      	str	r0, [sp, #40]	@ 0x28
 8020544:	9805      	ldr	r0, [sp, #20]
 8020546:	f001 f82d 	bl	80215a4 <__mcmp>
 802054a:	003a      	movs	r2, r7
 802054c:	900d      	str	r0, [sp, #52]	@ 0x34
 802054e:	0031      	movs	r1, r6
 8020550:	9803      	ldr	r0, [sp, #12]
 8020552:	f001 f843 	bl	80215dc <__mdiff>
 8020556:	2201      	movs	r2, #1
 8020558:	68c3      	ldr	r3, [r0, #12]
 802055a:	0004      	movs	r4, r0
 802055c:	3530      	adds	r5, #48	@ 0x30
 802055e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020560:	2b00      	cmp	r3, #0
 8020562:	d104      	bne.n	802056e <_dtoa_r+0xa4a>
 8020564:	0001      	movs	r1, r0
 8020566:	9805      	ldr	r0, [sp, #20]
 8020568:	f001 f81c 	bl	80215a4 <__mcmp>
 802056c:	9009      	str	r0, [sp, #36]	@ 0x24
 802056e:	0021      	movs	r1, r4
 8020570:	9803      	ldr	r0, [sp, #12]
 8020572:	f000 fd81 	bl	8021078 <_Bfree>
 8020576:	9b06      	ldr	r3, [sp, #24]
 8020578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802057a:	1c5c      	adds	r4, r3, #1
 802057c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802057e:	4313      	orrs	r3, r2
 8020580:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020582:	4313      	orrs	r3, r2
 8020584:	d116      	bne.n	80205b4 <_dtoa_r+0xa90>
 8020586:	2d39      	cmp	r5, #57	@ 0x39
 8020588:	d02f      	beq.n	80205ea <_dtoa_r+0xac6>
 802058a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802058c:	2b00      	cmp	r3, #0
 802058e:	dd01      	ble.n	8020594 <_dtoa_r+0xa70>
 8020590:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020592:	3531      	adds	r5, #49	@ 0x31
 8020594:	9b06      	ldr	r3, [sp, #24]
 8020596:	701d      	strb	r5, [r3, #0]
 8020598:	e638      	b.n	802020c <_dtoa_r+0x6e8>
 802059a:	46c0      	nop			@ (mov r8, r8)
 802059c:	40240000 	.word	0x40240000
 80205a0:	00000433 	.word	0x00000433
 80205a4:	7ff00000 	.word	0x7ff00000
 80205a8:	080250b1 	.word	0x080250b1
 80205ac:	08025059 	.word	0x08025059
 80205b0:	000002ef 	.word	0x000002ef
 80205b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80205b6:	2b00      	cmp	r3, #0
 80205b8:	db04      	blt.n	80205c4 <_dtoa_r+0xaa0>
 80205ba:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80205bc:	4313      	orrs	r3, r2
 80205be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80205c0:	4313      	orrs	r3, r2
 80205c2:	d11e      	bne.n	8020602 <_dtoa_r+0xade>
 80205c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	dde4      	ble.n	8020594 <_dtoa_r+0xa70>
 80205ca:	9905      	ldr	r1, [sp, #20]
 80205cc:	2201      	movs	r2, #1
 80205ce:	9803      	ldr	r0, [sp, #12]
 80205d0:	f000 ff7c 	bl	80214cc <__lshift>
 80205d4:	0031      	movs	r1, r6
 80205d6:	9005      	str	r0, [sp, #20]
 80205d8:	f000 ffe4 	bl	80215a4 <__mcmp>
 80205dc:	2800      	cmp	r0, #0
 80205de:	dc02      	bgt.n	80205e6 <_dtoa_r+0xac2>
 80205e0:	d1d8      	bne.n	8020594 <_dtoa_r+0xa70>
 80205e2:	07eb      	lsls	r3, r5, #31
 80205e4:	d5d6      	bpl.n	8020594 <_dtoa_r+0xa70>
 80205e6:	2d39      	cmp	r5, #57	@ 0x39
 80205e8:	d1d2      	bne.n	8020590 <_dtoa_r+0xa6c>
 80205ea:	2339      	movs	r3, #57	@ 0x39
 80205ec:	9a06      	ldr	r2, [sp, #24]
 80205ee:	7013      	strb	r3, [r2, #0]
 80205f0:	0023      	movs	r3, r4
 80205f2:	001c      	movs	r4, r3
 80205f4:	3b01      	subs	r3, #1
 80205f6:	781a      	ldrb	r2, [r3, #0]
 80205f8:	2a39      	cmp	r2, #57	@ 0x39
 80205fa:	d04f      	beq.n	802069c <_dtoa_r+0xb78>
 80205fc:	3201      	adds	r2, #1
 80205fe:	701a      	strb	r2, [r3, #0]
 8020600:	e604      	b.n	802020c <_dtoa_r+0x6e8>
 8020602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020604:	2b00      	cmp	r3, #0
 8020606:	dd03      	ble.n	8020610 <_dtoa_r+0xaec>
 8020608:	2d39      	cmp	r5, #57	@ 0x39
 802060a:	d0ee      	beq.n	80205ea <_dtoa_r+0xac6>
 802060c:	3501      	adds	r5, #1
 802060e:	e7c1      	b.n	8020594 <_dtoa_r+0xa70>
 8020610:	9b06      	ldr	r3, [sp, #24]
 8020612:	9a06      	ldr	r2, [sp, #24]
 8020614:	701d      	strb	r5, [r3, #0]
 8020616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020618:	4293      	cmp	r3, r2
 802061a:	d02a      	beq.n	8020672 <_dtoa_r+0xb4e>
 802061c:	2300      	movs	r3, #0
 802061e:	220a      	movs	r2, #10
 8020620:	9905      	ldr	r1, [sp, #20]
 8020622:	9803      	ldr	r0, [sp, #12]
 8020624:	f000 fd4c 	bl	80210c0 <__multadd>
 8020628:	9b04      	ldr	r3, [sp, #16]
 802062a:	9005      	str	r0, [sp, #20]
 802062c:	42bb      	cmp	r3, r7
 802062e:	d109      	bne.n	8020644 <_dtoa_r+0xb20>
 8020630:	2300      	movs	r3, #0
 8020632:	220a      	movs	r2, #10
 8020634:	9904      	ldr	r1, [sp, #16]
 8020636:	9803      	ldr	r0, [sp, #12]
 8020638:	f000 fd42 	bl	80210c0 <__multadd>
 802063c:	9004      	str	r0, [sp, #16]
 802063e:	0007      	movs	r7, r0
 8020640:	9406      	str	r4, [sp, #24]
 8020642:	e778      	b.n	8020536 <_dtoa_r+0xa12>
 8020644:	9904      	ldr	r1, [sp, #16]
 8020646:	2300      	movs	r3, #0
 8020648:	220a      	movs	r2, #10
 802064a:	9803      	ldr	r0, [sp, #12]
 802064c:	f000 fd38 	bl	80210c0 <__multadd>
 8020650:	2300      	movs	r3, #0
 8020652:	9004      	str	r0, [sp, #16]
 8020654:	220a      	movs	r2, #10
 8020656:	0039      	movs	r1, r7
 8020658:	9803      	ldr	r0, [sp, #12]
 802065a:	f000 fd31 	bl	80210c0 <__multadd>
 802065e:	e7ee      	b.n	802063e <_dtoa_r+0xb1a>
 8020660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020662:	2401      	movs	r4, #1
 8020664:	2b00      	cmp	r3, #0
 8020666:	dd00      	ble.n	802066a <_dtoa_r+0xb46>
 8020668:	001c      	movs	r4, r3
 802066a:	9b08      	ldr	r3, [sp, #32]
 802066c:	191c      	adds	r4, r3, r4
 802066e:	2300      	movs	r3, #0
 8020670:	9304      	str	r3, [sp, #16]
 8020672:	9905      	ldr	r1, [sp, #20]
 8020674:	2201      	movs	r2, #1
 8020676:	9803      	ldr	r0, [sp, #12]
 8020678:	f000 ff28 	bl	80214cc <__lshift>
 802067c:	0031      	movs	r1, r6
 802067e:	9005      	str	r0, [sp, #20]
 8020680:	f000 ff90 	bl	80215a4 <__mcmp>
 8020684:	2800      	cmp	r0, #0
 8020686:	dcb3      	bgt.n	80205f0 <_dtoa_r+0xacc>
 8020688:	d101      	bne.n	802068e <_dtoa_r+0xb6a>
 802068a:	07ed      	lsls	r5, r5, #31
 802068c:	d4b0      	bmi.n	80205f0 <_dtoa_r+0xacc>
 802068e:	0023      	movs	r3, r4
 8020690:	001c      	movs	r4, r3
 8020692:	3b01      	subs	r3, #1
 8020694:	781a      	ldrb	r2, [r3, #0]
 8020696:	2a30      	cmp	r2, #48	@ 0x30
 8020698:	d0fa      	beq.n	8020690 <_dtoa_r+0xb6c>
 802069a:	e5b7      	b.n	802020c <_dtoa_r+0x6e8>
 802069c:	9a08      	ldr	r2, [sp, #32]
 802069e:	429a      	cmp	r2, r3
 80206a0:	d1a7      	bne.n	80205f2 <_dtoa_r+0xace>
 80206a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80206a4:	3301      	adds	r3, #1
 80206a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80206a8:	2331      	movs	r3, #49	@ 0x31
 80206aa:	7013      	strb	r3, [r2, #0]
 80206ac:	e5ae      	b.n	802020c <_dtoa_r+0x6e8>
 80206ae:	4b15      	ldr	r3, [pc, #84]	@ (8020704 <_dtoa_r+0xbe0>)
 80206b0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80206b2:	9308      	str	r3, [sp, #32]
 80206b4:	4b14      	ldr	r3, [pc, #80]	@ (8020708 <_dtoa_r+0xbe4>)
 80206b6:	2a00      	cmp	r2, #0
 80206b8:	d001      	beq.n	80206be <_dtoa_r+0xb9a>
 80206ba:	f7ff fa7b 	bl	801fbb4 <_dtoa_r+0x90>
 80206be:	f7ff fa7b 	bl	801fbb8 <_dtoa_r+0x94>
 80206c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206c4:	2b01      	cmp	r3, #1
 80206c6:	dc00      	bgt.n	80206ca <_dtoa_r+0xba6>
 80206c8:	e648      	b.n	802035c <_dtoa_r+0x838>
 80206ca:	2001      	movs	r0, #1
 80206cc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80206ce:	e665      	b.n	802039c <_dtoa_r+0x878>
 80206d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	dc00      	bgt.n	80206d8 <_dtoa_r+0xbb4>
 80206d6:	e6d6      	b.n	8020486 <_dtoa_r+0x962>
 80206d8:	2400      	movs	r4, #0
 80206da:	0031      	movs	r1, r6
 80206dc:	9805      	ldr	r0, [sp, #20]
 80206de:	f7ff f993 	bl	801fa08 <quorem>
 80206e2:	9b08      	ldr	r3, [sp, #32]
 80206e4:	3030      	adds	r0, #48	@ 0x30
 80206e6:	5518      	strb	r0, [r3, r4]
 80206e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80206ea:	3401      	adds	r4, #1
 80206ec:	0005      	movs	r5, r0
 80206ee:	429c      	cmp	r4, r3
 80206f0:	dab6      	bge.n	8020660 <_dtoa_r+0xb3c>
 80206f2:	2300      	movs	r3, #0
 80206f4:	220a      	movs	r2, #10
 80206f6:	9905      	ldr	r1, [sp, #20]
 80206f8:	9803      	ldr	r0, [sp, #12]
 80206fa:	f000 fce1 	bl	80210c0 <__multadd>
 80206fe:	9005      	str	r0, [sp, #20]
 8020700:	e7eb      	b.n	80206da <_dtoa_r+0xbb6>
 8020702:	46c0      	nop			@ (mov r8, r8)
 8020704:	08025035 	.word	0x08025035
 8020708:	0802503d 	.word	0x0802503d

0802070c <_free_r>:
 802070c:	b570      	push	{r4, r5, r6, lr}
 802070e:	0005      	movs	r5, r0
 8020710:	1e0c      	subs	r4, r1, #0
 8020712:	d010      	beq.n	8020736 <_free_r+0x2a>
 8020714:	3c04      	subs	r4, #4
 8020716:	6823      	ldr	r3, [r4, #0]
 8020718:	2b00      	cmp	r3, #0
 802071a:	da00      	bge.n	802071e <_free_r+0x12>
 802071c:	18e4      	adds	r4, r4, r3
 802071e:	0028      	movs	r0, r5
 8020720:	f000 fc56 	bl	8020fd0 <__malloc_lock>
 8020724:	4a1d      	ldr	r2, [pc, #116]	@ (802079c <_free_r+0x90>)
 8020726:	6813      	ldr	r3, [r2, #0]
 8020728:	2b00      	cmp	r3, #0
 802072a:	d105      	bne.n	8020738 <_free_r+0x2c>
 802072c:	6063      	str	r3, [r4, #4]
 802072e:	6014      	str	r4, [r2, #0]
 8020730:	0028      	movs	r0, r5
 8020732:	f000 fc55 	bl	8020fe0 <__malloc_unlock>
 8020736:	bd70      	pop	{r4, r5, r6, pc}
 8020738:	42a3      	cmp	r3, r4
 802073a:	d908      	bls.n	802074e <_free_r+0x42>
 802073c:	6820      	ldr	r0, [r4, #0]
 802073e:	1821      	adds	r1, r4, r0
 8020740:	428b      	cmp	r3, r1
 8020742:	d1f3      	bne.n	802072c <_free_r+0x20>
 8020744:	6819      	ldr	r1, [r3, #0]
 8020746:	685b      	ldr	r3, [r3, #4]
 8020748:	1809      	adds	r1, r1, r0
 802074a:	6021      	str	r1, [r4, #0]
 802074c:	e7ee      	b.n	802072c <_free_r+0x20>
 802074e:	001a      	movs	r2, r3
 8020750:	685b      	ldr	r3, [r3, #4]
 8020752:	2b00      	cmp	r3, #0
 8020754:	d001      	beq.n	802075a <_free_r+0x4e>
 8020756:	42a3      	cmp	r3, r4
 8020758:	d9f9      	bls.n	802074e <_free_r+0x42>
 802075a:	6811      	ldr	r1, [r2, #0]
 802075c:	1850      	adds	r0, r2, r1
 802075e:	42a0      	cmp	r0, r4
 8020760:	d10b      	bne.n	802077a <_free_r+0x6e>
 8020762:	6820      	ldr	r0, [r4, #0]
 8020764:	1809      	adds	r1, r1, r0
 8020766:	1850      	adds	r0, r2, r1
 8020768:	6011      	str	r1, [r2, #0]
 802076a:	4283      	cmp	r3, r0
 802076c:	d1e0      	bne.n	8020730 <_free_r+0x24>
 802076e:	6818      	ldr	r0, [r3, #0]
 8020770:	685b      	ldr	r3, [r3, #4]
 8020772:	1841      	adds	r1, r0, r1
 8020774:	6011      	str	r1, [r2, #0]
 8020776:	6053      	str	r3, [r2, #4]
 8020778:	e7da      	b.n	8020730 <_free_r+0x24>
 802077a:	42a0      	cmp	r0, r4
 802077c:	d902      	bls.n	8020784 <_free_r+0x78>
 802077e:	230c      	movs	r3, #12
 8020780:	602b      	str	r3, [r5, #0]
 8020782:	e7d5      	b.n	8020730 <_free_r+0x24>
 8020784:	6820      	ldr	r0, [r4, #0]
 8020786:	1821      	adds	r1, r4, r0
 8020788:	428b      	cmp	r3, r1
 802078a:	d103      	bne.n	8020794 <_free_r+0x88>
 802078c:	6819      	ldr	r1, [r3, #0]
 802078e:	685b      	ldr	r3, [r3, #4]
 8020790:	1809      	adds	r1, r1, r0
 8020792:	6021      	str	r1, [r4, #0]
 8020794:	6063      	str	r3, [r4, #4]
 8020796:	6054      	str	r4, [r2, #4]
 8020798:	e7ca      	b.n	8020730 <_free_r+0x24>
 802079a:	46c0      	nop			@ (mov r8, r8)
 802079c:	20003900 	.word	0x20003900

080207a0 <rshift>:
 80207a0:	0002      	movs	r2, r0
 80207a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80207a4:	6904      	ldr	r4, [r0, #16]
 80207a6:	b085      	sub	sp, #20
 80207a8:	3214      	adds	r2, #20
 80207aa:	114b      	asrs	r3, r1, #5
 80207ac:	0016      	movs	r6, r2
 80207ae:	9302      	str	r3, [sp, #8]
 80207b0:	429c      	cmp	r4, r3
 80207b2:	dd31      	ble.n	8020818 <rshift+0x78>
 80207b4:	261f      	movs	r6, #31
 80207b6:	000f      	movs	r7, r1
 80207b8:	009b      	lsls	r3, r3, #2
 80207ba:	00a5      	lsls	r5, r4, #2
 80207bc:	18d3      	adds	r3, r2, r3
 80207be:	4037      	ands	r7, r6
 80207c0:	1955      	adds	r5, r2, r5
 80207c2:	9300      	str	r3, [sp, #0]
 80207c4:	9701      	str	r7, [sp, #4]
 80207c6:	4231      	tst	r1, r6
 80207c8:	d10d      	bne.n	80207e6 <rshift+0x46>
 80207ca:	0016      	movs	r6, r2
 80207cc:	0019      	movs	r1, r3
 80207ce:	428d      	cmp	r5, r1
 80207d0:	d836      	bhi.n	8020840 <rshift+0xa0>
 80207d2:	9b00      	ldr	r3, [sp, #0]
 80207d4:	2600      	movs	r6, #0
 80207d6:	3b03      	subs	r3, #3
 80207d8:	429d      	cmp	r5, r3
 80207da:	d302      	bcc.n	80207e2 <rshift+0x42>
 80207dc:	9b02      	ldr	r3, [sp, #8]
 80207de:	1ae4      	subs	r4, r4, r3
 80207e0:	00a6      	lsls	r6, r4, #2
 80207e2:	1996      	adds	r6, r2, r6
 80207e4:	e018      	b.n	8020818 <rshift+0x78>
 80207e6:	2120      	movs	r1, #32
 80207e8:	9e01      	ldr	r6, [sp, #4]
 80207ea:	9f01      	ldr	r7, [sp, #4]
 80207ec:	1b89      	subs	r1, r1, r6
 80207ee:	9e00      	ldr	r6, [sp, #0]
 80207f0:	9103      	str	r1, [sp, #12]
 80207f2:	ce02      	ldmia	r6!, {r1}
 80207f4:	4694      	mov	ip, r2
 80207f6:	40f9      	lsrs	r1, r7
 80207f8:	42b5      	cmp	r5, r6
 80207fa:	d816      	bhi.n	802082a <rshift+0x8a>
 80207fc:	9b00      	ldr	r3, [sp, #0]
 80207fe:	2600      	movs	r6, #0
 8020800:	3301      	adds	r3, #1
 8020802:	429d      	cmp	r5, r3
 8020804:	d303      	bcc.n	802080e <rshift+0x6e>
 8020806:	9b02      	ldr	r3, [sp, #8]
 8020808:	1ae4      	subs	r4, r4, r3
 802080a:	00a6      	lsls	r6, r4, #2
 802080c:	3e04      	subs	r6, #4
 802080e:	1996      	adds	r6, r2, r6
 8020810:	6031      	str	r1, [r6, #0]
 8020812:	2900      	cmp	r1, #0
 8020814:	d000      	beq.n	8020818 <rshift+0x78>
 8020816:	3604      	adds	r6, #4
 8020818:	1ab1      	subs	r1, r6, r2
 802081a:	1089      	asrs	r1, r1, #2
 802081c:	6101      	str	r1, [r0, #16]
 802081e:	4296      	cmp	r6, r2
 8020820:	d101      	bne.n	8020826 <rshift+0x86>
 8020822:	2300      	movs	r3, #0
 8020824:	6143      	str	r3, [r0, #20]
 8020826:	b005      	add	sp, #20
 8020828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802082a:	6837      	ldr	r7, [r6, #0]
 802082c:	9b03      	ldr	r3, [sp, #12]
 802082e:	409f      	lsls	r7, r3
 8020830:	430f      	orrs	r7, r1
 8020832:	4661      	mov	r1, ip
 8020834:	c180      	stmia	r1!, {r7}
 8020836:	468c      	mov	ip, r1
 8020838:	9b01      	ldr	r3, [sp, #4]
 802083a:	ce02      	ldmia	r6!, {r1}
 802083c:	40d9      	lsrs	r1, r3
 802083e:	e7db      	b.n	80207f8 <rshift+0x58>
 8020840:	c980      	ldmia	r1!, {r7}
 8020842:	c680      	stmia	r6!, {r7}
 8020844:	e7c3      	b.n	80207ce <rshift+0x2e>

08020846 <__hexdig_fun>:
 8020846:	0002      	movs	r2, r0
 8020848:	3a30      	subs	r2, #48	@ 0x30
 802084a:	0003      	movs	r3, r0
 802084c:	2a09      	cmp	r2, #9
 802084e:	d802      	bhi.n	8020856 <__hexdig_fun+0x10>
 8020850:	3b20      	subs	r3, #32
 8020852:	b2d8      	uxtb	r0, r3
 8020854:	4770      	bx	lr
 8020856:	0002      	movs	r2, r0
 8020858:	3a61      	subs	r2, #97	@ 0x61
 802085a:	2a05      	cmp	r2, #5
 802085c:	d801      	bhi.n	8020862 <__hexdig_fun+0x1c>
 802085e:	3b47      	subs	r3, #71	@ 0x47
 8020860:	e7f7      	b.n	8020852 <__hexdig_fun+0xc>
 8020862:	001a      	movs	r2, r3
 8020864:	3a41      	subs	r2, #65	@ 0x41
 8020866:	2000      	movs	r0, #0
 8020868:	2a05      	cmp	r2, #5
 802086a:	d8f3      	bhi.n	8020854 <__hexdig_fun+0xe>
 802086c:	3b27      	subs	r3, #39	@ 0x27
 802086e:	e7f0      	b.n	8020852 <__hexdig_fun+0xc>

08020870 <__gethex>:
 8020870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020872:	b089      	sub	sp, #36	@ 0x24
 8020874:	9307      	str	r3, [sp, #28]
 8020876:	680b      	ldr	r3, [r1, #0]
 8020878:	9201      	str	r2, [sp, #4]
 802087a:	9003      	str	r0, [sp, #12]
 802087c:	9106      	str	r1, [sp, #24]
 802087e:	1c9a      	adds	r2, r3, #2
 8020880:	0011      	movs	r1, r2
 8020882:	3201      	adds	r2, #1
 8020884:	1e50      	subs	r0, r2, #1
 8020886:	7800      	ldrb	r0, [r0, #0]
 8020888:	2830      	cmp	r0, #48	@ 0x30
 802088a:	d0f9      	beq.n	8020880 <__gethex+0x10>
 802088c:	1acb      	subs	r3, r1, r3
 802088e:	3b02      	subs	r3, #2
 8020890:	9305      	str	r3, [sp, #20]
 8020892:	9100      	str	r1, [sp, #0]
 8020894:	f7ff ffd7 	bl	8020846 <__hexdig_fun>
 8020898:	2300      	movs	r3, #0
 802089a:	001d      	movs	r5, r3
 802089c:	9302      	str	r3, [sp, #8]
 802089e:	4298      	cmp	r0, r3
 80208a0:	d11e      	bne.n	80208e0 <__gethex+0x70>
 80208a2:	2201      	movs	r2, #1
 80208a4:	49a6      	ldr	r1, [pc, #664]	@ (8020b40 <__gethex+0x2d0>)
 80208a6:	9800      	ldr	r0, [sp, #0]
 80208a8:	f7fe ffd8 	bl	801f85c <strncmp>
 80208ac:	0007      	movs	r7, r0
 80208ae:	42a8      	cmp	r0, r5
 80208b0:	d000      	beq.n	80208b4 <__gethex+0x44>
 80208b2:	e06a      	b.n	802098a <__gethex+0x11a>
 80208b4:	9b00      	ldr	r3, [sp, #0]
 80208b6:	7858      	ldrb	r0, [r3, #1]
 80208b8:	1c5c      	adds	r4, r3, #1
 80208ba:	f7ff ffc4 	bl	8020846 <__hexdig_fun>
 80208be:	2301      	movs	r3, #1
 80208c0:	9302      	str	r3, [sp, #8]
 80208c2:	42a8      	cmp	r0, r5
 80208c4:	d02f      	beq.n	8020926 <__gethex+0xb6>
 80208c6:	9400      	str	r4, [sp, #0]
 80208c8:	9b00      	ldr	r3, [sp, #0]
 80208ca:	7818      	ldrb	r0, [r3, #0]
 80208cc:	2830      	cmp	r0, #48	@ 0x30
 80208ce:	d009      	beq.n	80208e4 <__gethex+0x74>
 80208d0:	f7ff ffb9 	bl	8020846 <__hexdig_fun>
 80208d4:	4242      	negs	r2, r0
 80208d6:	4142      	adcs	r2, r0
 80208d8:	2301      	movs	r3, #1
 80208da:	0025      	movs	r5, r4
 80208dc:	9202      	str	r2, [sp, #8]
 80208de:	9305      	str	r3, [sp, #20]
 80208e0:	9c00      	ldr	r4, [sp, #0]
 80208e2:	e004      	b.n	80208ee <__gethex+0x7e>
 80208e4:	9b00      	ldr	r3, [sp, #0]
 80208e6:	3301      	adds	r3, #1
 80208e8:	9300      	str	r3, [sp, #0]
 80208ea:	e7ed      	b.n	80208c8 <__gethex+0x58>
 80208ec:	3401      	adds	r4, #1
 80208ee:	7820      	ldrb	r0, [r4, #0]
 80208f0:	f7ff ffa9 	bl	8020846 <__hexdig_fun>
 80208f4:	1e07      	subs	r7, r0, #0
 80208f6:	d1f9      	bne.n	80208ec <__gethex+0x7c>
 80208f8:	2201      	movs	r2, #1
 80208fa:	0020      	movs	r0, r4
 80208fc:	4990      	ldr	r1, [pc, #576]	@ (8020b40 <__gethex+0x2d0>)
 80208fe:	f7fe ffad 	bl	801f85c <strncmp>
 8020902:	2800      	cmp	r0, #0
 8020904:	d10d      	bne.n	8020922 <__gethex+0xb2>
 8020906:	2d00      	cmp	r5, #0
 8020908:	d106      	bne.n	8020918 <__gethex+0xa8>
 802090a:	3401      	adds	r4, #1
 802090c:	0025      	movs	r5, r4
 802090e:	7820      	ldrb	r0, [r4, #0]
 8020910:	f7ff ff99 	bl	8020846 <__hexdig_fun>
 8020914:	2800      	cmp	r0, #0
 8020916:	d102      	bne.n	802091e <__gethex+0xae>
 8020918:	1b2d      	subs	r5, r5, r4
 802091a:	00af      	lsls	r7, r5, #2
 802091c:	e003      	b.n	8020926 <__gethex+0xb6>
 802091e:	3401      	adds	r4, #1
 8020920:	e7f5      	b.n	802090e <__gethex+0x9e>
 8020922:	2d00      	cmp	r5, #0
 8020924:	d1f8      	bne.n	8020918 <__gethex+0xa8>
 8020926:	2220      	movs	r2, #32
 8020928:	7823      	ldrb	r3, [r4, #0]
 802092a:	0026      	movs	r6, r4
 802092c:	4393      	bics	r3, r2
 802092e:	2b50      	cmp	r3, #80	@ 0x50
 8020930:	d11d      	bne.n	802096e <__gethex+0xfe>
 8020932:	7863      	ldrb	r3, [r4, #1]
 8020934:	2b2b      	cmp	r3, #43	@ 0x2b
 8020936:	d02d      	beq.n	8020994 <__gethex+0x124>
 8020938:	2b2d      	cmp	r3, #45	@ 0x2d
 802093a:	d02f      	beq.n	802099c <__gethex+0x12c>
 802093c:	2300      	movs	r3, #0
 802093e:	1c66      	adds	r6, r4, #1
 8020940:	9304      	str	r3, [sp, #16]
 8020942:	7830      	ldrb	r0, [r6, #0]
 8020944:	f7ff ff7f 	bl	8020846 <__hexdig_fun>
 8020948:	1e43      	subs	r3, r0, #1
 802094a:	b2db      	uxtb	r3, r3
 802094c:	0005      	movs	r5, r0
 802094e:	2b18      	cmp	r3, #24
 8020950:	d82a      	bhi.n	80209a8 <__gethex+0x138>
 8020952:	7870      	ldrb	r0, [r6, #1]
 8020954:	f7ff ff77 	bl	8020846 <__hexdig_fun>
 8020958:	1e43      	subs	r3, r0, #1
 802095a:	b2db      	uxtb	r3, r3
 802095c:	3601      	adds	r6, #1
 802095e:	3d10      	subs	r5, #16
 8020960:	2b18      	cmp	r3, #24
 8020962:	d91d      	bls.n	80209a0 <__gethex+0x130>
 8020964:	9b04      	ldr	r3, [sp, #16]
 8020966:	2b00      	cmp	r3, #0
 8020968:	d000      	beq.n	802096c <__gethex+0xfc>
 802096a:	426d      	negs	r5, r5
 802096c:	197f      	adds	r7, r7, r5
 802096e:	9b06      	ldr	r3, [sp, #24]
 8020970:	601e      	str	r6, [r3, #0]
 8020972:	9b02      	ldr	r3, [sp, #8]
 8020974:	2b00      	cmp	r3, #0
 8020976:	d019      	beq.n	80209ac <__gethex+0x13c>
 8020978:	9b05      	ldr	r3, [sp, #20]
 802097a:	2606      	movs	r6, #6
 802097c:	425a      	negs	r2, r3
 802097e:	4153      	adcs	r3, r2
 8020980:	425b      	negs	r3, r3
 8020982:	401e      	ands	r6, r3
 8020984:	0030      	movs	r0, r6
 8020986:	b009      	add	sp, #36	@ 0x24
 8020988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802098a:	2301      	movs	r3, #1
 802098c:	2700      	movs	r7, #0
 802098e:	9c00      	ldr	r4, [sp, #0]
 8020990:	9302      	str	r3, [sp, #8]
 8020992:	e7c8      	b.n	8020926 <__gethex+0xb6>
 8020994:	2300      	movs	r3, #0
 8020996:	9304      	str	r3, [sp, #16]
 8020998:	1ca6      	adds	r6, r4, #2
 802099a:	e7d2      	b.n	8020942 <__gethex+0xd2>
 802099c:	2301      	movs	r3, #1
 802099e:	e7fa      	b.n	8020996 <__gethex+0x126>
 80209a0:	230a      	movs	r3, #10
 80209a2:	435d      	muls	r5, r3
 80209a4:	182d      	adds	r5, r5, r0
 80209a6:	e7d4      	b.n	8020952 <__gethex+0xe2>
 80209a8:	0026      	movs	r6, r4
 80209aa:	e7e0      	b.n	802096e <__gethex+0xfe>
 80209ac:	9b00      	ldr	r3, [sp, #0]
 80209ae:	9902      	ldr	r1, [sp, #8]
 80209b0:	1ae3      	subs	r3, r4, r3
 80209b2:	3b01      	subs	r3, #1
 80209b4:	2b07      	cmp	r3, #7
 80209b6:	dc0a      	bgt.n	80209ce <__gethex+0x15e>
 80209b8:	9803      	ldr	r0, [sp, #12]
 80209ba:	f000 fb19 	bl	8020ff0 <_Balloc>
 80209be:	1e05      	subs	r5, r0, #0
 80209c0:	d108      	bne.n	80209d4 <__gethex+0x164>
 80209c2:	002a      	movs	r2, r5
 80209c4:	21e4      	movs	r1, #228	@ 0xe4
 80209c6:	4b5f      	ldr	r3, [pc, #380]	@ (8020b44 <__gethex+0x2d4>)
 80209c8:	485f      	ldr	r0, [pc, #380]	@ (8020b48 <__gethex+0x2d8>)
 80209ca:	f001 fbf1 	bl	80221b0 <__assert_func>
 80209ce:	3101      	adds	r1, #1
 80209d0:	105b      	asrs	r3, r3, #1
 80209d2:	e7ef      	b.n	80209b4 <__gethex+0x144>
 80209d4:	0003      	movs	r3, r0
 80209d6:	3314      	adds	r3, #20
 80209d8:	9302      	str	r3, [sp, #8]
 80209da:	9305      	str	r3, [sp, #20]
 80209dc:	2300      	movs	r3, #0
 80209de:	001e      	movs	r6, r3
 80209e0:	9304      	str	r3, [sp, #16]
 80209e2:	9b00      	ldr	r3, [sp, #0]
 80209e4:	42a3      	cmp	r3, r4
 80209e6:	d338      	bcc.n	8020a5a <__gethex+0x1ea>
 80209e8:	9c05      	ldr	r4, [sp, #20]
 80209ea:	9b02      	ldr	r3, [sp, #8]
 80209ec:	c440      	stmia	r4!, {r6}
 80209ee:	1ae4      	subs	r4, r4, r3
 80209f0:	10a4      	asrs	r4, r4, #2
 80209f2:	0030      	movs	r0, r6
 80209f4:	612c      	str	r4, [r5, #16]
 80209f6:	f000 fbf3 	bl	80211e0 <__hi0bits>
 80209fa:	9b01      	ldr	r3, [sp, #4]
 80209fc:	0164      	lsls	r4, r4, #5
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	1a26      	subs	r6, r4, r0
 8020a02:	9300      	str	r3, [sp, #0]
 8020a04:	429e      	cmp	r6, r3
 8020a06:	dd52      	ble.n	8020aae <__gethex+0x23e>
 8020a08:	1af6      	subs	r6, r6, r3
 8020a0a:	0031      	movs	r1, r6
 8020a0c:	0028      	movs	r0, r5
 8020a0e:	f000 ff96 	bl	802193e <__any_on>
 8020a12:	1e04      	subs	r4, r0, #0
 8020a14:	d00f      	beq.n	8020a36 <__gethex+0x1c6>
 8020a16:	2401      	movs	r4, #1
 8020a18:	231f      	movs	r3, #31
 8020a1a:	0020      	movs	r0, r4
 8020a1c:	1e72      	subs	r2, r6, #1
 8020a1e:	4013      	ands	r3, r2
 8020a20:	4098      	lsls	r0, r3
 8020a22:	0003      	movs	r3, r0
 8020a24:	1151      	asrs	r1, r2, #5
 8020a26:	9802      	ldr	r0, [sp, #8]
 8020a28:	0089      	lsls	r1, r1, #2
 8020a2a:	5809      	ldr	r1, [r1, r0]
 8020a2c:	4219      	tst	r1, r3
 8020a2e:	d002      	beq.n	8020a36 <__gethex+0x1c6>
 8020a30:	42a2      	cmp	r2, r4
 8020a32:	dc34      	bgt.n	8020a9e <__gethex+0x22e>
 8020a34:	2402      	movs	r4, #2
 8020a36:	0031      	movs	r1, r6
 8020a38:	0028      	movs	r0, r5
 8020a3a:	f7ff feb1 	bl	80207a0 <rshift>
 8020a3e:	19bf      	adds	r7, r7, r6
 8020a40:	9b01      	ldr	r3, [sp, #4]
 8020a42:	689b      	ldr	r3, [r3, #8]
 8020a44:	42bb      	cmp	r3, r7
 8020a46:	da42      	bge.n	8020ace <__gethex+0x25e>
 8020a48:	0029      	movs	r1, r5
 8020a4a:	9803      	ldr	r0, [sp, #12]
 8020a4c:	f000 fb14 	bl	8021078 <_Bfree>
 8020a50:	2300      	movs	r3, #0
 8020a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a54:	26a3      	movs	r6, #163	@ 0xa3
 8020a56:	6013      	str	r3, [r2, #0]
 8020a58:	e794      	b.n	8020984 <__gethex+0x114>
 8020a5a:	3c01      	subs	r4, #1
 8020a5c:	7823      	ldrb	r3, [r4, #0]
 8020a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8020a60:	d012      	beq.n	8020a88 <__gethex+0x218>
 8020a62:	9b04      	ldr	r3, [sp, #16]
 8020a64:	2b20      	cmp	r3, #32
 8020a66:	d104      	bne.n	8020a72 <__gethex+0x202>
 8020a68:	9b05      	ldr	r3, [sp, #20]
 8020a6a:	c340      	stmia	r3!, {r6}
 8020a6c:	2600      	movs	r6, #0
 8020a6e:	9305      	str	r3, [sp, #20]
 8020a70:	9604      	str	r6, [sp, #16]
 8020a72:	7820      	ldrb	r0, [r4, #0]
 8020a74:	f7ff fee7 	bl	8020846 <__hexdig_fun>
 8020a78:	230f      	movs	r3, #15
 8020a7a:	4018      	ands	r0, r3
 8020a7c:	9b04      	ldr	r3, [sp, #16]
 8020a7e:	4098      	lsls	r0, r3
 8020a80:	3304      	adds	r3, #4
 8020a82:	4306      	orrs	r6, r0
 8020a84:	9304      	str	r3, [sp, #16]
 8020a86:	e7ac      	b.n	80209e2 <__gethex+0x172>
 8020a88:	9b00      	ldr	r3, [sp, #0]
 8020a8a:	42a3      	cmp	r3, r4
 8020a8c:	d8e9      	bhi.n	8020a62 <__gethex+0x1f2>
 8020a8e:	2201      	movs	r2, #1
 8020a90:	0020      	movs	r0, r4
 8020a92:	492b      	ldr	r1, [pc, #172]	@ (8020b40 <__gethex+0x2d0>)
 8020a94:	f7fe fee2 	bl	801f85c <strncmp>
 8020a98:	2800      	cmp	r0, #0
 8020a9a:	d1e2      	bne.n	8020a62 <__gethex+0x1f2>
 8020a9c:	e7a1      	b.n	80209e2 <__gethex+0x172>
 8020a9e:	0028      	movs	r0, r5
 8020aa0:	1eb1      	subs	r1, r6, #2
 8020aa2:	f000 ff4c 	bl	802193e <__any_on>
 8020aa6:	2800      	cmp	r0, #0
 8020aa8:	d0c4      	beq.n	8020a34 <__gethex+0x1c4>
 8020aaa:	2403      	movs	r4, #3
 8020aac:	e7c3      	b.n	8020a36 <__gethex+0x1c6>
 8020aae:	9b00      	ldr	r3, [sp, #0]
 8020ab0:	2400      	movs	r4, #0
 8020ab2:	429e      	cmp	r6, r3
 8020ab4:	dac4      	bge.n	8020a40 <__gethex+0x1d0>
 8020ab6:	1b9e      	subs	r6, r3, r6
 8020ab8:	0029      	movs	r1, r5
 8020aba:	0032      	movs	r2, r6
 8020abc:	9803      	ldr	r0, [sp, #12]
 8020abe:	f000 fd05 	bl	80214cc <__lshift>
 8020ac2:	0003      	movs	r3, r0
 8020ac4:	3314      	adds	r3, #20
 8020ac6:	0005      	movs	r5, r0
 8020ac8:	1bbf      	subs	r7, r7, r6
 8020aca:	9302      	str	r3, [sp, #8]
 8020acc:	e7b8      	b.n	8020a40 <__gethex+0x1d0>
 8020ace:	9b01      	ldr	r3, [sp, #4]
 8020ad0:	685e      	ldr	r6, [r3, #4]
 8020ad2:	42be      	cmp	r6, r7
 8020ad4:	dd6f      	ble.n	8020bb6 <__gethex+0x346>
 8020ad6:	9b00      	ldr	r3, [sp, #0]
 8020ad8:	1bf6      	subs	r6, r6, r7
 8020ada:	42b3      	cmp	r3, r6
 8020adc:	dc36      	bgt.n	8020b4c <__gethex+0x2dc>
 8020ade:	9b01      	ldr	r3, [sp, #4]
 8020ae0:	68db      	ldr	r3, [r3, #12]
 8020ae2:	2b02      	cmp	r3, #2
 8020ae4:	d024      	beq.n	8020b30 <__gethex+0x2c0>
 8020ae6:	2b03      	cmp	r3, #3
 8020ae8:	d026      	beq.n	8020b38 <__gethex+0x2c8>
 8020aea:	2b01      	cmp	r3, #1
 8020aec:	d117      	bne.n	8020b1e <__gethex+0x2ae>
 8020aee:	9b00      	ldr	r3, [sp, #0]
 8020af0:	42b3      	cmp	r3, r6
 8020af2:	d114      	bne.n	8020b1e <__gethex+0x2ae>
 8020af4:	2b01      	cmp	r3, #1
 8020af6:	d10b      	bne.n	8020b10 <__gethex+0x2a0>
 8020af8:	9b01      	ldr	r3, [sp, #4]
 8020afa:	9a07      	ldr	r2, [sp, #28]
 8020afc:	685b      	ldr	r3, [r3, #4]
 8020afe:	2662      	movs	r6, #98	@ 0x62
 8020b00:	6013      	str	r3, [r2, #0]
 8020b02:	2301      	movs	r3, #1
 8020b04:	9a02      	ldr	r2, [sp, #8]
 8020b06:	612b      	str	r3, [r5, #16]
 8020b08:	6013      	str	r3, [r2, #0]
 8020b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b0c:	601d      	str	r5, [r3, #0]
 8020b0e:	e739      	b.n	8020984 <__gethex+0x114>
 8020b10:	9900      	ldr	r1, [sp, #0]
 8020b12:	0028      	movs	r0, r5
 8020b14:	3901      	subs	r1, #1
 8020b16:	f000 ff12 	bl	802193e <__any_on>
 8020b1a:	2800      	cmp	r0, #0
 8020b1c:	d1ec      	bne.n	8020af8 <__gethex+0x288>
 8020b1e:	0029      	movs	r1, r5
 8020b20:	9803      	ldr	r0, [sp, #12]
 8020b22:	f000 faa9 	bl	8021078 <_Bfree>
 8020b26:	2300      	movs	r3, #0
 8020b28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020b2a:	2650      	movs	r6, #80	@ 0x50
 8020b2c:	6013      	str	r3, [r2, #0]
 8020b2e:	e729      	b.n	8020984 <__gethex+0x114>
 8020b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d1f3      	bne.n	8020b1e <__gethex+0x2ae>
 8020b36:	e7df      	b.n	8020af8 <__gethex+0x288>
 8020b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d1dc      	bne.n	8020af8 <__gethex+0x288>
 8020b3e:	e7ee      	b.n	8020b1e <__gethex+0x2ae>
 8020b40:	08024ea0 	.word	0x08024ea0
 8020b44:	080250b1 	.word	0x080250b1
 8020b48:	080250c2 	.word	0x080250c2
 8020b4c:	1e77      	subs	r7, r6, #1
 8020b4e:	2c00      	cmp	r4, #0
 8020b50:	d12f      	bne.n	8020bb2 <__gethex+0x342>
 8020b52:	2f00      	cmp	r7, #0
 8020b54:	d004      	beq.n	8020b60 <__gethex+0x2f0>
 8020b56:	0039      	movs	r1, r7
 8020b58:	0028      	movs	r0, r5
 8020b5a:	f000 fef0 	bl	802193e <__any_on>
 8020b5e:	0004      	movs	r4, r0
 8020b60:	231f      	movs	r3, #31
 8020b62:	117a      	asrs	r2, r7, #5
 8020b64:	401f      	ands	r7, r3
 8020b66:	3b1e      	subs	r3, #30
 8020b68:	40bb      	lsls	r3, r7
 8020b6a:	9902      	ldr	r1, [sp, #8]
 8020b6c:	0092      	lsls	r2, r2, #2
 8020b6e:	5852      	ldr	r2, [r2, r1]
 8020b70:	421a      	tst	r2, r3
 8020b72:	d001      	beq.n	8020b78 <__gethex+0x308>
 8020b74:	2302      	movs	r3, #2
 8020b76:	431c      	orrs	r4, r3
 8020b78:	9b00      	ldr	r3, [sp, #0]
 8020b7a:	0031      	movs	r1, r6
 8020b7c:	1b9b      	subs	r3, r3, r6
 8020b7e:	2602      	movs	r6, #2
 8020b80:	0028      	movs	r0, r5
 8020b82:	9300      	str	r3, [sp, #0]
 8020b84:	f7ff fe0c 	bl	80207a0 <rshift>
 8020b88:	9b01      	ldr	r3, [sp, #4]
 8020b8a:	685f      	ldr	r7, [r3, #4]
 8020b8c:	2c00      	cmp	r4, #0
 8020b8e:	d03f      	beq.n	8020c10 <__gethex+0x3a0>
 8020b90:	9b01      	ldr	r3, [sp, #4]
 8020b92:	68db      	ldr	r3, [r3, #12]
 8020b94:	2b02      	cmp	r3, #2
 8020b96:	d010      	beq.n	8020bba <__gethex+0x34a>
 8020b98:	2b03      	cmp	r3, #3
 8020b9a:	d012      	beq.n	8020bc2 <__gethex+0x352>
 8020b9c:	2b01      	cmp	r3, #1
 8020b9e:	d106      	bne.n	8020bae <__gethex+0x33e>
 8020ba0:	07a2      	lsls	r2, r4, #30
 8020ba2:	d504      	bpl.n	8020bae <__gethex+0x33e>
 8020ba4:	9a02      	ldr	r2, [sp, #8]
 8020ba6:	6812      	ldr	r2, [r2, #0]
 8020ba8:	4314      	orrs	r4, r2
 8020baa:	421c      	tst	r4, r3
 8020bac:	d10c      	bne.n	8020bc8 <__gethex+0x358>
 8020bae:	2310      	movs	r3, #16
 8020bb0:	e02d      	b.n	8020c0e <__gethex+0x39e>
 8020bb2:	2401      	movs	r4, #1
 8020bb4:	e7d4      	b.n	8020b60 <__gethex+0x2f0>
 8020bb6:	2601      	movs	r6, #1
 8020bb8:	e7e8      	b.n	8020b8c <__gethex+0x31c>
 8020bba:	2301      	movs	r3, #1
 8020bbc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020bbe:	1a9b      	subs	r3, r3, r2
 8020bc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020bc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d0f2      	beq.n	8020bae <__gethex+0x33e>
 8020bc8:	692b      	ldr	r3, [r5, #16]
 8020bca:	2000      	movs	r0, #0
 8020bcc:	9302      	str	r3, [sp, #8]
 8020bce:	009b      	lsls	r3, r3, #2
 8020bd0:	9304      	str	r3, [sp, #16]
 8020bd2:	002b      	movs	r3, r5
 8020bd4:	9a04      	ldr	r2, [sp, #16]
 8020bd6:	3314      	adds	r3, #20
 8020bd8:	1899      	adds	r1, r3, r2
 8020bda:	681a      	ldr	r2, [r3, #0]
 8020bdc:	1c54      	adds	r4, r2, #1
 8020bde:	d01c      	beq.n	8020c1a <__gethex+0x3aa>
 8020be0:	3201      	adds	r2, #1
 8020be2:	601a      	str	r2, [r3, #0]
 8020be4:	002b      	movs	r3, r5
 8020be6:	3314      	adds	r3, #20
 8020be8:	2e02      	cmp	r6, #2
 8020bea:	d13f      	bne.n	8020c6c <__gethex+0x3fc>
 8020bec:	9a01      	ldr	r2, [sp, #4]
 8020bee:	9900      	ldr	r1, [sp, #0]
 8020bf0:	6812      	ldr	r2, [r2, #0]
 8020bf2:	3a01      	subs	r2, #1
 8020bf4:	428a      	cmp	r2, r1
 8020bf6:	d109      	bne.n	8020c0c <__gethex+0x39c>
 8020bf8:	000a      	movs	r2, r1
 8020bfa:	201f      	movs	r0, #31
 8020bfc:	4010      	ands	r0, r2
 8020bfe:	2201      	movs	r2, #1
 8020c00:	4082      	lsls	r2, r0
 8020c02:	1149      	asrs	r1, r1, #5
 8020c04:	0089      	lsls	r1, r1, #2
 8020c06:	58cb      	ldr	r3, [r1, r3]
 8020c08:	4213      	tst	r3, r2
 8020c0a:	d13d      	bne.n	8020c88 <__gethex+0x418>
 8020c0c:	2320      	movs	r3, #32
 8020c0e:	431e      	orrs	r6, r3
 8020c10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c12:	601d      	str	r5, [r3, #0]
 8020c14:	9b07      	ldr	r3, [sp, #28]
 8020c16:	601f      	str	r7, [r3, #0]
 8020c18:	e6b4      	b.n	8020984 <__gethex+0x114>
 8020c1a:	c301      	stmia	r3!, {r0}
 8020c1c:	4299      	cmp	r1, r3
 8020c1e:	d8dc      	bhi.n	8020bda <__gethex+0x36a>
 8020c20:	68ab      	ldr	r3, [r5, #8]
 8020c22:	9a02      	ldr	r2, [sp, #8]
 8020c24:	429a      	cmp	r2, r3
 8020c26:	db18      	blt.n	8020c5a <__gethex+0x3ea>
 8020c28:	6869      	ldr	r1, [r5, #4]
 8020c2a:	9803      	ldr	r0, [sp, #12]
 8020c2c:	3101      	adds	r1, #1
 8020c2e:	f000 f9df 	bl	8020ff0 <_Balloc>
 8020c32:	1e04      	subs	r4, r0, #0
 8020c34:	d104      	bne.n	8020c40 <__gethex+0x3d0>
 8020c36:	0022      	movs	r2, r4
 8020c38:	2184      	movs	r1, #132	@ 0x84
 8020c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8020cb0 <__gethex+0x440>)
 8020c3c:	481d      	ldr	r0, [pc, #116]	@ (8020cb4 <__gethex+0x444>)
 8020c3e:	e6c4      	b.n	80209ca <__gethex+0x15a>
 8020c40:	0029      	movs	r1, r5
 8020c42:	692a      	ldr	r2, [r5, #16]
 8020c44:	310c      	adds	r1, #12
 8020c46:	3202      	adds	r2, #2
 8020c48:	0092      	lsls	r2, r2, #2
 8020c4a:	300c      	adds	r0, #12
 8020c4c:	f7fe fecc 	bl	801f9e8 <memcpy>
 8020c50:	0029      	movs	r1, r5
 8020c52:	9803      	ldr	r0, [sp, #12]
 8020c54:	f000 fa10 	bl	8021078 <_Bfree>
 8020c58:	0025      	movs	r5, r4
 8020c5a:	692b      	ldr	r3, [r5, #16]
 8020c5c:	1c5a      	adds	r2, r3, #1
 8020c5e:	612a      	str	r2, [r5, #16]
 8020c60:	2201      	movs	r2, #1
 8020c62:	3304      	adds	r3, #4
 8020c64:	009b      	lsls	r3, r3, #2
 8020c66:	18eb      	adds	r3, r5, r3
 8020c68:	605a      	str	r2, [r3, #4]
 8020c6a:	e7bb      	b.n	8020be4 <__gethex+0x374>
 8020c6c:	692a      	ldr	r2, [r5, #16]
 8020c6e:	9902      	ldr	r1, [sp, #8]
 8020c70:	428a      	cmp	r2, r1
 8020c72:	dd0b      	ble.n	8020c8c <__gethex+0x41c>
 8020c74:	2101      	movs	r1, #1
 8020c76:	0028      	movs	r0, r5
 8020c78:	f7ff fd92 	bl	80207a0 <rshift>
 8020c7c:	9b01      	ldr	r3, [sp, #4]
 8020c7e:	3701      	adds	r7, #1
 8020c80:	689b      	ldr	r3, [r3, #8]
 8020c82:	42bb      	cmp	r3, r7
 8020c84:	da00      	bge.n	8020c88 <__gethex+0x418>
 8020c86:	e6df      	b.n	8020a48 <__gethex+0x1d8>
 8020c88:	2601      	movs	r6, #1
 8020c8a:	e7bf      	b.n	8020c0c <__gethex+0x39c>
 8020c8c:	221f      	movs	r2, #31
 8020c8e:	9c00      	ldr	r4, [sp, #0]
 8020c90:	9900      	ldr	r1, [sp, #0]
 8020c92:	4014      	ands	r4, r2
 8020c94:	4211      	tst	r1, r2
 8020c96:	d0f7      	beq.n	8020c88 <__gethex+0x418>
 8020c98:	9a04      	ldr	r2, [sp, #16]
 8020c9a:	189b      	adds	r3, r3, r2
 8020c9c:	3b04      	subs	r3, #4
 8020c9e:	6818      	ldr	r0, [r3, #0]
 8020ca0:	f000 fa9e 	bl	80211e0 <__hi0bits>
 8020ca4:	2320      	movs	r3, #32
 8020ca6:	1b1b      	subs	r3, r3, r4
 8020ca8:	4298      	cmp	r0, r3
 8020caa:	dbe3      	blt.n	8020c74 <__gethex+0x404>
 8020cac:	e7ec      	b.n	8020c88 <__gethex+0x418>
 8020cae:	46c0      	nop			@ (mov r8, r8)
 8020cb0:	080250b1 	.word	0x080250b1
 8020cb4:	080250c2 	.word	0x080250c2

08020cb8 <L_shift>:
 8020cb8:	2308      	movs	r3, #8
 8020cba:	b570      	push	{r4, r5, r6, lr}
 8020cbc:	2520      	movs	r5, #32
 8020cbe:	1a9a      	subs	r2, r3, r2
 8020cc0:	0092      	lsls	r2, r2, #2
 8020cc2:	1aad      	subs	r5, r5, r2
 8020cc4:	6843      	ldr	r3, [r0, #4]
 8020cc6:	6804      	ldr	r4, [r0, #0]
 8020cc8:	001e      	movs	r6, r3
 8020cca:	40ae      	lsls	r6, r5
 8020ccc:	40d3      	lsrs	r3, r2
 8020cce:	4334      	orrs	r4, r6
 8020cd0:	6004      	str	r4, [r0, #0]
 8020cd2:	6043      	str	r3, [r0, #4]
 8020cd4:	3004      	adds	r0, #4
 8020cd6:	4288      	cmp	r0, r1
 8020cd8:	d3f4      	bcc.n	8020cc4 <L_shift+0xc>
 8020cda:	bd70      	pop	{r4, r5, r6, pc}

08020cdc <__match>:
 8020cdc:	b530      	push	{r4, r5, lr}
 8020cde:	6803      	ldr	r3, [r0, #0]
 8020ce0:	780c      	ldrb	r4, [r1, #0]
 8020ce2:	3301      	adds	r3, #1
 8020ce4:	2c00      	cmp	r4, #0
 8020ce6:	d102      	bne.n	8020cee <__match+0x12>
 8020ce8:	6003      	str	r3, [r0, #0]
 8020cea:	2001      	movs	r0, #1
 8020cec:	bd30      	pop	{r4, r5, pc}
 8020cee:	781a      	ldrb	r2, [r3, #0]
 8020cf0:	0015      	movs	r5, r2
 8020cf2:	3d41      	subs	r5, #65	@ 0x41
 8020cf4:	2d19      	cmp	r5, #25
 8020cf6:	d800      	bhi.n	8020cfa <__match+0x1e>
 8020cf8:	3220      	adds	r2, #32
 8020cfa:	3101      	adds	r1, #1
 8020cfc:	42a2      	cmp	r2, r4
 8020cfe:	d0ef      	beq.n	8020ce0 <__match+0x4>
 8020d00:	2000      	movs	r0, #0
 8020d02:	e7f3      	b.n	8020cec <__match+0x10>

08020d04 <__hexnan>:
 8020d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d06:	680b      	ldr	r3, [r1, #0]
 8020d08:	b08b      	sub	sp, #44	@ 0x2c
 8020d0a:	9201      	str	r2, [sp, #4]
 8020d0c:	9901      	ldr	r1, [sp, #4]
 8020d0e:	115a      	asrs	r2, r3, #5
 8020d10:	0092      	lsls	r2, r2, #2
 8020d12:	188a      	adds	r2, r1, r2
 8020d14:	9202      	str	r2, [sp, #8]
 8020d16:	0019      	movs	r1, r3
 8020d18:	221f      	movs	r2, #31
 8020d1a:	4011      	ands	r1, r2
 8020d1c:	9008      	str	r0, [sp, #32]
 8020d1e:	9106      	str	r1, [sp, #24]
 8020d20:	4213      	tst	r3, r2
 8020d22:	d002      	beq.n	8020d2a <__hexnan+0x26>
 8020d24:	9b02      	ldr	r3, [sp, #8]
 8020d26:	3304      	adds	r3, #4
 8020d28:	9302      	str	r3, [sp, #8]
 8020d2a:	9b02      	ldr	r3, [sp, #8]
 8020d2c:	2500      	movs	r5, #0
 8020d2e:	1f1f      	subs	r7, r3, #4
 8020d30:	003e      	movs	r6, r7
 8020d32:	003c      	movs	r4, r7
 8020d34:	9b08      	ldr	r3, [sp, #32]
 8020d36:	603d      	str	r5, [r7, #0]
 8020d38:	681b      	ldr	r3, [r3, #0]
 8020d3a:	9507      	str	r5, [sp, #28]
 8020d3c:	9305      	str	r3, [sp, #20]
 8020d3e:	9503      	str	r5, [sp, #12]
 8020d40:	9b05      	ldr	r3, [sp, #20]
 8020d42:	3301      	adds	r3, #1
 8020d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d46:	9b05      	ldr	r3, [sp, #20]
 8020d48:	785b      	ldrb	r3, [r3, #1]
 8020d4a:	9304      	str	r3, [sp, #16]
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d028      	beq.n	8020da2 <__hexnan+0x9e>
 8020d50:	9804      	ldr	r0, [sp, #16]
 8020d52:	f7ff fd78 	bl	8020846 <__hexdig_fun>
 8020d56:	2800      	cmp	r0, #0
 8020d58:	d155      	bne.n	8020e06 <__hexnan+0x102>
 8020d5a:	9b04      	ldr	r3, [sp, #16]
 8020d5c:	2b20      	cmp	r3, #32
 8020d5e:	d819      	bhi.n	8020d94 <__hexnan+0x90>
 8020d60:	9b03      	ldr	r3, [sp, #12]
 8020d62:	9a07      	ldr	r2, [sp, #28]
 8020d64:	4293      	cmp	r3, r2
 8020d66:	dd12      	ble.n	8020d8e <__hexnan+0x8a>
 8020d68:	42b4      	cmp	r4, r6
 8020d6a:	d206      	bcs.n	8020d7a <__hexnan+0x76>
 8020d6c:	2d07      	cmp	r5, #7
 8020d6e:	dc04      	bgt.n	8020d7a <__hexnan+0x76>
 8020d70:	002a      	movs	r2, r5
 8020d72:	0031      	movs	r1, r6
 8020d74:	0020      	movs	r0, r4
 8020d76:	f7ff ff9f 	bl	8020cb8 <L_shift>
 8020d7a:	9b01      	ldr	r3, [sp, #4]
 8020d7c:	2508      	movs	r5, #8
 8020d7e:	429c      	cmp	r4, r3
 8020d80:	d905      	bls.n	8020d8e <__hexnan+0x8a>
 8020d82:	1f26      	subs	r6, r4, #4
 8020d84:	2500      	movs	r5, #0
 8020d86:	0034      	movs	r4, r6
 8020d88:	9b03      	ldr	r3, [sp, #12]
 8020d8a:	6035      	str	r5, [r6, #0]
 8020d8c:	9307      	str	r3, [sp, #28]
 8020d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d90:	9305      	str	r3, [sp, #20]
 8020d92:	e7d5      	b.n	8020d40 <__hexnan+0x3c>
 8020d94:	9b04      	ldr	r3, [sp, #16]
 8020d96:	2b29      	cmp	r3, #41	@ 0x29
 8020d98:	d15a      	bne.n	8020e50 <__hexnan+0x14c>
 8020d9a:	9b05      	ldr	r3, [sp, #20]
 8020d9c:	9a08      	ldr	r2, [sp, #32]
 8020d9e:	3302      	adds	r3, #2
 8020da0:	6013      	str	r3, [r2, #0]
 8020da2:	9b03      	ldr	r3, [sp, #12]
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d053      	beq.n	8020e50 <__hexnan+0x14c>
 8020da8:	42b4      	cmp	r4, r6
 8020daa:	d206      	bcs.n	8020dba <__hexnan+0xb6>
 8020dac:	2d07      	cmp	r5, #7
 8020dae:	dc04      	bgt.n	8020dba <__hexnan+0xb6>
 8020db0:	002a      	movs	r2, r5
 8020db2:	0031      	movs	r1, r6
 8020db4:	0020      	movs	r0, r4
 8020db6:	f7ff ff7f 	bl	8020cb8 <L_shift>
 8020dba:	9b01      	ldr	r3, [sp, #4]
 8020dbc:	429c      	cmp	r4, r3
 8020dbe:	d936      	bls.n	8020e2e <__hexnan+0x12a>
 8020dc0:	001a      	movs	r2, r3
 8020dc2:	0023      	movs	r3, r4
 8020dc4:	cb02      	ldmia	r3!, {r1}
 8020dc6:	c202      	stmia	r2!, {r1}
 8020dc8:	429f      	cmp	r7, r3
 8020dca:	d2fb      	bcs.n	8020dc4 <__hexnan+0xc0>
 8020dcc:	9b02      	ldr	r3, [sp, #8]
 8020dce:	1c61      	adds	r1, r4, #1
 8020dd0:	1eda      	subs	r2, r3, #3
 8020dd2:	2304      	movs	r3, #4
 8020dd4:	4291      	cmp	r1, r2
 8020dd6:	d805      	bhi.n	8020de4 <__hexnan+0xe0>
 8020dd8:	9b02      	ldr	r3, [sp, #8]
 8020dda:	3b04      	subs	r3, #4
 8020ddc:	1b1b      	subs	r3, r3, r4
 8020dde:	089b      	lsrs	r3, r3, #2
 8020de0:	3301      	adds	r3, #1
 8020de2:	009b      	lsls	r3, r3, #2
 8020de4:	9a01      	ldr	r2, [sp, #4]
 8020de6:	18d3      	adds	r3, r2, r3
 8020de8:	2200      	movs	r2, #0
 8020dea:	c304      	stmia	r3!, {r2}
 8020dec:	429f      	cmp	r7, r3
 8020dee:	d2fc      	bcs.n	8020dea <__hexnan+0xe6>
 8020df0:	683b      	ldr	r3, [r7, #0]
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d104      	bne.n	8020e00 <__hexnan+0xfc>
 8020df6:	9b01      	ldr	r3, [sp, #4]
 8020df8:	429f      	cmp	r7, r3
 8020dfa:	d127      	bne.n	8020e4c <__hexnan+0x148>
 8020dfc:	2301      	movs	r3, #1
 8020dfe:	603b      	str	r3, [r7, #0]
 8020e00:	2005      	movs	r0, #5
 8020e02:	b00b      	add	sp, #44	@ 0x2c
 8020e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e06:	9b03      	ldr	r3, [sp, #12]
 8020e08:	3501      	adds	r5, #1
 8020e0a:	3301      	adds	r3, #1
 8020e0c:	9303      	str	r3, [sp, #12]
 8020e0e:	2d08      	cmp	r5, #8
 8020e10:	dd06      	ble.n	8020e20 <__hexnan+0x11c>
 8020e12:	9b01      	ldr	r3, [sp, #4]
 8020e14:	429c      	cmp	r4, r3
 8020e16:	d9ba      	bls.n	8020d8e <__hexnan+0x8a>
 8020e18:	2300      	movs	r3, #0
 8020e1a:	2501      	movs	r5, #1
 8020e1c:	3c04      	subs	r4, #4
 8020e1e:	6023      	str	r3, [r4, #0]
 8020e20:	220f      	movs	r2, #15
 8020e22:	6823      	ldr	r3, [r4, #0]
 8020e24:	4010      	ands	r0, r2
 8020e26:	011b      	lsls	r3, r3, #4
 8020e28:	4303      	orrs	r3, r0
 8020e2a:	6023      	str	r3, [r4, #0]
 8020e2c:	e7af      	b.n	8020d8e <__hexnan+0x8a>
 8020e2e:	9b06      	ldr	r3, [sp, #24]
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d0dd      	beq.n	8020df0 <__hexnan+0xec>
 8020e34:	2320      	movs	r3, #32
 8020e36:	9a06      	ldr	r2, [sp, #24]
 8020e38:	9902      	ldr	r1, [sp, #8]
 8020e3a:	1a9b      	subs	r3, r3, r2
 8020e3c:	2201      	movs	r2, #1
 8020e3e:	4252      	negs	r2, r2
 8020e40:	40da      	lsrs	r2, r3
 8020e42:	3904      	subs	r1, #4
 8020e44:	680b      	ldr	r3, [r1, #0]
 8020e46:	4013      	ands	r3, r2
 8020e48:	600b      	str	r3, [r1, #0]
 8020e4a:	e7d1      	b.n	8020df0 <__hexnan+0xec>
 8020e4c:	3f04      	subs	r7, #4
 8020e4e:	e7cf      	b.n	8020df0 <__hexnan+0xec>
 8020e50:	2004      	movs	r0, #4
 8020e52:	e7d6      	b.n	8020e02 <__hexnan+0xfe>

08020e54 <malloc>:
 8020e54:	b510      	push	{r4, lr}
 8020e56:	4b03      	ldr	r3, [pc, #12]	@ (8020e64 <malloc+0x10>)
 8020e58:	0001      	movs	r1, r0
 8020e5a:	6818      	ldr	r0, [r3, #0]
 8020e5c:	f000 f826 	bl	8020eac <_malloc_r>
 8020e60:	bd10      	pop	{r4, pc}
 8020e62:	46c0      	nop			@ (mov r8, r8)
 8020e64:	200003c8 	.word	0x200003c8

08020e68 <sbrk_aligned>:
 8020e68:	b570      	push	{r4, r5, r6, lr}
 8020e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8020ea8 <sbrk_aligned+0x40>)
 8020e6c:	000d      	movs	r5, r1
 8020e6e:	6831      	ldr	r1, [r6, #0]
 8020e70:	0004      	movs	r4, r0
 8020e72:	2900      	cmp	r1, #0
 8020e74:	d102      	bne.n	8020e7c <sbrk_aligned+0x14>
 8020e76:	f001 f989 	bl	802218c <_sbrk_r>
 8020e7a:	6030      	str	r0, [r6, #0]
 8020e7c:	0029      	movs	r1, r5
 8020e7e:	0020      	movs	r0, r4
 8020e80:	f001 f984 	bl	802218c <_sbrk_r>
 8020e84:	1c43      	adds	r3, r0, #1
 8020e86:	d103      	bne.n	8020e90 <sbrk_aligned+0x28>
 8020e88:	2501      	movs	r5, #1
 8020e8a:	426d      	negs	r5, r5
 8020e8c:	0028      	movs	r0, r5
 8020e8e:	bd70      	pop	{r4, r5, r6, pc}
 8020e90:	2303      	movs	r3, #3
 8020e92:	1cc5      	adds	r5, r0, #3
 8020e94:	439d      	bics	r5, r3
 8020e96:	42a8      	cmp	r0, r5
 8020e98:	d0f8      	beq.n	8020e8c <sbrk_aligned+0x24>
 8020e9a:	1a29      	subs	r1, r5, r0
 8020e9c:	0020      	movs	r0, r4
 8020e9e:	f001 f975 	bl	802218c <_sbrk_r>
 8020ea2:	3001      	adds	r0, #1
 8020ea4:	d1f2      	bne.n	8020e8c <sbrk_aligned+0x24>
 8020ea6:	e7ef      	b.n	8020e88 <sbrk_aligned+0x20>
 8020ea8:	200038fc 	.word	0x200038fc

08020eac <_malloc_r>:
 8020eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020eae:	2203      	movs	r2, #3
 8020eb0:	1ccb      	adds	r3, r1, #3
 8020eb2:	4393      	bics	r3, r2
 8020eb4:	3308      	adds	r3, #8
 8020eb6:	0005      	movs	r5, r0
 8020eb8:	001f      	movs	r7, r3
 8020eba:	2b0c      	cmp	r3, #12
 8020ebc:	d234      	bcs.n	8020f28 <_malloc_r+0x7c>
 8020ebe:	270c      	movs	r7, #12
 8020ec0:	42b9      	cmp	r1, r7
 8020ec2:	d833      	bhi.n	8020f2c <_malloc_r+0x80>
 8020ec4:	0028      	movs	r0, r5
 8020ec6:	f000 f883 	bl	8020fd0 <__malloc_lock>
 8020eca:	4e37      	ldr	r6, [pc, #220]	@ (8020fa8 <_malloc_r+0xfc>)
 8020ecc:	6833      	ldr	r3, [r6, #0]
 8020ece:	001c      	movs	r4, r3
 8020ed0:	2c00      	cmp	r4, #0
 8020ed2:	d12f      	bne.n	8020f34 <_malloc_r+0x88>
 8020ed4:	0039      	movs	r1, r7
 8020ed6:	0028      	movs	r0, r5
 8020ed8:	f7ff ffc6 	bl	8020e68 <sbrk_aligned>
 8020edc:	0004      	movs	r4, r0
 8020ede:	1c43      	adds	r3, r0, #1
 8020ee0:	d15f      	bne.n	8020fa2 <_malloc_r+0xf6>
 8020ee2:	6834      	ldr	r4, [r6, #0]
 8020ee4:	9400      	str	r4, [sp, #0]
 8020ee6:	9b00      	ldr	r3, [sp, #0]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d14a      	bne.n	8020f82 <_malloc_r+0xd6>
 8020eec:	2c00      	cmp	r4, #0
 8020eee:	d052      	beq.n	8020f96 <_malloc_r+0xea>
 8020ef0:	6823      	ldr	r3, [r4, #0]
 8020ef2:	0028      	movs	r0, r5
 8020ef4:	18e3      	adds	r3, r4, r3
 8020ef6:	9900      	ldr	r1, [sp, #0]
 8020ef8:	9301      	str	r3, [sp, #4]
 8020efa:	f001 f947 	bl	802218c <_sbrk_r>
 8020efe:	9b01      	ldr	r3, [sp, #4]
 8020f00:	4283      	cmp	r3, r0
 8020f02:	d148      	bne.n	8020f96 <_malloc_r+0xea>
 8020f04:	6823      	ldr	r3, [r4, #0]
 8020f06:	0028      	movs	r0, r5
 8020f08:	1aff      	subs	r7, r7, r3
 8020f0a:	0039      	movs	r1, r7
 8020f0c:	f7ff ffac 	bl	8020e68 <sbrk_aligned>
 8020f10:	3001      	adds	r0, #1
 8020f12:	d040      	beq.n	8020f96 <_malloc_r+0xea>
 8020f14:	6823      	ldr	r3, [r4, #0]
 8020f16:	19db      	adds	r3, r3, r7
 8020f18:	6023      	str	r3, [r4, #0]
 8020f1a:	6833      	ldr	r3, [r6, #0]
 8020f1c:	685a      	ldr	r2, [r3, #4]
 8020f1e:	2a00      	cmp	r2, #0
 8020f20:	d133      	bne.n	8020f8a <_malloc_r+0xde>
 8020f22:	9b00      	ldr	r3, [sp, #0]
 8020f24:	6033      	str	r3, [r6, #0]
 8020f26:	e019      	b.n	8020f5c <_malloc_r+0xb0>
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	dac9      	bge.n	8020ec0 <_malloc_r+0x14>
 8020f2c:	230c      	movs	r3, #12
 8020f2e:	602b      	str	r3, [r5, #0]
 8020f30:	2000      	movs	r0, #0
 8020f32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020f34:	6821      	ldr	r1, [r4, #0]
 8020f36:	1bc9      	subs	r1, r1, r7
 8020f38:	d420      	bmi.n	8020f7c <_malloc_r+0xd0>
 8020f3a:	290b      	cmp	r1, #11
 8020f3c:	d90a      	bls.n	8020f54 <_malloc_r+0xa8>
 8020f3e:	19e2      	adds	r2, r4, r7
 8020f40:	6027      	str	r7, [r4, #0]
 8020f42:	42a3      	cmp	r3, r4
 8020f44:	d104      	bne.n	8020f50 <_malloc_r+0xa4>
 8020f46:	6032      	str	r2, [r6, #0]
 8020f48:	6863      	ldr	r3, [r4, #4]
 8020f4a:	6011      	str	r1, [r2, #0]
 8020f4c:	6053      	str	r3, [r2, #4]
 8020f4e:	e005      	b.n	8020f5c <_malloc_r+0xb0>
 8020f50:	605a      	str	r2, [r3, #4]
 8020f52:	e7f9      	b.n	8020f48 <_malloc_r+0x9c>
 8020f54:	6862      	ldr	r2, [r4, #4]
 8020f56:	42a3      	cmp	r3, r4
 8020f58:	d10e      	bne.n	8020f78 <_malloc_r+0xcc>
 8020f5a:	6032      	str	r2, [r6, #0]
 8020f5c:	0028      	movs	r0, r5
 8020f5e:	f000 f83f 	bl	8020fe0 <__malloc_unlock>
 8020f62:	0020      	movs	r0, r4
 8020f64:	2207      	movs	r2, #7
 8020f66:	300b      	adds	r0, #11
 8020f68:	1d23      	adds	r3, r4, #4
 8020f6a:	4390      	bics	r0, r2
 8020f6c:	1ac2      	subs	r2, r0, r3
 8020f6e:	4298      	cmp	r0, r3
 8020f70:	d0df      	beq.n	8020f32 <_malloc_r+0x86>
 8020f72:	1a1b      	subs	r3, r3, r0
 8020f74:	50a3      	str	r3, [r4, r2]
 8020f76:	e7dc      	b.n	8020f32 <_malloc_r+0x86>
 8020f78:	605a      	str	r2, [r3, #4]
 8020f7a:	e7ef      	b.n	8020f5c <_malloc_r+0xb0>
 8020f7c:	0023      	movs	r3, r4
 8020f7e:	6864      	ldr	r4, [r4, #4]
 8020f80:	e7a6      	b.n	8020ed0 <_malloc_r+0x24>
 8020f82:	9c00      	ldr	r4, [sp, #0]
 8020f84:	6863      	ldr	r3, [r4, #4]
 8020f86:	9300      	str	r3, [sp, #0]
 8020f88:	e7ad      	b.n	8020ee6 <_malloc_r+0x3a>
 8020f8a:	001a      	movs	r2, r3
 8020f8c:	685b      	ldr	r3, [r3, #4]
 8020f8e:	42a3      	cmp	r3, r4
 8020f90:	d1fb      	bne.n	8020f8a <_malloc_r+0xde>
 8020f92:	2300      	movs	r3, #0
 8020f94:	e7da      	b.n	8020f4c <_malloc_r+0xa0>
 8020f96:	230c      	movs	r3, #12
 8020f98:	0028      	movs	r0, r5
 8020f9a:	602b      	str	r3, [r5, #0]
 8020f9c:	f000 f820 	bl	8020fe0 <__malloc_unlock>
 8020fa0:	e7c6      	b.n	8020f30 <_malloc_r+0x84>
 8020fa2:	6007      	str	r7, [r0, #0]
 8020fa4:	e7da      	b.n	8020f5c <_malloc_r+0xb0>
 8020fa6:	46c0      	nop			@ (mov r8, r8)
 8020fa8:	20003900 	.word	0x20003900

08020fac <__ascii_mbtowc>:
 8020fac:	b082      	sub	sp, #8
 8020fae:	2900      	cmp	r1, #0
 8020fb0:	d100      	bne.n	8020fb4 <__ascii_mbtowc+0x8>
 8020fb2:	a901      	add	r1, sp, #4
 8020fb4:	1e10      	subs	r0, r2, #0
 8020fb6:	d006      	beq.n	8020fc6 <__ascii_mbtowc+0x1a>
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d006      	beq.n	8020fca <__ascii_mbtowc+0x1e>
 8020fbc:	7813      	ldrb	r3, [r2, #0]
 8020fbe:	600b      	str	r3, [r1, #0]
 8020fc0:	7810      	ldrb	r0, [r2, #0]
 8020fc2:	1e43      	subs	r3, r0, #1
 8020fc4:	4198      	sbcs	r0, r3
 8020fc6:	b002      	add	sp, #8
 8020fc8:	4770      	bx	lr
 8020fca:	2002      	movs	r0, #2
 8020fcc:	4240      	negs	r0, r0
 8020fce:	e7fa      	b.n	8020fc6 <__ascii_mbtowc+0x1a>

08020fd0 <__malloc_lock>:
 8020fd0:	b510      	push	{r4, lr}
 8020fd2:	4802      	ldr	r0, [pc, #8]	@ (8020fdc <__malloc_lock+0xc>)
 8020fd4:	f7fe fcfb 	bl	801f9ce <__retarget_lock_acquire_recursive>
 8020fd8:	bd10      	pop	{r4, pc}
 8020fda:	46c0      	nop			@ (mov r8, r8)
 8020fdc:	200038f8 	.word	0x200038f8

08020fe0 <__malloc_unlock>:
 8020fe0:	b510      	push	{r4, lr}
 8020fe2:	4802      	ldr	r0, [pc, #8]	@ (8020fec <__malloc_unlock+0xc>)
 8020fe4:	f7fe fcf4 	bl	801f9d0 <__retarget_lock_release_recursive>
 8020fe8:	bd10      	pop	{r4, pc}
 8020fea:	46c0      	nop			@ (mov r8, r8)
 8020fec:	200038f8 	.word	0x200038f8

08020ff0 <_Balloc>:
 8020ff0:	b570      	push	{r4, r5, r6, lr}
 8020ff2:	69c5      	ldr	r5, [r0, #28]
 8020ff4:	0006      	movs	r6, r0
 8020ff6:	000c      	movs	r4, r1
 8020ff8:	2d00      	cmp	r5, #0
 8020ffa:	d10e      	bne.n	802101a <_Balloc+0x2a>
 8020ffc:	2010      	movs	r0, #16
 8020ffe:	f7ff ff29 	bl	8020e54 <malloc>
 8021002:	1e02      	subs	r2, r0, #0
 8021004:	61f0      	str	r0, [r6, #28]
 8021006:	d104      	bne.n	8021012 <_Balloc+0x22>
 8021008:	216b      	movs	r1, #107	@ 0x6b
 802100a:	4b19      	ldr	r3, [pc, #100]	@ (8021070 <_Balloc+0x80>)
 802100c:	4819      	ldr	r0, [pc, #100]	@ (8021074 <_Balloc+0x84>)
 802100e:	f001 f8cf 	bl	80221b0 <__assert_func>
 8021012:	6045      	str	r5, [r0, #4]
 8021014:	6085      	str	r5, [r0, #8]
 8021016:	6005      	str	r5, [r0, #0]
 8021018:	60c5      	str	r5, [r0, #12]
 802101a:	69f5      	ldr	r5, [r6, #28]
 802101c:	68eb      	ldr	r3, [r5, #12]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d013      	beq.n	802104a <_Balloc+0x5a>
 8021022:	69f3      	ldr	r3, [r6, #28]
 8021024:	00a2      	lsls	r2, r4, #2
 8021026:	68db      	ldr	r3, [r3, #12]
 8021028:	189b      	adds	r3, r3, r2
 802102a:	6818      	ldr	r0, [r3, #0]
 802102c:	2800      	cmp	r0, #0
 802102e:	d118      	bne.n	8021062 <_Balloc+0x72>
 8021030:	2101      	movs	r1, #1
 8021032:	000d      	movs	r5, r1
 8021034:	40a5      	lsls	r5, r4
 8021036:	1d6a      	adds	r2, r5, #5
 8021038:	0030      	movs	r0, r6
 802103a:	0092      	lsls	r2, r2, #2
 802103c:	f001 f8d6 	bl	80221ec <_calloc_r>
 8021040:	2800      	cmp	r0, #0
 8021042:	d00c      	beq.n	802105e <_Balloc+0x6e>
 8021044:	6044      	str	r4, [r0, #4]
 8021046:	6085      	str	r5, [r0, #8]
 8021048:	e00d      	b.n	8021066 <_Balloc+0x76>
 802104a:	2221      	movs	r2, #33	@ 0x21
 802104c:	2104      	movs	r1, #4
 802104e:	0030      	movs	r0, r6
 8021050:	f001 f8cc 	bl	80221ec <_calloc_r>
 8021054:	69f3      	ldr	r3, [r6, #28]
 8021056:	60e8      	str	r0, [r5, #12]
 8021058:	68db      	ldr	r3, [r3, #12]
 802105a:	2b00      	cmp	r3, #0
 802105c:	d1e1      	bne.n	8021022 <_Balloc+0x32>
 802105e:	2000      	movs	r0, #0
 8021060:	bd70      	pop	{r4, r5, r6, pc}
 8021062:	6802      	ldr	r2, [r0, #0]
 8021064:	601a      	str	r2, [r3, #0]
 8021066:	2300      	movs	r3, #0
 8021068:	6103      	str	r3, [r0, #16]
 802106a:	60c3      	str	r3, [r0, #12]
 802106c:	e7f8      	b.n	8021060 <_Balloc+0x70>
 802106e:	46c0      	nop			@ (mov r8, r8)
 8021070:	08025042 	.word	0x08025042
 8021074:	08025122 	.word	0x08025122

08021078 <_Bfree>:
 8021078:	b570      	push	{r4, r5, r6, lr}
 802107a:	69c6      	ldr	r6, [r0, #28]
 802107c:	0005      	movs	r5, r0
 802107e:	000c      	movs	r4, r1
 8021080:	2e00      	cmp	r6, #0
 8021082:	d10e      	bne.n	80210a2 <_Bfree+0x2a>
 8021084:	2010      	movs	r0, #16
 8021086:	f7ff fee5 	bl	8020e54 <malloc>
 802108a:	1e02      	subs	r2, r0, #0
 802108c:	61e8      	str	r0, [r5, #28]
 802108e:	d104      	bne.n	802109a <_Bfree+0x22>
 8021090:	218f      	movs	r1, #143	@ 0x8f
 8021092:	4b09      	ldr	r3, [pc, #36]	@ (80210b8 <_Bfree+0x40>)
 8021094:	4809      	ldr	r0, [pc, #36]	@ (80210bc <_Bfree+0x44>)
 8021096:	f001 f88b 	bl	80221b0 <__assert_func>
 802109a:	6046      	str	r6, [r0, #4]
 802109c:	6086      	str	r6, [r0, #8]
 802109e:	6006      	str	r6, [r0, #0]
 80210a0:	60c6      	str	r6, [r0, #12]
 80210a2:	2c00      	cmp	r4, #0
 80210a4:	d007      	beq.n	80210b6 <_Bfree+0x3e>
 80210a6:	69eb      	ldr	r3, [r5, #28]
 80210a8:	6862      	ldr	r2, [r4, #4]
 80210aa:	68db      	ldr	r3, [r3, #12]
 80210ac:	0092      	lsls	r2, r2, #2
 80210ae:	189b      	adds	r3, r3, r2
 80210b0:	681a      	ldr	r2, [r3, #0]
 80210b2:	6022      	str	r2, [r4, #0]
 80210b4:	601c      	str	r4, [r3, #0]
 80210b6:	bd70      	pop	{r4, r5, r6, pc}
 80210b8:	08025042 	.word	0x08025042
 80210bc:	08025122 	.word	0x08025122

080210c0 <__multadd>:
 80210c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80210c2:	000f      	movs	r7, r1
 80210c4:	9001      	str	r0, [sp, #4]
 80210c6:	000c      	movs	r4, r1
 80210c8:	001e      	movs	r6, r3
 80210ca:	2000      	movs	r0, #0
 80210cc:	690d      	ldr	r5, [r1, #16]
 80210ce:	3714      	adds	r7, #20
 80210d0:	683b      	ldr	r3, [r7, #0]
 80210d2:	3001      	adds	r0, #1
 80210d4:	b299      	uxth	r1, r3
 80210d6:	4351      	muls	r1, r2
 80210d8:	0c1b      	lsrs	r3, r3, #16
 80210da:	4353      	muls	r3, r2
 80210dc:	1989      	adds	r1, r1, r6
 80210de:	0c0e      	lsrs	r6, r1, #16
 80210e0:	199b      	adds	r3, r3, r6
 80210e2:	0c1e      	lsrs	r6, r3, #16
 80210e4:	b289      	uxth	r1, r1
 80210e6:	041b      	lsls	r3, r3, #16
 80210e8:	185b      	adds	r3, r3, r1
 80210ea:	c708      	stmia	r7!, {r3}
 80210ec:	4285      	cmp	r5, r0
 80210ee:	dcef      	bgt.n	80210d0 <__multadd+0x10>
 80210f0:	2e00      	cmp	r6, #0
 80210f2:	d022      	beq.n	802113a <__multadd+0x7a>
 80210f4:	68a3      	ldr	r3, [r4, #8]
 80210f6:	42ab      	cmp	r3, r5
 80210f8:	dc19      	bgt.n	802112e <__multadd+0x6e>
 80210fa:	6861      	ldr	r1, [r4, #4]
 80210fc:	9801      	ldr	r0, [sp, #4]
 80210fe:	3101      	adds	r1, #1
 8021100:	f7ff ff76 	bl	8020ff0 <_Balloc>
 8021104:	1e07      	subs	r7, r0, #0
 8021106:	d105      	bne.n	8021114 <__multadd+0x54>
 8021108:	003a      	movs	r2, r7
 802110a:	21ba      	movs	r1, #186	@ 0xba
 802110c:	4b0c      	ldr	r3, [pc, #48]	@ (8021140 <__multadd+0x80>)
 802110e:	480d      	ldr	r0, [pc, #52]	@ (8021144 <__multadd+0x84>)
 8021110:	f001 f84e 	bl	80221b0 <__assert_func>
 8021114:	0021      	movs	r1, r4
 8021116:	6922      	ldr	r2, [r4, #16]
 8021118:	310c      	adds	r1, #12
 802111a:	3202      	adds	r2, #2
 802111c:	0092      	lsls	r2, r2, #2
 802111e:	300c      	adds	r0, #12
 8021120:	f7fe fc62 	bl	801f9e8 <memcpy>
 8021124:	0021      	movs	r1, r4
 8021126:	9801      	ldr	r0, [sp, #4]
 8021128:	f7ff ffa6 	bl	8021078 <_Bfree>
 802112c:	003c      	movs	r4, r7
 802112e:	1d2b      	adds	r3, r5, #4
 8021130:	009b      	lsls	r3, r3, #2
 8021132:	18e3      	adds	r3, r4, r3
 8021134:	3501      	adds	r5, #1
 8021136:	605e      	str	r6, [r3, #4]
 8021138:	6125      	str	r5, [r4, #16]
 802113a:	0020      	movs	r0, r4
 802113c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802113e:	46c0      	nop			@ (mov r8, r8)
 8021140:	080250b1 	.word	0x080250b1
 8021144:	08025122 	.word	0x08025122

08021148 <__s2b>:
 8021148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802114a:	0007      	movs	r7, r0
 802114c:	0018      	movs	r0, r3
 802114e:	000c      	movs	r4, r1
 8021150:	3008      	adds	r0, #8
 8021152:	2109      	movs	r1, #9
 8021154:	9301      	str	r3, [sp, #4]
 8021156:	0015      	movs	r5, r2
 8021158:	f7df f8ae 	bl	80002b8 <__divsi3>
 802115c:	2301      	movs	r3, #1
 802115e:	2100      	movs	r1, #0
 8021160:	4283      	cmp	r3, r0
 8021162:	db0a      	blt.n	802117a <__s2b+0x32>
 8021164:	0038      	movs	r0, r7
 8021166:	f7ff ff43 	bl	8020ff0 <_Balloc>
 802116a:	1e01      	subs	r1, r0, #0
 802116c:	d108      	bne.n	8021180 <__s2b+0x38>
 802116e:	000a      	movs	r2, r1
 8021170:	4b19      	ldr	r3, [pc, #100]	@ (80211d8 <__s2b+0x90>)
 8021172:	481a      	ldr	r0, [pc, #104]	@ (80211dc <__s2b+0x94>)
 8021174:	31d3      	adds	r1, #211	@ 0xd3
 8021176:	f001 f81b 	bl	80221b0 <__assert_func>
 802117a:	005b      	lsls	r3, r3, #1
 802117c:	3101      	adds	r1, #1
 802117e:	e7ef      	b.n	8021160 <__s2b+0x18>
 8021180:	9b08      	ldr	r3, [sp, #32]
 8021182:	6143      	str	r3, [r0, #20]
 8021184:	2301      	movs	r3, #1
 8021186:	6103      	str	r3, [r0, #16]
 8021188:	2d09      	cmp	r5, #9
 802118a:	dd18      	ble.n	80211be <__s2b+0x76>
 802118c:	0023      	movs	r3, r4
 802118e:	3309      	adds	r3, #9
 8021190:	001e      	movs	r6, r3
 8021192:	9300      	str	r3, [sp, #0]
 8021194:	1964      	adds	r4, r4, r5
 8021196:	7833      	ldrb	r3, [r6, #0]
 8021198:	220a      	movs	r2, #10
 802119a:	0038      	movs	r0, r7
 802119c:	3b30      	subs	r3, #48	@ 0x30
 802119e:	f7ff ff8f 	bl	80210c0 <__multadd>
 80211a2:	3601      	adds	r6, #1
 80211a4:	0001      	movs	r1, r0
 80211a6:	42a6      	cmp	r6, r4
 80211a8:	d1f5      	bne.n	8021196 <__s2b+0x4e>
 80211aa:	002c      	movs	r4, r5
 80211ac:	9b00      	ldr	r3, [sp, #0]
 80211ae:	3c08      	subs	r4, #8
 80211b0:	191c      	adds	r4, r3, r4
 80211b2:	002e      	movs	r6, r5
 80211b4:	9b01      	ldr	r3, [sp, #4]
 80211b6:	429e      	cmp	r6, r3
 80211b8:	db04      	blt.n	80211c4 <__s2b+0x7c>
 80211ba:	0008      	movs	r0, r1
 80211bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80211be:	2509      	movs	r5, #9
 80211c0:	340a      	adds	r4, #10
 80211c2:	e7f6      	b.n	80211b2 <__s2b+0x6a>
 80211c4:	1b63      	subs	r3, r4, r5
 80211c6:	5d9b      	ldrb	r3, [r3, r6]
 80211c8:	220a      	movs	r2, #10
 80211ca:	0038      	movs	r0, r7
 80211cc:	3b30      	subs	r3, #48	@ 0x30
 80211ce:	f7ff ff77 	bl	80210c0 <__multadd>
 80211d2:	3601      	adds	r6, #1
 80211d4:	0001      	movs	r1, r0
 80211d6:	e7ed      	b.n	80211b4 <__s2b+0x6c>
 80211d8:	080250b1 	.word	0x080250b1
 80211dc:	08025122 	.word	0x08025122

080211e0 <__hi0bits>:
 80211e0:	2280      	movs	r2, #128	@ 0x80
 80211e2:	0003      	movs	r3, r0
 80211e4:	0252      	lsls	r2, r2, #9
 80211e6:	2000      	movs	r0, #0
 80211e8:	4293      	cmp	r3, r2
 80211ea:	d201      	bcs.n	80211f0 <__hi0bits+0x10>
 80211ec:	041b      	lsls	r3, r3, #16
 80211ee:	3010      	adds	r0, #16
 80211f0:	2280      	movs	r2, #128	@ 0x80
 80211f2:	0452      	lsls	r2, r2, #17
 80211f4:	4293      	cmp	r3, r2
 80211f6:	d201      	bcs.n	80211fc <__hi0bits+0x1c>
 80211f8:	3008      	adds	r0, #8
 80211fa:	021b      	lsls	r3, r3, #8
 80211fc:	2280      	movs	r2, #128	@ 0x80
 80211fe:	0552      	lsls	r2, r2, #21
 8021200:	4293      	cmp	r3, r2
 8021202:	d201      	bcs.n	8021208 <__hi0bits+0x28>
 8021204:	3004      	adds	r0, #4
 8021206:	011b      	lsls	r3, r3, #4
 8021208:	2280      	movs	r2, #128	@ 0x80
 802120a:	05d2      	lsls	r2, r2, #23
 802120c:	4293      	cmp	r3, r2
 802120e:	d201      	bcs.n	8021214 <__hi0bits+0x34>
 8021210:	3002      	adds	r0, #2
 8021212:	009b      	lsls	r3, r3, #2
 8021214:	2b00      	cmp	r3, #0
 8021216:	db03      	blt.n	8021220 <__hi0bits+0x40>
 8021218:	3001      	adds	r0, #1
 802121a:	4213      	tst	r3, r2
 802121c:	d100      	bne.n	8021220 <__hi0bits+0x40>
 802121e:	2020      	movs	r0, #32
 8021220:	4770      	bx	lr

08021222 <__lo0bits>:
 8021222:	6803      	ldr	r3, [r0, #0]
 8021224:	0001      	movs	r1, r0
 8021226:	2207      	movs	r2, #7
 8021228:	0018      	movs	r0, r3
 802122a:	4010      	ands	r0, r2
 802122c:	4213      	tst	r3, r2
 802122e:	d00d      	beq.n	802124c <__lo0bits+0x2a>
 8021230:	3a06      	subs	r2, #6
 8021232:	2000      	movs	r0, #0
 8021234:	4213      	tst	r3, r2
 8021236:	d105      	bne.n	8021244 <__lo0bits+0x22>
 8021238:	3002      	adds	r0, #2
 802123a:	4203      	tst	r3, r0
 802123c:	d003      	beq.n	8021246 <__lo0bits+0x24>
 802123e:	40d3      	lsrs	r3, r2
 8021240:	0010      	movs	r0, r2
 8021242:	600b      	str	r3, [r1, #0]
 8021244:	4770      	bx	lr
 8021246:	089b      	lsrs	r3, r3, #2
 8021248:	600b      	str	r3, [r1, #0]
 802124a:	e7fb      	b.n	8021244 <__lo0bits+0x22>
 802124c:	b29a      	uxth	r2, r3
 802124e:	2a00      	cmp	r2, #0
 8021250:	d101      	bne.n	8021256 <__lo0bits+0x34>
 8021252:	2010      	movs	r0, #16
 8021254:	0c1b      	lsrs	r3, r3, #16
 8021256:	b2da      	uxtb	r2, r3
 8021258:	2a00      	cmp	r2, #0
 802125a:	d101      	bne.n	8021260 <__lo0bits+0x3e>
 802125c:	3008      	adds	r0, #8
 802125e:	0a1b      	lsrs	r3, r3, #8
 8021260:	071a      	lsls	r2, r3, #28
 8021262:	d101      	bne.n	8021268 <__lo0bits+0x46>
 8021264:	3004      	adds	r0, #4
 8021266:	091b      	lsrs	r3, r3, #4
 8021268:	079a      	lsls	r2, r3, #30
 802126a:	d101      	bne.n	8021270 <__lo0bits+0x4e>
 802126c:	3002      	adds	r0, #2
 802126e:	089b      	lsrs	r3, r3, #2
 8021270:	07da      	lsls	r2, r3, #31
 8021272:	d4e9      	bmi.n	8021248 <__lo0bits+0x26>
 8021274:	3001      	adds	r0, #1
 8021276:	085b      	lsrs	r3, r3, #1
 8021278:	d1e6      	bne.n	8021248 <__lo0bits+0x26>
 802127a:	2020      	movs	r0, #32
 802127c:	e7e2      	b.n	8021244 <__lo0bits+0x22>
	...

08021280 <__i2b>:
 8021280:	b510      	push	{r4, lr}
 8021282:	000c      	movs	r4, r1
 8021284:	2101      	movs	r1, #1
 8021286:	f7ff feb3 	bl	8020ff0 <_Balloc>
 802128a:	2800      	cmp	r0, #0
 802128c:	d107      	bne.n	802129e <__i2b+0x1e>
 802128e:	2146      	movs	r1, #70	@ 0x46
 8021290:	4c05      	ldr	r4, [pc, #20]	@ (80212a8 <__i2b+0x28>)
 8021292:	0002      	movs	r2, r0
 8021294:	4b05      	ldr	r3, [pc, #20]	@ (80212ac <__i2b+0x2c>)
 8021296:	0020      	movs	r0, r4
 8021298:	31ff      	adds	r1, #255	@ 0xff
 802129a:	f000 ff89 	bl	80221b0 <__assert_func>
 802129e:	2301      	movs	r3, #1
 80212a0:	6144      	str	r4, [r0, #20]
 80212a2:	6103      	str	r3, [r0, #16]
 80212a4:	bd10      	pop	{r4, pc}
 80212a6:	46c0      	nop			@ (mov r8, r8)
 80212a8:	08025122 	.word	0x08025122
 80212ac:	080250b1 	.word	0x080250b1

080212b0 <__multiply>:
 80212b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80212b2:	0014      	movs	r4, r2
 80212b4:	690a      	ldr	r2, [r1, #16]
 80212b6:	6923      	ldr	r3, [r4, #16]
 80212b8:	000d      	movs	r5, r1
 80212ba:	b08b      	sub	sp, #44	@ 0x2c
 80212bc:	429a      	cmp	r2, r3
 80212be:	db02      	blt.n	80212c6 <__multiply+0x16>
 80212c0:	0023      	movs	r3, r4
 80212c2:	000c      	movs	r4, r1
 80212c4:	001d      	movs	r5, r3
 80212c6:	6927      	ldr	r7, [r4, #16]
 80212c8:	692e      	ldr	r6, [r5, #16]
 80212ca:	6861      	ldr	r1, [r4, #4]
 80212cc:	19bb      	adds	r3, r7, r6
 80212ce:	9303      	str	r3, [sp, #12]
 80212d0:	68a3      	ldr	r3, [r4, #8]
 80212d2:	19ba      	adds	r2, r7, r6
 80212d4:	4293      	cmp	r3, r2
 80212d6:	da00      	bge.n	80212da <__multiply+0x2a>
 80212d8:	3101      	adds	r1, #1
 80212da:	f7ff fe89 	bl	8020ff0 <_Balloc>
 80212de:	9002      	str	r0, [sp, #8]
 80212e0:	2800      	cmp	r0, #0
 80212e2:	d106      	bne.n	80212f2 <__multiply+0x42>
 80212e4:	21b1      	movs	r1, #177	@ 0xb1
 80212e6:	4b49      	ldr	r3, [pc, #292]	@ (802140c <__multiply+0x15c>)
 80212e8:	4849      	ldr	r0, [pc, #292]	@ (8021410 <__multiply+0x160>)
 80212ea:	9a02      	ldr	r2, [sp, #8]
 80212ec:	0049      	lsls	r1, r1, #1
 80212ee:	f000 ff5f 	bl	80221b0 <__assert_func>
 80212f2:	9b02      	ldr	r3, [sp, #8]
 80212f4:	2200      	movs	r2, #0
 80212f6:	3314      	adds	r3, #20
 80212f8:	469c      	mov	ip, r3
 80212fa:	19bb      	adds	r3, r7, r6
 80212fc:	009b      	lsls	r3, r3, #2
 80212fe:	4463      	add	r3, ip
 8021300:	9304      	str	r3, [sp, #16]
 8021302:	4663      	mov	r3, ip
 8021304:	9904      	ldr	r1, [sp, #16]
 8021306:	428b      	cmp	r3, r1
 8021308:	d32a      	bcc.n	8021360 <__multiply+0xb0>
 802130a:	0023      	movs	r3, r4
 802130c:	00bf      	lsls	r7, r7, #2
 802130e:	3314      	adds	r3, #20
 8021310:	3514      	adds	r5, #20
 8021312:	9308      	str	r3, [sp, #32]
 8021314:	00b6      	lsls	r6, r6, #2
 8021316:	19db      	adds	r3, r3, r7
 8021318:	9305      	str	r3, [sp, #20]
 802131a:	19ab      	adds	r3, r5, r6
 802131c:	9309      	str	r3, [sp, #36]	@ 0x24
 802131e:	2304      	movs	r3, #4
 8021320:	9306      	str	r3, [sp, #24]
 8021322:	0023      	movs	r3, r4
 8021324:	9a05      	ldr	r2, [sp, #20]
 8021326:	3315      	adds	r3, #21
 8021328:	9501      	str	r5, [sp, #4]
 802132a:	429a      	cmp	r2, r3
 802132c:	d305      	bcc.n	802133a <__multiply+0x8a>
 802132e:	1b13      	subs	r3, r2, r4
 8021330:	3b15      	subs	r3, #21
 8021332:	089b      	lsrs	r3, r3, #2
 8021334:	3301      	adds	r3, #1
 8021336:	009b      	lsls	r3, r3, #2
 8021338:	9306      	str	r3, [sp, #24]
 802133a:	9b01      	ldr	r3, [sp, #4]
 802133c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802133e:	4293      	cmp	r3, r2
 8021340:	d310      	bcc.n	8021364 <__multiply+0xb4>
 8021342:	9b03      	ldr	r3, [sp, #12]
 8021344:	2b00      	cmp	r3, #0
 8021346:	dd05      	ble.n	8021354 <__multiply+0xa4>
 8021348:	9b04      	ldr	r3, [sp, #16]
 802134a:	3b04      	subs	r3, #4
 802134c:	9304      	str	r3, [sp, #16]
 802134e:	681b      	ldr	r3, [r3, #0]
 8021350:	2b00      	cmp	r3, #0
 8021352:	d056      	beq.n	8021402 <__multiply+0x152>
 8021354:	9b02      	ldr	r3, [sp, #8]
 8021356:	9a03      	ldr	r2, [sp, #12]
 8021358:	0018      	movs	r0, r3
 802135a:	611a      	str	r2, [r3, #16]
 802135c:	b00b      	add	sp, #44	@ 0x2c
 802135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021360:	c304      	stmia	r3!, {r2}
 8021362:	e7cf      	b.n	8021304 <__multiply+0x54>
 8021364:	9b01      	ldr	r3, [sp, #4]
 8021366:	6818      	ldr	r0, [r3, #0]
 8021368:	b280      	uxth	r0, r0
 802136a:	2800      	cmp	r0, #0
 802136c:	d01e      	beq.n	80213ac <__multiply+0xfc>
 802136e:	4667      	mov	r7, ip
 8021370:	2500      	movs	r5, #0
 8021372:	9e08      	ldr	r6, [sp, #32]
 8021374:	ce02      	ldmia	r6!, {r1}
 8021376:	683b      	ldr	r3, [r7, #0]
 8021378:	9307      	str	r3, [sp, #28]
 802137a:	b28b      	uxth	r3, r1
 802137c:	4343      	muls	r3, r0
 802137e:	001a      	movs	r2, r3
 8021380:	466b      	mov	r3, sp
 8021382:	0c09      	lsrs	r1, r1, #16
 8021384:	8b9b      	ldrh	r3, [r3, #28]
 8021386:	4341      	muls	r1, r0
 8021388:	18d3      	adds	r3, r2, r3
 802138a:	9a07      	ldr	r2, [sp, #28]
 802138c:	195b      	adds	r3, r3, r5
 802138e:	0c12      	lsrs	r2, r2, #16
 8021390:	1889      	adds	r1, r1, r2
 8021392:	0c1a      	lsrs	r2, r3, #16
 8021394:	188a      	adds	r2, r1, r2
 8021396:	b29b      	uxth	r3, r3
 8021398:	0c15      	lsrs	r5, r2, #16
 802139a:	0412      	lsls	r2, r2, #16
 802139c:	431a      	orrs	r2, r3
 802139e:	9b05      	ldr	r3, [sp, #20]
 80213a0:	c704      	stmia	r7!, {r2}
 80213a2:	42b3      	cmp	r3, r6
 80213a4:	d8e6      	bhi.n	8021374 <__multiply+0xc4>
 80213a6:	4663      	mov	r3, ip
 80213a8:	9a06      	ldr	r2, [sp, #24]
 80213aa:	509d      	str	r5, [r3, r2]
 80213ac:	9b01      	ldr	r3, [sp, #4]
 80213ae:	6818      	ldr	r0, [r3, #0]
 80213b0:	0c00      	lsrs	r0, r0, #16
 80213b2:	d020      	beq.n	80213f6 <__multiply+0x146>
 80213b4:	4663      	mov	r3, ip
 80213b6:	0025      	movs	r5, r4
 80213b8:	4661      	mov	r1, ip
 80213ba:	2700      	movs	r7, #0
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	3514      	adds	r5, #20
 80213c0:	682a      	ldr	r2, [r5, #0]
 80213c2:	680e      	ldr	r6, [r1, #0]
 80213c4:	b292      	uxth	r2, r2
 80213c6:	4342      	muls	r2, r0
 80213c8:	0c36      	lsrs	r6, r6, #16
 80213ca:	1992      	adds	r2, r2, r6
 80213cc:	19d2      	adds	r2, r2, r7
 80213ce:	0416      	lsls	r6, r2, #16
 80213d0:	b29b      	uxth	r3, r3
 80213d2:	431e      	orrs	r6, r3
 80213d4:	600e      	str	r6, [r1, #0]
 80213d6:	cd40      	ldmia	r5!, {r6}
 80213d8:	684b      	ldr	r3, [r1, #4]
 80213da:	0c36      	lsrs	r6, r6, #16
 80213dc:	4346      	muls	r6, r0
 80213de:	b29b      	uxth	r3, r3
 80213e0:	0c12      	lsrs	r2, r2, #16
 80213e2:	18f3      	adds	r3, r6, r3
 80213e4:	189b      	adds	r3, r3, r2
 80213e6:	9a05      	ldr	r2, [sp, #20]
 80213e8:	0c1f      	lsrs	r7, r3, #16
 80213ea:	3104      	adds	r1, #4
 80213ec:	42aa      	cmp	r2, r5
 80213ee:	d8e7      	bhi.n	80213c0 <__multiply+0x110>
 80213f0:	4662      	mov	r2, ip
 80213f2:	9906      	ldr	r1, [sp, #24]
 80213f4:	5053      	str	r3, [r2, r1]
 80213f6:	9b01      	ldr	r3, [sp, #4]
 80213f8:	3304      	adds	r3, #4
 80213fa:	9301      	str	r3, [sp, #4]
 80213fc:	2304      	movs	r3, #4
 80213fe:	449c      	add	ip, r3
 8021400:	e79b      	b.n	802133a <__multiply+0x8a>
 8021402:	9b03      	ldr	r3, [sp, #12]
 8021404:	3b01      	subs	r3, #1
 8021406:	9303      	str	r3, [sp, #12]
 8021408:	e79b      	b.n	8021342 <__multiply+0x92>
 802140a:	46c0      	nop			@ (mov r8, r8)
 802140c:	080250b1 	.word	0x080250b1
 8021410:	08025122 	.word	0x08025122

08021414 <__pow5mult>:
 8021414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021416:	2303      	movs	r3, #3
 8021418:	0015      	movs	r5, r2
 802141a:	0007      	movs	r7, r0
 802141c:	000e      	movs	r6, r1
 802141e:	401a      	ands	r2, r3
 8021420:	421d      	tst	r5, r3
 8021422:	d008      	beq.n	8021436 <__pow5mult+0x22>
 8021424:	4925      	ldr	r1, [pc, #148]	@ (80214bc <__pow5mult+0xa8>)
 8021426:	3a01      	subs	r2, #1
 8021428:	0092      	lsls	r2, r2, #2
 802142a:	5852      	ldr	r2, [r2, r1]
 802142c:	2300      	movs	r3, #0
 802142e:	0031      	movs	r1, r6
 8021430:	f7ff fe46 	bl	80210c0 <__multadd>
 8021434:	0006      	movs	r6, r0
 8021436:	10ad      	asrs	r5, r5, #2
 8021438:	d03d      	beq.n	80214b6 <__pow5mult+0xa2>
 802143a:	69fc      	ldr	r4, [r7, #28]
 802143c:	2c00      	cmp	r4, #0
 802143e:	d10f      	bne.n	8021460 <__pow5mult+0x4c>
 8021440:	2010      	movs	r0, #16
 8021442:	f7ff fd07 	bl	8020e54 <malloc>
 8021446:	1e02      	subs	r2, r0, #0
 8021448:	61f8      	str	r0, [r7, #28]
 802144a:	d105      	bne.n	8021458 <__pow5mult+0x44>
 802144c:	21b4      	movs	r1, #180	@ 0xb4
 802144e:	4b1c      	ldr	r3, [pc, #112]	@ (80214c0 <__pow5mult+0xac>)
 8021450:	481c      	ldr	r0, [pc, #112]	@ (80214c4 <__pow5mult+0xb0>)
 8021452:	31ff      	adds	r1, #255	@ 0xff
 8021454:	f000 feac 	bl	80221b0 <__assert_func>
 8021458:	6044      	str	r4, [r0, #4]
 802145a:	6084      	str	r4, [r0, #8]
 802145c:	6004      	str	r4, [r0, #0]
 802145e:	60c4      	str	r4, [r0, #12]
 8021460:	69fb      	ldr	r3, [r7, #28]
 8021462:	689c      	ldr	r4, [r3, #8]
 8021464:	9301      	str	r3, [sp, #4]
 8021466:	2c00      	cmp	r4, #0
 8021468:	d108      	bne.n	802147c <__pow5mult+0x68>
 802146a:	0038      	movs	r0, r7
 802146c:	4916      	ldr	r1, [pc, #88]	@ (80214c8 <__pow5mult+0xb4>)
 802146e:	f7ff ff07 	bl	8021280 <__i2b>
 8021472:	9b01      	ldr	r3, [sp, #4]
 8021474:	0004      	movs	r4, r0
 8021476:	6098      	str	r0, [r3, #8]
 8021478:	2300      	movs	r3, #0
 802147a:	6003      	str	r3, [r0, #0]
 802147c:	2301      	movs	r3, #1
 802147e:	421d      	tst	r5, r3
 8021480:	d00a      	beq.n	8021498 <__pow5mult+0x84>
 8021482:	0031      	movs	r1, r6
 8021484:	0022      	movs	r2, r4
 8021486:	0038      	movs	r0, r7
 8021488:	f7ff ff12 	bl	80212b0 <__multiply>
 802148c:	0031      	movs	r1, r6
 802148e:	9001      	str	r0, [sp, #4]
 8021490:	0038      	movs	r0, r7
 8021492:	f7ff fdf1 	bl	8021078 <_Bfree>
 8021496:	9e01      	ldr	r6, [sp, #4]
 8021498:	106d      	asrs	r5, r5, #1
 802149a:	d00c      	beq.n	80214b6 <__pow5mult+0xa2>
 802149c:	6820      	ldr	r0, [r4, #0]
 802149e:	2800      	cmp	r0, #0
 80214a0:	d107      	bne.n	80214b2 <__pow5mult+0x9e>
 80214a2:	0022      	movs	r2, r4
 80214a4:	0021      	movs	r1, r4
 80214a6:	0038      	movs	r0, r7
 80214a8:	f7ff ff02 	bl	80212b0 <__multiply>
 80214ac:	2300      	movs	r3, #0
 80214ae:	6020      	str	r0, [r4, #0]
 80214b0:	6003      	str	r3, [r0, #0]
 80214b2:	0004      	movs	r4, r0
 80214b4:	e7e2      	b.n	802147c <__pow5mult+0x68>
 80214b6:	0030      	movs	r0, r6
 80214b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80214ba:	46c0      	nop			@ (mov r8, r8)
 80214bc:	0802517c 	.word	0x0802517c
 80214c0:	08025042 	.word	0x08025042
 80214c4:	08025122 	.word	0x08025122
 80214c8:	00000271 	.word	0x00000271

080214cc <__lshift>:
 80214cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214ce:	000c      	movs	r4, r1
 80214d0:	0016      	movs	r6, r2
 80214d2:	6923      	ldr	r3, [r4, #16]
 80214d4:	1157      	asrs	r7, r2, #5
 80214d6:	b085      	sub	sp, #20
 80214d8:	18fb      	adds	r3, r7, r3
 80214da:	9301      	str	r3, [sp, #4]
 80214dc:	3301      	adds	r3, #1
 80214de:	9300      	str	r3, [sp, #0]
 80214e0:	6849      	ldr	r1, [r1, #4]
 80214e2:	68a3      	ldr	r3, [r4, #8]
 80214e4:	9002      	str	r0, [sp, #8]
 80214e6:	9a00      	ldr	r2, [sp, #0]
 80214e8:	4293      	cmp	r3, r2
 80214ea:	db10      	blt.n	802150e <__lshift+0x42>
 80214ec:	9802      	ldr	r0, [sp, #8]
 80214ee:	f7ff fd7f 	bl	8020ff0 <_Balloc>
 80214f2:	2300      	movs	r3, #0
 80214f4:	0001      	movs	r1, r0
 80214f6:	0005      	movs	r5, r0
 80214f8:	001a      	movs	r2, r3
 80214fa:	3114      	adds	r1, #20
 80214fc:	4298      	cmp	r0, r3
 80214fe:	d10c      	bne.n	802151a <__lshift+0x4e>
 8021500:	21ef      	movs	r1, #239	@ 0xef
 8021502:	002a      	movs	r2, r5
 8021504:	4b25      	ldr	r3, [pc, #148]	@ (802159c <__lshift+0xd0>)
 8021506:	4826      	ldr	r0, [pc, #152]	@ (80215a0 <__lshift+0xd4>)
 8021508:	0049      	lsls	r1, r1, #1
 802150a:	f000 fe51 	bl	80221b0 <__assert_func>
 802150e:	3101      	adds	r1, #1
 8021510:	005b      	lsls	r3, r3, #1
 8021512:	e7e8      	b.n	80214e6 <__lshift+0x1a>
 8021514:	0098      	lsls	r0, r3, #2
 8021516:	500a      	str	r2, [r1, r0]
 8021518:	3301      	adds	r3, #1
 802151a:	42bb      	cmp	r3, r7
 802151c:	dbfa      	blt.n	8021514 <__lshift+0x48>
 802151e:	43fb      	mvns	r3, r7
 8021520:	17db      	asrs	r3, r3, #31
 8021522:	401f      	ands	r7, r3
 8021524:	00bf      	lsls	r7, r7, #2
 8021526:	0023      	movs	r3, r4
 8021528:	201f      	movs	r0, #31
 802152a:	19c9      	adds	r1, r1, r7
 802152c:	0037      	movs	r7, r6
 802152e:	6922      	ldr	r2, [r4, #16]
 8021530:	3314      	adds	r3, #20
 8021532:	0092      	lsls	r2, r2, #2
 8021534:	189a      	adds	r2, r3, r2
 8021536:	4007      	ands	r7, r0
 8021538:	4206      	tst	r6, r0
 802153a:	d029      	beq.n	8021590 <__lshift+0xc4>
 802153c:	3001      	adds	r0, #1
 802153e:	1bc0      	subs	r0, r0, r7
 8021540:	9003      	str	r0, [sp, #12]
 8021542:	468c      	mov	ip, r1
 8021544:	2000      	movs	r0, #0
 8021546:	681e      	ldr	r6, [r3, #0]
 8021548:	40be      	lsls	r6, r7
 802154a:	4306      	orrs	r6, r0
 802154c:	4660      	mov	r0, ip
 802154e:	c040      	stmia	r0!, {r6}
 8021550:	4684      	mov	ip, r0
 8021552:	9e03      	ldr	r6, [sp, #12]
 8021554:	cb01      	ldmia	r3!, {r0}
 8021556:	40f0      	lsrs	r0, r6
 8021558:	429a      	cmp	r2, r3
 802155a:	d8f4      	bhi.n	8021546 <__lshift+0x7a>
 802155c:	0026      	movs	r6, r4
 802155e:	3615      	adds	r6, #21
 8021560:	2304      	movs	r3, #4
 8021562:	42b2      	cmp	r2, r6
 8021564:	d304      	bcc.n	8021570 <__lshift+0xa4>
 8021566:	1b13      	subs	r3, r2, r4
 8021568:	3b15      	subs	r3, #21
 802156a:	089b      	lsrs	r3, r3, #2
 802156c:	3301      	adds	r3, #1
 802156e:	009b      	lsls	r3, r3, #2
 8021570:	50c8      	str	r0, [r1, r3]
 8021572:	2800      	cmp	r0, #0
 8021574:	d002      	beq.n	802157c <__lshift+0xb0>
 8021576:	9b01      	ldr	r3, [sp, #4]
 8021578:	3302      	adds	r3, #2
 802157a:	9300      	str	r3, [sp, #0]
 802157c:	9b00      	ldr	r3, [sp, #0]
 802157e:	9802      	ldr	r0, [sp, #8]
 8021580:	3b01      	subs	r3, #1
 8021582:	0021      	movs	r1, r4
 8021584:	612b      	str	r3, [r5, #16]
 8021586:	f7ff fd77 	bl	8021078 <_Bfree>
 802158a:	0028      	movs	r0, r5
 802158c:	b005      	add	sp, #20
 802158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021590:	cb01      	ldmia	r3!, {r0}
 8021592:	c101      	stmia	r1!, {r0}
 8021594:	429a      	cmp	r2, r3
 8021596:	d8fb      	bhi.n	8021590 <__lshift+0xc4>
 8021598:	e7f0      	b.n	802157c <__lshift+0xb0>
 802159a:	46c0      	nop			@ (mov r8, r8)
 802159c:	080250b1 	.word	0x080250b1
 80215a0:	08025122 	.word	0x08025122

080215a4 <__mcmp>:
 80215a4:	b530      	push	{r4, r5, lr}
 80215a6:	690b      	ldr	r3, [r1, #16]
 80215a8:	6904      	ldr	r4, [r0, #16]
 80215aa:	0002      	movs	r2, r0
 80215ac:	1ae0      	subs	r0, r4, r3
 80215ae:	429c      	cmp	r4, r3
 80215b0:	d10f      	bne.n	80215d2 <__mcmp+0x2e>
 80215b2:	3214      	adds	r2, #20
 80215b4:	009b      	lsls	r3, r3, #2
 80215b6:	3114      	adds	r1, #20
 80215b8:	0014      	movs	r4, r2
 80215ba:	18c9      	adds	r1, r1, r3
 80215bc:	18d2      	adds	r2, r2, r3
 80215be:	3a04      	subs	r2, #4
 80215c0:	3904      	subs	r1, #4
 80215c2:	6815      	ldr	r5, [r2, #0]
 80215c4:	680b      	ldr	r3, [r1, #0]
 80215c6:	429d      	cmp	r5, r3
 80215c8:	d004      	beq.n	80215d4 <__mcmp+0x30>
 80215ca:	2001      	movs	r0, #1
 80215cc:	429d      	cmp	r5, r3
 80215ce:	d200      	bcs.n	80215d2 <__mcmp+0x2e>
 80215d0:	3802      	subs	r0, #2
 80215d2:	bd30      	pop	{r4, r5, pc}
 80215d4:	4294      	cmp	r4, r2
 80215d6:	d3f2      	bcc.n	80215be <__mcmp+0x1a>
 80215d8:	e7fb      	b.n	80215d2 <__mcmp+0x2e>
	...

080215dc <__mdiff>:
 80215dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215de:	000c      	movs	r4, r1
 80215e0:	b087      	sub	sp, #28
 80215e2:	9000      	str	r0, [sp, #0]
 80215e4:	0011      	movs	r1, r2
 80215e6:	0020      	movs	r0, r4
 80215e8:	0017      	movs	r7, r2
 80215ea:	f7ff ffdb 	bl	80215a4 <__mcmp>
 80215ee:	1e05      	subs	r5, r0, #0
 80215f0:	d110      	bne.n	8021614 <__mdiff+0x38>
 80215f2:	0001      	movs	r1, r0
 80215f4:	9800      	ldr	r0, [sp, #0]
 80215f6:	f7ff fcfb 	bl	8020ff0 <_Balloc>
 80215fa:	1e02      	subs	r2, r0, #0
 80215fc:	d104      	bne.n	8021608 <__mdiff+0x2c>
 80215fe:	4b40      	ldr	r3, [pc, #256]	@ (8021700 <__mdiff+0x124>)
 8021600:	4840      	ldr	r0, [pc, #256]	@ (8021704 <__mdiff+0x128>)
 8021602:	4941      	ldr	r1, [pc, #260]	@ (8021708 <__mdiff+0x12c>)
 8021604:	f000 fdd4 	bl	80221b0 <__assert_func>
 8021608:	2301      	movs	r3, #1
 802160a:	6145      	str	r5, [r0, #20]
 802160c:	6103      	str	r3, [r0, #16]
 802160e:	0010      	movs	r0, r2
 8021610:	b007      	add	sp, #28
 8021612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021614:	2600      	movs	r6, #0
 8021616:	42b0      	cmp	r0, r6
 8021618:	da03      	bge.n	8021622 <__mdiff+0x46>
 802161a:	0023      	movs	r3, r4
 802161c:	003c      	movs	r4, r7
 802161e:	001f      	movs	r7, r3
 8021620:	3601      	adds	r6, #1
 8021622:	6861      	ldr	r1, [r4, #4]
 8021624:	9800      	ldr	r0, [sp, #0]
 8021626:	f7ff fce3 	bl	8020ff0 <_Balloc>
 802162a:	1e02      	subs	r2, r0, #0
 802162c:	d103      	bne.n	8021636 <__mdiff+0x5a>
 802162e:	4b34      	ldr	r3, [pc, #208]	@ (8021700 <__mdiff+0x124>)
 8021630:	4834      	ldr	r0, [pc, #208]	@ (8021704 <__mdiff+0x128>)
 8021632:	4936      	ldr	r1, [pc, #216]	@ (802170c <__mdiff+0x130>)
 8021634:	e7e6      	b.n	8021604 <__mdiff+0x28>
 8021636:	6923      	ldr	r3, [r4, #16]
 8021638:	3414      	adds	r4, #20
 802163a:	9300      	str	r3, [sp, #0]
 802163c:	009b      	lsls	r3, r3, #2
 802163e:	18e3      	adds	r3, r4, r3
 8021640:	0021      	movs	r1, r4
 8021642:	9401      	str	r4, [sp, #4]
 8021644:	003c      	movs	r4, r7
 8021646:	9302      	str	r3, [sp, #8]
 8021648:	693b      	ldr	r3, [r7, #16]
 802164a:	3414      	adds	r4, #20
 802164c:	009b      	lsls	r3, r3, #2
 802164e:	18e3      	adds	r3, r4, r3
 8021650:	9303      	str	r3, [sp, #12]
 8021652:	0003      	movs	r3, r0
 8021654:	60c6      	str	r6, [r0, #12]
 8021656:	468c      	mov	ip, r1
 8021658:	2000      	movs	r0, #0
 802165a:	3314      	adds	r3, #20
 802165c:	9304      	str	r3, [sp, #16]
 802165e:	9305      	str	r3, [sp, #20]
 8021660:	4663      	mov	r3, ip
 8021662:	cb20      	ldmia	r3!, {r5}
 8021664:	b2a9      	uxth	r1, r5
 8021666:	000e      	movs	r6, r1
 8021668:	469c      	mov	ip, r3
 802166a:	cc08      	ldmia	r4!, {r3}
 802166c:	0c2d      	lsrs	r5, r5, #16
 802166e:	b299      	uxth	r1, r3
 8021670:	1a71      	subs	r1, r6, r1
 8021672:	1809      	adds	r1, r1, r0
 8021674:	0c1b      	lsrs	r3, r3, #16
 8021676:	1408      	asrs	r0, r1, #16
 8021678:	1aeb      	subs	r3, r5, r3
 802167a:	181b      	adds	r3, r3, r0
 802167c:	1418      	asrs	r0, r3, #16
 802167e:	b289      	uxth	r1, r1
 8021680:	041b      	lsls	r3, r3, #16
 8021682:	4319      	orrs	r1, r3
 8021684:	9b05      	ldr	r3, [sp, #20]
 8021686:	c302      	stmia	r3!, {r1}
 8021688:	9305      	str	r3, [sp, #20]
 802168a:	9b03      	ldr	r3, [sp, #12]
 802168c:	42a3      	cmp	r3, r4
 802168e:	d8e7      	bhi.n	8021660 <__mdiff+0x84>
 8021690:	0039      	movs	r1, r7
 8021692:	9c03      	ldr	r4, [sp, #12]
 8021694:	3115      	adds	r1, #21
 8021696:	2304      	movs	r3, #4
 8021698:	428c      	cmp	r4, r1
 802169a:	d304      	bcc.n	80216a6 <__mdiff+0xca>
 802169c:	1be3      	subs	r3, r4, r7
 802169e:	3b15      	subs	r3, #21
 80216a0:	089b      	lsrs	r3, r3, #2
 80216a2:	3301      	adds	r3, #1
 80216a4:	009b      	lsls	r3, r3, #2
 80216a6:	9901      	ldr	r1, [sp, #4]
 80216a8:	18cd      	adds	r5, r1, r3
 80216aa:	9904      	ldr	r1, [sp, #16]
 80216ac:	002e      	movs	r6, r5
 80216ae:	18cb      	adds	r3, r1, r3
 80216b0:	001f      	movs	r7, r3
 80216b2:	9902      	ldr	r1, [sp, #8]
 80216b4:	428e      	cmp	r6, r1
 80216b6:	d311      	bcc.n	80216dc <__mdiff+0x100>
 80216b8:	9c02      	ldr	r4, [sp, #8]
 80216ba:	1ee9      	subs	r1, r5, #3
 80216bc:	2000      	movs	r0, #0
 80216be:	428c      	cmp	r4, r1
 80216c0:	d304      	bcc.n	80216cc <__mdiff+0xf0>
 80216c2:	0021      	movs	r1, r4
 80216c4:	3103      	adds	r1, #3
 80216c6:	1b49      	subs	r1, r1, r5
 80216c8:	0889      	lsrs	r1, r1, #2
 80216ca:	0088      	lsls	r0, r1, #2
 80216cc:	181b      	adds	r3, r3, r0
 80216ce:	3b04      	subs	r3, #4
 80216d0:	6819      	ldr	r1, [r3, #0]
 80216d2:	2900      	cmp	r1, #0
 80216d4:	d010      	beq.n	80216f8 <__mdiff+0x11c>
 80216d6:	9b00      	ldr	r3, [sp, #0]
 80216d8:	6113      	str	r3, [r2, #16]
 80216da:	e798      	b.n	802160e <__mdiff+0x32>
 80216dc:	4684      	mov	ip, r0
 80216de:	ce02      	ldmia	r6!, {r1}
 80216e0:	b288      	uxth	r0, r1
 80216e2:	4460      	add	r0, ip
 80216e4:	1400      	asrs	r0, r0, #16
 80216e6:	0c0c      	lsrs	r4, r1, #16
 80216e8:	1904      	adds	r4, r0, r4
 80216ea:	4461      	add	r1, ip
 80216ec:	1420      	asrs	r0, r4, #16
 80216ee:	b289      	uxth	r1, r1
 80216f0:	0424      	lsls	r4, r4, #16
 80216f2:	4321      	orrs	r1, r4
 80216f4:	c702      	stmia	r7!, {r1}
 80216f6:	e7dc      	b.n	80216b2 <__mdiff+0xd6>
 80216f8:	9900      	ldr	r1, [sp, #0]
 80216fa:	3901      	subs	r1, #1
 80216fc:	9100      	str	r1, [sp, #0]
 80216fe:	e7e6      	b.n	80216ce <__mdiff+0xf2>
 8021700:	080250b1 	.word	0x080250b1
 8021704:	08025122 	.word	0x08025122
 8021708:	00000237 	.word	0x00000237
 802170c:	00000245 	.word	0x00000245

08021710 <__ulp>:
 8021710:	b510      	push	{r4, lr}
 8021712:	2400      	movs	r4, #0
 8021714:	4b0c      	ldr	r3, [pc, #48]	@ (8021748 <__ulp+0x38>)
 8021716:	4a0d      	ldr	r2, [pc, #52]	@ (802174c <__ulp+0x3c>)
 8021718:	400b      	ands	r3, r1
 802171a:	189b      	adds	r3, r3, r2
 802171c:	42a3      	cmp	r3, r4
 802171e:	dc06      	bgt.n	802172e <__ulp+0x1e>
 8021720:	425b      	negs	r3, r3
 8021722:	151a      	asrs	r2, r3, #20
 8021724:	2a13      	cmp	r2, #19
 8021726:	dc05      	bgt.n	8021734 <__ulp+0x24>
 8021728:	2380      	movs	r3, #128	@ 0x80
 802172a:	031b      	lsls	r3, r3, #12
 802172c:	4113      	asrs	r3, r2
 802172e:	0019      	movs	r1, r3
 8021730:	0020      	movs	r0, r4
 8021732:	bd10      	pop	{r4, pc}
 8021734:	3a14      	subs	r2, #20
 8021736:	2401      	movs	r4, #1
 8021738:	2a1e      	cmp	r2, #30
 802173a:	dc02      	bgt.n	8021742 <__ulp+0x32>
 802173c:	2480      	movs	r4, #128	@ 0x80
 802173e:	0624      	lsls	r4, r4, #24
 8021740:	40d4      	lsrs	r4, r2
 8021742:	2300      	movs	r3, #0
 8021744:	e7f3      	b.n	802172e <__ulp+0x1e>
 8021746:	46c0      	nop			@ (mov r8, r8)
 8021748:	7ff00000 	.word	0x7ff00000
 802174c:	fcc00000 	.word	0xfcc00000

08021750 <__b2d>:
 8021750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021752:	0006      	movs	r6, r0
 8021754:	6903      	ldr	r3, [r0, #16]
 8021756:	3614      	adds	r6, #20
 8021758:	009b      	lsls	r3, r3, #2
 802175a:	18f3      	adds	r3, r6, r3
 802175c:	1f1d      	subs	r5, r3, #4
 802175e:	682c      	ldr	r4, [r5, #0]
 8021760:	000f      	movs	r7, r1
 8021762:	0020      	movs	r0, r4
 8021764:	9301      	str	r3, [sp, #4]
 8021766:	f7ff fd3b 	bl	80211e0 <__hi0bits>
 802176a:	2220      	movs	r2, #32
 802176c:	1a12      	subs	r2, r2, r0
 802176e:	603a      	str	r2, [r7, #0]
 8021770:	0003      	movs	r3, r0
 8021772:	4a1c      	ldr	r2, [pc, #112]	@ (80217e4 <__b2d+0x94>)
 8021774:	280a      	cmp	r0, #10
 8021776:	dc15      	bgt.n	80217a4 <__b2d+0x54>
 8021778:	210b      	movs	r1, #11
 802177a:	0027      	movs	r7, r4
 802177c:	1a09      	subs	r1, r1, r0
 802177e:	40cf      	lsrs	r7, r1
 8021780:	433a      	orrs	r2, r7
 8021782:	468c      	mov	ip, r1
 8021784:	0011      	movs	r1, r2
 8021786:	2200      	movs	r2, #0
 8021788:	42ae      	cmp	r6, r5
 802178a:	d202      	bcs.n	8021792 <__b2d+0x42>
 802178c:	9a01      	ldr	r2, [sp, #4]
 802178e:	3a08      	subs	r2, #8
 8021790:	6812      	ldr	r2, [r2, #0]
 8021792:	3315      	adds	r3, #21
 8021794:	409c      	lsls	r4, r3
 8021796:	4663      	mov	r3, ip
 8021798:	0027      	movs	r7, r4
 802179a:	40da      	lsrs	r2, r3
 802179c:	4317      	orrs	r7, r2
 802179e:	0038      	movs	r0, r7
 80217a0:	b003      	add	sp, #12
 80217a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80217a4:	2700      	movs	r7, #0
 80217a6:	42ae      	cmp	r6, r5
 80217a8:	d202      	bcs.n	80217b0 <__b2d+0x60>
 80217aa:	9d01      	ldr	r5, [sp, #4]
 80217ac:	3d08      	subs	r5, #8
 80217ae:	682f      	ldr	r7, [r5, #0]
 80217b0:	210b      	movs	r1, #11
 80217b2:	4249      	negs	r1, r1
 80217b4:	468c      	mov	ip, r1
 80217b6:	449c      	add	ip, r3
 80217b8:	2b0b      	cmp	r3, #11
 80217ba:	d010      	beq.n	80217de <__b2d+0x8e>
 80217bc:	4661      	mov	r1, ip
 80217be:	2320      	movs	r3, #32
 80217c0:	408c      	lsls	r4, r1
 80217c2:	1a5b      	subs	r3, r3, r1
 80217c4:	0039      	movs	r1, r7
 80217c6:	40d9      	lsrs	r1, r3
 80217c8:	430c      	orrs	r4, r1
 80217ca:	4322      	orrs	r2, r4
 80217cc:	0011      	movs	r1, r2
 80217ce:	2200      	movs	r2, #0
 80217d0:	42b5      	cmp	r5, r6
 80217d2:	d901      	bls.n	80217d8 <__b2d+0x88>
 80217d4:	3d04      	subs	r5, #4
 80217d6:	682a      	ldr	r2, [r5, #0]
 80217d8:	4664      	mov	r4, ip
 80217da:	40a7      	lsls	r7, r4
 80217dc:	e7dd      	b.n	802179a <__b2d+0x4a>
 80217de:	4322      	orrs	r2, r4
 80217e0:	0011      	movs	r1, r2
 80217e2:	e7dc      	b.n	802179e <__b2d+0x4e>
 80217e4:	3ff00000 	.word	0x3ff00000

080217e8 <__d2b>:
 80217e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80217ea:	2101      	movs	r1, #1
 80217ec:	0016      	movs	r6, r2
 80217ee:	001f      	movs	r7, r3
 80217f0:	f7ff fbfe 	bl	8020ff0 <_Balloc>
 80217f4:	1e04      	subs	r4, r0, #0
 80217f6:	d105      	bne.n	8021804 <__d2b+0x1c>
 80217f8:	0022      	movs	r2, r4
 80217fa:	4b25      	ldr	r3, [pc, #148]	@ (8021890 <__d2b+0xa8>)
 80217fc:	4825      	ldr	r0, [pc, #148]	@ (8021894 <__d2b+0xac>)
 80217fe:	4926      	ldr	r1, [pc, #152]	@ (8021898 <__d2b+0xb0>)
 8021800:	f000 fcd6 	bl	80221b0 <__assert_func>
 8021804:	033b      	lsls	r3, r7, #12
 8021806:	007d      	lsls	r5, r7, #1
 8021808:	0b1b      	lsrs	r3, r3, #12
 802180a:	0d6d      	lsrs	r5, r5, #21
 802180c:	d002      	beq.n	8021814 <__d2b+0x2c>
 802180e:	2280      	movs	r2, #128	@ 0x80
 8021810:	0352      	lsls	r2, r2, #13
 8021812:	4313      	orrs	r3, r2
 8021814:	9301      	str	r3, [sp, #4]
 8021816:	2e00      	cmp	r6, #0
 8021818:	d025      	beq.n	8021866 <__d2b+0x7e>
 802181a:	4668      	mov	r0, sp
 802181c:	9600      	str	r6, [sp, #0]
 802181e:	f7ff fd00 	bl	8021222 <__lo0bits>
 8021822:	9b01      	ldr	r3, [sp, #4]
 8021824:	9900      	ldr	r1, [sp, #0]
 8021826:	2800      	cmp	r0, #0
 8021828:	d01b      	beq.n	8021862 <__d2b+0x7a>
 802182a:	2220      	movs	r2, #32
 802182c:	001e      	movs	r6, r3
 802182e:	1a12      	subs	r2, r2, r0
 8021830:	4096      	lsls	r6, r2
 8021832:	0032      	movs	r2, r6
 8021834:	40c3      	lsrs	r3, r0
 8021836:	430a      	orrs	r2, r1
 8021838:	6162      	str	r2, [r4, #20]
 802183a:	9301      	str	r3, [sp, #4]
 802183c:	9e01      	ldr	r6, [sp, #4]
 802183e:	61a6      	str	r6, [r4, #24]
 8021840:	1e73      	subs	r3, r6, #1
 8021842:	419e      	sbcs	r6, r3
 8021844:	3601      	adds	r6, #1
 8021846:	6126      	str	r6, [r4, #16]
 8021848:	2d00      	cmp	r5, #0
 802184a:	d014      	beq.n	8021876 <__d2b+0x8e>
 802184c:	2635      	movs	r6, #53	@ 0x35
 802184e:	4b13      	ldr	r3, [pc, #76]	@ (802189c <__d2b+0xb4>)
 8021850:	18ed      	adds	r5, r5, r3
 8021852:	9b08      	ldr	r3, [sp, #32]
 8021854:	182d      	adds	r5, r5, r0
 8021856:	601d      	str	r5, [r3, #0]
 8021858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802185a:	1a36      	subs	r6, r6, r0
 802185c:	601e      	str	r6, [r3, #0]
 802185e:	0020      	movs	r0, r4
 8021860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021862:	6161      	str	r1, [r4, #20]
 8021864:	e7ea      	b.n	802183c <__d2b+0x54>
 8021866:	a801      	add	r0, sp, #4
 8021868:	f7ff fcdb 	bl	8021222 <__lo0bits>
 802186c:	9b01      	ldr	r3, [sp, #4]
 802186e:	2601      	movs	r6, #1
 8021870:	6163      	str	r3, [r4, #20]
 8021872:	3020      	adds	r0, #32
 8021874:	e7e7      	b.n	8021846 <__d2b+0x5e>
 8021876:	4b0a      	ldr	r3, [pc, #40]	@ (80218a0 <__d2b+0xb8>)
 8021878:	18c0      	adds	r0, r0, r3
 802187a:	9b08      	ldr	r3, [sp, #32]
 802187c:	6018      	str	r0, [r3, #0]
 802187e:	4b09      	ldr	r3, [pc, #36]	@ (80218a4 <__d2b+0xbc>)
 8021880:	18f3      	adds	r3, r6, r3
 8021882:	009b      	lsls	r3, r3, #2
 8021884:	18e3      	adds	r3, r4, r3
 8021886:	6958      	ldr	r0, [r3, #20]
 8021888:	f7ff fcaa 	bl	80211e0 <__hi0bits>
 802188c:	0176      	lsls	r6, r6, #5
 802188e:	e7e3      	b.n	8021858 <__d2b+0x70>
 8021890:	080250b1 	.word	0x080250b1
 8021894:	08025122 	.word	0x08025122
 8021898:	0000030f 	.word	0x0000030f
 802189c:	fffffbcd 	.word	0xfffffbcd
 80218a0:	fffffbce 	.word	0xfffffbce
 80218a4:	3fffffff 	.word	0x3fffffff

080218a8 <__ratio>:
 80218a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218aa:	b087      	sub	sp, #28
 80218ac:	000f      	movs	r7, r1
 80218ae:	a904      	add	r1, sp, #16
 80218b0:	0006      	movs	r6, r0
 80218b2:	f7ff ff4d 	bl	8021750 <__b2d>
 80218b6:	9000      	str	r0, [sp, #0]
 80218b8:	9101      	str	r1, [sp, #4]
 80218ba:	9b00      	ldr	r3, [sp, #0]
 80218bc:	9c01      	ldr	r4, [sp, #4]
 80218be:	0038      	movs	r0, r7
 80218c0:	a905      	add	r1, sp, #20
 80218c2:	9302      	str	r3, [sp, #8]
 80218c4:	9403      	str	r4, [sp, #12]
 80218c6:	f7ff ff43 	bl	8021750 <__b2d>
 80218ca:	000d      	movs	r5, r1
 80218cc:	0002      	movs	r2, r0
 80218ce:	000b      	movs	r3, r1
 80218d0:	6930      	ldr	r0, [r6, #16]
 80218d2:	6939      	ldr	r1, [r7, #16]
 80218d4:	9e04      	ldr	r6, [sp, #16]
 80218d6:	1a40      	subs	r0, r0, r1
 80218d8:	9905      	ldr	r1, [sp, #20]
 80218da:	0140      	lsls	r0, r0, #5
 80218dc:	1a71      	subs	r1, r6, r1
 80218de:	1841      	adds	r1, r0, r1
 80218e0:	0508      	lsls	r0, r1, #20
 80218e2:	2900      	cmp	r1, #0
 80218e4:	dd08      	ble.n	80218f8 <__ratio+0x50>
 80218e6:	9901      	ldr	r1, [sp, #4]
 80218e8:	1841      	adds	r1, r0, r1
 80218ea:	9103      	str	r1, [sp, #12]
 80218ec:	9802      	ldr	r0, [sp, #8]
 80218ee:	9903      	ldr	r1, [sp, #12]
 80218f0:	f7e0 fa60 	bl	8001db4 <__aeabi_ddiv>
 80218f4:	b007      	add	sp, #28
 80218f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218f8:	1a2b      	subs	r3, r5, r0
 80218fa:	e7f7      	b.n	80218ec <__ratio+0x44>

080218fc <__copybits>:
 80218fc:	b570      	push	{r4, r5, r6, lr}
 80218fe:	0014      	movs	r4, r2
 8021900:	0005      	movs	r5, r0
 8021902:	3901      	subs	r1, #1
 8021904:	6913      	ldr	r3, [r2, #16]
 8021906:	1149      	asrs	r1, r1, #5
 8021908:	3101      	adds	r1, #1
 802190a:	0089      	lsls	r1, r1, #2
 802190c:	3414      	adds	r4, #20
 802190e:	009b      	lsls	r3, r3, #2
 8021910:	1841      	adds	r1, r0, r1
 8021912:	18e3      	adds	r3, r4, r3
 8021914:	42a3      	cmp	r3, r4
 8021916:	d80d      	bhi.n	8021934 <__copybits+0x38>
 8021918:	0014      	movs	r4, r2
 802191a:	3411      	adds	r4, #17
 802191c:	2500      	movs	r5, #0
 802191e:	429c      	cmp	r4, r3
 8021920:	d803      	bhi.n	802192a <__copybits+0x2e>
 8021922:	1a9b      	subs	r3, r3, r2
 8021924:	3b11      	subs	r3, #17
 8021926:	089b      	lsrs	r3, r3, #2
 8021928:	009d      	lsls	r5, r3, #2
 802192a:	2300      	movs	r3, #0
 802192c:	1940      	adds	r0, r0, r5
 802192e:	4281      	cmp	r1, r0
 8021930:	d803      	bhi.n	802193a <__copybits+0x3e>
 8021932:	bd70      	pop	{r4, r5, r6, pc}
 8021934:	cc40      	ldmia	r4!, {r6}
 8021936:	c540      	stmia	r5!, {r6}
 8021938:	e7ec      	b.n	8021914 <__copybits+0x18>
 802193a:	c008      	stmia	r0!, {r3}
 802193c:	e7f7      	b.n	802192e <__copybits+0x32>

0802193e <__any_on>:
 802193e:	0002      	movs	r2, r0
 8021940:	6900      	ldr	r0, [r0, #16]
 8021942:	b510      	push	{r4, lr}
 8021944:	3214      	adds	r2, #20
 8021946:	114b      	asrs	r3, r1, #5
 8021948:	4298      	cmp	r0, r3
 802194a:	db13      	blt.n	8021974 <__any_on+0x36>
 802194c:	dd0c      	ble.n	8021968 <__any_on+0x2a>
 802194e:	241f      	movs	r4, #31
 8021950:	0008      	movs	r0, r1
 8021952:	4020      	ands	r0, r4
 8021954:	4221      	tst	r1, r4
 8021956:	d007      	beq.n	8021968 <__any_on+0x2a>
 8021958:	0099      	lsls	r1, r3, #2
 802195a:	588c      	ldr	r4, [r1, r2]
 802195c:	0021      	movs	r1, r4
 802195e:	40c1      	lsrs	r1, r0
 8021960:	4081      	lsls	r1, r0
 8021962:	2001      	movs	r0, #1
 8021964:	428c      	cmp	r4, r1
 8021966:	d104      	bne.n	8021972 <__any_on+0x34>
 8021968:	009b      	lsls	r3, r3, #2
 802196a:	18d3      	adds	r3, r2, r3
 802196c:	4293      	cmp	r3, r2
 802196e:	d803      	bhi.n	8021978 <__any_on+0x3a>
 8021970:	2000      	movs	r0, #0
 8021972:	bd10      	pop	{r4, pc}
 8021974:	0003      	movs	r3, r0
 8021976:	e7f7      	b.n	8021968 <__any_on+0x2a>
 8021978:	3b04      	subs	r3, #4
 802197a:	6819      	ldr	r1, [r3, #0]
 802197c:	2900      	cmp	r1, #0
 802197e:	d0f5      	beq.n	802196c <__any_on+0x2e>
 8021980:	2001      	movs	r0, #1
 8021982:	e7f6      	b.n	8021972 <__any_on+0x34>

08021984 <__ascii_wctomb>:
 8021984:	0003      	movs	r3, r0
 8021986:	1e08      	subs	r0, r1, #0
 8021988:	d005      	beq.n	8021996 <__ascii_wctomb+0x12>
 802198a:	2aff      	cmp	r2, #255	@ 0xff
 802198c:	d904      	bls.n	8021998 <__ascii_wctomb+0x14>
 802198e:	228a      	movs	r2, #138	@ 0x8a
 8021990:	2001      	movs	r0, #1
 8021992:	601a      	str	r2, [r3, #0]
 8021994:	4240      	negs	r0, r0
 8021996:	4770      	bx	lr
 8021998:	2001      	movs	r0, #1
 802199a:	700a      	strb	r2, [r1, #0]
 802199c:	e7fb      	b.n	8021996 <__ascii_wctomb+0x12>
	...

080219a0 <__ssputs_r>:
 80219a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219a2:	688e      	ldr	r6, [r1, #8]
 80219a4:	b085      	sub	sp, #20
 80219a6:	001f      	movs	r7, r3
 80219a8:	000c      	movs	r4, r1
 80219aa:	680b      	ldr	r3, [r1, #0]
 80219ac:	9002      	str	r0, [sp, #8]
 80219ae:	9203      	str	r2, [sp, #12]
 80219b0:	42be      	cmp	r6, r7
 80219b2:	d830      	bhi.n	8021a16 <__ssputs_r+0x76>
 80219b4:	210c      	movs	r1, #12
 80219b6:	5e62      	ldrsh	r2, [r4, r1]
 80219b8:	2190      	movs	r1, #144	@ 0x90
 80219ba:	00c9      	lsls	r1, r1, #3
 80219bc:	420a      	tst	r2, r1
 80219be:	d028      	beq.n	8021a12 <__ssputs_r+0x72>
 80219c0:	2003      	movs	r0, #3
 80219c2:	6921      	ldr	r1, [r4, #16]
 80219c4:	1a5b      	subs	r3, r3, r1
 80219c6:	9301      	str	r3, [sp, #4]
 80219c8:	6963      	ldr	r3, [r4, #20]
 80219ca:	4343      	muls	r3, r0
 80219cc:	9801      	ldr	r0, [sp, #4]
 80219ce:	0fdd      	lsrs	r5, r3, #31
 80219d0:	18ed      	adds	r5, r5, r3
 80219d2:	1c7b      	adds	r3, r7, #1
 80219d4:	181b      	adds	r3, r3, r0
 80219d6:	106d      	asrs	r5, r5, #1
 80219d8:	42ab      	cmp	r3, r5
 80219da:	d900      	bls.n	80219de <__ssputs_r+0x3e>
 80219dc:	001d      	movs	r5, r3
 80219de:	0552      	lsls	r2, r2, #21
 80219e0:	d528      	bpl.n	8021a34 <__ssputs_r+0x94>
 80219e2:	0029      	movs	r1, r5
 80219e4:	9802      	ldr	r0, [sp, #8]
 80219e6:	f7ff fa61 	bl	8020eac <_malloc_r>
 80219ea:	1e06      	subs	r6, r0, #0
 80219ec:	d02c      	beq.n	8021a48 <__ssputs_r+0xa8>
 80219ee:	9a01      	ldr	r2, [sp, #4]
 80219f0:	6921      	ldr	r1, [r4, #16]
 80219f2:	f7fd fff9 	bl	801f9e8 <memcpy>
 80219f6:	89a2      	ldrh	r2, [r4, #12]
 80219f8:	4b18      	ldr	r3, [pc, #96]	@ (8021a5c <__ssputs_r+0xbc>)
 80219fa:	401a      	ands	r2, r3
 80219fc:	2380      	movs	r3, #128	@ 0x80
 80219fe:	4313      	orrs	r3, r2
 8021a00:	81a3      	strh	r3, [r4, #12]
 8021a02:	9b01      	ldr	r3, [sp, #4]
 8021a04:	6126      	str	r6, [r4, #16]
 8021a06:	18f6      	adds	r6, r6, r3
 8021a08:	6026      	str	r6, [r4, #0]
 8021a0a:	003e      	movs	r6, r7
 8021a0c:	6165      	str	r5, [r4, #20]
 8021a0e:	1aed      	subs	r5, r5, r3
 8021a10:	60a5      	str	r5, [r4, #8]
 8021a12:	42be      	cmp	r6, r7
 8021a14:	d900      	bls.n	8021a18 <__ssputs_r+0x78>
 8021a16:	003e      	movs	r6, r7
 8021a18:	0032      	movs	r2, r6
 8021a1a:	9903      	ldr	r1, [sp, #12]
 8021a1c:	6820      	ldr	r0, [r4, #0]
 8021a1e:	f000 fb7e 	bl	802211e <memmove>
 8021a22:	2000      	movs	r0, #0
 8021a24:	68a3      	ldr	r3, [r4, #8]
 8021a26:	1b9b      	subs	r3, r3, r6
 8021a28:	60a3      	str	r3, [r4, #8]
 8021a2a:	6823      	ldr	r3, [r4, #0]
 8021a2c:	199b      	adds	r3, r3, r6
 8021a2e:	6023      	str	r3, [r4, #0]
 8021a30:	b005      	add	sp, #20
 8021a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a34:	002a      	movs	r2, r5
 8021a36:	9802      	ldr	r0, [sp, #8]
 8021a38:	f000 fc05 	bl	8022246 <_realloc_r>
 8021a3c:	1e06      	subs	r6, r0, #0
 8021a3e:	d1e0      	bne.n	8021a02 <__ssputs_r+0x62>
 8021a40:	6921      	ldr	r1, [r4, #16]
 8021a42:	9802      	ldr	r0, [sp, #8]
 8021a44:	f7fe fe62 	bl	802070c <_free_r>
 8021a48:	230c      	movs	r3, #12
 8021a4a:	2001      	movs	r0, #1
 8021a4c:	9a02      	ldr	r2, [sp, #8]
 8021a4e:	4240      	negs	r0, r0
 8021a50:	6013      	str	r3, [r2, #0]
 8021a52:	89a2      	ldrh	r2, [r4, #12]
 8021a54:	3334      	adds	r3, #52	@ 0x34
 8021a56:	4313      	orrs	r3, r2
 8021a58:	81a3      	strh	r3, [r4, #12]
 8021a5a:	e7e9      	b.n	8021a30 <__ssputs_r+0x90>
 8021a5c:	fffffb7f 	.word	0xfffffb7f

08021a60 <_svfiprintf_r>:
 8021a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021a62:	b0a1      	sub	sp, #132	@ 0x84
 8021a64:	9003      	str	r0, [sp, #12]
 8021a66:	001d      	movs	r5, r3
 8021a68:	898b      	ldrh	r3, [r1, #12]
 8021a6a:	000f      	movs	r7, r1
 8021a6c:	0016      	movs	r6, r2
 8021a6e:	061b      	lsls	r3, r3, #24
 8021a70:	d511      	bpl.n	8021a96 <_svfiprintf_r+0x36>
 8021a72:	690b      	ldr	r3, [r1, #16]
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d10e      	bne.n	8021a96 <_svfiprintf_r+0x36>
 8021a78:	2140      	movs	r1, #64	@ 0x40
 8021a7a:	f7ff fa17 	bl	8020eac <_malloc_r>
 8021a7e:	6038      	str	r0, [r7, #0]
 8021a80:	6138      	str	r0, [r7, #16]
 8021a82:	2800      	cmp	r0, #0
 8021a84:	d105      	bne.n	8021a92 <_svfiprintf_r+0x32>
 8021a86:	230c      	movs	r3, #12
 8021a88:	9a03      	ldr	r2, [sp, #12]
 8021a8a:	6013      	str	r3, [r2, #0]
 8021a8c:	2001      	movs	r0, #1
 8021a8e:	4240      	negs	r0, r0
 8021a90:	e0cf      	b.n	8021c32 <_svfiprintf_r+0x1d2>
 8021a92:	2340      	movs	r3, #64	@ 0x40
 8021a94:	617b      	str	r3, [r7, #20]
 8021a96:	2300      	movs	r3, #0
 8021a98:	ac08      	add	r4, sp, #32
 8021a9a:	6163      	str	r3, [r4, #20]
 8021a9c:	3320      	adds	r3, #32
 8021a9e:	7663      	strb	r3, [r4, #25]
 8021aa0:	3310      	adds	r3, #16
 8021aa2:	76a3      	strb	r3, [r4, #26]
 8021aa4:	9507      	str	r5, [sp, #28]
 8021aa6:	0035      	movs	r5, r6
 8021aa8:	782b      	ldrb	r3, [r5, #0]
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d001      	beq.n	8021ab2 <_svfiprintf_r+0x52>
 8021aae:	2b25      	cmp	r3, #37	@ 0x25
 8021ab0:	d148      	bne.n	8021b44 <_svfiprintf_r+0xe4>
 8021ab2:	1bab      	subs	r3, r5, r6
 8021ab4:	9305      	str	r3, [sp, #20]
 8021ab6:	42b5      	cmp	r5, r6
 8021ab8:	d00b      	beq.n	8021ad2 <_svfiprintf_r+0x72>
 8021aba:	0032      	movs	r2, r6
 8021abc:	0039      	movs	r1, r7
 8021abe:	9803      	ldr	r0, [sp, #12]
 8021ac0:	f7ff ff6e 	bl	80219a0 <__ssputs_r>
 8021ac4:	3001      	adds	r0, #1
 8021ac6:	d100      	bne.n	8021aca <_svfiprintf_r+0x6a>
 8021ac8:	e0ae      	b.n	8021c28 <_svfiprintf_r+0x1c8>
 8021aca:	6963      	ldr	r3, [r4, #20]
 8021acc:	9a05      	ldr	r2, [sp, #20]
 8021ace:	189b      	adds	r3, r3, r2
 8021ad0:	6163      	str	r3, [r4, #20]
 8021ad2:	782b      	ldrb	r3, [r5, #0]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d100      	bne.n	8021ada <_svfiprintf_r+0x7a>
 8021ad8:	e0a6      	b.n	8021c28 <_svfiprintf_r+0x1c8>
 8021ada:	2201      	movs	r2, #1
 8021adc:	2300      	movs	r3, #0
 8021ade:	4252      	negs	r2, r2
 8021ae0:	6062      	str	r2, [r4, #4]
 8021ae2:	a904      	add	r1, sp, #16
 8021ae4:	3254      	adds	r2, #84	@ 0x54
 8021ae6:	1852      	adds	r2, r2, r1
 8021ae8:	1c6e      	adds	r6, r5, #1
 8021aea:	6023      	str	r3, [r4, #0]
 8021aec:	60e3      	str	r3, [r4, #12]
 8021aee:	60a3      	str	r3, [r4, #8]
 8021af0:	7013      	strb	r3, [r2, #0]
 8021af2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021af4:	4b54      	ldr	r3, [pc, #336]	@ (8021c48 <_svfiprintf_r+0x1e8>)
 8021af6:	2205      	movs	r2, #5
 8021af8:	0018      	movs	r0, r3
 8021afa:	7831      	ldrb	r1, [r6, #0]
 8021afc:	9305      	str	r3, [sp, #20]
 8021afe:	f7fd ff68 	bl	801f9d2 <memchr>
 8021b02:	1c75      	adds	r5, r6, #1
 8021b04:	2800      	cmp	r0, #0
 8021b06:	d11f      	bne.n	8021b48 <_svfiprintf_r+0xe8>
 8021b08:	6822      	ldr	r2, [r4, #0]
 8021b0a:	06d3      	lsls	r3, r2, #27
 8021b0c:	d504      	bpl.n	8021b18 <_svfiprintf_r+0xb8>
 8021b0e:	2353      	movs	r3, #83	@ 0x53
 8021b10:	a904      	add	r1, sp, #16
 8021b12:	185b      	adds	r3, r3, r1
 8021b14:	2120      	movs	r1, #32
 8021b16:	7019      	strb	r1, [r3, #0]
 8021b18:	0713      	lsls	r3, r2, #28
 8021b1a:	d504      	bpl.n	8021b26 <_svfiprintf_r+0xc6>
 8021b1c:	2353      	movs	r3, #83	@ 0x53
 8021b1e:	a904      	add	r1, sp, #16
 8021b20:	185b      	adds	r3, r3, r1
 8021b22:	212b      	movs	r1, #43	@ 0x2b
 8021b24:	7019      	strb	r1, [r3, #0]
 8021b26:	7833      	ldrb	r3, [r6, #0]
 8021b28:	2b2a      	cmp	r3, #42	@ 0x2a
 8021b2a:	d016      	beq.n	8021b5a <_svfiprintf_r+0xfa>
 8021b2c:	0035      	movs	r5, r6
 8021b2e:	2100      	movs	r1, #0
 8021b30:	200a      	movs	r0, #10
 8021b32:	68e3      	ldr	r3, [r4, #12]
 8021b34:	782a      	ldrb	r2, [r5, #0]
 8021b36:	1c6e      	adds	r6, r5, #1
 8021b38:	3a30      	subs	r2, #48	@ 0x30
 8021b3a:	2a09      	cmp	r2, #9
 8021b3c:	d950      	bls.n	8021be0 <_svfiprintf_r+0x180>
 8021b3e:	2900      	cmp	r1, #0
 8021b40:	d111      	bne.n	8021b66 <_svfiprintf_r+0x106>
 8021b42:	e017      	b.n	8021b74 <_svfiprintf_r+0x114>
 8021b44:	3501      	adds	r5, #1
 8021b46:	e7af      	b.n	8021aa8 <_svfiprintf_r+0x48>
 8021b48:	9b05      	ldr	r3, [sp, #20]
 8021b4a:	6822      	ldr	r2, [r4, #0]
 8021b4c:	1ac0      	subs	r0, r0, r3
 8021b4e:	2301      	movs	r3, #1
 8021b50:	4083      	lsls	r3, r0
 8021b52:	4313      	orrs	r3, r2
 8021b54:	002e      	movs	r6, r5
 8021b56:	6023      	str	r3, [r4, #0]
 8021b58:	e7cc      	b.n	8021af4 <_svfiprintf_r+0x94>
 8021b5a:	9b07      	ldr	r3, [sp, #28]
 8021b5c:	1d19      	adds	r1, r3, #4
 8021b5e:	681b      	ldr	r3, [r3, #0]
 8021b60:	9107      	str	r1, [sp, #28]
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	db01      	blt.n	8021b6a <_svfiprintf_r+0x10a>
 8021b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021b68:	e004      	b.n	8021b74 <_svfiprintf_r+0x114>
 8021b6a:	425b      	negs	r3, r3
 8021b6c:	60e3      	str	r3, [r4, #12]
 8021b6e:	2302      	movs	r3, #2
 8021b70:	4313      	orrs	r3, r2
 8021b72:	6023      	str	r3, [r4, #0]
 8021b74:	782b      	ldrb	r3, [r5, #0]
 8021b76:	2b2e      	cmp	r3, #46	@ 0x2e
 8021b78:	d10c      	bne.n	8021b94 <_svfiprintf_r+0x134>
 8021b7a:	786b      	ldrb	r3, [r5, #1]
 8021b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8021b7e:	d134      	bne.n	8021bea <_svfiprintf_r+0x18a>
 8021b80:	9b07      	ldr	r3, [sp, #28]
 8021b82:	3502      	adds	r5, #2
 8021b84:	1d1a      	adds	r2, r3, #4
 8021b86:	681b      	ldr	r3, [r3, #0]
 8021b88:	9207      	str	r2, [sp, #28]
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	da01      	bge.n	8021b92 <_svfiprintf_r+0x132>
 8021b8e:	2301      	movs	r3, #1
 8021b90:	425b      	negs	r3, r3
 8021b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b94:	4e2d      	ldr	r6, [pc, #180]	@ (8021c4c <_svfiprintf_r+0x1ec>)
 8021b96:	2203      	movs	r2, #3
 8021b98:	0030      	movs	r0, r6
 8021b9a:	7829      	ldrb	r1, [r5, #0]
 8021b9c:	f7fd ff19 	bl	801f9d2 <memchr>
 8021ba0:	2800      	cmp	r0, #0
 8021ba2:	d006      	beq.n	8021bb2 <_svfiprintf_r+0x152>
 8021ba4:	2340      	movs	r3, #64	@ 0x40
 8021ba6:	1b80      	subs	r0, r0, r6
 8021ba8:	4083      	lsls	r3, r0
 8021baa:	6822      	ldr	r2, [r4, #0]
 8021bac:	3501      	adds	r5, #1
 8021bae:	4313      	orrs	r3, r2
 8021bb0:	6023      	str	r3, [r4, #0]
 8021bb2:	7829      	ldrb	r1, [r5, #0]
 8021bb4:	2206      	movs	r2, #6
 8021bb6:	4826      	ldr	r0, [pc, #152]	@ (8021c50 <_svfiprintf_r+0x1f0>)
 8021bb8:	1c6e      	adds	r6, r5, #1
 8021bba:	7621      	strb	r1, [r4, #24]
 8021bbc:	f7fd ff09 	bl	801f9d2 <memchr>
 8021bc0:	2800      	cmp	r0, #0
 8021bc2:	d038      	beq.n	8021c36 <_svfiprintf_r+0x1d6>
 8021bc4:	4b23      	ldr	r3, [pc, #140]	@ (8021c54 <_svfiprintf_r+0x1f4>)
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	d122      	bne.n	8021c10 <_svfiprintf_r+0x1b0>
 8021bca:	2207      	movs	r2, #7
 8021bcc:	9b07      	ldr	r3, [sp, #28]
 8021bce:	3307      	adds	r3, #7
 8021bd0:	4393      	bics	r3, r2
 8021bd2:	3308      	adds	r3, #8
 8021bd4:	9307      	str	r3, [sp, #28]
 8021bd6:	6963      	ldr	r3, [r4, #20]
 8021bd8:	9a04      	ldr	r2, [sp, #16]
 8021bda:	189b      	adds	r3, r3, r2
 8021bdc:	6163      	str	r3, [r4, #20]
 8021bde:	e762      	b.n	8021aa6 <_svfiprintf_r+0x46>
 8021be0:	4343      	muls	r3, r0
 8021be2:	0035      	movs	r5, r6
 8021be4:	2101      	movs	r1, #1
 8021be6:	189b      	adds	r3, r3, r2
 8021be8:	e7a4      	b.n	8021b34 <_svfiprintf_r+0xd4>
 8021bea:	2300      	movs	r3, #0
 8021bec:	200a      	movs	r0, #10
 8021bee:	0019      	movs	r1, r3
 8021bf0:	3501      	adds	r5, #1
 8021bf2:	6063      	str	r3, [r4, #4]
 8021bf4:	782a      	ldrb	r2, [r5, #0]
 8021bf6:	1c6e      	adds	r6, r5, #1
 8021bf8:	3a30      	subs	r2, #48	@ 0x30
 8021bfa:	2a09      	cmp	r2, #9
 8021bfc:	d903      	bls.n	8021c06 <_svfiprintf_r+0x1a6>
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	d0c8      	beq.n	8021b94 <_svfiprintf_r+0x134>
 8021c02:	9109      	str	r1, [sp, #36]	@ 0x24
 8021c04:	e7c6      	b.n	8021b94 <_svfiprintf_r+0x134>
 8021c06:	4341      	muls	r1, r0
 8021c08:	0035      	movs	r5, r6
 8021c0a:	2301      	movs	r3, #1
 8021c0c:	1889      	adds	r1, r1, r2
 8021c0e:	e7f1      	b.n	8021bf4 <_svfiprintf_r+0x194>
 8021c10:	aa07      	add	r2, sp, #28
 8021c12:	9200      	str	r2, [sp, #0]
 8021c14:	0021      	movs	r1, r4
 8021c16:	003a      	movs	r2, r7
 8021c18:	4b0f      	ldr	r3, [pc, #60]	@ (8021c58 <_svfiprintf_r+0x1f8>)
 8021c1a:	9803      	ldr	r0, [sp, #12]
 8021c1c:	f7fc ffd4 	bl	801ebc8 <_printf_float>
 8021c20:	9004      	str	r0, [sp, #16]
 8021c22:	9b04      	ldr	r3, [sp, #16]
 8021c24:	3301      	adds	r3, #1
 8021c26:	d1d6      	bne.n	8021bd6 <_svfiprintf_r+0x176>
 8021c28:	89bb      	ldrh	r3, [r7, #12]
 8021c2a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021c2c:	065b      	lsls	r3, r3, #25
 8021c2e:	d500      	bpl.n	8021c32 <_svfiprintf_r+0x1d2>
 8021c30:	e72c      	b.n	8021a8c <_svfiprintf_r+0x2c>
 8021c32:	b021      	add	sp, #132	@ 0x84
 8021c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c36:	aa07      	add	r2, sp, #28
 8021c38:	9200      	str	r2, [sp, #0]
 8021c3a:	0021      	movs	r1, r4
 8021c3c:	003a      	movs	r2, r7
 8021c3e:	4b06      	ldr	r3, [pc, #24]	@ (8021c58 <_svfiprintf_r+0x1f8>)
 8021c40:	9803      	ldr	r0, [sp, #12]
 8021c42:	f7fd fa6f 	bl	801f124 <_printf_i>
 8021c46:	e7eb      	b.n	8021c20 <_svfiprintf_r+0x1c0>
 8021c48:	08025278 	.word	0x08025278
 8021c4c:	0802527e 	.word	0x0802527e
 8021c50:	08025282 	.word	0x08025282
 8021c54:	0801ebc9 	.word	0x0801ebc9
 8021c58:	080219a1 	.word	0x080219a1

08021c5c <__sfputc_r>:
 8021c5c:	6893      	ldr	r3, [r2, #8]
 8021c5e:	b510      	push	{r4, lr}
 8021c60:	3b01      	subs	r3, #1
 8021c62:	6093      	str	r3, [r2, #8]
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	da04      	bge.n	8021c72 <__sfputc_r+0x16>
 8021c68:	6994      	ldr	r4, [r2, #24]
 8021c6a:	42a3      	cmp	r3, r4
 8021c6c:	db07      	blt.n	8021c7e <__sfputc_r+0x22>
 8021c6e:	290a      	cmp	r1, #10
 8021c70:	d005      	beq.n	8021c7e <__sfputc_r+0x22>
 8021c72:	6813      	ldr	r3, [r2, #0]
 8021c74:	1c58      	adds	r0, r3, #1
 8021c76:	6010      	str	r0, [r2, #0]
 8021c78:	7019      	strb	r1, [r3, #0]
 8021c7a:	0008      	movs	r0, r1
 8021c7c:	bd10      	pop	{r4, pc}
 8021c7e:	f7fd fd37 	bl	801f6f0 <__swbuf_r>
 8021c82:	0001      	movs	r1, r0
 8021c84:	e7f9      	b.n	8021c7a <__sfputc_r+0x1e>

08021c86 <__sfputs_r>:
 8021c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c88:	0006      	movs	r6, r0
 8021c8a:	000f      	movs	r7, r1
 8021c8c:	0014      	movs	r4, r2
 8021c8e:	18d5      	adds	r5, r2, r3
 8021c90:	42ac      	cmp	r4, r5
 8021c92:	d101      	bne.n	8021c98 <__sfputs_r+0x12>
 8021c94:	2000      	movs	r0, #0
 8021c96:	e007      	b.n	8021ca8 <__sfputs_r+0x22>
 8021c98:	7821      	ldrb	r1, [r4, #0]
 8021c9a:	003a      	movs	r2, r7
 8021c9c:	0030      	movs	r0, r6
 8021c9e:	f7ff ffdd 	bl	8021c5c <__sfputc_r>
 8021ca2:	3401      	adds	r4, #1
 8021ca4:	1c43      	adds	r3, r0, #1
 8021ca6:	d1f3      	bne.n	8021c90 <__sfputs_r+0xa>
 8021ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021cac <_vfiprintf_r>:
 8021cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021cae:	b0a1      	sub	sp, #132	@ 0x84
 8021cb0:	000f      	movs	r7, r1
 8021cb2:	0015      	movs	r5, r2
 8021cb4:	001e      	movs	r6, r3
 8021cb6:	9003      	str	r0, [sp, #12]
 8021cb8:	2800      	cmp	r0, #0
 8021cba:	d004      	beq.n	8021cc6 <_vfiprintf_r+0x1a>
 8021cbc:	6a03      	ldr	r3, [r0, #32]
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	d101      	bne.n	8021cc6 <_vfiprintf_r+0x1a>
 8021cc2:	f7fd fbcd 	bl	801f460 <__sinit>
 8021cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021cc8:	07db      	lsls	r3, r3, #31
 8021cca:	d405      	bmi.n	8021cd8 <_vfiprintf_r+0x2c>
 8021ccc:	89bb      	ldrh	r3, [r7, #12]
 8021cce:	059b      	lsls	r3, r3, #22
 8021cd0:	d402      	bmi.n	8021cd8 <_vfiprintf_r+0x2c>
 8021cd2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021cd4:	f7fd fe7b 	bl	801f9ce <__retarget_lock_acquire_recursive>
 8021cd8:	89bb      	ldrh	r3, [r7, #12]
 8021cda:	071b      	lsls	r3, r3, #28
 8021cdc:	d502      	bpl.n	8021ce4 <_vfiprintf_r+0x38>
 8021cde:	693b      	ldr	r3, [r7, #16]
 8021ce0:	2b00      	cmp	r3, #0
 8021ce2:	d113      	bne.n	8021d0c <_vfiprintf_r+0x60>
 8021ce4:	0039      	movs	r1, r7
 8021ce6:	9803      	ldr	r0, [sp, #12]
 8021ce8:	f7fd fd44 	bl	801f774 <__swsetup_r>
 8021cec:	2800      	cmp	r0, #0
 8021cee:	d00d      	beq.n	8021d0c <_vfiprintf_r+0x60>
 8021cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021cf2:	07db      	lsls	r3, r3, #31
 8021cf4:	d503      	bpl.n	8021cfe <_vfiprintf_r+0x52>
 8021cf6:	2001      	movs	r0, #1
 8021cf8:	4240      	negs	r0, r0
 8021cfa:	b021      	add	sp, #132	@ 0x84
 8021cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021cfe:	89bb      	ldrh	r3, [r7, #12]
 8021d00:	059b      	lsls	r3, r3, #22
 8021d02:	d4f8      	bmi.n	8021cf6 <_vfiprintf_r+0x4a>
 8021d04:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021d06:	f7fd fe63 	bl	801f9d0 <__retarget_lock_release_recursive>
 8021d0a:	e7f4      	b.n	8021cf6 <_vfiprintf_r+0x4a>
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	ac08      	add	r4, sp, #32
 8021d10:	6163      	str	r3, [r4, #20]
 8021d12:	3320      	adds	r3, #32
 8021d14:	7663      	strb	r3, [r4, #25]
 8021d16:	3310      	adds	r3, #16
 8021d18:	76a3      	strb	r3, [r4, #26]
 8021d1a:	9607      	str	r6, [sp, #28]
 8021d1c:	002e      	movs	r6, r5
 8021d1e:	7833      	ldrb	r3, [r6, #0]
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	d001      	beq.n	8021d28 <_vfiprintf_r+0x7c>
 8021d24:	2b25      	cmp	r3, #37	@ 0x25
 8021d26:	d148      	bne.n	8021dba <_vfiprintf_r+0x10e>
 8021d28:	1b73      	subs	r3, r6, r5
 8021d2a:	9305      	str	r3, [sp, #20]
 8021d2c:	42ae      	cmp	r6, r5
 8021d2e:	d00b      	beq.n	8021d48 <_vfiprintf_r+0x9c>
 8021d30:	002a      	movs	r2, r5
 8021d32:	0039      	movs	r1, r7
 8021d34:	9803      	ldr	r0, [sp, #12]
 8021d36:	f7ff ffa6 	bl	8021c86 <__sfputs_r>
 8021d3a:	3001      	adds	r0, #1
 8021d3c:	d100      	bne.n	8021d40 <_vfiprintf_r+0x94>
 8021d3e:	e0ae      	b.n	8021e9e <_vfiprintf_r+0x1f2>
 8021d40:	6963      	ldr	r3, [r4, #20]
 8021d42:	9a05      	ldr	r2, [sp, #20]
 8021d44:	189b      	adds	r3, r3, r2
 8021d46:	6163      	str	r3, [r4, #20]
 8021d48:	7833      	ldrb	r3, [r6, #0]
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d100      	bne.n	8021d50 <_vfiprintf_r+0xa4>
 8021d4e:	e0a6      	b.n	8021e9e <_vfiprintf_r+0x1f2>
 8021d50:	2201      	movs	r2, #1
 8021d52:	2300      	movs	r3, #0
 8021d54:	4252      	negs	r2, r2
 8021d56:	6062      	str	r2, [r4, #4]
 8021d58:	a904      	add	r1, sp, #16
 8021d5a:	3254      	adds	r2, #84	@ 0x54
 8021d5c:	1852      	adds	r2, r2, r1
 8021d5e:	1c75      	adds	r5, r6, #1
 8021d60:	6023      	str	r3, [r4, #0]
 8021d62:	60e3      	str	r3, [r4, #12]
 8021d64:	60a3      	str	r3, [r4, #8]
 8021d66:	7013      	strb	r3, [r2, #0]
 8021d68:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021d6a:	4b59      	ldr	r3, [pc, #356]	@ (8021ed0 <_vfiprintf_r+0x224>)
 8021d6c:	2205      	movs	r2, #5
 8021d6e:	0018      	movs	r0, r3
 8021d70:	7829      	ldrb	r1, [r5, #0]
 8021d72:	9305      	str	r3, [sp, #20]
 8021d74:	f7fd fe2d 	bl	801f9d2 <memchr>
 8021d78:	1c6e      	adds	r6, r5, #1
 8021d7a:	2800      	cmp	r0, #0
 8021d7c:	d11f      	bne.n	8021dbe <_vfiprintf_r+0x112>
 8021d7e:	6822      	ldr	r2, [r4, #0]
 8021d80:	06d3      	lsls	r3, r2, #27
 8021d82:	d504      	bpl.n	8021d8e <_vfiprintf_r+0xe2>
 8021d84:	2353      	movs	r3, #83	@ 0x53
 8021d86:	a904      	add	r1, sp, #16
 8021d88:	185b      	adds	r3, r3, r1
 8021d8a:	2120      	movs	r1, #32
 8021d8c:	7019      	strb	r1, [r3, #0]
 8021d8e:	0713      	lsls	r3, r2, #28
 8021d90:	d504      	bpl.n	8021d9c <_vfiprintf_r+0xf0>
 8021d92:	2353      	movs	r3, #83	@ 0x53
 8021d94:	a904      	add	r1, sp, #16
 8021d96:	185b      	adds	r3, r3, r1
 8021d98:	212b      	movs	r1, #43	@ 0x2b
 8021d9a:	7019      	strb	r1, [r3, #0]
 8021d9c:	782b      	ldrb	r3, [r5, #0]
 8021d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021da0:	d016      	beq.n	8021dd0 <_vfiprintf_r+0x124>
 8021da2:	002e      	movs	r6, r5
 8021da4:	2100      	movs	r1, #0
 8021da6:	200a      	movs	r0, #10
 8021da8:	68e3      	ldr	r3, [r4, #12]
 8021daa:	7832      	ldrb	r2, [r6, #0]
 8021dac:	1c75      	adds	r5, r6, #1
 8021dae:	3a30      	subs	r2, #48	@ 0x30
 8021db0:	2a09      	cmp	r2, #9
 8021db2:	d950      	bls.n	8021e56 <_vfiprintf_r+0x1aa>
 8021db4:	2900      	cmp	r1, #0
 8021db6:	d111      	bne.n	8021ddc <_vfiprintf_r+0x130>
 8021db8:	e017      	b.n	8021dea <_vfiprintf_r+0x13e>
 8021dba:	3601      	adds	r6, #1
 8021dbc:	e7af      	b.n	8021d1e <_vfiprintf_r+0x72>
 8021dbe:	9b05      	ldr	r3, [sp, #20]
 8021dc0:	6822      	ldr	r2, [r4, #0]
 8021dc2:	1ac0      	subs	r0, r0, r3
 8021dc4:	2301      	movs	r3, #1
 8021dc6:	4083      	lsls	r3, r0
 8021dc8:	4313      	orrs	r3, r2
 8021dca:	0035      	movs	r5, r6
 8021dcc:	6023      	str	r3, [r4, #0]
 8021dce:	e7cc      	b.n	8021d6a <_vfiprintf_r+0xbe>
 8021dd0:	9b07      	ldr	r3, [sp, #28]
 8021dd2:	1d19      	adds	r1, r3, #4
 8021dd4:	681b      	ldr	r3, [r3, #0]
 8021dd6:	9107      	str	r1, [sp, #28]
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	db01      	blt.n	8021de0 <_vfiprintf_r+0x134>
 8021ddc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021dde:	e004      	b.n	8021dea <_vfiprintf_r+0x13e>
 8021de0:	425b      	negs	r3, r3
 8021de2:	60e3      	str	r3, [r4, #12]
 8021de4:	2302      	movs	r3, #2
 8021de6:	4313      	orrs	r3, r2
 8021de8:	6023      	str	r3, [r4, #0]
 8021dea:	7833      	ldrb	r3, [r6, #0]
 8021dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8021dee:	d10c      	bne.n	8021e0a <_vfiprintf_r+0x15e>
 8021df0:	7873      	ldrb	r3, [r6, #1]
 8021df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8021df4:	d134      	bne.n	8021e60 <_vfiprintf_r+0x1b4>
 8021df6:	9b07      	ldr	r3, [sp, #28]
 8021df8:	3602      	adds	r6, #2
 8021dfa:	1d1a      	adds	r2, r3, #4
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	9207      	str	r2, [sp, #28]
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	da01      	bge.n	8021e08 <_vfiprintf_r+0x15c>
 8021e04:	2301      	movs	r3, #1
 8021e06:	425b      	negs	r3, r3
 8021e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e0a:	4d32      	ldr	r5, [pc, #200]	@ (8021ed4 <_vfiprintf_r+0x228>)
 8021e0c:	2203      	movs	r2, #3
 8021e0e:	0028      	movs	r0, r5
 8021e10:	7831      	ldrb	r1, [r6, #0]
 8021e12:	f7fd fdde 	bl	801f9d2 <memchr>
 8021e16:	2800      	cmp	r0, #0
 8021e18:	d006      	beq.n	8021e28 <_vfiprintf_r+0x17c>
 8021e1a:	2340      	movs	r3, #64	@ 0x40
 8021e1c:	1b40      	subs	r0, r0, r5
 8021e1e:	4083      	lsls	r3, r0
 8021e20:	6822      	ldr	r2, [r4, #0]
 8021e22:	3601      	adds	r6, #1
 8021e24:	4313      	orrs	r3, r2
 8021e26:	6023      	str	r3, [r4, #0]
 8021e28:	7831      	ldrb	r1, [r6, #0]
 8021e2a:	2206      	movs	r2, #6
 8021e2c:	482a      	ldr	r0, [pc, #168]	@ (8021ed8 <_vfiprintf_r+0x22c>)
 8021e2e:	1c75      	adds	r5, r6, #1
 8021e30:	7621      	strb	r1, [r4, #24]
 8021e32:	f7fd fdce 	bl	801f9d2 <memchr>
 8021e36:	2800      	cmp	r0, #0
 8021e38:	d040      	beq.n	8021ebc <_vfiprintf_r+0x210>
 8021e3a:	4b28      	ldr	r3, [pc, #160]	@ (8021edc <_vfiprintf_r+0x230>)
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d122      	bne.n	8021e86 <_vfiprintf_r+0x1da>
 8021e40:	2207      	movs	r2, #7
 8021e42:	9b07      	ldr	r3, [sp, #28]
 8021e44:	3307      	adds	r3, #7
 8021e46:	4393      	bics	r3, r2
 8021e48:	3308      	adds	r3, #8
 8021e4a:	9307      	str	r3, [sp, #28]
 8021e4c:	6963      	ldr	r3, [r4, #20]
 8021e4e:	9a04      	ldr	r2, [sp, #16]
 8021e50:	189b      	adds	r3, r3, r2
 8021e52:	6163      	str	r3, [r4, #20]
 8021e54:	e762      	b.n	8021d1c <_vfiprintf_r+0x70>
 8021e56:	4343      	muls	r3, r0
 8021e58:	002e      	movs	r6, r5
 8021e5a:	2101      	movs	r1, #1
 8021e5c:	189b      	adds	r3, r3, r2
 8021e5e:	e7a4      	b.n	8021daa <_vfiprintf_r+0xfe>
 8021e60:	2300      	movs	r3, #0
 8021e62:	200a      	movs	r0, #10
 8021e64:	0019      	movs	r1, r3
 8021e66:	3601      	adds	r6, #1
 8021e68:	6063      	str	r3, [r4, #4]
 8021e6a:	7832      	ldrb	r2, [r6, #0]
 8021e6c:	1c75      	adds	r5, r6, #1
 8021e6e:	3a30      	subs	r2, #48	@ 0x30
 8021e70:	2a09      	cmp	r2, #9
 8021e72:	d903      	bls.n	8021e7c <_vfiprintf_r+0x1d0>
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	d0c8      	beq.n	8021e0a <_vfiprintf_r+0x15e>
 8021e78:	9109      	str	r1, [sp, #36]	@ 0x24
 8021e7a:	e7c6      	b.n	8021e0a <_vfiprintf_r+0x15e>
 8021e7c:	4341      	muls	r1, r0
 8021e7e:	002e      	movs	r6, r5
 8021e80:	2301      	movs	r3, #1
 8021e82:	1889      	adds	r1, r1, r2
 8021e84:	e7f1      	b.n	8021e6a <_vfiprintf_r+0x1be>
 8021e86:	aa07      	add	r2, sp, #28
 8021e88:	9200      	str	r2, [sp, #0]
 8021e8a:	0021      	movs	r1, r4
 8021e8c:	003a      	movs	r2, r7
 8021e8e:	4b14      	ldr	r3, [pc, #80]	@ (8021ee0 <_vfiprintf_r+0x234>)
 8021e90:	9803      	ldr	r0, [sp, #12]
 8021e92:	f7fc fe99 	bl	801ebc8 <_printf_float>
 8021e96:	9004      	str	r0, [sp, #16]
 8021e98:	9b04      	ldr	r3, [sp, #16]
 8021e9a:	3301      	adds	r3, #1
 8021e9c:	d1d6      	bne.n	8021e4c <_vfiprintf_r+0x1a0>
 8021e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021ea0:	07db      	lsls	r3, r3, #31
 8021ea2:	d405      	bmi.n	8021eb0 <_vfiprintf_r+0x204>
 8021ea4:	89bb      	ldrh	r3, [r7, #12]
 8021ea6:	059b      	lsls	r3, r3, #22
 8021ea8:	d402      	bmi.n	8021eb0 <_vfiprintf_r+0x204>
 8021eaa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021eac:	f7fd fd90 	bl	801f9d0 <__retarget_lock_release_recursive>
 8021eb0:	89bb      	ldrh	r3, [r7, #12]
 8021eb2:	065b      	lsls	r3, r3, #25
 8021eb4:	d500      	bpl.n	8021eb8 <_vfiprintf_r+0x20c>
 8021eb6:	e71e      	b.n	8021cf6 <_vfiprintf_r+0x4a>
 8021eb8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021eba:	e71e      	b.n	8021cfa <_vfiprintf_r+0x4e>
 8021ebc:	aa07      	add	r2, sp, #28
 8021ebe:	9200      	str	r2, [sp, #0]
 8021ec0:	0021      	movs	r1, r4
 8021ec2:	003a      	movs	r2, r7
 8021ec4:	4b06      	ldr	r3, [pc, #24]	@ (8021ee0 <_vfiprintf_r+0x234>)
 8021ec6:	9803      	ldr	r0, [sp, #12]
 8021ec8:	f7fd f92c 	bl	801f124 <_printf_i>
 8021ecc:	e7e3      	b.n	8021e96 <_vfiprintf_r+0x1ea>
 8021ece:	46c0      	nop			@ (mov r8, r8)
 8021ed0:	08025278 	.word	0x08025278
 8021ed4:	0802527e 	.word	0x0802527e
 8021ed8:	08025282 	.word	0x08025282
 8021edc:	0801ebc9 	.word	0x0801ebc9
 8021ee0:	08021c87 	.word	0x08021c87

08021ee4 <__sflush_r>:
 8021ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021ee6:	220c      	movs	r2, #12
 8021ee8:	5e8b      	ldrsh	r3, [r1, r2]
 8021eea:	0005      	movs	r5, r0
 8021eec:	000c      	movs	r4, r1
 8021eee:	071a      	lsls	r2, r3, #28
 8021ef0:	d456      	bmi.n	8021fa0 <__sflush_r+0xbc>
 8021ef2:	684a      	ldr	r2, [r1, #4]
 8021ef4:	2a00      	cmp	r2, #0
 8021ef6:	dc02      	bgt.n	8021efe <__sflush_r+0x1a>
 8021ef8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8021efa:	2a00      	cmp	r2, #0
 8021efc:	dd4e      	ble.n	8021f9c <__sflush_r+0xb8>
 8021efe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021f00:	2f00      	cmp	r7, #0
 8021f02:	d04b      	beq.n	8021f9c <__sflush_r+0xb8>
 8021f04:	2200      	movs	r2, #0
 8021f06:	2080      	movs	r0, #128	@ 0x80
 8021f08:	682e      	ldr	r6, [r5, #0]
 8021f0a:	602a      	str	r2, [r5, #0]
 8021f0c:	001a      	movs	r2, r3
 8021f0e:	0140      	lsls	r0, r0, #5
 8021f10:	6a21      	ldr	r1, [r4, #32]
 8021f12:	4002      	ands	r2, r0
 8021f14:	4203      	tst	r3, r0
 8021f16:	d033      	beq.n	8021f80 <__sflush_r+0x9c>
 8021f18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021f1a:	89a3      	ldrh	r3, [r4, #12]
 8021f1c:	075b      	lsls	r3, r3, #29
 8021f1e:	d506      	bpl.n	8021f2e <__sflush_r+0x4a>
 8021f20:	6863      	ldr	r3, [r4, #4]
 8021f22:	1ad2      	subs	r2, r2, r3
 8021f24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d001      	beq.n	8021f2e <__sflush_r+0x4a>
 8021f2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021f2c:	1ad2      	subs	r2, r2, r3
 8021f2e:	2300      	movs	r3, #0
 8021f30:	0028      	movs	r0, r5
 8021f32:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021f34:	6a21      	ldr	r1, [r4, #32]
 8021f36:	47b8      	blx	r7
 8021f38:	89a2      	ldrh	r2, [r4, #12]
 8021f3a:	1c43      	adds	r3, r0, #1
 8021f3c:	d106      	bne.n	8021f4c <__sflush_r+0x68>
 8021f3e:	6829      	ldr	r1, [r5, #0]
 8021f40:	291d      	cmp	r1, #29
 8021f42:	d846      	bhi.n	8021fd2 <__sflush_r+0xee>
 8021f44:	4b29      	ldr	r3, [pc, #164]	@ (8021fec <__sflush_r+0x108>)
 8021f46:	410b      	asrs	r3, r1
 8021f48:	07db      	lsls	r3, r3, #31
 8021f4a:	d442      	bmi.n	8021fd2 <__sflush_r+0xee>
 8021f4c:	2300      	movs	r3, #0
 8021f4e:	6063      	str	r3, [r4, #4]
 8021f50:	6923      	ldr	r3, [r4, #16]
 8021f52:	6023      	str	r3, [r4, #0]
 8021f54:	04d2      	lsls	r2, r2, #19
 8021f56:	d505      	bpl.n	8021f64 <__sflush_r+0x80>
 8021f58:	1c43      	adds	r3, r0, #1
 8021f5a:	d102      	bne.n	8021f62 <__sflush_r+0x7e>
 8021f5c:	682b      	ldr	r3, [r5, #0]
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	d100      	bne.n	8021f64 <__sflush_r+0x80>
 8021f62:	6560      	str	r0, [r4, #84]	@ 0x54
 8021f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021f66:	602e      	str	r6, [r5, #0]
 8021f68:	2900      	cmp	r1, #0
 8021f6a:	d017      	beq.n	8021f9c <__sflush_r+0xb8>
 8021f6c:	0023      	movs	r3, r4
 8021f6e:	3344      	adds	r3, #68	@ 0x44
 8021f70:	4299      	cmp	r1, r3
 8021f72:	d002      	beq.n	8021f7a <__sflush_r+0x96>
 8021f74:	0028      	movs	r0, r5
 8021f76:	f7fe fbc9 	bl	802070c <_free_r>
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8021f7e:	e00d      	b.n	8021f9c <__sflush_r+0xb8>
 8021f80:	2301      	movs	r3, #1
 8021f82:	0028      	movs	r0, r5
 8021f84:	47b8      	blx	r7
 8021f86:	0002      	movs	r2, r0
 8021f88:	1c43      	adds	r3, r0, #1
 8021f8a:	d1c6      	bne.n	8021f1a <__sflush_r+0x36>
 8021f8c:	682b      	ldr	r3, [r5, #0]
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	d0c3      	beq.n	8021f1a <__sflush_r+0x36>
 8021f92:	2b1d      	cmp	r3, #29
 8021f94:	d001      	beq.n	8021f9a <__sflush_r+0xb6>
 8021f96:	2b16      	cmp	r3, #22
 8021f98:	d11a      	bne.n	8021fd0 <__sflush_r+0xec>
 8021f9a:	602e      	str	r6, [r5, #0]
 8021f9c:	2000      	movs	r0, #0
 8021f9e:	e01e      	b.n	8021fde <__sflush_r+0xfa>
 8021fa0:	690e      	ldr	r6, [r1, #16]
 8021fa2:	2e00      	cmp	r6, #0
 8021fa4:	d0fa      	beq.n	8021f9c <__sflush_r+0xb8>
 8021fa6:	680f      	ldr	r7, [r1, #0]
 8021fa8:	600e      	str	r6, [r1, #0]
 8021faa:	1bba      	subs	r2, r7, r6
 8021fac:	9201      	str	r2, [sp, #4]
 8021fae:	2200      	movs	r2, #0
 8021fb0:	079b      	lsls	r3, r3, #30
 8021fb2:	d100      	bne.n	8021fb6 <__sflush_r+0xd2>
 8021fb4:	694a      	ldr	r2, [r1, #20]
 8021fb6:	60a2      	str	r2, [r4, #8]
 8021fb8:	9b01      	ldr	r3, [sp, #4]
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	ddee      	ble.n	8021f9c <__sflush_r+0xb8>
 8021fbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021fc0:	0032      	movs	r2, r6
 8021fc2:	001f      	movs	r7, r3
 8021fc4:	0028      	movs	r0, r5
 8021fc6:	9b01      	ldr	r3, [sp, #4]
 8021fc8:	6a21      	ldr	r1, [r4, #32]
 8021fca:	47b8      	blx	r7
 8021fcc:	2800      	cmp	r0, #0
 8021fce:	dc07      	bgt.n	8021fe0 <__sflush_r+0xfc>
 8021fd0:	89a2      	ldrh	r2, [r4, #12]
 8021fd2:	2340      	movs	r3, #64	@ 0x40
 8021fd4:	2001      	movs	r0, #1
 8021fd6:	4313      	orrs	r3, r2
 8021fd8:	b21b      	sxth	r3, r3
 8021fda:	81a3      	strh	r3, [r4, #12]
 8021fdc:	4240      	negs	r0, r0
 8021fde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021fe0:	9b01      	ldr	r3, [sp, #4]
 8021fe2:	1836      	adds	r6, r6, r0
 8021fe4:	1a1b      	subs	r3, r3, r0
 8021fe6:	9301      	str	r3, [sp, #4]
 8021fe8:	e7e6      	b.n	8021fb8 <__sflush_r+0xd4>
 8021fea:	46c0      	nop			@ (mov r8, r8)
 8021fec:	dfbffffe 	.word	0xdfbffffe

08021ff0 <_fflush_r>:
 8021ff0:	690b      	ldr	r3, [r1, #16]
 8021ff2:	b570      	push	{r4, r5, r6, lr}
 8021ff4:	0005      	movs	r5, r0
 8021ff6:	000c      	movs	r4, r1
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	d102      	bne.n	8022002 <_fflush_r+0x12>
 8021ffc:	2500      	movs	r5, #0
 8021ffe:	0028      	movs	r0, r5
 8022000:	bd70      	pop	{r4, r5, r6, pc}
 8022002:	2800      	cmp	r0, #0
 8022004:	d004      	beq.n	8022010 <_fflush_r+0x20>
 8022006:	6a03      	ldr	r3, [r0, #32]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d101      	bne.n	8022010 <_fflush_r+0x20>
 802200c:	f7fd fa28 	bl	801f460 <__sinit>
 8022010:	220c      	movs	r2, #12
 8022012:	5ea3      	ldrsh	r3, [r4, r2]
 8022014:	2b00      	cmp	r3, #0
 8022016:	d0f1      	beq.n	8021ffc <_fflush_r+0xc>
 8022018:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802201a:	07d2      	lsls	r2, r2, #31
 802201c:	d404      	bmi.n	8022028 <_fflush_r+0x38>
 802201e:	059b      	lsls	r3, r3, #22
 8022020:	d402      	bmi.n	8022028 <_fflush_r+0x38>
 8022022:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022024:	f7fd fcd3 	bl	801f9ce <__retarget_lock_acquire_recursive>
 8022028:	0028      	movs	r0, r5
 802202a:	0021      	movs	r1, r4
 802202c:	f7ff ff5a 	bl	8021ee4 <__sflush_r>
 8022030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022032:	0005      	movs	r5, r0
 8022034:	07db      	lsls	r3, r3, #31
 8022036:	d4e2      	bmi.n	8021ffe <_fflush_r+0xe>
 8022038:	89a3      	ldrh	r3, [r4, #12]
 802203a:	059b      	lsls	r3, r3, #22
 802203c:	d4df      	bmi.n	8021ffe <_fflush_r+0xe>
 802203e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022040:	f7fd fcc6 	bl	801f9d0 <__retarget_lock_release_recursive>
 8022044:	e7db      	b.n	8021ffe <_fflush_r+0xe>
	...

08022048 <__swhatbuf_r>:
 8022048:	b570      	push	{r4, r5, r6, lr}
 802204a:	000e      	movs	r6, r1
 802204c:	001d      	movs	r5, r3
 802204e:	230e      	movs	r3, #14
 8022050:	5ec9      	ldrsh	r1, [r1, r3]
 8022052:	0014      	movs	r4, r2
 8022054:	b096      	sub	sp, #88	@ 0x58
 8022056:	2900      	cmp	r1, #0
 8022058:	da0c      	bge.n	8022074 <__swhatbuf_r+0x2c>
 802205a:	89b2      	ldrh	r2, [r6, #12]
 802205c:	2380      	movs	r3, #128	@ 0x80
 802205e:	0011      	movs	r1, r2
 8022060:	4019      	ands	r1, r3
 8022062:	421a      	tst	r2, r3
 8022064:	d114      	bne.n	8022090 <__swhatbuf_r+0x48>
 8022066:	2380      	movs	r3, #128	@ 0x80
 8022068:	00db      	lsls	r3, r3, #3
 802206a:	2000      	movs	r0, #0
 802206c:	6029      	str	r1, [r5, #0]
 802206e:	6023      	str	r3, [r4, #0]
 8022070:	b016      	add	sp, #88	@ 0x58
 8022072:	bd70      	pop	{r4, r5, r6, pc}
 8022074:	466a      	mov	r2, sp
 8022076:	f000 f865 	bl	8022144 <_fstat_r>
 802207a:	2800      	cmp	r0, #0
 802207c:	dbed      	blt.n	802205a <__swhatbuf_r+0x12>
 802207e:	23f0      	movs	r3, #240	@ 0xf0
 8022080:	9901      	ldr	r1, [sp, #4]
 8022082:	021b      	lsls	r3, r3, #8
 8022084:	4019      	ands	r1, r3
 8022086:	4b04      	ldr	r3, [pc, #16]	@ (8022098 <__swhatbuf_r+0x50>)
 8022088:	18c9      	adds	r1, r1, r3
 802208a:	424b      	negs	r3, r1
 802208c:	4159      	adcs	r1, r3
 802208e:	e7ea      	b.n	8022066 <__swhatbuf_r+0x1e>
 8022090:	2100      	movs	r1, #0
 8022092:	2340      	movs	r3, #64	@ 0x40
 8022094:	e7e9      	b.n	802206a <__swhatbuf_r+0x22>
 8022096:	46c0      	nop			@ (mov r8, r8)
 8022098:	ffffe000 	.word	0xffffe000

0802209c <__smakebuf_r>:
 802209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802209e:	2602      	movs	r6, #2
 80220a0:	898b      	ldrh	r3, [r1, #12]
 80220a2:	0005      	movs	r5, r0
 80220a4:	000c      	movs	r4, r1
 80220a6:	b085      	sub	sp, #20
 80220a8:	4233      	tst	r3, r6
 80220aa:	d007      	beq.n	80220bc <__smakebuf_r+0x20>
 80220ac:	0023      	movs	r3, r4
 80220ae:	3347      	adds	r3, #71	@ 0x47
 80220b0:	6023      	str	r3, [r4, #0]
 80220b2:	6123      	str	r3, [r4, #16]
 80220b4:	2301      	movs	r3, #1
 80220b6:	6163      	str	r3, [r4, #20]
 80220b8:	b005      	add	sp, #20
 80220ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220bc:	ab03      	add	r3, sp, #12
 80220be:	aa02      	add	r2, sp, #8
 80220c0:	f7ff ffc2 	bl	8022048 <__swhatbuf_r>
 80220c4:	9f02      	ldr	r7, [sp, #8]
 80220c6:	9001      	str	r0, [sp, #4]
 80220c8:	0039      	movs	r1, r7
 80220ca:	0028      	movs	r0, r5
 80220cc:	f7fe feee 	bl	8020eac <_malloc_r>
 80220d0:	2800      	cmp	r0, #0
 80220d2:	d108      	bne.n	80220e6 <__smakebuf_r+0x4a>
 80220d4:	220c      	movs	r2, #12
 80220d6:	5ea3      	ldrsh	r3, [r4, r2]
 80220d8:	059a      	lsls	r2, r3, #22
 80220da:	d4ed      	bmi.n	80220b8 <__smakebuf_r+0x1c>
 80220dc:	2203      	movs	r2, #3
 80220de:	4393      	bics	r3, r2
 80220e0:	431e      	orrs	r6, r3
 80220e2:	81a6      	strh	r6, [r4, #12]
 80220e4:	e7e2      	b.n	80220ac <__smakebuf_r+0x10>
 80220e6:	2380      	movs	r3, #128	@ 0x80
 80220e8:	89a2      	ldrh	r2, [r4, #12]
 80220ea:	6020      	str	r0, [r4, #0]
 80220ec:	4313      	orrs	r3, r2
 80220ee:	81a3      	strh	r3, [r4, #12]
 80220f0:	9b03      	ldr	r3, [sp, #12]
 80220f2:	6120      	str	r0, [r4, #16]
 80220f4:	6167      	str	r7, [r4, #20]
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d00c      	beq.n	8022114 <__smakebuf_r+0x78>
 80220fa:	0028      	movs	r0, r5
 80220fc:	230e      	movs	r3, #14
 80220fe:	5ee1      	ldrsh	r1, [r4, r3]
 8022100:	f000 f832 	bl	8022168 <_isatty_r>
 8022104:	2800      	cmp	r0, #0
 8022106:	d005      	beq.n	8022114 <__smakebuf_r+0x78>
 8022108:	2303      	movs	r3, #3
 802210a:	89a2      	ldrh	r2, [r4, #12]
 802210c:	439a      	bics	r2, r3
 802210e:	3b02      	subs	r3, #2
 8022110:	4313      	orrs	r3, r2
 8022112:	81a3      	strh	r3, [r4, #12]
 8022114:	89a3      	ldrh	r3, [r4, #12]
 8022116:	9a01      	ldr	r2, [sp, #4]
 8022118:	4313      	orrs	r3, r2
 802211a:	81a3      	strh	r3, [r4, #12]
 802211c:	e7cc      	b.n	80220b8 <__smakebuf_r+0x1c>

0802211e <memmove>:
 802211e:	b510      	push	{r4, lr}
 8022120:	4288      	cmp	r0, r1
 8022122:	d806      	bhi.n	8022132 <memmove+0x14>
 8022124:	2300      	movs	r3, #0
 8022126:	429a      	cmp	r2, r3
 8022128:	d008      	beq.n	802213c <memmove+0x1e>
 802212a:	5ccc      	ldrb	r4, [r1, r3]
 802212c:	54c4      	strb	r4, [r0, r3]
 802212e:	3301      	adds	r3, #1
 8022130:	e7f9      	b.n	8022126 <memmove+0x8>
 8022132:	188b      	adds	r3, r1, r2
 8022134:	4298      	cmp	r0, r3
 8022136:	d2f5      	bcs.n	8022124 <memmove+0x6>
 8022138:	3a01      	subs	r2, #1
 802213a:	d200      	bcs.n	802213e <memmove+0x20>
 802213c:	bd10      	pop	{r4, pc}
 802213e:	5c8b      	ldrb	r3, [r1, r2]
 8022140:	5483      	strb	r3, [r0, r2]
 8022142:	e7f9      	b.n	8022138 <memmove+0x1a>

08022144 <_fstat_r>:
 8022144:	2300      	movs	r3, #0
 8022146:	b570      	push	{r4, r5, r6, lr}
 8022148:	4d06      	ldr	r5, [pc, #24]	@ (8022164 <_fstat_r+0x20>)
 802214a:	0004      	movs	r4, r0
 802214c:	0008      	movs	r0, r1
 802214e:	0011      	movs	r1, r2
 8022150:	602b      	str	r3, [r5, #0]
 8022152:	f7eb f867 	bl	800d224 <_fstat>
 8022156:	1c43      	adds	r3, r0, #1
 8022158:	d103      	bne.n	8022162 <_fstat_r+0x1e>
 802215a:	682b      	ldr	r3, [r5, #0]
 802215c:	2b00      	cmp	r3, #0
 802215e:	d000      	beq.n	8022162 <_fstat_r+0x1e>
 8022160:	6023      	str	r3, [r4, #0]
 8022162:	bd70      	pop	{r4, r5, r6, pc}
 8022164:	200038f4 	.word	0x200038f4

08022168 <_isatty_r>:
 8022168:	2300      	movs	r3, #0
 802216a:	b570      	push	{r4, r5, r6, lr}
 802216c:	4d06      	ldr	r5, [pc, #24]	@ (8022188 <_isatty_r+0x20>)
 802216e:	0004      	movs	r4, r0
 8022170:	0008      	movs	r0, r1
 8022172:	602b      	str	r3, [r5, #0]
 8022174:	f7eb f864 	bl	800d240 <_isatty>
 8022178:	1c43      	adds	r3, r0, #1
 802217a:	d103      	bne.n	8022184 <_isatty_r+0x1c>
 802217c:	682b      	ldr	r3, [r5, #0]
 802217e:	2b00      	cmp	r3, #0
 8022180:	d000      	beq.n	8022184 <_isatty_r+0x1c>
 8022182:	6023      	str	r3, [r4, #0]
 8022184:	bd70      	pop	{r4, r5, r6, pc}
 8022186:	46c0      	nop			@ (mov r8, r8)
 8022188:	200038f4 	.word	0x200038f4

0802218c <_sbrk_r>:
 802218c:	2300      	movs	r3, #0
 802218e:	b570      	push	{r4, r5, r6, lr}
 8022190:	4d06      	ldr	r5, [pc, #24]	@ (80221ac <_sbrk_r+0x20>)
 8022192:	0004      	movs	r4, r0
 8022194:	0008      	movs	r0, r1
 8022196:	602b      	str	r3, [r5, #0]
 8022198:	f7eb f866 	bl	800d268 <_sbrk>
 802219c:	1c43      	adds	r3, r0, #1
 802219e:	d103      	bne.n	80221a8 <_sbrk_r+0x1c>
 80221a0:	682b      	ldr	r3, [r5, #0]
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	d000      	beq.n	80221a8 <_sbrk_r+0x1c>
 80221a6:	6023      	str	r3, [r4, #0]
 80221a8:	bd70      	pop	{r4, r5, r6, pc}
 80221aa:	46c0      	nop			@ (mov r8, r8)
 80221ac:	200038f4 	.word	0x200038f4

080221b0 <__assert_func>:
 80221b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80221b2:	0014      	movs	r4, r2
 80221b4:	001a      	movs	r2, r3
 80221b6:	4b09      	ldr	r3, [pc, #36]	@ (80221dc <__assert_func+0x2c>)
 80221b8:	0005      	movs	r5, r0
 80221ba:	681b      	ldr	r3, [r3, #0]
 80221bc:	000e      	movs	r6, r1
 80221be:	68d8      	ldr	r0, [r3, #12]
 80221c0:	4b07      	ldr	r3, [pc, #28]	@ (80221e0 <__assert_func+0x30>)
 80221c2:	2c00      	cmp	r4, #0
 80221c4:	d101      	bne.n	80221ca <__assert_func+0x1a>
 80221c6:	4b07      	ldr	r3, [pc, #28]	@ (80221e4 <__assert_func+0x34>)
 80221c8:	001c      	movs	r4, r3
 80221ca:	4907      	ldr	r1, [pc, #28]	@ (80221e8 <__assert_func+0x38>)
 80221cc:	9301      	str	r3, [sp, #4]
 80221ce:	9402      	str	r4, [sp, #8]
 80221d0:	002b      	movs	r3, r5
 80221d2:	9600      	str	r6, [sp, #0]
 80221d4:	f000 f866 	bl	80222a4 <fiprintf>
 80221d8:	f000 f874 	bl	80222c4 <abort>
 80221dc:	200003c8 	.word	0x200003c8
 80221e0:	08025289 	.word	0x08025289
 80221e4:	080252c4 	.word	0x080252c4
 80221e8:	08025296 	.word	0x08025296

080221ec <_calloc_r>:
 80221ec:	b570      	push	{r4, r5, r6, lr}
 80221ee:	0c0b      	lsrs	r3, r1, #16
 80221f0:	0c15      	lsrs	r5, r2, #16
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d11e      	bne.n	8022234 <_calloc_r+0x48>
 80221f6:	2d00      	cmp	r5, #0
 80221f8:	d10c      	bne.n	8022214 <_calloc_r+0x28>
 80221fa:	b289      	uxth	r1, r1
 80221fc:	b294      	uxth	r4, r2
 80221fe:	434c      	muls	r4, r1
 8022200:	0021      	movs	r1, r4
 8022202:	f7fe fe53 	bl	8020eac <_malloc_r>
 8022206:	1e05      	subs	r5, r0, #0
 8022208:	d01a      	beq.n	8022240 <_calloc_r+0x54>
 802220a:	0022      	movs	r2, r4
 802220c:	2100      	movs	r1, #0
 802220e:	f7fd fb0f 	bl	801f830 <memset>
 8022212:	e016      	b.n	8022242 <_calloc_r+0x56>
 8022214:	1c2b      	adds	r3, r5, #0
 8022216:	1c0c      	adds	r4, r1, #0
 8022218:	b289      	uxth	r1, r1
 802221a:	b292      	uxth	r2, r2
 802221c:	434a      	muls	r2, r1
 802221e:	b29b      	uxth	r3, r3
 8022220:	b2a1      	uxth	r1, r4
 8022222:	4359      	muls	r1, r3
 8022224:	0c14      	lsrs	r4, r2, #16
 8022226:	190c      	adds	r4, r1, r4
 8022228:	0c23      	lsrs	r3, r4, #16
 802222a:	d107      	bne.n	802223c <_calloc_r+0x50>
 802222c:	0424      	lsls	r4, r4, #16
 802222e:	b292      	uxth	r2, r2
 8022230:	4314      	orrs	r4, r2
 8022232:	e7e5      	b.n	8022200 <_calloc_r+0x14>
 8022234:	2d00      	cmp	r5, #0
 8022236:	d101      	bne.n	802223c <_calloc_r+0x50>
 8022238:	1c14      	adds	r4, r2, #0
 802223a:	e7ed      	b.n	8022218 <_calloc_r+0x2c>
 802223c:	230c      	movs	r3, #12
 802223e:	6003      	str	r3, [r0, #0]
 8022240:	2500      	movs	r5, #0
 8022242:	0028      	movs	r0, r5
 8022244:	bd70      	pop	{r4, r5, r6, pc}

08022246 <_realloc_r>:
 8022246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022248:	0006      	movs	r6, r0
 802224a:	000c      	movs	r4, r1
 802224c:	0015      	movs	r5, r2
 802224e:	2900      	cmp	r1, #0
 8022250:	d105      	bne.n	802225e <_realloc_r+0x18>
 8022252:	0011      	movs	r1, r2
 8022254:	f7fe fe2a 	bl	8020eac <_malloc_r>
 8022258:	0004      	movs	r4, r0
 802225a:	0020      	movs	r0, r4
 802225c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802225e:	2a00      	cmp	r2, #0
 8022260:	d103      	bne.n	802226a <_realloc_r+0x24>
 8022262:	f7fe fa53 	bl	802070c <_free_r>
 8022266:	2400      	movs	r4, #0
 8022268:	e7f7      	b.n	802225a <_realloc_r+0x14>
 802226a:	f000 f832 	bl	80222d2 <_malloc_usable_size_r>
 802226e:	0007      	movs	r7, r0
 8022270:	4285      	cmp	r5, r0
 8022272:	d802      	bhi.n	802227a <_realloc_r+0x34>
 8022274:	0843      	lsrs	r3, r0, #1
 8022276:	42ab      	cmp	r3, r5
 8022278:	d3ef      	bcc.n	802225a <_realloc_r+0x14>
 802227a:	0029      	movs	r1, r5
 802227c:	0030      	movs	r0, r6
 802227e:	f7fe fe15 	bl	8020eac <_malloc_r>
 8022282:	9001      	str	r0, [sp, #4]
 8022284:	2800      	cmp	r0, #0
 8022286:	d0ee      	beq.n	8022266 <_realloc_r+0x20>
 8022288:	002a      	movs	r2, r5
 802228a:	42bd      	cmp	r5, r7
 802228c:	d900      	bls.n	8022290 <_realloc_r+0x4a>
 802228e:	003a      	movs	r2, r7
 8022290:	0021      	movs	r1, r4
 8022292:	9801      	ldr	r0, [sp, #4]
 8022294:	f7fd fba8 	bl	801f9e8 <memcpy>
 8022298:	0021      	movs	r1, r4
 802229a:	0030      	movs	r0, r6
 802229c:	f7fe fa36 	bl	802070c <_free_r>
 80222a0:	9c01      	ldr	r4, [sp, #4]
 80222a2:	e7da      	b.n	802225a <_realloc_r+0x14>

080222a4 <fiprintf>:
 80222a4:	b40e      	push	{r1, r2, r3}
 80222a6:	b517      	push	{r0, r1, r2, r4, lr}
 80222a8:	4c05      	ldr	r4, [pc, #20]	@ (80222c0 <fiprintf+0x1c>)
 80222aa:	ab05      	add	r3, sp, #20
 80222ac:	cb04      	ldmia	r3!, {r2}
 80222ae:	0001      	movs	r1, r0
 80222b0:	6820      	ldr	r0, [r4, #0]
 80222b2:	9301      	str	r3, [sp, #4]
 80222b4:	f7ff fcfa 	bl	8021cac <_vfiprintf_r>
 80222b8:	bc1e      	pop	{r1, r2, r3, r4}
 80222ba:	bc08      	pop	{r3}
 80222bc:	b003      	add	sp, #12
 80222be:	4718      	bx	r3
 80222c0:	200003c8 	.word	0x200003c8

080222c4 <abort>:
 80222c4:	2006      	movs	r0, #6
 80222c6:	b510      	push	{r4, lr}
 80222c8:	f000 f834 	bl	8022334 <raise>
 80222cc:	2001      	movs	r0, #1
 80222ce:	f7ea ff75 	bl	800d1bc <_exit>

080222d2 <_malloc_usable_size_r>:
 80222d2:	1f0b      	subs	r3, r1, #4
 80222d4:	681b      	ldr	r3, [r3, #0]
 80222d6:	1f18      	subs	r0, r3, #4
 80222d8:	2b00      	cmp	r3, #0
 80222da:	da01      	bge.n	80222e0 <_malloc_usable_size_r+0xe>
 80222dc:	580b      	ldr	r3, [r1, r0]
 80222de:	18c0      	adds	r0, r0, r3
 80222e0:	4770      	bx	lr

080222e2 <_raise_r>:
 80222e2:	b570      	push	{r4, r5, r6, lr}
 80222e4:	0004      	movs	r4, r0
 80222e6:	000d      	movs	r5, r1
 80222e8:	291f      	cmp	r1, #31
 80222ea:	d904      	bls.n	80222f6 <_raise_r+0x14>
 80222ec:	2316      	movs	r3, #22
 80222ee:	6003      	str	r3, [r0, #0]
 80222f0:	2001      	movs	r0, #1
 80222f2:	4240      	negs	r0, r0
 80222f4:	bd70      	pop	{r4, r5, r6, pc}
 80222f6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d004      	beq.n	8022306 <_raise_r+0x24>
 80222fc:	008a      	lsls	r2, r1, #2
 80222fe:	189b      	adds	r3, r3, r2
 8022300:	681a      	ldr	r2, [r3, #0]
 8022302:	2a00      	cmp	r2, #0
 8022304:	d108      	bne.n	8022318 <_raise_r+0x36>
 8022306:	0020      	movs	r0, r4
 8022308:	f000 f830 	bl	802236c <_getpid_r>
 802230c:	002a      	movs	r2, r5
 802230e:	0001      	movs	r1, r0
 8022310:	0020      	movs	r0, r4
 8022312:	f000 f819 	bl	8022348 <_kill_r>
 8022316:	e7ed      	b.n	80222f4 <_raise_r+0x12>
 8022318:	2a01      	cmp	r2, #1
 802231a:	d009      	beq.n	8022330 <_raise_r+0x4e>
 802231c:	1c51      	adds	r1, r2, #1
 802231e:	d103      	bne.n	8022328 <_raise_r+0x46>
 8022320:	2316      	movs	r3, #22
 8022322:	6003      	str	r3, [r0, #0]
 8022324:	2001      	movs	r0, #1
 8022326:	e7e5      	b.n	80222f4 <_raise_r+0x12>
 8022328:	2100      	movs	r1, #0
 802232a:	0028      	movs	r0, r5
 802232c:	6019      	str	r1, [r3, #0]
 802232e:	4790      	blx	r2
 8022330:	2000      	movs	r0, #0
 8022332:	e7df      	b.n	80222f4 <_raise_r+0x12>

08022334 <raise>:
 8022334:	b510      	push	{r4, lr}
 8022336:	4b03      	ldr	r3, [pc, #12]	@ (8022344 <raise+0x10>)
 8022338:	0001      	movs	r1, r0
 802233a:	6818      	ldr	r0, [r3, #0]
 802233c:	f7ff ffd1 	bl	80222e2 <_raise_r>
 8022340:	bd10      	pop	{r4, pc}
 8022342:	46c0      	nop			@ (mov r8, r8)
 8022344:	200003c8 	.word	0x200003c8

08022348 <_kill_r>:
 8022348:	2300      	movs	r3, #0
 802234a:	b570      	push	{r4, r5, r6, lr}
 802234c:	4d06      	ldr	r5, [pc, #24]	@ (8022368 <_kill_r+0x20>)
 802234e:	0004      	movs	r4, r0
 8022350:	0008      	movs	r0, r1
 8022352:	0011      	movs	r1, r2
 8022354:	602b      	str	r3, [r5, #0]
 8022356:	f7ea ff21 	bl	800d19c <_kill>
 802235a:	1c43      	adds	r3, r0, #1
 802235c:	d103      	bne.n	8022366 <_kill_r+0x1e>
 802235e:	682b      	ldr	r3, [r5, #0]
 8022360:	2b00      	cmp	r3, #0
 8022362:	d000      	beq.n	8022366 <_kill_r+0x1e>
 8022364:	6023      	str	r3, [r4, #0]
 8022366:	bd70      	pop	{r4, r5, r6, pc}
 8022368:	200038f4 	.word	0x200038f4

0802236c <_getpid_r>:
 802236c:	b510      	push	{r4, lr}
 802236e:	f7ea ff0f 	bl	800d190 <_getpid>
 8022372:	bd10      	pop	{r4, pc}

08022374 <expf>:
 8022374:	b570      	push	{r4, r5, r6, lr}
 8022376:	1c04      	adds	r4, r0, #0
 8022378:	f000 f8e6 	bl	8022548 <__ieee754_expf>
 802237c:	1c05      	adds	r5, r0, #0
 802237e:	1c20      	adds	r0, r4, #0
 8022380:	f000 f83c 	bl	80223fc <finitef>
 8022384:	2800      	cmp	r0, #0
 8022386:	d00b      	beq.n	80223a0 <expf+0x2c>
 8022388:	490c      	ldr	r1, [pc, #48]	@ (80223bc <expf+0x48>)
 802238a:	1c20      	adds	r0, r4, #0
 802238c:	f7de f8e4 	bl	8000558 <__aeabi_fcmpgt>
 8022390:	2800      	cmp	r0, #0
 8022392:	d007      	beq.n	80223a4 <expf+0x30>
 8022394:	f7fd faf0 	bl	801f978 <__errno>
 8022398:	25ff      	movs	r5, #255	@ 0xff
 802239a:	2322      	movs	r3, #34	@ 0x22
 802239c:	05ed      	lsls	r5, r5, #23
 802239e:	6003      	str	r3, [r0, #0]
 80223a0:	1c28      	adds	r0, r5, #0
 80223a2:	bd70      	pop	{r4, r5, r6, pc}
 80223a4:	4906      	ldr	r1, [pc, #24]	@ (80223c0 <expf+0x4c>)
 80223a6:	1c20      	adds	r0, r4, #0
 80223a8:	f7de f8c2 	bl	8000530 <__aeabi_fcmplt>
 80223ac:	2800      	cmp	r0, #0
 80223ae:	d0f7      	beq.n	80223a0 <expf+0x2c>
 80223b0:	f7fd fae2 	bl	801f978 <__errno>
 80223b4:	2322      	movs	r3, #34	@ 0x22
 80223b6:	2500      	movs	r5, #0
 80223b8:	6003      	str	r3, [r0, #0]
 80223ba:	e7f1      	b.n	80223a0 <expf+0x2c>
 80223bc:	42b17217 	.word	0x42b17217
 80223c0:	c2cff1b5 	.word	0xc2cff1b5

080223c4 <sqrtf>:
 80223c4:	b570      	push	{r4, r5, r6, lr}
 80223c6:	1c05      	adds	r5, r0, #0
 80223c8:	f000 f822 	bl	8022410 <__ieee754_sqrtf>
 80223cc:	1c29      	adds	r1, r5, #0
 80223ce:	1c04      	adds	r4, r0, #0
 80223d0:	1c28      	adds	r0, r5, #0
 80223d2:	f7df f8c7 	bl	8001564 <__aeabi_fcmpun>
 80223d6:	2800      	cmp	r0, #0
 80223d8:	d10e      	bne.n	80223f8 <sqrtf+0x34>
 80223da:	2100      	movs	r1, #0
 80223dc:	1c28      	adds	r0, r5, #0
 80223de:	f7de f8a7 	bl	8000530 <__aeabi_fcmplt>
 80223e2:	2800      	cmp	r0, #0
 80223e4:	d008      	beq.n	80223f8 <sqrtf+0x34>
 80223e6:	f7fd fac7 	bl	801f978 <__errno>
 80223ea:	2321      	movs	r3, #33	@ 0x21
 80223ec:	2100      	movs	r1, #0
 80223ee:	6003      	str	r3, [r0, #0]
 80223f0:	1c08      	adds	r0, r1, #0
 80223f2:	f7de fbef 	bl	8000bd4 <__aeabi_fdiv>
 80223f6:	1c04      	adds	r4, r0, #0
 80223f8:	1c20      	adds	r0, r4, #0
 80223fa:	bd70      	pop	{r4, r5, r6, pc}

080223fc <finitef>:
 80223fc:	22ff      	movs	r2, #255	@ 0xff
 80223fe:	0043      	lsls	r3, r0, #1
 8022400:	085b      	lsrs	r3, r3, #1
 8022402:	2001      	movs	r0, #1
 8022404:	05d2      	lsls	r2, r2, #23
 8022406:	4293      	cmp	r3, r2
 8022408:	db00      	blt.n	802240c <finitef+0x10>
 802240a:	2000      	movs	r0, #0
 802240c:	4770      	bx	lr
	...

08022410 <__ieee754_sqrtf>:
 8022410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022412:	0003      	movs	r3, r0
 8022414:	0042      	lsls	r2, r0, #1
 8022416:	1c04      	adds	r4, r0, #0
 8022418:	20ff      	movs	r0, #255	@ 0xff
 802241a:	0852      	lsrs	r2, r2, #1
 802241c:	05c0      	lsls	r0, r0, #23
 802241e:	4282      	cmp	r2, r0
 8022420:	d30a      	bcc.n	8022438 <__ieee754_sqrtf+0x28>
 8022422:	1c21      	adds	r1, r4, #0
 8022424:	1c20      	adds	r0, r4, #0
 8022426:	f7de fdbb 	bl	8000fa0 <__aeabi_fmul>
 802242a:	1c01      	adds	r1, r0, #0
 802242c:	1c20      	adds	r0, r4, #0
 802242e:	f7de fa47 	bl	80008c0 <__aeabi_fadd>
 8022432:	1c04      	adds	r4, r0, #0
 8022434:	1c20      	adds	r0, r4, #0
 8022436:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022438:	2a00      	cmp	r2, #0
 802243a:	d0fb      	beq.n	8022434 <__ieee754_sqrtf+0x24>
 802243c:	2c00      	cmp	r4, #0
 802243e:	da07      	bge.n	8022450 <__ieee754_sqrtf+0x40>
 8022440:	1c21      	adds	r1, r4, #0
 8022442:	1c20      	adds	r0, r4, #0
 8022444:	f7de feea 	bl	800121c <__aeabi_fsub>
 8022448:	1c01      	adds	r1, r0, #0
 802244a:	f7de fbc3 	bl	8000bd4 <__aeabi_fdiv>
 802244e:	e7f0      	b.n	8022432 <__ieee754_sqrtf+0x22>
 8022450:	0022      	movs	r2, r4
 8022452:	15e1      	asrs	r1, r4, #23
 8022454:	4002      	ands	r2, r0
 8022456:	4204      	tst	r4, r0
 8022458:	d046      	beq.n	80224e8 <__ieee754_sqrtf+0xd8>
 802245a:	2280      	movs	r2, #128	@ 0x80
 802245c:	000f      	movs	r7, r1
 802245e:	025b      	lsls	r3, r3, #9
 8022460:	0a5b      	lsrs	r3, r3, #9
 8022462:	0412      	lsls	r2, r2, #16
 8022464:	3f7f      	subs	r7, #127	@ 0x7f
 8022466:	4313      	orrs	r3, r2
 8022468:	07c9      	lsls	r1, r1, #31
 802246a:	d400      	bmi.n	802246e <__ieee754_sqrtf+0x5e>
 802246c:	005b      	lsls	r3, r3, #1
 802246e:	2400      	movs	r4, #0
 8022470:	2180      	movs	r1, #128	@ 0x80
 8022472:	2019      	movs	r0, #25
 8022474:	0026      	movs	r6, r4
 8022476:	107f      	asrs	r7, r7, #1
 8022478:	005b      	lsls	r3, r3, #1
 802247a:	0449      	lsls	r1, r1, #17
 802247c:	1875      	adds	r5, r6, r1
 802247e:	001a      	movs	r2, r3
 8022480:	429d      	cmp	r5, r3
 8022482:	dc02      	bgt.n	802248a <__ieee754_sqrtf+0x7a>
 8022484:	186e      	adds	r6, r5, r1
 8022486:	1b5a      	subs	r2, r3, r5
 8022488:	1864      	adds	r4, r4, r1
 802248a:	3801      	subs	r0, #1
 802248c:	0053      	lsls	r3, r2, #1
 802248e:	0849      	lsrs	r1, r1, #1
 8022490:	2800      	cmp	r0, #0
 8022492:	d1f3      	bne.n	802247c <__ieee754_sqrtf+0x6c>
 8022494:	2a00      	cmp	r2, #0
 8022496:	d019      	beq.n	80224cc <__ieee754_sqrtf+0xbc>
 8022498:	4d17      	ldr	r5, [pc, #92]	@ (80224f8 <__ieee754_sqrtf+0xe8>)
 802249a:	4e18      	ldr	r6, [pc, #96]	@ (80224fc <__ieee754_sqrtf+0xec>)
 802249c:	6828      	ldr	r0, [r5, #0]
 802249e:	6831      	ldr	r1, [r6, #0]
 80224a0:	682b      	ldr	r3, [r5, #0]
 80224a2:	9301      	str	r3, [sp, #4]
 80224a4:	f7de feba 	bl	800121c <__aeabi_fsub>
 80224a8:	1c01      	adds	r1, r0, #0
 80224aa:	9801      	ldr	r0, [sp, #4]
 80224ac:	f7de f84a 	bl	8000544 <__aeabi_fcmple>
 80224b0:	2800      	cmp	r0, #0
 80224b2:	d00b      	beq.n	80224cc <__ieee754_sqrtf+0xbc>
 80224b4:	6828      	ldr	r0, [r5, #0]
 80224b6:	6831      	ldr	r1, [r6, #0]
 80224b8:	f7de fa02 	bl	80008c0 <__aeabi_fadd>
 80224bc:	682d      	ldr	r5, [r5, #0]
 80224be:	1c01      	adds	r1, r0, #0
 80224c0:	1c28      	adds	r0, r5, #0
 80224c2:	f7de f835 	bl	8000530 <__aeabi_fcmplt>
 80224c6:	2800      	cmp	r0, #0
 80224c8:	d011      	beq.n	80224ee <__ieee754_sqrtf+0xde>
 80224ca:	3402      	adds	r4, #2
 80224cc:	23fc      	movs	r3, #252	@ 0xfc
 80224ce:	1064      	asrs	r4, r4, #1
 80224d0:	059b      	lsls	r3, r3, #22
 80224d2:	18e3      	adds	r3, r4, r3
 80224d4:	05fc      	lsls	r4, r7, #23
 80224d6:	18e4      	adds	r4, r4, r3
 80224d8:	e7ac      	b.n	8022434 <__ieee754_sqrtf+0x24>
 80224da:	005b      	lsls	r3, r3, #1
 80224dc:	3201      	adds	r2, #1
 80224de:	4203      	tst	r3, r0
 80224e0:	d0fb      	beq.n	80224da <__ieee754_sqrtf+0xca>
 80224e2:	3a01      	subs	r2, #1
 80224e4:	1a89      	subs	r1, r1, r2
 80224e6:	e7b8      	b.n	802245a <__ieee754_sqrtf+0x4a>
 80224e8:	2080      	movs	r0, #128	@ 0x80
 80224ea:	0400      	lsls	r0, r0, #16
 80224ec:	e7f7      	b.n	80224de <__ieee754_sqrtf+0xce>
 80224ee:	2301      	movs	r3, #1
 80224f0:	3401      	adds	r4, #1
 80224f2:	439c      	bics	r4, r3
 80224f4:	e7ea      	b.n	80224cc <__ieee754_sqrtf+0xbc>
 80224f6:	46c0      	nop			@ (mov r8, r8)
 80224f8:	2000041c 	.word	0x2000041c
 80224fc:	20000418 	.word	0x20000418

08022500 <roundf>:
 8022500:	0dc3      	lsrs	r3, r0, #23
 8022502:	b2db      	uxtb	r3, r3
 8022504:	3b7f      	subs	r3, #127	@ 0x7f
 8022506:	0002      	movs	r2, r0
 8022508:	b510      	push	{r4, lr}
 802250a:	2b16      	cmp	r3, #22
 802250c:	dc13      	bgt.n	8022536 <roundf+0x36>
 802250e:	2b00      	cmp	r3, #0
 8022510:	da07      	bge.n	8022522 <roundf+0x22>
 8022512:	0fc2      	lsrs	r2, r0, #31
 8022514:	07d0      	lsls	r0, r2, #31
 8022516:	3301      	adds	r3, #1
 8022518:	d102      	bne.n	8022520 <roundf+0x20>
 802251a:	23fe      	movs	r3, #254	@ 0xfe
 802251c:	059b      	lsls	r3, r3, #22
 802251e:	4318      	orrs	r0, r3
 8022520:	bd10      	pop	{r4, pc}
 8022522:	4908      	ldr	r1, [pc, #32]	@ (8022544 <roundf+0x44>)
 8022524:	4119      	asrs	r1, r3
 8022526:	4208      	tst	r0, r1
 8022528:	d0fa      	beq.n	8022520 <roundf+0x20>
 802252a:	2080      	movs	r0, #128	@ 0x80
 802252c:	03c0      	lsls	r0, r0, #15
 802252e:	4118      	asrs	r0, r3
 8022530:	1880      	adds	r0, r0, r2
 8022532:	4388      	bics	r0, r1
 8022534:	e7f4      	b.n	8022520 <roundf+0x20>
 8022536:	2b80      	cmp	r3, #128	@ 0x80
 8022538:	d1f2      	bne.n	8022520 <roundf+0x20>
 802253a:	1c01      	adds	r1, r0, #0
 802253c:	f7de f9c0 	bl	80008c0 <__aeabi_fadd>
 8022540:	e7ee      	b.n	8022520 <roundf+0x20>
 8022542:	46c0      	nop			@ (mov r8, r8)
 8022544:	007fffff 	.word	0x007fffff

08022548 <__ieee754_expf>:
 8022548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802254a:	21ff      	movs	r1, #255	@ 0xff
 802254c:	0043      	lsls	r3, r0, #1
 802254e:	1c04      	adds	r4, r0, #0
 8022550:	085b      	lsrs	r3, r3, #1
 8022552:	05c9      	lsls	r1, r1, #23
 8022554:	428b      	cmp	r3, r1
 8022556:	d904      	bls.n	8022562 <__ieee754_expf+0x1a>
 8022558:	1c01      	adds	r1, r0, #0
 802255a:	1c20      	adds	r0, r4, #0
 802255c:	f7de f9b0 	bl	80008c0 <__aeabi_fadd>
 8022560:	e00d      	b.n	802257e <__ieee754_expf+0x36>
 8022562:	0fc6      	lsrs	r6, r0, #31
 8022564:	428b      	cmp	r3, r1
 8022566:	d104      	bne.n	8022572 <__ieee754_expf+0x2a>
 8022568:	2e00      	cmp	r6, #0
 802256a:	d000      	beq.n	802256e <__ieee754_expf+0x26>
 802256c:	e0ba      	b.n	80226e4 <__ieee754_expf+0x19c>
 802256e:	1c20      	adds	r0, r4, #0
 8022570:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022572:	495d      	ldr	r1, [pc, #372]	@ (80226e8 <__ieee754_expf+0x1a0>)
 8022574:	4288      	cmp	r0, r1
 8022576:	dd04      	ble.n	8022582 <__ieee754_expf+0x3a>
 8022578:	2000      	movs	r0, #0
 802257a:	f000 f8f1 	bl	8022760 <__math_oflowf>
 802257e:	1c04      	adds	r4, r0, #0
 8022580:	e7f5      	b.n	802256e <__ieee754_expf+0x26>
 8022582:	2800      	cmp	r0, #0
 8022584:	da06      	bge.n	8022594 <__ieee754_expf+0x4c>
 8022586:	4a59      	ldr	r2, [pc, #356]	@ (80226ec <__ieee754_expf+0x1a4>)
 8022588:	4293      	cmp	r3, r2
 802258a:	d903      	bls.n	8022594 <__ieee754_expf+0x4c>
 802258c:	2000      	movs	r0, #0
 802258e:	f000 f8e1 	bl	8022754 <__math_uflowf>
 8022592:	e7f4      	b.n	802257e <__ieee754_expf+0x36>
 8022594:	4a56      	ldr	r2, [pc, #344]	@ (80226f0 <__ieee754_expf+0x1a8>)
 8022596:	4293      	cmp	r3, r2
 8022598:	d96e      	bls.n	8022678 <__ieee754_expf+0x130>
 802259a:	4a56      	ldr	r2, [pc, #344]	@ (80226f4 <__ieee754_expf+0x1ac>)
 802259c:	00b5      	lsls	r5, r6, #2
 802259e:	4293      	cmp	r3, r2
 80225a0:	d84e      	bhi.n	8022640 <__ieee754_expf+0xf8>
 80225a2:	4b55      	ldr	r3, [pc, #340]	@ (80226f8 <__ieee754_expf+0x1b0>)
 80225a4:	1c20      	adds	r0, r4, #0
 80225a6:	5959      	ldr	r1, [r3, r5]
 80225a8:	f7de fe38 	bl	800121c <__aeabi_fsub>
 80225ac:	4b53      	ldr	r3, [pc, #332]	@ (80226fc <__ieee754_expf+0x1b4>)
 80225ae:	1c07      	adds	r7, r0, #0
 80225b0:	595b      	ldr	r3, [r3, r5]
 80225b2:	2501      	movs	r5, #1
 80225b4:	1bad      	subs	r5, r5, r6
 80225b6:	9300      	str	r3, [sp, #0]
 80225b8:	1bad      	subs	r5, r5, r6
 80225ba:	9900      	ldr	r1, [sp, #0]
 80225bc:	1c38      	adds	r0, r7, #0
 80225be:	f7de fe2d 	bl	800121c <__aeabi_fsub>
 80225c2:	1c04      	adds	r4, r0, #0
 80225c4:	1c21      	adds	r1, r4, #0
 80225c6:	1c20      	adds	r0, r4, #0
 80225c8:	f7de fcea 	bl	8000fa0 <__aeabi_fmul>
 80225cc:	494c      	ldr	r1, [pc, #304]	@ (8022700 <__ieee754_expf+0x1b8>)
 80225ce:	1c06      	adds	r6, r0, #0
 80225d0:	f7de fce6 	bl	8000fa0 <__aeabi_fmul>
 80225d4:	494b      	ldr	r1, [pc, #300]	@ (8022704 <__ieee754_expf+0x1bc>)
 80225d6:	f7de fe21 	bl	800121c <__aeabi_fsub>
 80225da:	1c31      	adds	r1, r6, #0
 80225dc:	f7de fce0 	bl	8000fa0 <__aeabi_fmul>
 80225e0:	4949      	ldr	r1, [pc, #292]	@ (8022708 <__ieee754_expf+0x1c0>)
 80225e2:	f7de f96d 	bl	80008c0 <__aeabi_fadd>
 80225e6:	1c31      	adds	r1, r6, #0
 80225e8:	f7de fcda 	bl	8000fa0 <__aeabi_fmul>
 80225ec:	4947      	ldr	r1, [pc, #284]	@ (802270c <__ieee754_expf+0x1c4>)
 80225ee:	f7de fe15 	bl	800121c <__aeabi_fsub>
 80225f2:	1c31      	adds	r1, r6, #0
 80225f4:	f7de fcd4 	bl	8000fa0 <__aeabi_fmul>
 80225f8:	4945      	ldr	r1, [pc, #276]	@ (8022710 <__ieee754_expf+0x1c8>)
 80225fa:	f7de f961 	bl	80008c0 <__aeabi_fadd>
 80225fe:	1c31      	adds	r1, r6, #0
 8022600:	f7de fcce 	bl	8000fa0 <__aeabi_fmul>
 8022604:	1c01      	adds	r1, r0, #0
 8022606:	1c20      	adds	r0, r4, #0
 8022608:	f7de fe08 	bl	800121c <__aeabi_fsub>
 802260c:	1c01      	adds	r1, r0, #0
 802260e:	1c06      	adds	r6, r0, #0
 8022610:	1c20      	adds	r0, r4, #0
 8022612:	f7de fcc5 	bl	8000fa0 <__aeabi_fmul>
 8022616:	9001      	str	r0, [sp, #4]
 8022618:	2d00      	cmp	r5, #0
 802261a:	d140      	bne.n	802269e <__ieee754_expf+0x156>
 802261c:	2180      	movs	r1, #128	@ 0x80
 802261e:	1c30      	adds	r0, r6, #0
 8022620:	05c9      	lsls	r1, r1, #23
 8022622:	f7de fdfb 	bl	800121c <__aeabi_fsub>
 8022626:	1c01      	adds	r1, r0, #0
 8022628:	9801      	ldr	r0, [sp, #4]
 802262a:	f7de fad3 	bl	8000bd4 <__aeabi_fdiv>
 802262e:	1c21      	adds	r1, r4, #0
 8022630:	f7de fdf4 	bl	800121c <__aeabi_fsub>
 8022634:	1c01      	adds	r1, r0, #0
 8022636:	20fe      	movs	r0, #254	@ 0xfe
 8022638:	0580      	lsls	r0, r0, #22
 802263a:	f7de fdef 	bl	800121c <__aeabi_fsub>
 802263e:	e79e      	b.n	802257e <__ieee754_expf+0x36>
 8022640:	4934      	ldr	r1, [pc, #208]	@ (8022714 <__ieee754_expf+0x1cc>)
 8022642:	1c20      	adds	r0, r4, #0
 8022644:	f7de fcac 	bl	8000fa0 <__aeabi_fmul>
 8022648:	4b33      	ldr	r3, [pc, #204]	@ (8022718 <__ieee754_expf+0x1d0>)
 802264a:	5959      	ldr	r1, [r3, r5]
 802264c:	f7de f938 	bl	80008c0 <__aeabi_fadd>
 8022650:	f7de ff9e 	bl	8001590 <__aeabi_f2iz>
 8022654:	0005      	movs	r5, r0
 8022656:	f7de ffbb 	bl	80015d0 <__aeabi_i2f>
 802265a:	4930      	ldr	r1, [pc, #192]	@ (802271c <__ieee754_expf+0x1d4>)
 802265c:	1c06      	adds	r6, r0, #0
 802265e:	f7de fc9f 	bl	8000fa0 <__aeabi_fmul>
 8022662:	1c01      	adds	r1, r0, #0
 8022664:	1c20      	adds	r0, r4, #0
 8022666:	f7de fdd9 	bl	800121c <__aeabi_fsub>
 802266a:	492d      	ldr	r1, [pc, #180]	@ (8022720 <__ieee754_expf+0x1d8>)
 802266c:	1c07      	adds	r7, r0, #0
 802266e:	1c30      	adds	r0, r6, #0
 8022670:	f7de fc96 	bl	8000fa0 <__aeabi_fmul>
 8022674:	9000      	str	r0, [sp, #0]
 8022676:	e7a0      	b.n	80225ba <__ieee754_expf+0x72>
 8022678:	22d0      	movs	r2, #208	@ 0xd0
 802267a:	0592      	lsls	r2, r2, #22
 802267c:	4293      	cmp	r3, r2
 802267e:	d20c      	bcs.n	802269a <__ieee754_expf+0x152>
 8022680:	4928      	ldr	r1, [pc, #160]	@ (8022724 <__ieee754_expf+0x1dc>)
 8022682:	1c20      	adds	r0, r4, #0
 8022684:	f7de f91c 	bl	80008c0 <__aeabi_fadd>
 8022688:	21fe      	movs	r1, #254	@ 0xfe
 802268a:	0589      	lsls	r1, r1, #22
 802268c:	f7dd ff64 	bl	8000558 <__aeabi_fcmpgt>
 8022690:	1e05      	subs	r5, r0, #0
 8022692:	d097      	beq.n	80225c4 <__ieee754_expf+0x7c>
 8022694:	21fe      	movs	r1, #254	@ 0xfe
 8022696:	0589      	lsls	r1, r1, #22
 8022698:	e75f      	b.n	802255a <__ieee754_expf+0x12>
 802269a:	2500      	movs	r5, #0
 802269c:	e792      	b.n	80225c4 <__ieee754_expf+0x7c>
 802269e:	2080      	movs	r0, #128	@ 0x80
 80226a0:	1c31      	adds	r1, r6, #0
 80226a2:	05c0      	lsls	r0, r0, #23
 80226a4:	f7de fdba 	bl	800121c <__aeabi_fsub>
 80226a8:	1c01      	adds	r1, r0, #0
 80226aa:	9801      	ldr	r0, [sp, #4]
 80226ac:	f7de fa92 	bl	8000bd4 <__aeabi_fdiv>
 80226b0:	1c01      	adds	r1, r0, #0
 80226b2:	9800      	ldr	r0, [sp, #0]
 80226b4:	f7de fdb2 	bl	800121c <__aeabi_fsub>
 80226b8:	1c39      	adds	r1, r7, #0
 80226ba:	f7de fdaf 	bl	800121c <__aeabi_fsub>
 80226be:	1c01      	adds	r1, r0, #0
 80226c0:	20fe      	movs	r0, #254	@ 0xfe
 80226c2:	0580      	lsls	r0, r0, #22
 80226c4:	f7de fdaa 	bl	800121c <__aeabi_fsub>
 80226c8:	002b      	movs	r3, r5
 80226ca:	337d      	adds	r3, #125	@ 0x7d
 80226cc:	db02      	blt.n	80226d4 <__ieee754_expf+0x18c>
 80226ce:	05ec      	lsls	r4, r5, #23
 80226d0:	1824      	adds	r4, r4, r0
 80226d2:	e74c      	b.n	802256e <__ieee754_expf+0x26>
 80226d4:	21d8      	movs	r1, #216	@ 0xd8
 80226d6:	3564      	adds	r5, #100	@ 0x64
 80226d8:	05ed      	lsls	r5, r5, #23
 80226da:	1828      	adds	r0, r5, r0
 80226dc:	0509      	lsls	r1, r1, #20
 80226de:	f7de fc5f 	bl	8000fa0 <__aeabi_fmul>
 80226e2:	e74c      	b.n	802257e <__ieee754_expf+0x36>
 80226e4:	2400      	movs	r4, #0
 80226e6:	e742      	b.n	802256e <__ieee754_expf+0x26>
 80226e8:	42b17217 	.word	0x42b17217
 80226ec:	42cff1b5 	.word	0x42cff1b5
 80226f0:	3eb17218 	.word	0x3eb17218
 80226f4:	3f851591 	.word	0x3f851591
 80226f8:	080252d0 	.word	0x080252d0
 80226fc:	080252c8 	.word	0x080252c8
 8022700:	3331bb4c 	.word	0x3331bb4c
 8022704:	35ddea0e 	.word	0x35ddea0e
 8022708:	388ab355 	.word	0x388ab355
 802270c:	3b360b61 	.word	0x3b360b61
 8022710:	3e2aaaab 	.word	0x3e2aaaab
 8022714:	3fb8aa3b 	.word	0x3fb8aa3b
 8022718:	080252d8 	.word	0x080252d8
 802271c:	3f317180 	.word	0x3f317180
 8022720:	3717f7d1 	.word	0x3717f7d1
 8022724:	7149f2ca 	.word	0x7149f2ca

08022728 <with_errnof>:
 8022728:	b570      	push	{r4, r5, r6, lr}
 802272a:	000d      	movs	r5, r1
 802272c:	1c04      	adds	r4, r0, #0
 802272e:	f7fd f923 	bl	801f978 <__errno>
 8022732:	6005      	str	r5, [r0, #0]
 8022734:	1c20      	adds	r0, r4, #0
 8022736:	bd70      	pop	{r4, r5, r6, pc}

08022738 <xflowf>:
 8022738:	b510      	push	{r4, lr}
 802273a:	1c0b      	adds	r3, r1, #0
 802273c:	2800      	cmp	r0, #0
 802273e:	d002      	beq.n	8022746 <xflowf+0xe>
 8022740:	2380      	movs	r3, #128	@ 0x80
 8022742:	061b      	lsls	r3, r3, #24
 8022744:	18cb      	adds	r3, r1, r3
 8022746:	1c18      	adds	r0, r3, #0
 8022748:	f7de fc2a 	bl	8000fa0 <__aeabi_fmul>
 802274c:	2122      	movs	r1, #34	@ 0x22
 802274e:	f7ff ffeb 	bl	8022728 <with_errnof>
 8022752:	bd10      	pop	{r4, pc}

08022754 <__math_uflowf>:
 8022754:	2180      	movs	r1, #128	@ 0x80
 8022756:	b510      	push	{r4, lr}
 8022758:	0549      	lsls	r1, r1, #21
 802275a:	f7ff ffed 	bl	8022738 <xflowf>
 802275e:	bd10      	pop	{r4, pc}

08022760 <__math_oflowf>:
 8022760:	21e0      	movs	r1, #224	@ 0xe0
 8022762:	b510      	push	{r4, lr}
 8022764:	05c9      	lsls	r1, r1, #23
 8022766:	f7ff ffe7 	bl	8022738 <xflowf>
 802276a:	bd10      	pop	{r4, pc}

0802276c <_init>:
 802276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802276e:	46c0      	nop			@ (mov r8, r8)
 8022770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022772:	bc08      	pop	{r3}
 8022774:	469e      	mov	lr, r3
 8022776:	4770      	bx	lr

08022778 <_fini>:
 8022778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802277a:	46c0      	nop			@ (mov r8, r8)
 802277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802277e:	bc08      	pop	{r3}
 8022780:	469e      	mov	lr, r3
 8022782:	4770      	bx	lr
