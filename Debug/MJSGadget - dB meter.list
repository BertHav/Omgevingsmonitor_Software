
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022fb4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e98  08023078  08023078  00024078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025f10  08025f10  00027420  2**0
                  CONTENTS
  4 .ARM          00000008  08025f10  08025f10  00026f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025f18  08025f18  00027420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025f18  08025f18  00026f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025f1c  08025f1c  00026f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08025f20  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000338c  20000420  08026340  00027420  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200037ac  08026340  000277ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033f2a  00000000  00000000  00027448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009331  00000000  00000000  0005b372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa8  00000000  00000000  000646a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fa4  00000000  00000000  00067150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022800  00000000  00000000  000690f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000414fc  00000000  00000000  0008b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04b4  00000000  00000000  000ccdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016d2a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ade0  00000000  00000000  0016d358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00178138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  001781a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017a721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802305c 	.word	0x0802305c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	0802305c 	.word	0x0802305c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08025124 	.word	0x08025124
 8000e0c:	08025164 	.word	0x08025164
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080251a0 	.word	0x080251a0
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fb3a 	bl	800fcdc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fb91 	bl	800fdac <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fb44 	bl	800fd38 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fac0 	bl	800fcdc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c faef 	bl	800fd54 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fad3 	bl	800fd38 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000a20 	.word	0x20000a20

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fa5a 	bl	800ec70 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a1c 	.word	0x20000a1c

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd90 	bl	80062fc <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fded 	bl	80063c0 <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000570 	.word	0x20000570
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000574 	.word	0x20000574

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a2c 	.word	0x20000a2c
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a38 	.word	0x20000a38
 8003884:	20000a3c 	.word	0x20000a3c

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a40 	.word	0x20000a40
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a60 	.word	0x20000a60
 80038f0:	20000a64 	.word	0x20000a64

080038f4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <ESP_GetHT+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <ESP_GetHT+0x24>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000568 	.word	0x20000568
 8003918:	2000056c 	.word	0x2000056c

0800391c <setHIDS>:
void setHIDS(float temp, float humid){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <setHIDS+0x20>)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <setHIDS+0x24>)
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000568 	.word	0x20000568
 8003940:	2000056c 	.word	0x2000056c

08003944 <setVOC>:
void setVOC(uint16_t voc){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	0002      	movs	r2, r0
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <setVOC+0x1c>)
 8003952:	1dba      	adds	r2, r7, #6
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	801a      	strh	r2, [r3, #0]
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000578 	.word	0x20000578

08003964 <setMic>:
void setMic(float dB){
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <setMic+0x18>)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	2000057c 	.word	0x2000057c

08003980 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	0002      	movs	r2, r0
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe1a 	bl	80015d0 <__aeabi_i2f>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	490d      	ldr	r1, [pc, #52]	@ (80039d4 <setPMsen50+0x54>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fd f917 	bl	8000bd4 <__aeabi_fdiv>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c1a      	adds	r2, r3, #0
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <setPMsen50+0x58>)
 80039ac:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fd fe0c 	bl	80015d0 <__aeabi_i2f>
 80039b8:	1c03      	adds	r3, r0, #0
 80039ba:	4906      	ldr	r1, [pc, #24]	@ (80039d4 <setPMsen50+0x54>)
 80039bc:	1c18      	adds	r0, r3, #0
 80039be:	f7fd f909 	bl	8000bd4 <__aeabi_fdiv>
 80039c2:	1c03      	adds	r3, r0, #0
 80039c4:	1c1a      	adds	r2, r3, #0
 80039c6:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <setPMsen50+0x5c>)
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	41200000 	.word	0x41200000
 80039d8:	20000580 	.word	0x20000580
 80039dc:	20000584 	.word	0x20000584

080039e0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0005      	movs	r5, r0
 80039e8:	000c      	movs	r4, r1
 80039ea:	0010      	movs	r0, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1c2a      	adds	r2, r5, #0
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	003b      	movs	r3, r7
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fd fde0 	bl	80015d0 <__aeabi_i2f>
 8003a10:	1c03      	adds	r3, r0, #0
 8003a12:	491d      	ldr	r1, [pc, #116]	@ (8003a88 <setPMs+0xa8>)
 8003a14:	1c18      	adds	r0, r3, #0
 8003a16:	f7fd f8dd 	bl	8000bd4 <__aeabi_fdiv>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	1c1a      	adds	r2, r3, #0
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <setPMs+0xac>)
 8003a20:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fd fdd2 	bl	80015d0 <__aeabi_i2f>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	4916      	ldr	r1, [pc, #88]	@ (8003a88 <setPMs+0xa8>)
 8003a30:	1c18      	adds	r0, r3, #0
 8003a32:	f7fd f8cf 	bl	8000bd4 <__aeabi_fdiv>
 8003a36:	1c03      	adds	r3, r0, #0
 8003a38:	1c1a      	adds	r2, r3, #0
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <setPMs+0xb0>)
 8003a3c:	601a      	str	r2, [r3, #0]
  VOCIndex = voc / 10.0f;
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fd fdc4 	bl	80015d0 <__aeabi_i2f>
 8003a48:	1c03      	adds	r3, r0, #0
 8003a4a:	490f      	ldr	r1, [pc, #60]	@ (8003a88 <setPMs+0xa8>)
 8003a4c:	1c18      	adds	r0, r3, #0
 8003a4e:	f7fd f8c1 	bl	8000bd4 <__aeabi_fdiv>
 8003a52:	1c03      	adds	r3, r0, #0
 8003a54:	1c18      	adds	r0, r3, #0
 8003a56:	f7fc fde1 	bl	800061c <__aeabi_f2uiz>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <setPMs+0xb4>)
 8003a60:	801a      	strh	r2, [r3, #0]
  airNOx = nox / 10.0f;
 8003a62:	003b      	movs	r3, r7
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fd fdb2 	bl	80015d0 <__aeabi_i2f>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	4906      	ldr	r1, [pc, #24]	@ (8003a88 <setPMs+0xa8>)
 8003a70:	1c18      	adds	r0, r3, #0
 8003a72:	f7fd f8af 	bl	8000bd4 <__aeabi_fdiv>
 8003a76:	1c03      	adds	r3, r0, #0
 8003a78:	1c1a      	adds	r2, r3, #0
 8003a7a:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <setPMs+0xb8>)
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bdb0      	pop	{r4, r5, r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	41200000 	.word	0x41200000
 8003a8c:	20000580 	.word	0x20000580
 8003a90:	20000584 	.word	0x20000584
 8003a94:	20000578 	.word	0x20000578
 8003a98:	20000588 	.word	0x20000588

08003a9c <SetConfigMode>:

void SetConfigMode(){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003aa0:	4b02      	ldr	r3, [pc, #8]	@ (8003aac <SetConfigMode+0x10>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	2000054b 	.word	0x2000054b

08003ab0 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003ab4:	f00b f926 	bl	800ed04 <HAL_GetUIDw0>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <ESP_GetUID+0x28>)
 8003abc:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003abe:	f00b f92b 	bl	800ed18 <HAL_GetUIDw1>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <ESP_GetUID+0x28>)
 8003ac6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003ac8:	f00b f930 	bl	800ed2c <HAL_GetUIDw2>
 8003acc:	0002      	movs	r2, r0
 8003ace:	4b02      	ldr	r3, [pc, #8]	@ (8003ad8 <ESP_GetUID+0x28>)
 8003ad0:	609a      	str	r2, [r3, #8]
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000554 	.word	0x20000554

08003adc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003ae4:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <ESP_Init+0x2c>)
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <ESP_Init+0x30>)
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003af0:	f7ff ffde 	bl	8003ab0 <ESP_GetUID>
  beurs = checkEEprom();
 8003af4:	f7ff fe92 	bl	800381c <checkEEprom>
 8003af8:	0003      	movs	r3, r0
 8003afa:	001a      	movs	r2, r3
 8003afc:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <ESP_Init+0x34>)
 8003afe:	701a      	strb	r2, [r3, #0]
}
 8003b00:	46c0      	nop			@ (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000440 	.word	0x20000440
 8003b0c:	2000002c 	.word	0x2000002c
 8003b10:	2000054e 	.word	0x2000054e

08003b14 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	000a      	movs	r2, r1
 8003b1e:	1cbb      	adds	r3, r7, #2
 8003b20:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a10      	ldr	r2, [pc, #64]	@ (8003b68 <ESP_Send+0x54>)
 8003b26:	4911      	ldr	r1, [pc, #68]	@ (8003b6c <ESP_Send+0x58>)
 8003b28:	2003      	movs	r0, #3
 8003b2a:	f00a fc5b 	bl	800e3e4 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b2e:	4b10      	ldr	r3, [pc, #64]	@ (8003b70 <ESP_Send+0x5c>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	250f      	movs	r5, #15
 8003b34:	197c      	adds	r4, r7, r5
 8003b36:	1cbb      	adds	r3, r7, #2
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	f013 fbc1 	bl	80172c4 <HAL_UART_Transmit_DMA>
 8003b42:	0003      	movs	r3, r0
 8003b44:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b46:	197b      	adds	r3, r7, r5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <ESP_Send+0x60>)
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <ESP_Send+0x64>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f00a fc45 	bl	800e3e4 <CreateLine>
    return false;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e000      	b.n	8003b60 <ESP_Send+0x4c>
  }
  return true;
 8003b5e:	2301      	movs	r3, #1
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bdb0      	pop	{r4, r5, r7, pc}
 8003b68:	08023078 	.word	0x08023078
 8003b6c:	08023088 	.word	0x08023088
 8003b70:	20000440 	.word	0x20000440
 8003b74:	0802308c 	.word	0x0802308c
 8003b78:	080230ac 	.word	0x080230ac

08003b7c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	000a      	movs	r2, r1
 8003b86:	1cbb      	adds	r3, r7, #2
 8003b88:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003b8a:	4b56      	ldr	r3, [pc, #344]	@ (8003ce4 <ESP_Receive+0x168>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003b90:	260f      	movs	r6, #15
 8003b92:	19bb      	adds	r3, r7, r6
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003b98:	4b53      	ldr	r3, [pc, #332]	@ (8003ce8 <ESP_Receive+0x16c>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	250e      	movs	r5, #14
 8003b9e:	197c      	adds	r4, r7, r5
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	f013 fc1c 	bl	80173e4 <HAL_UART_Receive_DMA>
 8003bac:	0003      	movs	r3, r0
 8003bae:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003bb0:	002c      	movs	r4, r5
 8003bb2:	193b      	adds	r3, r7, r4
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d100      	bne.n	8003bbc <ESP_Receive+0x40>
 8003bba:	e08e      	b.n	8003cda <ESP_Receive+0x15e>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <ESP_Receive+0x16c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2284      	movs	r2, #132	@ 0x84
 8003bc2:	589b      	ldr	r3, [r3, r2]
 8003bc4:	4a49      	ldr	r2, [pc, #292]	@ (8003cec <ESP_Receive+0x170>)
 8003bc6:	494a      	ldr	r1, [pc, #296]	@ (8003cf0 <ESP_Receive+0x174>)
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f00a fc0b 	bl	800e3e4 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d008      	beq.n	8003bea <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003bd8:	4a46      	ldr	r2, [pc, #280]	@ (8003cf4 <ESP_Receive+0x178>)
 8003bda:	4b45      	ldr	r3, [pc, #276]	@ (8003cf0 <ESP_Receive+0x174>)
 8003bdc:	0019      	movs	r1, r3
 8003bde:	2001      	movs	r0, #1
 8003be0:	f00a fc00 	bl	800e3e4 <CreateLine>
      reset = true;
 8003be4:	19bb      	adds	r3, r7, r6
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003bea:	230e      	movs	r3, #14
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d005      	beq.n	8003c02 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003bf6:	4a40      	ldr	r2, [pc, #256]	@ (8003cf8 <ESP_Receive+0x17c>)
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <ESP_Receive+0x174>)
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f00a fbf1 	bl	800e3e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c02:	230e      	movs	r3, #14
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d005      	beq.n	8003c1a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003cfc <ESP_Receive+0x180>)
 8003c10:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c12:	0019      	movs	r1, r3
 8003c14:	2001      	movs	r0, #1
 8003c16:	f00a fbe5 	bl	800e3e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c1a:	230e      	movs	r3, #14
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2208      	movs	r2, #8
 8003c22:	4013      	ands	r3, r2
 8003c24:	d005      	beq.n	8003c32 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c26:	4a36      	ldr	r2, [pc, #216]	@ (8003d00 <ESP_Receive+0x184>)
 8003c28:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f00a fbd9 	bl	800e3e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c32:	230e      	movs	r3, #14
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d005      	beq.n	8003c4a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c3e:	4a31      	ldr	r2, [pc, #196]	@ (8003d04 <ESP_Receive+0x188>)
 8003c40:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c42:	0019      	movs	r1, r3
 8003c44:	2001      	movs	r0, #1
 8003c46:	f00a fbcd 	bl	800e3e4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c4a:	230e      	movs	r3, #14
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2220      	movs	r2, #32
 8003c52:	4013      	ands	r3, r2
 8003c54:	d005      	beq.n	8003c62 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c56:	4a2c      	ldr	r2, [pc, #176]	@ (8003d08 <ESP_Receive+0x18c>)
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f00a fbc1 	bl	800e3e4 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c62:	230e      	movs	r3, #14
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2240      	movs	r2, #64	@ 0x40
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d005      	beq.n	8003c7a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003c6e:	4a27      	ldr	r2, [pc, #156]	@ (8003d0c <ESP_Receive+0x190>)
 8003c70:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00a fbb5 	bl	800e3e4 <CreateLine>
    }
#endif
    if (reset) {
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d025      	beq.n	8003cd0 <ESP_Receive+0x154>
    // Fire all LEDs to red independent of usertoggle or power status and reboot
      TIM2 -> CCR1 = 0;
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	2200      	movs	r2, #0
 8003c8a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	05db      	lsls	r3, r3, #23
 8003c90:	22fa      	movs	r2, #250	@ 0xfa
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	05db      	lsls	r3, r3, #23
 8003c9a:	22fa      	movs	r2, #250	@ 0xfa
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40
      TIM3 -> CCR1 = 0;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <ESP_Receive+0x194>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <ESP_Receive+0x194>)
 8003ca8:	22fa      	movs	r2, #250	@ 0xfa
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8003cae:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <ESP_Receive+0x194>)
 8003cb0:	22fa      	movs	r2, #250	@ 0xfa
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 8003cb6:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <ESP_Receive+0x198>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2101      	movs	r1, #1
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f00c fa68 	bl	8010192 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003cc2:	23fa      	movs	r3, #250	@ 0xfa
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f00a ffdc 	bl	800ec84 <HAL_Delay>
      HAL_NVIC_SystemReset();
 8003ccc:	f00b fc99 	bl	800f602 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cd0:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <ESP_Receive+0x168>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
    return false;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <ESP_Receive+0x160>
  }
  return true;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b005      	add	sp, #20
 8003ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce4:	20000444 	.word	0x20000444
 8003ce8:	20000440 	.word	0x20000440
 8003cec:	080230b0 	.word	0x080230b0
 8003cf0:	080230ac 	.word	0x080230ac
 8003cf4:	080230e0 	.word	0x080230e0
 8003cf8:	08023104 	.word	0x08023104
 8003cfc:	08023128 	.word	0x08023128
 8003d00:	0802314c 	.word	0x0802314c
 8003d04:	08023170 	.word	0x08023170
 8003d08:	0802319c 	.word	0x0802319c
 8003d0c:	080231cc 	.word	0x080231cc
 8003d10:	40000400 	.word	0x40000400
 8003d14:	50000400 	.word	0x50000400

08003d18 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_UART_ErrorCallback+0x34>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10c      	bne.n	8003d44 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2284      	movs	r2, #132	@ 0x84
 8003d2e:	589b      	ldr	r3, [r3, r2]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d007      	beq.n	8003d44 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2284      	movs	r2, #132	@ 0x84
 8003d38:	589b      	ldr	r3, [r3, r2]
 8003d3a:	4a05      	ldr	r2, [pc, #20]	@ (8003d50 <HAL_UART_ErrorCallback+0x38>)
 8003d3c:	4905      	ldr	r1, [pc, #20]	@ (8003d54 <HAL_UART_ErrorCallback+0x3c>)
 8003d3e:	2003      	movs	r0, #3
 8003d40:	f00a fb50 	bl	800e3e4 <CreateLine>
    }
  }
}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000440 	.word	0x20000440
 8003d50:	080231fc 	.word	0x080231fc
 8003d54:	08023088 	.word	0x08023088

08003d58 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	e010      	b.n	8003d8a <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1898      	adds	r0, r3, r2
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	18d3      	adds	r3, r2, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <uint8ArrayToString+0x44>)
 8003d7e:	0019      	movs	r1, r3
 8003d80:	f01c f88a 	bl	801fe98 <siprintf>
  for (int i = 0; i < 12; i++)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b0b      	cmp	r3, #11
 8003d8e:	ddeb      	ble.n	8003d68 <uint8ArrayToString+0x10>
  }
}
 8003d90:	46c0      	nop			@ (mov r8, r8)
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b004      	add	sp, #16
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	08023228 	.word	0x08023228

08003da0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b089      	sub	sp, #36	@ 0x24
 8003da4:	af04      	add	r7, sp, #16
 8003da6:	0002      	movs	r2, r0
 8003da8:	1dfb      	adds	r3, r7, #7
 8003daa:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003dac:	4bd8      	ldr	r3, [pc, #864]	@ (8004110 <CreateMessage+0x370>)
 8003dae:	48d9      	ldr	r0, [pc, #868]	@ (8004114 <CreateMessage+0x374>)
 8003db0:	220c      	movs	r2, #12
 8003db2:	0019      	movs	r1, r3
 8003db4:	f7ff fca0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003db8:	4bd7      	ldr	r3, [pc, #860]	@ (8004118 <CreateMessage+0x378>)
 8003dba:	48d8      	ldr	r0, [pc, #864]	@ (800411c <CreateMessage+0x37c>)
 8003dbc:	220c      	movs	r2, #12
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	f7ff fc9a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003dc4:	4bd6      	ldr	r3, [pc, #856]	@ (8004120 <CreateMessage+0x380>)
 8003dc6:	48d7      	ldr	r0, [pc, #860]	@ (8004124 <CreateMessage+0x384>)
 8003dc8:	220c      	movs	r2, #12
 8003dca:	0019      	movs	r1, r3
 8003dcc:	f7ff fc94 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dd0:	4bd5      	ldr	r3, [pc, #852]	@ (8004128 <CreateMessage+0x388>)
 8003dd2:	48d6      	ldr	r0, [pc, #856]	@ (800412c <CreateMessage+0x38c>)
 8003dd4:	220c      	movs	r2, #12
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	f7ff fc8e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003ddc:	4bd4      	ldr	r3, [pc, #848]	@ (8004130 <CreateMessage+0x390>)
 8003dde:	48d5      	ldr	r0, [pc, #852]	@ (8004134 <CreateMessage+0x394>)
 8003de0:	220c      	movs	r2, #12
 8003de2:	0019      	movs	r1, r3
 8003de4:	f7ff fc88 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003de8:	4bd3      	ldr	r3, [pc, #844]	@ (8004138 <CreateMessage+0x398>)
 8003dea:	48d4      	ldr	r0, [pc, #848]	@ (800413c <CreateMessage+0x39c>)
 8003dec:	220c      	movs	r2, #12
 8003dee:	0019      	movs	r1, r3
 8003df0:	f7ff fc82 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003df4:	4bd2      	ldr	r3, [pc, #840]	@ (8004140 <CreateMessage+0x3a0>)
 8003df6:	48d3      	ldr	r0, [pc, #844]	@ (8004144 <CreateMessage+0x3a4>)
 8003df8:	220c      	movs	r2, #12
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	f7ff fc7c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003e00:	4bd1      	ldr	r3, [pc, #836]	@ (8004148 <CreateMessage+0x3a8>)
 8003e02:	48d2      	ldr	r0, [pc, #840]	@ (800414c <CreateMessage+0x3ac>)
 8003e04:	220c      	movs	r2, #12
 8003e06:	0019      	movs	r1, r3
 8003e08:	f7ff fc76 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003e0c:	4bd0      	ldr	r3, [pc, #832]	@ (8004150 <CreateMessage+0x3b0>)
 8003e0e:	48d1      	ldr	r0, [pc, #836]	@ (8004154 <CreateMessage+0x3b4>)
 8003e10:	220c      	movs	r2, #12
 8003e12:	0019      	movs	r1, r3
 8003e14:	f7ff fc70 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e18:	f7ff fd36 	bl	8003888 <checkName>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d006      	beq.n	8003e2e <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e20:	4bcd      	ldr	r3, [pc, #820]	@ (8004158 <CreateMessage+0x3b8>)
 8003e22:	48ce      	ldr	r0, [pc, #824]	@ (800415c <CreateMessage+0x3bc>)
 8003e24:	221e      	movs	r2, #30
 8003e26:	0019      	movs	r1, r3
 8003e28:	f7ff fc66 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e2c:	e005      	b.n	8003e3a <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e2e:	4bca      	ldr	r3, [pc, #808]	@ (8004158 <CreateMessage+0x3b8>)
 8003e30:	4acb      	ldr	r2, [pc, #812]	@ (8004160 <CreateMessage+0x3c0>)
 8003e32:	6811      	ldr	r1, [r2, #0]
 8003e34:	6019      	str	r1, [r3, #0]
 8003e36:	7912      	ldrb	r2, [r2, #4]
 8003e38:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
//  Debug("sensorid voor opensensmaps nox: %d", noxConfig);
  setCharges();
 8003e3a:	f7ff fccb 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e3e:	2390      	movs	r3, #144	@ 0x90
 8003e40:	00da      	lsls	r2, r3, #3
 8003e42:	4bc8      	ldr	r3, [pc, #800]	@ (8004164 <CreateMessage+0x3c4>)
 8003e44:	2100      	movs	r1, #0
 8003e46:	0018      	movs	r0, r3
 8003e48:	f01c f96a 	bl	8020120 <memset>
  uint16_t index = 0;
 8003e4c:	260e      	movs	r6, #14
 8003e4e:	19bb      	adds	r3, r7, r6
 8003e50:	2200      	movs	r2, #0
 8003e52:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e54:	19bb      	adds	r3, r7, r6
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	4bc2      	ldr	r3, [pc, #776]	@ (8004164 <CreateMessage+0x3c4>)
 8003e5a:	18d3      	adds	r3, r2, r3
 8003e5c:	4ac2      	ldr	r2, [pc, #776]	@ (8004168 <CreateMessage+0x3c8>)
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f01c f819 	bl	801fe98 <siprintf>
  index = strlen(message);
 8003e66:	4bbf      	ldr	r3, [pc, #764]	@ (8004164 <CreateMessage+0x3c4>)
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7fc f97f 	bl	800016c <strlen>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	19bb      	adds	r3, r7, r6
 8003e72:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e74:	4aa6      	ldr	r2, [pc, #664]	@ (8004110 <CreateMessage+0x370>)
 8003e76:	4bbd      	ldr	r3, [pc, #756]	@ (800416c <CreateMessage+0x3cc>)
 8003e78:	0011      	movs	r1, r2
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7ff ff6c 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003e80:	19bb      	adds	r3, r7, r6
 8003e82:	881a      	ldrh	r2, [r3, #0]
 8003e84:	4bb7      	ldr	r3, [pc, #732]	@ (8004164 <CreateMessage+0x3c4>)
 8003e86:	18d4      	adds	r4, r2, r3
 8003e88:	4bb9      	ldr	r3, [pc, #740]	@ (8004170 <CreateMessage+0x3d0>)
 8003e8a:	689d      	ldr	r5, [r3, #8]
 8003e8c:	4bb9      	ldr	r3, [pc, #740]	@ (8004174 <CreateMessage+0x3d4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c18      	adds	r0, r3, #0
 8003e92:	f7ff fae7 	bl	8003464 <__aeabi_f2d>
 8003e96:	0002      	movs	r2, r0
 8003e98:	000b      	movs	r3, r1
 8003e9a:	48af      	ldr	r0, [pc, #700]	@ (8004158 <CreateMessage+0x3b8>)
 8003e9c:	49b6      	ldr	r1, [pc, #728]	@ (8004178 <CreateMessage+0x3d8>)
 8003e9e:	9202      	str	r2, [sp, #8]
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	4bb2      	ldr	r3, [pc, #712]	@ (800416c <CreateMessage+0x3cc>)
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	002a      	movs	r2, r5
 8003eaa:	0020      	movs	r0, r4
 8003eac:	f01b fff4 	bl	801fe98 <siprintf>
  index = strlen(message);
 8003eb0:	4bac      	ldr	r3, [pc, #688]	@ (8004164 <CreateMessage+0x3c4>)
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f95a 	bl	800016c <strlen>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	19bb      	adds	r3, r7, r6
 8003ebc:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003ebe:	4a96      	ldr	r2, [pc, #600]	@ (8004118 <CreateMessage+0x378>)
 8003ec0:	4baa      	ldr	r3, [pc, #680]	@ (800416c <CreateMessage+0x3cc>)
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7ff ff47 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003eca:	19bb      	adds	r3, r7, r6
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	4ba5      	ldr	r3, [pc, #660]	@ (8004164 <CreateMessage+0x3c4>)
 8003ed0:	18d4      	adds	r4, r2, r3
 8003ed2:	4ba7      	ldr	r3, [pc, #668]	@ (8004170 <CreateMessage+0x3d0>)
 8003ed4:	689d      	ldr	r5, [r3, #8]
 8003ed6:	4ba9      	ldr	r3, [pc, #676]	@ (800417c <CreateMessage+0x3dc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1c18      	adds	r0, r3, #0
 8003edc:	f7ff fac2 	bl	8003464 <__aeabi_f2d>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	000b      	movs	r3, r1
 8003ee4:	489c      	ldr	r0, [pc, #624]	@ (8004158 <CreateMessage+0x3b8>)
 8003ee6:	49a6      	ldr	r1, [pc, #664]	@ (8004180 <CreateMessage+0x3e0>)
 8003ee8:	9202      	str	r2, [sp, #8]
 8003eea:	9303      	str	r3, [sp, #12]
 8003eec:	4b9f      	ldr	r3, [pc, #636]	@ (800416c <CreateMessage+0x3cc>)
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	002a      	movs	r2, r5
 8003ef4:	0020      	movs	r0, r4
 8003ef6:	f01b ffcf 	bl	801fe98 <siprintf>
  index = strlen(message);
 8003efa:	4b9a      	ldr	r3, [pc, #616]	@ (8004164 <CreateMessage+0x3c4>)
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fc f935 	bl	800016c <strlen>
 8003f02:	0002      	movs	r2, r0
 8003f04:	19bb      	adds	r3, r7, r6
 8003f06:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003f08:	4a85      	ldr	r2, [pc, #532]	@ (8004120 <CreateMessage+0x380>)
 8003f0a:	4b98      	ldr	r3, [pc, #608]	@ (800416c <CreateMessage+0x3cc>)
 8003f0c:	0011      	movs	r1, r2
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff ff22 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003f14:	19bb      	adds	r3, r7, r6
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	4b92      	ldr	r3, [pc, #584]	@ (8004164 <CreateMessage+0x3c4>)
 8003f1a:	18d4      	adds	r4, r2, r3
 8003f1c:	4b94      	ldr	r3, [pc, #592]	@ (8004170 <CreateMessage+0x3d0>)
 8003f1e:	689d      	ldr	r5, [r3, #8]
 8003f20:	4b98      	ldr	r3, [pc, #608]	@ (8004184 <CreateMessage+0x3e4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	1c18      	adds	r0, r3, #0
 8003f26:	f7ff fa9d 	bl	8003464 <__aeabi_f2d>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	000b      	movs	r3, r1
 8003f2e:	488a      	ldr	r0, [pc, #552]	@ (8004158 <CreateMessage+0x3b8>)
 8003f30:	4995      	ldr	r1, [pc, #596]	@ (8004188 <CreateMessage+0x3e8>)
 8003f32:	9202      	str	r2, [sp, #8]
 8003f34:	9303      	str	r3, [sp, #12]
 8003f36:	4b8d      	ldr	r3, [pc, #564]	@ (800416c <CreateMessage+0x3cc>)
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	002a      	movs	r2, r5
 8003f3e:	0020      	movs	r0, r4
 8003f40:	f01b ffaa 	bl	801fe98 <siprintf>
  index = strlen(message);
 8003f44:	4b87      	ldr	r3, [pc, #540]	@ (8004164 <CreateMessage+0x3c4>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fc f910 	bl	800016c <strlen>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	19bb      	adds	r3, r7, r6
 8003f50:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f52:	4a75      	ldr	r2, [pc, #468]	@ (8004128 <CreateMessage+0x388>)
 8003f54:	4b85      	ldr	r3, [pc, #532]	@ (800416c <CreateMessage+0x3cc>)
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fefd 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003f5e:	19bb      	adds	r3, r7, r6
 8003f60:	881a      	ldrh	r2, [r3, #0]
 8003f62:	4b80      	ldr	r3, [pc, #512]	@ (8004164 <CreateMessage+0x3c4>)
 8003f64:	18d0      	adds	r0, r2, r3
 8003f66:	4b82      	ldr	r3, [pc, #520]	@ (8004170 <CreateMessage+0x3d0>)
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	4b88      	ldr	r3, [pc, #544]	@ (800418c <CreateMessage+0x3ec>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	4c7a      	ldr	r4, [pc, #488]	@ (8004158 <CreateMessage+0x3b8>)
 8003f70:	4987      	ldr	r1, [pc, #540]	@ (8004190 <CreateMessage+0x3f0>)
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	4b7d      	ldr	r3, [pc, #500]	@ (800416c <CreateMessage+0x3cc>)
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	0023      	movs	r3, r4
 8003f7a:	f01b ff8d 	bl	801fe98 <siprintf>
  index = strlen(message);
 8003f7e:	4b79      	ldr	r3, [pc, #484]	@ (8004164 <CreateMessage+0x3c4>)
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7fc f8f3 	bl	800016c <strlen>
 8003f86:	0002      	movs	r2, r0
 8003f88:	19bb      	adds	r3, r7, r6
 8003f8a:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4053      	eors	r3, r2
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d100      	bne.n	8003f9c <CreateMessage+0x1fc>
 8003f9a:	e10f      	b.n	80041bc <CreateMessage+0x41c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003f9c:	4a64      	ldr	r2, [pc, #400]	@ (8004130 <CreateMessage+0x390>)
 8003f9e:	4b73      	ldr	r3, [pc, #460]	@ (800416c <CreateMessage+0x3cc>)
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7ff fed8 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003fa8:	19bb      	adds	r3, r7, r6
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	4b6d      	ldr	r3, [pc, #436]	@ (8004164 <CreateMessage+0x3c4>)
 8003fae:	18d4      	adds	r4, r2, r3
 8003fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004170 <CreateMessage+0x3d0>)
 8003fb2:	689d      	ldr	r5, [r3, #8]
 8003fb4:	4b77      	ldr	r3, [pc, #476]	@ (8004194 <CreateMessage+0x3f4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	1c18      	adds	r0, r3, #0
 8003fba:	f7ff fa53 	bl	8003464 <__aeabi_f2d>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	000b      	movs	r3, r1
 8003fc2:	4865      	ldr	r0, [pc, #404]	@ (8004158 <CreateMessage+0x3b8>)
 8003fc4:	4974      	ldr	r1, [pc, #464]	@ (8004198 <CreateMessage+0x3f8>)
 8003fc6:	9202      	str	r2, [sp, #8]
 8003fc8:	9303      	str	r3, [sp, #12]
 8003fca:	4b68      	ldr	r3, [pc, #416]	@ (800416c <CreateMessage+0x3cc>)
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	0003      	movs	r3, r0
 8003fd0:	002a      	movs	r2, r5
 8003fd2:	0020      	movs	r0, r4
 8003fd4:	f01b ff60 	bl	801fe98 <siprintf>
    index = strlen(message);
 8003fd8:	4b62      	ldr	r3, [pc, #392]	@ (8004164 <CreateMessage+0x3c4>)
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7fc f8c6 	bl	800016c <strlen>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	19bb      	adds	r3, r7, r6
 8003fe4:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003fe6:	4a54      	ldr	r2, [pc, #336]	@ (8004138 <CreateMessage+0x398>)
 8003fe8:	4b60      	ldr	r3, [pc, #384]	@ (800416c <CreateMessage+0x3cc>)
 8003fea:	0011      	movs	r1, r2
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff feb3 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003ff2:	19bb      	adds	r3, r7, r6
 8003ff4:	881a      	ldrh	r2, [r3, #0]
 8003ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8004164 <CreateMessage+0x3c4>)
 8003ff8:	18d4      	adds	r4, r2, r3
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8004170 <CreateMessage+0x3d0>)
 8003ffc:	689d      	ldr	r5, [r3, #8]
 8003ffe:	4b67      	ldr	r3, [pc, #412]	@ (800419c <CreateMessage+0x3fc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	1c18      	adds	r0, r3, #0
 8004004:	f7ff fa2e 	bl	8003464 <__aeabi_f2d>
 8004008:	0002      	movs	r2, r0
 800400a:	000b      	movs	r3, r1
 800400c:	4852      	ldr	r0, [pc, #328]	@ (8004158 <CreateMessage+0x3b8>)
 800400e:	4964      	ldr	r1, [pc, #400]	@ (80041a0 <CreateMessage+0x400>)
 8004010:	9202      	str	r2, [sp, #8]
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	4b55      	ldr	r3, [pc, #340]	@ (800416c <CreateMessage+0x3cc>)
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	0003      	movs	r3, r0
 800401a:	002a      	movs	r2, r5
 800401c:	0020      	movs	r0, r4
 800401e:	f01b ff3b 	bl	801fe98 <siprintf>
    index = strlen(message);
 8004022:	4b50      	ldr	r3, [pc, #320]	@ (8004164 <CreateMessage+0x3c4>)
 8004024:	0018      	movs	r0, r3
 8004026:	f7fc f8a1 	bl	800016c <strlen>
 800402a:	0002      	movs	r2, r0
 800402c:	19bb      	adds	r3, r7, r6
 800402e:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 8004030:	4a43      	ldr	r2, [pc, #268]	@ (8004140 <CreateMessage+0x3a0>)
 8004032:	4b4e      	ldr	r3, [pc, #312]	@ (800416c <CreateMessage+0x3cc>)
 8004034:	0011      	movs	r1, r2
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff fe8e 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, airNOx);
 800403c:	19bb      	adds	r3, r7, r6
 800403e:	881a      	ldrh	r2, [r3, #0]
 8004040:	4b48      	ldr	r3, [pc, #288]	@ (8004164 <CreateMessage+0x3c4>)
 8004042:	18d4      	adds	r4, r2, r3
 8004044:	4b4a      	ldr	r3, [pc, #296]	@ (8004170 <CreateMessage+0x3d0>)
 8004046:	689d      	ldr	r5, [r3, #8]
 8004048:	4b56      	ldr	r3, [pc, #344]	@ (80041a4 <CreateMessage+0x404>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	1c18      	adds	r0, r3, #0
 800404e:	f7ff fa09 	bl	8003464 <__aeabi_f2d>
 8004052:	0002      	movs	r2, r0
 8004054:	000b      	movs	r3, r1
 8004056:	4840      	ldr	r0, [pc, #256]	@ (8004158 <CreateMessage+0x3b8>)
 8004058:	4953      	ldr	r1, [pc, #332]	@ (80041a8 <CreateMessage+0x408>)
 800405a:	9202      	str	r2, [sp, #8]
 800405c:	9303      	str	r3, [sp, #12]
 800405e:	4b43      	ldr	r3, [pc, #268]	@ (800416c <CreateMessage+0x3cc>)
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	0003      	movs	r3, r0
 8004064:	002a      	movs	r2, r5
 8004066:	0020      	movs	r0, r4
 8004068:	f01b ff16 	bl	801fe98 <siprintf>
    index = strlen(message);
 800406c:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <CreateMessage+0x3c4>)
 800406e:	0018      	movs	r0, r3
 8004070:	f7fc f87c 	bl	800016c <strlen>
 8004074:	0002      	movs	r2, r0
 8004076:	19bb      	adds	r3, r7, r6
 8004078:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 800407a:	4a33      	ldr	r2, [pc, #204]	@ (8004148 <CreateMessage+0x3a8>)
 800407c:	4b3b      	ldr	r3, [pc, #236]	@ (800416c <CreateMessage+0x3cc>)
 800407e:	0011      	movs	r1, r2
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff fe69 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8004086:	19bb      	adds	r3, r7, r6
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <CreateMessage+0x3c4>)
 800408c:	18d4      	adds	r4, r2, r3
 800408e:	4b38      	ldr	r3, [pc, #224]	@ (8004170 <CreateMessage+0x3d0>)
 8004090:	689d      	ldr	r5, [r3, #8]
 8004092:	4b46      	ldr	r3, [pc, #280]	@ (80041ac <CreateMessage+0x40c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	1c18      	adds	r0, r3, #0
 8004098:	f7ff f9e4 	bl	8003464 <__aeabi_f2d>
 800409c:	0002      	movs	r2, r0
 800409e:	000b      	movs	r3, r1
 80040a0:	482d      	ldr	r0, [pc, #180]	@ (8004158 <CreateMessage+0x3b8>)
 80040a2:	4943      	ldr	r1, [pc, #268]	@ (80041b0 <CreateMessage+0x410>)
 80040a4:	9202      	str	r2, [sp, #8]
 80040a6:	9303      	str	r3, [sp, #12]
 80040a8:	4b30      	ldr	r3, [pc, #192]	@ (800416c <CreateMessage+0x3cc>)
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	0003      	movs	r3, r0
 80040ae:	002a      	movs	r2, r5
 80040b0:	0020      	movs	r0, r4
 80040b2:	f01b fef1 	bl	801fe98 <siprintf>
    index = strlen(message);
 80040b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004164 <CreateMessage+0x3c4>)
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7fc f857 	bl	800016c <strlen>
 80040be:	0002      	movs	r2, r0
 80040c0:	19bb      	adds	r3, r7, r6
 80040c2:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 80040c4:	4a22      	ldr	r2, [pc, #136]	@ (8004150 <CreateMessage+0x3b0>)
 80040c6:	4b29      	ldr	r3, [pc, #164]	@ (800416c <CreateMessage+0x3cc>)
 80040c8:	0011      	movs	r1, r2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f7ff fe44 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 80040d0:	19bb      	adds	r3, r7, r6
 80040d2:	881a      	ldrh	r2, [r3, #0]
 80040d4:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <CreateMessage+0x3c4>)
 80040d6:	18d4      	adds	r4, r2, r3
 80040d8:	4b25      	ldr	r3, [pc, #148]	@ (8004170 <CreateMessage+0x3d0>)
 80040da:	689d      	ldr	r5, [r3, #8]
 80040dc:	4b35      	ldr	r3, [pc, #212]	@ (80041b4 <CreateMessage+0x414>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1c18      	adds	r0, r3, #0
 80040e2:	f7ff f9bf 	bl	8003464 <__aeabi_f2d>
 80040e6:	0002      	movs	r2, r0
 80040e8:	000b      	movs	r3, r1
 80040ea:	481b      	ldr	r0, [pc, #108]	@ (8004158 <CreateMessage+0x3b8>)
 80040ec:	4932      	ldr	r1, [pc, #200]	@ (80041b8 <CreateMessage+0x418>)
 80040ee:	9202      	str	r2, [sp, #8]
 80040f0:	9303      	str	r3, [sp, #12]
 80040f2:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <CreateMessage+0x3cc>)
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	0003      	movs	r3, r0
 80040f8:	002a      	movs	r2, r5
 80040fa:	0020      	movs	r0, r4
 80040fc:	f01b fecc 	bl	801fe98 <siprintf>
    index = strlen(message);
 8004100:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <CreateMessage+0x3c4>)
 8004102:	0018      	movs	r0, r3
 8004104:	f7fc f832 	bl	800016c <strlen>
 8004108:	0002      	movs	r2, r0
 800410a:	19bb      	adds	r3, r7, r6
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	e07b      	b.n	8004208 <CreateMessage+0x468>
 8004110:	20000a68 	.word	0x20000a68
 8004114:	0808000c 	.word	0x0808000c
 8004118:	20000a74 	.word	0x20000a74
 800411c:	08080018 	.word	0x08080018
 8004120:	20000a80 	.word	0x20000a80
 8004124:	08080048 	.word	0x08080048
 8004128:	20000a8c 	.word	0x20000a8c
 800412c:	08080030 	.word	0x08080030
 8004130:	20000a98 	.word	0x20000a98
 8004134:	0808006c 	.word	0x0808006c
 8004138:	20000aa4 	.word	0x20000aa4
 800413c:	08080078 	.word	0x08080078
 8004140:	20000ab0 	.word	0x20000ab0
 8004144:	08080024 	.word	0x08080024
 8004148:	20000abc 	.word	0x20000abc
 800414c:	08080054 	.word	0x08080054
 8004150:	20000ac8 	.word	0x20000ac8
 8004154:	08080060 	.word	0x08080060
 8004158:	20000ad4 	.word	0x20000ad4
 800415c:	08080090 	.word	0x08080090
 8004160:	08025200 	.word	0x08025200
 8004164:	2000058c 	.word	0x2000058c
 8004168:	08023230 	.word	0x08023230
 800416c:	20000af4 	.word	0x20000af4
 8004170:	20000554 	.word	0x20000554
 8004174:	20000568 	.word	0x20000568
 8004178:	08023234 	.word	0x08023234
 800417c:	2000056c 	.word	0x2000056c
 8004180:	08023288 	.word	0x08023288
 8004184:	2000057c 	.word	0x2000057c
 8004188:	080232e0 	.word	0x080232e0
 800418c:	20000578 	.word	0x20000578
 8004190:	0802333c 	.word	0x0802333c
 8004194:	20000570 	.word	0x20000570
 8004198:	08023390 	.word	0x08023390
 800419c:	20000574 	.word	0x20000574
 80041a0:	080233f0 	.word	0x080233f0
 80041a4:	20000588 	.word	0x20000588
 80041a8:	08023450 	.word	0x08023450
 80041ac:	20000580 	.word	0x20000580
 80041b0:	080234a8 	.word	0x080234a8
 80041b4:	20000584 	.word	0x20000584
 80041b8:	08023504 	.word	0x08023504

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 80041bc:	4a21      	ldr	r2, [pc, #132]	@ (8004244 <CreateMessage+0x4a4>)
 80041be:	4b22      	ldr	r3, [pc, #136]	@ (8004248 <CreateMessage+0x4a8>)
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f7ff fdc8 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80041c8:	260e      	movs	r6, #14
 80041ca:	19bb      	adds	r3, r7, r6
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	4b1f      	ldr	r3, [pc, #124]	@ (800424c <CreateMessage+0x4ac>)
 80041d0:	18d4      	adds	r4, r2, r3
 80041d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004250 <CreateMessage+0x4b0>)
 80041d4:	689d      	ldr	r5, [r3, #8]
 80041d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004254 <CreateMessage+0x4b4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1c18      	adds	r0, r3, #0
 80041dc:	f7ff f942 	bl	8003464 <__aeabi_f2d>
 80041e0:	0002      	movs	r2, r0
 80041e2:	000b      	movs	r3, r1
 80041e4:	481c      	ldr	r0, [pc, #112]	@ (8004258 <CreateMessage+0x4b8>)
 80041e6:	491d      	ldr	r1, [pc, #116]	@ (800425c <CreateMessage+0x4bc>)
 80041e8:	9202      	str	r2, [sp, #8]
 80041ea:	9303      	str	r3, [sp, #12]
 80041ec:	4b16      	ldr	r3, [pc, #88]	@ (8004248 <CreateMessage+0x4a8>)
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	0003      	movs	r3, r0
 80041f2:	002a      	movs	r2, r5
 80041f4:	0020      	movs	r0, r4
 80041f6:	f01b fe4f 	bl	801fe98 <siprintf>
    index = strlen(message);
 80041fa:	4b14      	ldr	r3, [pc, #80]	@ (800424c <CreateMessage+0x4ac>)
 80041fc:	0018      	movs	r0, r3
 80041fe:	f7fb ffb5 	bl	800016c <strlen>
 8004202:	0002      	movs	r2, r0
 8004204:	19bb      	adds	r3, r7, r6
 8004206:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[index], "]");
 8004208:	230e      	movs	r3, #14
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	881a      	ldrh	r2, [r3, #0]
 800420e:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <CreateMessage+0x4ac>)
 8004210:	18d3      	adds	r3, r2, r3
 8004212:	4a13      	ldr	r2, [pc, #76]	@ (8004260 <CreateMessage+0x4c0>)
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f01b fe3e 	bl	801fe98 <siprintf>
  Debug("Length of datagram: %d", strlen(message));
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <CreateMessage+0x4ac>)
 800421e:	0018      	movs	r0, r3
 8004220:	f7fb ffa4 	bl	800016c <strlen>
 8004224:	0003      	movs	r3, r0
 8004226:	4a0f      	ldr	r2, [pc, #60]	@ (8004264 <CreateMessage+0x4c4>)
 8004228:	490f      	ldr	r1, [pc, #60]	@ (8004268 <CreateMessage+0x4c8>)
 800422a:	2003      	movs	r0, #3
 800422c:	f00a f8da 	bl	800e3e4 <CreateLine>
  return strlen(message);
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <CreateMessage+0x4ac>)
 8004232:	0018      	movs	r0, r3
 8004234:	f7fb ff9a 	bl	800016c <strlen>
 8004238:	0003      	movs	r3, r0
 800423a:	b29b      	uxth	r3, r3
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b005      	add	sp, #20
 8004242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004244:	20000a98 	.word	0x20000a98
 8004248:	20000af4 	.word	0x20000af4
 800424c:	2000058c 	.word	0x2000058c
 8004250:	20000554 	.word	0x20000554
 8004254:	20000570 	.word	0x20000570
 8004258:	20000ad4 	.word	0x20000ad4
 800425c:	0802355c 	.word	0x0802355c
 8004260:	080235b4 	.word	0x080235b4
 8004264:	080235b8 	.word	0x080235b8
 8004268:	08023088 	.word	0x08023088

0800426c <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8004270:	2064      	movs	r0, #100	@ 0x64
 8004272:	f00a fd07 	bl	800ec84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004276:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <StartProg+0x60>)
 8004278:	2200      	movs	r2, #0
 800427a:	2101      	movs	r1, #1
 800427c:	0018      	movs	r0, r3
 800427e:	f00b ff88 	bl	8010192 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004282:	2064      	movs	r0, #100	@ 0x64
 8004284:	f00a fcfe 	bl	800ec84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004288:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <StartProg+0x60>)
 800428a:	2200      	movs	r2, #0
 800428c:	2102      	movs	r1, #2
 800428e:	0018      	movs	r0, r3
 8004290:	f00b ff7f 	bl	8010192 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004294:	23fa      	movs	r3, #250	@ 0xfa
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	0018      	movs	r0, r3
 800429a:	f00a fcf3 	bl	800ec84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800429e:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <StartProg+0x60>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	2101      	movs	r1, #1
 80042a4:	0018      	movs	r0, r3
 80042a6:	f00b ff74 	bl	8010192 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80042aa:	23fa      	movs	r3, #250	@ 0xfa
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	0018      	movs	r0, r3
 80042b0:	f00a fce8 	bl	800ec84 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <StartProg+0x60>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	2102      	movs	r1, #2
 80042ba:	0018      	movs	r0, r3
 80042bc:	f00b ff69 	bl	8010192 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80042c0:	2028      	movs	r0, #40	@ 0x28
 80042c2:	f00a fcdf 	bl	800ec84 <HAL_Delay>
}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	50001c00 	.word	0x50001c00

080042d0 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80042d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d2:	b0d9      	sub	sp, #356	@ 0x164
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	0008      	movs	r0, r1
 80042da:	0011      	movs	r1, r2
 80042dc:	4ba4      	ldr	r3, [pc, #656]	@ (8004570 <ParseBuffer+0x2a0>)
 80042de:	24b0      	movs	r4, #176	@ 0xb0
 80042e0:	0064      	lsls	r4, r4, #1
 80042e2:	191b      	adds	r3, r3, r4
 80042e4:	19db      	adds	r3, r3, r7
 80042e6:	1c02      	adds	r2, r0, #0
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	4ba2      	ldr	r3, [pc, #648]	@ (8004574 <ParseBuffer+0x2a4>)
 80042ec:	191b      	adds	r3, r3, r4
 80042ee:	19db      	adds	r3, r3, r7
 80042f0:	1c0a      	adds	r2, r1, #0
 80042f2:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	005a      	lsls	r2, r3, #1
 80042f8:	2348      	movs	r3, #72	@ 0x48
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	2100      	movs	r1, #0
 80042fe:	0018      	movs	r0, r3
 8004300:	f01b ff0e 	bl	8020120 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004304:	2360      	movs	r3, #96	@ 0x60
 8004306:	33ff      	adds	r3, #255	@ 0xff
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2203      	movs	r2, #3
 800430c:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800430e:	23ae      	movs	r3, #174	@ 0xae
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2200      	movs	r2, #0
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e013      	b.n	8004342 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800431a:	20ae      	movs	r0, #174	@ 0xae
 800431c:	0040      	lsls	r0, r0, #1
 800431e:	183b      	adds	r3, r7, r0
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	18d2      	adds	r2, r2, r3
 8004326:	183b      	adds	r3, r7, r0
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	7811      	ldrb	r1, [r2, #0]
 800432c:	4a92      	ldr	r2, [pc, #584]	@ (8004578 <ParseBuffer+0x2a8>)
 800432e:	24b0      	movs	r4, #176	@ 0xb0
 8004330:	0064      	lsls	r4, r4, #1
 8004332:	1912      	adds	r2, r2, r4
 8004334:	19d2      	adds	r2, r2, r7
 8004336:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004338:	183b      	adds	r3, r7, r0
 800433a:	881a      	ldrh	r2, [r3, #0]
 800433c:	183b      	adds	r3, r7, r0
 800433e:	3201      	adds	r2, #1
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	23ae      	movs	r3, #174	@ 0xae
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	18fa      	adds	r2, r7, r3
 8004348:	4b89      	ldr	r3, [pc, #548]	@ (8004570 <ParseBuffer+0x2a0>)
 800434a:	21b0      	movs	r1, #176	@ 0xb0
 800434c:	0049      	lsls	r1, r1, #1
 800434e:	185b      	adds	r3, r3, r1
 8004350:	19db      	adds	r3, r3, r7
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d3df      	bcc.n	800431a <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800435a:	4b85      	ldr	r3, [pc, #532]	@ (8004570 <ParseBuffer+0x2a0>)
 800435c:	185b      	adds	r3, r3, r1
 800435e:	19db      	adds	r3, r3, r7
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	4a85      	ldr	r2, [pc, #532]	@ (8004578 <ParseBuffer+0x2a8>)
 8004364:	1852      	adds	r2, r2, r1
 8004366:	19d2      	adds	r2, r2, r7
 8004368:	2100      	movs	r1, #0
 800436a:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 800436c:	f00a f8b4 	bl	800e4d8 <GetVerboseLevel>
 8004370:	0003      	movs	r3, r0
 8004372:	2b03      	cmp	r3, #3
 8004374:	d106      	bne.n	8004384 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 8004376:	2348      	movs	r3, #72	@ 0x48
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	4a80      	ldr	r2, [pc, #512]	@ (800457c <ParseBuffer+0x2ac>)
 800437c:	4980      	ldr	r1, [pc, #512]	@ (8004580 <ParseBuffer+0x2b0>)
 800437e:	2003      	movs	r0, #3
 8004380:	f00a f830 	bl	800e3e4 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	26ac      	movs	r6, #172	@ 0xac
 8004388:	0076      	lsls	r6, r6, #1
 800438a:	19ba      	adds	r2, r7, r6
 800438c:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 800438e:	4b7d      	ldr	r3, [pc, #500]	@ (8004584 <ParseBuffer+0x2b4>)
 8004390:	25b0      	movs	r5, #176	@ 0xb0
 8004392:	006d      	lsls	r5, r5, #1
 8004394:	195b      	adds	r3, r3, r5
 8004396:	19db      	adds	r3, r3, r7
 8004398:	4a7b      	ldr	r2, [pc, #492]	@ (8004588 <ParseBuffer+0x2b8>)
 800439a:	8811      	ldrh	r1, [r2, #0]
 800439c:	8019      	strh	r1, [r3, #0]
 800439e:	7892      	ldrb	r2, [r2, #2]
 80043a0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80043a2:	4b7a      	ldr	r3, [pc, #488]	@ (800458c <ParseBuffer+0x2bc>)
 80043a4:	195b      	adds	r3, r3, r5
 80043a6:	19db      	adds	r3, r3, r7
 80043a8:	4a79      	ldr	r2, [pc, #484]	@ (8004590 <ParseBuffer+0x2c0>)
 80043aa:	6811      	ldr	r1, [r2, #0]
 80043ac:	6019      	str	r1, [r3, #0]
 80043ae:	8892      	ldrh	r2, [r2, #4]
 80043b0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80043b2:	4b78      	ldr	r3, [pc, #480]	@ (8004594 <ParseBuffer+0x2c4>)
 80043b4:	195b      	adds	r3, r3, r5
 80043b6:	19db      	adds	r3, r3, r7
 80043b8:	4a77      	ldr	r2, [pc, #476]	@ (8004598 <ParseBuffer+0x2c8>)
 80043ba:	6811      	ldr	r1, [r2, #0]
 80043bc:	6019      	str	r1, [r3, #0]
 80043be:	7912      	ldrb	r2, [r2, #4]
 80043c0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80043c2:	4b76      	ldr	r3, [pc, #472]	@ (800459c <ParseBuffer+0x2cc>)
 80043c4:	195b      	adds	r3, r3, r5
 80043c6:	19db      	adds	r3, r3, r7
 80043c8:	4a75      	ldr	r2, [pc, #468]	@ (80045a0 <ParseBuffer+0x2d0>)
 80043ca:	6811      	ldr	r1, [r2, #0]
 80043cc:	6019      	str	r1, [r3, #0]
 80043ce:	8892      	ldrh	r2, [r2, #4]
 80043d0:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80043d2:	4b74      	ldr	r3, [pc, #464]	@ (80045a4 <ParseBuffer+0x2d4>)
 80043d4:	195b      	adds	r3, r3, r5
 80043d6:	19db      	adds	r3, r3, r7
 80043d8:	223e      	movs	r2, #62	@ 0x3e
 80043da:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80043dc:	4b72      	ldr	r3, [pc, #456]	@ (80045a8 <ParseBuffer+0x2d8>)
 80043de:	195b      	adds	r3, r3, r5
 80043e0:	19db      	adds	r3, r3, r7
 80043e2:	4a72      	ldr	r2, [pc, #456]	@ (80045ac <ParseBuffer+0x2dc>)
 80043e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043e6:	c313      	stmia	r3!, {r0, r1, r4}
 80043e8:	8811      	ldrh	r1, [r2, #0]
 80043ea:	8019      	strh	r1, [r3, #0]
 80043ec:	7892      	ldrb	r2, [r2, #2]
 80043ee:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80043f0:	4b6f      	ldr	r3, [pc, #444]	@ (80045b0 <ParseBuffer+0x2e0>)
 80043f2:	195b      	adds	r3, r3, r5
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	4a6f      	ldr	r2, [pc, #444]	@ (80045b4 <ParseBuffer+0x2e4>)
 80043f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043fa:	c313      	stmia	r3!, {r0, r1, r4}
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004400:	4b5c      	ldr	r3, [pc, #368]	@ (8004574 <ParseBuffer+0x2a4>)
 8004402:	195b      	adds	r3, r3, r5
 8004404:	19db      	adds	r3, r3, r7
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 800440c:	2344      	movs	r3, #68	@ 0x44
 800440e:	18fa      	adds	r2, r7, r3
 8004410:	2348      	movs	r3, #72	@ 0x48
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f01b febd 	bl	8020196 <strstr>
 800441c:	0003      	movs	r3, r0
 800441e:	19ba      	adds	r2, r7, r6
 8004420:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004422:	4b54      	ldr	r3, [pc, #336]	@ (8004574 <ParseBuffer+0x2a4>)
 8004424:	22b0      	movs	r2, #176	@ 0xb0
 8004426:	0052      	lsls	r2, r2, #1
 8004428:	189b      	adds	r3, r3, r2
 800442a:	19db      	adds	r3, r3, r7
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10c      	bne.n	800444c <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8004432:	232c      	movs	r3, #44	@ 0x2c
 8004434:	18fa      	adds	r2, r7, r3
 8004436:	2348      	movs	r3, #72	@ 0x48
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f01b feaa 	bl	8020196 <strstr>
 8004442:	0003      	movs	r3, r0
 8004444:	22ac      	movs	r2, #172	@ 0xac
 8004446:	0052      	lsls	r2, r2, #1
 8004448:	18ba      	adds	r2, r7, r2
 800444a:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800444c:	4b49      	ldr	r3, [pc, #292]	@ (8004574 <ParseBuffer+0x2a4>)
 800444e:	22b0      	movs	r2, #176	@ 0xb0
 8004450:	0052      	lsls	r2, r2, #1
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d10c      	bne.n	8004476 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 800445c:	2328      	movs	r3, #40	@ 0x28
 800445e:	18fa      	adds	r2, r7, r3
 8004460:	2348      	movs	r3, #72	@ 0x48
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	0011      	movs	r1, r2
 8004466:	0018      	movs	r0, r3
 8004468:	f01b fe95 	bl	8020196 <strstr>
 800446c:	0003      	movs	r3, r0
 800446e:	22ac      	movs	r2, #172	@ 0xac
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	18ba      	adds	r2, r7, r2
 8004474:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004476:	4b3f      	ldr	r3, [pc, #252]	@ (8004574 <ParseBuffer+0x2a4>)
 8004478:	22b0      	movs	r2, #176	@ 0xb0
 800447a:	0052      	lsls	r2, r2, #1
 800447c:	189b      	adds	r3, r3, r2
 800447e:	19db      	adds	r3, r3, r7
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b05      	cmp	r3, #5
 8004484:	d10c      	bne.n	80044a0 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 8004486:	2308      	movs	r3, #8
 8004488:	18fa      	adds	r2, r7, r3
 800448a:	2348      	movs	r3, #72	@ 0x48
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	0011      	movs	r1, r2
 8004490:	0018      	movs	r0, r3
 8004492:	f01b fe80 	bl	8020196 <strstr>
 8004496:	0003      	movs	r3, r0
 8004498:	22ac      	movs	r2, #172	@ 0xac
 800449a:	0052      	lsls	r2, r2, #1
 800449c:	18ba      	adds	r2, r7, r2
 800449e:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80044a0:	233c      	movs	r3, #60	@ 0x3c
 80044a2:	18fa      	adds	r2, r7, r3
 80044a4:	2448      	movs	r4, #72	@ 0x48
 80044a6:	193b      	adds	r3, r7, r4
 80044a8:	0011      	movs	r1, r2
 80044aa:	0018      	movs	r0, r3
 80044ac:	f01b fe73 	bl	8020196 <strstr>
 80044b0:	0003      	movs	r3, r0
 80044b2:	22aa      	movs	r2, #170	@ 0xaa
 80044b4:	0052      	lsls	r2, r2, #1
 80044b6:	18ba      	adds	r2, r7, r2
 80044b8:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80044ba:	2318      	movs	r3, #24
 80044bc:	18fa      	adds	r2, r7, r3
 80044be:	193b      	adds	r3, r7, r4
 80044c0:	0011      	movs	r1, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f01b fe67 	bl	8020196 <strstr>
 80044c8:	0003      	movs	r3, r0
 80044ca:	22a8      	movs	r2, #168	@ 0xa8
 80044cc:	0052      	lsls	r2, r2, #1
 80044ce:	18ba      	adds	r2, r7, r2
 80044d0:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80044d2:	4a39      	ldr	r2, [pc, #228]	@ (80045b8 <ParseBuffer+0x2e8>)
 80044d4:	193b      	adds	r3, r7, r4
 80044d6:	0011      	movs	r1, r2
 80044d8:	0018      	movs	r0, r3
 80044da:	f01b fe5c 	bl	8020196 <strstr>
 80044de:	0003      	movs	r3, r0
 80044e0:	22a6      	movs	r2, #166	@ 0xa6
 80044e2:	0052      	lsls	r2, r2, #1
 80044e4:	18ba      	adds	r2, r7, r2
 80044e6:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80044e8:	2334      	movs	r3, #52	@ 0x34
 80044ea:	18fa      	adds	r2, r7, r3
 80044ec:	193b      	adds	r3, r7, r4
 80044ee:	0011      	movs	r1, r2
 80044f0:	0018      	movs	r0, r3
 80044f2:	f01b fe50 	bl	8020196 <strstr>
 80044f6:	0003      	movs	r3, r0
 80044f8:	22a4      	movs	r2, #164	@ 0xa4
 80044fa:	0052      	lsls	r2, r2, #1
 80044fc:	18ba      	adds	r2, r7, r2
 80044fe:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004500:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <ParseBuffer+0x2a0>)
 8004502:	21b0      	movs	r1, #176	@ 0xb0
 8004504:	0049      	lsls	r1, r1, #1
 8004506:	185b      	adds	r3, r3, r1
 8004508:	19db      	adds	r3, r3, r7
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d800      	bhi.n	8004512 <ParseBuffer+0x242>
 8004510:	e0c1      	b.n	8004696 <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004512:	22ac      	movs	r2, #172	@ 0xac
 8004514:	0052      	lsls	r2, r2, #1
 8004516:	18bb      	adds	r3, r7, r2
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d054      	beq.n	80045c8 <ParseBuffer+0x2f8>
 800451e:	18bb      	adds	r3, r7, r2
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b4f      	cmp	r3, #79	@ 0x4f
 8004526:	d14f      	bne.n	80045c8 <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004528:	2360      	movs	r3, #96	@ 0x60
 800452a:	33ff      	adds	r3, #255	@ 0xff
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004532:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <ParseBuffer+0x2ec>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b12      	cmp	r3, #18
 8004538:	d146      	bne.n	80045c8 <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800453a:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <ParseBuffer+0x2a0>)
 800453c:	185b      	adds	r3, r3, r1
 800453e:	19db      	adds	r3, r3, r7
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	2b2b      	cmp	r3, #43	@ 0x2b
 8004544:	d10b      	bne.n	800455e <ParseBuffer+0x28e>
 8004546:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <ParseBuffer+0x2a8>)
 8004548:	185b      	adds	r3, r3, r1
 800454a:	19db      	adds	r3, r3, r7
 800454c:	2221      	movs	r2, #33	@ 0x21
 800454e:	5c9b      	ldrb	r3, [r3, r2]
 8004550:	2b32      	cmp	r3, #50	@ 0x32
 8004552:	d104      	bne.n	800455e <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004554:	193b      	adds	r3, r7, r4
 8004556:	0018      	movs	r0, r3
 8004558:	f002 f8f2 	bl	8006740 <ParseTime>
 800455c:	e034      	b.n	80045c8 <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 800455e:	4a18      	ldr	r2, [pc, #96]	@ (80045c0 <ParseBuffer+0x2f0>)
 8004560:	4b18      	ldr	r3, [pc, #96]	@ (80045c4 <ParseBuffer+0x2f4>)
 8004562:	0019      	movs	r1, r3
 8004564:	2001      	movs	r0, #1
 8004566:	f009 ff3d 	bl	800e3e4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800456a:	2306      	movs	r3, #6
 800456c:	e097      	b.n	800469e <ParseBuffer+0x3ce>
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	fffffea2 	.word	0xfffffea2
 8004574:	fffffea1 	.word	0xfffffea1
 8004578:	fffffee8 	.word	0xfffffee8
 800457c:	080235d0 	.word	0x080235d0
 8004580:	08023088 	.word	0x08023088
 8004584:	fffffee4 	.word	0xfffffee4
 8004588:	080235fc 	.word	0x080235fc
 800458c:	fffffedc 	.word	0xfffffedc
 8004590:	08023600 	.word	0x08023600
 8004594:	fffffed4 	.word	0xfffffed4
 8004598:	08023608 	.word	0x08023608
 800459c:	fffffecc 	.word	0xfffffecc
 80045a0:	08023610 	.word	0x08023610
 80045a4:	fffffec8 	.word	0xfffffec8
 80045a8:	fffffeb8 	.word	0xfffffeb8
 80045ac:	08023618 	.word	0x08023618
 80045b0:	fffffea8 	.word	0xfffffea8
 80045b4:	08023628 	.word	0x08023628
 80045b8:	080251e0 	.word	0x080251e0
 80045bc:	20000a26 	.word	0x20000a26
 80045c0:	080235e8 	.word	0x080235e8
 80045c4:	080230ac 	.word	0x080230ac
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80045c8:	22ac      	movs	r2, #172	@ 0xac
 80045ca:	0052      	lsls	r2, r2, #1
 80045cc:	18bb      	adds	r3, r7, r2
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <ParseBuffer+0x318>
 80045d4:	18bb      	adds	r3, r7, r2
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b72      	cmp	r3, #114	@ 0x72
 80045dc:	d104      	bne.n	80045e8 <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 80045de:	2360      	movs	r3, #96	@ 0x60
 80045e0:	33ff      	adds	r3, #255	@ 0xff
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2202      	movs	r2, #2
 80045e6:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80045e8:	22ac      	movs	r2, #172	@ 0xac
 80045ea:	0052      	lsls	r2, r2, #1
 80045ec:	18bb      	adds	r3, r7, r2
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <ParseBuffer+0x338>
 80045f4:	18bb      	adds	r3, r7, r2
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80045fc:	d104      	bne.n	8004608 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80045fe:	2360      	movs	r3, #96	@ 0x60
 8004600:	33ff      	adds	r3, #255	@ 0xff
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2205      	movs	r2, #5
 8004606:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004608:	22ac      	movs	r2, #172	@ 0xac
 800460a:	0052      	lsls	r2, r2, #1
 800460c:	18bb      	adds	r3, r7, r2
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <ParseBuffer+0x358>
 8004614:	18bb      	adds	r3, r7, r2
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b2b      	cmp	r3, #43	@ 0x2b
 800461c:	d104      	bne.n	8004628 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 800461e:	2360      	movs	r3, #96	@ 0x60
 8004620:	33ff      	adds	r3, #255	@ 0xff
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	220b      	movs	r2, #11
 8004626:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004628:	22aa      	movs	r2, #170	@ 0xaa
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	18bb      	adds	r3, r7, r2
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <ParseBuffer+0x36e>
 8004634:	18bb      	adds	r3, r7, r2
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b45      	cmp	r3, #69	@ 0x45
 800463c:	d00a      	beq.n	8004654 <ParseBuffer+0x384>
 800463e:	22a4      	movs	r2, #164	@ 0xa4
 8004640:	0052      	lsls	r2, r2, #1
 8004642:	18bb      	adds	r3, r7, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <ParseBuffer+0x38e>
 800464a:	18bb      	adds	r3, r7, r2
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b46      	cmp	r3, #70	@ 0x46
 8004652:	d104      	bne.n	800465e <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004654:	2360      	movs	r3, #96	@ 0x60
 8004656:	33ff      	adds	r3, #255	@ 0xff
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800465e:	22a8      	movs	r2, #168	@ 0xa8
 8004660:	0052      	lsls	r2, r2, #1
 8004662:	18bb      	adds	r3, r7, r2
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <ParseBuffer+0x3aa>
 800466a:	18bb      	adds	r3, r7, r2
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b57      	cmp	r3, #87	@ 0x57
 8004672:	d102      	bne.n	800467a <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <ParseBuffer+0x3d8>)
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800467a:	22a6      	movs	r2, #166	@ 0xa6
 800467c:	0052      	lsls	r2, r2, #1
 800467e:	18bb      	adds	r3, r7, r2
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <ParseBuffer+0x3c6>
 8004686:	18bb      	adds	r3, r7, r2
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b32      	cmp	r3, #50	@ 0x32
 800468e:	d102      	bne.n	8004696 <ParseBuffer+0x3c6>
      beurs = true;
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <ParseBuffer+0x3dc>)
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004696:	2360      	movs	r3, #96	@ 0x60
 8004698:	33ff      	adds	r3, #255	@ 0xff
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	781b      	ldrb	r3, [r3, #0]

}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b059      	add	sp, #356	@ 0x164
 80046a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	2000054c 	.word	0x2000054c
 80046ac:	2000054e 	.word	0x2000054e

080046b0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <PollAwake+0x34>)
 80046b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0018      	movs	r0, r3
 80046be:	f7fb fd55 	bl	800016c <strlen>
 80046c2:	0003      	movs	r3, r0
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0011      	movs	r1, r2
 80046ca:	0018      	movs	r0, r3
 80046cc:	f7ff fa22 	bl	8003b14 <ESP_Send>
 80046d0:	1e03      	subs	r3, r0, #0
 80046d2:	d001      	beq.n	80046d8 <PollAwake+0x28>
    return true;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <PollAwake+0x2a>
  }
  else{
    return false;
 80046d8:	2300      	movs	r3, #0
  }
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b002      	add	sp, #8
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	08023638 	.word	0x08023638

080046e8 <RFPower>:
bool RFPower(){
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <RFPower+0x34>)
 80046f0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd39 	bl	800016c <strlen>
 80046fa:	0003      	movs	r3, r0
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0011      	movs	r1, r2
 8004702:	0018      	movs	r0, r3
 8004704:	f7ff fa06 	bl	8003b14 <ESP_Send>
 8004708:	1e03      	subs	r3, r0, #0
 800470a:	d001      	beq.n	8004710 <RFPower+0x28>
    return true;
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <RFPower+0x2a>
  }
  else{
    return false;
 8004710:	2300      	movs	r3, #0
  }
}
 8004712:	0018      	movs	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	b002      	add	sp, #8
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	08023640 	.word	0x08023640

08004720 <CheckRFPower>:
bool CheckRFPower(){
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004726:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <CheckRFPower+0x34>)
 8004728:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0018      	movs	r0, r3
 800472e:	f7fb fd1d 	bl	800016c <strlen>
 8004732:	0003      	movs	r3, r0
 8004734:	b29a      	uxth	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0011      	movs	r1, r2
 800473a:	0018      	movs	r0, r3
 800473c:	f7ff f9ea 	bl	8003b14 <ESP_Send>
 8004740:	1e03      	subs	r3, r0, #0
 8004742:	d001      	beq.n	8004748 <CheckRFPower+0x28>
    return true;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004748:	2300      	movs	r3, #0
  }
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b002      	add	sp, #8
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	08023650 	.word	0x08023650

08004758 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800475e:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <ATRestore+0x34>)
 8004760:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f7fb fd01 	bl	800016c <strlen>
 800476a:	0003      	movs	r3, r0
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0011      	movs	r1, r2
 8004772:	0018      	movs	r0, r3
 8004774:	f7ff f9ce 	bl	8003b14 <ESP_Send>
 8004778:	1e03      	subs	r3, r0, #0
 800477a:	d001      	beq.n	8004780 <ATRestore+0x28>
    return true;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <ATRestore+0x2a>
  }
  else{
    return false;
 8004780:	2300      	movs	r3, #0
  }
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b002      	add	sp, #8
 8004788:	bd80      	pop	{r7, pc}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	08023660 	.word	0x08023660

08004790 <CWINIT>:
bool CWINIT(){
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004796:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <CWINIT+0x34>)
 8004798:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f7fb fce5 	bl	800016c <strlen>
 80047a2:	0003      	movs	r3, r0
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0011      	movs	r1, r2
 80047aa:	0018      	movs	r0, r3
 80047ac:	f7ff f9b2 	bl	8003b14 <ESP_Send>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d001      	beq.n	80047b8 <CWINIT+0x28>
    return true;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <CWINIT+0x2a>
  }
  else{
    return false;
 80047b8:	2300      	movs	r3, #0
  }
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	08023670 	.word	0x08023670

080047c8 <CWMODE1>:
bool CWMODE1(){
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80047ce:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <CWMODE1+0x34>)
 80047d0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7fb fcc9 	bl	800016c <strlen>
 80047da:	0003      	movs	r3, r0
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0011      	movs	r1, r2
 80047e2:	0018      	movs	r0, r3
 80047e4:	f7ff f996 	bl	8003b14 <ESP_Send>
 80047e8:	1e03      	subs	r3, r0, #0
 80047ea:	d001      	beq.n	80047f0 <CWMODE1+0x28>
    return true;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <CWMODE1+0x2a>
  }
  else{
    return false;
 80047f0:	2300      	movs	r3, #0
  }
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b002      	add	sp, #8
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	08023680 	.word	0x08023680

08004800 <CWMODE2>:
bool CWMODE2(){
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004806:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <CWMODE2+0x34>)
 8004808:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0018      	movs	r0, r3
 800480e:	f7fb fcad 	bl	800016c <strlen>
 8004812:	0003      	movs	r3, r0
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0011      	movs	r1, r2
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff f97a 	bl	8003b14 <ESP_Send>
 8004820:	1e03      	subs	r3, r0, #0
 8004822:	d001      	beq.n	8004828 <CWMODE2+0x28>
    return true;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004828:	2300      	movs	r3, #0
  }
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b002      	add	sp, #8
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	08023690 	.word	0x08023690

08004838 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800483e:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <CWAUTOCONN+0x34>)
 8004840:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f7fb fc91 	bl	800016c <strlen>
 800484a:	0003      	movs	r3, r0
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	0011      	movs	r1, r2
 8004852:	0018      	movs	r0, r3
 8004854:	f7ff f95e 	bl	8003b14 <ESP_Send>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d001      	beq.n	8004860 <CWAUTOCONN+0x28>
    return true;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004860:	2300      	movs	r3, #0
  }
}
 8004862:	0018      	movs	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	b002      	add	sp, #8
 8004868:	bd80      	pop	{r7, pc}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	080236a0 	.word	0x080236a0

08004870 <CWJAP>:
bool CWJAP(){
 8004870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004872:	46c6      	mov	lr, r8
 8004874:	b500      	push	{lr}
 8004876:	b0a2      	sub	sp, #136	@ 0x88
 8004878:	af00      	add	r7, sp, #0
 800487a:	466b      	mov	r3, sp
 800487c:	4698      	mov	r8, r3
  beursTest = true;
 800487e:	4b39      	ldr	r3, [pc, #228]	@ (8004964 <CWJAP+0xf4>)
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004884:	2618      	movs	r6, #24
 8004886:	19bb      	adds	r3, r7, r6
 8004888:	2264      	movs	r2, #100	@ 0x64
 800488a:	2100      	movs	r1, #0
 800488c:	0018      	movs	r0, r3
 800488e:	f01b fc47 	bl	8020120 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004892:	4b35      	ldr	r3, [pc, #212]	@ (8004968 <CWJAP+0xf8>)
 8004894:	4a35      	ldr	r2, [pc, #212]	@ (800496c <CWJAP+0xfc>)
 8004896:	4936      	ldr	r1, [pc, #216]	@ (8004970 <CWJAP+0x100>)
 8004898:	19b8      	adds	r0, r7, r6
 800489a:	f01b fafd 	bl	801fe98 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800489e:	19bb      	adds	r3, r7, r6
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7fb fc63 	bl	800016c <strlen>
 80048a6:	0002      	movs	r2, r0
 80048a8:	216f      	movs	r1, #111	@ 0x6f
 80048aa:	0030      	movs	r0, r6
 80048ac:	180b      	adds	r3, r1, r0
 80048ae:	19db      	adds	r3, r3, r7
 80048b0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80048b2:	180b      	adds	r3, r1, r0
 80048b4:	19db      	adds	r3, r3, r7
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	2180      	movs	r1, #128	@ 0x80
 80048be:	1879      	adds	r1, r7, r1
 80048c0:	600a      	str	r2, [r1, #0]
 80048c2:	001a      	movs	r2, r3
 80048c4:	60ba      	str	r2, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	60fa      	str	r2, [r7, #12]
 80048ca:	68b8      	ldr	r0, [r7, #8]
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	0002      	movs	r2, r0
 80048d0:	0f52      	lsrs	r2, r2, #29
 80048d2:	000e      	movs	r6, r1
 80048d4:	00f6      	lsls	r6, r6, #3
 80048d6:	617e      	str	r6, [r7, #20]
 80048d8:	697e      	ldr	r6, [r7, #20]
 80048da:	4316      	orrs	r6, r2
 80048dc:	617e      	str	r6, [r7, #20]
 80048de:	0002      	movs	r2, r0
 80048e0:	00d2      	lsls	r2, r2, #3
 80048e2:	613a      	str	r2, [r7, #16]
 80048e4:	001a      	movs	r2, r3
 80048e6:	603a      	str	r2, [r7, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	6838      	ldr	r0, [r7, #0]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	0002      	movs	r2, r0
 80048f2:	0f52      	lsrs	r2, r2, #29
 80048f4:	000e      	movs	r6, r1
 80048f6:	00f5      	lsls	r5, r6, #3
 80048f8:	4315      	orrs	r5, r2
 80048fa:	0002      	movs	r2, r0
 80048fc:	00d4      	lsls	r4, r2, #3
 80048fe:	3307      	adds	r3, #7
 8004900:	08db      	lsrs	r3, r3, #3
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	466a      	mov	r2, sp
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	469d      	mov	sp, r3
 800490a:	466b      	mov	r3, sp
 800490c:	3300      	adds	r3, #0
 800490e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004910:	246f      	movs	r4, #111	@ 0x6f
 8004912:	2518      	movs	r5, #24
 8004914:	1963      	adds	r3, r4, r5
 8004916:	19db      	adds	r3, r3, r7
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	001a      	movs	r2, r3
 800491e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004920:	2100      	movs	r1, #0
 8004922:	0018      	movs	r0, r3
 8004924:	f01b fbfc 	bl	8020120 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004928:	1963      	adds	r3, r4, r5
 800492a:	19db      	adds	r3, r3, r7
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	1979      	adds	r1, r7, r5
 8004930:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004932:	0018      	movs	r0, r3
 8004934:	f01b fc1b 	bl	802016e <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004938:	1963      	adds	r3, r4, r5
 800493a:	19db      	adds	r3, r3, r7
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b29a      	uxth	r2, r3
 8004940:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004942:	0011      	movs	r1, r2
 8004944:	0018      	movs	r0, r3
 8004946:	f7ff f8e5 	bl	8003b14 <ESP_Send>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d001      	beq.n	8004952 <CWJAP+0xe2>
    return true;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <CWJAP+0xe4>
  }
  else{
    return false;
 8004952:	2300      	movs	r3, #0
 8004954:	46c5      	mov	sp, r8
  }
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b022      	add	sp, #136	@ 0x88
 800495c:	bc80      	pop	{r7}
 800495e:	46b8      	mov	r8, r7
 8004960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	2000054d 	.word	0x2000054d
 8004968:	080251ec 	.word	0x080251ec
 800496c:	080251e0 	.word	0x080251e0
 8004970:	080236b4 	.word	0x080236b4

08004974 <CWMODE3>:
bool CWMODE3(){
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800497a:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <CWMODE3+0x34>)
 800497c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f7fb fbf3 	bl	800016c <strlen>
 8004986:	0003      	movs	r3, r0
 8004988:	b29a      	uxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0011      	movs	r1, r2
 800498e:	0018      	movs	r0, r3
 8004990:	f7ff f8c0 	bl	8003b14 <ESP_Send>
 8004994:	1e03      	subs	r3, r0, #0
 8004996:	d001      	beq.n	800499c <CWMODE3+0x28>
    return true;
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <CWMODE3+0x2a>
  }
  else{
    return false;
 800499c:	2300      	movs	r3, #0
  }
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	080236cc 	.word	0x080236cc

080049ac <CWSTATE>:
bool CWSTATE(){
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <CWSTATE+0x34>)
 80049b4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fb fbd7 	bl	800016c <strlen>
 80049be:	0003      	movs	r3, r0
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0011      	movs	r1, r2
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7ff f8a4 	bl	8003b14 <ESP_Send>
 80049cc:	1e03      	subs	r3, r0, #0
 80049ce:	d001      	beq.n	80049d4 <CWSTATE+0x28>
    return true;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <CWSTATE+0x2a>
  }
  else{
    return false;
 80049d4:	2300      	movs	r3, #0
  }
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b002      	add	sp, #8
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	080236dc 	.word	0x080236dc

080049e4 <CWSAP>:
bool CWSAP(){
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80049ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <CWSAP+0x34>)
 80049ec:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fb fbbb 	bl	800016c <strlen>
 80049f6:	0003      	movs	r3, r0
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0011      	movs	r1, r2
 80049fe:	0018      	movs	r0, r3
 8004a00:	f7ff f888 	bl	8003b14 <ESP_Send>
 8004a04:	1e03      	subs	r3, r0, #0
 8004a06:	d001      	beq.n	8004a0c <CWSAP+0x28>
    return true;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <CWSAP+0x2a>
  }
  else{
    return false;
 8004a0c:	2300      	movs	r3, #0
  }
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b002      	add	sp, #8
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	080236ec 	.word	0x080236ec

08004a1c <CIPMUX>:
bool CIPMUX(){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004a22:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <CIPMUX+0x34>)
 8004a24:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7fb fb9f 	bl	800016c <strlen>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0011      	movs	r1, r2
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7ff f86c 	bl	8003b14 <ESP_Send>
 8004a3c:	1e03      	subs	r3, r0, #0
 8004a3e:	d001      	beq.n	8004a44 <CIPMUX+0x28>
    return true;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004a44:	2300      	movs	r3, #0
  }
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b002      	add	sp, #8
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	08023710 	.word	0x08023710

08004a54 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <WEBSERVER+0x34>)
 8004a5c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7fb fb83 	bl	800016c <strlen>
 8004a66:	0003      	movs	r3, r0
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0011      	movs	r1, r2
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7ff f850 	bl	8003b14 <ESP_Send>
 8004a74:	1e03      	subs	r3, r0, #0
 8004a76:	d001      	beq.n	8004a7c <WEBSERVER+0x28>
    return true;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a7c:	2300      	movs	r3, #0
  }
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b002      	add	sp, #8
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	08023720 	.word	0x08023720

08004a8c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b0c5      	sub	sp, #276	@ 0x114
 8004a90:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	005a      	lsls	r2, r3, #1
 8004a96:	1d3b      	adds	r3, r7, #4
 8004a98:	2100      	movs	r1, #0
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f01b fb40 	bl	8020120 <memset>
  uint16_t length = CreateMessage(beurs);
 8004aa0:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <HTTPCPOST+0xa0>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	1dfc      	adds	r4, r7, #7
 8004aa6:	34ff      	adds	r4, #255	@ 0xff
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7ff f979 	bl	8003da0 <CreateMessage>
 8004aae:	0003      	movs	r3, r0
 8004ab0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <HTTPCPOST+0xa0>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	33ff      	adds	r3, #255	@ 0xff
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b30 <HTTPCPOST+0xa4>)
 8004ac2:	491c      	ldr	r1, [pc, #112]	@ (8004b34 <HTTPCPOST+0xa8>)
 8004ac4:	1d38      	adds	r0, r7, #4
 8004ac6:	f01b f9e7 	bl	801fe98 <siprintf>
 8004aca:	e016      	b.n	8004afa <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004acc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b38 <HTTPCPOST+0xac>)
 8004ace:	481b      	ldr	r0, [pc, #108]	@ (8004b3c <HTTPCPOST+0xb0>)
 8004ad0:	220c      	movs	r2, #12
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	f7fe fe10 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004ad8:	4a17      	ldr	r2, [pc, #92]	@ (8004b38 <HTTPCPOST+0xac>)
 8004ada:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <HTTPCPOST+0xb4>)
 8004adc:	0011      	movs	r1, r2
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f7ff f93a 	bl	8003d58 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	33ff      	adds	r3, #255	@ 0xff
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	4c15      	ldr	r4, [pc, #84]	@ (8004b40 <HTTPCPOST+0xb4>)
 8004aec:	4a15      	ldr	r2, [pc, #84]	@ (8004b44 <HTTPCPOST+0xb8>)
 8004aee:	4916      	ldr	r1, [pc, #88]	@ (8004b48 <HTTPCPOST+0xbc>)
 8004af0:	1d38      	adds	r0, r7, #4
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	0023      	movs	r3, r4
 8004af6:	f01b f9cf 	bl	801fe98 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7fb fb35 	bl	800016c <strlen>
 8004b02:	0002      	movs	r2, r0
 8004b04:	1d7b      	adds	r3, r7, #5
 8004b06:	33ff      	adds	r3, #255	@ 0xff
 8004b08:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004b0a:	1d7b      	adds	r3, r7, #5
 8004b0c:	33ff      	adds	r3, #255	@ 0xff
 8004b0e:	881a      	ldrh	r2, [r3, #0]
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	0011      	movs	r1, r2
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7fe fffd 	bl	8003b14 <ESP_Send>
 8004b1a:	1e03      	subs	r3, r0, #0
 8004b1c:	d001      	beq.n	8004b22 <HTTPCPOST+0x96>
    return true;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004b22:	2300      	movs	r3, #0
  }
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b043      	add	sp, #268	@ 0x10c
 8004b2a:	bd90      	pop	{r4, r7, pc}
 8004b2c:	2000054e 	.word	0x2000054e
 8004b30:	08025208 	.word	0x08025208
 8004b34:	08023738 	.word	0x08023738
 8004b38:	20000b10 	.word	0x20000b10
 8004b3c:	08080000 	.word	0x08080000
 8004b40:	20000b1c 	.word	0x20000b1c
 8004b44:	08025244 	.word	0x08025244
 8004b48:	08023770 	.word	0x08023770

08004b4c <SENDDATA>:

bool SENDDATA(){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <SENDDATA+0x34>)
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fb fb09 	bl	800016c <strlen>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	1dbb      	adds	r3, r7, #6
 8004b5e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b60:	1dbb      	adds	r3, r7, #6
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <SENDDATA+0x34>)
 8004b66:	0011      	movs	r1, r2
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fe ffd3 	bl	8003b14 <ESP_Send>
 8004b6e:	1e03      	subs	r3, r0, #0
 8004b70:	d001      	beq.n	8004b76 <SENDDATA+0x2a>
    return true;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b76:	2300      	movs	r3, #0
  }
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	2000058c 	.word	0x2000058c

08004b84 <SLEEP>:

bool SLEEP(){
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <SLEEP+0x34>)
 8004b8c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fb faeb 	bl	800016c <strlen>
 8004b96:	0003      	movs	r3, r0
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0011      	movs	r1, r2
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fe ffb8 	bl	8003b14 <ESP_Send>
 8004ba4:	1e03      	subs	r3, r0, #0
 8004ba6:	d001      	beq.n	8004bac <SLEEP+0x28>
    return true;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <SLEEP+0x2a>
  }
  else{
    return false;
 8004bac:	2300      	movs	r3, #0
  }
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	080237b0 	.word	0x080237b0

08004bbc <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <CIPSNTPCFG+0x3c>)
 8004bc4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fb facf 	bl	800016c <strlen>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f7fe ff9c 	bl	8003b14 <ESP_Send>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d006      	beq.n	8004bee <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004be0:	23fa      	movs	r3, #250	@ 0xfa
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	0018      	movs	r0, r3
 8004be6:	f00a f84d 	bl	800ec84 <HAL_Delay>
    return true;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004bee:	2300      	movs	r3, #0
  }
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	080237c0 	.word	0x080237c0

08004bfc <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004c02:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <CIPSNTPTIME+0x34>)
 8004c04:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fb faaf 	bl	800016c <strlen>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0011      	movs	r1, r2
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7fe ff7c 	bl	8003b14 <ESP_Send>
 8004c1c:	1e03      	subs	r3, r0, #0
 8004c1e:	d001      	beq.n	8004c24 <CIPSNTPTIME+0x28>
    return true;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004c24:	2300      	movs	r3, #0
  }
}
 8004c26:	0018      	movs	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b002      	add	sp, #8
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	08023810 	.word	0x08023810

08004c34 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <CIPSNTPINTV+0x34>)
 8004c3c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f7fb fa93 	bl	800016c <strlen>
 8004c46:	0003      	movs	r3, r0
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7fe ff60 	bl	8003b14 <ESP_Send>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d001      	beq.n	8004c5c <CIPSNTPINTV+0x28>
    return true;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c5c:	2300      	movs	r3, #0
  }
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b002      	add	sp, #8
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	08023824 	.word	0x08023824

08004c6c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c6c:	b5b0      	push	{r4, r5, r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	0002      	movs	r2, r0
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c78:	4b6c      	ldr	r3, [pc, #432]	@ (8004e2c <DMA_ProcessBuffer+0x1c0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	200e      	movs	r0, #14
 8004c82:	183b      	adds	r3, r7, r0
 8004c84:	2180      	movs	r1, #128	@ 0x80
 8004c86:	0049      	lsls	r1, r1, #1
 8004c88:	1a8a      	subs	r2, r1, r2
 8004c8a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004c8c:	230d      	movs	r3, #13
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2203      	movs	r2, #3
 8004c92:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004c94:	183b      	adds	r3, r7, r0
 8004c96:	881a      	ldrh	r2, [r3, #0]
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d903      	bls.n	8004ca8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004ca0:	183b      	adds	r3, r7, r0
 8004ca2:	2280      	movs	r2, #128	@ 0x80
 8004ca4:	0052      	lsls	r2, r2, #1
 8004ca6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004ca8:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	001a      	movs	r2, r3
 8004cb0:	230e      	movs	r3, #14
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d131      	bne.n	8004d1e <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004cba:	4b5e      	ldr	r3, [pc, #376]	@ (8004e34 <DMA_ProcessBuffer+0x1c8>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b14      	cmp	r3, #20
 8004cc0:	d91b      	bls.n	8004cfa <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e34 <DMA_ProcessBuffer+0x1c8>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e38 <DMA_ProcessBuffer+0x1cc>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <DMA_ProcessBuffer+0x74>
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e3c <DMA_ProcessBuffer+0x1d0>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004cd8:	230d      	movs	r3, #13
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	2207      	movs	r2, #7
 8004cde:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004ce0:	4b55      	ldr	r3, [pc, #340]	@ (8004e38 <DMA_ProcessBuffer+0x1cc>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d103      	bne.n	8004cf0 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004ce8:	4b55      	ldr	r3, [pc, #340]	@ (8004e40 <DMA_ProcessBuffer+0x1d4>)
 8004cea:	220b      	movs	r2, #11
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e016      	b.n	8004d1e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004cf0:	230d      	movs	r3, #13
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	2206      	movs	r2, #6
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e011      	b.n	8004d1e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8004e34 <DMA_ProcessBuffer+0x1c8>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b4c      	ldr	r3, [pc, #304]	@ (8004e34 <DMA_ProcessBuffer+0x1c8>)
 8004d04:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004d06:	f009 ffb3 	bl	800ec70 <HAL_GetTick>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	33f5      	adds	r3, #245	@ 0xf5
 8004d0e:	33ff      	adds	r3, #255	@ 0xff
 8004d10:	001a      	movs	r2, r3
 8004d12:	4b4c      	ldr	r3, [pc, #304]	@ (8004e44 <DMA_ProcessBuffer+0x1d8>)
 8004d14:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004d16:	230d      	movs	r3, #13
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004d1e:	4b44      	ldr	r3, [pc, #272]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	001a      	movs	r2, r3
 8004d26:	210e      	movs	r1, #14
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <DMA_ProcessBuffer+0xc6>
 8004d30:	e075      	b.n	8004e1e <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004d32:	4b40      	ldr	r3, [pc, #256]	@ (8004e34 <DMA_ProcessBuffer+0x1c8>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004d38:	4b43      	ldr	r3, [pc, #268]	@ (8004e48 <DMA_ProcessBuffer+0x1dc>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d109      	bne.n	8004d5c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <DMA_ProcessBuffer+0x1dc>)
 8004d50:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d52:	230d      	movs	r3, #13
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	220a      	movs	r2, #10
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e060      	b.n	8004e1e <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e48 <DMA_ProcessBuffer+0x1dc>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	001a      	movs	r2, r3
 8004d64:	210e      	movs	r1, #14
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d6e:	187b      	adds	r3, r7, r1
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	4b34      	ldr	r3, [pc, #208]	@ (8004e48 <DMA_ProcessBuffer+0x1dc>)
 8004d76:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d78:	230d      	movs	r3, #13
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	220a      	movs	r2, #10
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	e04d      	b.n	8004e1e <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d82:	4b2b      	ldr	r3, [pc, #172]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	001a      	movs	r2, r3
 8004d8a:	210e      	movs	r1, #14
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d917      	bls.n	8004dc4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004d94:	4b26      	ldr	r3, [pc, #152]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e4c <DMA_ProcessBuffer+0x1e0>)
 8004d9e:	18d0      	adds	r0, r2, r3
 8004da0:	4b23      	ldr	r3, [pc, #140]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	001a      	movs	r2, r3
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	b299      	uxth	r1, r3
 8004db0:	230d      	movs	r3, #13
 8004db2:	18fc      	adds	r4, r7, r3
 8004db4:	1dfb      	adds	r3, r7, #7
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	001a      	movs	r2, r3
 8004dba:	f7ff fa89 	bl	80042d0 <ParseBuffer>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	7023      	strb	r3, [r4, #0]
 8004dc2:	e026      	b.n	8004e12 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	001a      	movs	r2, r3
 8004dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e4c <DMA_ProcessBuffer+0x1e0>)
 8004dce:	18d0      	adds	r0, r2, r3
 8004dd0:	4b17      	ldr	r3, [pc, #92]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	001a      	movs	r2, r3
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	b299      	uxth	r1, r3
 8004de0:	250d      	movs	r5, #13
 8004de2:	197c      	adds	r4, r7, r5
 8004de4:	1dfb      	adds	r3, r7, #7
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	001a      	movs	r2, r3
 8004dea:	f7ff fa71 	bl	80042d0 <ParseBuffer>
 8004dee:	0003      	movs	r3, r0
 8004df0:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004df2:	210e      	movs	r1, #14
 8004df4:	187b      	adds	r3, r7, r1
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004dfc:	197c      	adds	r4, r7, r5
 8004dfe:	1dfb      	adds	r3, r7, #7
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	187b      	adds	r3, r7, r1
 8004e04:	8819      	ldrh	r1, [r3, #0]
 8004e06:	4b11      	ldr	r3, [pc, #68]	@ (8004e4c <DMA_ProcessBuffer+0x1e0>)
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7ff fa61 	bl	80042d0 <ParseBuffer>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	7023      	strb	r3, [r4, #0]
              }
          }
//          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
          OldPos = pos;
 8004e12:	230e      	movs	r3, #14
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <DMA_ProcessBuffer+0x1c4>)
 8004e1c:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004e1e:	230d      	movs	r3, #13
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	781b      	ldrb	r3, [r3, #0]
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b004      	add	sp, #16
 8004e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e2c:	200022f0 	.word	0x200022f0
 8004e30:	20000b35 	.word	0x20000b35
 8004e34:	20000a24 	.word	0x20000a24
 8004e38:	20000a26 	.word	0x20000a26
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	2000002c 	.word	0x2000002c
 8004e44:	20000a1c 	.word	0x20000a1c
 8004e48:	20000b36 	.word	0x20000b36
 8004e4c:	20000448 	.word	0x20000448

08004e50 <clearDMABuffer>:

void clearDMABuffer(){
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e54:	2380      	movs	r3, #128	@ 0x80
 8004e56:	005a      	lsls	r2, r3, #1
 8004e58:	4b03      	ldr	r3, [pc, #12]	@ (8004e68 <clearDMABuffer+0x18>)
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f01b f95f 	bl	8020120 <memset>
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000448 	.word	0x20000448

08004e6c <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	0002      	movs	r2, r0
 8004e74:	1dfb      	adds	r3, r7, #7
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	1dbb      	adds	r3, r7, #6
 8004e7a:	1c0a      	adds	r2, r1, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e7e:	210f      	movs	r1, #15
 8004e80:	187b      	adds	r3, r7, r1
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e86:	1dbb      	adds	r3, r7, #6
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004e8e:	187b      	adds	r3, r7, r1
 8004e90:	1dfa      	adds	r2, r7, #7
 8004e92:	7812      	ldrb	r2, [r2, #0]
 8004e94:	4251      	negs	r1, r2
 8004e96:	414a      	adcs	r2, r1
 8004e98:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004e9a:	1dbb      	adds	r3, r7, #6
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d107      	bne.n	8004eb2 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004ea2:	230f      	movs	r3, #15
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	1dfa      	adds	r2, r7, #7
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	3a02      	subs	r2, #2
 8004eac:	4251      	negs	r1, r2
 8004eae:	414a      	adcs	r2, r1
 8004eb0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004eb2:	1dbb      	adds	r3, r7, #6
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d107      	bne.n	8004eca <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004eba:	230f      	movs	r3, #15
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	1dfa      	adds	r2, r7, #7
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	3a05      	subs	r2, #5
 8004ec4:	4251      	negs	r1, r2
 8004ec6:	414a      	adcs	r2, r1
 8004ec8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004eca:	1dbb      	adds	r3, r7, #6
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d107      	bne.n	8004ee2 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004ed2:	230f      	movs	r3, #15
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	1dfa      	adds	r2, r7, #7
 8004ed8:	7812      	ldrb	r2, [r2, #0]
 8004eda:	3a0b      	subs	r2, #11
 8004edc:	4251      	negs	r1, r2
 8004ede:	414a      	adcs	r2, r1
 8004ee0:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004ee2:	230f      	movs	r3, #15
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	781b      	ldrb	r3, [r3, #0]
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b004      	add	sp, #16
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	0002      	movs	r2, r0
 8004ef8:	1dfb      	adds	r3, r7, #7
 8004efa:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004efc:	230f      	movs	r3, #15
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004f04:	1dfb      	adds	r3, r7, #7
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b14      	cmp	r3, #20
 8004f0a:	d900      	bls.n	8004f0e <AT_Send+0x1e>
 8004f0c:	e18c      	b.n	8005228 <AT_Send+0x338>
 8004f0e:	009a      	lsls	r2, r3, #2
 8004f10:	4bc9      	ldr	r3, [pc, #804]	@ (8005238 <AT_Send+0x348>)
 8004f12:	18d3      	adds	r3, r2, r3
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004f18:	4bc8      	ldr	r3, [pc, #800]	@ (800523c <AT_Send+0x34c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f009 fa0b 	bl	800e338 <TimestampIsReached>
 8004f22:	1e03      	subs	r3, r0, #0
 8004f24:	d100      	bne.n	8004f28 <AT_Send+0x38>
 8004f26:	e17e      	b.n	8005226 <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004f28:	230f      	movs	r3, #15
 8004f2a:	18fc      	adds	r4, r7, r3
 8004f2c:	f7ff fbc0 	bl	80046b0 <PollAwake>
 8004f30:	0003      	movs	r3, r0
 8004f32:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f34:	f009 fe9c 	bl	800ec70 <HAL_GetTick>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	3332      	adds	r3, #50	@ 0x32
 8004f3c:	001a      	movs	r2, r3
 8004f3e:	4bbf      	ldr	r3, [pc, #764]	@ (800523c <AT_Send+0x34c>)
 8004f40:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f42:	e170      	b.n	8005226 <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f44:	4abe      	ldr	r2, [pc, #760]	@ (8005240 <AT_Send+0x350>)
 8004f46:	4bbf      	ldr	r3, [pc, #764]	@ (8005244 <AT_Send+0x354>)
 8004f48:	0019      	movs	r1, r3
 8004f4a:	2003      	movs	r0, #3
 8004f4c:	f009 fa4a 	bl	800e3e4 <CreateLine>
    ATCommandSend = RFPower();
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fc      	adds	r4, r7, r3
 8004f54:	f7ff fbc8 	bl	80046e8 <RFPower>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f5c:	f009 fe88 	bl	800ec70 <HAL_GetTick>
 8004f60:	0003      	movs	r3, r0
 8004f62:	330a      	adds	r3, #10
 8004f64:	001a      	movs	r2, r3
 8004f66:	4bb5      	ldr	r3, [pc, #724]	@ (800523c <AT_Send+0x34c>)
 8004f68:	601a      	str	r2, [r3, #0]
    break;
 8004f6a:	e15d      	b.n	8005228 <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f6c:	4ab6      	ldr	r2, [pc, #728]	@ (8005248 <AT_Send+0x358>)
 8004f6e:	4bb5      	ldr	r3, [pc, #724]	@ (8005244 <AT_Send+0x354>)
 8004f70:	0019      	movs	r1, r3
 8004f72:	2003      	movs	r0, #3
 8004f74:	f009 fa36 	bl	800e3e4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f78:	230f      	movs	r3, #15
 8004f7a:	18fc      	adds	r4, r7, r3
 8004f7c:	f7ff fbd0 	bl	8004720 <CheckRFPower>
 8004f80:	0003      	movs	r3, r0
 8004f82:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f84:	f009 fe74 	bl	800ec70 <HAL_GetTick>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	330a      	adds	r3, #10
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	4bab      	ldr	r3, [pc, #684]	@ (800523c <AT_Send+0x34c>)
 8004f90:	601a      	str	r2, [r3, #0]
    break;
 8004f92:	e149      	b.n	8005228 <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004f94:	4aad      	ldr	r2, [pc, #692]	@ (800524c <AT_Send+0x35c>)
 8004f96:	4bab      	ldr	r3, [pc, #684]	@ (8005244 <AT_Send+0x354>)
 8004f98:	0019      	movs	r1, r3
 8004f9a:	2003      	movs	r0, #3
 8004f9c:	f009 fa22 	bl	800e3e4 <CreateLine>
    ATCommandSend = ATRestore();
 8004fa0:	230f      	movs	r3, #15
 8004fa2:	18fc      	adds	r4, r7, r3
 8004fa4:	f7ff fbd8 	bl	8004758 <ATRestore>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004fac:	f009 fe60 	bl	800ec70 <HAL_GetTick>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	3332      	adds	r3, #50	@ 0x32
 8004fb4:	001a      	movs	r2, r3
 8004fb6:	4ba1      	ldr	r3, [pc, #644]	@ (800523c <AT_Send+0x34c>)
 8004fb8:	601a      	str	r2, [r3, #0]
    break;
 8004fba:	e135      	b.n	8005228 <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004fbc:	4aa4      	ldr	r2, [pc, #656]	@ (8005250 <AT_Send+0x360>)
 8004fbe:	4ba1      	ldr	r3, [pc, #644]	@ (8005244 <AT_Send+0x354>)
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	2003      	movs	r0, #3
 8004fc4:	f009 fa0e 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWINIT();
 8004fc8:	230f      	movs	r3, #15
 8004fca:	18fc      	adds	r4, r7, r3
 8004fcc:	f7ff fbe0 	bl	8004790 <CWINIT>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fd4:	f009 fe4c 	bl	800ec70 <HAL_GetTick>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	33f5      	adds	r3, #245	@ 0xf5
 8004fdc:	33ff      	adds	r3, #255	@ 0xff
 8004fde:	001a      	movs	r2, r3
 8004fe0:	4b96      	ldr	r3, [pc, #600]	@ (800523c <AT_Send+0x34c>)
 8004fe2:	601a      	str	r2, [r3, #0]
    break;
 8004fe4:	e120      	b.n	8005228 <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004fe6:	4a9b      	ldr	r2, [pc, #620]	@ (8005254 <AT_Send+0x364>)
 8004fe8:	4b96      	ldr	r3, [pc, #600]	@ (8005244 <AT_Send+0x354>)
 8004fea:	0019      	movs	r1, r3
 8004fec:	2003      	movs	r0, #3
 8004fee:	f009 f9f9 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWSTATE();
 8004ff2:	230f      	movs	r3, #15
 8004ff4:	18fc      	adds	r4, r7, r3
 8004ff6:	f7ff fcd9 	bl	80049ac <CWSTATE>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ffe:	f009 fe37 	bl	800ec70 <HAL_GetTick>
 8005002:	0003      	movs	r3, r0
 8005004:	33f5      	adds	r3, #245	@ 0xf5
 8005006:	33ff      	adds	r3, #255	@ 0xff
 8005008:	001a      	movs	r2, r3
 800500a:	4b8c      	ldr	r3, [pc, #560]	@ (800523c <AT_Send+0x34c>)
 800500c:	601a      	str	r2, [r3, #0]
    break;
 800500e:	e10b      	b.n	8005228 <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8005010:	4a91      	ldr	r2, [pc, #580]	@ (8005258 <AT_Send+0x368>)
 8005012:	4b8c      	ldr	r3, [pc, #560]	@ (8005244 <AT_Send+0x354>)
 8005014:	0019      	movs	r1, r3
 8005016:	2003      	movs	r0, #3
 8005018:	f009 f9e4 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWMODE1();
 800501c:	230f      	movs	r3, #15
 800501e:	18fc      	adds	r4, r7, r3
 8005020:	f7ff fbd2 	bl	80047c8 <CWMODE1>
 8005024:	0003      	movs	r3, r0
 8005026:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005028:	f009 fe22 	bl	800ec70 <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	330a      	adds	r3, #10
 8005030:	001a      	movs	r2, r3
 8005032:	4b82      	ldr	r3, [pc, #520]	@ (800523c <AT_Send+0x34c>)
 8005034:	601a      	str	r2, [r3, #0]
    break;
 8005036:	e0f7      	b.n	8005228 <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005038:	4a87      	ldr	r2, [pc, #540]	@ (8005258 <AT_Send+0x368>)
 800503a:	4b82      	ldr	r3, [pc, #520]	@ (8005244 <AT_Send+0x354>)
 800503c:	0019      	movs	r1, r3
 800503e:	2003      	movs	r0, #3
 8005040:	f009 f9d0 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWMODE2();
 8005044:	230f      	movs	r3, #15
 8005046:	18fc      	adds	r4, r7, r3
 8005048:	f7ff fbda 	bl	8004800 <CWMODE2>
 800504c:	0003      	movs	r3, r0
 800504e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005050:	f009 fe0e 	bl	800ec70 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	330a      	adds	r3, #10
 8005058:	001a      	movs	r2, r3
 800505a:	4b78      	ldr	r3, [pc, #480]	@ (800523c <AT_Send+0x34c>)
 800505c:	601a      	str	r2, [r3, #0]
    break;
 800505e:	e0e3      	b.n	8005228 <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005060:	4a7e      	ldr	r2, [pc, #504]	@ (800525c <AT_Send+0x36c>)
 8005062:	4b78      	ldr	r3, [pc, #480]	@ (8005244 <AT_Send+0x354>)
 8005064:	0019      	movs	r1, r3
 8005066:	2003      	movs	r0, #3
 8005068:	f009 f9bc 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800506c:	230f      	movs	r3, #15
 800506e:	18fc      	adds	r4, r7, r3
 8005070:	f7ff fbe2 	bl	8004838 <CWAUTOCONN>
 8005074:	0003      	movs	r3, r0
 8005076:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005078:	f009 fdfa 	bl	800ec70 <HAL_GetTick>
 800507c:	0003      	movs	r3, r0
 800507e:	330a      	adds	r3, #10
 8005080:	001a      	movs	r2, r3
 8005082:	4b6e      	ldr	r3, [pc, #440]	@ (800523c <AT_Send+0x34c>)
 8005084:	601a      	str	r2, [r3, #0]
    break;
 8005086:	e0cf      	b.n	8005228 <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005088:	4a75      	ldr	r2, [pc, #468]	@ (8005260 <AT_Send+0x370>)
 800508a:	4b6e      	ldr	r3, [pc, #440]	@ (8005244 <AT_Send+0x354>)
 800508c:	0019      	movs	r1, r3
 800508e:	2003      	movs	r0, #3
 8005090:	f009 f9a8 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWJAP();
 8005094:	230f      	movs	r3, #15
 8005096:	18fc      	adds	r4, r7, r3
 8005098:	f7ff fbea 	bl	8004870 <CWJAP>
 800509c:	0003      	movs	r3, r0
 800509e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80050a0:	f009 fde6 	bl	800ec70 <HAL_GetTick>
 80050a4:	0003      	movs	r3, r0
 80050a6:	3332      	adds	r3, #50	@ 0x32
 80050a8:	001a      	movs	r2, r3
 80050aa:	4b64      	ldr	r3, [pc, #400]	@ (800523c <AT_Send+0x34c>)
 80050ac:	601a      	str	r2, [r3, #0]
    break;
 80050ae:	e0bb      	b.n	8005228 <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80050b0:	4a6c      	ldr	r2, [pc, #432]	@ (8005264 <AT_Send+0x374>)
 80050b2:	4b64      	ldr	r3, [pc, #400]	@ (8005244 <AT_Send+0x354>)
 80050b4:	0019      	movs	r1, r3
 80050b6:	2003      	movs	r0, #3
 80050b8:	f009 f994 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWMODE3();
 80050bc:	230f      	movs	r3, #15
 80050be:	18fc      	adds	r4, r7, r3
 80050c0:	f7ff fc58 	bl	8004974 <CWMODE3>
 80050c4:	0003      	movs	r3, r0
 80050c6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050c8:	f009 fdd2 	bl	800ec70 <HAL_GetTick>
 80050cc:	0003      	movs	r3, r0
 80050ce:	330a      	adds	r3, #10
 80050d0:	001a      	movs	r2, r3
 80050d2:	4b5a      	ldr	r3, [pc, #360]	@ (800523c <AT_Send+0x34c>)
 80050d4:	601a      	str	r2, [r3, #0]
    break;
 80050d6:	e0a7      	b.n	8005228 <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80050d8:	4a63      	ldr	r2, [pc, #396]	@ (8005268 <AT_Send+0x378>)
 80050da:	4b5a      	ldr	r3, [pc, #360]	@ (8005244 <AT_Send+0x354>)
 80050dc:	0019      	movs	r1, r3
 80050de:	2003      	movs	r0, #3
 80050e0:	f009 f980 	bl	800e3e4 <CreateLine>
    ATCommandSend = CWSAP();
 80050e4:	230f      	movs	r3, #15
 80050e6:	18fc      	adds	r4, r7, r3
 80050e8:	f7ff fc7c 	bl	80049e4 <CWSAP>
 80050ec:	0003      	movs	r3, r0
 80050ee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050f0:	f009 fdbe 	bl	800ec70 <HAL_GetTick>
 80050f4:	0003      	movs	r3, r0
 80050f6:	330a      	adds	r3, #10
 80050f8:	001a      	movs	r2, r3
 80050fa:	4b50      	ldr	r3, [pc, #320]	@ (800523c <AT_Send+0x34c>)
 80050fc:	601a      	str	r2, [r3, #0]
    break;
 80050fe:	e093      	b.n	8005228 <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8005100:	230f      	movs	r3, #15
 8005102:	18fc      	adds	r4, r7, r3
 8005104:	f7ff fc8a 	bl	8004a1c <CIPMUX>
 8005108:	0003      	movs	r3, r0
 800510a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800510c:	f009 fdb0 	bl	800ec70 <HAL_GetTick>
 8005110:	0003      	movs	r3, r0
 8005112:	330a      	adds	r3, #10
 8005114:	001a      	movs	r2, r3
 8005116:	4b49      	ldr	r3, [pc, #292]	@ (800523c <AT_Send+0x34c>)
 8005118:	601a      	str	r2, [r3, #0]
    break;
 800511a:	e085      	b.n	8005228 <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 800511c:	230f      	movs	r3, #15
 800511e:	18fc      	adds	r4, r7, r3
 8005120:	f7ff fc98 	bl	8004a54 <WEBSERVER>
 8005124:	0003      	movs	r3, r0
 8005126:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005128:	f009 fda2 	bl	800ec70 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	330a      	adds	r3, #10
 8005130:	001a      	movs	r2, r3
 8005132:	4b42      	ldr	r3, [pc, #264]	@ (800523c <AT_Send+0x34c>)
 8005134:	601a      	str	r2, [r3, #0]
    break;
 8005136:	e077      	b.n	8005228 <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005138:	230f      	movs	r3, #15
 800513a:	18fc      	adds	r4, r7, r3
 800513c:	f7ff fca6 	bl	8004a8c <HTTPCPOST>
 8005140:	0003      	movs	r3, r0
 8005142:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005144:	f009 fd94 	bl	800ec70 <HAL_GetTick>
 8005148:	0003      	movs	r3, r0
 800514a:	33f5      	adds	r3, #245	@ 0xf5
 800514c:	33ff      	adds	r3, #255	@ 0xff
 800514e:	001a      	movs	r2, r3
 8005150:	4b3a      	ldr	r3, [pc, #232]	@ (800523c <AT_Send+0x34c>)
 8005152:	601a      	str	r2, [r3, #0]
    break;
 8005154:	e068      	b.n	8005228 <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 8005156:	4a45      	ldr	r2, [pc, #276]	@ (800526c <AT_Send+0x37c>)
 8005158:	4b3a      	ldr	r3, [pc, #232]	@ (8005244 <AT_Send+0x354>)
 800515a:	0019      	movs	r1, r3
 800515c:	2003      	movs	r0, #3
 800515e:	f009 f941 	bl	800e3e4 <CreateLine>
    ATCommandSend = SENDDATA();
 8005162:	230f      	movs	r3, #15
 8005164:	18fc      	adds	r4, r7, r3
 8005166:	f7ff fcf1 	bl	8004b4c <SENDDATA>
 800516a:	0003      	movs	r3, r0
 800516c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800516e:	f009 fd7f 	bl	800ec70 <HAL_GetTick>
 8005172:	0003      	movs	r3, r0
 8005174:	33f5      	adds	r3, #245	@ 0xf5
 8005176:	33ff      	adds	r3, #255	@ 0xff
 8005178:	001a      	movs	r2, r3
 800517a:	4b30      	ldr	r3, [pc, #192]	@ (800523c <AT_Send+0x34c>)
 800517c:	601a      	str	r2, [r3, #0]
    break;
 800517e:	e053      	b.n	8005228 <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005180:	4a3b      	ldr	r2, [pc, #236]	@ (8005270 <AT_Send+0x380>)
 8005182:	4b30      	ldr	r3, [pc, #192]	@ (8005244 <AT_Send+0x354>)
 8005184:	0019      	movs	r1, r3
 8005186:	2003      	movs	r0, #3
 8005188:	f009 f92c 	bl	800e3e4 <CreateLine>
    ATCommandSend = SLEEP();
 800518c:	230f      	movs	r3, #15
 800518e:	18fc      	adds	r4, r7, r3
 8005190:	f7ff fcf8 	bl	8004b84 <SLEEP>
 8005194:	0003      	movs	r3, r0
 8005196:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005198:	f009 fd6a 	bl	800ec70 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	330a      	adds	r3, #10
 80051a0:	001a      	movs	r2, r3
 80051a2:	4b26      	ldr	r3, [pc, #152]	@ (800523c <AT_Send+0x34c>)
 80051a4:	601a      	str	r2, [r3, #0]
    break;
 80051a6:	e03f      	b.n	8005228 <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80051a8:	4a32      	ldr	r2, [pc, #200]	@ (8005274 <AT_Send+0x384>)
 80051aa:	4b26      	ldr	r3, [pc, #152]	@ (8005244 <AT_Send+0x354>)
 80051ac:	0019      	movs	r1, r3
 80051ae:	2003      	movs	r0, #3
 80051b0:	f009 f918 	bl	800e3e4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80051b4:	230f      	movs	r3, #15
 80051b6:	18fc      	adds	r4, r7, r3
 80051b8:	f7ff fd00 	bl	8004bbc <CIPSNTPCFG>
 80051bc:	0003      	movs	r3, r0
 80051be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051c0:	f009 fd56 	bl	800ec70 <HAL_GetTick>
 80051c4:	0003      	movs	r3, r0
 80051c6:	330a      	adds	r3, #10
 80051c8:	001a      	movs	r2, r3
 80051ca:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <AT_Send+0x34c>)
 80051cc:	601a      	str	r2, [r3, #0]
    break;
 80051ce:	e02b      	b.n	8005228 <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80051d0:	4a29      	ldr	r2, [pc, #164]	@ (8005278 <AT_Send+0x388>)
 80051d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005244 <AT_Send+0x354>)
 80051d4:	0019      	movs	r1, r3
 80051d6:	2003      	movs	r0, #3
 80051d8:	f009 f904 	bl	800e3e4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051dc:	230f      	movs	r3, #15
 80051de:	18fc      	adds	r4, r7, r3
 80051e0:	f7ff fd0c 	bl	8004bfc <CIPSNTPTIME>
 80051e4:	0003      	movs	r3, r0
 80051e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051e8:	f009 fd42 	bl	800ec70 <HAL_GetTick>
 80051ec:	0003      	movs	r3, r0
 80051ee:	33f5      	adds	r3, #245	@ 0xf5
 80051f0:	33ff      	adds	r3, #255	@ 0xff
 80051f2:	001a      	movs	r2, r3
 80051f4:	4b11      	ldr	r3, [pc, #68]	@ (800523c <AT_Send+0x34c>)
 80051f6:	601a      	str	r2, [r3, #0]
    break;
 80051f8:	e016      	b.n	8005228 <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80051fa:	4a20      	ldr	r2, [pc, #128]	@ (800527c <AT_Send+0x38c>)
 80051fc:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <AT_Send+0x354>)
 80051fe:	0019      	movs	r1, r3
 8005200:	2003      	movs	r0, #3
 8005202:	f009 f8ef 	bl	800e3e4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8005206:	230f      	movs	r3, #15
 8005208:	18fc      	adds	r4, r7, r3
 800520a:	f7ff fd13 	bl	8004c34 <CIPSNTPINTV>
 800520e:	0003      	movs	r3, r0
 8005210:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005212:	f009 fd2d 	bl	800ec70 <HAL_GetTick>
 8005216:	0003      	movs	r3, r0
 8005218:	330a      	adds	r3, #10
 800521a:	001a      	movs	r2, r3
 800521c:	4b07      	ldr	r3, [pc, #28]	@ (800523c <AT_Send+0x34c>)
 800521e:	601a      	str	r2, [r3, #0]
    break;
 8005220:	e002      	b.n	8005228 <AT_Send+0x338>
  case AT_END:
    break;
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	e000      	b.n	8005228 <AT_Send+0x338>
  break;
 8005226:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005228:	230f      	movs	r3, #15
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	781b      	ldrb	r3, [r3, #0]
}
 800522e:	0018      	movs	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	b005      	add	sp, #20
 8005234:	bd90      	pop	{r4, r7, pc}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	0802526c 	.word	0x0802526c
 800523c:	20000a1c 	.word	0x20000a1c
 8005240:	0802383c 	.word	0x0802383c
 8005244:	08023088 	.word	0x08023088
 8005248:	08023850 	.word	0x08023850
 800524c:	08023864 	.word	0x08023864
 8005250:	08023874 	.word	0x08023874
 8005254:	08023888 	.word	0x08023888
 8005258:	080238a0 	.word	0x080238a0
 800525c:	080238b8 	.word	0x080238b8
 8005260:	080238d0 	.word	0x080238d0
 8005264:	080238e4 	.word	0x080238e4
 8005268:	08023900 	.word	0x08023900
 800526c:	0802391c 	.word	0x0802391c
 8005270:	0802392c 	.word	0x0802392c
 8005274:	08023950 	.word	0x08023950
 8005278:	08023964 	.word	0x08023964
 800527c:	0802397c 	.word	0x0802397c

08005280 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8005286:	1dfb      	adds	r3, r7, #7
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800528c:	4b80      	ldr	r3, [pc, #512]	@ (8005490 <ESP_WakeTest+0x210>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b05      	cmp	r3, #5
 8005292:	d900      	bls.n	8005296 <ESP_WakeTest+0x16>
 8005294:	e0df      	b.n	8005456 <ESP_WakeTest+0x1d6>
 8005296:	009a      	lsls	r2, r3, #2
 8005298:	4b7e      	ldr	r3, [pc, #504]	@ (8005494 <ESP_WakeTest+0x214>)
 800529a:	18d3      	adds	r3, r2, r3
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 80052a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005498 <ESP_WakeTest+0x218>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	4053      	eors	r3, r2
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d036      	beq.n	800531c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	487a      	ldr	r0, [pc, #488]	@ (800549c <ESP_WakeTest+0x21c>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	0019      	movs	r1, r3
 80052b8:	f00a ff6b 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052bc:	2032      	movs	r0, #50	@ 0x32
 80052be:	f009 fce1 	bl	800ec84 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	4875      	ldr	r0, [pc, #468]	@ (800549c <ESP_WakeTest+0x21c>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	0019      	movs	r1, r3
 80052cc:	f00a ff61 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052d0:	200a      	movs	r0, #10
 80052d2:	f009 fcd7 	bl	800ec84 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052d6:	4b72      	ldr	r3, [pc, #456]	@ (80054a0 <ESP_WakeTest+0x220>)
 80052d8:	2200      	movs	r2, #0
 80052da:	2101      	movs	r1, #1
 80052dc:	0018      	movs	r0, r3
 80052de:	f00a ff58 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052e2:	200a      	movs	r0, #10
 80052e4:	f009 fcce 	bl	800ec84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052e8:	4b6d      	ldr	r3, [pc, #436]	@ (80054a0 <ESP_WakeTest+0x220>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	2102      	movs	r1, #2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f00a ff4f 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052f4:	200a      	movs	r0, #10
 80052f6:	f009 fcc5 	bl	800ec84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052fa:	4b69      	ldr	r3, [pc, #420]	@ (80054a0 <ESP_WakeTest+0x220>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	2101      	movs	r1, #1
 8005300:	0018      	movs	r0, r3
 8005302:	f00a ff46 	bl	8010192 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005306:	f009 fcb3 	bl	800ec70 <HAL_GetTick>
 800530a:	0003      	movs	r3, r0
 800530c:	22af      	movs	r2, #175	@ 0xaf
 800530e:	0092      	lsls	r2, r2, #2
 8005310:	189a      	adds	r2, r3, r2
 8005312:	4b64      	ldr	r3, [pc, #400]	@ (80054a4 <ESP_WakeTest+0x224>)
 8005314:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005316:	4b60      	ldr	r3, [pc, #384]	@ (8005498 <ESP_WakeTest+0x218>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	005a      	lsls	r2, r3, #1
 8005320:	4b61      	ldr	r3, [pc, #388]	@ (80054a8 <ESP_WakeTest+0x228>)
 8005322:	0011      	movs	r1, r2
 8005324:	0018      	movs	r0, r3
 8005326:	f7fe fc29 	bl	8003b7c <ESP_Receive>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d100      	bne.n	8005330 <ESP_WakeTest+0xb0>
 800532e:	e0a5      	b.n	800547c <ESP_WakeTest+0x1fc>
        TestState = ESP_TEST_SEND;
 8005330:	4b57      	ldr	r3, [pc, #348]	@ (8005490 <ESP_WakeTest+0x210>)
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005336:	e0a1      	b.n	800547c <ESP_WakeTest+0x1fc>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 8005338:	4b5a      	ldr	r3, [pc, #360]	@ (80054a4 <ESP_WakeTest+0x224>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	0018      	movs	r0, r3
 800533e:	f008 fffb 	bl	800e338 <TimestampIsReached>
 8005342:	1e03      	subs	r3, r0, #0
 8005344:	d100      	bne.n	8005348 <ESP_WakeTest+0xc8>
 8005346:	e09b      	b.n	8005480 <ESP_WakeTest+0x200>
        ATSend = AT_Send(ATCommand);
 8005348:	4b58      	ldr	r3, [pc, #352]	@ (80054ac <ESP_WakeTest+0x22c>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	1dfc      	adds	r4, r7, #7
 800534e:	0018      	movs	r0, r3
 8005350:	f7ff fdce 	bl	8004ef0 <AT_Send>
 8005354:	0003      	movs	r3, r0
 8005356:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d100      	bne.n	8005362 <ESP_WakeTest+0xe2>
 8005360:	e08e      	b.n	8005480 <ESP_WakeTest+0x200>
          TestState = ESP_TEST_RECEIVE;
 8005362:	4b4b      	ldr	r3, [pc, #300]	@ (8005490 <ESP_WakeTest+0x210>)
 8005364:	2202      	movs	r2, #2
 8005366:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005368:	e08a      	b.n	8005480 <ESP_WakeTest+0x200>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 800536a:	4b4e      	ldr	r3, [pc, #312]	@ (80054a4 <ESP_WakeTest+0x224>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	0018      	movs	r0, r3
 8005370:	f008 ffe2 	bl	800e338 <TimestampIsReached>
 8005374:	1e03      	subs	r3, r0, #0
 8005376:	d100      	bne.n	800537a <ESP_WakeTest+0xfa>
 8005378:	e084      	b.n	8005484 <ESP_WakeTest+0x204>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800537a:	4b4d      	ldr	r3, [pc, #308]	@ (80054b0 <ESP_WakeTest+0x230>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	0018      	movs	r0, r3
 8005380:	f7ff fc74 	bl	8004c6c <DMA_ProcessBuffer>
 8005384:	0003      	movs	r3, r0
 8005386:	001a      	movs	r2, r3
 8005388:	4b4a      	ldr	r3, [pc, #296]	@ (80054b4 <ESP_WakeTest+0x234>)
 800538a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800538c:	4b49      	ldr	r3, [pc, #292]	@ (80054b4 <ESP_WakeTest+0x234>)
 800538e:	781a      	ldrb	r2, [r3, #0]
 8005390:	4b47      	ldr	r3, [pc, #284]	@ (80054b0 <ESP_WakeTest+0x230>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	1dbc      	adds	r4, r7, #6
 8005396:	0019      	movs	r1, r3
 8005398:	0010      	movs	r0, r2
 800539a:	f7ff fd67 	bl	8004e6c <ATCompare>
 800539e:	0003      	movs	r3, r0
 80053a0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80053a2:	4b44      	ldr	r3, [pc, #272]	@ (80054b4 <ESP_WakeTest+0x234>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d102      	bne.n	80053b0 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80053aa:	4b39      	ldr	r3, [pc, #228]	@ (8005490 <ESP_WakeTest+0x210>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80053b0:	4b40      	ldr	r3, [pc, #256]	@ (80054b4 <ESP_WakeTest+0x234>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b07      	cmp	r3, #7
 80053b6:	d104      	bne.n	80053c2 <ESP_WakeTest+0x142>
          StartProg();
 80053b8:	f7fe ff58 	bl	800426c <StartProg>
          TestState = ESP_TEST_BOOT;
 80053bc:	4b34      	ldr	r3, [pc, #208]	@ (8005490 <ESP_WakeTest+0x210>)
 80053be:	2205      	movs	r2, #5
 80053c0:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80053c2:	4b3c      	ldr	r3, [pc, #240]	@ (80054b4 <ESP_WakeTest+0x234>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d109      	bne.n	80053de <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80053ca:	f009 fc51 	bl	800ec70 <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	3332      	adds	r3, #50	@ 0x32
 80053d2:	001a      	movs	r2, r3
 80053d4:	4b33      	ldr	r3, [pc, #204]	@ (80054a4 <ESP_WakeTest+0x224>)
 80053d6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005490 <ESP_WakeTest+0x210>)
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053de:	1dbb      	adds	r3, r7, #6
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d04e      	beq.n	8005484 <ESP_WakeTest+0x204>
          TestState = ESP_TEST_VALIDATE;
 80053e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005490 <ESP_WakeTest+0x210>)
 80053e8:	2203      	movs	r2, #3
 80053ea:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053ec:	e04a      	b.n	8005484 <ESP_WakeTest+0x204>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80053ee:	4b32      	ldr	r3, [pc, #200]	@ (80054b8 <ESP_WakeTest+0x238>)
 80053f0:	22fa      	movs	r2, #250	@ 0xfa
 80053f2:	0112      	lsls	r2, r2, #4
 80053f4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80053f6:	f007 fe85 	bl	800d104 <Calculate_LED_ON>
 80053fa:	0003      	movs	r3, r0
 80053fc:	001a      	movs	r2, r3
 80053fe:	4b2e      	ldr	r3, [pc, #184]	@ (80054b8 <ESP_WakeTest+0x238>)
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005402:	4b2d      	ldr	r3, [pc, #180]	@ (80054b8 <ESP_WakeTest+0x238>)
 8005404:	22fa      	movs	r2, #250	@ 0xfa
 8005406:	0112      	lsls	r2, r2, #4
 8005408:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800540a:	4b21      	ldr	r3, [pc, #132]	@ (8005490 <ESP_WakeTest+0x210>)
 800540c:	2204      	movs	r2, #4
 800540e:	701a      	strb	r2, [r3, #0]

      break;
 8005410:	e039      	b.n	8005486 <ESP_WakeTest+0x206>

    case ESP_TEST_DEINIT:
      Debug("TestState: ESP_TEST_DEINIT");
 8005412:	4a2a      	ldr	r2, [pc, #168]	@ (80054bc <ESP_WakeTest+0x23c>)
 8005414:	4b2a      	ldr	r3, [pc, #168]	@ (80054c0 <ESP_WakeTest+0x240>)
 8005416:	0019      	movs	r1, r3
 8005418:	2003      	movs	r0, #3
 800541a:	f008 ffe3 	bl	800e3e4 <CreateLine>
      testRound = false;
 800541e:	4b29      	ldr	r3, [pc, #164]	@ (80054c4 <ESP_WakeTest+0x244>)
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005424:	4b1c      	ldr	r3, [pc, #112]	@ (8005498 <ESP_WakeTest+0x218>)
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800542a:	4b1d      	ldr	r3, [pc, #116]	@ (80054a0 <ESP_WakeTest+0x220>)
 800542c:	2200      	movs	r2, #0
 800542e:	2101      	movs	r1, #1
 8005430:	0018      	movs	r0, r3
 8005432:	f00a feae 	bl	8010192 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005436:	2380      	movs	r3, #128	@ 0x80
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4818      	ldr	r0, [pc, #96]	@ (800549c <ESP_WakeTest+0x21c>)
 800543c:	2200      	movs	r2, #0
 800543e:	0019      	movs	r1, r3
 8005440:	f00a fea7 	bl	8010192 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005444:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <ESP_WakeTest+0x220>)
 8005446:	2200      	movs	r2, #0
 8005448:	2102      	movs	r1, #2
 800544a:	0018      	movs	r0, r3
 800544c:	f00a fea1 	bl	8010192 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005450:	f002 ffd6 	bl	8008400 <SetESPMeasurementDone>
      break;
 8005454:	e017      	b.n	8005486 <ESP_WakeTest+0x206>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 8005456:	4b0e      	ldr	r3, [pc, #56]	@ (8005490 <ESP_WakeTest+0x210>)
 8005458:	2200      	movs	r2, #0
 800545a:	701a      	strb	r2, [r3, #0]
      break;
 800545c:	e013      	b.n	8005486 <ESP_WakeTest+0x206>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 800545e:	4b16      	ldr	r3, [pc, #88]	@ (80054b8 <ESP_WakeTest+0x238>)
 8005460:	22fa      	movs	r2, #250	@ 0xfa
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <ESP_WakeTest+0x238>)
 8005468:	22fa      	movs	r2, #250	@ 0xfa
 800546a:	0112      	lsls	r2, r2, #4
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 800546e:	f007 fe49 	bl	800d104 <Calculate_LED_ON>
 8005472:	0003      	movs	r3, r0
 8005474:	001a      	movs	r2, r3
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <ESP_WakeTest+0x238>)
 8005478:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 800547a:	e004      	b.n	8005486 <ESP_WakeTest+0x206>
      break;
 800547c:	46c0      	nop			@ (mov r8, r8)
 800547e:	e002      	b.n	8005486 <ESP_WakeTest+0x206>
      break;
 8005480:	46c0      	nop			@ (mov r8, r8)
 8005482:	e000      	b.n	8005486 <ESP_WakeTest+0x206>
      break;
 8005484:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b003      	add	sp, #12
 800548c:	bd90      	pop	{r4, r7, pc}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	20000a28 	.word	0x20000a28
 8005494:	080252c0 	.word	0x080252c0
 8005498:	20000548 	.word	0x20000548
 800549c:	50000800 	.word	0x50000800
 80054a0:	50001c00 	.word	0x50001c00
 80054a4:	20000a1c 	.word	0x20000a1c
 80054a8:	20000448 	.word	0x20000448
 80054ac:	20000a26 	.word	0x20000a26
 80054b0:	20000a25 	.word	0x20000a25
 80054b4:	2000002d 	.word	0x2000002d
 80054b8:	40000400 	.word	0x40000400
 80054bc:	0802399c 	.word	0x0802399c
 80054c0:	08023088 	.word	0x08023088
 80054c4:	20000000 	.word	0x20000000

080054c8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80054ce:	1dfb      	adds	r3, r7, #7
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80054d4:	4be2      	ldr	r3, [pc, #904]	@ (8005860 <ESP_Upkeep+0x398>)
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	4be2      	ldr	r3, [pc, #904]	@ (8005864 <ESP_Upkeep+0x39c>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d024      	beq.n	800552a <ESP_Upkeep+0x62>
 80054e0:	f008 fffa 	bl	800e4d8 <GetVerboseLevel>
 80054e4:	0003      	movs	r3, r0
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d11f      	bne.n	800552a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054ea:	4bdd      	ldr	r3, [pc, #884]	@ (8005860 <ESP_Upkeep+0x398>)
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	4bdd      	ldr	r3, [pc, #884]	@ (8005864 <ESP_Upkeep+0x39c>)
 80054f0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054f2:	4bdc      	ldr	r3, [pc, #880]	@ (8005864 <ESP_Upkeep+0x39c>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d103      	bne.n	8005502 <ESP_Upkeep+0x3a>
 80054fa:	4bdb      	ldr	r3, [pc, #876]	@ (8005868 <ESP_Upkeep+0x3a0>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b0e      	cmp	r3, #14
 8005500:	d013      	beq.n	800552a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005502:	4bd8      	ldr	r3, [pc, #864]	@ (8005864 <ESP_Upkeep+0x39c>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	001d      	movs	r5, r3
 8005508:	4bd7      	ldr	r3, [pc, #860]	@ (8005868 <ESP_Upkeep+0x3a0>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	0018      	movs	r0, r3
 800550e:	4bd7      	ldr	r3, [pc, #860]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	001c      	movs	r4, r3
 8005514:	4bd6      	ldr	r3, [pc, #856]	@ (8005870 <ESP_Upkeep+0x3a8>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	4ad6      	ldr	r2, [pc, #856]	@ (8005874 <ESP_Upkeep+0x3ac>)
 800551a:	49d7      	ldr	r1, [pc, #860]	@ (8005878 <ESP_Upkeep+0x3b0>)
 800551c:	9302      	str	r3, [sp, #8]
 800551e:	9401      	str	r4, [sp, #4]
 8005520:	9000      	str	r0, [sp, #0]
 8005522:	002b      	movs	r3, r5
 8005524:	2003      	movs	r0, #3
 8005526:	f008 ff5d 	bl	800e3e4 <CreateLine>
    }
  }
  switch (EspState) {
 800552a:	4bcd      	ldr	r3, [pc, #820]	@ (8005860 <ESP_Upkeep+0x398>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	d901      	bls.n	8005536 <ESP_Upkeep+0x6e>
 8005532:	f000 fc17 	bl	8005d64 <ESP_Upkeep+0x89c>
 8005536:	009a      	lsls	r2, r3, #2
 8005538:	4bd0      	ldr	r3, [pc, #832]	@ (800587c <ESP_Upkeep+0x3b4>)
 800553a:	18d3      	adds	r3, r2, r3
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005540:	4bc7      	ldr	r3, [pc, #796]	@ (8005860 <ESP_Upkeep+0x398>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
      break;
 8005546:	f000 fc26 	bl	8005d96 <ESP_Upkeep+0x8ce>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      DisableConnectedDevices();
 800554a:	f003 f9b9 	bl	80088c0 <DisableConnectedDevices>
      SetESPIndicator();
 800554e:	f007 ff6f 	bl	800d430 <SetESPIndicator>
      if(!EspTurnedOn){
 8005552:	4bcb      	ldr	r3, [pc, #812]	@ (8005880 <ESP_Upkeep+0x3b8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2201      	movs	r2, #1
 8005558:	4053      	eors	r3, r2
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d036      	beq.n	80055ce <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	48c7      	ldr	r0, [pc, #796]	@ (8005884 <ESP_Upkeep+0x3bc>)
 8005566:	2200      	movs	r2, #0
 8005568:	0019      	movs	r1, r3
 800556a:	f00a fe12 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800556e:	2001      	movs	r0, #1
 8005570:	f009 fb88 	bl	800ec84 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005574:	2380      	movs	r3, #128	@ 0x80
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	48c2      	ldr	r0, [pc, #776]	@ (8005884 <ESP_Upkeep+0x3bc>)
 800557a:	2201      	movs	r2, #1
 800557c:	0019      	movs	r1, r3
 800557e:	f00a fe08 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005582:	2001      	movs	r0, #1
 8005584:	f009 fb7e 	bl	800ec84 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005588:	4bbf      	ldr	r3, [pc, #764]	@ (8005888 <ESP_Upkeep+0x3c0>)
 800558a:	2200      	movs	r2, #0
 800558c:	2101      	movs	r1, #1
 800558e:	0018      	movs	r0, r3
 8005590:	f00a fdff 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005594:	2001      	movs	r0, #1
 8005596:	f009 fb75 	bl	800ec84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800559a:	4bbb      	ldr	r3, [pc, #748]	@ (8005888 <ESP_Upkeep+0x3c0>)
 800559c:	2201      	movs	r2, #1
 800559e:	2102      	movs	r1, #2
 80055a0:	0018      	movs	r0, r3
 80055a2:	f00a fdf6 	bl	8010192 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80055a6:	2001      	movs	r0, #1
 80055a8:	f009 fb6c 	bl	800ec84 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80055ac:	4bb6      	ldr	r3, [pc, #728]	@ (8005888 <ESP_Upkeep+0x3c0>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	2101      	movs	r1, #1
 80055b2:	0018      	movs	r0, r3
 80055b4:	f00a fded 	bl	8010192 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80055b8:	f009 fb5a 	bl	800ec70 <HAL_GetTick>
 80055bc:	0003      	movs	r3, r0
 80055be:	22af      	movs	r2, #175	@ 0xaf
 80055c0:	0092      	lsls	r2, r2, #2
 80055c2:	189a      	adds	r2, r3, r2
 80055c4:	4bb1      	ldr	r3, [pc, #708]	@ (800588c <ESP_Upkeep+0x3c4>)
 80055c6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055c8:	4bad      	ldr	r3, [pc, #692]	@ (8005880 <ESP_Upkeep+0x3b8>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80055ce:	2380      	movs	r3, #128	@ 0x80
 80055d0:	005a      	lsls	r2, r3, #1
 80055d2:	4baf      	ldr	r3, [pc, #700]	@ (8005890 <ESP_Upkeep+0x3c8>)
 80055d4:	0011      	movs	r1, r2
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7fe fad0 	bl	8003b7c <ESP_Receive>
 80055dc:	1e03      	subs	r3, r0, #0
 80055de:	d101      	bne.n	80055e4 <ESP_Upkeep+0x11c>
 80055e0:	f000 fbcc 	bl	8005d7c <ESP_Upkeep+0x8b4>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055e4:	4b9e      	ldr	r3, [pc, #632]	@ (8005860 <ESP_Upkeep+0x398>)
 80055e6:	220f      	movs	r2, #15
 80055e8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055ea:	f009 fb41 	bl	800ec70 <HAL_GetTick>
 80055ee:	0003      	movs	r3, r0
 80055f0:	22fa      	movs	r2, #250	@ 0xfa
 80055f2:	00d2      	lsls	r2, r2, #3
 80055f4:	189a      	adds	r2, r3, r2
 80055f6:	4ba7      	ldr	r3, [pc, #668]	@ (8005894 <ESP_Upkeep+0x3cc>)
 80055f8:	601a      	str	r2, [r3, #0]
      }
      break;
 80055fa:	f000 fbbf 	bl	8005d7c <ESP_Upkeep+0x8b4>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055fe:	2001      	movs	r0, #1
 8005600:	f7ff fb34 	bl	8004c6c <DMA_ProcessBuffer>
 8005604:	0003      	movs	r3, r0
 8005606:	001a      	movs	r2, r3
 8005608:	4ba3      	ldr	r3, [pc, #652]	@ (8005898 <ESP_Upkeep+0x3d0>)
 800560a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800560c:	4ba2      	ldr	r3, [pc, #648]	@ (8005898 <ESP_Upkeep+0x3d0>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	1dbc      	adds	r4, r7, #6
 8005612:	2101      	movs	r1, #1
 8005614:	0018      	movs	r0, r3
 8005616:	f7ff fc29 	bl	8004e6c <ATCompare>
 800561a:	0003      	movs	r3, r0
 800561c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800561e:	1dbb      	adds	r3, r7, #6
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d108      	bne.n	8005638 <ESP_Upkeep+0x170>
 8005626:	4b9b      	ldr	r3, [pc, #620]	@ (8005894 <ESP_Upkeep+0x3cc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	0018      	movs	r0, r3
 800562c:	f008 fe84 	bl	800e338 <TimestampIsReached>
 8005630:	1e03      	subs	r3, r0, #0
 8005632:	d101      	bne.n	8005638 <ESP_Upkeep+0x170>
 8005634:	f000 fba4 	bl	8005d80 <ESP_Upkeep+0x8b8>
          EspState = ESP_STATE_MODE_SELECT;
 8005638:	4b89      	ldr	r3, [pc, #548]	@ (8005860 <ESP_Upkeep+0x398>)
 800563a:	220b      	movs	r2, #11
 800563c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800563e:	f000 fb9f 	bl	8005d80 <ESP_Upkeep+0x8b8>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005642:	4b96      	ldr	r3, [pc, #600]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005644:	2209      	movs	r2, #9
 8005646:	2114      	movs	r1, #20
 8005648:	0018      	movs	r0, r3
 800564a:	f01a fd69 	bl	8020120 <memset>
      if(!InitIsDone || WifiReset){
 800564e:	4b94      	ldr	r3, [pc, #592]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2201      	movs	r2, #1
 8005654:	4053      	eors	r3, r2
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <ESP_Upkeep+0x19c>
 800565c:	4b91      	ldr	r3, [pc, #580]	@ (80058a4 <ESP_Upkeep+0x3dc>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01a      	beq.n	800569a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005664:	4b8d      	ldr	r3, [pc, #564]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005666:	4a90      	ldr	r2, [pc, #576]	@ (80058a8 <ESP_Upkeep+0x3e0>)
 8005668:	6811      	ldr	r1, [r2, #0]
 800566a:	6019      	str	r1, [r3, #0]
 800566c:	8891      	ldrh	r1, [r2, #4]
 800566e:	8099      	strh	r1, [r3, #4]
 8005670:	7992      	ldrb	r2, [r2, #6]
 8005672:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005674:	4b7a      	ldr	r3, [pc, #488]	@ (8005860 <ESP_Upkeep+0x398>)
 8005676:	2204      	movs	r2, #4
 8005678:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800567a:	4b8c      	ldr	r3, [pc, #560]	@ (80058ac <ESP_Upkeep+0x3e4>)
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005680:	4b7a      	ldr	r3, [pc, #488]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005686:	4b89      	ldr	r3, [pc, #548]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	001a      	movs	r2, r3
 800568c:	4b83      	ldr	r3, [pc, #524]	@ (800589c <ESP_Upkeep+0x3d4>)
 800568e:	5c9a      	ldrb	r2, [r3, r2]
 8005690:	4b75      	ldr	r3, [pc, #468]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005692:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005694:	4b76      	ldr	r3, [pc, #472]	@ (8005870 <ESP_Upkeep+0x3a8>)
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800569a:	4b81      	ldr	r3, [pc, #516]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01f      	beq.n	80056e2 <ESP_Upkeep+0x21a>
 80056a2:	4b83      	ldr	r3, [pc, #524]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2201      	movs	r2, #1
 80056a8:	4053      	eors	r3, r2
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d018      	beq.n	80056e2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80056b0:	4b7a      	ldr	r3, [pc, #488]	@ (800589c <ESP_Upkeep+0x3d4>)
 80056b2:	4a80      	ldr	r2, [pc, #512]	@ (80058b4 <ESP_Upkeep+0x3ec>)
 80056b4:	6811      	ldr	r1, [r2, #0]
 80056b6:	6019      	str	r1, [r3, #0]
 80056b8:	8892      	ldrh	r2, [r2, #4]
 80056ba:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80056bc:	4b68      	ldr	r3, [pc, #416]	@ (8005860 <ESP_Upkeep+0x398>)
 80056be:	2204      	movs	r2, #4
 80056c0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056c2:	4b7a      	ldr	r3, [pc, #488]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80056c8:	4b68      	ldr	r3, [pc, #416]	@ (800586c <ESP_Upkeep+0x3a4>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056ce:	4b77      	ldr	r3, [pc, #476]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	001a      	movs	r2, r3
 80056d4:	4b71      	ldr	r3, [pc, #452]	@ (800589c <ESP_Upkeep+0x3d4>)
 80056d6:	5c9a      	ldrb	r2, [r3, r2]
 80056d8:	4b63      	ldr	r3, [pc, #396]	@ (8005868 <ESP_Upkeep+0x3a0>)
 80056da:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056dc:	4b64      	ldr	r3, [pc, #400]	@ (8005870 <ESP_Upkeep+0x3a8>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80056e2:	4b6f      	ldr	r3, [pc, #444]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d021      	beq.n	800572e <ESP_Upkeep+0x266>
 80056ea:	4b71      	ldr	r3, [pc, #452]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01d      	beq.n	800572e <ESP_Upkeep+0x266>
 80056f2:	4b71      	ldr	r3, [pc, #452]	@ (80058b8 <ESP_Upkeep+0x3f0>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	4053      	eors	r3, r2
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d016      	beq.n	800572e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005700:	4b6e      	ldr	r3, [pc, #440]	@ (80058bc <ESP_Upkeep+0x3f4>)
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	4b65      	ldr	r3, [pc, #404]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005706:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005708:	4b55      	ldr	r3, [pc, #340]	@ (8005860 <ESP_Upkeep+0x398>)
 800570a:	2204      	movs	r2, #4
 800570c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800570e:	4b67      	ldr	r3, [pc, #412]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005714:	4b55      	ldr	r3, [pc, #340]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005716:	2204      	movs	r2, #4
 8005718:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800571a:	4b64      	ldr	r3, [pc, #400]	@ (80058ac <ESP_Upkeep+0x3e4>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	001a      	movs	r2, r3
 8005720:	4b5e      	ldr	r3, [pc, #376]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005722:	5c9a      	ldrb	r2, [r3, r2]
 8005724:	4b50      	ldr	r3, [pc, #320]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005726:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005728:	4b51      	ldr	r3, [pc, #324]	@ (8005870 <ESP_Upkeep+0x3a8>)
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800572e:	4b5c      	ldr	r3, [pc, #368]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d02c      	beq.n	8005790 <ESP_Upkeep+0x2c8>
 8005736:	4b5e      	ldr	r3, [pc, #376]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d028      	beq.n	8005790 <ESP_Upkeep+0x2c8>
 800573e:	4b5e      	ldr	r3, [pc, #376]	@ (80058b8 <ESP_Upkeep+0x3f0>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d024      	beq.n	8005790 <ESP_Upkeep+0x2c8>
 8005746:	4b5e      	ldr	r3, [pc, #376]	@ (80058c0 <ESP_Upkeep+0x3f8>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2201      	movs	r2, #1
 800574c:	4053      	eors	r3, r2
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01d      	beq.n	8005790 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005754:	4b51      	ldr	r3, [pc, #324]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005756:	4a5b      	ldr	r2, [pc, #364]	@ (80058c4 <ESP_Upkeep+0x3fc>)
 8005758:	8811      	ldrh	r1, [r2, #0]
 800575a:	8019      	strh	r1, [r3, #0]
 800575c:	7892      	ldrb	r2, [r2, #2]
 800575e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005760:	4b3f      	ldr	r3, [pc, #252]	@ (8005860 <ESP_Upkeep+0x398>)
 8005762:	2204      	movs	r2, #4
 8005764:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005766:	4b51      	ldr	r3, [pc, #324]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800576c:	4b3f      	ldr	r3, [pc, #252]	@ (800586c <ESP_Upkeep+0x3a4>)
 800576e:	2202      	movs	r2, #2
 8005770:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005772:	f009 fa7d 	bl	800ec70 <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	4b53      	ldr	r3, [pc, #332]	@ (80058c8 <ESP_Upkeep+0x400>)
 800577a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800577c:	4b4b      	ldr	r3, [pc, #300]	@ (80058ac <ESP_Upkeep+0x3e4>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	001a      	movs	r2, r3
 8005782:	4b46      	ldr	r3, [pc, #280]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005784:	5c9a      	ldrb	r2, [r3, r2]
 8005786:	4b38      	ldr	r3, [pc, #224]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005788:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800578a:	4b39      	ldr	r3, [pc, #228]	@ (8005870 <ESP_Upkeep+0x3a8>)
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005790:	4b4e      	ldr	r3, [pc, #312]	@ (80058cc <ESP_Upkeep+0x404>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <ESP_Upkeep+0x312>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005798:	4b40      	ldr	r3, [pc, #256]	@ (800589c <ESP_Upkeep+0x3d4>)
 800579a:	4a4d      	ldr	r2, [pc, #308]	@ (80058d0 <ESP_Upkeep+0x408>)
 800579c:	6811      	ldr	r1, [r2, #0]
 800579e:	6019      	str	r1, [r3, #0]
 80057a0:	7912      	ldrb	r2, [r2, #4]
 80057a2:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80057a4:	4a4b      	ldr	r2, [pc, #300]	@ (80058d4 <ESP_Upkeep+0x40c>)
 80057a6:	4b34      	ldr	r3, [pc, #208]	@ (8005878 <ESP_Upkeep+0x3b0>)
 80057a8:	0019      	movs	r1, r3
 80057aa:	2003      	movs	r0, #3
 80057ac:	f008 fe1a 	bl	800e3e4 <CreateLine>
        DisableConnectedDevices();
 80057b0:	f003 f886 	bl	80088c0 <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 80057b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005860 <ESP_Upkeep+0x398>)
 80057b6:	2204      	movs	r2, #4
 80057b8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057ba:	4b3c      	ldr	r3, [pc, #240]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80057c0:	4b2a      	ldr	r3, [pc, #168]	@ (800586c <ESP_Upkeep+0x3a4>)
 80057c2:	2203      	movs	r2, #3
 80057c4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057c6:	4b39      	ldr	r3, [pc, #228]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	001a      	movs	r2, r3
 80057cc:	4b33      	ldr	r3, [pc, #204]	@ (800589c <ESP_Upkeep+0x3d4>)
 80057ce:	5c9a      	ldrb	r2, [r3, r2]
 80057d0:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <ESP_Upkeep+0x3a0>)
 80057d2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057d4:	4b26      	ldr	r3, [pc, #152]	@ (8005870 <ESP_Upkeep+0x3a8>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80057da:	4b31      	ldr	r3, [pc, #196]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d100      	bne.n	80057e4 <ESP_Upkeep+0x31c>
 80057e2:	e2cf      	b.n	8005d84 <ESP_Upkeep+0x8bc>
 80057e4:	4b32      	ldr	r3, [pc, #200]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d100      	bne.n	80057ee <ESP_Upkeep+0x326>
 80057ec:	e2ca      	b.n	8005d84 <ESP_Upkeep+0x8bc>
 80057ee:	4b32      	ldr	r3, [pc, #200]	@ (80058b8 <ESP_Upkeep+0x3f0>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d100      	bne.n	80057f8 <ESP_Upkeep+0x330>
 80057f6:	e2c5      	b.n	8005d84 <ESP_Upkeep+0x8bc>
 80057f8:	4b31      	ldr	r3, [pc, #196]	@ (80058c0 <ESP_Upkeep+0x3f8>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d100      	bne.n	8005802 <ESP_Upkeep+0x33a>
 8005800:	e2c0      	b.n	8005d84 <ESP_Upkeep+0x8bc>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005802:	4b35      	ldr	r3, [pc, #212]	@ (80058d8 <ESP_Upkeep+0x410>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b25      	ldr	r3, [pc, #148]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005808:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800580a:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <ESP_Upkeep+0x398>)
 800580c:	2204      	movs	r2, #4
 800580e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005810:	4b26      	ldr	r3, [pc, #152]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005816:	4b15      	ldr	r3, [pc, #84]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005818:	2205      	movs	r2, #5
 800581a:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800581c:	f009 fa28 	bl	800ec70 <HAL_GetTick>
 8005820:	0002      	movs	r2, r0
 8005822:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <ESP_Upkeep+0x400>)
 8005824:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005826:	4b21      	ldr	r3, [pc, #132]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	001a      	movs	r2, r3
 800582c:	4b1b      	ldr	r3, [pc, #108]	@ (800589c <ESP_Upkeep+0x3d4>)
 800582e:	5c9a      	ldrb	r2, [r3, r2]
 8005830:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005832:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005834:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <ESP_Upkeep+0x3a8>)
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
      }
    break;
 800583a:	e2a3      	b.n	8005d84 <ESP_Upkeep+0x8bc>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <ESP_Upkeep+0x3a0>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	1dfc      	adds	r4, r7, #7
 8005842:	0018      	movs	r0, r3
 8005844:	f7ff fb54 	bl	8004ef0 <AT_Send>
 8005848:	0003      	movs	r3, r0
 800584a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800584c:	1dfb      	adds	r3, r7, #7
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d100      	bne.n	8005856 <ESP_Upkeep+0x38e>
 8005854:	e298      	b.n	8005d88 <ESP_Upkeep+0x8c0>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005856:	4b02      	ldr	r3, [pc, #8]	@ (8005860 <ESP_Upkeep+0x398>)
 8005858:	2203      	movs	r2, #3
 800585a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800585c:	e294      	b.n	8005d88 <ESP_Upkeep+0x8c0>
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	2000002c 	.word	0x2000002c
 8005864:	20000002 	.word	0x20000002
 8005868:	20000a26 	.word	0x20000a26
 800586c:	20000a27 	.word	0x20000a27
 8005870:	20000a25 	.word	0x20000a25
 8005874:	080239b8 	.word	0x080239b8
 8005878:	08023088 	.word	0x08023088
 800587c:	080252d8 	.word	0x080252d8
 8005880:	20000548 	.word	0x20000548
 8005884:	50000800 	.word	0x50000800
 8005888:	50001c00 	.word	0x50001c00
 800588c:	20000a1c 	.word	0x20000a1c
 8005890:	20000448 	.word	0x20000448
 8005894:	20000b38 	.word	0x20000b38
 8005898:	2000002e 	.word	0x2000002e
 800589c:	20000a0c 	.word	0x20000a0c
 80058a0:	20000549 	.word	0x20000549
 80058a4:	2000054a 	.word	0x2000054a
 80058a8:	20000004 	.word	0x20000004
 80058ac:	20000a16 	.word	0x20000a16
 80058b0:	2000054c 	.word	0x2000054c
 80058b4:	20000014 	.word	0x20000014
 80058b8:	2000054d 	.word	0x2000054d
 80058bc:	20000010 	.word	0x20000010
 80058c0:	20000001 	.word	0x20000001
 80058c4:	2000000c 	.word	0x2000000c
 80058c8:	20000560 	.word	0x20000560
 80058cc:	2000054b 	.word	0x2000054b
 80058d0:	2000001c 	.word	0x2000001c
 80058d4:	080239e4 	.word	0x080239e4
 80058d8:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80058dc:	4bc0      	ldr	r3, [pc, #768]	@ (8005be0 <ESP_Upkeep+0x718>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f008 fd29 	bl	800e338 <TimestampIsReached>
 80058e6:	1e03      	subs	r3, r0, #0
 80058e8:	d100      	bne.n	80058ec <ESP_Upkeep+0x424>
 80058ea:	e24f      	b.n	8005d8c <ESP_Upkeep+0x8c4>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058ec:	4bbd      	ldr	r3, [pc, #756]	@ (8005be4 <ESP_Upkeep+0x71c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7ff f9bb 	bl	8004c6c <DMA_ProcessBuffer>
 80058f6:	0003      	movs	r3, r0
 80058f8:	001a      	movs	r2, r3
 80058fa:	4bbb      	ldr	r3, [pc, #748]	@ (8005be8 <ESP_Upkeep+0x720>)
 80058fc:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058fe:	4bba      	ldr	r3, [pc, #744]	@ (8005be8 <ESP_Upkeep+0x720>)
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	4bb8      	ldr	r3, [pc, #736]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	1d7c      	adds	r4, r7, #5
 8005908:	0019      	movs	r1, r3
 800590a:	0010      	movs	r0, r2
 800590c:	f7ff faae 	bl	8004e6c <ATCompare>
 8005910:	0003      	movs	r3, r0
 8005912:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005914:	4bb4      	ldr	r3, [pc, #720]	@ (8005be8 <ESP_Upkeep+0x720>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d137      	bne.n	800598c <ESP_Upkeep+0x4c4>
          if(ATCommand == AT_SENDDATA){
 800591c:	4bb3      	ldr	r3, [pc, #716]	@ (8005bec <ESP_Upkeep+0x724>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d108      	bne.n	8005936 <ESP_Upkeep+0x46e>
            ATCommand = AT_HTTPCPOST;
 8005924:	4bb1      	ldr	r3, [pc, #708]	@ (8005bec <ESP_Upkeep+0x724>)
 8005926:	220e      	movs	r2, #14
 8005928:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800592a:	4bae      	ldr	r3, [pc, #696]	@ (8005be4 <ESP_Upkeep+0x71c>)
 800592c:	2202      	movs	r2, #2
 800592e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005930:	4baf      	ldr	r3, [pc, #700]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005936:	4baf      	ldr	r3, [pc, #700]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005938:	2204      	movs	r2, #4
 800593a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800593c:	4bae      	ldr	r3, [pc, #696]	@ (8005bf8 <ESP_Upkeep+0x730>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	4bac      	ldr	r3, [pc, #688]	@ (8005bf8 <ESP_Upkeep+0x730>)
 8005946:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005948:	4bab      	ldr	r3, [pc, #684]	@ (8005bf8 <ESP_Upkeep+0x730>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d91d      	bls.n	800598c <ESP_Upkeep+0x4c4>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005950:	f009 f98e 	bl	800ec70 <HAL_GetTick>
 8005954:	0003      	movs	r3, r0
 8005956:	4aa9      	ldr	r2, [pc, #676]	@ (8005bfc <ESP_Upkeep+0x734>)
 8005958:	189a      	adds	r2, r3, r2
 800595a:	4ba1      	ldr	r3, [pc, #644]	@ (8005be0 <ESP_Upkeep+0x718>)
 800595c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800595e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c00 <ESP_Upkeep+0x738>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005964:	f7ff fa74 	bl	8004e50 <clearDMABuffer>
            stop = HAL_GetTick();
 8005968:	f009 f982 	bl	800ec70 <HAL_GetTick>
 800596c:	0002      	movs	r2, r0
 800596e:	4ba5      	ldr	r3, [pc, #660]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005970:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005972:	4ba4      	ldr	r3, [pc, #656]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4ba4      	ldr	r3, [pc, #656]	@ (8005c08 <ESP_Upkeep+0x740>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	4aa3      	ldr	r2, [pc, #652]	@ (8005c0c <ESP_Upkeep+0x744>)
 800597e:	49a4      	ldr	r1, [pc, #656]	@ (8005c10 <ESP_Upkeep+0x748>)
 8005980:	2001      	movs	r0, #1
 8005982:	f008 fd2f 	bl	800e3e4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005986:	4b9b      	ldr	r3, [pc, #620]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005988:	220d      	movs	r2, #13
 800598a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800598c:	4b96      	ldr	r3, [pc, #600]	@ (8005be8 <ESP_Upkeep+0x720>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d106      	bne.n	80059a2 <ESP_Upkeep+0x4da>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005994:	f009 f96c 	bl	800ec70 <HAL_GetTick>
 8005998:	0003      	movs	r3, r0
 800599a:	330a      	adds	r3, #10
 800599c:	001a      	movs	r2, r3
 800599e:	4b90      	ldr	r3, [pc, #576]	@ (8005be0 <ESP_Upkeep+0x718>)
 80059a0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80059a2:	4b91      	ldr	r3, [pc, #580]	@ (8005be8 <ESP_Upkeep+0x720>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b0a      	cmp	r3, #10
 80059a8:	d106      	bne.n	80059b8 <ESP_Upkeep+0x4f0>
          ESPTimeStamp = HAL_GetTick() + 10;
 80059aa:	f009 f961 	bl	800ec70 <HAL_GetTick>
 80059ae:	0003      	movs	r3, r0
 80059b0:	330a      	adds	r3, #10
 80059b2:	001a      	movs	r2, r3
 80059b4:	4b8a      	ldr	r3, [pc, #552]	@ (8005be0 <ESP_Upkeep+0x718>)
 80059b6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80059b8:	4b8b      	ldr	r3, [pc, #556]	@ (8005be8 <ESP_Upkeep+0x720>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b06      	cmp	r3, #6
 80059be:	d144      	bne.n	8005a4a <ESP_Upkeep+0x582>
          timeoutcntr++;
 80059c0:	4b94      	ldr	r3, [pc, #592]	@ (8005c14 <ESP_Upkeep+0x74c>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	4b92      	ldr	r3, [pc, #584]	@ (8005c14 <ESP_Upkeep+0x74c>)
 80059ca:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059cc:	4a92      	ldr	r2, [pc, #584]	@ (8005c18 <ESP_Upkeep+0x750>)
 80059ce:	4b90      	ldr	r3, [pc, #576]	@ (8005c10 <ESP_Upkeep+0x748>)
 80059d0:	0019      	movs	r1, r3
 80059d2:	2001      	movs	r0, #1
 80059d4:	f008 fd06 	bl	800e3e4 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059d8:	4b8e      	ldr	r3, [pc, #568]	@ (8005c14 <ESP_Upkeep+0x74c>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d91d      	bls.n	8005a1c <ESP_Upkeep+0x554>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80059e0:	f009 f946 	bl	800ec70 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	4a85      	ldr	r2, [pc, #532]	@ (8005bfc <ESP_Upkeep+0x734>)
 80059e8:	189a      	adds	r2, r3, r2
 80059ea:	4b7d      	ldr	r3, [pc, #500]	@ (8005be0 <ESP_Upkeep+0x718>)
 80059ec:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059ee:	4b84      	ldr	r3, [pc, #528]	@ (8005c00 <ESP_Upkeep+0x738>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80059f4:	f7ff fa2c 	bl	8004e50 <clearDMABuffer>
            stop = HAL_GetTick();
 80059f8:	f009 f93a 	bl	800ec70 <HAL_GetTick>
 80059fc:	0002      	movs	r2, r0
 80059fe:	4b81      	ldr	r3, [pc, #516]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005a00:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005a02:	4b80      	ldr	r3, [pc, #512]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b80      	ldr	r3, [pc, #512]	@ (8005c08 <ESP_Upkeep+0x740>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	4a83      	ldr	r2, [pc, #524]	@ (8005c1c <ESP_Upkeep+0x754>)
 8005a0e:	4980      	ldr	r1, [pc, #512]	@ (8005c10 <ESP_Upkeep+0x748>)
 8005a10:	2001      	movs	r0, #1
 8005a12:	f008 fce7 	bl	800e3e4 <CreateLine>
            // TODO hier gaat iets fout, de verzending herstart niet meer
            // in log alleen nog D [01039053] EspState: 4 ATcmd: 20 Mode: 2 ATExp: 0
            EspState = ESP_STATE_DEINIT;
 8005a16:	4b77      	ldr	r3, [pc, #476]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a18:	220d      	movs	r2, #13
 8005a1a:	701a      	strb	r2, [r3, #0]
            // mogelijke oplossing door deze twee regels te verwijderen
            // ATCommand = AT_END;
            // ATExpectation = RECEIVE_EXPECTATION_OK;
          }
          if(ATCommand != AT_SENDDATA){
 8005a1c:	4b73      	ldr	r3, [pc, #460]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b0f      	cmp	r3, #15
 8005a22:	d003      	beq.n	8005a2c <ESP_Upkeep+0x564>
            EspState = ESP_STATE_SEND;
 8005a24:	4b73      	ldr	r3, [pc, #460]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a26:	2204      	movs	r2, #4
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e00e      	b.n	8005a4a <ESP_Upkeep+0x582>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a2e:	220e      	movs	r2, #14
 8005a30:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a32:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	4b6d      	ldr	r3, [pc, #436]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a3c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a3e:	4b69      	ldr	r3, [pc, #420]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005a40:	2202      	movs	r2, #2
 8005a42:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a44:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a46:	2204      	movs	r2, #4
 8005a48:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a4a:	1d7b      	adds	r3, r7, #5
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d100      	bne.n	8005a54 <ESP_Upkeep+0x58c>
 8005a52:	e19b      	b.n	8005d8c <ESP_Upkeep+0x8c4>
          EspState = ESP_STATE_NEXT_AT;
 8005a54:	4b67      	ldr	r3, [pc, #412]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a56:	2205      	movs	r2, #5
 8005a58:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a5a:	e197      	b.n	8005d8c <ESP_Upkeep+0x8c4>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005a5c:	4b64      	ldr	r3, [pc, #400]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	4b62      	ldr	r3, [pc, #392]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a66:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a68:	4b61      	ldr	r3, [pc, #388]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	001a      	movs	r2, r3
 8005a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8005c20 <ESP_Upkeep+0x758>)
 8005a70:	5c9a      	ldrb	r2, [r3, r2]
 8005a72:	4b5e      	ldr	r3, [pc, #376]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a74:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a76:	4b5d      	ldr	r3, [pc, #372]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d102      	bne.n	8005a84 <ESP_Upkeep+0x5bc>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a7e:	4b59      	ldr	r3, [pc, #356]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a84:	4b59      	ldr	r3, [pc, #356]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b0e      	cmp	r3, #14
 8005a8a:	d102      	bne.n	8005a92 <ESP_Upkeep+0x5ca>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a8c:	4b55      	ldr	r3, [pc, #340]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005a8e:	2202      	movs	r2, #2
 8005a90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a92:	4b56      	ldr	r3, [pc, #344]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b0e      	cmp	r3, #14
 8005a98:	d006      	beq.n	8005aa8 <ESP_Upkeep+0x5e0>
 8005a9a:	4b54      	ldr	r3, [pc, #336]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d002      	beq.n	8005aa8 <ESP_Upkeep+0x5e0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005aa2:	4b50      	ldr	r3, [pc, #320]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005aa8:	4b50      	ldr	r3, [pc, #320]	@ (8005bec <ESP_Upkeep+0x724>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b11      	cmp	r3, #17
 8005aae:	d102      	bne.n	8005ab6 <ESP_Upkeep+0x5ee>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005ab2:	2205      	movs	r2, #5
 8005ab4:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005ab8:	2204      	movs	r2, #4
 8005aba:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005abc:	4b4b      	ldr	r3, [pc, #300]	@ (8005bec <ESP_Upkeep+0x724>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b14      	cmp	r3, #20
 8005ac2:	d000      	beq.n	8005ac6 <ESP_Upkeep+0x5fe>
 8005ac4:	e164      	b.n	8005d90 <ESP_Upkeep+0x8c8>
        if(Mode == AT_MODE_SEND){
 8005ac6:	4b57      	ldr	r3, [pc, #348]	@ (8005c24 <ESP_Upkeep+0x75c>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d122      	bne.n	8005b14 <ESP_Upkeep+0x64c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005ace:	f009 f8cf 	bl	800ec70 <HAL_GetTick>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	4a49      	ldr	r2, [pc, #292]	@ (8005bfc <ESP_Upkeep+0x734>)
 8005ad6:	189a      	adds	r2, r3, r2
 8005ad8:	4b41      	ldr	r3, [pc, #260]	@ (8005be0 <ESP_Upkeep+0x718>)
 8005ada:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005adc:	f7ff f9b8 	bl	8004e50 <clearDMABuffer>
          stop = HAL_GetTick();
 8005ae0:	f009 f8c6 	bl	800ec70 <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	4b47      	ldr	r3, [pc, #284]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005ae8:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005aea:	4b46      	ldr	r3, [pc, #280]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b46      	ldr	r3, [pc, #280]	@ (8005c08 <ESP_Upkeep+0x740>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	4a4c      	ldr	r2, [pc, #304]	@ (8005c28 <ESP_Upkeep+0x760>)
 8005af6:	494d      	ldr	r1, [pc, #308]	@ (8005c2c <ESP_Upkeep+0x764>)
 8005af8:	2002      	movs	r0, #2
 8005afa:	f008 fc73 	bl	800e3e4 <CreateLine>
          ResetdBAmax();
 8005afe:	f002 fefd 	bl	80088fc <ResetdBAmax>
          showTime();
 8005b02:	f000 fce1 	bl	80064c8 <showTime>
          ESPTransmitDone = true;
 8005b06:	4b3e      	ldr	r3, [pc, #248]	@ (8005c00 <ESP_Upkeep+0x738>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005b0c:	4b39      	ldr	r3, [pc, #228]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005b0e:	220d      	movs	r2, #13
 8005b10:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005b12:	e13d      	b.n	8005d90 <ESP_Upkeep+0x8c8>
        else if (Mode == AT_MODE_GETTIME) {
 8005b14:	4b43      	ldr	r3, [pc, #268]	@ (8005c24 <ESP_Upkeep+0x75c>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d12c      	bne.n	8005b76 <ESP_Upkeep+0x6ae>
            setTime = false;
 8005b1c:	4b44      	ldr	r3, [pc, #272]	@ (8005c30 <ESP_Upkeep+0x768>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b22:	f009 f8a5 	bl	800ec70 <HAL_GetTick>
 8005b26:	0003      	movs	r3, r0
 8005b28:	4a42      	ldr	r2, [pc, #264]	@ (8005c34 <ESP_Upkeep+0x76c>)
 8005b2a:	189a      	adds	r2, r3, r2
 8005b2c:	4b42      	ldr	r3, [pc, #264]	@ (8005c38 <ESP_Upkeep+0x770>)
 8005b2e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b30:	4b41      	ldr	r3, [pc, #260]	@ (8005c38 <ESP_Upkeep+0x770>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a41      	ldr	r2, [pc, #260]	@ (8005c3c <ESP_Upkeep+0x774>)
 8005b36:	493d      	ldr	r1, [pc, #244]	@ (8005c2c <ESP_Upkeep+0x764>)
 8005b38:	2002      	movs	r0, #2
 8005b3a:	f008 fc53 	bl	800e3e4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b3e:	4b40      	ldr	r3, [pc, #256]	@ (8005c40 <ESP_Upkeep+0x778>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <ESP_Upkeep+0x718>)
 8005b44:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005b46:	f7ff f983 	bl	8004e50 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b4a:	f009 f891 	bl	800ec70 <HAL_GetTick>
 8005b4e:	0002      	movs	r2, r0
 8005b50:	4b2c      	ldr	r3, [pc, #176]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005b52:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b54:	4b2b      	ldr	r3, [pc, #172]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b2b      	ldr	r3, [pc, #172]	@ (8005c08 <ESP_Upkeep+0x740>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	4a39      	ldr	r2, [pc, #228]	@ (8005c44 <ESP_Upkeep+0x77c>)
 8005b60:	4932      	ldr	r1, [pc, #200]	@ (8005c2c <ESP_Upkeep+0x764>)
 8005b62:	2002      	movs	r0, #2
 8005b64:	f008 fc3e 	bl	800e3e4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b68:	4b22      	ldr	r3, [pc, #136]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005b6a:	220d      	movs	r2, #13
 8005b6c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c24 <ESP_Upkeep+0x75c>)
 8005b70:	2202      	movs	r2, #2
 8005b72:	701a      	strb	r2, [r3, #0]
    break;
 8005b74:	e10c      	b.n	8005d90 <ESP_Upkeep+0x8c8>
          EspState = ESP_STATE_RESET;
 8005b76:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005b78:	2209      	movs	r2, #9
 8005b7a:	701a      	strb	r2, [r3, #0]
    break;
 8005b7c:	e108      	b.n	8005d90 <ESP_Upkeep+0x8c8>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005b7e:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <ESP_Upkeep+0x780>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b84:	4b31      	ldr	r3, [pc, #196]	@ (8005c4c <ESP_Upkeep+0x784>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	2101      	movs	r1, #1
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f00a fb01 	bl	8010192 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b90:	2001      	movs	r0, #1
 8005b92:	f009 f877 	bl	800ec84 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005b96:	2380      	movs	r3, #128	@ 0x80
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	482d      	ldr	r0, [pc, #180]	@ (8005c50 <ESP_Upkeep+0x788>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	f00a faf7 	bl	8010192 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f009 f86d 	bl	800ec84 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005baa:	4b28      	ldr	r3, [pc, #160]	@ (8005c4c <ESP_Upkeep+0x784>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	2102      	movs	r1, #2
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f00a faee 	bl	8010192 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005bb8:	2209      	movs	r2, #9
 8005bba:	701a      	strb	r2, [r3, #0]
      if (usbPluggedIn) {
 8005bbc:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <ESP_Upkeep+0x78c>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <ESP_Upkeep+0x700>
        EnabledConnectedDevices();
 8005bc4:	f002 fe52 	bl	800886c <EnabledConnectedDevices>
      }
      HAL_Delay(1);
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f009 f85b 	bl	800ec84 <HAL_Delay>
      ResetESPIndicator();
 8005bce:	f007 fc47 	bl	800d460 <ResetESPIndicator>
      errorcntr = 0;
 8005bd2:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <ESP_Upkeep+0x730>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <ESP_Upkeep+0x74c>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
      break;
 8005bde:	e0da      	b.n	8005d96 <ESP_Upkeep+0x8ce>
 8005be0:	20000a1c 	.word	0x20000a1c
 8005be4:	20000a25 	.word	0x20000a25
 8005be8:	2000002e 	.word	0x2000002e
 8005bec:	20000a26 	.word	0x20000a26
 8005bf0:	20000a16 	.word	0x20000a16
 8005bf4:	2000002c 	.word	0x2000002c
 8005bf8:	20000a17 	.word	0x20000a17
 8005bfc:	0003a980 	.word	0x0003a980
 8005c00:	20000550 	.word	0x20000550
 8005c04:	20000564 	.word	0x20000564
 8005c08:	20000560 	.word	0x20000560
 8005c0c:	08023a14 	.word	0x08023a14
 8005c10:	080230ac 	.word	0x080230ac
 8005c14:	20000a18 	.word	0x20000a18
 8005c18:	08023a48 	.word	0x08023a48
 8005c1c:	08023a84 	.word	0x08023a84
 8005c20:	20000a0c 	.word	0x20000a0c
 8005c24:	20000a27 	.word	0x20000a27
 8005c28:	08023ab4 	.word	0x08023ab4
 8005c2c:	08023acc 	.word	0x08023acc
 8005c30:	20000001 	.word	0x20000001
 8005c34:	047e7c4f 	.word	0x047e7c4f
 8005c38:	20000a20 	.word	0x20000a20
 8005c3c:	08023ad0 	.word	0x08023ad0
 8005c40:	20000028 	.word	0x20000028
 8005c44:	08023b14 	.word	0x08023b14
 8005c48:	20000548 	.word	0x20000548
 8005c4c:	50001c00 	.word	0x50001c00
 8005c50:	50000800 	.word	0x50000800
 8005c54:	20001ff1 	.word	0x20001ff1

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c58:	4b52      	ldr	r3, [pc, #328]	@ (8005da4 <ESP_Upkeep+0x8dc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f008 fb6b 	bl	800e338 <TimestampIsReached>
 8005c62:	1e03      	subs	r3, r0, #0
 8005c64:	d103      	bne.n	8005c6e <ESP_Upkeep+0x7a6>
 8005c66:	4b50      	ldr	r3, [pc, #320]	@ (8005da8 <ESP_Upkeep+0x8e0>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d038      	beq.n	8005ce0 <ESP_Upkeep+0x818>
        ESPTransmitDone = false;
 8005c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dac <ESP_Upkeep+0x8e4>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c74:	4b4e      	ldr	r3, [pc, #312]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <ESP_Upkeep+0x7c0>
          InitIsDone = true;
 8005c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8005db4 <ESP_Upkeep+0x8ec>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c82:	4b4d      	ldr	r3, [pc, #308]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005c84:	220b      	movs	r2, #11
 8005c86:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c88:	4b49      	ldr	r3, [pc, #292]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d108      	bne.n	8005ca2 <ESP_Upkeep+0x7da>
          ConnectionMade = true;
 8005c90:	4b4a      	ldr	r3, [pc, #296]	@ (8005dbc <ESP_Upkeep+0x8f4>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005c96:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc0 <ESP_Upkeep+0x8f8>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c9c:	4b46      	ldr	r3, [pc, #280]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005c9e:	220b      	movs	r2, #11
 8005ca0:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005ca2:	4b43      	ldr	r3, [pc, #268]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d102      	bne.n	8005cb0 <ESP_Upkeep+0x7e8>
          EspState = ESP_STATE_INIT;
 8005caa:	4b43      	ldr	r3, [pc, #268]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005cac:	2202      	movs	r2, #2
 8005cae:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d108      	bne.n	8005cca <ESP_Upkeep+0x802>
          EspState = ESP_STATE_CONFIG;
 8005cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005cba:	220e      	movs	r2, #14
 8005cbc:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005cbe:	4a41      	ldr	r2, [pc, #260]	@ (8005dc4 <ESP_Upkeep+0x8fc>)
 8005cc0:	4b41      	ldr	r3, [pc, #260]	@ (8005dc8 <ESP_Upkeep+0x900>)
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	2002      	movs	r0, #2
 8005cc6:	f008 fb8d 	bl	800e3e4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005cca:	4b39      	ldr	r3, [pc, #228]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d126      	bne.n	8005d20 <ESP_Upkeep+0x858>
          EspState = ESP_STATE_MODE_SELECT;
 8005cd2:	4b39      	ldr	r3, [pc, #228]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005cd4:	220b      	movs	r2, #11
 8005cd6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8005dcc <ESP_Upkeep+0x904>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005cde:	e01f      	b.n	8005d20 <ESP_Upkeep+0x858>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd0 <ESP_Upkeep+0x908>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f008 fb27 	bl	800e338 <TimestampIsReached>
 8005cea:	1e03      	subs	r3, r0, #0
 8005cec:	d052      	beq.n	8005d94 <ESP_Upkeep+0x8cc>
        if(Mode == AT_MODE_SEND ) {
 8005cee:	4b30      	ldr	r3, [pc, #192]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d14e      	bne.n	8005d94 <ESP_Upkeep+0x8cc>
            Mode = AT_MODE_GETTIME;
 8005cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005cfe:	2202      	movs	r2, #2
 8005d00:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005d02:	4b28      	ldr	r3, [pc, #160]	@ (8005da4 <ESP_Upkeep+0x8dc>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b33      	ldr	r3, [pc, #204]	@ (8005dd4 <ESP_Upkeep+0x90c>)
 8005d08:	601a      	str	r2, [r3, #0]
         Debug("savedESPTimeStamp: %d", savedESPTimeStamp);
 8005d0a:	4b32      	ldr	r3, [pc, #200]	@ (8005dd4 <ESP_Upkeep+0x90c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a32      	ldr	r2, [pc, #200]	@ (8005dd8 <ESP_Upkeep+0x910>)
 8005d10:	4932      	ldr	r1, [pc, #200]	@ (8005ddc <ESP_Upkeep+0x914>)
 8005d12:	2003      	movs	r0, #3
 8005d14:	f008 fb66 	bl	800e3e4 <CreateLine>
         setTime = true;
 8005d18:	4b31      	ldr	r3, [pc, #196]	@ (8005de0 <ESP_Upkeep+0x918>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
 //        Debug("setTime to true");
        }
      }
      break;
 8005d1e:	e039      	b.n	8005d94 <ESP_Upkeep+0x8cc>
 8005d20:	e038      	b.n	8005d94 <ESP_Upkeep+0x8cc>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005d22:	4b30      	ldr	r3, [pc, #192]	@ (8005de4 <ESP_Upkeep+0x91c>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2201      	movs	r2, #1
 8005d28:	4053      	eors	r3, r2
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <ESP_Upkeep+0x87a>
        Info("Do nothing until reset");
 8005d30:	4a24      	ldr	r2, [pc, #144]	@ (8005dc4 <ESP_Upkeep+0x8fc>)
 8005d32:	4b25      	ldr	r3, [pc, #148]	@ (8005dc8 <ESP_Upkeep+0x900>)
 8005d34:	0019      	movs	r1, r3
 8005d36:	2002      	movs	r0, #2
 8005d38:	f008 fb54 	bl	800e3e4 <CreateLine>
        msgdone = true;
 8005d3c:	4b29      	ldr	r3, [pc, #164]	@ (8005de4 <ESP_Upkeep+0x91c>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005d42:	f016 ffd5 	bl	801ccf0 <GetUsbRxPointer>
 8005d46:	0003      	movs	r3, r0
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f000 f8c5 	bl	8005ed8 <Process_PC_Config>
      break;
 8005d4e:	e022      	b.n	8005d96 <ESP_Upkeep+0x8ce>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d50:	4a25      	ldr	r2, [pc, #148]	@ (8005de8 <ESP_Upkeep+0x920>)
 8005d52:	4b26      	ldr	r3, [pc, #152]	@ (8005dec <ESP_Upkeep+0x924>)
 8005d54:	0019      	movs	r1, r3
 8005d56:	2001      	movs	r0, #1
 8005d58:	f008 fb44 	bl	800e3e4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d5c:	4b16      	ldr	r3, [pc, #88]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005d5e:	2202      	movs	r2, #2
 8005d60:	701a      	strb	r2, [r3, #0]
      break;
 8005d62:	e018      	b.n	8005d96 <ESP_Upkeep+0x8ce>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d64:	4a22      	ldr	r2, [pc, #136]	@ (8005df0 <ESP_Upkeep+0x928>)
 8005d66:	4b21      	ldr	r3, [pc, #132]	@ (8005dec <ESP_Upkeep+0x924>)
 8005d68:	0019      	movs	r1, r3
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	f008 fb3a 	bl	800e3e4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d70:	4b11      	ldr	r3, [pc, #68]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005d72:	2207      	movs	r2, #7
 8005d74:	701a      	strb	r2, [r3, #0]
      break;
 8005d76:	e00e      	b.n	8005d96 <ESP_Upkeep+0x8ce>
      break;
 8005d78:	46c0      	nop			@ (mov r8, r8)
 8005d7a:	e00c      	b.n	8005d96 <ESP_Upkeep+0x8ce>
      break;
 8005d7c:	46c0      	nop			@ (mov r8, r8)
 8005d7e:	e00a      	b.n	8005d96 <ESP_Upkeep+0x8ce>
        break;
 8005d80:	46c0      	nop			@ (mov r8, r8)
 8005d82:	e008      	b.n	8005d96 <ESP_Upkeep+0x8ce>
    break;
 8005d84:	46c0      	nop			@ (mov r8, r8)
 8005d86:	e006      	b.n	8005d96 <ESP_Upkeep+0x8ce>
    break;
 8005d88:	46c0      	nop			@ (mov r8, r8)
 8005d8a:	e004      	b.n	8005d96 <ESP_Upkeep+0x8ce>
      break;
 8005d8c:	46c0      	nop			@ (mov r8, r8)
 8005d8e:	e002      	b.n	8005d96 <ESP_Upkeep+0x8ce>
    break;
 8005d90:	46c0      	nop			@ (mov r8, r8)
 8005d92:	e000      	b.n	8005d96 <ESP_Upkeep+0x8ce>
      break;
 8005d94:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005d96:	4b08      	ldr	r3, [pc, #32]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
}
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b002      	add	sp, #8
 8005da0:	bdb0      	pop	{r4, r5, r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	20000a1c 	.word	0x20000a1c
 8005da8:	2000054b 	.word	0x2000054b
 8005dac:	20000550 	.word	0x20000550
 8005db0:	20000a27 	.word	0x20000a27
 8005db4:	20000549 	.word	0x20000549
 8005db8:	2000002c 	.word	0x2000002c
 8005dbc:	2000054c 	.word	0x2000054c
 8005dc0:	2000054e 	.word	0x2000054e
 8005dc4:	08023b34 	.word	0x08023b34
 8005dc8:	08023acc 	.word	0x08023acc
 8005dcc:	2000054d 	.word	0x2000054d
 8005dd0:	20000a20 	.word	0x20000a20
 8005dd4:	20000028 	.word	0x20000028
 8005dd8:	08023b4c 	.word	0x08023b4c
 8005ddc:	08023088 	.word	0x08023088
 8005de0:	20000001 	.word	0x20000001
 8005de4:	2000054f 	.word	0x2000054f
 8005de8:	08023b64 	.word	0x08023b64
 8005dec:	080230ac 	.word	0x080230ac
 8005df0:	08023b78 	.word	0x08023b78

08005df4 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005dfc:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <I2CSensors_Init+0x30>)
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005e02:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <I2CSensors_Init+0x34>)
 8005e04:	4b09      	ldr	r3, [pc, #36]	@ (8005e2c <I2CSensors_Init+0x38>)
 8005e06:	0011      	movs	r1, r2
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f008 fc4f 	bl	800e6ac <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005e0e:	4a06      	ldr	r2, [pc, #24]	@ (8005e28 <I2CSensors_Init+0x34>)
 8005e10:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <I2CSensors_Init+0x38>)
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f005 fc39 	bl	800b68c <SGP_Init>
}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b002      	add	sp, #8
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	20000b3c 	.word	0x20000b3c
 8005e28:	08005e85 	.word	0x08005e85
 8005e2c:	08005e31 	.word	0x08005e31

08005e30 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6039      	str	r1, [r7, #0]
 8005e38:	0011      	movs	r1, r2
 8005e3a:	1dfb      	adds	r3, r7, #7
 8005e3c:	1c02      	adds	r2, r0, #0
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	1dbb      	adds	r3, r7, #6
 8005e42:	1c0a      	adds	r2, r1, #0
 8005e44:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e46:	4b0e      	ldr	r3, [pc, #56]	@ (8005e80 <ReadI2C+0x50>)
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	1dfb      	adds	r3, r7, #7
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	18db      	adds	r3, r3, r3
 8005e52:	b299      	uxth	r1, r3
 8005e54:	1dbb      	adds	r3, r7, #6
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	250f      	movs	r5, #15
 8005e5c:	197c      	adds	r4, r7, r5
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	f00a fd7c 	bl	801095c <HAL_I2C_Master_Receive_DMA>
 8005e64:	0003      	movs	r3, r0
 8005e66:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e68:	197b      	adds	r3, r7, r5
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <ReadI2C+0x44>
        return false;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <ReadI2C+0x46>
    }
    return true;
 8005e74:	2301      	movs	r3, #1
}
 8005e76:	0018      	movs	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b004      	add	sp, #16
 8005e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7e:	46c0      	nop			@ (mov r8, r8)
 8005e80:	20000b3c 	.word	0x20000b3c

08005e84 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e84:	b5b0      	push	{r4, r5, r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6039      	str	r1, [r7, #0]
 8005e8c:	0011      	movs	r1, r2
 8005e8e:	1dfb      	adds	r3, r7, #7
 8005e90:	1c02      	adds	r2, r0, #0
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	1dbb      	adds	r3, r7, #6
 8005e96:	1c0a      	adds	r2, r1, #0
 8005e98:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed4 <WriteI2C+0x50>)
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	1dfb      	adds	r3, r7, #7
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	18db      	adds	r3, r3, r3
 8005ea6:	b299      	uxth	r1, r3
 8005ea8:	1dbb      	adds	r3, r7, #6
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	250f      	movs	r5, #15
 8005eb0:	197c      	adds	r4, r7, r5
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	f00a fc4c 	bl	8010750 <HAL_I2C_Master_Transmit_DMA>
 8005eb8:	0003      	movs	r3, r0
 8005eba:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ebc:	197b      	adds	r3, r7, r5
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <WriteI2C+0x44>
        return false;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e000      	b.n	8005eca <WriteI2C+0x46>
    }
    return true;
 8005ec8:	2301      	movs	r3, #1
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b004      	add	sp, #16
 8005ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	20000b3c 	.word	0x20000b3c

08005ed8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b0c3      	sub	sp, #268	@ 0x10c
 8005edc:	af3e      	add	r7, sp, #248	@ 0xf8
 8005ede:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005ee0:	f016 ff26 	bl	801cd30 <GetUsbRxDataSize>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d971      	bls.n	8005fd2 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2123      	movs	r1, #35	@ 0x23
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f01a f91c 	bl	8020130 <strchr>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d065      	beq.n	8005fce <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	785a      	ldrb	r2, [r3, #1]
 8005f06:	4b34      	ldr	r3, [pc, #208]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f08:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	789a      	ldrb	r2, [r3, #2]
 8005f0e:	4b32      	ldr	r3, [pc, #200]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f10:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005f12:	4b31      	ldr	r3, [pc, #196]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	3305      	adds	r3, #5
 8005f18:	001a      	movs	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d351      	bcc.n	8005fc4 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	1cd9      	adds	r1, r3, #3
 8005f24:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	001a      	movs	r2, r3
 8005f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fdc <Process_PC_Config+0x104>)
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f01a f9d3 	bl	80202d8 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005f32:	4b29      	ldr	r3, [pc, #164]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	3303      	adds	r3, #3
 8005f38:	001a      	movs	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	189b      	adds	r3, r3, r2
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	b21a      	sxth	r2, r3
 8005f44:	4b24      	ldr	r3, [pc, #144]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	18cb      	adds	r3, r1, r3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	b21b      	sxth	r3, r3
 8005f56:	b299      	uxth	r1, r3
 8005f58:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f5a:	2381      	movs	r3, #129	@ 0x81
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f60:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f62:	2381      	movs	r3, #129	@ 0x81
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	5ad4      	ldrh	r4, [r2, r3]
 8005f68:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	3303      	adds	r3, #3
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	0011      	movs	r1, r2
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 f975 	bl	8006264 <CRC16_ARC>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	429c      	cmp	r4, r3
 8005f7e:	d007      	beq.n	8005f90 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f80:	4b15      	ldr	r3, [pc, #84]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f82:	785a      	ldrb	r2, [r3, #1]
 8005f84:	4b15      	ldr	r3, [pc, #84]	@ (8005fdc <Process_PC_Config+0x104>)
 8005f86:	0019      	movs	r1, r3
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f000 f919 	bl	80061c0 <Create_Message>
 8005f8e:	e016      	b.n	8005fbe <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f90:	4c11      	ldr	r4, [pc, #68]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005f92:	466b      	mov	r3, sp
 8005f94:	0018      	movs	r0, r3
 8005f96:	0023      	movs	r3, r4
 8005f98:	3310      	adds	r3, #16
 8005f9a:	22f4      	movs	r2, #244	@ 0xf4
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	f01a f99b 	bl	80202d8 <memcpy>
 8005fa2:	6820      	ldr	r0, [r4, #0]
 8005fa4:	6861      	ldr	r1, [r4, #4]
 8005fa6:	68a2      	ldr	r2, [r4, #8]
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	f000 f819 	bl	8005fe0 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005fae:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005fb0:	7818      	ldrb	r0, [r3, #0]
 8005fb2:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <Process_PC_Config+0x100>)
 8005fb4:	785a      	ldrb	r2, [r3, #1]
 8005fb6:	4b09      	ldr	r3, [pc, #36]	@ (8005fdc <Process_PC_Config+0x104>)
 8005fb8:	0019      	movs	r1, r3
 8005fba:	f000 f901 	bl	80061c0 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005fbe:	f016 fe9f 	bl	801cd00 <ResetUsbRxDataSize>
                return;
 8005fc2:	e006      	b.n	8005fd2 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f016 febc 	bl	801cd44 <GetUsbRxNextChunk>
 8005fcc:	e001      	b.n	8005fd2 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005fce:	f016 fe97 	bl	801cd00 <ResetUsbRxDataSize>
        }
    }
}
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b005      	add	sp, #20
 8005fd6:	bd90      	pop	{r4, r7, pc}
 8005fd8:	20000b40 	.word	0x20000b40
 8005fdc:	20000b42 	.word	0x20000b42

08005fe0 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	b5b0      	push	{r4, r5, r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	2518      	movs	r5, #24
 8005fea:	197c      	adds	r4, r7, r5
 8005fec:	6020      	str	r0, [r4, #0]
 8005fee:	6061      	str	r1, [r4, #4]
 8005ff0:	60a2      	str	r2, [r4, #8]
 8005ff2:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005ff4:	197b      	adds	r3, r7, r5
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ffa:	d100      	bne.n	8005ffe <ProcessCmd+0x1e>
 8005ffc:	e09c      	b.n	8006138 <ProcessCmd+0x158>
 8005ffe:	dd00      	ble.n	8006002 <ProcessCmd+0x22>
 8006000:	e0bc      	b.n	800617c <ProcessCmd+0x19c>
 8006002:	2b0c      	cmp	r3, #12
 8006004:	dc0a      	bgt.n	800601c <ProcessCmd+0x3c>
 8006006:	2b00      	cmp	r3, #0
 8006008:	da00      	bge.n	800600c <ProcessCmd+0x2c>
 800600a:	e0b7      	b.n	800617c <ProcessCmd+0x19c>
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d900      	bls.n	8006012 <ProcessCmd+0x32>
 8006010:	e0b4      	b.n	800617c <ProcessCmd+0x19c>
 8006012:	009a      	lsls	r2, r3, #2
 8006014:	4b5d      	ldr	r3, [pc, #372]	@ (800618c <ProcessCmd+0x1ac>)
 8006016:	18d3      	adds	r3, r2, r3
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	469f      	mov	pc, r3
 800601c:	2bfd      	cmp	r3, #253	@ 0xfd
 800601e:	d100      	bne.n	8006022 <ProcessCmd+0x42>
 8006020:	e084      	b.n	800612c <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8006022:	e0ab      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006024:	2118      	movs	r1, #24
 8006026:	187b      	adds	r3, r7, r1
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	001a      	movs	r2, r3
 800602c:	187b      	adds	r3, r7, r1
 800602e:	1c99      	adds	r1, r3, #2
 8006030:	4857      	ldr	r0, [pc, #348]	@ (8006190 <ProcessCmd+0x1b0>)
 8006032:	230c      	movs	r3, #12
 8006034:	f7fd fb44 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006038:	e0a0      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800603a:	2118      	movs	r1, #24
 800603c:	187b      	adds	r3, r7, r1
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	001a      	movs	r2, r3
 8006042:	187b      	adds	r3, r7, r1
 8006044:	1c99      	adds	r1, r3, #2
 8006046:	4853      	ldr	r0, [pc, #332]	@ (8006194 <ProcessCmd+0x1b4>)
 8006048:	230c      	movs	r3, #12
 800604a:	f7fd fb39 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800604e:	e095      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006050:	2118      	movs	r1, #24
 8006052:	187b      	adds	r3, r7, r1
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	001a      	movs	r2, r3
 8006058:	187b      	adds	r3, r7, r1
 800605a:	1c99      	adds	r1, r3, #2
 800605c:	484e      	ldr	r0, [pc, #312]	@ (8006198 <ProcessCmd+0x1b8>)
 800605e:	230c      	movs	r3, #12
 8006060:	f7fd fb2e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006064:	e08a      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006066:	2118      	movs	r1, #24
 8006068:	187b      	adds	r3, r7, r1
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	001a      	movs	r2, r3
 800606e:	187b      	adds	r3, r7, r1
 8006070:	1c99      	adds	r1, r3, #2
 8006072:	484a      	ldr	r0, [pc, #296]	@ (800619c <ProcessCmd+0x1bc>)
 8006074:	230c      	movs	r3, #12
 8006076:	f7fd fb23 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800607a:	e07f      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800607c:	2118      	movs	r1, #24
 800607e:	187b      	adds	r3, r7, r1
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	001a      	movs	r2, r3
 8006084:	187b      	adds	r3, r7, r1
 8006086:	1c99      	adds	r1, r3, #2
 8006088:	4845      	ldr	r0, [pc, #276]	@ (80061a0 <ProcessCmd+0x1c0>)
 800608a:	230c      	movs	r3, #12
 800608c:	f7fd fb18 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006090:	e074      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006092:	2118      	movs	r1, #24
 8006094:	187b      	adds	r3, r7, r1
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	001a      	movs	r2, r3
 800609a:	187b      	adds	r3, r7, r1
 800609c:	1c99      	adds	r1, r3, #2
 800609e:	4841      	ldr	r0, [pc, #260]	@ (80061a4 <ProcessCmd+0x1c4>)
 80060a0:	230c      	movs	r3, #12
 80060a2:	f7fd fb0d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060a6:	e069      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060a8:	2118      	movs	r1, #24
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	001a      	movs	r2, r3
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	1c99      	adds	r1, r3, #2
 80060b4:	483c      	ldr	r0, [pc, #240]	@ (80061a8 <ProcessCmd+0x1c8>)
 80060b6:	230c      	movs	r3, #12
 80060b8:	f7fd fb02 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060bc:	e05e      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80060be:	2118      	movs	r1, #24
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	001a      	movs	r2, r3
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	1c99      	adds	r1, r3, #2
 80060ca:	4838      	ldr	r0, [pc, #224]	@ (80061ac <ProcessCmd+0x1cc>)
 80060cc:	231e      	movs	r3, #30
 80060ce:	f7fd faf7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060d2:	e053      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060d4:	2118      	movs	r1, #24
 80060d6:	187b      	adds	r3, r7, r1
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	001a      	movs	r2, r3
 80060dc:	187b      	adds	r3, r7, r1
 80060de:	1c99      	adds	r1, r3, #2
 80060e0:	4833      	ldr	r0, [pc, #204]	@ (80061b0 <ProcessCmd+0x1d0>)
 80060e2:	230c      	movs	r3, #12
 80060e4:	f7fd faec 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060e8:	e048      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060ea:	2118      	movs	r1, #24
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	001a      	movs	r2, r3
 80060f2:	187b      	adds	r3, r7, r1
 80060f4:	1c99      	adds	r1, r3, #2
 80060f6:	482f      	ldr	r0, [pc, #188]	@ (80061b4 <ProcessCmd+0x1d4>)
 80060f8:	230c      	movs	r3, #12
 80060fa:	f7fd fae1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060fe:	e03d      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006100:	2118      	movs	r1, #24
 8006102:	187b      	adds	r3, r7, r1
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	001a      	movs	r2, r3
 8006108:	187b      	adds	r3, r7, r1
 800610a:	1c99      	adds	r1, r3, #2
 800610c:	482a      	ldr	r0, [pc, #168]	@ (80061b8 <ProcessCmd+0x1d8>)
 800610e:	230c      	movs	r3, #12
 8006110:	f7fd fad6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006114:	e032      	b.n	800617c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006116:	2118      	movs	r1, #24
 8006118:	187b      	adds	r3, r7, r1
 800611a:	785b      	ldrb	r3, [r3, #1]
 800611c:	001a      	movs	r2, r3
 800611e:	187b      	adds	r3, r7, r1
 8006120:	1c99      	adds	r1, r3, #2
 8006122:	4826      	ldr	r0, [pc, #152]	@ (80061bc <ProcessCmd+0x1dc>)
 8006124:	230c      	movs	r3, #12
 8006126:	f7fd facb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800612a:	e027      	b.n	800617c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800612c:	4b18      	ldr	r3, [pc, #96]	@ (8006190 <ProcessCmd+0x1b0>)
 800612e:	21ba      	movs	r1, #186	@ 0xba
 8006130:	0018      	movs	r0, r3
 8006132:	f7fd fb0a 	bl	800374a <ClearEEprom>
        break;
 8006136:	e021      	b.n	800617c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006138:	2118      	movs	r1, #24
 800613a:	187b      	adds	r3, r7, r1
 800613c:	789b      	ldrb	r3, [r3, #2]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	b21a      	sxth	r2, r3
 8006142:	187b      	adds	r3, r7, r1
 8006144:	78db      	ldrb	r3, [r3, #3]
 8006146:	b21b      	sxth	r3, r3
 8006148:	4313      	orrs	r3, r2
 800614a:	b21a      	sxth	r2, r3
 800614c:	1dbb      	adds	r3, r7, #6
 800614e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006150:	1dbb      	adds	r3, r7, #6
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	23c0      	movs	r3, #192	@ 0xc0
 8006156:	015b      	lsls	r3, r3, #5
 8006158:	429a      	cmp	r2, r3
 800615a:	d207      	bcs.n	800616c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 800615c:	1dbb      	adds	r3, r7, #6
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	4a0b      	ldr	r2, [pc, #44]	@ (8006190 <ProcessCmd+0x1b0>)
 8006162:	0019      	movs	r1, r3
 8006164:	0010      	movs	r0, r2
 8006166:	f7fd faf0 	bl	800374a <ClearEEprom>
            break;
 800616a:	e006      	b.n	800617a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800616c:	23c0      	movs	r3, #192	@ 0xc0
 800616e:	015b      	lsls	r3, r3, #5
 8006170:	4a07      	ldr	r2, [pc, #28]	@ (8006190 <ProcessCmd+0x1b0>)
 8006172:	0019      	movs	r1, r3
 8006174:	0010      	movs	r0, r2
 8006176:	f7fd fae8 	bl	800374a <ClearEEprom>
            break;
 800617a:	46c0      	nop			@ (mov r8, r8)
}
 800617c:	46c0      	nop			@ (mov r8, r8)
 800617e:	46bd      	mov	sp, r7
 8006180:	b002      	add	sp, #8
 8006182:	bcb0      	pop	{r4, r5, r7}
 8006184:	bc08      	pop	{r3}
 8006186:	b004      	add	sp, #16
 8006188:	4718      	bx	r3
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	08025318 	.word	0x08025318
 8006190:	08080000 	.word	0x08080000
 8006194:	0808000c 	.word	0x0808000c
 8006198:	08080018 	.word	0x08080018
 800619c:	08080024 	.word	0x08080024
 80061a0:	08080030 	.word	0x08080030
 80061a4:	0808003c 	.word	0x0808003c
 80061a8:	08080048 	.word	0x08080048
 80061ac:	08080090 	.word	0x08080090
 80061b0:	08080078 	.word	0x08080078
 80061b4:	0808006c 	.word	0x0808006c
 80061b8:	08080060 	.word	0x08080060
 80061bc:	08080054 	.word	0x08080054

080061c0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80061c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6039      	str	r1, [r7, #0]
 80061c8:	0011      	movs	r1, r2
 80061ca:	1dfb      	adds	r3, r7, #7
 80061cc:	1c02      	adds	r2, r0, #0
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	1dbb      	adds	r3, r7, #6
 80061d2:	1c0a      	adds	r2, r1, #0
 80061d4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80061d6:	2223      	movs	r2, #35	@ 0x23
 80061d8:	4b20      	ldr	r3, [pc, #128]	@ (800625c <Create_Message+0x9c>)
 80061da:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80061dc:	4b1f      	ldr	r3, [pc, #124]	@ (800625c <Create_Message+0x9c>)
 80061de:	1dfa      	adds	r2, r7, #7
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80061e4:	4b1d      	ldr	r3, [pc, #116]	@ (800625c <Create_Message+0x9c>)
 80061e6:	1dba      	adds	r2, r7, #6
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80061ec:	1dbb      	adds	r3, r7, #6
 80061ee:	781a      	ldrb	r2, [r3, #0]
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <Create_Message+0xa0>)
 80061f4:	0018      	movs	r0, r3
 80061f6:	f01a f86f 	bl	80202d8 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80061fa:	1dbb      	adds	r3, r7, #6
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	250e      	movs	r5, #14
 8006202:	197b      	adds	r3, r7, r5
 8006204:	3203      	adds	r2, #3
 8006206:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006208:	260c      	movs	r6, #12
 800620a:	19bc      	adds	r4, r7, r6
 800620c:	197b      	adds	r3, r7, r5
 800620e:	881a      	ldrh	r2, [r3, #0]
 8006210:	4b12      	ldr	r3, [pc, #72]	@ (800625c <Create_Message+0x9c>)
 8006212:	0011      	movs	r1, r2
 8006214:	0018      	movs	r0, r3
 8006216:	f000 f825 	bl	8006264 <CRC16_ARC>
 800621a:	0003      	movs	r3, r0
 800621c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800621e:	0030      	movs	r0, r6
 8006220:	183b      	adds	r3, r7, r0
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	b29a      	uxth	r2, r3
 8006228:	197b      	adds	r3, r7, r5
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b2d1      	uxtb	r1, r2
 800622e:	4a0b      	ldr	r2, [pc, #44]	@ (800625c <Create_Message+0x9c>)
 8006230:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006232:	197b      	adds	r3, r7, r5
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	183a      	adds	r2, r7, r0
 800623a:	8812      	ldrh	r2, [r2, #0]
 800623c:	b2d1      	uxtb	r1, r2
 800623e:	4a07      	ldr	r2, [pc, #28]	@ (800625c <Create_Message+0x9c>)
 8006240:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006242:	197b      	adds	r3, r7, r5
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	3302      	adds	r3, #2
 8006248:	b29a      	uxth	r2, r3
 800624a:	4b04      	ldr	r3, [pc, #16]	@ (800625c <Create_Message+0x9c>)
 800624c:	0011      	movs	r1, r2
 800624e:	0018      	movs	r0, r3
 8006250:	f016 fd14 	bl	801cc7c <CDC_Transmit_FS>
}
 8006254:	46c0      	nop			@ (mov r8, r8)
 8006256:	46bd      	mov	sp, r7
 8006258:	b005      	add	sp, #20
 800625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800625c:	20000c44 	.word	0x20000c44
 8006260:	20000c47 	.word	0x20000c47

08006264 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	000a      	movs	r2, r1
 800626e:	1cbb      	adds	r3, r7, #2
 8006270:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006272:	2316      	movs	r3, #22
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2200      	movs	r2, #0
 8006278:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	e02e      	b.n	80062de <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	0019      	movs	r1, r3
 800628a:	2216      	movs	r2, #22
 800628c:	18bb      	adds	r3, r7, r2
 800628e:	18ba      	adds	r2, r7, r2
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	404a      	eors	r2, r1
 8006294:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	e01a      	b.n	80062d2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 800629c:	2116      	movs	r1, #22
 800629e:	187b      	adds	r3, r7, r1
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	4013      	ands	r3, r2
 80062a6:	d00b      	beq.n	80062c0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80062a8:	187b      	adds	r3, r7, r1
 80062aa:	187a      	adds	r2, r7, r1
 80062ac:	8812      	ldrh	r2, [r2, #0]
 80062ae:	0852      	lsrs	r2, r2, #1
 80062b0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	187a      	adds	r2, r7, r1
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	490f      	ldr	r1, [pc, #60]	@ (80062f8 <CRC16_ARC+0x94>)
 80062ba:	404a      	eors	r2, r1
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e005      	b.n	80062cc <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80062c0:	2216      	movs	r2, #22
 80062c2:	18bb      	adds	r3, r7, r2
 80062c4:	18ba      	adds	r2, r7, r2
 80062c6:	8812      	ldrh	r2, [r2, #0]
 80062c8:	0852      	lsrs	r2, r2, #1
 80062ca:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	dde1      	ble.n	800629c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	3301      	adds	r3, #1
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	1cbb      	adds	r3, r7, #2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	dbcb      	blt.n	8006280 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80062e8:	2316      	movs	r3, #22
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	881b      	ldrh	r3, [r3, #0]
}
 80062ee:	0018      	movs	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b006      	add	sp, #24
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	ffffa001 	.word	0xffffa001

080062fc <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006300:	4b26      	ldr	r3, [pc, #152]	@ (800639c <ReadBatteryVoltage+0xa0>)
 8006302:	4a27      	ldr	r2, [pc, #156]	@ (80063a0 <ReadBatteryVoltage+0xa4>)
 8006304:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006306:	4b25      	ldr	r3, [pc, #148]	@ (800639c <ReadBatteryVoltage+0xa0>)
 8006308:	2280      	movs	r2, #128	@ 0x80
 800630a:	0152      	lsls	r2, r2, #5
 800630c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800630e:	4a23      	ldr	r2, [pc, #140]	@ (800639c <ReadBatteryVoltage+0xa0>)
 8006310:	4b24      	ldr	r3, [pc, #144]	@ (80063a4 <ReadBatteryVoltage+0xa8>)
 8006312:	0011      	movs	r1, r2
 8006314:	0018      	movs	r0, r3
 8006316:	f008 ff83 	bl	800f220 <HAL_ADC_ConfigChannel>
 800631a:	1e03      	subs	r3, r0, #0
 800631c:	d001      	beq.n	8006322 <ReadBatteryVoltage+0x26>
    Error_Handler();
 800631e:	f001 ffc9 	bl	80082b4 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006322:	4b20      	ldr	r3, [pc, #128]	@ (80063a4 <ReadBatteryVoltage+0xa8>)
 8006324:	0018      	movs	r0, r3
 8006326:	f008 fe7f 	bl	800f028 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800632a:	4b1e      	ldr	r3, [pc, #120]	@ (80063a4 <ReadBatteryVoltage+0xa8>)
 800632c:	2101      	movs	r1, #1
 800632e:	0018      	movs	r0, r3
 8006330:	f008 fece 	bl	800f0d0 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006334:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <ReadBatteryVoltage+0xa8>)
 8006336:	0018      	movs	r0, r3
 8006338:	f008 ff66 	bl	800f208 <HAL_ADC_GetValue>
 800633c:	0002      	movs	r2, r0
 800633e:	4b1a      	ldr	r3, [pc, #104]	@ (80063a8 <ReadBatteryVoltage+0xac>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4353      	muls	r3, r2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	4919      	ldr	r1, [pc, #100]	@ (80063ac <ReadBatteryVoltage+0xb0>)
 8006348:	0018      	movs	r0, r3
 800634a:	f7f9 ff2b 	bl	80001a4 <__udivsi3>
 800634e:	0003      	movs	r3, r0
 8006350:	001a      	movs	r2, r3
 8006352:	4b17      	ldr	r3, [pc, #92]	@ (80063b0 <ReadBatteryVoltage+0xb4>)
 8006354:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006356:	4b16      	ldr	r3, [pc, #88]	@ (80063b0 <ReadBatteryVoltage+0xb4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	0018      	movs	r0, r3
 800635c:	f7fb f984 	bl	8001668 <__aeabi_ui2f>
 8006360:	1c03      	adds	r3, r0, #0
 8006362:	4914      	ldr	r1, [pc, #80]	@ (80063b4 <ReadBatteryVoltage+0xb8>)
 8006364:	1c18      	adds	r0, r3, #0
 8006366:	f7fa fc35 	bl	8000bd4 <__aeabi_fdiv>
 800636a:	1c03      	adds	r3, r0, #0
 800636c:	1c1a      	adds	r2, r3, #0
 800636e:	4b12      	ldr	r3, [pc, #72]	@ (80063b8 <ReadBatteryVoltage+0xbc>)
 8006370:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006372:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <ReadBatteryVoltage+0xa0>)
 8006374:	4a0a      	ldr	r2, [pc, #40]	@ (80063a0 <ReadBatteryVoltage+0xa4>)
 8006376:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006378:	4b08      	ldr	r3, [pc, #32]	@ (800639c <ReadBatteryVoltage+0xa0>)
 800637a:	4a10      	ldr	r2, [pc, #64]	@ (80063bc <ReadBatteryVoltage+0xc0>)
 800637c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800637e:	4a07      	ldr	r2, [pc, #28]	@ (800639c <ReadBatteryVoltage+0xa0>)
 8006380:	4b08      	ldr	r3, [pc, #32]	@ (80063a4 <ReadBatteryVoltage+0xa8>)
 8006382:	0011      	movs	r1, r2
 8006384:	0018      	movs	r0, r3
 8006386:	f008 ff4b 	bl	800f220 <HAL_ADC_ConfigChannel>
 800638a:	1e03      	subs	r3, r0, #0
 800638c:	d001      	beq.n	8006392 <ReadBatteryVoltage+0x96>
    Error_Handler();
 800638e:	f001 ff91 	bl	80082b4 <Error_Handler>
  }
  return trueValue;
 8006392:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <ReadBatteryVoltage+0xbc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 }
 8006396:	1c18      	adds	r0, r3, #0
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000d4c 	.word	0x20000d4c
 80063a0:	38004000 	.word	0x38004000
 80063a4:	20000d88 	.word	0x20000d88
 80063a8:	20000030 	.word	0x20000030
 80063ac:	00000fff 	.word	0x00000fff
 80063b0:	20000d54 	.word	0x20000d54
 80063b4:	447a0000 	.word	0x447a0000
 80063b8:	20000d58 	.word	0x20000d58
 80063bc:	00001001 	.word	0x00001001

080063c0 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80063c4:	4b21      	ldr	r3, [pc, #132]	@ (800644c <ReadSolarVoltage+0x8c>)
 80063c6:	4a22      	ldr	r2, [pc, #136]	@ (8006450 <ReadSolarVoltage+0x90>)
 80063c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80063ca:	4b20      	ldr	r3, [pc, #128]	@ (800644c <ReadSolarVoltage+0x8c>)
 80063cc:	2280      	movs	r2, #128	@ 0x80
 80063ce:	0152      	lsls	r2, r2, #5
 80063d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063d2:	4a1e      	ldr	r2, [pc, #120]	@ (800644c <ReadSolarVoltage+0x8c>)
 80063d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006454 <ReadSolarVoltage+0x94>)
 80063d6:	0011      	movs	r1, r2
 80063d8:	0018      	movs	r0, r3
 80063da:	f008 ff21 	bl	800f220 <HAL_ADC_ConfigChannel>
 80063de:	1e03      	subs	r3, r0, #0
 80063e0:	d001      	beq.n	80063e6 <ReadSolarVoltage+0x26>
    Error_Handler();
 80063e2:	f001 ff67 	bl	80082b4 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80063e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006454 <ReadSolarVoltage+0x94>)
 80063e8:	0018      	movs	r0, r3
 80063ea:	f008 fe1d 	bl	800f028 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80063ee:	4b19      	ldr	r3, [pc, #100]	@ (8006454 <ReadSolarVoltage+0x94>)
 80063f0:	2101      	movs	r1, #1
 80063f2:	0018      	movs	r0, r3
 80063f4:	f008 fe6c 	bl	800f0d0 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80063f8:	4b16      	ldr	r3, [pc, #88]	@ (8006454 <ReadSolarVoltage+0x94>)
 80063fa:	0018      	movs	r0, r3
 80063fc:	f008 ff04 	bl	800f208 <HAL_ADC_GetValue>
 8006400:	0002      	movs	r2, r0
 8006402:	4b15      	ldr	r3, [pc, #84]	@ (8006458 <ReadSolarVoltage+0x98>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	435a      	muls	r2, r3
 8006408:	0013      	movs	r3, r2
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	189b      	adds	r3, r3, r2
 800640e:	4913      	ldr	r1, [pc, #76]	@ (800645c <ReadSolarVoltage+0x9c>)
 8006410:	0018      	movs	r0, r3
 8006412:	f7f9 fec7 	bl	80001a4 <__udivsi3>
 8006416:	0003      	movs	r3, r0
 8006418:	001a      	movs	r2, r3
 800641a:	4b11      	ldr	r3, [pc, #68]	@ (8006460 <ReadSolarVoltage+0xa0>)
 800641c:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800641e:	4b0b      	ldr	r3, [pc, #44]	@ (800644c <ReadSolarVoltage+0x8c>)
 8006420:	4a0b      	ldr	r2, [pc, #44]	@ (8006450 <ReadSolarVoltage+0x90>)
 8006422:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006424:	4b09      	ldr	r3, [pc, #36]	@ (800644c <ReadSolarVoltage+0x8c>)
 8006426:	4a0f      	ldr	r2, [pc, #60]	@ (8006464 <ReadSolarVoltage+0xa4>)
 8006428:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800642a:	4a08      	ldr	r2, [pc, #32]	@ (800644c <ReadSolarVoltage+0x8c>)
 800642c:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <ReadSolarVoltage+0x94>)
 800642e:	0011      	movs	r1, r2
 8006430:	0018      	movs	r0, r3
 8006432:	f008 fef5 	bl	800f220 <HAL_ADC_ConfigChannel>
 8006436:	1e03      	subs	r3, r0, #0
 8006438:	d001      	beq.n	800643e <ReadSolarVoltage+0x7e>
    Error_Handler();
 800643a:	f001 ff3b 	bl	80082b4 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800643e:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <ReadSolarVoltage+0xa0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 }
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	20000d4c 	.word	0x20000d4c
 8006450:	3c008000 	.word	0x3c008000
 8006454:	20000d88 	.word	0x20000d88
 8006458:	20000030 	.word	0x20000030
 800645c:	00000fff 	.word	0x00000fff
 8006460:	20000d5c 	.word	0x20000d5c
 8006464:	00001001 	.word	0x00001001

08006468 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 800646c:	23a0      	movs	r3, #160	@ 0xa0
 800646e:	05db      	lsls	r3, r3, #23
 8006470:	2180      	movs	r1, #128	@ 0x80
 8006472:	0018      	movs	r0, r3
 8006474:	f009 fe70 	bl	8010158 <HAL_GPIO_ReadPin>
 8006478:	0003      	movs	r3, r0
 800647a:	1e5a      	subs	r2, r3, #1
 800647c:	4193      	sbcs	r3, r2
 800647e:	b2db      	uxtb	r3, r3
}
 8006480:	0018      	movs	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006486:	b580      	push	{r7, lr}
 8006488:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800648a:	2380      	movs	r3, #128	@ 0x80
 800648c:	021a      	lsls	r2, r3, #8
 800648e:	23a0      	movs	r3, #160	@ 0xa0
 8006490:	05db      	lsls	r3, r3, #23
 8006492:	0011      	movs	r1, r2
 8006494:	0018      	movs	r0, r3
 8006496:	f009 fe5f 	bl	8010158 <HAL_GPIO_ReadPin>
 800649a:	0003      	movs	r3, r0
 800649c:	1e5a      	subs	r2, r3, #1
 800649e:	4193      	sbcs	r3, r2
 80064a0:	b2db      	uxtb	r3, r3
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <UserButton_Pressed+0x1c>)
 80064ae:	2104      	movs	r1, #4
 80064b0:	0018      	movs	r0, r3
 80064b2:	f009 fe51 	bl	8010158 <HAL_GPIO_ReadPin>
 80064b6:	0003      	movs	r3, r0
 80064b8:	425a      	negs	r2, r3
 80064ba:	4153      	adcs	r3, r2
 80064bc:	b2db      	uxtb	r3, r3
}
 80064be:	0018      	movs	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	50000c00 	.word	0x50000c00

080064c8 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80064c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ca:	46d6      	mov	lr, sl
 80064cc:	464f      	mov	r7, r9
 80064ce:	4646      	mov	r6, r8
 80064d0:	b5c0      	push	{r6, r7, lr}
 80064d2:	b08e      	sub	sp, #56	@ 0x38
 80064d4:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80064d6:	4b21      	ldr	r3, [pc, #132]	@ (800655c <showTime+0x94>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d036      	beq.n	800654c <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064de:	003a      	movs	r2, r7
 80064e0:	1d3b      	adds	r3, r7, #4
 80064e2:	0011      	movs	r1, r2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f000 fa2b 	bl	8006940 <RTC_GetTime>
  UpdateSystemUptime();
 80064ea:	f000 f83f 	bl	800656c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064ee:	003b      	movs	r3, r7
 80064f0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064f2:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064f4:	003b      	movs	r3, r7
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064fa:	4b19      	ldr	r3, [pc, #100]	@ (8006560 <showTime+0x98>)
 80064fc:	0092      	lsls	r2, r2, #2
 80064fe:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006500:	003b      	movs	r3, r7
 8006502:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006504:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006506:	1d3b      	adds	r3, r7, #4
 8006508:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800650a:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006510:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006516:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006518:	4b12      	ldr	r3, [pc, #72]	@ (8006564 <showTime+0x9c>)
 800651a:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800651c:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800651e:	4b11      	ldr	r3, [pc, #68]	@ (8006564 <showTime+0x9c>)
 8006520:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006522:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006524:	4b0f      	ldr	r3, [pc, #60]	@ (8006564 <showTime+0x9c>)
 8006526:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006528:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800652a:	4b0e      	ldr	r3, [pc, #56]	@ (8006564 <showTime+0x9c>)
 800652c:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800652e:	480e      	ldr	r0, [pc, #56]	@ (8006568 <showTime+0xa0>)
 8006530:	9306      	str	r3, [sp, #24]
 8006532:	4643      	mov	r3, r8
 8006534:	9305      	str	r3, [sp, #20]
 8006536:	4663      	mov	r3, ip
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	9603      	str	r6, [sp, #12]
 800653c:	9502      	str	r5, [sp, #8]
 800653e:	9401      	str	r4, [sp, #4]
 8006540:	9100      	str	r1, [sp, #0]
 8006542:	4653      	mov	r3, sl
 8006544:	4649      	mov	r1, r9
 8006546:	f019 fc37 	bl	801fdb8 <iprintf>
 800654a:	e000      	b.n	800654e <showTime+0x86>
    return;
 800654c:	46c0      	nop			@ (mov r8, r8)
}
 800654e:	46bd      	mov	sp, r7
 8006550:	b006      	add	sp, #24
 8006552:	bce0      	pop	{r5, r6, r7}
 8006554:	46ba      	mov	sl, r7
 8006556:	46b1      	mov	r9, r6
 8006558:	46a8      	mov	r8, r5
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655c:	20000d6c 	.word	0x20000d6c
 8006560:	20000050 	.word	0x20000050
 8006564:	20000d60 	.word	0x20000d60
 8006568:	08023bf4 	.word	0x08023bf4

0800656c <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006572:	003a      	movs	r2, r7
 8006574:	1d3b      	adds	r3, r7, #4
 8006576:	0011      	movs	r1, r2
 8006578:	0018      	movs	r0, r3
 800657a:	f000 f9e1 	bl	8006940 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800657e:	1d3a      	adds	r2, r7, #4
 8006580:	003b      	movs	r3, r7
 8006582:	0011      	movs	r1, r2
 8006584:	0018      	movs	r0, r3
 8006586:	f000 fba1 	bl	8006ccc <makeTime>
 800658a:	0002      	movs	r2, r0
 800658c:	4b1e      	ldr	r3, [pc, #120]	@ (8006608 <UpdateSystemUptime+0x9c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	213c      	movs	r1, #60	@ 0x3c
 800659c:	0018      	movs	r0, r3
 800659e:	f7f9 fe87 	bl	80002b0 <__aeabi_uidivmod>
 80065a2:	000b      	movs	r3, r1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	4b19      	ldr	r3, [pc, #100]	@ (800660c <UpdateSystemUptime+0xa0>)
 80065a8:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	213c      	movs	r1, #60	@ 0x3c
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7f9 fdf8 	bl	80001a4 <__udivsi3>
 80065b4:	0003      	movs	r3, r0
 80065b6:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	213c      	movs	r1, #60	@ 0x3c
 80065bc:	0018      	movs	r0, r3
 80065be:	f7f9 fe77 	bl	80002b0 <__aeabi_uidivmod>
 80065c2:	000b      	movs	r3, r1
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	4b11      	ldr	r3, [pc, #68]	@ (800660c <UpdateSystemUptime+0xa0>)
 80065c8:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	213c      	movs	r1, #60	@ 0x3c
 80065ce:	0018      	movs	r0, r3
 80065d0:	f7f9 fde8 	bl	80001a4 <__udivsi3>
 80065d4:	0003      	movs	r3, r0
 80065d6:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2118      	movs	r1, #24
 80065dc:	0018      	movs	r0, r3
 80065de:	f7f9 fe67 	bl	80002b0 <__aeabi_uidivmod>
 80065e2:	000b      	movs	r3, r1
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4b09      	ldr	r3, [pc, #36]	@ (800660c <UpdateSystemUptime+0xa0>)
 80065e8:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2118      	movs	r1, #24
 80065ee:	0018      	movs	r0, r3
 80065f0:	f7f9 fdd8 	bl	80001a4 <__udivsi3>
 80065f4:	0003      	movs	r3, r0
 80065f6:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	4b03      	ldr	r3, [pc, #12]	@ (800660c <UpdateSystemUptime+0xa0>)
 80065fe:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006600:	46c0      	nop			@ (mov r8, r8)
 8006602:	46bd      	mov	sp, r7
 8006604:	b008      	add	sp, #32
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000d6c 	.word	0x20000d6c
 800660c:	20000d60 	.word	0x20000d60

08006610 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	0008      	movs	r0, r1
 800661a:	0011      	movs	r1, r2
 800661c:	1cfb      	adds	r3, r7, #3
 800661e:	1c02      	adds	r2, r0, #0
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	1cbb      	adds	r3, r7, #2
 8006624:	1c0a      	adds	r2, r1, #0
 8006626:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006628:	230e      	movs	r3, #14
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006630:	230f      	movs	r3, #15
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	1cfa      	adds	r2, r7, #3
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	e015      	b.n	8006668 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800663c:	200f      	movs	r0, #15
 800663e:	183b      	adds	r3, r7, r0
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	18d2      	adds	r2, r2, r3
 8006646:	240e      	movs	r4, #14
 8006648:	193b      	adds	r3, r7, r4
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	7811      	ldrb	r1, [r2, #0]
 800664e:	2208      	movs	r2, #8
 8006650:	18ba      	adds	r2, r7, r2
 8006652:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006654:	193b      	adds	r3, r7, r4
 8006656:	781a      	ldrb	r2, [r3, #0]
 8006658:	193b      	adds	r3, r7, r4
 800665a:	3201      	adds	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800665e:	183b      	adds	r3, r7, r0
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	183b      	adds	r3, r7, r0
 8006664:	3201      	adds	r2, #1
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	200f      	movs	r0, #15
 800666a:	183a      	adds	r2, r7, r0
 800666c:	1cbb      	adds	r3, r7, #2
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d9e2      	bls.n	800663c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006676:	230e      	movs	r3, #14
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2208      	movs	r2, #8
 800667e:	18ba      	adds	r2, r7, r2
 8006680:	2100      	movs	r1, #0
 8006682:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006684:	1cfb      	adds	r3, r7, #3
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b13      	cmp	r3, #19
 800668a:	d849      	bhi.n	8006720 <aBuff2int+0x110>
    if (start == 17) { //month
 800668c:	1cfb      	adds	r3, r7, #3
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b11      	cmp	r3, #17
 8006692:	d122      	bne.n	80066da <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006694:	183b      	adds	r3, r7, r0
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e018      	b.n	80066ce <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800669c:	240f      	movs	r4, #15
 800669e:	193b      	adds	r3, r7, r4
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	4b25      	ldr	r3, [pc, #148]	@ (8006738 <aBuff2int+0x128>)
 80066a4:	0092      	lsls	r2, r2, #2
 80066a6:	58d2      	ldr	r2, [r2, r3]
 80066a8:	2308      	movs	r3, #8
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	0011      	movs	r1, r2
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7f9 fd52 	bl	8000158 <strcmp>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d104      	bne.n	80066c2 <aBuff2int+0xb2>
          return i+1;
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	e035      	b.n	800672e <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80066c2:	210f      	movs	r1, #15
 80066c4:	187b      	adds	r3, r7, r1
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	187b      	adds	r3, r7, r1
 80066ca:	3201      	adds	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	230f      	movs	r3, #15
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b0b      	cmp	r3, #11
 80066d6:	d9e1      	bls.n	800669c <aBuff2int+0x8c>
 80066d8:	e022      	b.n	8006720 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80066da:	230f      	movs	r3, #15
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e018      	b.n	8006716 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066e4:	240f      	movs	r4, #15
 80066e6:	193b      	adds	r3, r7, r4
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	4b14      	ldr	r3, [pc, #80]	@ (800673c <aBuff2int+0x12c>)
 80066ec:	0092      	lsls	r2, r2, #2
 80066ee:	58d2      	ldr	r2, [r2, r3]
 80066f0:	2308      	movs	r3, #8
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	0011      	movs	r1, r2
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7f9 fd2e 	bl	8000158 <strcmp>
 80066fc:	1e03      	subs	r3, r0, #0
 80066fe:	d104      	bne.n	800670a <aBuff2int+0xfa>
          return i+1;
 8006700:	193b      	adds	r3, r7, r4
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	e011      	b.n	800672e <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800670a:	210f      	movs	r1, #15
 800670c:	187b      	adds	r3, r7, r1
 800670e:	781a      	ldrb	r2, [r3, #0]
 8006710:	187b      	adds	r3, r7, r1
 8006712:	3201      	adds	r2, #1
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	230f      	movs	r3, #15
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b06      	cmp	r3, #6
 800671e:	d9e1      	bls.n	80066e4 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006720:	2308      	movs	r3, #8
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	0018      	movs	r0, r3
 8006726:	f017 ff6c 	bl	801e602 <atoi>
 800672a:	0003      	movs	r3, r0
 800672c:	b2db      	uxtb	r3, r3
}
 800672e:	0018      	movs	r0, r3
 8006730:	46bd      	mov	sp, r7
 8006732:	b005      	add	sp, #20
 8006734:	bd90      	pop	{r4, r7, pc}
 8006736:	46c0      	nop			@ (mov r8, r8)
 8006738:	20000050 	.word	0x20000050
 800673c:	20000034 	.word	0x20000034

08006740 <ParseTime>:

void ParseTime(char* buffer) {
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	b08b      	sub	sp, #44	@ 0x2c
 8006744:	af02      	add	r7, sp, #8
 8006746:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006748:	2408      	movs	r4, #8
 800674a:	193a      	adds	r2, r7, r4
 800674c:	260c      	movs	r6, #12
 800674e:	19bb      	adds	r3, r7, r6
 8006750:	0011      	movs	r1, r2
 8006752:	0018      	movs	r0, r3
 8006754:	f000 f8f4 	bl	8006940 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2219      	movs	r2, #25
 800675c:	2118      	movs	r1, #24
 800675e:	0018      	movs	r0, r3
 8006760:	f7ff ff56 	bl	8006610 <aBuff2int>
 8006764:	0003      	movs	r3, r0
 8006766:	001a      	movs	r2, r3
 8006768:	19bb      	adds	r3, r7, r6
 800676a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	221c      	movs	r2, #28
 8006770:	211b      	movs	r1, #27
 8006772:	0018      	movs	r0, r3
 8006774:	f7ff ff4c 	bl	8006610 <aBuff2int>
 8006778:	0003      	movs	r3, r0
 800677a:	001a      	movs	r2, r3
 800677c:	19bb      	adds	r3, r7, r6
 800677e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	221f      	movs	r2, #31
 8006784:	211e      	movs	r1, #30
 8006786:	0018      	movs	r0, r3
 8006788:	f7ff ff42 	bl	8006610 <aBuff2int>
 800678c:	0003      	movs	r3, r0
 800678e:	001a      	movs	r2, r3
 8006790:	19bb      	adds	r3, r7, r6
 8006792:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2224      	movs	r2, #36	@ 0x24
 8006798:	2123      	movs	r1, #35	@ 0x23
 800679a:	0018      	movs	r0, r3
 800679c:	f7ff ff38 	bl	8006610 <aBuff2int>
 80067a0:	0003      	movs	r3, r0
 80067a2:	001a      	movs	r2, r3
 80067a4:	0025      	movs	r5, r4
 80067a6:	197b      	adds	r3, r7, r5
 80067a8:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2213      	movs	r2, #19
 80067ae:	2111      	movs	r1, #17
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7ff ff2d 	bl	8006610 <aBuff2int>
 80067b6:	0003      	movs	r3, r0
 80067b8:	001a      	movs	r2, r3
 80067ba:	197b      	adds	r3, r7, r5
 80067bc:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2216      	movs	r2, #22
 80067c2:	2115      	movs	r1, #21
 80067c4:	0018      	movs	r0, r3
 80067c6:	f7ff ff23 	bl	8006610 <aBuff2int>
 80067ca:	0003      	movs	r3, r0
 80067cc:	001a      	movs	r2, r3
 80067ce:	197b      	adds	r3, r7, r5
 80067d0:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	220f      	movs	r2, #15
 80067d6:	210d      	movs	r1, #13
 80067d8:	0018      	movs	r0, r3
 80067da:	f7ff ff19 	bl	8006610 <aBuff2int>
 80067de:	0003      	movs	r3, r0
 80067e0:	001a      	movs	r2, r3
 80067e2:	197b      	adds	r3, r7, r5
 80067e4:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067e6:	19bb      	adds	r3, r7, r6
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	001c      	movs	r4, r3
 80067ec:	19bb      	adds	r3, r7, r6
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	0018      	movs	r0, r3
 80067f2:	19bb      	adds	r3, r7, r6
 80067f4:	789b      	ldrb	r3, [r3, #2]
 80067f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006868 <ParseTime+0x128>)
 80067f8:	491c      	ldr	r1, [pc, #112]	@ (800686c <ParseTime+0x12c>)
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	9000      	str	r0, [sp, #0]
 80067fe:	0023      	movs	r3, r4
 8006800:	2003      	movs	r0, #3
 8006802:	f007 fdef 	bl	800e3e4 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006806:	197b      	adds	r3, r7, r5
 8006808:	789b      	ldrb	r3, [r3, #2]
 800680a:	001c      	movs	r4, r3
 800680c:	197b      	adds	r3, r7, r5
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	0018      	movs	r0, r3
 8006812:	197b      	adds	r3, r7, r5
 8006814:	78db      	ldrb	r3, [r3, #3]
 8006816:	4a16      	ldr	r2, [pc, #88]	@ (8006870 <ParseTime+0x130>)
 8006818:	4914      	ldr	r1, [pc, #80]	@ (800686c <ParseTime+0x12c>)
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	9000      	str	r0, [sp, #0]
 800681e:	0023      	movs	r3, r4
 8006820:	2003      	movs	r0, #3
 8006822:	f007 fddf 	bl	800e3e4 <CreateLine>
  RTC_SetTime(&currentTime);
 8006826:	19bb      	adds	r3, r7, r6
 8006828:	0018      	movs	r0, r3
 800682a:	f000 f825 	bl	8006878 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800682e:	197b      	adds	r3, r7, r5
 8006830:	0018      	movs	r0, r3
 8006832:	f000 f847 	bl	80068c4 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006836:	197b      	adds	r3, r7, r5
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d101      	bne.n	8006842 <ParseTime+0x102>
    reset_fanCleaningDone();
 800683e:	f002 fc8b 	bl	8009158 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 8006842:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <ParseTime+0x134>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800684a:	230c      	movs	r3, #12
 800684c:	18fa      	adds	r2, r7, r3
 800684e:	2308      	movs	r3, #8
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	0011      	movs	r1, r2
 8006854:	0018      	movs	r0, r3
 8006856:	f000 fa39 	bl	8006ccc <makeTime>
 800685a:	0002      	movs	r2, r0
 800685c:	4b05      	ldr	r3, [pc, #20]	@ (8006874 <ParseTime+0x134>)
 800685e:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 8006860:	46c0      	nop			@ (mov r8, r8)
 8006862:	46bd      	mov	sp, r7
 8006864:	b009      	add	sp, #36	@ 0x24
 8006866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006868:	08023c4c 	.word	0x08023c4c
 800686c:	08023c84 	.word	0x08023c84
 8006870:	08023c88 	.word	0x08023c88
 8006874:	20000d6c 	.word	0x20000d6c

08006878 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <RTC_SetTime+0x40>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	0018      	movs	r0, r3
 800689c:	f00f fb08 	bl	8015eb0 <HAL_RTC_SetTime>
 80068a0:	1e03      	subs	r3, r0, #0
 80068a2:	d005      	beq.n	80068b0 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 80068a4:	4a05      	ldr	r2, [pc, #20]	@ (80068bc <RTC_SetTime+0x44>)
 80068a6:	4b06      	ldr	r3, [pc, #24]	@ (80068c0 <RTC_SetTime+0x48>)
 80068a8:	0019      	movs	r1, r3
 80068aa:	2001      	movs	r0, #1
 80068ac:	f007 fd9a 	bl	800e3e4 <CreateLine>
    }
}
 80068b0:	46c0      	nop			@ (mov r8, r8)
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b002      	add	sp, #8
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	20000d68 	.word	0x20000d68
 80068bc:	08023cbc 	.word	0x08023cbc
 80068c0:	08023cd8 	.word	0x08023cd8

080068c4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068cc:	4b16      	ldr	r3, [pc, #88]	@ (8006928 <RTC_SetDate+0x64>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	0018      	movs	r0, r3
 80068d6:	f00f fbf3 	bl	80160c0 <HAL_RTC_SetDate>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d005      	beq.n	80068ea <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80068de:	4a13      	ldr	r2, [pc, #76]	@ (800692c <RTC_SetDate+0x68>)
 80068e0:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <RTC_SetDate+0x6c>)
 80068e2:	0019      	movs	r1, r3
 80068e4:	2001      	movs	r0, #1
 80068e6:	f007 fd7d 	bl	800e3e4 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006928 <RTC_SetDate+0x64>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2101      	movs	r1, #1
 80068f0:	0018      	movs	r0, r3
 80068f2:	f00f ff2b 	bl	801674c <HAL_RTCEx_BKUPRead>
 80068f6:	0003      	movs	r3, r0
 80068f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <RTC_SetDate+0x70>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d010      	beq.n	8006920 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80068fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006938 <RTC_SetDate+0x74>)
 8006900:	4b0e      	ldr	r3, [pc, #56]	@ (800693c <RTC_SetDate+0x78>)
 8006902:	0019      	movs	r1, r3
 8006904:	2003      	movs	r0, #3
 8006906:	f007 fd6d 	bl	800e3e4 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800690a:	f00e fa51 	bl	8014db0 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <RTC_SetDate+0x64>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a08      	ldr	r2, [pc, #32]	@ (8006934 <RTC_SetDate+0x70>)
 8006914:	2101      	movs	r1, #1
 8006916:	0018      	movs	r0, r3
 8006918:	f00f ff00 	bl	801671c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800691c:	f00e fa56 	bl	8014dcc <HAL_PWR_DisableBkUpAccess>
    }
}
 8006920:	46c0      	nop			@ (mov r8, r8)
 8006922:	46bd      	mov	sp, r7
 8006924:	b002      	add	sp, #8
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000d68 	.word	0x20000d68
 800692c:	08023cdc 	.word	0x08023cdc
 8006930:	08023cd8 	.word	0x08023cd8
 8006934:	0000bebe 	.word	0x0000bebe
 8006938:	08023cf8 	.word	0x08023cf8
 800693c:	08023c84 	.word	0x08023c84

08006940 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800694a:	250f      	movs	r5, #15
 800694c:	197b      	adds	r3, r7, r5
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006952:	230e      	movs	r3, #14
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800695a:	260c      	movs	r6, #12
 800695c:	19bc      	adds	r4, r7, r6
 800695e:	f006 fdf7 	bl	800d550 <powerCheck>
 8006962:	0003      	movs	r3, r0
 8006964:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006966:	19bb      	adds	r3, r7, r6
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800696e:	197b      	adds	r3, r7, r5
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	197b      	adds	r3, r7, r5
 8006974:	3201      	adds	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006978:	230d      	movs	r3, #13
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e039      	b.n	80069f6 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006982:	4b23      	ldr	r3, [pc, #140]	@ (8006a10 <RTC_GetTime+0xd0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	0018      	movs	r0, r3
 800698c:	f00f fb3a 	bl	8016004 <HAL_RTC_GetTime>
 8006990:	1e03      	subs	r3, r0, #0
 8006992:	d005      	beq.n	80069a0 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006994:	4a1f      	ldr	r2, [pc, #124]	@ (8006a14 <RTC_GetTime+0xd4>)
 8006996:	4b20      	ldr	r3, [pc, #128]	@ (8006a18 <RTC_GetTime+0xd8>)
 8006998:	0019      	movs	r1, r3
 800699a:	2001      	movs	r0, #1
 800699c:	f007 fd22 	bl	800e3e4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80069a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006a10 <RTC_GetTime+0xd0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	0018      	movs	r0, r3
 80069aa:	f00f fc1d 	bl	80161e8 <HAL_RTC_GetDate>
 80069ae:	1e03      	subs	r3, r0, #0
 80069b0:	d005      	beq.n	80069be <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80069b2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a1c <RTC_GetTime+0xdc>)
 80069b4:	4b18      	ldr	r3, [pc, #96]	@ (8006a18 <RTC_GetTime+0xd8>)
 80069b6:	0019      	movs	r1, r3
 80069b8:	2001      	movs	r0, #1
 80069ba:	f007 fd13 	bl	800e3e4 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80069be:	230c      	movs	r3, #12
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d110      	bne.n	80069ea <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	210e      	movs	r1, #14
 80069ce:	187a      	adds	r2, r7, r1
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d018      	beq.n	8006a08 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80069d6:	187b      	adds	r3, r7, r1
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	701a      	strb	r2, [r3, #0]
        t++;
 80069de:	210f      	movs	r1, #15
 80069e0:	187b      	adds	r3, r7, r1
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	187b      	adds	r3, r7, r1
 80069e6:	3201      	adds	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069ea:	210d      	movs	r1, #13
 80069ec:	187b      	adds	r3, r7, r1
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	187b      	adds	r3, r7, r1
 80069f2:	3201      	adds	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	230d      	movs	r3, #13
 80069f8:	18fa      	adds	r2, r7, r3
 80069fa:	230f      	movs	r3, #15
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3bd      	bcc.n	8006982 <RTC_GetTime+0x42>
 8006a06:	e000      	b.n	8006a0a <RTC_GetTime+0xca>
      }
      else {
        return;
 8006a08:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b005      	add	sp, #20
 8006a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a10:	20000d68 	.word	0x20000d68
 8006a14:	08023d10 	.word	0x08023d10
 8006a18:	08023cd8 	.word	0x08023cd8
 8006a1c:	08023d2c 	.word	0x08023d2c

08006a20 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a26:	003a      	movs	r2, r7
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	0011      	movs	r1, r2
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f7ff ff87 	bl	8006940 <RTC_GetTime>
  return currentDate.WeekDay;
 8006a32:	003b      	movs	r3, r7
 8006a34:	781b      	ldrb	r3, [r3, #0]
}
 8006a36:	0018      	movs	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	b006      	add	sp, #24
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a44:	003a      	movs	r2, r7
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	0011      	movs	r1, r2
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff ff78 	bl	8006940 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a50:	1d3a      	adds	r2, r7, #4
 8006a52:	003b      	movs	r3, r7
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f000 f938 	bl	8006ccc <makeTime>
 8006a5c:	0003      	movs	r3, r0
}
 8006a5e:	0018      	movs	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b006      	add	sp, #24
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	b08d      	sub	sp, #52	@ 0x34
 8006a6c:	af04      	add	r7, sp, #16
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a72:	240c      	movs	r4, #12
 8006a74:	193a      	adds	r2, r7, r4
 8006a76:	2508      	movs	r5, #8
 8006a78:	1979      	adds	r1, r7, r5
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f000 f9ef 	bl	8006e60 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a82:	002a      	movs	r2, r5
 8006a84:	18bb      	adds	r3, r7, r2
 8006a86:	789b      	ldrb	r3, [r3, #2]
 8006a88:	001e      	movs	r6, r3
 8006a8a:	18bb      	adds	r3, r7, r2
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	469c      	mov	ip, r3
 8006a90:	18bb      	adds	r3, r7, r2
 8006a92:	78db      	ldrb	r3, [r3, #3]
 8006a94:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a96:	0021      	movs	r1, r4
 8006a98:	187b      	adds	r3, r7, r1
 8006a9a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a9c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aa2:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006aa4:	187b      	adds	r3, r7, r1
 8006aa6:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006aa8:	4906      	ldr	r1, [pc, #24]	@ (8006ac4 <getUTCfromPosixTime+0x5c>)
 8006aaa:	6838      	ldr	r0, [r7, #0]
 8006aac:	9303      	str	r3, [sp, #12]
 8006aae:	9502      	str	r5, [sp, #8]
 8006ab0:	9401      	str	r4, [sp, #4]
 8006ab2:	9200      	str	r2, [sp, #0]
 8006ab4:	4663      	mov	r3, ip
 8006ab6:	0032      	movs	r2, r6
 8006ab8:	f019 f9ee 	bl	801fe98 <siprintf>
}
 8006abc:	46c0      	nop			@ (mov r8, r8)
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b009      	add	sp, #36	@ 0x24
 8006ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac4:	08023d48 	.word	0x08023d48

08006ac8 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006ad0:	4b10      	ldr	r3, [pc, #64]	@ (8006b14 <RTC_SetWakeUpTimer+0x4c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f00f fd85 	bl	80165e4 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006ada:	4b0e      	ldr	r3, [pc, #56]	@ (8006b14 <RTC_SetWakeUpTimer+0x4c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	22ff      	movs	r2, #255	@ 0xff
 8006ae4:	401a      	ands	r2, r3
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b14 <RTC_SetWakeUpTimer+0x4c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	490a      	ldr	r1, [pc, #40]	@ (8006b18 <RTC_SetWakeUpTimer+0x50>)
 8006aee:	430a      	orrs	r2, r1
 8006af0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006af2:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <RTC_SetWakeUpTimer+0x54>)
 8006af4:	2280      	movs	r2, #128	@ 0x80
 8006af6:	0352      	lsls	r2, r2, #13
 8006af8:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006afa:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <RTC_SetWakeUpTimer+0x4c>)
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	2204      	movs	r2, #4
 8006b04:	0019      	movs	r1, r3
 8006b06:	f00f fc95 	bl	8016434 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b002      	add	sp, #8
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			@ (mov r8, r8)
 8006b14:	20000d68 	.word	0x20000d68
 8006b18:	fffffb7f 	.word	0xfffffb7f
 8006b1c:	40010400 	.word	0x40010400

08006b20 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006b24:	4a0c      	ldr	r2, [pc, #48]	@ (8006b58 <Enter_Standby_Mode+0x38>)
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <Enter_Standby_Mode+0x3c>)
 8006b28:	0019      	movs	r1, r3
 8006b2a:	2003      	movs	r0, #3
 8006b2c:	f007 fc5a 	bl	800e3e4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006b30:	2064      	movs	r0, #100	@ 0x64
 8006b32:	f008 f8a7 	bl	800ec84 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b36:	4b0a      	ldr	r3, [pc, #40]	@ (8006b60 <Enter_Standby_Mode+0x40>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f00f fd52 	bl	80165e4 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006b40:	f008 f8c4 	bl	800eccc <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006b44:	f00e f9ae 	bl	8014ea4 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006b48:	f001 fa6e 	bl	8008028 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006b4c:	f008 f8cc 	bl	800ece8 <HAL_ResumeTick>
}
 8006b50:	46c0      	nop			@ (mov r8, r8)
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	08023d9c 	.word	0x08023d9c
 8006b5c:	08023c84 	.word	0x08023c84
 8006b60:	20000d68 	.word	0x20000d68

08006b64 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	0002      	movs	r2, r0
 8006b6c:	1dbb      	adds	r3, r7, #6
 8006b6e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b70:	4b43      	ldr	r3, [pc, #268]	@ (8006c80 <Enter_Stop_Mode+0x11c>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b78:	f002 fac2 	bl	8009100 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b7c:	f7ff fbbe 	bl	80062fc <ReadBatteryVoltage>
 8006b80:	1c03      	adds	r3, r0, #0
 8006b82:	1c18      	adds	r0, r3, #0
 8006b84:	f7fc fc6e 	bl	8003464 <__aeabi_f2d>
 8006b88:	0002      	movs	r2, r0
 8006b8a:	000b      	movs	r3, r1
 8006b8c:	483d      	ldr	r0, [pc, #244]	@ (8006c84 <Enter_Stop_Mode+0x120>)
 8006b8e:	493e      	ldr	r1, [pc, #248]	@ (8006c88 <Enter_Stop_Mode+0x124>)
 8006b90:	9200      	str	r2, [sp, #0]
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	0002      	movs	r2, r0
 8006b96:	2002      	movs	r0, #2
 8006b98:	f007 fc24 	bl	800e3e4 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006b9c:	1dbb      	adds	r3, r7, #6
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8006c8c <Enter_Stop_Mode+0x128>)
 8006ba2:	493b      	ldr	r1, [pc, #236]	@ (8006c90 <Enter_Stop_Mode+0x12c>)
 8006ba4:	2003      	movs	r0, #3
 8006ba6:	f007 fc1d 	bl	800e3e4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006baa:	f7ff ff48 	bl	8006a3e <getPosixTime>
 8006bae:	0002      	movs	r2, r0
 8006bb0:	1dbb      	adds	r3, r7, #6
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	18d3      	adds	r3, r2, r3
 8006bb6:	4a37      	ldr	r2, [pc, #220]	@ (8006c94 <Enter_Stop_Mode+0x130>)
 8006bb8:	0011      	movs	r1, r2
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7ff ff54 	bl	8006a68 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006bc0:	4b34      	ldr	r3, [pc, #208]	@ (8006c94 <Enter_Stop_Mode+0x130>)
 8006bc2:	4a35      	ldr	r2, [pc, #212]	@ (8006c98 <Enter_Stop_Mode+0x134>)
 8006bc4:	4930      	ldr	r1, [pc, #192]	@ (8006c88 <Enter_Stop_Mode+0x124>)
 8006bc6:	2002      	movs	r0, #2
 8006bc8:	f007 fc0c 	bl	800e3e4 <CreateLine>
  HAL_Delay(100);
 8006bcc:	2064      	movs	r0, #100	@ 0x64
 8006bce:	f008 f859 	bl	800ec84 <HAL_Delay>
  HAL_SuspendTick();
 8006bd2:	f008 f87b 	bl	800eccc <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006bd6:	1dbb      	adds	r3, r7, #6
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f7ff ff74 	bl	8006ac8 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006be0:	2101      	movs	r1, #1
 8006be2:	2001      	movs	r0, #1
 8006be4:	f00e f902 	bl	8014dec <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006be8:	f001 fa1e 	bl	8008028 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006bec:	1dbb      	adds	r3, r7, #6
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f002 fa13 	bl	800901c <sen5x_enable>
 8006bf6:	1e03      	subs	r3, r0, #0
 8006bf8:	d01c      	beq.n	8006c34 <Enter_Stop_Mode+0xd0>
    showTime();
 8006bfa:	f7ff fc65 	bl	80064c8 <showTime>
    set_light_on_state();
 8006bfe:	f002 ff07 	bl	8009a10 <set_light_on_state>
    if (!userToggle) {
 8006c02:	4b26      	ldr	r3, [pc, #152]	@ (8006c9c <Enter_Stop_Mode+0x138>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2201      	movs	r2, #1
 8006c08:	4053      	eors	r3, r2
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d011      	beq.n	8006c34 <Enter_Stop_Mode+0xd0>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006c10:	201c      	movs	r0, #28
 8006c12:	f7ff ff59 	bl	8006ac8 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006c16:	4a1d      	ldr	r2, [pc, #116]	@ (8006c8c <Enter_Stop_Mode+0x128>)
 8006c18:	491d      	ldr	r1, [pc, #116]	@ (8006c90 <Enter_Stop_Mode+0x12c>)
 8006c1a:	231c      	movs	r3, #28
 8006c1c:	2003      	movs	r0, #3
 8006c1e:	f007 fbe1 	bl	800e3e4 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c22:	2101      	movs	r1, #1
 8006c24:	2001      	movs	r0, #1
 8006c26:	f00e f8e1 	bl	8014dec <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006c2a:	f001 f9fd 	bl	8008028 <SystemClock_Config>
//      setsen5xReadTimer(2000);
      setsen5xReadTimer(0);
 8006c2e:	2000      	movs	r0, #0
 8006c30:	f002 f9d2 	bl	8008fd8 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c34:	f008 f858 	bl	800ece8 <HAL_ResumeTick>
  showTime();
 8006c38:	f7ff fc46 	bl	80064c8 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c3c:	f001 fe7a 	bl	8008934 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c40:	f004 fd1a 	bl	800b678 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c44:	2000      	movs	r0, #0
 8006c46:	f002 f9d9 	bl	8008ffc <setsen5xSamplecounter>
//  setESPTimeStamp(3000);
  setESPTimeStamp(2500);
 8006c4a:	4b15      	ldr	r3, [pc, #84]	@ (8006ca0 <Enter_Stop_Mode+0x13c>)
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7fc fdaf 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c52:	2000      	movs	r0, #0
 8006c54:	f004 fcfe 	bl	800b654 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f007 fd87 	bl	800e76c <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f001 fe56 	bl	8008910 <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <Enter_Stop_Mode+0x140>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006c6a:	f008 f801 	bl	800ec70 <HAL_GetTick>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca8 <Enter_Stop_Mode+0x144>)
 8006c72:	189a      	adds	r2, r3, r2
 8006c74:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <Enter_Stop_Mode+0x148>)
 8006c76:	601a      	str	r2, [r3, #0]
}
 8006c78:	46c0      	nop			@ (mov r8, r8)
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b002      	add	sp, #8
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20001059 	.word	0x20001059
 8006c84:	08023dc0 	.word	0x08023dc0
 8006c88:	08023dd8 	.word	0x08023dd8
 8006c8c:	08023ddc 	.word	0x08023ddc
 8006c90:	08023c84 	.word	0x08023c84
 8006c94:	20000d70 	.word	0x20000d70
 8006c98:	08023e00 	.word	0x08023e00
 8006c9c:	20001ff2 	.word	0x20001ff2
 8006ca0:	000009c4 	.word	0x000009c4
 8006ca4:	20000550 	.word	0x20000550
 8006ca8:	000008fc 	.word	0x000008fc
 8006cac:	20000fb8 	.word	0x20000fb8

08006cb0 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006cb8:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <InitClock+0x18>)
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	601a      	str	r2, [r3, #0]
}
 8006cbe:	46c0      	nop			@ (mov r8, r8)
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	46c0      	nop			@ (mov r8, r8)
 8006cc8:	20000d68 	.word	0x20000d68

08006ccc <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	78db      	ldrb	r3, [r3, #3]
 8006cda:	001a      	movs	r2, r3
 8006cdc:	0013      	movs	r3, r2
 8006cde:	025b      	lsls	r3, r3, #9
 8006ce0:	189b      	adds	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	189b      	adds	r3, r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	011a      	lsls	r2, r3, #4
 8006cec:	1ad2      	subs	r2, r2, r3
 8006cee:	01d3      	lsls	r3, r2, #7
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e028      	b.n	8006d4c <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4a53      	ldr	r2, [pc, #332]	@ (8006e4c <makeTime+0x180>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	db21      	blt.n	8006d46 <makeTime+0x7a>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a52      	ldr	r2, [pc, #328]	@ (8006e50 <makeTime+0x184>)
 8006d06:	4694      	mov	ip, r2
 8006d08:	4463      	add	r3, ip
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d119      	bne.n	8006d46 <makeTime+0x7a>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a4e      	ldr	r2, [pc, #312]	@ (8006e50 <makeTime+0x184>)
 8006d16:	4694      	mov	ip, r2
 8006d18:	4463      	add	r3, ip
 8006d1a:	2164      	movs	r1, #100	@ 0x64
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7f9 fbb1 	bl	8000484 <__aeabi_idivmod>
 8006d22:	1e0b      	subs	r3, r1, #0
 8006d24:	d10a      	bne.n	8006d3c <makeTime+0x70>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a49      	ldr	r2, [pc, #292]	@ (8006e50 <makeTime+0x184>)
 8006d2a:	4694      	mov	ip, r2
 8006d2c:	4463      	add	r3, ip
 8006d2e:	22c8      	movs	r2, #200	@ 0xc8
 8006d30:	0051      	lsls	r1, r2, #1
 8006d32:	0018      	movs	r0, r3
 8006d34:	f7f9 fba6 	bl	8000484 <__aeabi_idivmod>
 8006d38:	1e0b      	subs	r3, r1, #0
 8006d3a:	d104      	bne.n	8006d46 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4a45      	ldr	r2, [pc, #276]	@ (8006e54 <makeTime+0x188>)
 8006d40:	4694      	mov	ip, r2
 8006d42:	4463      	add	r3, ip
 8006d44:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	78db      	ldrb	r3, [r3, #3]
 8006d50:	001a      	movs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	dbd0      	blt.n	8006cfa <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d58:	2301      	movs	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e03c      	b.n	8006dd8 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d125      	bne.n	8006db0 <makeTime+0xe4>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	78db      	ldrb	r3, [r3, #3]
 8006d68:	4a39      	ldr	r2, [pc, #228]	@ (8006e50 <makeTime+0x184>)
 8006d6a:	4694      	mov	ip, r2
 8006d6c:	4463      	add	r3, ip
 8006d6e:	001a      	movs	r2, r3
 8006d70:	2303      	movs	r3, #3
 8006d72:	4013      	ands	r3, r2
 8006d74:	d11c      	bne.n	8006db0 <makeTime+0xe4>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	78db      	ldrb	r3, [r3, #3]
 8006d7a:	4a35      	ldr	r2, [pc, #212]	@ (8006e50 <makeTime+0x184>)
 8006d7c:	4694      	mov	ip, r2
 8006d7e:	4463      	add	r3, ip
 8006d80:	2164      	movs	r1, #100	@ 0x64
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7f9 fb7e 	bl	8000484 <__aeabi_idivmod>
 8006d88:	1e0b      	subs	r3, r1, #0
 8006d8a:	d10b      	bne.n	8006da4 <makeTime+0xd8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	78db      	ldrb	r3, [r3, #3]
 8006d90:	4a2f      	ldr	r2, [pc, #188]	@ (8006e50 <makeTime+0x184>)
 8006d92:	4694      	mov	ip, r2
 8006d94:	4463      	add	r3, ip
 8006d96:	22c8      	movs	r2, #200	@ 0xc8
 8006d98:	0051      	lsls	r1, r2, #1
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7f9 fb72 	bl	8000484 <__aeabi_idivmod>
 8006da0:	1e0b      	subs	r3, r1, #0
 8006da2:	d105      	bne.n	8006db0 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4a2c      	ldr	r2, [pc, #176]	@ (8006e58 <makeTime+0x18c>)
 8006da8:	4694      	mov	ip, r2
 8006daa:	4463      	add	r3, ip
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	e010      	b.n	8006dd2 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	4a29      	ldr	r2, [pc, #164]	@ (8006e5c <makeTime+0x190>)
 8006db6:	5cd3      	ldrb	r3, [r2, r3]
 8006db8:	001a      	movs	r2, r3
 8006dba:	0013      	movs	r3, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	189b      	adds	r3, r3, r2
 8006dc0:	011a      	lsls	r2, r3, #4
 8006dc2:	1ad2      	subs	r2, r2, r3
 8006dc4:	0113      	lsls	r3, r2, #4
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	01db      	lsls	r3, r3, #7
 8006dca:	001a      	movs	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	001a      	movs	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4293      	cmp	r3, r2
 8006de2:	dbbc      	blt.n	8006d5e <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	789b      	ldrb	r3, [r3, #2]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	001a      	movs	r2, r3
 8006dec:	0013      	movs	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	189b      	adds	r3, r3, r2
 8006df2:	011a      	lsls	r2, r3, #4
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	0113      	lsls	r3, r2, #4
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	001a      	movs	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	189b      	adds	r3, r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	001a      	movs	r2, r3
 8006e0a:	0013      	movs	r3, r2
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	011a      	lsls	r2, r3, #4
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	0113      	lsls	r3, r2, #4
 8006e16:	001a      	movs	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	001a      	movs	r2, r3
 8006e24:	0013      	movs	r3, r2
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	001a      	movs	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	189b      	adds	r3, r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	789b      	ldrb	r3, [r3, #2]
 8006e38:	001a      	movs	r2, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	189b      	adds	r3, r3, r2
 8006e3e:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e40:	68bb      	ldr	r3, [r7, #8]
}
 8006e42:	0018      	movs	r0, r3
 8006e44:	46bd      	mov	sp, r7
 8006e46:	b004      	add	sp, #16
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	46c0      	nop			@ (mov r8, r8)
 8006e4c:	fffff84f 	.word	0xfffff84f
 8006e50:	000007b2 	.word	0x000007b2
 8006e54:	00015180 	.word	0x00015180
 8006e58:	00263b80 	.word	0x00263b80
 8006e5c:	0802534c 	.word	0x0802534c

08006e60 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e60:	b590      	push	{r4, r7, lr}
 8006e62:	b089      	sub	sp, #36	@ 0x24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	213c      	movs	r1, #60	@ 0x3c
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7f9 fa1b 	bl	80002b0 <__aeabi_uidivmod>
 8006e7a:	000b      	movs	r3, r1
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	213c      	movs	r1, #60	@ 0x3c
 8006e86:	0018      	movs	r0, r3
 8006e88:	f7f9 f98c 	bl	80001a4 <__udivsi3>
 8006e8c:	0003      	movs	r3, r0
 8006e8e:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	213c      	movs	r1, #60	@ 0x3c
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7f9 fa0b 	bl	80002b0 <__aeabi_uidivmod>
 8006e9a:	000b      	movs	r3, r1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	213c      	movs	r1, #60	@ 0x3c
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7f9 f97c 	bl	80001a4 <__udivsi3>
 8006eac:	0003      	movs	r3, r0
 8006eae:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2118      	movs	r1, #24
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f7f9 f9fb 	bl	80002b0 <__aeabi_uidivmod>
 8006eba:	000b      	movs	r3, r1
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2118      	movs	r1, #24
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7f9 f96c 	bl	80001a4 <__udivsi3>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	2107      	movs	r1, #7
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f7f9 f9ea 	bl	80002b0 <__aeabi_uidivmod>
 8006edc:	000b      	movs	r3, r1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006ee8:	231f      	movs	r3, #31
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ef4:	e005      	b.n	8006f02 <breakPosixTime+0xa2>
    year++;
 8006ef6:	211f      	movs	r1, #31
 8006ef8:	187b      	adds	r3, r7, r1
 8006efa:	781a      	ldrb	r2, [r3, #0]
 8006efc:	187b      	adds	r3, r7, r1
 8006efe:	3201      	adds	r2, #1
 8006f00:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006f02:	241f      	movs	r4, #31
 8006f04:	193b      	adds	r3, r7, r4
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	4a64      	ldr	r2, [pc, #400]	@ (800709c <breakPosixTime+0x23c>)
 8006f0a:	4694      	mov	ip, r2
 8006f0c:	4463      	add	r3, ip
 8006f0e:	001a      	movs	r2, r3
 8006f10:	2303      	movs	r3, #3
 8006f12:	4013      	ands	r3, r2
 8006f14:	d119      	bne.n	8006f4a <breakPosixTime+0xea>
 8006f16:	193b      	adds	r3, r7, r4
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	4a60      	ldr	r2, [pc, #384]	@ (800709c <breakPosixTime+0x23c>)
 8006f1c:	4694      	mov	ip, r2
 8006f1e:	4463      	add	r3, ip
 8006f20:	2164      	movs	r1, #100	@ 0x64
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7f9 faae 	bl	8000484 <__aeabi_idivmod>
 8006f28:	1e0b      	subs	r3, r1, #0
 8006f2a:	d10b      	bne.n	8006f44 <breakPosixTime+0xe4>
 8006f2c:	193b      	adds	r3, r7, r4
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	4a5a      	ldr	r2, [pc, #360]	@ (800709c <breakPosixTime+0x23c>)
 8006f32:	4694      	mov	ip, r2
 8006f34:	4463      	add	r3, ip
 8006f36:	22c8      	movs	r2, #200	@ 0xc8
 8006f38:	0051      	lsls	r1, r2, #1
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7f9 faa2 	bl	8000484 <__aeabi_idivmod>
 8006f40:	1e0b      	subs	r3, r1, #0
 8006f42:	d102      	bne.n	8006f4a <breakPosixTime+0xea>
 8006f44:	23b7      	movs	r3, #183	@ 0xb7
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	e001      	b.n	8006f4e <breakPosixTime+0xee>
 8006f4a:	236e      	movs	r3, #110	@ 0x6e
 8006f4c:	33ff      	adds	r3, #255	@ 0xff
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	18d3      	adds	r3, r2, r3
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d9cc      	bls.n	8006ef6 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	241f      	movs	r4, #31
 8006f60:	193a      	adds	r2, r7, r4
 8006f62:	7812      	ldrb	r2, [r2, #0]
 8006f64:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f66:	193b      	adds	r3, r7, r4
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800709c <breakPosixTime+0x23c>)
 8006f6c:	4694      	mov	ip, r2
 8006f6e:	4463      	add	r3, ip
 8006f70:	001a      	movs	r2, r3
 8006f72:	2303      	movs	r3, #3
 8006f74:	4013      	ands	r3, r2
 8006f76:	d119      	bne.n	8006fac <breakPosixTime+0x14c>
 8006f78:	193b      	adds	r3, r7, r4
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4a47      	ldr	r2, [pc, #284]	@ (800709c <breakPosixTime+0x23c>)
 8006f7e:	4694      	mov	ip, r2
 8006f80:	4463      	add	r3, ip
 8006f82:	2164      	movs	r1, #100	@ 0x64
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7f9 fa7d 	bl	8000484 <__aeabi_idivmod>
 8006f8a:	1e0b      	subs	r3, r1, #0
 8006f8c:	d10b      	bne.n	8006fa6 <breakPosixTime+0x146>
 8006f8e:	193b      	adds	r3, r7, r4
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	4a42      	ldr	r2, [pc, #264]	@ (800709c <breakPosixTime+0x23c>)
 8006f94:	4694      	mov	ip, r2
 8006f96:	4463      	add	r3, ip
 8006f98:	22c8      	movs	r2, #200	@ 0xc8
 8006f9a:	0051      	lsls	r1, r2, #1
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7f9 fa71 	bl	8000484 <__aeabi_idivmod>
 8006fa2:	1e0b      	subs	r3, r1, #0
 8006fa4:	d102      	bne.n	8006fac <breakPosixTime+0x14c>
 8006fa6:	23b7      	movs	r3, #183	@ 0xb7
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	e001      	b.n	8006fb0 <breakPosixTime+0x150>
 8006fac:	236e      	movs	r3, #110	@ 0x6e
 8006fae:	33ff      	adds	r3, #255	@ 0xff
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	61bb      	str	r3, [r7, #24]

  days=0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]
  month=0;
 8006fc2:	211e      	movs	r1, #30
 8006fc4:	187b      	adds	r3, r7, r1
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006fca:	231d      	movs	r3, #29
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e048      	b.n	800706c <breakPosixTime+0x20c>
    if (month==1) { // february
 8006fda:	231e      	movs	r3, #30
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d12a      	bne.n	800703a <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006fe4:	241f      	movs	r4, #31
 8006fe6:	193b      	adds	r3, r7, r4
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	4a2c      	ldr	r2, [pc, #176]	@ (800709c <breakPosixTime+0x23c>)
 8006fec:	4694      	mov	ip, r2
 8006fee:	4463      	add	r3, ip
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d11b      	bne.n	8007030 <breakPosixTime+0x1d0>
 8006ff8:	193b      	adds	r3, r7, r4
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	4a27      	ldr	r2, [pc, #156]	@ (800709c <breakPosixTime+0x23c>)
 8006ffe:	4694      	mov	ip, r2
 8007000:	4463      	add	r3, ip
 8007002:	2164      	movs	r1, #100	@ 0x64
 8007004:	0018      	movs	r0, r3
 8007006:	f7f9 fa3d 	bl	8000484 <__aeabi_idivmod>
 800700a:	1e0b      	subs	r3, r1, #0
 800700c:	d10b      	bne.n	8007026 <breakPosixTime+0x1c6>
 800700e:	193b      	adds	r3, r7, r4
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	4a22      	ldr	r2, [pc, #136]	@ (800709c <breakPosixTime+0x23c>)
 8007014:	4694      	mov	ip, r2
 8007016:	4463      	add	r3, ip
 8007018:	22c8      	movs	r2, #200	@ 0xc8
 800701a:	0051      	lsls	r1, r2, #1
 800701c:	0018      	movs	r0, r3
 800701e:	f7f9 fa31 	bl	8000484 <__aeabi_idivmod>
 8007022:	1e0b      	subs	r3, r1, #0
 8007024:	d104      	bne.n	8007030 <breakPosixTime+0x1d0>
        monthLength=29;
 8007026:	231d      	movs	r3, #29
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	221d      	movs	r2, #29
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	e00c      	b.n	800704a <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007030:	231d      	movs	r3, #29
 8007032:	18fb      	adds	r3, r7, r3
 8007034:	221c      	movs	r2, #28
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	e007      	b.n	800704a <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800703a:	231e      	movs	r3, #30
 800703c:	18fb      	adds	r3, r7, r3
 800703e:	781a      	ldrb	r2, [r3, #0]
 8007040:	231d      	movs	r3, #29
 8007042:	18fb      	adds	r3, r7, r3
 8007044:	4916      	ldr	r1, [pc, #88]	@ (80070a0 <breakPosixTime+0x240>)
 8007046:	5c8a      	ldrb	r2, [r1, r2]
 8007048:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800704a:	211d      	movs	r1, #29
 800704c:	187b      	adds	r3, r7, r1
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	429a      	cmp	r2, r3
 8007054:	d310      	bcc.n	8007078 <breakPosixTime+0x218>
      time -= monthLength;
 8007056:	187b      	adds	r3, r7, r1
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007060:	211e      	movs	r1, #30
 8007062:	187b      	adds	r3, r7, r1
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	187b      	adds	r3, r7, r1
 8007068:	3201      	adds	r2, #1
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	231e      	movs	r3, #30
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b0b      	cmp	r3, #11
 8007074:	d9b1      	bls.n	8006fda <breakPosixTime+0x17a>
 8007076:	e000      	b.n	800707a <breakPosixTime+0x21a>
    } else {
        break;
 8007078:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800707a:	231e      	movs	r3, #30
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	b2da      	uxtb	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	3301      	adds	r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8007094:	46c0      	nop			@ (mov r8, r8)
 8007096:	46bd      	mov	sp, r7
 8007098:	b009      	add	sp, #36	@ 0x24
 800709a:	bd90      	pop	{r4, r7, pc}
 800709c:	000007b2 	.word	0x000007b2
 80070a0:	0802534c 	.word	0x0802534c

080070a4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070aa:	003b      	movs	r3, r7
 80070ac:	0018      	movs	r0, r3
 80070ae:	2308      	movs	r3, #8
 80070b0:	001a      	movs	r2, r3
 80070b2:	2100      	movs	r1, #0
 80070b4:	f019 f834 	bl	8020120 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80070b8:	4b30      	ldr	r3, [pc, #192]	@ (800717c <MX_ADC_Init+0xd8>)
 80070ba:	4a31      	ldr	r2, [pc, #196]	@ (8007180 <MX_ADC_Init+0xdc>)
 80070bc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80070be:	4b2f      	ldr	r3, [pc, #188]	@ (800717c <MX_ADC_Init+0xd8>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80070c4:	4b2d      	ldr	r3, [pc, #180]	@ (800717c <MX_ADC_Init+0xd8>)
 80070c6:	22c0      	movs	r2, #192	@ 0xc0
 80070c8:	0612      	lsls	r2, r2, #24
 80070ca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80070cc:	4b2b      	ldr	r3, [pc, #172]	@ (800717c <MX_ADC_Init+0xd8>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80070d2:	4b2a      	ldr	r3, [pc, #168]	@ (800717c <MX_ADC_Init+0xd8>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80070d8:	4b28      	ldr	r3, [pc, #160]	@ (800717c <MX_ADC_Init+0xd8>)
 80070da:	2201      	movs	r2, #1
 80070dc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070de:	4b27      	ldr	r3, [pc, #156]	@ (800717c <MX_ADC_Init+0xd8>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070e4:	4b25      	ldr	r3, [pc, #148]	@ (800717c <MX_ADC_Init+0xd8>)
 80070e6:	2220      	movs	r2, #32
 80070e8:	2100      	movs	r1, #0
 80070ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80070ec:	4b23      	ldr	r3, [pc, #140]	@ (800717c <MX_ADC_Init+0xd8>)
 80070ee:	2221      	movs	r2, #33	@ 0x21
 80070f0:	2101      	movs	r1, #1
 80070f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070f4:	4b21      	ldr	r3, [pc, #132]	@ (800717c <MX_ADC_Init+0xd8>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070fa:	4b20      	ldr	r3, [pc, #128]	@ (800717c <MX_ADC_Init+0xd8>)
 80070fc:	22c2      	movs	r2, #194	@ 0xc2
 80070fe:	32ff      	adds	r2, #255	@ 0xff
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007102:	4b1e      	ldr	r3, [pc, #120]	@ (800717c <MX_ADC_Init+0xd8>)
 8007104:	222c      	movs	r2, #44	@ 0x2c
 8007106:	2100      	movs	r1, #0
 8007108:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800710a:	4b1c      	ldr	r3, [pc, #112]	@ (800717c <MX_ADC_Init+0xd8>)
 800710c:	2204      	movs	r2, #4
 800710e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007110:	4b1a      	ldr	r3, [pc, #104]	@ (800717c <MX_ADC_Init+0xd8>)
 8007112:	2200      	movs	r2, #0
 8007114:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007116:	4b19      	ldr	r3, [pc, #100]	@ (800717c <MX_ADC_Init+0xd8>)
 8007118:	2200      	movs	r2, #0
 800711a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <MX_ADC_Init+0xd8>)
 800711e:	2200      	movs	r2, #0
 8007120:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007122:	4b16      	ldr	r3, [pc, #88]	@ (800717c <MX_ADC_Init+0xd8>)
 8007124:	2200      	movs	r2, #0
 8007126:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007128:	4b14      	ldr	r3, [pc, #80]	@ (800717c <MX_ADC_Init+0xd8>)
 800712a:	0018      	movs	r0, r3
 800712c:	f007 fe08 	bl	800ed40 <HAL_ADC_Init>
 8007130:	1e03      	subs	r3, r0, #0
 8007132:	d001      	beq.n	8007138 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007134:	f001 f8be 	bl	80082b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007138:	003b      	movs	r3, r7
 800713a:	4a12      	ldr	r2, [pc, #72]	@ (8007184 <MX_ADC_Init+0xe0>)
 800713c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800713e:	003b      	movs	r3, r7
 8007140:	2280      	movs	r2, #128	@ 0x80
 8007142:	0152      	lsls	r2, r2, #5
 8007144:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007146:	003a      	movs	r2, r7
 8007148:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <MX_ADC_Init+0xd8>)
 800714a:	0011      	movs	r1, r2
 800714c:	0018      	movs	r0, r3
 800714e:	f008 f867 	bl	800f220 <HAL_ADC_ConfigChannel>
 8007152:	1e03      	subs	r3, r0, #0
 8007154:	d001      	beq.n	800715a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007156:	f001 f8ad 	bl	80082b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800715a:	003b      	movs	r3, r7
 800715c:	4a0a      	ldr	r2, [pc, #40]	@ (8007188 <MX_ADC_Init+0xe4>)
 800715e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007160:	003a      	movs	r2, r7
 8007162:	4b06      	ldr	r3, [pc, #24]	@ (800717c <MX_ADC_Init+0xd8>)
 8007164:	0011      	movs	r1, r2
 8007166:	0018      	movs	r0, r3
 8007168:	f008 f85a 	bl	800f220 <HAL_ADC_ConfigChannel>
 800716c:	1e03      	subs	r3, r0, #0
 800716e:	d001      	beq.n	8007174 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007170:	f001 f8a0 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007174:	46c0      	nop			@ (mov r8, r8)
 8007176:	46bd      	mov	sp, r7
 8007178:	b002      	add	sp, #8
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000d88 	.word	0x20000d88
 8007180:	40012400 	.word	0x40012400
 8007184:	38004000 	.word	0x38004000
 8007188:	3c008000 	.word	0x3c008000

0800718c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b089      	sub	sp, #36	@ 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007194:	240c      	movs	r4, #12
 8007196:	193b      	adds	r3, r7, r4
 8007198:	0018      	movs	r0, r3
 800719a:	2314      	movs	r3, #20
 800719c:	001a      	movs	r2, r3
 800719e:	2100      	movs	r1, #0
 80071a0:	f018 ffbe 	bl	8020120 <memset>
  if(adcHandle->Instance==ADC1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a14      	ldr	r2, [pc, #80]	@ (80071fc <HAL_ADC_MspInit+0x70>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d121      	bne.n	80071f2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80071ae:	4b14      	ldr	r3, [pc, #80]	@ (8007200 <HAL_ADC_MspInit+0x74>)
 80071b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071b2:	4b13      	ldr	r3, [pc, #76]	@ (8007200 <HAL_ADC_MspInit+0x74>)
 80071b4:	2180      	movs	r1, #128	@ 0x80
 80071b6:	0089      	lsls	r1, r1, #2
 80071b8:	430a      	orrs	r2, r1
 80071ba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071bc:	4b10      	ldr	r3, [pc, #64]	@ (8007200 <HAL_ADC_MspInit+0x74>)
 80071be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <HAL_ADC_MspInit+0x74>)
 80071c2:	2104      	movs	r1, #4
 80071c4:	430a      	orrs	r2, r1
 80071c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007200 <HAL_ADC_MspInit+0x74>)
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	2204      	movs	r2, #4
 80071ce:	4013      	ands	r3, r2
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80071d4:	193b      	adds	r3, r7, r4
 80071d6:	2230      	movs	r2, #48	@ 0x30
 80071d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071da:	193b      	adds	r3, r7, r4
 80071dc:	2203      	movs	r2, #3
 80071de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e0:	193b      	adds	r3, r7, r4
 80071e2:	2200      	movs	r2, #0
 80071e4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071e6:	193b      	adds	r3, r7, r4
 80071e8:	4a06      	ldr	r2, [pc, #24]	@ (8007204 <HAL_ADC_MspInit+0x78>)
 80071ea:	0019      	movs	r1, r3
 80071ec:	0010      	movs	r0, r2
 80071ee:	f008 fe35 	bl	800fe5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80071f2:	46c0      	nop			@ (mov r8, r8)
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b009      	add	sp, #36	@ 0x24
 80071f8:	bd90      	pop	{r4, r7, pc}
 80071fa:	46c0      	nop			@ (mov r8, r8)
 80071fc:	40012400 	.word	0x40012400
 8007200:	40021000 	.word	0x40021000
 8007204:	50000800 	.word	0x50000800

08007208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800720e:	4b10      	ldr	r3, [pc, #64]	@ (8007250 <MX_DMA_Init+0x48>)
 8007210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007212:	4b0f      	ldr	r3, [pc, #60]	@ (8007250 <MX_DMA_Init+0x48>)
 8007214:	2101      	movs	r1, #1
 8007216:	430a      	orrs	r2, r1
 8007218:	631a      	str	r2, [r3, #48]	@ 0x30
 800721a:	4b0d      	ldr	r3, [pc, #52]	@ (8007250 <MX_DMA_Init+0x48>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721e:	2201      	movs	r2, #1
 8007220:	4013      	ands	r3, r2
 8007222:	607b      	str	r3, [r7, #4]
 8007224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007226:	2200      	movs	r2, #0
 8007228:	2100      	movs	r1, #0
 800722a:	200a      	movs	r0, #10
 800722c:	f008 f9c4 	bl	800f5b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007230:	200a      	movs	r0, #10
 8007232:	f008 f9d6 	bl	800f5e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007236:	2200      	movs	r2, #0
 8007238:	2103      	movs	r1, #3
 800723a:	200b      	movs	r0, #11
 800723c:	f008 f9bc 	bl	800f5b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007240:	200b      	movs	r0, #11
 8007242:	f008 f9ce 	bl	800f5e2 <HAL_NVIC_EnableIRQ>

}
 8007246:	46c0      	nop			@ (mov r8, r8)
 8007248:	46bd      	mov	sp, r7
 800724a:	b002      	add	sp, #8
 800724c:	bd80      	pop	{r7, pc}
 800724e:	46c0      	nop			@ (mov r8, r8)
 8007250:	40021000 	.word	0x40021000

08007254 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b7f      	cmp	r3, #127	@ 0x7f
 8007264:	d901      	bls.n	800726a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8007266:	237f      	movs	r3, #127	@ 0x7f
 8007268:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800726a:	2017      	movs	r0, #23
 800726c:	183b      	adds	r3, r7, r0
 800726e:	490d      	ldr	r1, [pc, #52]	@ (80072a4 <accessLUT10log10+0x50>)
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	188a      	adds	r2, r1, r2
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007278:	0001      	movs	r1, r0
 800727a:	187b      	adds	r3, r7, r1
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2206      	movs	r2, #6
 8007280:	4113      	asrs	r3, r2
 8007282:	001a      	movs	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007288:	187b      	adds	r3, r7, r1
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2106      	movs	r1, #6
 8007292:	408b      	lsls	r3, r1
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	601a      	str	r2, [r3, #0]
}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	b006      	add	sp, #24
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	08025358 	.word	0x08025358

080072a8 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80072a8:	b5b0      	push	{r4, r5, r7, lr}
 80072aa:	b090      	sub	sp, #64	@ 0x40
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6138      	str	r0, [r7, #16]
 80072b0:	6179      	str	r1, [r7, #20]
 80072b2:	60fa      	str	r2, [r7, #12]
 80072b4:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80072b6:	2308      	movs	r3, #8
 80072b8:	001a      	movs	r2, r3
 80072ba:	3a20      	subs	r2, #32
 80072bc:	2a00      	cmp	r2, #0
 80072be:	db03      	blt.n	80072c8 <efficient10log10+0x20>
 80072c0:	2101      	movs	r1, #1
 80072c2:	4091      	lsls	r1, r2
 80072c4:	000d      	movs	r5, r1
 80072c6:	e008      	b.n	80072da <efficient10log10+0x32>
 80072c8:	2220      	movs	r2, #32
 80072ca:	1ad2      	subs	r2, r2, r3
 80072cc:	2101      	movs	r1, #1
 80072ce:	40d1      	lsrs	r1, r2
 80072d0:	000a      	movs	r2, r1
 80072d2:	2100      	movs	r1, #0
 80072d4:	4099      	lsls	r1, r3
 80072d6:	000d      	movs	r5, r1
 80072d8:	4315      	orrs	r5, r2
 80072da:	2201      	movs	r2, #1
 80072dc:	409a      	lsls	r2, r3
 80072de:	0014      	movs	r4, r2
 80072e0:	2201      	movs	r2, #1
 80072e2:	4252      	negs	r2, r2
 80072e4:	17d3      	asrs	r3, r2, #31
 80072e6:	1912      	adds	r2, r2, r4
 80072e8:	416b      	adcs	r3, r5
 80072ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80072ee:	2336      	movs	r3, #54	@ 0x36
 80072f0:	2208      	movs	r2, #8
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	19db      	adds	r3, r3, r7
 80072f6:	2200      	movs	r2, #0
 80072f8:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80072fa:	e017      	b.n	800732c <efficient10log10+0x84>
    {
        P = P >> 1;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	0852      	lsrs	r2, r2, #1
 8007304:	603a      	str	r2, [r7, #0]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	431a      	orrs	r2, r3
 800730a:	603a      	str	r2, [r7, #0]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	085b      	lsrs	r3, r3, #1
 8007310:	607b      	str	r3, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	687c      	ldr	r4, [r7, #4]
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	617c      	str	r4, [r7, #20]
        bShift++;
 800731a:	2136      	movs	r1, #54	@ 0x36
 800731c:	2008      	movs	r0, #8
 800731e:	180b      	adds	r3, r1, r0
 8007320:	19db      	adds	r3, r3, r7
 8007322:	881a      	ldrh	r2, [r3, #0]
 8007324:	180b      	adds	r3, r1, r0
 8007326:	19db      	adds	r3, r3, r7
 8007328:	3201      	adds	r2, #1
 800732a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007330:	429a      	cmp	r2, r3
 8007332:	d8e3      	bhi.n	80072fc <efficient10log10+0x54>
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007338:	429a      	cmp	r2, r3
 800733a:	d103      	bne.n	8007344 <efficient10log10+0x9c>
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	429a      	cmp	r2, r3
 8007342:	d8db      	bhi.n	80072fc <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	2308      	movs	r3, #8
 8007348:	3b01      	subs	r3, #1
 800734a:	2101      	movs	r1, #1
 800734c:	4099      	lsls	r1, r3
 800734e:	000b      	movs	r3, r1
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800735c:	231c      	movs	r3, #28
 800735e:	2408      	movs	r4, #8
 8007360:	191b      	adds	r3, r3, r4
 8007362:	19da      	adds	r2, r3, r7
 8007364:	2320      	movs	r3, #32
 8007366:	191b      	adds	r3, r3, r4
 8007368:	19d9      	adds	r1, r3, r7
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	0018      	movs	r0, r3
 800736e:	f7ff ff71 	bl	8007254 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007372:	2215      	movs	r2, #21
 8007374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007376:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007378:	2036      	movs	r0, #54	@ 0x36
 800737a:	1902      	adds	r2, r0, r4
 800737c:	19d2      	adds	r2, r2, r7
 800737e:	8812      	ldrh	r2, [r2, #0]
 8007380:	2103      	movs	r1, #3
 8007382:	434a      	muls	r2, r1
 8007384:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007386:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007388:	0021      	movs	r1, r4
 800738a:	1843      	adds	r3, r0, r1
 800738c:	19db      	adds	r3, r3, r7
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	2201      	movs	r2, #1
 8007392:	4353      	muls	r3, r2
 8007394:	2203      	movs	r2, #3
 8007396:	4113      	asrs	r3, r2
 8007398:	001a      	movs	r2, r3
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800739e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80073a0:	2314      	movs	r3, #20
 80073a2:	185b      	adds	r3, r3, r1
 80073a4:	19da      	adds	r2, r3, r7
 80073a6:	2318      	movs	r3, #24
 80073a8:	185b      	adds	r3, r3, r1
 80073aa:	19db      	adds	r3, r3, r7
 80073ac:	0011      	movs	r1, r2
 80073ae:	0018      	movs	r0, r3
 80073b0:	f000 f80a 	bl	80073c8 <correctIntFracNumber>
    integerPart[0] = intPart;
 80073b4:	6a3a      	ldr	r2, [r7, #32]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	601a      	str	r2, [r3, #0]
}
 80073c0:	46c0      	nop			@ (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b010      	add	sp, #64	@ 0x40
 80073c6:	bdb0      	pop	{r4, r5, r7, pc}

080073c8 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80073d2:	e00a      	b.n	80073ea <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3b0a      	subs	r3, #10
 80073e4:	001a      	movs	r2, r3
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b09      	cmp	r3, #9
 80073f0:	dcf0      	bgt.n	80073d4 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80073f2:	e00a      	b.n	800740a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	330a      	adds	r3, #10
 8007404:	001a      	movs	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3309      	adds	r3, #9
 8007410:	dbf0      	blt.n	80073f4 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	da0f      	bge.n	800743a <correctIntFracNumber+0x72>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	dd0b      	ble.n	800743a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3b0a      	subs	r3, #10
 8007432:	001a      	movs	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007438:	e012      	b.n	8007460 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	dd0e      	ble.n	8007460 <correctIntFracNumber+0x98>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	da0a      	bge.n	8007460 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	1e5a      	subs	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330a      	adds	r3, #10
 800745a:	001a      	movs	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	601a      	str	r2, [r3, #0]
}
 8007460:	46c0      	nop			@ (mov r8, r8)
 8007462:	46bd      	mov	sp, r7
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}

08007468 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b08b      	sub	sp, #44	@ 0x2c
 800746c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800746e:	2414      	movs	r4, #20
 8007470:	193b      	adds	r3, r7, r4
 8007472:	0018      	movs	r0, r3
 8007474:	2314      	movs	r3, #20
 8007476:	001a      	movs	r2, r3
 8007478:	2100      	movs	r1, #0
 800747a:	f018 fe51 	bl	8020120 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800747e:	4b8a      	ldr	r3, [pc, #552]	@ (80076a8 <MX_GPIO_Init+0x240>)
 8007480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007482:	4b89      	ldr	r3, [pc, #548]	@ (80076a8 <MX_GPIO_Init+0x240>)
 8007484:	2104      	movs	r1, #4
 8007486:	430a      	orrs	r2, r1
 8007488:	62da      	str	r2, [r3, #44]	@ 0x2c
 800748a:	4b87      	ldr	r3, [pc, #540]	@ (80076a8 <MX_GPIO_Init+0x240>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	2204      	movs	r2, #4
 8007490:	4013      	ands	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007496:	4b84      	ldr	r3, [pc, #528]	@ (80076a8 <MX_GPIO_Init+0x240>)
 8007498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749a:	4b83      	ldr	r3, [pc, #524]	@ (80076a8 <MX_GPIO_Init+0x240>)
 800749c:	2180      	movs	r1, #128	@ 0x80
 800749e:	430a      	orrs	r2, r1
 80074a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074a2:	4b81      	ldr	r3, [pc, #516]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	2280      	movs	r2, #128	@ 0x80
 80074a8:	4013      	ands	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ae:	4b7e      	ldr	r3, [pc, #504]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b2:	4b7d      	ldr	r3, [pc, #500]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074b4:	2101      	movs	r1, #1
 80074b6:	430a      	orrs	r2, r1
 80074b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074ba:	4b7b      	ldr	r3, [pc, #492]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	2201      	movs	r2, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074c6:	4b78      	ldr	r3, [pc, #480]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ca:	4b77      	ldr	r3, [pc, #476]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074cc:	2102      	movs	r1, #2
 80074ce:	430a      	orrs	r2, r1
 80074d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074d2:	4b75      	ldr	r3, [pc, #468]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	2202      	movs	r2, #2
 80074d8:	4013      	ands	r3, r2
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074de:	4b72      	ldr	r3, [pc, #456]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e2:	4b71      	ldr	r3, [pc, #452]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074e4:	2108      	movs	r1, #8
 80074e6:	430a      	orrs	r2, r1
 80074e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074ea:	4b6f      	ldr	r3, [pc, #444]	@ (80076a8 <MX_GPIO_Init+0x240>)
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	2208      	movs	r2, #8
 80074f0:	4013      	ands	r3, r2
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074f6:	4b6d      	ldr	r3, [pc, #436]	@ (80076ac <MX_GPIO_Init+0x244>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	2101      	movs	r1, #1
 80074fc:	0018      	movs	r0, r3
 80074fe:	f008 fe48 	bl	8010192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007502:	4b6a      	ldr	r3, [pc, #424]	@ (80076ac <MX_GPIO_Init+0x244>)
 8007504:	2200      	movs	r2, #0
 8007506:	2102      	movs	r1, #2
 8007508:	0018      	movs	r0, r3
 800750a:	f008 fe42 	bl	8010192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800750e:	4968      	ldr	r1, [pc, #416]	@ (80076b0 <MX_GPIO_Init+0x248>)
 8007510:	4b68      	ldr	r3, [pc, #416]	@ (80076b4 <MX_GPIO_Init+0x24c>)
 8007512:	2201      	movs	r2, #1
 8007514:	0018      	movs	r0, r3
 8007516:	f008 fe3c 	bl	8010192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	4866      	ldr	r0, [pc, #408]	@ (80076b8 <MX_GPIO_Init+0x250>)
 8007520:	2201      	movs	r2, #1
 8007522:	0019      	movs	r1, r3
 8007524:	f008 fe35 	bl	8010192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007528:	2380      	movs	r3, #128	@ 0x80
 800752a:	015b      	lsls	r3, r3, #5
 800752c:	4862      	ldr	r0, [pc, #392]	@ (80076b8 <MX_GPIO_Init+0x250>)
 800752e:	2200      	movs	r2, #0
 8007530:	0019      	movs	r1, r3
 8007532:	f008 fe2e 	bl	8010192 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007536:	193b      	adds	r3, r7, r4
 8007538:	4a60      	ldr	r2, [pc, #384]	@ (80076bc <MX_GPIO_Init+0x254>)
 800753a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800753c:	193b      	adds	r3, r7, r4
 800753e:	2203      	movs	r2, #3
 8007540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007542:	193b      	adds	r3, r7, r4
 8007544:	2200      	movs	r2, #0
 8007546:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007548:	193b      	adds	r3, r7, r4
 800754a:	4a5b      	ldr	r2, [pc, #364]	@ (80076b8 <MX_GPIO_Init+0x250>)
 800754c:	0019      	movs	r1, r3
 800754e:	0010      	movs	r0, r2
 8007550:	f008 fc84 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007554:	193b      	adds	r3, r7, r4
 8007556:	2203      	movs	r2, #3
 8007558:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800755a:	193b      	adds	r3, r7, r4
 800755c:	2201      	movs	r2, #1
 800755e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007560:	193b      	adds	r3, r7, r4
 8007562:	2200      	movs	r2, #0
 8007564:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007566:	193b      	adds	r3, r7, r4
 8007568:	2200      	movs	r2, #0
 800756a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800756c:	193b      	adds	r3, r7, r4
 800756e:	4a4f      	ldr	r2, [pc, #316]	@ (80076ac <MX_GPIO_Init+0x244>)
 8007570:	0019      	movs	r1, r3
 8007572:	0010      	movs	r0, r2
 8007574:	f008 fc72 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007578:	193b      	adds	r3, r7, r4
 800757a:	2270      	movs	r2, #112	@ 0x70
 800757c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800757e:	193b      	adds	r3, r7, r4
 8007580:	2203      	movs	r2, #3
 8007582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007584:	193b      	adds	r3, r7, r4
 8007586:	2200      	movs	r2, #0
 8007588:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800758a:	193a      	adds	r2, r7, r4
 800758c:	23a0      	movs	r3, #160	@ 0xa0
 800758e:	05db      	lsls	r3, r3, #23
 8007590:	0011      	movs	r1, r2
 8007592:	0018      	movs	r0, r3
 8007594:	f008 fc62 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007598:	193b      	adds	r3, r7, r4
 800759a:	22c0      	movs	r2, #192	@ 0xc0
 800759c:	0052      	lsls	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075a0:	193b      	adds	r3, r7, r4
 80075a2:	2200      	movs	r2, #0
 80075a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a6:	193b      	adds	r3, r7, r4
 80075a8:	2200      	movs	r2, #0
 80075aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075ac:	193a      	adds	r2, r7, r4
 80075ae:	23a0      	movs	r3, #160	@ 0xa0
 80075b0:	05db      	lsls	r3, r3, #23
 80075b2:	0011      	movs	r1, r2
 80075b4:	0018      	movs	r0, r3
 80075b6:	f008 fc51 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80075ba:	193b      	adds	r3, r7, r4
 80075bc:	4a3c      	ldr	r2, [pc, #240]	@ (80076b0 <MX_GPIO_Init+0x248>)
 80075be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c0:	193b      	adds	r3, r7, r4
 80075c2:	2201      	movs	r2, #1
 80075c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c6:	193b      	adds	r3, r7, r4
 80075c8:	2200      	movs	r2, #0
 80075ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075cc:	193b      	adds	r3, r7, r4
 80075ce:	2200      	movs	r2, #0
 80075d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075d2:	193b      	adds	r3, r7, r4
 80075d4:	4a37      	ldr	r2, [pc, #220]	@ (80076b4 <MX_GPIO_Init+0x24c>)
 80075d6:	0019      	movs	r1, r3
 80075d8:	0010      	movs	r0, r2
 80075da:	f008 fc3f 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075de:	193b      	adds	r3, r7, r4
 80075e0:	4a37      	ldr	r2, [pc, #220]	@ (80076c0 <MX_GPIO_Init+0x258>)
 80075e2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075e4:	193b      	adds	r3, r7, r4
 80075e6:	2203      	movs	r2, #3
 80075e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ea:	193b      	adds	r3, r7, r4
 80075ec:	2200      	movs	r2, #0
 80075ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f0:	193b      	adds	r3, r7, r4
 80075f2:	4a30      	ldr	r2, [pc, #192]	@ (80076b4 <MX_GPIO_Init+0x24c>)
 80075f4:	0019      	movs	r1, r3
 80075f6:	0010      	movs	r0, r2
 80075f8:	f008 fc30 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80075fc:	0021      	movs	r1, r4
 80075fe:	187b      	adds	r3, r7, r1
 8007600:	2280      	movs	r2, #128	@ 0x80
 8007602:	0092      	lsls	r2, r2, #2
 8007604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007606:	000c      	movs	r4, r1
 8007608:	193b      	adds	r3, r7, r4
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760e:	193b      	adds	r3, r7, r4
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007614:	193b      	adds	r3, r7, r4
 8007616:	4a28      	ldr	r2, [pc, #160]	@ (80076b8 <MX_GPIO_Init+0x250>)
 8007618:	0019      	movs	r1, r3
 800761a:	0010      	movs	r0, r2
 800761c:	f008 fc1e 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007620:	193b      	adds	r3, r7, r4
 8007622:	2280      	movs	r2, #128	@ 0x80
 8007624:	0212      	lsls	r2, r2, #8
 8007626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007628:	193b      	adds	r3, r7, r4
 800762a:	2288      	movs	r2, #136	@ 0x88
 800762c:	0352      	lsls	r2, r2, #13
 800762e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007630:	193b      	adds	r3, r7, r4
 8007632:	2200      	movs	r2, #0
 8007634:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007636:	193a      	adds	r2, r7, r4
 8007638:	23a0      	movs	r3, #160	@ 0xa0
 800763a:	05db      	lsls	r3, r3, #23
 800763c:	0011      	movs	r1, r2
 800763e:	0018      	movs	r0, r3
 8007640:	f008 fc0c 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007644:	0021      	movs	r1, r4
 8007646:	187b      	adds	r3, r7, r1
 8007648:	22c0      	movs	r2, #192	@ 0xc0
 800764a:	0152      	lsls	r2, r2, #5
 800764c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800764e:	000c      	movs	r4, r1
 8007650:	193b      	adds	r3, r7, r4
 8007652:	2201      	movs	r2, #1
 8007654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007656:	193b      	adds	r3, r7, r4
 8007658:	2200      	movs	r2, #0
 800765a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765c:	193b      	adds	r3, r7, r4
 800765e:	2200      	movs	r2, #0
 8007660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007662:	193b      	adds	r3, r7, r4
 8007664:	4a14      	ldr	r2, [pc, #80]	@ (80076b8 <MX_GPIO_Init+0x250>)
 8007666:	0019      	movs	r1, r3
 8007668:	0010      	movs	r0, r2
 800766a:	f008 fbf7 	bl	800fe5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800766e:	0021      	movs	r1, r4
 8007670:	187b      	adds	r3, r7, r1
 8007672:	2204      	movs	r2, #4
 8007674:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007676:	187b      	adds	r3, r7, r1
 8007678:	2200      	movs	r2, #0
 800767a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800767c:	187b      	adds	r3, r7, r1
 800767e:	2201      	movs	r2, #1
 8007680:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007682:	187b      	adds	r3, r7, r1
 8007684:	4a0f      	ldr	r2, [pc, #60]	@ (80076c4 <MX_GPIO_Init+0x25c>)
 8007686:	0019      	movs	r1, r3
 8007688:	0010      	movs	r0, r2
 800768a:	f008 fbe7 	bl	800fe5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	2007      	movs	r0, #7
 8007694:	f007 ff90 	bl	800f5b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007698:	2007      	movs	r0, #7
 800769a:	f007 ffa2 	bl	800f5e2 <HAL_NVIC_EnableIRQ>

}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b00b      	add	sp, #44	@ 0x2c
 80076a4:	bd90      	pop	{r4, r7, pc}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	40021000 	.word	0x40021000
 80076ac:	50001c00 	.word	0x50001c00
 80076b0:	00000301 	.word	0x00000301
 80076b4:	50000400 	.word	0x50000400
 80076b8:	50000800 	.word	0x50000800
 80076bc:	0000200c 	.word	0x0000200c
 80076c0:	0000403e 	.word	0x0000403e
 80076c4:	50000c00 	.word	0x50000c00

080076c8 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2100      	movs	r1, #0
 80076d6:	0018      	movs	r0, r3
 80076d8:	f00f f936 	bl	8016948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2108      	movs	r1, #8
 80076e0:	0018      	movs	r0, r3
 80076e2:	f00f f931 	bl	8016948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	210c      	movs	r1, #12
 80076ea:	0018      	movs	r0, r3
 80076ec:	f00f f92c 	bl	8016948 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80076f0:	2380      	movs	r3, #128	@ 0x80
 80076f2:	05db      	lsls	r3, r3, #23
 80076f4:	22fa      	movs	r2, #250	@ 0xfa
 80076f6:	0112      	lsls	r2, r2, #4
 80076f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80076fa:	2380      	movs	r3, #128	@ 0x80
 80076fc:	05db      	lsls	r3, r3, #23
 80076fe:	22fa      	movs	r2, #250	@ 0xfa
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007704:	2380      	movs	r3, #128	@ 0x80
 8007706:	05db      	lsls	r3, r3, #23
 8007708:	22fa      	movs	r2, #250	@ 0xfa
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800770e:	2380      	movs	r3, #128	@ 0x80
 8007710:	05db      	lsls	r3, r3, #23
 8007712:	22fa      	movs	r2, #250	@ 0xfa
 8007714:	0112      	lsls	r2, r2, #4
 8007716:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2100      	movs	r1, #0
 800771c:	0018      	movs	r0, r3
 800771e:	f00f f913 	bl	8016948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2104      	movs	r1, #4
 8007726:	0018      	movs	r0, r3
 8007728:	f00f f90e 	bl	8016948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2108      	movs	r1, #8
 8007730:	0018      	movs	r0, r3
 8007732:	f00f f909 	bl	8016948 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007736:	4b0a      	ldr	r3, [pc, #40]	@ (8007760 <GPIO_InitPWMLEDs+0x98>)
 8007738:	22fa      	movs	r2, #250	@ 0xfa
 800773a:	0112      	lsls	r2, r2, #4
 800773c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800773e:	4b08      	ldr	r3, [pc, #32]	@ (8007760 <GPIO_InitPWMLEDs+0x98>)
 8007740:	22fa      	movs	r2, #250	@ 0xfa
 8007742:	0112      	lsls	r2, r2, #4
 8007744:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007746:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <GPIO_InitPWMLEDs+0x98>)
 8007748:	22fa      	movs	r2, #250	@ 0xfa
 800774a:	0112      	lsls	r2, r2, #4
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800774e:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <GPIO_InitPWMLEDs+0x98>)
 8007750:	22fa      	movs	r2, #250	@ 0xfa
 8007752:	0112      	lsls	r2, r2, #4
 8007754:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007756:	46c0      	nop			@ (mov r8, r8)
 8007758:	46bd      	mov	sp, r7
 800775a:	b002      	add	sp, #8
 800775c:	bd80      	pop	{r7, pc}
 800775e:	46c0      	nop			@ (mov r8, r8)
 8007760:	40000400 	.word	0x40000400

08007764 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007768:	4b1b      	ldr	r3, [pc, #108]	@ (80077d8 <MX_I2C1_Init+0x74>)
 800776a:	4a1c      	ldr	r2, [pc, #112]	@ (80077dc <MX_I2C1_Init+0x78>)
 800776c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800776e:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <MX_I2C1_Init+0x74>)
 8007770:	4a1b      	ldr	r2, [pc, #108]	@ (80077e0 <MX_I2C1_Init+0x7c>)
 8007772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007774:	4b18      	ldr	r3, [pc, #96]	@ (80077d8 <MX_I2C1_Init+0x74>)
 8007776:	2200      	movs	r2, #0
 8007778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800777a:	4b17      	ldr	r3, [pc, #92]	@ (80077d8 <MX_I2C1_Init+0x74>)
 800777c:	2201      	movs	r2, #1
 800777e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007780:	4b15      	ldr	r3, [pc, #84]	@ (80077d8 <MX_I2C1_Init+0x74>)
 8007782:	2200      	movs	r2, #0
 8007784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007786:	4b14      	ldr	r3, [pc, #80]	@ (80077d8 <MX_I2C1_Init+0x74>)
 8007788:	2200      	movs	r2, #0
 800778a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800778c:	4b12      	ldr	r3, [pc, #72]	@ (80077d8 <MX_I2C1_Init+0x74>)
 800778e:	2200      	movs	r2, #0
 8007790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007792:	4b11      	ldr	r3, [pc, #68]	@ (80077d8 <MX_I2C1_Init+0x74>)
 8007794:	2200      	movs	r2, #0
 8007796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007798:	4b0f      	ldr	r3, [pc, #60]	@ (80077d8 <MX_I2C1_Init+0x74>)
 800779a:	2200      	movs	r2, #0
 800779c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800779e:	4b0e      	ldr	r3, [pc, #56]	@ (80077d8 <MX_I2C1_Init+0x74>)
 80077a0:	0018      	movs	r0, r3
 80077a2:	f008 fd2f 	bl	8010204 <HAL_I2C_Init>
 80077a6:	1e03      	subs	r3, r0, #0
 80077a8:	d001      	beq.n	80077ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077aa:	f000 fd83 	bl	80082b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077ae:	4b0a      	ldr	r3, [pc, #40]	@ (80077d8 <MX_I2C1_Init+0x74>)
 80077b0:	2100      	movs	r1, #0
 80077b2:	0018      	movs	r0, r3
 80077b4:	f00b f900 	bl	80129b8 <HAL_I2CEx_ConfigAnalogFilter>
 80077b8:	1e03      	subs	r3, r0, #0
 80077ba:	d001      	beq.n	80077c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80077bc:	f000 fd7a 	bl	80082b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <MX_I2C1_Init+0x74>)
 80077c2:	2100      	movs	r1, #0
 80077c4:	0018      	movs	r0, r3
 80077c6:	f00b f943 	bl	8012a50 <HAL_I2CEx_ConfigDigitalFilter>
 80077ca:	1e03      	subs	r3, r0, #0
 80077cc:	d001      	beq.n	80077d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80077ce:	f000 fd71 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80077d2:	46c0      	nop			@ (mov r8, r8)
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000de4 	.word	0x20000de4
 80077dc:	40005400 	.word	0x40005400
 80077e0:	00503d58 	.word	0x00503d58

080077e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80077e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007858 <MX_I2C2_Init+0x74>)
 80077ea:	4a1c      	ldr	r2, [pc, #112]	@ (800785c <MX_I2C2_Init+0x78>)
 80077ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80077ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007858 <MX_I2C2_Init+0x74>)
 80077f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007860 <MX_I2C2_Init+0x7c>)
 80077f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80077f4:	4b18      	ldr	r3, [pc, #96]	@ (8007858 <MX_I2C2_Init+0x74>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077fa:	4b17      	ldr	r3, [pc, #92]	@ (8007858 <MX_I2C2_Init+0x74>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007800:	4b15      	ldr	r3, [pc, #84]	@ (8007858 <MX_I2C2_Init+0x74>)
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007806:	4b14      	ldr	r3, [pc, #80]	@ (8007858 <MX_I2C2_Init+0x74>)
 8007808:	2200      	movs	r2, #0
 800780a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800780c:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <MX_I2C2_Init+0x74>)
 800780e:	2200      	movs	r2, #0
 8007810:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007812:	4b11      	ldr	r3, [pc, #68]	@ (8007858 <MX_I2C2_Init+0x74>)
 8007814:	2200      	movs	r2, #0
 8007816:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007818:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <MX_I2C2_Init+0x74>)
 800781a:	2200      	movs	r2, #0
 800781c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800781e:	4b0e      	ldr	r3, [pc, #56]	@ (8007858 <MX_I2C2_Init+0x74>)
 8007820:	0018      	movs	r0, r3
 8007822:	f008 fcef 	bl	8010204 <HAL_I2C_Init>
 8007826:	1e03      	subs	r3, r0, #0
 8007828:	d001      	beq.n	800782e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800782a:	f000 fd43 	bl	80082b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800782e:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <MX_I2C2_Init+0x74>)
 8007830:	2100      	movs	r1, #0
 8007832:	0018      	movs	r0, r3
 8007834:	f00b f8c0 	bl	80129b8 <HAL_I2CEx_ConfigAnalogFilter>
 8007838:	1e03      	subs	r3, r0, #0
 800783a:	d001      	beq.n	8007840 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800783c:	f000 fd3a 	bl	80082b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007840:	4b05      	ldr	r3, [pc, #20]	@ (8007858 <MX_I2C2_Init+0x74>)
 8007842:	2100      	movs	r1, #0
 8007844:	0018      	movs	r0, r3
 8007846:	f00b f903 	bl	8012a50 <HAL_I2CEx_ConfigDigitalFilter>
 800784a:	1e03      	subs	r3, r0, #0
 800784c:	d001      	beq.n	8007852 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800784e:	f000 fd31 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007852:	46c0      	nop			@ (mov r8, r8)
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20000e38 	.word	0x20000e38
 800785c:	40005800 	.word	0x40005800
 8007860:	00503d58 	.word	0x00503d58

08007864 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007864:	b590      	push	{r4, r7, lr}
 8007866:	b08b      	sub	sp, #44	@ 0x2c
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800786c:	2414      	movs	r4, #20
 800786e:	193b      	adds	r3, r7, r4
 8007870:	0018      	movs	r0, r3
 8007872:	2314      	movs	r3, #20
 8007874:	001a      	movs	r2, r3
 8007876:	2100      	movs	r1, #0
 8007878:	f018 fc52 	bl	8020120 <memset>
  if(i2cHandle->Instance==I2C1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a5d      	ldr	r2, [pc, #372]	@ (80079f8 <HAL_I2C_MspInit+0x194>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d000      	beq.n	8007888 <HAL_I2C_MspInit+0x24>
 8007886:	e083      	b.n	8007990 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007888:	4b5c      	ldr	r3, [pc, #368]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 800788a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788c:	4b5b      	ldr	r3, [pc, #364]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 800788e:	2102      	movs	r1, #2
 8007890:	430a      	orrs	r2, r1
 8007892:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007894:	4b59      	ldr	r3, [pc, #356]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 8007896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007898:	2202      	movs	r2, #2
 800789a:	4013      	ands	r3, r2
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078a0:	0021      	movs	r1, r4
 80078a2:	187b      	adds	r3, r7, r1
 80078a4:	22c0      	movs	r2, #192	@ 0xc0
 80078a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078a8:	187b      	adds	r3, r7, r1
 80078aa:	2212      	movs	r2, #18
 80078ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ae:	187b      	adds	r3, r7, r1
 80078b0:	2200      	movs	r2, #0
 80078b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078b4:	187b      	adds	r3, r7, r1
 80078b6:	2203      	movs	r2, #3
 80078b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80078ba:	187b      	adds	r3, r7, r1
 80078bc:	2201      	movs	r2, #1
 80078be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c0:	187b      	adds	r3, r7, r1
 80078c2:	4a4f      	ldr	r2, [pc, #316]	@ (8007a00 <HAL_I2C_MspInit+0x19c>)
 80078c4:	0019      	movs	r1, r3
 80078c6:	0010      	movs	r0, r2
 80078c8:	f008 fac8 	bl	800fe5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078cc:	4b4b      	ldr	r3, [pc, #300]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 80078ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078d0:	4b4a      	ldr	r3, [pc, #296]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 80078d2:	2180      	movs	r1, #128	@ 0x80
 80078d4:	0389      	lsls	r1, r1, #14
 80078d6:	430a      	orrs	r2, r1
 80078d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80078da:	4b4a      	ldr	r3, [pc, #296]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 80078dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007a08 <HAL_I2C_MspInit+0x1a4>)
 80078de:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80078e0:	4b48      	ldr	r3, [pc, #288]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 80078e2:	2206      	movs	r2, #6
 80078e4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078e6:	4b47      	ldr	r3, [pc, #284]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078ec:	4b45      	ldr	r3, [pc, #276]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078f2:	4b44      	ldr	r3, [pc, #272]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 80078f4:	2280      	movs	r2, #128	@ 0x80
 80078f6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078f8:	4b42      	ldr	r3, [pc, #264]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078fe:	4b41      	ldr	r3, [pc, #260]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 8007900:	2200      	movs	r2, #0
 8007902:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007904:	4b3f      	ldr	r3, [pc, #252]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 8007906:	2200      	movs	r2, #0
 8007908:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800790a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 800790c:	2200      	movs	r2, #0
 800790e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007910:	4b3c      	ldr	r3, [pc, #240]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 8007912:	0018      	movs	r0, r3
 8007914:	f007 fe86 	bl	800f624 <HAL_DMA_Init>
 8007918:	1e03      	subs	r3, r0, #0
 800791a:	d001      	beq.n	8007920 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800791c:	f000 fcca 	bl	80082b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a38      	ldr	r2, [pc, #224]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 8007924:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007926:	4b37      	ldr	r3, [pc, #220]	@ (8007a04 <HAL_I2C_MspInit+0x1a0>)
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800792c:	4b37      	ldr	r3, [pc, #220]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 800792e:	4a38      	ldr	r2, [pc, #224]	@ (8007a10 <HAL_I2C_MspInit+0x1ac>)
 8007930:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007932:	4b36      	ldr	r3, [pc, #216]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 8007934:	2206      	movs	r2, #6
 8007936:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007938:	4b34      	ldr	r3, [pc, #208]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 800793a:	2210      	movs	r2, #16
 800793c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800793e:	4b33      	ldr	r3, [pc, #204]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 8007940:	2200      	movs	r2, #0
 8007942:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007944:	4b31      	ldr	r3, [pc, #196]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 8007946:	2280      	movs	r2, #128	@ 0x80
 8007948:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800794a:	4b30      	ldr	r3, [pc, #192]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 800794c:	2200      	movs	r2, #0
 800794e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007950:	4b2e      	ldr	r3, [pc, #184]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 8007952:	2200      	movs	r2, #0
 8007954:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007956:	4b2d      	ldr	r3, [pc, #180]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 8007958:	2200      	movs	r2, #0
 800795a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800795c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 800795e:	2200      	movs	r2, #0
 8007960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007962:	4b2a      	ldr	r3, [pc, #168]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 8007964:	0018      	movs	r0, r3
 8007966:	f007 fe5d 	bl	800f624 <HAL_DMA_Init>
 800796a:	1e03      	subs	r3, r0, #0
 800796c:	d001      	beq.n	8007972 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800796e:	f000 fca1 	bl	80082b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a25      	ldr	r2, [pc, #148]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 8007976:	639a      	str	r2, [r3, #56]	@ 0x38
 8007978:	4b24      	ldr	r3, [pc, #144]	@ (8007a0c <HAL_I2C_MspInit+0x1a8>)
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	2017      	movs	r0, #23
 8007984:	f007 fe18 	bl	800f5b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007988:	2017      	movs	r0, #23
 800798a:	f007 fe2a 	bl	800f5e2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800798e:	e02e      	b.n	80079ee <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1f      	ldr	r2, [pc, #124]	@ (8007a14 <HAL_I2C_MspInit+0x1b0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d129      	bne.n	80079ee <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800799a:	4b18      	ldr	r3, [pc, #96]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 800799c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799e:	4b17      	ldr	r3, [pc, #92]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 80079a0:	2102      	movs	r1, #2
 80079a2:	430a      	orrs	r2, r1
 80079a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079a6:	4b15      	ldr	r3, [pc, #84]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	2202      	movs	r2, #2
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80079b2:	2114      	movs	r1, #20
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	22c0      	movs	r2, #192	@ 0xc0
 80079b8:	0112      	lsls	r2, r2, #4
 80079ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80079bc:	187b      	adds	r3, r7, r1
 80079be:	2212      	movs	r2, #18
 80079c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c2:	187b      	adds	r3, r7, r1
 80079c4:	2200      	movs	r2, #0
 80079c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c8:	187b      	adds	r3, r7, r1
 80079ca:	2203      	movs	r2, #3
 80079cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80079ce:	187b      	adds	r3, r7, r1
 80079d0:	2206      	movs	r2, #6
 80079d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079d4:	187b      	adds	r3, r7, r1
 80079d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007a00 <HAL_I2C_MspInit+0x19c>)
 80079d8:	0019      	movs	r1, r3
 80079da:	0010      	movs	r0, r2
 80079dc:	f008 fa3e 	bl	800fe5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80079e0:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 80079e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e4:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <HAL_I2C_MspInit+0x198>)
 80079e6:	2180      	movs	r1, #128	@ 0x80
 80079e8:	03c9      	lsls	r1, r1, #15
 80079ea:	430a      	orrs	r2, r1
 80079ec:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80079ee:	46c0      	nop			@ (mov r8, r8)
 80079f0:	46bd      	mov	sp, r7
 80079f2:	b00b      	add	sp, #44	@ 0x2c
 80079f4:	bd90      	pop	{r4, r7, pc}
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	40005400 	.word	0x40005400
 80079fc:	40021000 	.word	0x40021000
 8007a00:	50000400 	.word	0x50000400
 8007a04:	20000e8c 	.word	0x20000e8c
 8007a08:	40020030 	.word	0x40020030
 8007a0c:	20000ed4 	.word	0x20000ed4
 8007a10:	4002001c 	.word	0x4002001c
 8007a14:	40005800 	.word	0x40005800

08007a18 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007a1c:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a1e:	4a11      	ldr	r2, [pc, #68]	@ (8007a64 <MX_I2S2_Init+0x4c>)
 8007a20:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007a22:	4b0f      	ldr	r3, [pc, #60]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a24:	22c0      	movs	r2, #192	@ 0xc0
 8007a26:	0092      	lsls	r2, r2, #2
 8007a28:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007a30:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a32:	2203      	movs	r2, #3
 8007a34:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a36:	4b0a      	ldr	r3, [pc, #40]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a3c:	4b08      	ldr	r3, [pc, #32]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a3e:	22fa      	movs	r2, #250	@ 0xfa
 8007a40:	0192      	lsls	r2, r2, #6
 8007a42:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a44:	4b06      	ldr	r3, [pc, #24]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a4a:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <MX_I2S2_Init+0x48>)
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f00b f84b 	bl	8012ae8 <HAL_I2S_Init>
 8007a52:	1e03      	subs	r3, r0, #0
 8007a54:	d001      	beq.n	8007a5a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007a56:	f000 fc2d 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007a5a:	46c0      	nop			@ (mov r8, r8)
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000f1c 	.word	0x20000f1c
 8007a64:	40003800 	.word	0x40003800

08007a68 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007a68:	b590      	push	{r4, r7, lr}
 8007a6a:	b089      	sub	sp, #36	@ 0x24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a70:	240c      	movs	r4, #12
 8007a72:	193b      	adds	r3, r7, r4
 8007a74:	0018      	movs	r0, r3
 8007a76:	2314      	movs	r3, #20
 8007a78:	001a      	movs	r2, r3
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	f018 fb50 	bl	8020120 <memset>
  if(i2sHandle->Instance==SPI2)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a2d      	ldr	r2, [pc, #180]	@ (8007b3c <HAL_I2S_MspInit+0xd4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d154      	bne.n	8007b34 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007b40 <HAL_I2S_MspInit+0xd8>)
 8007a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007b40 <HAL_I2S_MspInit+0xd8>)
 8007a90:	2180      	movs	r1, #128	@ 0x80
 8007a92:	01c9      	lsls	r1, r1, #7
 8007a94:	430a      	orrs	r2, r1
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a98:	4b29      	ldr	r3, [pc, #164]	@ (8007b40 <HAL_I2S_MspInit+0xd8>)
 8007a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9c:	4b28      	ldr	r3, [pc, #160]	@ (8007b40 <HAL_I2S_MspInit+0xd8>)
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007aa4:	4b26      	ldr	r3, [pc, #152]	@ (8007b40 <HAL_I2S_MspInit+0xd8>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	4013      	ands	r3, r2
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007ab0:	193b      	adds	r3, r7, r4
 8007ab2:	22b0      	movs	r2, #176	@ 0xb0
 8007ab4:	0212      	lsls	r2, r2, #8
 8007ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab8:	0021      	movs	r1, r4
 8007aba:	187b      	adds	r3, r7, r1
 8007abc:	2202      	movs	r2, #2
 8007abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac0:	187b      	adds	r3, r7, r1
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ac6:	187b      	adds	r3, r7, r1
 8007ac8:	2200      	movs	r2, #0
 8007aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007acc:	187b      	adds	r3, r7, r1
 8007ace:	2200      	movs	r2, #0
 8007ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ad2:	187b      	adds	r3, r7, r1
 8007ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b44 <HAL_I2S_MspInit+0xdc>)
 8007ad6:	0019      	movs	r1, r3
 8007ad8:	0010      	movs	r0, r2
 8007ada:	f008 f9bf 	bl	800fe5c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007ade:	4b1a      	ldr	r3, [pc, #104]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8007b4c <HAL_I2S_MspInit+0xe4>)
 8007ae2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007ae4:	4b18      	ldr	r3, [pc, #96]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007aea:	4b17      	ldr	r3, [pc, #92]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007af0:	4b15      	ldr	r3, [pc, #84]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007af6:	4b14      	ldr	r3, [pc, #80]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007af8:	2280      	movs	r2, #128	@ 0x80
 8007afa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007afc:	4b12      	ldr	r3, [pc, #72]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007afe:	2280      	movs	r2, #128	@ 0x80
 8007b00:	0052      	lsls	r2, r2, #1
 8007b02:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b04:	4b10      	ldr	r3, [pc, #64]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007b06:	2280      	movs	r2, #128	@ 0x80
 8007b08:	00d2      	lsls	r2, r2, #3
 8007b0a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007b0e:	2220      	movs	r2, #32
 8007b10:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b12:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007b18:	4b0b      	ldr	r3, [pc, #44]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f007 fd82 	bl	800f624 <HAL_DMA_Init>
 8007b20:	1e03      	subs	r3, r0, #0
 8007b22:	d001      	beq.n	8007b28 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007b24:	f000 fbc6 	bl	80082b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a07      	ldr	r2, [pc, #28]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007b2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b2e:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <HAL_I2S_MspInit+0xe0>)
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b34:	46c0      	nop			@ (mov r8, r8)
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b009      	add	sp, #36	@ 0x24
 8007b3a:	bd90      	pop	{r4, r7, pc}
 8007b3c:	40003800 	.word	0x40003800
 8007b40:	40021000 	.word	0x40021000
 8007b44:	50000400 	.word	0x50000400
 8007b48:	20000f58 	.word	0x20000f58
 8007b4c:	40020044 	.word	0x40020044

08007b50 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  testDone = true;
 8007b54:	4b1e      	ldr	r3, [pc, #120]	@ (8007bd0 <SetTestDone+0x80>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8007b5a:	23fa      	movs	r3, #250	@ 0xfa
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	0018      	movs	r0, r3
 8007b60:	f007 f890 	bl	800ec84 <HAL_Delay>
  SetDBLED(false, false, true);
 8007b64:	2201      	movs	r2, #1
 8007b66:	2100      	movs	r1, #0
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f005 fb47 	bl	800d1fc <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007b6e:	4a19      	ldr	r2, [pc, #100]	@ (8007bd4 <SetTestDone+0x84>)
 8007b70:	23fa      	movs	r3, #250	@ 0xfa
 8007b72:	0119      	lsls	r1, r3, #4
 8007b74:	23fa      	movs	r3, #250	@ 0xfa
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f005 fb0b 	bl	800d194 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007b7e:	4a15      	ldr	r2, [pc, #84]	@ (8007bd4 <SetTestDone+0x84>)
 8007b80:	23fa      	movs	r3, #250	@ 0xfa
 8007b82:	0119      	lsls	r1, r3, #4
 8007b84:	23fa      	movs	r3, #250	@ 0xfa
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	0018      	movs	r0, r3
 8007b8a:	f005 fb81 	bl	800d290 <SetVocLED>
  HAL_Delay(1000);
 8007b8e:	23fa      	movs	r3, #250	@ 0xfa
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	0018      	movs	r0, r3
 8007b94:	f007 f876 	bl	800ec84 <HAL_Delay>
  SetDBLED(false, false, false);
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f005 fb2d 	bl	800d1fc <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007ba2:	23fa      	movs	r3, #250	@ 0xfa
 8007ba4:	011a      	lsls	r2, r3, #4
 8007ba6:	23fa      	movs	r3, #250	@ 0xfa
 8007ba8:	0119      	lsls	r1, r3, #4
 8007baa:	23fa      	movs	r3, #250	@ 0xfa
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f005 faf0 	bl	800d194 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007bb4:	23fa      	movs	r3, #250	@ 0xfa
 8007bb6:	011a      	lsls	r2, r3, #4
 8007bb8:	23fa      	movs	r3, #250	@ 0xfa
 8007bba:	0119      	lsls	r1, r3, #4
 8007bbc:	23fa      	movs	r3, #250	@ 0xfa
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f005 fb65 	bl	800d290 <SetVocLED>
  InitDone();
 8007bc6:	f005 fa39 	bl	800d03c <InitDone>
}
 8007bca:	46c0      	nop			@ (mov r8, r8)
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20000fa0 	.word	0x20000fa0
 8007bd4:	00000bb8 	.word	0x00000bb8

08007bd8 <FlashLEDs>:

void FlashLEDs(){
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007bde:	1dfb      	adds	r3, r7, #7
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e021      	b.n	8007c2a <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007be6:	2201      	movs	r2, #1
 8007be8:	2101      	movs	r1, #1
 8007bea:	2001      	movs	r0, #1
 8007bec:	f005 fb06 	bl	800d1fc <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007bf0:	4a12      	ldr	r2, [pc, #72]	@ (8007c3c <FlashLEDs+0x64>)
 8007bf2:	23fa      	movs	r3, #250	@ 0xfa
 8007bf4:	0119      	lsls	r1, r3, #4
 8007bf6:	23fa      	movs	r3, #250	@ 0xfa
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f005 faca 	bl	800d194 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007c00:	4a0e      	ldr	r2, [pc, #56]	@ (8007c3c <FlashLEDs+0x64>)
 8007c02:	23fa      	movs	r3, #250	@ 0xfa
 8007c04:	0119      	lsls	r1, r3, #4
 8007c06:	23fa      	movs	r3, #250	@ 0xfa
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f005 fb40 	bl	800d290 <SetVocLED>
    HAL_Delay(250);
 8007c10:	20fa      	movs	r0, #250	@ 0xfa
 8007c12:	f007 f837 	bl	800ec84 <HAL_Delay>
    SetLEDsOff();
 8007c16:	f005 fc7f 	bl	800d518 <SetLEDsOff>
    HAL_Delay(250);
 8007c1a:	20fa      	movs	r0, #250	@ 0xfa
 8007c1c:	f007 f832 	bl	800ec84 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007c20:	1dfb      	adds	r3, r7, #7
 8007c22:	781a      	ldrb	r2, [r3, #0]
 8007c24:	1dfb      	adds	r3, r7, #7
 8007c26:	3201      	adds	r2, #1
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	1dfb      	adds	r3, r7, #7
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d9d9      	bls.n	8007be6 <FlashLEDs+0xe>
  }
}
 8007c32:	46c0      	nop			@ (mov r8, r8)
 8007c34:	46c0      	nop			@ (mov r8, r8)
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b002      	add	sp, #8
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	00000bb8 	.word	0x00000bb8

08007c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c44:	f006 ffae 	bl	800eba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c48:	f000 f9ee 	bl	8008028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c4c:	f7ff fc0c 	bl	8007468 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c50:	f7ff fada 	bl	8007208 <MX_DMA_Init>
  MX_I2C1_Init();
 8007c54:	f7ff fd86 	bl	8007764 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007c58:	f7ff fede 	bl	8007a18 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007c5c:	f006 f9d0 	bl	800e000 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007c60:	f7ff fdc0 	bl	80077e4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007c64:	f005 ffc4 	bl	800dbf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007c68:	f006 f836 	bl	800dcd8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007c6c:	f006 f9fc 	bl	800e068 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007c70:	f7ff fa18 	bl	80070a4 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007c74:	f014 ff62 	bl	801cb3c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007c78:	f001 f916 	bl	8008ea8 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007c7c:	f006 f98a 	bl	800df94 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007c80:	f006 f8a8 	bl	800ddd4 <MX_TIM6_Init>
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
//  usbUARTinit(); //serial over USB
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007c84:	4ac0      	ldr	r2, [pc, #768]	@ (8007f88 <main+0x348>)
 8007c86:	4bc1      	ldr	r3, [pc, #772]	@ (8007f8c <main+0x34c>)
 8007c88:	0011      	movs	r1, r2
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	f7ff fd1c 	bl	80076c8 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007c90:	f7fe fc0a 	bl	80064a8 <UserButton_Pressed>
 8007c94:	1e03      	subs	r3, r0, #0
 8007c96:	d004      	beq.n	8007ca2 <main+0x62>
    EnableESPProg();
 8007c98:	f015 f820 	bl	801ccdc <EnableESPProg>
    ESP_Programming = true;
 8007c9c:	4bbc      	ldr	r3, [pc, #752]	@ (8007f90 <main+0x350>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007ca2:	2003      	movs	r0, #3
 8007ca4:	f006 fc08 	bl	800e4b8 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007ca8:	49ba      	ldr	r1, [pc, #744]	@ (8007f94 <main+0x354>)
 8007caa:	4bbb      	ldr	r3, [pc, #748]	@ (8007f98 <main+0x358>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f00f faaa 	bl	8017208 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007cb4:	4bb9      	ldr	r3, [pc, #740]	@ (8007f9c <main+0x35c>)
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f7fe fffa 	bl	8006cb0 <InitClock>
  Debug("Clock init done");
 8007cbc:	4ab8      	ldr	r2, [pc, #736]	@ (8007fa0 <main+0x360>)
 8007cbe:	4bb9      	ldr	r3, [pc, #740]	@ (8007fa4 <main+0x364>)
 8007cc0:	0019      	movs	r1, r3
 8007cc2:	2003      	movs	r0, #3
 8007cc4:	f006 fb8e 	bl	800e3e4 <CreateLine>
  BinaryReleaseInfo();
 8007cc8:	f006 fc10 	bl	800e4ec <BinaryReleaseInfo>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007ccc:	4ab6      	ldr	r2, [pc, #728]	@ (8007fa8 <main+0x368>)
 8007cce:	49b7      	ldr	r1, [pc, #732]	@ (8007fac <main+0x36c>)
 8007cd0:	48b7      	ldr	r0, [pc, #732]	@ (8007fb0 <main+0x370>)
 8007cd2:	230b      	movs	r3, #11
 8007cd4:	f004 fb28 	bl	800c328 <soundInit>
 8007cd8:	0003      	movs	r3, r0
 8007cda:	001a      	movs	r2, r3
 8007cdc:	2301      	movs	r3, #1
 8007cde:	4053      	eors	r3, r2
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <main+0xb2>
    errorHandler(__func__, __LINE__, __FILE__);
 8007ce6:	4ab3      	ldr	r2, [pc, #716]	@ (8007fb4 <main+0x374>)
 8007ce8:	4bb3      	ldr	r3, [pc, #716]	@ (8007fb8 <main+0x378>)
 8007cea:	21f1      	movs	r1, #241	@ 0xf1
 8007cec:	0018      	movs	r0, r3
 8007cee:	f006 fc31 	bl	800e554 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007cf2:	4bb2      	ldr	r3, [pc, #712]	@ (8007fbc <main+0x37c>)
 8007cf4:	4ab2      	ldr	r2, [pc, #712]	@ (8007fc0 <main+0x380>)
 8007cf6:	49ad      	ldr	r1, [pc, #692]	@ (8007fac <main+0x36c>)
 8007cf8:	48b2      	ldr	r0, [pc, #712]	@ (8007fc4 <main+0x384>)
 8007cfa:	f000 fb8b 	bl	8008414 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007cfe:	f006 ffb7 	bl	800ec70 <HAL_GetTick>
 8007d02:	0003      	movs	r3, r0
 8007d04:	4ab0      	ldr	r2, [pc, #704]	@ (8007fc8 <main+0x388>)
 8007d06:	189a      	adds	r2, r3, r2
 8007d08:	4bb0      	ldr	r3, [pc, #704]	@ (8007fcc <main+0x38c>)
 8007d0a:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007d0c:	f7fe fbac 	bl	8006468 <Check_USB_PowerOn>
 8007d10:	0003      	movs	r3, r0
 8007d12:	1e5a      	subs	r2, r3, #1
 8007d14:	4193      	sbcs	r3, r2
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4053      	eors	r3, r2
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	1c1a      	adds	r2, r3, #0
 8007d20:	2301      	movs	r3, #1
 8007d22:	4013      	ands	r3, r2
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	4baa      	ldr	r3, [pc, #680]	@ (8007fd0 <main+0x390>)
 8007d28:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007d2a:	4baa      	ldr	r3, [pc, #680]	@ (8007fd4 <main+0x394>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f006 fb02 	bl	800e338 <TimestampIsReached>
 8007d34:	1e03      	subs	r3, r0, #0
 8007d36:	d00e      	beq.n	8007d56 <main+0x116>
      charge = Battery_Upkeep();
 8007d38:	f005 fde4 	bl	800d904 <Battery_Upkeep>
 8007d3c:	0003      	movs	r3, r0
 8007d3e:	001a      	movs	r2, r3
 8007d40:	4ba5      	ldr	r3, [pc, #660]	@ (8007fd8 <main+0x398>)
 8007d42:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007d44:	f006 ff94 	bl	800ec70 <HAL_GetTick>
 8007d48:	0003      	movs	r3, r0
 8007d4a:	4aa4      	ldr	r2, [pc, #656]	@ (8007fdc <main+0x39c>)
 8007d4c:	189a      	adds	r2, r3, r2
 8007d4e:	4ba1      	ldr	r3, [pc, #644]	@ (8007fd4 <main+0x394>)
 8007d50:	601a      	str	r2, [r3, #0]
        showTime();
 8007d52:	f7fe fbb9 	bl	80064c8 <showTime>
    }
    configCheck();
 8007d56:	f005 fc5f 	bl	800d618 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007d5a:	4ba1      	ldr	r3, [pc, #644]	@ (8007fe0 <main+0x3a0>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007d60:	4b9d      	ldr	r3, [pc, #628]	@ (8007fd8 <main+0x398>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d003      	beq.n	8007d70 <main+0x130>
 8007d68:	4b9b      	ldr	r3, [pc, #620]	@ (8007fd8 <main+0x398>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <main+0x13a>
          FlashLEDs();
 8007d70:	f7ff ff32 	bl	8007bd8 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007d74:	4b9b      	ldr	r3, [pc, #620]	@ (8007fe4 <main+0x3a4>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007d7a:	4b97      	ldr	r3, [pc, #604]	@ (8007fd8 <main+0x398>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <main+0x156>
 8007d82:	4b99      	ldr	r3, [pc, #612]	@ (8007fe8 <main+0x3a8>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b09      	cmp	r3, #9
 8007d88:	d105      	bne.n	8007d96 <main+0x156>
          batteryEmpty = true;
 8007d8a:	4b98      	ldr	r3, [pc, #608]	@ (8007fec <main+0x3ac>)
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007d90:	f7fe fec6 	bl	8006b20 <Enter_Standby_Mode>
 8007d94:	e002      	b.n	8007d9c <main+0x15c>
        }
        else{
          batteryEmpty = false;
 8007d96:	4b95      	ldr	r3, [pc, #596]	@ (8007fec <main+0x3ac>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007d9c:	4b94      	ldr	r3, [pc, #592]	@ (8007ff0 <main+0x3b0>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d100      	bne.n	8007da6 <main+0x166>
 8007da4:	e0b0      	b.n	8007f08 <main+0x2c8>
 8007da6:	4b7a      	ldr	r3, [pc, #488]	@ (8007f90 <main+0x350>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2201      	movs	r2, #1
 8007dac:	4053      	eors	r3, r2
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d100      	bne.n	8007db6 <main+0x176>
 8007db4:	e0a8      	b.n	8007f08 <main+0x2c8>
 8007db6:	4b8d      	ldr	r3, [pc, #564]	@ (8007fec <main+0x3ac>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	4053      	eors	r3, r2
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d100      	bne.n	8007dc6 <main+0x186>
 8007dc4:	e0a0      	b.n	8007f08 <main+0x2c8>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007dc6:	4b82      	ldr	r3, [pc, #520]	@ (8007fd0 <main+0x390>)
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	4b8a      	ldr	r3, [pc, #552]	@ (8007ff4 <main+0x3b4>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d026      	beq.n	8007e20 <main+0x1e0>
        Debug("USB power state change detected");
 8007dd2:	4a89      	ldr	r2, [pc, #548]	@ (8007ff8 <main+0x3b8>)
 8007dd4:	4b73      	ldr	r3, [pc, #460]	@ (8007fa4 <main+0x364>)
 8007dd6:	0019      	movs	r1, r3
 8007dd8:	2003      	movs	r0, #3
 8007dda:	f006 fb03 	bl	800e3e4 <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007dde:	f000 fab1 	bl	8008344 <IsSGPPresent>
 8007de2:	1e03      	subs	r3, r0, #0
 8007de4:	d009      	beq.n	8007dfa <main+0x1ba>
 8007de6:	4b83      	ldr	r3, [pc, #524]	@ (8007ff4 <main+0x3b4>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2201      	movs	r2, #1
 8007dec:	4053      	eors	r3, r2
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <main+0x1ba>
          SetVOCSensorDIS_ENA(true);
 8007df4:	2001      	movs	r0, #1
 8007df6:	f000 faaf 	bl	8008358 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007dfa:	4b80      	ldr	r3, [pc, #512]	@ (8007ffc <main+0x3bc>)
 8007dfc:	791b      	ldrb	r3, [r3, #4]
 8007dfe:	2b34      	cmp	r3, #52	@ 0x34
 8007e00:	d003      	beq.n	8007e0a <main+0x1ca>
 8007e02:	4b7e      	ldr	r3, [pc, #504]	@ (8007ffc <main+0x3bc>)
 8007e04:	791b      	ldrb	r3, [r3, #4]
 8007e06:	2b35      	cmp	r3, #53	@ 0x35
 8007e08:	d106      	bne.n	8007e18 <main+0x1d8>
 8007e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8007ff4 <main+0x3b4>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <main+0x1d8>
          SetVOCSensorDIS_ENA(false);
 8007e12:	2000      	movs	r0, #0
 8007e14:	f000 faa0 	bl	8008358 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007e18:	4b76      	ldr	r3, [pc, #472]	@ (8007ff4 <main+0x3b4>)
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8007fd0 <main+0x390>)
 8007e1e:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007e20:	4b77      	ldr	r3, [pc, #476]	@ (8008000 <main+0x3c0>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d00d      	beq.n	8007e44 <main+0x204>
 8007e28:	4b75      	ldr	r3, [pc, #468]	@ (8008000 <main+0x3c0>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d009      	beq.n	8007e44 <main+0x204>
 8007e30:	4b6c      	ldr	r3, [pc, #432]	@ (8007fe4 <main+0x3a4>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <main+0x204>
        HIDSstate = HIDS_Upkeep();
 8007e38:	f006 fdfe 	bl	800ea38 <HIDS_Upkeep>
 8007e3c:	0003      	movs	r3, r0
 8007e3e:	001a      	movs	r2, r3
 8007e40:	4b70      	ldr	r3, [pc, #448]	@ (8008004 <main+0x3c4>)
 8007e42:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007e44:	4b6f      	ldr	r3, [pc, #444]	@ (8008004 <main+0x3c4>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d00d      	beq.n	8007e68 <main+0x228>
 8007e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8008004 <main+0x3c4>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d009      	beq.n	8007e68 <main+0x228>
 8007e54:	4b63      	ldr	r3, [pc, #396]	@ (8007fe4 <main+0x3a4>)
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <main+0x228>
        SGPstate = SGP_Upkeep();
 8007e5c:	f004 f8d2 	bl	800c004 <SGP_Upkeep>
 8007e60:	0003      	movs	r3, r0
 8007e62:	001a      	movs	r2, r3
 8007e64:	4b66      	ldr	r3, [pc, #408]	@ (8008000 <main+0x3c0>)
 8007e66:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007e68:	4b5e      	ldr	r3, [pc, #376]	@ (8007fe4 <main+0x3a4>)
 8007e6a:	78db      	ldrb	r3, [r3, #3]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <main+0x23c>
        MICstate = Mic_Upkeep();
 8007e70:	f000 ff06 	bl	8008c80 <Mic_Upkeep>
 8007e74:	0003      	movs	r3, r0
 8007e76:	001a      	movs	r2, r3
 8007e78:	4b63      	ldr	r3, [pc, #396]	@ (8008008 <main+0x3c8>)
 8007e7a:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007e7c:	4b56      	ldr	r3, [pc, #344]	@ (8007fd8 <main+0x398>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d803      	bhi.n	8007e8c <main+0x24c>
 8007e84:	4b56      	ldr	r3, [pc, #344]	@ (8007fe0 <main+0x3a0>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d016      	beq.n	8007eba <main+0x27a>
 8007e8c:	4b55      	ldr	r3, [pc, #340]	@ (8007fe4 <main+0x3a4>)
 8007e8e:	789b      	ldrb	r3, [r3, #2]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d012      	beq.n	8007eba <main+0x27a>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007e94:	f001 f896 	bl	8008fc4 <sen5x_Get_sen5x_enable_state>
 8007e98:	0003      	movs	r3, r0
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4053      	eors	r3, r2
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <main+0x274>
 8007ea6:	4b53      	ldr	r3, [pc, #332]	@ (8007ff4 <main+0x3b4>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <main+0x274>
          sen5x_enable(0);
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f001 f8b4 	bl	800901c <sen5x_enable>
        }
        sen5x_statemachine();
 8007eb4:	f001 fdea 	bl	8009a8c <sen5x_statemachine>
 8007eb8:	e020      	b.n	8007efc <main+0x2bc>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007eba:	4b47      	ldr	r3, [pc, #284]	@ (8007fd8 <main+0x398>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d81c      	bhi.n	8007efc <main+0x2bc>
 8007ec2:	4b47      	ldr	r3, [pc, #284]	@ (8007fe0 <main+0x3a0>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	4053      	eors	r3, r2
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d015      	beq.n	8007efc <main+0x2bc>
 8007ed0:	4b44      	ldr	r3, [pc, #272]	@ (8007fe4 <main+0x3a4>)
 8007ed2:	789b      	ldrb	r3, [r3, #2]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d011      	beq.n	8007efc <main+0x2bc>
        Info("Battery level insufficient for sen5x operation");
 8007ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800800c <main+0x3cc>)
 8007eda:	4b4d      	ldr	r3, [pc, #308]	@ (8008010 <main+0x3d0>)
 8007edc:	0019      	movs	r1, r3
 8007ede:	2002      	movs	r0, #2
 8007ee0:	f006 fa80 	bl	800e3e4 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe4 <main+0x3a4>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007eea:	4b4a      	ldr	r3, [pc, #296]	@ (8008014 <main+0x3d4>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007ef0:	4b49      	ldr	r3, [pc, #292]	@ (8008018 <main+0x3d8>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <main+0x2bc>
          sen5x_Power_Off();
 8007ef8:	f001 f902 	bl	8009100 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007efc:	f7fd fae4 	bl	80054c8 <ESP_Upkeep>
 8007f00:	0003      	movs	r3, r0
 8007f02:	001a      	movs	r2, r3
 8007f04:	4b38      	ldr	r3, [pc, #224]	@ (8007fe8 <main+0x3a8>)
 8007f06:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007f08:	4b39      	ldr	r3, [pc, #228]	@ (8007ff0 <main+0x3b0>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	4053      	eors	r3, r2
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00f      	beq.n	8007f36 <main+0x2f6>
 8007f16:	4b1e      	ldr	r3, [pc, #120]	@ (8007f90 <main+0x350>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4053      	eors	r3, r2
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <main+0x2f6>
 8007f24:	4b31      	ldr	r3, [pc, #196]	@ (8007fec <main+0x3ac>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	4053      	eors	r3, r2
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <main+0x2f6>
      Device_Test();  // for device with startup time
 8007f32:	f000 fbb5 	bl	80086a0 <Device_Test>
    }
    if (!usbPluggedIn) {
 8007f36:	4b2f      	ldr	r3, [pc, #188]	@ (8007ff4 <main+0x3b4>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	4053      	eors	r3, r2
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d100      	bne.n	8007f46 <main+0x306>
 8007f44:	e6f1      	b.n	8007d2a <main+0xea>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007f46:	4b35      	ldr	r3, [pc, #212]	@ (800801c <main+0x3dc>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4053      	eors	r3, r2
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d100      	bne.n	8007f56 <main+0x316>
 8007f54:	e6e9      	b.n	8007d2a <main+0xea>
 8007f56:	f000 fc21 	bl	800879c <AllDevicesReady>
 8007f5a:	1e03      	subs	r3, r0, #0
 8007f5c:	d100      	bne.n	8007f60 <main+0x320>
 8007f5e:	e6e4      	b.n	8007d2a <main+0xea>
 8007f60:	4b2f      	ldr	r3, [pc, #188]	@ (8008020 <main+0x3e0>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d100      	bne.n	8007f6a <main+0x32a>
 8007f68:	e6df      	b.n	8007d2a <main+0xea>
        EnabledConnectedDevices();
 8007f6a:	f000 fc7f 	bl	800886c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008024 <main+0x3e4>)
 8007f70:	789b      	ldrb	r3, [r3, #2]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <main+0x33c>
 8007f76:	23d7      	movs	r3, #215	@ 0xd7
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	e001      	b.n	8007f80 <main+0x340>
 8007f7c:	23dc      	movs	r3, #220	@ 0xdc
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	0018      	movs	r0, r3
 8007f82:	f7fe fdef 	bl	8006b64 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007f86:	e6d0      	b.n	8007d2a <main+0xea>
 8007f88:	20002048 	.word	0x20002048
 8007f8c:	20002008 	.word	0x20002008
 8007f90:	20000fa1 	.word	0x20000fa1
 8007f94:	20000fa8 	.word	0x20000fa8
 8007f98:	20002180 	.word	0x20002180
 8007f9c:	20001034 	.word	0x20001034
 8007fa0:	08023e20 	.word	0x08023e20
 8007fa4:	08023e30 	.word	0x08023e30
 8007fa8:	20002088 	.word	0x20002088
 8007fac:	20000f1c 	.word	0x20000f1c
 8007fb0:	20000f58 	.word	0x20000f58
 8007fb4:	08023e34 	.word	0x08023e34
 8007fb8:	08025428 	.word	0x08025428
 8007fbc:	20002238 	.word	0x20002238
 8007fc0:	20000d88 	.word	0x20000d88
 8007fc4:	20000de4 	.word	0x20000de4
 8007fc8:	00001388 	.word	0x00001388
 8007fcc:	20000fb8 	.word	0x20000fb8
 8007fd0:	20000fa3 	.word	0x20000fa3
 8007fd4:	20000fbc 	.word	0x20000fbc
 8007fd8:	20000fc0 	.word	0x20000fc0
 8007fdc:	0000c350 	.word	0x0000c350
 8007fe0:	20000080 	.word	0x20000080
 8007fe4:	20000fc4 	.word	0x20000fc4
 8007fe8:	20000fa7 	.word	0x20000fa7
 8007fec:	20000fa2 	.word	0x20000fa2
 8007ff0:	20000fa0 	.word	0x20000fa0
 8007ff4:	20001ff1 	.word	0x20001ff1
 8007ff8:	08023e48 	.word	0x08023e48
 8007ffc:	2000105c 	.word	0x2000105c
 8008000:	20000fa4 	.word	0x20000fa4
 8008004:	20000fa5 	.word	0x20000fa5
 8008008:	20000fa6 	.word	0x20000fa6
 800800c:	08023e68 	.word	0x08023e68
 8008010:	08023e98 	.word	0x08023e98
 8008014:	2000105a 	.word	0x2000105a
 8008018:	20001059 	.word	0x20001059
 800801c:	20001ff2 	.word	0x20001ff2
 8008020:	20000550 	.word	0x20000550
 8008024:	20000fc8 	.word	0x20000fc8

08008028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b09d      	sub	sp, #116	@ 0x74
 800802c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800802e:	2438      	movs	r4, #56	@ 0x38
 8008030:	193b      	adds	r3, r7, r4
 8008032:	0018      	movs	r0, r3
 8008034:	2338      	movs	r3, #56	@ 0x38
 8008036:	001a      	movs	r2, r3
 8008038:	2100      	movs	r1, #0
 800803a:	f018 f871 	bl	8020120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800803e:	2324      	movs	r3, #36	@ 0x24
 8008040:	18fb      	adds	r3, r7, r3
 8008042:	0018      	movs	r0, r3
 8008044:	2314      	movs	r3, #20
 8008046:	001a      	movs	r2, r3
 8008048:	2100      	movs	r1, #0
 800804a:	f018 f869 	bl	8020120 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800804e:	003b      	movs	r3, r7
 8008050:	0018      	movs	r0, r3
 8008052:	2324      	movs	r3, #36	@ 0x24
 8008054:	001a      	movs	r2, r3
 8008056:	2100      	movs	r1, #0
 8008058:	f018 f862 	bl	8020120 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800805c:	4b34      	ldr	r3, [pc, #208]	@ (8008130 <SystemClock_Config+0x108>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a34      	ldr	r2, [pc, #208]	@ (8008134 <SystemClock_Config+0x10c>)
 8008062:	401a      	ands	r2, r3
 8008064:	4b32      	ldr	r3, [pc, #200]	@ (8008130 <SystemClock_Config+0x108>)
 8008066:	2180      	movs	r1, #128	@ 0x80
 8008068:	0109      	lsls	r1, r1, #4
 800806a:	430a      	orrs	r2, r1
 800806c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800806e:	f00c fe9f 	bl	8014db0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008072:	4b31      	ldr	r3, [pc, #196]	@ (8008138 <SystemClock_Config+0x110>)
 8008074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008076:	4a2f      	ldr	r2, [pc, #188]	@ (8008134 <SystemClock_Config+0x10c>)
 8008078:	401a      	ands	r2, r3
 800807a:	4b2f      	ldr	r3, [pc, #188]	@ (8008138 <SystemClock_Config+0x110>)
 800807c:	2180      	movs	r1, #128	@ 0x80
 800807e:	0149      	lsls	r1, r1, #5
 8008080:	430a      	orrs	r2, r1
 8008082:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008084:	193b      	adds	r3, r7, r4
 8008086:	2226      	movs	r2, #38	@ 0x26
 8008088:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800808a:	193b      	adds	r3, r7, r4
 800808c:	2280      	movs	r2, #128	@ 0x80
 800808e:	0052      	lsls	r2, r2, #1
 8008090:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008092:	0021      	movs	r1, r4
 8008094:	187b      	adds	r3, r7, r1
 8008096:	2201      	movs	r2, #1
 8008098:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800809a:	187b      	adds	r3, r7, r1
 800809c:	2210      	movs	r2, #16
 800809e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80080a0:	187b      	adds	r3, r7, r1
 80080a2:	2201      	movs	r2, #1
 80080a4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	2200      	movs	r2, #0
 80080aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	0018      	movs	r0, r3
 80080b0:	f00c ff0e 	bl	8014ed0 <HAL_RCC_OscConfig>
 80080b4:	1e03      	subs	r3, r0, #0
 80080b6:	d001      	beq.n	80080bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80080b8:	f000 f8fc 	bl	80082b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080bc:	2124      	movs	r1, #36	@ 0x24
 80080be:	187b      	adds	r3, r7, r1
 80080c0:	220f      	movs	r2, #15
 80080c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	2201      	movs	r2, #1
 80080c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080ca:	187b      	adds	r3, r7, r1
 80080cc:	2200      	movs	r2, #0
 80080ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	2200      	movs	r2, #0
 80080d4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80080d6:	187b      	adds	r3, r7, r1
 80080d8:	2200      	movs	r2, #0
 80080da:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	2100      	movs	r1, #0
 80080e0:	0018      	movs	r0, r3
 80080e2:	f00d fac9 	bl	8015678 <HAL_RCC_ClockConfig>
 80080e6:	1e03      	subs	r3, r0, #0
 80080e8:	d001      	beq.n	80080ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80080ea:	f000 f8e3 	bl	80082b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80080ee:	003b      	movs	r3, r7
 80080f0:	226d      	movs	r2, #109	@ 0x6d
 80080f2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80080f4:	003b      	movs	r3, r7
 80080f6:	2200      	movs	r2, #0
 80080f8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80080fa:	003b      	movs	r3, r7
 80080fc:	2200      	movs	r2, #0
 80080fe:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008100:	003b      	movs	r3, r7
 8008102:	2200      	movs	r2, #0
 8008104:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008106:	003b      	movs	r3, r7
 8008108:	2280      	movs	r2, #128	@ 0x80
 800810a:	0252      	lsls	r2, r2, #9
 800810c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800810e:	003b      	movs	r3, r7
 8008110:	2280      	movs	r2, #128	@ 0x80
 8008112:	04d2      	lsls	r2, r2, #19
 8008114:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008116:	003b      	movs	r3, r7
 8008118:	0018      	movs	r0, r3
 800811a:	f00d fcd1 	bl	8015ac0 <HAL_RCCEx_PeriphCLKConfig>
 800811e:	1e03      	subs	r3, r0, #0
 8008120:	d001      	beq.n	8008126 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8008122:	f000 f8c7 	bl	80082b4 <Error_Handler>
  }
}
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	46bd      	mov	sp, r7
 800812a:	b01d      	add	sp, #116	@ 0x74
 800812c:	bd90      	pop	{r4, r7, pc}
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	40007000 	.word	0x40007000
 8008134:	ffffe7ff 	.word	0xffffe7ff
 8008138:	40021000 	.word	0x40021000

0800813c <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command(){
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 8008140:	4b2f      	ldr	r3, [pc, #188]	@ (8008200 <check_cli_command+0xc4>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	3b61      	subs	r3, #97	@ 0x61
 8008146:	2b13      	cmp	r3, #19
 8008148:	d830      	bhi.n	80081ac <check_cli_command+0x70>
 800814a:	009a      	lsls	r2, r3, #2
 800814c:	4b2d      	ldr	r3, [pc, #180]	@ (8008204 <check_cli_command+0xc8>)
 800814e:	18d3      	adds	r3, r2, r3
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008154:	4b2c      	ldr	r3, [pc, #176]	@ (8008208 <check_cli_command+0xcc>)
 8008156:	0018      	movs	r0, r3
 8008158:	f017 fe94 	bl	801fe84 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800815c:	2003      	movs	r0, #3
 800815e:	f006 f9ab 	bl	800e4b8 <SetVerboseLevel>
      break;
 8008162:	e04a      	b.n	80081fa <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008164:	f7fb fb1a 	bl	800379c <forceNTPupdate>
    break;
 8008168:	e047      	b.n	80081fa <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800816a:	4b28      	ldr	r3, [pc, #160]	@ (800820c <check_cli_command+0xd0>)
 800816c:	0018      	movs	r0, r3
 800816e:	f017 fe89 	bl	801fe84 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008172:	2002      	movs	r0, #2
 8008174:	f006 f9a0 	bl	800e4b8 <SetVerboseLevel>
      break;
 8008178:	e03f      	b.n	80081fa <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800817a:	4b25      	ldr	r3, [pc, #148]	@ (8008210 <check_cli_command+0xd4>)
 800817c:	0018      	movs	r0, r3
 800817e:	f017 fe81 	bl	801fe84 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008182:	2001      	movs	r0, #1
 8008184:	f006 f998 	bl	800e4b8 <SetVerboseLevel>
      break;
 8008188:	e037      	b.n	80081fa <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800818a:	4b22      	ldr	r3, [pc, #136]	@ (8008214 <check_cli_command+0xd8>)
 800818c:	0018      	movs	r0, r3
 800818e:	f017 fe79 	bl	801fe84 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8008192:	2000      	movs	r0, #0
 8008194:	f006 f990 	bl	800e4b8 <SetVerboseLevel>
      break;
 8008198:	e02f      	b.n	80081fa <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800819a:	f006 fd69 	bl	800ec70 <HAL_GetTick>
 800819e:	0002      	movs	r2, r0
 80081a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008218 <check_cli_command+0xdc>)
 80081a2:	601a      	str	r2, [r3, #0]
      break;
 80081a4:	e029      	b.n	80081fa <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80081a6:	f7fe f98f 	bl	80064c8 <showTime>
      break;
 80081aa:	e026      	b.n	80081fa <check_cli_command+0xbe>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80081ac:	4a1b      	ldr	r2, [pc, #108]	@ (800821c <check_cli_command+0xe0>)
 80081ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008220 <check_cli_command+0xe4>)
 80081b0:	0019      	movs	r1, r3
 80081b2:	2001      	movs	r0, #1
 80081b4:	f006 f916 	bl	800e3e4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 80081b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <check_cli_command+0xe8>)
 80081ba:	0018      	movs	r0, r3
 80081bc:	f017 fe62 	bl	801fe84 <puts>
      printf("a - VerboseLevel set to all\r\n");
 80081c0:	4b19      	ldr	r3, [pc, #100]	@ (8008228 <check_cli_command+0xec>)
 80081c2:	0018      	movs	r0, r3
 80081c4:	f017 fe5e 	bl	801fe84 <puts>
      printf("f - Force NTP time synchronization\r\n");
 80081c8:	4b18      	ldr	r3, [pc, #96]	@ (800822c <check_cli_command+0xf0>)
 80081ca:	0018      	movs	r0, r3
 80081cc:	f017 fe5a 	bl	801fe84 <puts>
      printf("i - VerboseLevel set to info\r\n");
 80081d0:	4b17      	ldr	r3, [pc, #92]	@ (8008230 <check_cli_command+0xf4>)
 80081d2:	0018      	movs	r0, r3
 80081d4:	f017 fe56 	bl	801fe84 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80081d8:	4b16      	ldr	r3, [pc, #88]	@ (8008234 <check_cli_command+0xf8>)
 80081da:	0018      	movs	r0, r3
 80081dc:	f017 fe52 	bl	801fe84 <puts>
      printf("n - VerboseLevel set to none\r\n");
 80081e0:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <check_cli_command+0xfc>)
 80081e2:	0018      	movs	r0, r3
 80081e4:	f017 fe4e 	bl	801fe84 <puts>
      printf("s - Start particle measurement\r\n");
 80081e8:	4b14      	ldr	r3, [pc, #80]	@ (800823c <check_cli_command+0x100>)
 80081ea:	0018      	movs	r0, r3
 80081ec:	f017 fe4a 	bl	801fe84 <puts>
      printf("t - Show actual systemtime\r\n");
 80081f0:	4b13      	ldr	r3, [pc, #76]	@ (8008240 <check_cli_command+0x104>)
 80081f2:	0018      	movs	r0, r3
 80081f4:	f017 fe46 	bl	801fe84 <puts>
  break;
 80081f8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000fa8 	.word	0x20000fa8
 8008204:	080253d8 	.word	0x080253d8
 8008208:	08023e9c 	.word	0x08023e9c
 800820c:	08023eb8 	.word	0x08023eb8
 8008210:	08023ed4 	.word	0x08023ed4
 8008214:	08023ef4 	.word	0x08023ef4
 8008218:	20001070 	.word	0x20001070
 800821c:	08023f10 	.word	0x08023f10
 8008220:	08023f40 	.word	0x08023f40
 8008224:	08023f44 	.word	0x08023f44
 8008228:	08023f5c 	.word	0x08023f5c
 800822c:	08023f7c 	.word	0x08023f7c
 8008230:	08023fa0 	.word	0x08023fa0
 8008234:	08023fc0 	.word	0x08023fc0
 8008238:	08023fe4 	.word	0x08023fe4
 800823c:	08024004 	.word	0x08024004
 8008240:	08024024 	.word	0x08024024

08008244 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800824c:	4908      	ldr	r1, [pc, #32]	@ (8008270 <HAL_UART_RxCpltCallback+0x2c>)
 800824e:	4b09      	ldr	r3, [pc, #36]	@ (8008274 <HAL_UART_RxCpltCallback+0x30>)
 8008250:	2201      	movs	r2, #1
 8008252:	0018      	movs	r0, r3
 8008254:	f00e ffd8 	bl	8017208 <HAL_UART_Receive_IT>
  check_cli_command();
 8008258:	f7ff ff70 	bl	800813c <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800825c:	4904      	ldr	r1, [pc, #16]	@ (8008270 <HAL_UART_RxCpltCallback+0x2c>)
 800825e:	4b05      	ldr	r3, [pc, #20]	@ (8008274 <HAL_UART_RxCpltCallback+0x30>)
 8008260:	2201      	movs	r2, #1
 8008262:	0018      	movs	r0, r3
 8008264:	f00e ffd0 	bl	8017208 <HAL_UART_Receive_IT>
}
 8008268:	46c0      	nop			@ (mov r8, r8)
 800826a:	46bd      	mov	sp, r7
 800826c:	b002      	add	sp, #8
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20000fa8 	.word	0x20000fa8
 8008274:	20002180 	.word	0x20002180

08008278 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	0002      	movs	r2, r0
 8008280:	1dbb      	adds	r3, r7, #6
 8008282:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	881a      	ldrh	r2, [r3, #0]
 8008288:	2380      	movs	r3, #128	@ 0x80
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	429a      	cmp	r2, r3
 800828e:	d10b      	bne.n	80082a8 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008290:	f005 fb4c 	bl	800d92c <setuserToggle>
    if (GetPMSensorPresence()) {
 8008294:	f000 f84c 	bl	8008330 <GetPMSensorPresence>
 8008298:	1e03      	subs	r3, r0, #0
 800829a:	d005      	beq.n	80082a8 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800829c:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <HAL_GPIO_EXTI_Callback+0x38>)
 800829e:	2201      	movs	r2, #1
 80082a0:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 80082a2:	2064      	movs	r0, #100	@ 0x64
 80082a4:	f000 fe98 	bl	8008fd8 <setsen5xReadTimer>
    }

  }
}
 80082a8:	46c0      	nop			@ (mov r8, r8)
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b002      	add	sp, #8
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000fc4 	.word	0x20000fc4

080082b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082b8:	b672      	cpsid	i
}
 80082ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 80082bc:	4a05      	ldr	r2, [pc, #20]	@ (80082d4 <Error_Handler+0x20>)
 80082be:	4b06      	ldr	r3, [pc, #24]	@ (80082d8 <Error_Handler+0x24>)
 80082c0:	0019      	movs	r1, r3
 80082c2:	2001      	movs	r0, #1
 80082c4:	f006 f88e 	bl	800e3e4 <CreateLine>
    HAL_Delay(2500);
 80082c8:	4b04      	ldr	r3, [pc, #16]	@ (80082dc <Error_Handler+0x28>)
 80082ca:	0018      	movs	r0, r3
 80082cc:	f006 fcda 	bl	800ec84 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 80082d0:	46c0      	nop			@ (mov r8, r8)
 80082d2:	e7f3      	b.n	80082bc <Error_Handler+0x8>
 80082d4:	08024040 	.word	0x08024040
 80082d8:	08023f40 	.word	0x08023f40
 80082dc:	000009c4 	.word	0x000009c4

080082e0 <testInit>:
};
*/
EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 80082e4:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <testInit+0x48>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 80082ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008328 <testInit+0x48>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 80082f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <testInit+0x48>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 80082f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008328 <testInit+0x48>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008328 <testInit+0x48>)
 80082fe:	2200      	movs	r2, #0
 8008300:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 8008302:	4b09      	ldr	r3, [pc, #36]	@ (8008328 <testInit+0x48>)
 8008304:	2200      	movs	r2, #0
 8008306:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008308:	4b08      	ldr	r3, [pc, #32]	@ (800832c <testInit+0x4c>)
 800830a:	2201      	movs	r2, #1
 800830c:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800830e:	4b07      	ldr	r3, [pc, #28]	@ (800832c <testInit+0x4c>)
 8008310:	2201      	movs	r2, #1
 8008312:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 8008314:	4b05      	ldr	r3, [pc, #20]	@ (800832c <testInit+0x4c>)
 8008316:	2201      	movs	r2, #1
 8008318:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800831a:	4b04      	ldr	r3, [pc, #16]	@ (800832c <testInit+0x4c>)
 800831c:	2201      	movs	r2, #1
 800831e:	70da      	strb	r2, [r3, #3]
}
 8008320:	46c0      	nop			@ (mov r8, r8)
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	20000fc8 	.word	0x20000fc8
 800832c:	20000fc4 	.word	0x20000fc4

08008330 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8008334:	4b02      	ldr	r3, [pc, #8]	@ (8008340 <GetPMSensorPresence+0x10>)
 8008336:	789b      	ldrb	r3, [r3, #2]
}
 8008338:	0018      	movs	r0, r3
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	46c0      	nop			@ (mov r8, r8)
 8008340:	20000fc8 	.word	0x20000fc8

08008344 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 8008348:	4b02      	ldr	r3, [pc, #8]	@ (8008354 <IsSGPPresent+0x10>)
 800834a:	785b      	ldrb	r3, [r3, #1]
}
 800834c:	0018      	movs	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	46c0      	nop			@ (mov r8, r8)
 8008354:	20000fc8 	.word	0x20000fc8

08008358 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	0002      	movs	r2, r0
 8008360:	1dfb      	adds	r3, r7, #7
 8008362:	701a      	strb	r2, [r3, #0]
  SensorProbe.SGP_Enabled = setting;
 8008364:	4b0b      	ldr	r3, [pc, #44]	@ (8008394 <SetVOCSensorDIS_ENA+0x3c>)
 8008366:	1dfa      	adds	r2, r7, #7
 8008368:	7812      	ldrb	r2, [r2, #0]
 800836a:	715a      	strb	r2, [r3, #5]
//  SensorProbe.VOC_Present = setting;
  Sensor.VOC_measurementEnabled = setting;
 800836c:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <SetVOCSensorDIS_ENA+0x40>)
 800836e:	1dfa      	adds	r2, r7, #7
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 8008374:	1dfb      	adds	r3, r7, #7
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <SetVOCSensorDIS_ENA+0x28>
 800837c:	4b07      	ldr	r3, [pc, #28]	@ (800839c <SetVOCSensorDIS_ENA+0x44>)
 800837e:	e000      	b.n	8008382 <SetVOCSensorDIS_ENA+0x2a>
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <SetVOCSensorDIS_ENA+0x48>)
 8008382:	4a08      	ldr	r2, [pc, #32]	@ (80083a4 <SetVOCSensorDIS_ENA+0x4c>)
 8008384:	4908      	ldr	r1, [pc, #32]	@ (80083a8 <SetVOCSensorDIS_ENA+0x50>)
 8008386:	2003      	movs	r0, #3
 8008388:	f006 f82c 	bl	800e3e4 <CreateLine>
}
 800838c:	46c0      	nop			@ (mov r8, r8)
 800838e:	46bd      	mov	sp, r7
 8008390:	b002      	add	sp, #8
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000fc8 	.word	0x20000fc8
 8008398:	20000fc4 	.word	0x20000fc4
 800839c:	0802406c 	.word	0x0802406c
 80083a0:	08024074 	.word	0x08024074
 80083a4:	08024080 	.word	0x08024080
 80083a8:	08024094 	.word	0x08024094

080083ac <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 80083b0:	4b02      	ldr	r3, [pc, #8]	@ (80083bc <IsPMSensorEnabled+0x10>)
 80083b2:	789b      	ldrb	r3, [r3, #2]
}
 80083b4:	0018      	movs	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	46c0      	nop			@ (mov r8, r8)
 80083bc:	20000fc4 	.word	0x20000fc4

080083c0 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	0002      	movs	r2, r0
 80083c8:	1dfb      	adds	r3, r7, #7
 80083ca:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = setting;
 80083cc:	4b03      	ldr	r3, [pc, #12]	@ (80083dc <SetVOCSensorStatus+0x1c>)
 80083ce:	1dfa      	adds	r2, r7, #7
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	705a      	strb	r2, [r3, #1]
}
 80083d4:	46c0      	nop			@ (mov r8, r8)
 80083d6:	46bd      	mov	sp, r7
 80083d8:	b002      	add	sp, #8
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000fc4 	.word	0x20000fc4

080083e0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	0002      	movs	r2, r0
 80083e8:	1dfb      	adds	r3, r7, #7
 80083ea:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 80083ec:	4b03      	ldr	r3, [pc, #12]	@ (80083fc <SetPMSensorStatus+0x1c>)
 80083ee:	1dfa      	adds	r2, r7, #7
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	709a      	strb	r2, [r3, #2]
}
 80083f4:	46c0      	nop			@ (mov r8, r8)
 80083f6:	46bd      	mov	sp, r7
 80083f8:	b002      	add	sp, #8
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000fc4 	.word	0x20000fc4

08008400 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008404:	4b02      	ldr	r3, [pc, #8]	@ (8008410 <SetESPMeasurementDone+0x10>)
 8008406:	2201      	movs	r2, #1
 8008408:	711a      	strb	r2, [r3, #4]
}
 800840a:	46c0      	nop			@ (mov r8, r8)
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20000fc8 	.word	0x20000fc8

08008414 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
  testInit();
 8008422:	f7ff ff5d 	bl	80082e0 <testInit>
  I2CSensors_Init(sensorI2C);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	0018      	movs	r0, r3
 800842a:	f7fd fce3 	bl	8005df4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800842e:	f006 fa0b 	bl	800e848 <HIDS_DeviceConnected>
 8008432:	0003      	movs	r3, r0
 8008434:	001a      	movs	r2, r3
 8008436:	2301      	movs	r3, #1
 8008438:	4053      	eors	r3, r2
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8008440:	4a7f      	ldr	r2, [pc, #508]	@ (8008640 <Device_Init+0x22c>)
 8008442:	4b80      	ldr	r3, [pc, #512]	@ (8008644 <Device_Init+0x230>)
 8008444:	0019      	movs	r1, r3
 8008446:	2001      	movs	r0, #1
 8008448:	f005 ffcc 	bl	800e3e4 <CreateLine>
     SensorProbe.HT_Present = false;
 800844c:	4b7e      	ldr	r3, [pc, #504]	@ (8008648 <Device_Init+0x234>)
 800844e:	2200      	movs	r2, #0
 8008450:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8008452:	4b7e      	ldr	r3, [pc, #504]	@ (800864c <Device_Init+0x238>)
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e008      	b.n	800846c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800845a:	4b7b      	ldr	r3, [pc, #492]	@ (8008648 <Device_Init+0x234>)
 800845c:	2201      	movs	r2, #1
 800845e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008460:	4a7b      	ldr	r2, [pc, #492]	@ (8008650 <Device_Init+0x23c>)
 8008462:	4b7c      	ldr	r3, [pc, #496]	@ (8008654 <Device_Init+0x240>)
 8008464:	0019      	movs	r1, r3
 8008466:	2003      	movs	r0, #3
 8008468:	f005 ffbc 	bl	800e3e4 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800846c:	f003 fbc0 	bl	800bbf0 <SGP_DeviceConnected>
 8008470:	0003      	movs	r3, r0
 8008472:	001a      	movs	r2, r3
 8008474:	2301      	movs	r3, #1
 8008476:	4053      	eors	r3, r2
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00c      	beq.n	8008498 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 800847e:	4b72      	ldr	r3, [pc, #456]	@ (8008648 <Device_Init+0x234>)
 8008480:	2200      	movs	r2, #0
 8008482:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008484:	4a74      	ldr	r2, [pc, #464]	@ (8008658 <Device_Init+0x244>)
 8008486:	4b6f      	ldr	r3, [pc, #444]	@ (8008644 <Device_Init+0x230>)
 8008488:	0019      	movs	r1, r3
 800848a:	2001      	movs	r0, #1
 800848c:	f005 ffaa 	bl	800e3e4 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008490:	4b6e      	ldr	r3, [pc, #440]	@ (800864c <Device_Init+0x238>)
 8008492:	2200      	movs	r2, #0
 8008494:	705a      	strb	r2, [r3, #1]
 8008496:	e00b      	b.n	80084b0 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008498:	4b6b      	ldr	r3, [pc, #428]	@ (8008648 <Device_Init+0x234>)
 800849a:	2201      	movs	r2, #1
 800849c:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 800849e:	4b6a      	ldr	r3, [pc, #424]	@ (8008648 <Device_Init+0x234>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 80084a4:	4a6d      	ldr	r2, [pc, #436]	@ (800865c <Device_Init+0x248>)
 80084a6:	4b6b      	ldr	r3, [pc, #428]	@ (8008654 <Device_Init+0x240>)
 80084a8:	0019      	movs	r1, r3
 80084aa:	2003      	movs	r0, #3
 80084ac:	f005 ff9a 	bl	800e3e4 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 80084b0:	4b65      	ldr	r3, [pc, #404]	@ (8008648 <Device_Init+0x234>)
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d009      	beq.n	80084cc <Device_Init+0xb8>
 80084b8:	4b63      	ldr	r3, [pc, #396]	@ (8008648 <Device_Init+0x234>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <Device_Init+0xb8>
    SetDBLED(false, true, false);
 80084c0:	2200      	movs	r2, #0
 80084c2:	2101      	movs	r1, #1
 80084c4:	2000      	movs	r0, #0
 80084c6:	f004 fe99 	bl	800d1fc <SetDBLED>
 80084ca:	e018      	b.n	80084fe <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	2001      	movs	r0, #1
 80084d2:	f004 fe93 	bl	800d1fc <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80084d6:	4b62      	ldr	r3, [pc, #392]	@ (8008660 <Device_Init+0x24c>)
 80084d8:	2200      	movs	r2, #0
 80084da:	2101      	movs	r1, #1
 80084dc:	0018      	movs	r0, r3
 80084de:	f007 fe58 	bl	8010192 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80084e2:	2380      	movs	r3, #128	@ 0x80
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	485e      	ldr	r0, [pc, #376]	@ (8008660 <Device_Init+0x24c>)
 80084e8:	2201      	movs	r2, #1
 80084ea:	0019      	movs	r1, r3
 80084ec:	f007 fe51 	bl	8010192 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80084f0:	2380      	movs	r3, #128	@ 0x80
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	485a      	ldr	r0, [pc, #360]	@ (8008660 <Device_Init+0x24c>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	0019      	movs	r1, r3
 80084fa:	f007 fe4a 	bl	8010192 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80084fe:	4b53      	ldr	r3, [pc, #332]	@ (800864c <Device_Init+0x238>)
 8008500:	78db      	ldrb	r3, [r3, #3]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d028      	beq.n	8008558 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 8008506:	4a57      	ldr	r2, [pc, #348]	@ (8008664 <Device_Init+0x250>)
 8008508:	4b57      	ldr	r3, [pc, #348]	@ (8008668 <Device_Init+0x254>)
 800850a:	0019      	movs	r1, r3
 800850c:	2002      	movs	r0, #2
 800850e:	f005 ff69 	bl	800e3e4 <CreateLine>
    if (!enableMicrophone(true)) {
 8008512:	2001      	movs	r0, #1
 8008514:	f003 ff70 	bl	800c3f8 <enableMicrophone>
 8008518:	0003      	movs	r3, r0
 800851a:	001a      	movs	r2, r3
 800851c:	2301      	movs	r3, #1
 800851e:	4053      	eors	r3, r2
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00c      	beq.n	8008540 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 8008526:	4a51      	ldr	r2, [pc, #324]	@ (800866c <Device_Init+0x258>)
 8008528:	4b46      	ldr	r3, [pc, #280]	@ (8008644 <Device_Init+0x230>)
 800852a:	0019      	movs	r1, r3
 800852c:	2001      	movs	r0, #1
 800852e:	f005 ff59 	bl	800e3e4 <CreateLine>
      SensorProbe.MIC_Present = false;
 8008532:	4b45      	ldr	r3, [pc, #276]	@ (8008648 <Device_Init+0x234>)
 8008534:	2200      	movs	r2, #0
 8008536:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8008538:	4b44      	ldr	r3, [pc, #272]	@ (800864c <Device_Init+0x238>)
 800853a:	2200      	movs	r2, #0
 800853c:	70da      	strb	r2, [r3, #3]
 800853e:	e00b      	b.n	8008558 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008540:	4b41      	ldr	r3, [pc, #260]	@ (8008648 <Device_Init+0x234>)
 8008542:	2201      	movs	r2, #1
 8008544:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008546:	4b41      	ldr	r3, [pc, #260]	@ (800864c <Device_Init+0x238>)
 8008548:	2201      	movs	r2, #1
 800854a:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800854c:	4a48      	ldr	r2, [pc, #288]	@ (8008670 <Device_Init+0x25c>)
 800854e:	4b41      	ldr	r3, [pc, #260]	@ (8008654 <Device_Init+0x240>)
 8008550:	0019      	movs	r1, r3
 8008552:	2003      	movs	r0, #3
 8008554:	f005 ff46 	bl	800e3e4 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8008558:	f000 fe08 	bl	800916c <probe_sen5x>
 800855c:	1e03      	subs	r3, r0, #0
 800855e:	d122      	bne.n	80085a6 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008560:	4a44      	ldr	r2, [pc, #272]	@ (8008674 <Device_Init+0x260>)
 8008562:	4b3c      	ldr	r3, [pc, #240]	@ (8008654 <Device_Init+0x240>)
 8008564:	0019      	movs	r1, r3
 8008566:	2003      	movs	r0, #3
 8008568:	f005 ff3c 	bl	800e3e4 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800856c:	4b36      	ldr	r3, [pc, #216]	@ (8008648 <Device_Init+0x234>)
 800856e:	2201      	movs	r2, #1
 8008570:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008572:	4b36      	ldr	r3, [pc, #216]	@ (800864c <Device_Init+0x238>)
 8008574:	2201      	movs	r2, #1
 8008576:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8008578:	4b3f      	ldr	r3, [pc, #252]	@ (8008678 <Device_Init+0x264>)
 800857a:	791b      	ldrb	r3, [r3, #4]
 800857c:	2b34      	cmp	r3, #52	@ 0x34
 800857e:	d003      	beq.n	8008588 <Device_Init+0x174>
 8008580:	4b3d      	ldr	r3, [pc, #244]	@ (8008678 <Device_Init+0x264>)
 8008582:	791b      	ldrb	r3, [r3, #4]
 8008584:	2b35      	cmp	r3, #53	@ 0x35
 8008586:	d11c      	bne.n	80085c2 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008588:	4a3c      	ldr	r2, [pc, #240]	@ (800867c <Device_Init+0x268>)
 800858a:	4b37      	ldr	r3, [pc, #220]	@ (8008668 <Device_Init+0x254>)
 800858c:	0019      	movs	r1, r3
 800858e:	2002      	movs	r0, #2
 8008590:	f005 ff28 	bl	800e3e4 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008594:	4b2d      	ldr	r3, [pc, #180]	@ (800864c <Device_Init+0x238>)
 8008596:	2200      	movs	r2, #0
 8008598:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800859a:	4b2b      	ldr	r3, [pc, #172]	@ (8008648 <Device_Init+0x234>)
 800859c:	2200      	movs	r2, #0
 800859e:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 80085a0:	f003 fd0a 	bl	800bfb8 <SGP_SoftReset>
 80085a4:	e00d      	b.n	80085c2 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 80085a6:	f000 fdab 	bl	8009100 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 80085aa:	4a35      	ldr	r2, [pc, #212]	@ (8008680 <Device_Init+0x26c>)
 80085ac:	4b29      	ldr	r3, [pc, #164]	@ (8008654 <Device_Init+0x240>)
 80085ae:	0019      	movs	r1, r3
 80085b0:	2003      	movs	r0, #3
 80085b2:	f005 ff17 	bl	800e3e4 <CreateLine>
    SensorProbe.PM_Present = false;
 80085b6:	4b24      	ldr	r3, [pc, #144]	@ (8008648 <Device_Init+0x234>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 80085bc:	4b23      	ldr	r3, [pc, #140]	@ (800864c <Device_Init+0x238>)
 80085be:	2200      	movs	r2, #0
 80085c0:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 80085c2:	4b21      	ldr	r3, [pc, #132]	@ (8008648 <Device_Init+0x234>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <Device_Init+0x1ba>
 80085ca:	4b2e      	ldr	r3, [pc, #184]	@ (8008684 <Device_Init+0x270>)
 80085cc:	e000      	b.n	80085d0 <Device_Init+0x1bc>
 80085ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008688 <Device_Init+0x274>)
 80085d0:	4a2e      	ldr	r2, [pc, #184]	@ (800868c <Device_Init+0x278>)
 80085d2:	4925      	ldr	r1, [pc, #148]	@ (8008668 <Device_Init+0x254>)
 80085d4:	2002      	movs	r0, #2
 80085d6:	f005 ff05 	bl	800e3e4 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 80085da:	4b1b      	ldr	r3, [pc, #108]	@ (8008648 <Device_Init+0x234>)
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <Device_Init+0x1d2>
 80085e2:	4b28      	ldr	r3, [pc, #160]	@ (8008684 <Device_Init+0x270>)
 80085e4:	e000      	b.n	80085e8 <Device_Init+0x1d4>
 80085e6:	4b28      	ldr	r3, [pc, #160]	@ (8008688 <Device_Init+0x274>)
 80085e8:	4a29      	ldr	r2, [pc, #164]	@ (8008690 <Device_Init+0x27c>)
 80085ea:	491f      	ldr	r1, [pc, #124]	@ (8008668 <Device_Init+0x254>)
 80085ec:	2002      	movs	r0, #2
 80085ee:	f005 fef9 	bl	800e3e4 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80085f2:	4b15      	ldr	r3, [pc, #84]	@ (8008648 <Device_Init+0x234>)
 80085f4:	789b      	ldrb	r3, [r3, #2]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <Device_Init+0x1ea>
 80085fa:	4b22      	ldr	r3, [pc, #136]	@ (8008684 <Device_Init+0x270>)
 80085fc:	e000      	b.n	8008600 <Device_Init+0x1ec>
 80085fe:	4b22      	ldr	r3, [pc, #136]	@ (8008688 <Device_Init+0x274>)
 8008600:	4a24      	ldr	r2, [pc, #144]	@ (8008694 <Device_Init+0x280>)
 8008602:	4919      	ldr	r1, [pc, #100]	@ (8008668 <Device_Init+0x254>)
 8008604:	2002      	movs	r0, #2
 8008606:	f005 feed 	bl	800e3e4 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800860a:	4b0f      	ldr	r3, [pc, #60]	@ (8008648 <Device_Init+0x234>)
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <Device_Init+0x202>
 8008612:	4b1c      	ldr	r3, [pc, #112]	@ (8008684 <Device_Init+0x270>)
 8008614:	e000      	b.n	8008618 <Device_Init+0x204>
 8008616:	4b1c      	ldr	r3, [pc, #112]	@ (8008688 <Device_Init+0x274>)
 8008618:	4a1f      	ldr	r2, [pc, #124]	@ (8008698 <Device_Init+0x284>)
 800861a:	4913      	ldr	r1, [pc, #76]	@ (8008668 <Device_Init+0x254>)
 800861c:	2002      	movs	r0, #2
 800861e:	f005 fee1 	bl	800e3e4 <CreateLine>
  ESP_Init(espUart);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	0018      	movs	r0, r3
 8008626:	f7fb fa59 	bl	8003adc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800862a:	4a1c      	ldr	r2, [pc, #112]	@ (800869c <Device_Init+0x288>)
 800862c:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <Device_Init+0x240>)
 800862e:	0019      	movs	r1, r3
 8008630:	2003      	movs	r0, #3
 8008632:	f005 fed7 	bl	800e3e4 <CreateLine>
}
 8008636:	46c0      	nop			@ (mov r8, r8)
 8008638:	46bd      	mov	sp, r7
 800863a:	b004      	add	sp, #16
 800863c:	bd80      	pop	{r7, pc}
 800863e:	46c0      	nop			@ (mov r8, r8)
 8008640:	08024098 	.word	0x08024098
 8008644:	080240c8 	.word	0x080240c8
 8008648:	20000fc8 	.word	0x20000fc8
 800864c:	20000fc4 	.word	0x20000fc4
 8008650:	080240cc 	.word	0x080240cc
 8008654:	08024094 	.word	0x08024094
 8008658:	080240f8 	.word	0x080240f8
 800865c:	08024114 	.word	0x08024114
 8008660:	50000400 	.word	0x50000400
 8008664:	0802412c 	.word	0x0802412c
 8008668:	08024150 	.word	0x08024150
 800866c:	08024154 	.word	0x08024154
 8008670:	08024180 	.word	0x08024180
 8008674:	080241ac 	.word	0x080241ac
 8008678:	2000105c 	.word	0x2000105c
 800867c:	080241c4 	.word	0x080241c4
 8008680:	08024214 	.word	0x08024214
 8008684:	08024238 	.word	0x08024238
 8008688:	0802423c 	.word	0x0802423c
 800868c:	08024240 	.word	0x08024240
 8008690:	0802425c 	.word	0x0802425c
 8008694:	08024278 	.word	0x08024278
 8008698:	08024294 	.word	0x08024294
 800869c:	080242b0 	.word	0x080242b0

080086a0 <Device_Test>:

void Device_Test(){
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 80086a4:	4b34      	ldr	r3, [pc, #208]	@ (8008778 <Device_Test+0xd8>)
 80086a6:	78db      	ldrb	r3, [r3, #3]
 80086a8:	2201      	movs	r2, #1
 80086aa:	4053      	eors	r3, r2
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d027      	beq.n	8008702 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 80086b2:	f000 fab5 	bl	8008c20 <MIC_TestMeasurementDone>
 80086b6:	1e03      	subs	r3, r0, #0
 80086b8:	d011      	beq.n	80086de <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 80086ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008778 <Device_Test+0xd8>)
 80086bc:	2201      	movs	r2, #1
 80086be:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80086c0:	4b2e      	ldr	r3, [pc, #184]	@ (800877c <Device_Test+0xdc>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 80086c6:	f004 fd1d 	bl	800d104 <Calculate_LED_ON>
 80086ca:	0003      	movs	r3, r0
 80086cc:	0019      	movs	r1, r3
 80086ce:	23fa      	movs	r3, #250	@ 0xfa
 80086d0:	011a      	lsls	r2, r3, #4
 80086d2:	23fa      	movs	r3, #250	@ 0xfa
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	0018      	movs	r0, r3
 80086d8:	f004 fd5c 	bl	800d194 <SetStatusLED>
 80086dc:	e011      	b.n	8008702 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 80086de:	f003 fe67 	bl	800c3b0 <micSettlingComplete>
 80086e2:	1e03      	subs	r3, r0, #0
 80086e4:	d00d      	beq.n	8008702 <Device_Test+0x62>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 80086e6:	4b25      	ldr	r3, [pc, #148]	@ (800877c <Device_Test+0xdc>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 80086ec:	f004 fd0a 	bl	800d104 <Calculate_LED_ON>
 80086f0:	0003      	movs	r3, r0
 80086f2:	0018      	movs	r0, r3
 80086f4:	23fa      	movs	r3, #250	@ 0xfa
 80086f6:	011a      	lsls	r2, r3, #4
 80086f8:	23fa      	movs	r3, #250	@ 0xfa
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	0019      	movs	r1, r3
 80086fe:	f004 fd49 	bl	800d194 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 8008702:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <Device_Test+0xd8>)
 8008704:	791b      	ldrb	r3, [r3, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	4053      	eors	r3, r2
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 8008710:	f7fc fdb6 	bl	8005280 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008714:	4b18      	ldr	r3, [pc, #96]	@ (8008778 <Device_Test+0xd8>)
 8008716:	791b      	ldrb	r3, [r3, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <Device_Test+0x84>
 800871c:	4b16      	ldr	r3, [pc, #88]	@ (8008778 <Device_Test+0xd8>)
 800871e:	78db      	ldrb	r3, [r3, #3]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <Device_Test+0x92>
 8008724:	4b16      	ldr	r3, [pc, #88]	@ (8008780 <Device_Test+0xe0>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	0018      	movs	r0, r3
 800872a:	f005 fe05 	bl	800e338 <TimestampIsReached>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d01f      	beq.n	8008772 <Device_Test+0xd2>
    Info("Test completed");
 8008732:	4a14      	ldr	r2, [pc, #80]	@ (8008784 <Device_Test+0xe4>)
 8008734:	4b14      	ldr	r3, [pc, #80]	@ (8008788 <Device_Test+0xe8>)
 8008736:	0019      	movs	r1, r3
 8008738:	2002      	movs	r0, #2
 800873a:	f005 fe53 	bl	800e3e4 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800873e:	4b0e      	ldr	r3, [pc, #56]	@ (8008778 <Device_Test+0xd8>)
 8008740:	791b      	ldrb	r3, [r3, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <Device_Test+0xaa>
 8008746:	4b11      	ldr	r3, [pc, #68]	@ (800878c <Device_Test+0xec>)
 8008748:	e000      	b.n	800874c <Device_Test+0xac>
 800874a:	4b11      	ldr	r3, [pc, #68]	@ (8008790 <Device_Test+0xf0>)
 800874c:	4a11      	ldr	r2, [pc, #68]	@ (8008794 <Device_Test+0xf4>)
 800874e:	490e      	ldr	r1, [pc, #56]	@ (8008788 <Device_Test+0xe8>)
 8008750:	2002      	movs	r0, #2
 8008752:	f005 fe47 	bl	800e3e4 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 8008756:	4b08      	ldr	r3, [pc, #32]	@ (8008778 <Device_Test+0xd8>)
 8008758:	78db      	ldrb	r3, [r3, #3]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <Device_Test+0xc2>
 800875e:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <Device_Test+0xec>)
 8008760:	e000      	b.n	8008764 <Device_Test+0xc4>
 8008762:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <Device_Test+0xf0>)
 8008764:	4a0c      	ldr	r2, [pc, #48]	@ (8008798 <Device_Test+0xf8>)
 8008766:	4908      	ldr	r1, [pc, #32]	@ (8008788 <Device_Test+0xe8>)
 8008768:	2002      	movs	r0, #2
 800876a:	f005 fe3b 	bl	800e3e4 <CreateLine>
    SetTestDone();
 800876e:	f7ff f9ef 	bl	8007b50 <SetTestDone>
  }
}
 8008772:	46c0      	nop			@ (mov r8, r8)
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20000fc8 	.word	0x20000fc8
 800877c:	20000fc4 	.word	0x20000fc4
 8008780:	20000fb8 	.word	0x20000fb8
 8008784:	080242d4 	.word	0x080242d4
 8008788:	08024150 	.word	0x08024150
 800878c:	080242e4 	.word	0x080242e4
 8008790:	080242ec 	.word	0x080242ec
 8008794:	080242f4 	.word	0x080242f4
 8008798:	08024308 	.word	0x08024308

0800879c <AllDevicesReady>:

bool AllDevicesReady() {
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 80087a0:	4b2a      	ldr	r3, [pc, #168]	@ (800884c <AllDevicesReady+0xb0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	0018      	movs	r0, r3
 80087a6:	f005 fdc7 	bl	800e338 <TimestampIsReached>
 80087aa:	1e03      	subs	r3, r0, #0
 80087ac:	d04a      	beq.n	8008844 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 80087ae:	4b28      	ldr	r3, [pc, #160]	@ (8008850 <AllDevicesReady+0xb4>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b06      	cmp	r3, #6
 80087b4:	d102      	bne.n	80087bc <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 80087b6:	4b27      	ldr	r3, [pc, #156]	@ (8008854 <AllDevicesReady+0xb8>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 80087bc:	4b26      	ldr	r3, [pc, #152]	@ (8008858 <AllDevicesReady+0xbc>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	d006      	beq.n	80087d2 <AllDevicesReady+0x36>
 80087c4:	4b25      	ldr	r3, [pc, #148]	@ (800885c <AllDevicesReady+0xc0>)
 80087c6:	795b      	ldrb	r3, [r3, #5]
 80087c8:	2201      	movs	r2, #1
 80087ca:	4053      	eors	r3, r2
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 80087d2:	4b20      	ldr	r3, [pc, #128]	@ (8008854 <AllDevicesReady+0xb8>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 80087d8:	4b21      	ldr	r3, [pc, #132]	@ (8008860 <AllDevicesReady+0xc4>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d102      	bne.n	80087e6 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 80087e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008854 <AllDevicesReady+0xb8>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 80087e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008864 <AllDevicesReady+0xc8>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d102      	bne.n	80087f4 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 80087ee:	4b19      	ldr	r3, [pc, #100]	@ (8008854 <AllDevicesReady+0xb8>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 80087f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008868 <AllDevicesReady+0xcc>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d123      	bne.n	8008844 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80087fc:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <AllDevicesReady+0xb8>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2201      	movs	r2, #1
 8008802:	4053      	eors	r3, r2
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d016      	beq.n	8008838 <AllDevicesReady+0x9c>
 800880a:	4b12      	ldr	r3, [pc, #72]	@ (8008854 <AllDevicesReady+0xb8>)
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	2201      	movs	r2, #1
 8008810:	4053      	eors	r3, r2
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00f      	beq.n	8008838 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008818:	4b0e      	ldr	r3, [pc, #56]	@ (8008854 <AllDevicesReady+0xb8>)
 800881a:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800881c:	2201      	movs	r2, #1
 800881e:	4053      	eors	r3, r2
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d008      	beq.n	8008838 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008826:	4b0b      	ldr	r3, [pc, #44]	@ (8008854 <AllDevicesReady+0xb8>)
 8008828:	78db      	ldrb	r3, [r3, #3]
 800882a:	2201      	movs	r2, #1
 800882c:	4053      	eors	r3, r2
 800882e:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <AllDevicesReady+0x9c>
 8008834:	2301      	movs	r3, #1
 8008836:	e000      	b.n	800883a <AllDevicesReady+0x9e>
 8008838:	2300      	movs	r3, #0
 800883a:	1c1a      	adds	r2, r3, #0
 800883c:	2301      	movs	r3, #1
 800883e:	4013      	ands	r3, r2
 8008840:	b2db      	uxtb	r3, r3
 8008842:	e000      	b.n	8008846 <AllDevicesReady+0xaa>
    }
  }
  return false;
 8008844:	2300      	movs	r3, #0
}
 8008846:	0018      	movs	r0, r3
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000fb8 	.word	0x20000fb8
 8008850:	20000fa5 	.word	0x20000fa5
 8008854:	20000fc4 	.word	0x20000fc4
 8008858:	20000fa4 	.word	0x20000fa4
 800885c:	20000fc8 	.word	0x20000fc8
 8008860:	20000082 	.word	0x20000082
 8008864:	20000fa6 	.word	0x20000fa6
 8008868:	20000fa7 	.word	0x20000fa7

0800886c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008870:	4b11      	ldr	r3, [pc, #68]	@ (80088b8 <EnabledConnectedDevices+0x4c>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008878:	4b10      	ldr	r3, [pc, #64]	@ (80088bc <EnabledConnectedDevices+0x50>)
 800887a:	2201      	movs	r2, #1
 800887c:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800887e:	4b0e      	ldr	r3, [pc, #56]	@ (80088b8 <EnabledConnectedDevices+0x4c>)
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d006      	beq.n	8008894 <EnabledConnectedDevices+0x28>
 8008886:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <EnabledConnectedDevices+0x4c>)
 8008888:	795b      	ldrb	r3, [r3, #5]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 800888e:	4b0b      	ldr	r3, [pc, #44]	@ (80088bc <EnabledConnectedDevices+0x50>)
 8008890:	2201      	movs	r2, #1
 8008892:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008894:	4b08      	ldr	r3, [pc, #32]	@ (80088b8 <EnabledConnectedDevices+0x4c>)
 8008896:	789b      	ldrb	r3, [r3, #2]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <EnabledConnectedDevices+0x50>)
 800889e:	2201      	movs	r2, #1
 80088a0:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 80088a2:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <EnabledConnectedDevices+0x4c>)
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 80088aa:	4b04      	ldr	r3, [pc, #16]	@ (80088bc <EnabledConnectedDevices+0x50>)
 80088ac:	2201      	movs	r2, #1
 80088ae:	70da      	strb	r2, [r3, #3]
  }
}
 80088b0:	46c0      	nop			@ (mov r8, r8)
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	46c0      	nop			@ (mov r8, r8)
 80088b8:	20000fc8 	.word	0x20000fc8
 80088bc:	20000fc4 	.word	0x20000fc4

080088c0 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 80088c4:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <DisableConnectedDevices+0x30>)
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <DisableConnectedDevices+0x34>)
 80088c8:	0019      	movs	r1, r3
 80088ca:	2003      	movs	r0, #3
 80088cc:	f005 fd8a 	bl	800e3e4 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 80088d0:	4b09      	ldr	r3, [pc, #36]	@ (80088f8 <DisableConnectedDevices+0x38>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 80088d6:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <DisableConnectedDevices+0x38>)
 80088d8:	2200      	movs	r2, #0
 80088da:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 80088dc:	4b06      	ldr	r3, [pc, #24]	@ (80088f8 <DisableConnectedDevices+0x38>)
 80088de:	2200      	movs	r2, #0
 80088e0:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 80088e2:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <DisableConnectedDevices+0x38>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	70da      	strb	r2, [r3, #3]
}
 80088e8:	46c0      	nop			@ (mov r8, r8)
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	0802431c 	.word	0x0802431c
 80088f4:	08024094 	.word	0x08024094
 80088f8:	20000fc4 	.word	0x20000fc4

080088fc <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 8008900:	4b02      	ldr	r3, [pc, #8]	@ (800890c <ResetdBAmax+0x10>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
}
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20001014 	.word	0x20001014

08008910 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008918:	f006 f9aa 	bl	800ec70 <HAL_GetTick>
 800891c:	0002      	movs	r2, r0
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	18d2      	adds	r2, r2, r3
 8008922:	4b03      	ldr	r3, [pc, #12]	@ (8008930 <setMICTimeStamp+0x20>)
 8008924:	601a      	str	r2, [r3, #0]
}
 8008926:	46c0      	nop			@ (mov r8, r8)
 8008928:	46bd      	mov	sp, r7
 800892a:	b002      	add	sp, #8
 800892c:	bd80      	pop	{r7, pc}
 800892e:	46c0      	nop			@ (mov r8, r8)
 8008930:	2000101c 	.word	0x2000101c

08008934 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  counter = 0;
 8008938:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <ResetDBACalculator+0x1c>)
 800893a:	2200      	movs	r2, #0
 800893c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800893e:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <ResetDBACalculator+0x20>)
 8008940:	2201      	movs	r2, #1
 8008942:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008944:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <ResetDBACalculator+0x24>)
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
}
 800894a:	46c0      	nop			@ (mov r8, r8)
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20001018 	.word	0x20001018
 8008954:	20000081 	.word	0x20000081
 8008958:	20001019 	.word	0x20001019

0800895c <MIC_Print>:

void MIC_Print(void) {
 800895c:	b5b0      	push	{r4, r5, r7, lr}
 800895e:	b08a      	sub	sp, #40	@ 0x28
 8008960:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008962:	4b9d      	ldr	r3, [pc, #628]	@ (8008bd8 <MIC_Print+0x27c>)
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4b9d      	ldr	r3, [pc, #628]	@ (8008bdc <MIC_Print+0x280>)
 8008968:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800896a:	4b9d      	ldr	r3, [pc, #628]	@ (8008be0 <MIC_Print+0x284>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	001a      	movs	r2, r3
 8008970:	4b9a      	ldr	r3, [pc, #616]	@ (8008bdc <MIC_Print+0x280>)
 8008972:	6819      	ldr	r1, [r3, #0]
 8008974:	4b9b      	ldr	r3, [pc, #620]	@ (8008be4 <MIC_Print+0x288>)
 8008976:	0092      	lsls	r2, r2, #2
 8008978:	50d1      	str	r1, [r2, r3]
  counter++;
 800897a:	4b99      	ldr	r3, [pc, #612]	@ (8008be0 <MIC_Print+0x284>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	4b97      	ldr	r3, [pc, #604]	@ (8008be0 <MIC_Print+0x284>)
 8008984:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008986:	4b96      	ldr	r3, [pc, #600]	@ (8008be0 <MIC_Print+0x284>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b09      	cmp	r3, #9
 800898c:	d80b      	bhi.n	80089a6 <MIC_Print+0x4a>
 800898e:	4b96      	ldr	r3, [pc, #600]	@ (8008be8 <MIC_Print+0x28c>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	4053      	eors	r3, r2
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <MIC_Print+0x4a>
    denominator = counter;
 800899c:	4b90      	ldr	r3, [pc, #576]	@ (8008be0 <MIC_Print+0x284>)
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	4b92      	ldr	r3, [pc, #584]	@ (8008bec <MIC_Print+0x290>)
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	e005      	b.n	80089b2 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 80089a6:	4b91      	ldr	r3, [pc, #580]	@ (8008bec <MIC_Print+0x290>)
 80089a8:	220a      	movs	r2, #10
 80089aa:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 80089ac:	4b8e      	ldr	r3, [pc, #568]	@ (8008be8 <MIC_Print+0x28c>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 80089b2:	4b8f      	ldr	r3, [pc, #572]	@ (8008bf0 <MIC_Print+0x294>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 80089b8:	230f      	movs	r3, #15
 80089ba:	18fb      	adds	r3, r7, r3
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	e03e      	b.n	8008a40 <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 80089c2:	240f      	movs	r4, #15
 80089c4:	193b      	adds	r3, r7, r4
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	4b86      	ldr	r3, [pc, #536]	@ (8008be4 <MIC_Print+0x288>)
 80089ca:	0092      	lsls	r2, r2, #2
 80089cc:	58d2      	ldr	r2, [r2, r3]
 80089ce:	4b88      	ldr	r3, [pc, #544]	@ (8008bf0 <MIC_Print+0x294>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	1c19      	adds	r1, r3, #0
 80089d4:	1c10      	adds	r0, r2, #0
 80089d6:	f7f7 ff73 	bl	80008c0 <__aeabi_fadd>
 80089da:	1c03      	adds	r3, r0, #0
 80089dc:	1c1a      	adds	r2, r3, #0
 80089de:	4b84      	ldr	r3, [pc, #528]	@ (8008bf0 <MIC_Print+0x294>)
 80089e0:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 80089e2:	193b      	adds	r3, r7, r4
 80089e4:	781a      	ldrb	r2, [r3, #0]
 80089e6:	4b7f      	ldr	r3, [pc, #508]	@ (8008be4 <MIC_Print+0x288>)
 80089e8:	0092      	lsls	r2, r2, #2
 80089ea:	58d2      	ldr	r2, [r2, r3]
 80089ec:	4b81      	ldr	r3, [pc, #516]	@ (8008bf4 <MIC_Print+0x298>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	1c19      	adds	r1, r3, #0
 80089f2:	1c10      	adds	r0, r2, #0
 80089f4:	f7f7 fdb0 	bl	8000558 <__aeabi_fcmpgt>
 80089f8:	1e03      	subs	r3, r0, #0
 80089fa:	d006      	beq.n	8008a0a <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 80089fc:	193b      	adds	r3, r7, r4
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	4b78      	ldr	r3, [pc, #480]	@ (8008be4 <MIC_Print+0x288>)
 8008a02:	0092      	lsls	r2, r2, #2
 8008a04:	58d2      	ldr	r2, [r2, r3]
 8008a06:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf4 <MIC_Print+0x298>)
 8008a08:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008a0a:	4b79      	ldr	r3, [pc, #484]	@ (8008bf0 <MIC_Print+0x294>)
 8008a0c:	681c      	ldr	r4, [r3, #0]
 8008a0e:	4b77      	ldr	r3, [pc, #476]	@ (8008bec <MIC_Print+0x290>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	0018      	movs	r0, r3
 8008a14:	f7f8 fe28 	bl	8001668 <__aeabi_ui2f>
 8008a18:	1c03      	adds	r3, r0, #0
 8008a1a:	1c19      	adds	r1, r3, #0
 8008a1c:	1c20      	adds	r0, r4, #0
 8008a1e:	f7f8 f8d9 	bl	8000bd4 <__aeabi_fdiv>
 8008a22:	1c03      	adds	r3, r0, #0
 8008a24:	1c1a      	adds	r2, r3, #0
 8008a26:	4b74      	ldr	r3, [pc, #464]	@ (8008bf8 <MIC_Print+0x29c>)
 8008a28:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 8008a2a:	4b72      	ldr	r3, [pc, #456]	@ (8008bf4 <MIC_Print+0x298>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	1c18      	adds	r0, r3, #0
 8008a30:	f7fa ff98 	bl	8003964 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008a34:	210f      	movs	r1, #15
 8008a36:	187b      	adds	r3, r7, r1
 8008a38:	781a      	ldrb	r2, [r3, #0]
 8008a3a:	187b      	adds	r3, r7, r1
 8008a3c:	3201      	adds	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	4b6a      	ldr	r3, [pc, #424]	@ (8008bec <MIC_Print+0x290>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	220f      	movs	r2, #15
 8008a46:	18ba      	adds	r2, r7, r2
 8008a48:	7812      	ldrb	r2, [r2, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d3b9      	bcc.n	80089c2 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008a4e:	4b63      	ldr	r3, [pc, #396]	@ (8008bdc <MIC_Print+0x280>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	1c18      	adds	r0, r3, #0
 8008a54:	f7fa fd06 	bl	8003464 <__aeabi_f2d>
 8008a58:	6038      	str	r0, [r7, #0]
 8008a5a:	6079      	str	r1, [r7, #4]
 8008a5c:	4b65      	ldr	r3, [pc, #404]	@ (8008bf4 <MIC_Print+0x298>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	1c18      	adds	r0, r3, #0
 8008a62:	f7fa fcff 	bl	8003464 <__aeabi_f2d>
 8008a66:	0004      	movs	r4, r0
 8008a68:	000d      	movs	r5, r1
 8008a6a:	4b63      	ldr	r3, [pc, #396]	@ (8008bf8 <MIC_Print+0x29c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	1c18      	adds	r0, r3, #0
 8008a70:	f7fa fcf8 	bl	8003464 <__aeabi_f2d>
 8008a74:	0002      	movs	r2, r0
 8008a76:	000b      	movs	r3, r1
 8008a78:	4960      	ldr	r1, [pc, #384]	@ (8008bfc <MIC_Print+0x2a0>)
 8008a7a:	9204      	str	r2, [sp, #16]
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	9402      	str	r4, [sp, #8]
 8008a80:	9503      	str	r5, [sp, #12]
 8008a82:	4b5f      	ldr	r3, [pc, #380]	@ (8008c00 <MIC_Print+0x2a4>)
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	0008      	movs	r0, r1
 8008a8c:	f017 f994 	bl	801fdb8 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008a90:	4b53      	ldr	r3, [pc, #332]	@ (8008be0 <MIC_Print+0x284>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b0a      	cmp	r3, #10
 8008a96:	d902      	bls.n	8008a9e <MIC_Print+0x142>
    counter = 0;
 8008a98:	4b51      	ldr	r3, [pc, #324]	@ (8008be0 <MIC_Print+0x284>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008a9e:	4b4f      	ldr	r3, [pc, #316]	@ (8008bdc <MIC_Print+0x280>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4958      	ldr	r1, [pc, #352]	@ (8008c04 <MIC_Print+0x2a8>)
 8008aa4:	1c18      	adds	r0, r3, #0
 8008aa6:	f7f7 fd61 	bl	800056c <__aeabi_fcmpge>
 8008aaa:	1e03      	subs	r3, r0, #0
 8008aac:	d004      	beq.n	8008ab8 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 8008aae:	2201      	movs	r2, #1
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	f004 fba2 	bl	800d1fc <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008ab8:	4b48      	ldr	r3, [pc, #288]	@ (8008bdc <MIC_Print+0x280>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4952      	ldr	r1, [pc, #328]	@ (8008c08 <MIC_Print+0x2ac>)
 8008abe:	1c18      	adds	r0, r3, #0
 8008ac0:	f7f7 fd54 	bl	800056c <__aeabi_fcmpge>
 8008ac4:	1e03      	subs	r3, r0, #0
 8008ac6:	d00c      	beq.n	8008ae2 <MIC_Print+0x186>
 8008ac8:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <MIC_Print+0x280>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	494d      	ldr	r1, [pc, #308]	@ (8008c04 <MIC_Print+0x2a8>)
 8008ace:	1c18      	adds	r0, r3, #0
 8008ad0:	f7f7 fd2e 	bl	8000530 <__aeabi_fcmplt>
 8008ad4:	1e03      	subs	r3, r0, #0
 8008ad6:	d004      	beq.n	8008ae2 <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	2001      	movs	r0, #1
 8008ade:	f004 fb8d 	bl	800d1fc <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8008bdc <MIC_Print+0x280>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4949      	ldr	r1, [pc, #292]	@ (8008c0c <MIC_Print+0x2b0>)
 8008ae8:	1c18      	adds	r0, r3, #0
 8008aea:	f7f7 fd3f 	bl	800056c <__aeabi_fcmpge>
 8008aee:	1e03      	subs	r3, r0, #0
 8008af0:	d00c      	beq.n	8008b0c <MIC_Print+0x1b0>
 8008af2:	4b3a      	ldr	r3, [pc, #232]	@ (8008bdc <MIC_Print+0x280>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4944      	ldr	r1, [pc, #272]	@ (8008c08 <MIC_Print+0x2ac>)
 8008af8:	1c18      	adds	r0, r3, #0
 8008afa:	f7f7 fd19 	bl	8000530 <__aeabi_fcmplt>
 8008afe:	1e03      	subs	r3, r0, #0
 8008b00:	d004      	beq.n	8008b0c <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 8008b02:	2200      	movs	r2, #0
 8008b04:	2101      	movs	r1, #1
 8008b06:	2001      	movs	r0, #1
 8008b08:	f004 fb78 	bl	800d1fc <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008b0c:	4b33      	ldr	r3, [pc, #204]	@ (8008bdc <MIC_Print+0x280>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	493f      	ldr	r1, [pc, #252]	@ (8008c10 <MIC_Print+0x2b4>)
 8008b12:	1c18      	adds	r0, r3, #0
 8008b14:	f7f7 fd2a 	bl	800056c <__aeabi_fcmpge>
 8008b18:	1e03      	subs	r3, r0, #0
 8008b1a:	d00c      	beq.n	8008b36 <MIC_Print+0x1da>
 8008b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8008bdc <MIC_Print+0x280>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	493a      	ldr	r1, [pc, #232]	@ (8008c0c <MIC_Print+0x2b0>)
 8008b22:	1c18      	adds	r0, r3, #0
 8008b24:	f7f7 fd04 	bl	8000530 <__aeabi_fcmplt>
 8008b28:	1e03      	subs	r3, r0, #0
 8008b2a:	d004      	beq.n	8008b36 <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2101      	movs	r1, #1
 8008b30:	2000      	movs	r0, #0
 8008b32:	f004 fb63 	bl	800d1fc <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008b36:	4b29      	ldr	r3, [pc, #164]	@ (8008bdc <MIC_Print+0x280>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4936      	ldr	r1, [pc, #216]	@ (8008c14 <MIC_Print+0x2b8>)
 8008b3c:	1c18      	adds	r0, r3, #0
 8008b3e:	f7f7 fd15 	bl	800056c <__aeabi_fcmpge>
 8008b42:	1e03      	subs	r3, r0, #0
 8008b44:	d00c      	beq.n	8008b60 <MIC_Print+0x204>
 8008b46:	4b25      	ldr	r3, [pc, #148]	@ (8008bdc <MIC_Print+0x280>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4931      	ldr	r1, [pc, #196]	@ (8008c10 <MIC_Print+0x2b4>)
 8008b4c:	1c18      	adds	r0, r3, #0
 8008b4e:	f7f7 fcef 	bl	8000530 <__aeabi_fcmplt>
 8008b52:	1e03      	subs	r3, r0, #0
 8008b54:	d004      	beq.n	8008b60 <MIC_Print+0x204>
    SetDBLED(false, true, true);
 8008b56:	2201      	movs	r2, #1
 8008b58:	2101      	movs	r1, #1
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	f004 fb4e 	bl	800d1fc <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008b60:	4b1e      	ldr	r3, [pc, #120]	@ (8008bdc <MIC_Print+0x280>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	492c      	ldr	r1, [pc, #176]	@ (8008c18 <MIC_Print+0x2bc>)
 8008b66:	1c18      	adds	r0, r3, #0
 8008b68:	f7f7 fd00 	bl	800056c <__aeabi_fcmpge>
 8008b6c:	1e03      	subs	r3, r0, #0
 8008b6e:	d00c      	beq.n	8008b8a <MIC_Print+0x22e>
 8008b70:	4b1a      	ldr	r3, [pc, #104]	@ (8008bdc <MIC_Print+0x280>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4927      	ldr	r1, [pc, #156]	@ (8008c14 <MIC_Print+0x2b8>)
 8008b76:	1c18      	adds	r0, r3, #0
 8008b78:	f7f7 fcda 	bl	8000530 <__aeabi_fcmplt>
 8008b7c:	1e03      	subs	r3, r0, #0
 8008b7e:	d004      	beq.n	8008b8a <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 8008b80:	2201      	movs	r2, #1
 8008b82:	2100      	movs	r1, #0
 8008b84:	2000      	movs	r0, #0
 8008b86:	f004 fb39 	bl	800d1fc <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008b8a:	4b14      	ldr	r3, [pc, #80]	@ (8008bdc <MIC_Print+0x280>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4923      	ldr	r1, [pc, #140]	@ (8008c1c <MIC_Print+0x2c0>)
 8008b90:	1c18      	adds	r0, r3, #0
 8008b92:	f7f7 fceb 	bl	800056c <__aeabi_fcmpge>
 8008b96:	1e03      	subs	r3, r0, #0
 8008b98:	d00c      	beq.n	8008bb4 <MIC_Print+0x258>
 8008b9a:	4b10      	ldr	r3, [pc, #64]	@ (8008bdc <MIC_Print+0x280>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	491e      	ldr	r1, [pc, #120]	@ (8008c18 <MIC_Print+0x2bc>)
 8008ba0:	1c18      	adds	r0, r3, #0
 8008ba2:	f7f7 fcc5 	bl	8000530 <__aeabi_fcmplt>
 8008ba6:	1e03      	subs	r3, r0, #0
 8008ba8:	d004      	beq.n	8008bb4 <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008baa:	2201      	movs	r2, #1
 8008bac:	2100      	movs	r1, #0
 8008bae:	2001      	movs	r0, #1
 8008bb0:	f004 fb24 	bl	800d1fc <SetDBLED>
  }
  if(dBA < 35){//off
 8008bb4:	4b09      	ldr	r3, [pc, #36]	@ (8008bdc <MIC_Print+0x280>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4918      	ldr	r1, [pc, #96]	@ (8008c1c <MIC_Print+0x2c0>)
 8008bba:	1c18      	adds	r0, r3, #0
 8008bbc:	f7f7 fcb8 	bl	8000530 <__aeabi_fcmplt>
 8008bc0:	1e03      	subs	r3, r0, #0
 8008bc2:	d100      	bne.n	8008bc6 <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 8008bc4:	e004      	b.n	8008bd0 <MIC_Print+0x274>
    SetDBLED(false, false, false);
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2100      	movs	r1, #0
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f004 fb16 	bl	800d1fc <SetDBLED>
}
 8008bd0:	46c0      	nop			@ (mov r8, r8)
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b004      	add	sp, #16
 8008bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8008bd8:	20001010 	.word	0x20001010
 8008bdc:	20000fdc 	.word	0x20000fdc
 8008be0:	20001018 	.word	0x20001018
 8008be4:	20000fe0 	.word	0x20000fe0
 8008be8:	20001019 	.word	0x20001019
 8008bec:	20000081 	.word	0x20000081
 8008bf0:	2000100c 	.word	0x2000100c
 8008bf4:	20001014 	.word	0x20001014
 8008bf8:	20001008 	.word	0x20001008
 8008bfc:	08024330 	.word	0x08024330
 8008c00:	20000fd0 	.word	0x20000fd0
 8008c04:	42b40000 	.word	0x42b40000
 8008c08:	42a00000 	.word	0x42a00000
 8008c0c:	428c0000 	.word	0x428c0000
 8008c10:	42700000 	.word	0x42700000
 8008c14:	42480000 	.word	0x42480000
 8008c18:	42200000 	.word	0x42200000
 8008c1c:	420c0000 	.word	0x420c0000

08008c20 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008c26:	4b11      	ldr	r3, [pc, #68]	@ (8008c6c <MIC_TestMeasurementDone+0x4c>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	4a10      	ldr	r2, [pc, #64]	@ (8008c70 <MIC_TestMeasurementDone+0x50>)
 8008c2e:	4911      	ldr	r1, [pc, #68]	@ (8008c74 <MIC_TestMeasurementDone+0x54>)
 8008c30:	2002      	movs	r0, #2
 8008c32:	f005 fbd7 	bl	800e3e4 <CreateLine>
  if(DataReady) {
 8008c36:	4b0d      	ldr	r3, [pc, #52]	@ (8008c6c <MIC_TestMeasurementDone+0x4c>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d010      	beq.n	8008c62 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008c40:	1dfb      	adds	r3, r7, #7
 8008c42:	4a0d      	ldr	r2, [pc, #52]	@ (8008c78 <MIC_TestMeasurementDone+0x58>)
 8008c44:	7812      	ldrb	r2, [r2, #0]
 8008c46:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008c48:	4b0b      	ldr	r3, [pc, #44]	@ (8008c78 <MIC_TestMeasurementDone+0x58>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8008c7c <MIC_TestMeasurementDone+0x5c>)
 8008c50:	4908      	ldr	r1, [pc, #32]	@ (8008c74 <MIC_TestMeasurementDone+0x54>)
 8008c52:	2002      	movs	r0, #2
 8008c54:	f005 fbc6 	bl	800e3e4 <CreateLine>
    ResetMICIndicator();
 8008c58:	f004 fbb6 	bl	800d3c8 <ResetMICIndicator>
    return Check;
 8008c5c:	1dfb      	adds	r3, r7, #7
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	e000      	b.n	8008c64 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	0018      	movs	r0, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b002      	add	sp, #8
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20001157 	.word	0x20001157
 8008c70:	08024378 	.word	0x08024378
 8008c74:	080243a4 	.word	0x080243a4
 8008c78:	20001158 	.word	0x20001158
 8008c7c:	080243a8 	.word	0x080243a8

08008c80 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008c86:	4b78      	ldr	r3, [pc, #480]	@ (8008e68 <Mic_Upkeep+0x1e8>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d100      	bne.n	8008c90 <Mic_Upkeep+0x10>
 8008c8e:	e0b8      	b.n	8008e02 <Mic_Upkeep+0x182>
 8008c90:	dd00      	ble.n	8008c94 <Mic_Upkeep+0x14>
 8008c92:	e0d3      	b.n	8008e3c <Mic_Upkeep+0x1bc>
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d037      	beq.n	8008d08 <Mic_Upkeep+0x88>
 8008c98:	dd00      	ble.n	8008c9c <Mic_Upkeep+0x1c>
 8008c9a:	e0cf      	b.n	8008e3c <Mic_Upkeep+0x1bc>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <Mic_Upkeep+0x26>
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d014      	beq.n	8008cce <Mic_Upkeep+0x4e>
 8008ca4:	e0ca      	b.n	8008e3c <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	f003 fba6 	bl	800c3f8 <enableMicrophone>
 8008cac:	0003      	movs	r3, r0
 8008cae:	001a      	movs	r2, r3
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4053      	eors	r3, r2
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008cba:	4a6c      	ldr	r2, [pc, #432]	@ (8008e6c <Mic_Upkeep+0x1ec>)
 8008cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8008e70 <Mic_Upkeep+0x1f0>)
 8008cbe:	217f      	movs	r1, #127	@ 0x7f
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f005 fc47 	bl	800e554 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008cc6:	4b68      	ldr	r3, [pc, #416]	@ (8008e68 <Mic_Upkeep+0x1e8>)
 8008cc8:	2201      	movs	r2, #1
 8008cca:	701a      	strb	r2, [r3, #0]
    break;
 8008ccc:	e0c5      	b.n	8008e5a <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008cce:	f003 fb6f 	bl	800c3b0 <micSettlingComplete>
 8008cd2:	1e03      	subs	r3, r0, #0
 8008cd4:	d105      	bne.n	8008ce2 <Mic_Upkeep+0x62>
 8008cd6:	4b67      	ldr	r3, [pc, #412]	@ (8008e74 <Mic_Upkeep+0x1f4>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d100      	bne.n	8008ce2 <Mic_Upkeep+0x62>
 8008ce0:	e0b6      	b.n	8008e50 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008ce2:	f003 fbf3 	bl	800c4cc <startSPLcalculation>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	001a      	movs	r2, r3
 8008cea:	2301      	movs	r3, #1
 8008cec:	4053      	eors	r3, r2
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8008e6c <Mic_Upkeep+0x1ec>)
 8008cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8008e70 <Mic_Upkeep+0x1f0>)
 8008cf8:	2188      	movs	r1, #136	@ 0x88
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	f005 fc2a 	bl	800e554 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008d00:	4b59      	ldr	r3, [pc, #356]	@ (8008e68 <Mic_Upkeep+0x1e8>)
 8008d02:	2202      	movs	r2, #2
 8008d04:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008d06:	e0a3      	b.n	8008e50 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008d08:	4b5b      	ldr	r3, [pc, #364]	@ (8008e78 <Mic_Upkeep+0x1f8>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f003 fa30 	bl	800c174 <getSoundData>
 8008d14:	1e03      	subs	r3, r0, #0
 8008d16:	d100      	bne.n	8008d1a <Mic_Upkeep+0x9a>
 8008d18:	e09c      	b.n	8008e54 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008d1a:	f003 fb29 	bl	800c370 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008d1e:	4b56      	ldr	r3, [pc, #344]	@ (8008e78 <Mic_Upkeep+0x1f8>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	001a      	movs	r2, r3
 8008d24:	4b54      	ldr	r3, [pc, #336]	@ (8008e78 <Mic_Upkeep+0x1f8>)
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	4954      	ldr	r1, [pc, #336]	@ (8008e7c <Mic_Upkeep+0x1fc>)
 8008d2a:	0038      	movs	r0, r7
 8008d2c:	f017 f8b4 	bl	801fe98 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008d30:	4b51      	ldr	r3, [pc, #324]	@ (8008e78 <Mic_Upkeep+0x1f8>)
 8008d32:	89db      	ldrh	r3, [r3, #14]
 8008d34:	001a      	movs	r2, r3
 8008d36:	4b50      	ldr	r3, [pc, #320]	@ (8008e78 <Mic_Upkeep+0x1f8>)
 8008d38:	7c1b      	ldrb	r3, [r3, #16]
 8008d3a:	4951      	ldr	r1, [pc, #324]	@ (8008e80 <Mic_Upkeep+0x200>)
 8008d3c:	4851      	ldr	r0, [pc, #324]	@ (8008e84 <Mic_Upkeep+0x204>)
 8008d3e:	f017 f8ab 	bl	801fe98 <siprintf>
      dBValue = atof(dBbuffer);
 8008d42:	003b      	movs	r3, r7
 8008d44:	0018      	movs	r0, r3
 8008d46:	f015 fc57 	bl	801e5f8 <atof>
 8008d4a:	0002      	movs	r2, r0
 8008d4c:	000b      	movs	r3, r1
 8008d4e:	0010      	movs	r0, r2
 8008d50:	0019      	movs	r1, r3
 8008d52:	f7fa fbcf 	bl	80034f4 <__aeabi_d2f>
 8008d56:	1c02      	adds	r2, r0, #0
 8008d58:	4b4b      	ldr	r3, [pc, #300]	@ (8008e88 <Mic_Upkeep+0x208>)
 8008d5a:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8008e88 <Mic_Upkeep+0x208>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	494a      	ldr	r1, [pc, #296]	@ (8008e8c <Mic_Upkeep+0x20c>)
 8008d62:	1c18      	adds	r0, r3, #0
 8008d64:	f7f8 f91c 	bl	8000fa0 <__aeabi_fmul>
 8008d68:	1c03      	adds	r3, r0, #0
 8008d6a:	1c18      	adds	r0, r3, #0
 8008d6c:	f7fa fb7a 	bl	8003464 <__aeabi_f2d>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4b47      	ldr	r3, [pc, #284]	@ (8008e90 <Mic_Upkeep+0x210>)
 8008d74:	f7f8 fcba 	bl	80016ec <__aeabi_dadd>
 8008d78:	0002      	movs	r2, r0
 8008d7a:	000b      	movs	r3, r1
 8008d7c:	0010      	movs	r0, r2
 8008d7e:	0019      	movs	r1, r3
 8008d80:	f7fa fae2 	bl	8003348 <__aeabi_d2iz>
 8008d84:	0003      	movs	r3, r0
 8008d86:	0018      	movs	r0, r3
 8008d88:	f7fa fb1a 	bl	80033c0 <__aeabi_i2d>
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4b41      	ldr	r3, [pc, #260]	@ (8008e94 <Mic_Upkeep+0x214>)
 8008d90:	f7f9 f810 	bl	8001db4 <__aeabi_ddiv>
 8008d94:	0002      	movs	r2, r0
 8008d96:	000b      	movs	r3, r1
 8008d98:	0010      	movs	r0, r2
 8008d9a:	0019      	movs	r1, r3
 8008d9c:	f7fa fbaa 	bl	80034f4 <__aeabi_d2f>
 8008da0:	1c02      	adds	r2, r0, #0
 8008da2:	4b39      	ldr	r3, [pc, #228]	@ (8008e88 <Mic_Upkeep+0x208>)
 8008da4:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008da6:	f7ff fdd9 	bl	800895c <MIC_Print>
      if (!startSPLcalculation()) {
 8008daa:	f003 fb8f 	bl	800c4cc <startSPLcalculation>
 8008dae:	0003      	movs	r3, r0
 8008db0:	001a      	movs	r2, r3
 8008db2:	2301      	movs	r3, #1
 8008db4:	4053      	eors	r3, r2
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8008e6c <Mic_Upkeep+0x1ec>)
 8008dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8008e70 <Mic_Upkeep+0x1f0>)
 8008dc0:	2198      	movs	r1, #152	@ 0x98
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f005 fbc6 	bl	800e554 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f003 fb15 	bl	800c3f8 <enableMicrophone>
 8008dce:	0003      	movs	r3, r0
 8008dd0:	001a      	movs	r2, r3
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4053      	eors	r3, r2
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008ddc:	4a23      	ldr	r2, [pc, #140]	@ (8008e6c <Mic_Upkeep+0x1ec>)
 8008dde:	4b24      	ldr	r3, [pc, #144]	@ (8008e70 <Mic_Upkeep+0x1f0>)
 8008de0:	219b      	movs	r1, #155	@ 0x9b
 8008de2:	0018      	movs	r0, r3
 8008de4:	f005 fbb6 	bl	800e554 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008de8:	f005 ff42 	bl	800ec70 <HAL_GetTick>
 8008dec:	0003      	movs	r3, r0
 8008dee:	4a2a      	ldr	r2, [pc, #168]	@ (8008e98 <Mic_Upkeep+0x218>)
 8008df0:	189a      	adds	r2, r3, r2
 8008df2:	4b2a      	ldr	r3, [pc, #168]	@ (8008e9c <Mic_Upkeep+0x21c>)
 8008df4:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008df6:	4b1c      	ldr	r3, [pc, #112]	@ (8008e68 <Mic_Upkeep+0x1e8>)
 8008df8:	2203      	movs	r2, #3
 8008dfa:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008dfc:	f004 fae4 	bl	800d3c8 <ResetMICIndicator>
    }
    break;
 8008e00:	e028      	b.n	8008e54 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008e02:	4b26      	ldr	r3, [pc, #152]	@ (8008e9c <Mic_Upkeep+0x21c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	0018      	movs	r0, r3
 8008e08:	f005 fa96 	bl	800e338 <TimestampIsReached>
 8008e0c:	1e03      	subs	r3, r0, #0
 8008e0e:	d023      	beq.n	8008e58 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008e10:	2001      	movs	r0, #1
 8008e12:	f003 faf1 	bl	800c3f8 <enableMicrophone>
 8008e16:	0003      	movs	r3, r0
 8008e18:	001a      	movs	r2, r3
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4053      	eors	r3, r2
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e24:	4a11      	ldr	r2, [pc, #68]	@ (8008e6c <Mic_Upkeep+0x1ec>)
 8008e26:	4b12      	ldr	r3, [pc, #72]	@ (8008e70 <Mic_Upkeep+0x1f0>)
 8008e28:	21a6      	movs	r1, #166	@ 0xa6
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f005 fb92 	bl	800e554 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008e30:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <Mic_Upkeep+0x1e8>)
 8008e32:	2201      	movs	r2, #1
 8008e34:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008e36:	f004 fa8d 	bl	800d354 <SetMICIndicator>
    }
    break;
 8008e3a:	e00d      	b.n	8008e58 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008e3c:	4a18      	ldr	r2, [pc, #96]	@ (8008ea0 <Mic_Upkeep+0x220>)
 8008e3e:	4b19      	ldr	r3, [pc, #100]	@ (8008ea4 <Mic_Upkeep+0x224>)
 8008e40:	0019      	movs	r1, r3
 8008e42:	2003      	movs	r0, #3
 8008e44:	f005 face 	bl	800e3e4 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008e48:	4b07      	ldr	r3, [pc, #28]	@ (8008e68 <Mic_Upkeep+0x1e8>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	701a      	strb	r2, [r3, #0]
    break;
 8008e4e:	e004      	b.n	8008e5a <Mic_Upkeep+0x1da>
    break;
 8008e50:	46c0      	nop			@ (mov r8, r8)
 8008e52:	e002      	b.n	8008e5a <Mic_Upkeep+0x1da>
    break;
 8008e54:	46c0      	nop			@ (mov r8, r8)
 8008e56:	e000      	b.n	8008e5a <Mic_Upkeep+0x1da>
    break;
 8008e58:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008e5a:	4b03      	ldr	r3, [pc, #12]	@ (8008e68 <Mic_Upkeep+0x1e8>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
}
 8008e5e:	0018      	movs	r0, r3
 8008e60:	46bd      	mov	sp, r7
 8008e62:	b002      	add	sp, #8
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	46c0      	nop			@ (mov r8, r8)
 8008e68:	20001032 	.word	0x20001032
 8008e6c:	080243c0 	.word	0x080243c0
 8008e70:	08025430 	.word	0x08025430
 8008e74:	20001157 	.word	0x20001157
 8008e78:	20001020 	.word	0x20001020
 8008e7c:	080243dc 	.word	0x080243dc
 8008e80:	080243e4 	.word	0x080243e4
 8008e84:	20000fd0 	.word	0x20000fd0
 8008e88:	20001010 	.word	0x20001010
 8008e8c:	42c80000 	.word	0x42c80000
 8008e90:	3fe00000 	.word	0x3fe00000
 8008e94:	40590000 	.word	0x40590000
 8008e98:	000002f3 	.word	0x000002f3
 8008e9c:	2000101c 	.word	0x2000101c
 8008ea0:	080243ec 	.word	0x080243ec
 8008ea4:	0802440c 	.word	0x0802440c

08008ea8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008eae:	1d3b      	adds	r3, r7, #4
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	2314      	movs	r3, #20
 8008eb4:	001a      	movs	r2, r3
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f017 f932 	bl	8020120 <memset>
  RTC_DateTypeDef sDate = {0};
 8008ebc:	003b      	movs	r3, r7
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8008f80 <MX_RTC_Init+0xd8>)
 8008ec6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008ece:	4b2b      	ldr	r3, [pc, #172]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ed0:	227f      	movs	r2, #127	@ 0x7f
 8008ed2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008ed4:	4b29      	ldr	r3, [pc, #164]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ed6:	22ff      	movs	r2, #255	@ 0xff
 8008ed8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008eda:	4b28      	ldr	r3, [pc, #160]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008ee0:	4b26      	ldr	r3, [pc, #152]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008ee6:	4b25      	ldr	r3, [pc, #148]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008eec:	4b23      	ldr	r3, [pc, #140]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008ef2:	4b22      	ldr	r3, [pc, #136]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f00c ff3f 	bl	8015d78 <HAL_RTC_Init>
 8008efa:	1e03      	subs	r3, r0, #0
 8008efc:	d001      	beq.n	8008f02 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008efe:	f7ff f9d9 	bl	80082b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008f02:	1d3b      	adds	r3, r7, #4
 8008f04:	220d      	movs	r2, #13
 8008f06:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008f08:	1d3b      	adds	r3, r7, #4
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008f0e:	1d3b      	adds	r3, r7, #4
 8008f10:	2200      	movs	r2, #0
 8008f12:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008f14:	1d3b      	adds	r3, r7, #4
 8008f16:	2200      	movs	r2, #0
 8008f18:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008f1a:	1d3b      	adds	r3, r7, #4
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008f20:	1d39      	adds	r1, r7, #4
 8008f22:	4b16      	ldr	r3, [pc, #88]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	0018      	movs	r0, r3
 8008f28:	f00c ffc2 	bl	8015eb0 <HAL_RTC_SetTime>
 8008f2c:	1e03      	subs	r3, r0, #0
 8008f2e:	d001      	beq.n	8008f34 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008f30:	f7ff f9c0 	bl	80082b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008f34:	003b      	movs	r3, r7
 8008f36:	2206      	movs	r2, #6
 8008f38:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008f3a:	003b      	movs	r3, r7
 8008f3c:	2211      	movs	r2, #17
 8008f3e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008f40:	003b      	movs	r3, r7
 8008f42:	2217      	movs	r2, #23
 8008f44:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008f46:	003b      	movs	r3, r7
 8008f48:	2218      	movs	r2, #24
 8008f4a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008f4c:	0039      	movs	r1, r7
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	0018      	movs	r0, r3
 8008f54:	f00d f8b4 	bl	80160c0 <HAL_RTC_SetDate>
 8008f58:	1e03      	subs	r3, r0, #0
 8008f5a:	d001      	beq.n	8008f60 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008f5c:	f7ff f9aa 	bl	80082b4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008f60:	4b06      	ldr	r3, [pc, #24]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	2100      	movs	r1, #0
 8008f66:	0018      	movs	r0, r3
 8008f68:	f00d fa64 	bl	8016434 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008f6c:	1e03      	subs	r3, r0, #0
 8008f6e:	d001      	beq.n	8008f74 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008f70:	f7ff f9a0 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008f74:	46c0      	nop			@ (mov r8, r8)
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b006      	add	sp, #24
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20001034 	.word	0x20001034
 8008f80:	40002800 	.word	0x40002800

08008f84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a0a      	ldr	r2, [pc, #40]	@ (8008fbc <HAL_RTC_MspInit+0x38>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d10e      	bne.n	8008fb4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008f96:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc0 <HAL_RTC_MspInit+0x3c>)
 8008f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f9a:	4b09      	ldr	r3, [pc, #36]	@ (8008fc0 <HAL_RTC_MspInit+0x3c>)
 8008f9c:	2180      	movs	r1, #128	@ 0x80
 8008f9e:	02c9      	lsls	r1, r1, #11
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	2002      	movs	r0, #2
 8008faa:	f006 fb05 	bl	800f5b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008fae:	2002      	movs	r0, #2
 8008fb0:	f006 fb17 	bl	800f5e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008fb4:	46c0      	nop			@ (mov r8, r8)
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	b002      	add	sp, #8
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40002800 	.word	0x40002800
 8008fc0:	40021000 	.word	0x40021000

08008fc4 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoximax;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8008fc8:	4b02      	ldr	r3, [pc, #8]	@ (8008fd4 <sen5x_Get_sen5x_enable_state+0x10>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
}
 8008fcc:	0018      	movs	r0, r3
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	46c0      	nop			@ (mov r8, r8)
 8008fd4:	2000105b 	.word	0x2000105b

08008fd8 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008fe0:	f005 fe46 	bl	800ec70 <HAL_GetTick>
 8008fe4:	0002      	movs	r2, r0
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	18d2      	adds	r2, r2, r3
 8008fea:	4b03      	ldr	r3, [pc, #12]	@ (8008ff8 <setsen5xReadTimer+0x20>)
 8008fec:	601a      	str	r2, [r3, #0]
}
 8008fee:	46c0      	nop			@ (mov r8, r8)
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b002      	add	sp, #8
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			@ (mov r8, r8)
 8008ff8:	20001070 	.word	0x20001070

08008ffc <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	0002      	movs	r2, r0
 8009004:	1dfb      	adds	r3, r7, #7
 8009006:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009008:	4b03      	ldr	r3, [pc, #12]	@ (8009018 <setsen5xSamplecounter+0x1c>)
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
}
 800900e:	46c0      	nop			@ (mov r8, r8)
 8009010:	46bd      	mov	sp, r7
 8009012:	b002      	add	sp, #8
 8009014:	bd80      	pop	{r7, pc}
 8009016:	46c0      	nop			@ (mov r8, r8)
 8009018:	20001064 	.word	0x20001064

0800901c <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8009024:	f7ff f9c2 	bl	80083ac <IsPMSensorEnabled>
 8009028:	1e03      	subs	r3, r0, #0
 800902a:	d02c      	beq.n	8009086 <sen5x_enable+0x6a>
    Debug("sen5x measurement is enabled");
 800902c:	4a1d      	ldr	r2, [pc, #116]	@ (80090a4 <sen5x_enable+0x88>)
 800902e:	4b1e      	ldr	r3, [pc, #120]	@ (80090a8 <sen5x_enable+0x8c>)
 8009030:	0019      	movs	r1, r3
 8009032:	2003      	movs	r0, #3
 8009034:	f005 f9d6 	bl	800e3e4 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8009038:	4b1c      	ldr	r3, [pc, #112]	@ (80090ac <sen5x_enable+0x90>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	4193      	sbcs	r3, r2
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2201      	movs	r2, #1
 8009044:	4053      	eors	r3, r2
 8009046:	b2db      	uxtb	r3, r3
 8009048:	1c1a      	adds	r2, r3, #0
 800904a:	2301      	movs	r3, #1
 800904c:	4013      	ands	r3, r2
 800904e:	b2da      	uxtb	r2, r3
 8009050:	4b16      	ldr	r3, [pc, #88]	@ (80090ac <sen5x_enable+0x90>)
 8009052:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8009054:	4b15      	ldr	r3, [pc, #84]	@ (80090ac <sen5x_enable+0x90>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <sen5x_enable+0x48>
      setsen5xReadTimer(0);
 800905c:	2000      	movs	r0, #0
 800905e:	f7ff ffbb 	bl	8008fd8 <setsen5xReadTimer>
 8009062:	e016      	b.n	8009092 <sen5x_enable+0x76>
    }
    else {
      Info("This cycle the sen5x is disabled");
 8009064:	4a12      	ldr	r2, [pc, #72]	@ (80090b0 <sen5x_enable+0x94>)
 8009066:	4b13      	ldr	r3, [pc, #76]	@ (80090b4 <sen5x_enable+0x98>)
 8009068:	0019      	movs	r1, r3
 800906a:	2002      	movs	r0, #2
 800906c:	f005 f9ba 	bl	800e3e4 <CreateLine>
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009070:	f005 fdfe 	bl	800ec70 <HAL_GetTick>
 8009074:	0002      	movs	r2, r0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2164      	movs	r1, #100	@ 0x64
 800907a:	434b      	muls	r3, r1
 800907c:	18d3      	adds	r3, r2, r3
 800907e:	0018      	movs	r0, r3
 8009080:	f7ff ffaa 	bl	8008fd8 <setsen5xReadTimer>
 8009084:	e005      	b.n	8009092 <sen5x_enable+0x76>
    }
  }
  else {
    Info("sen5x measurement is disabled");
 8009086:	4a0c      	ldr	r2, [pc, #48]	@ (80090b8 <sen5x_enable+0x9c>)
 8009088:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <sen5x_enable+0x98>)
 800908a:	0019      	movs	r1, r3
 800908c:	2002      	movs	r0, #2
 800908e:	f005 f9a9 	bl	800e3e4 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8009092:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <sen5x_enable+0xa0>)
 8009094:	2201      	movs	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009098:	4b04      	ldr	r3, [pc, #16]	@ (80090ac <sen5x_enable+0x90>)
 800909a:	781b      	ldrb	r3, [r3, #0]
}
 800909c:	0018      	movs	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	b002      	add	sp, #8
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	08024410 	.word	0x08024410
 80090a8:	08024430 	.word	0x08024430
 80090ac:	2000105b 	.word	0x2000105b
 80090b0:	08024434 	.word	0x08024434
 80090b4:	08024458 	.word	0x08024458
 80090b8:	0802445c 	.word	0x0802445c
 80090bc:	20000082 	.word	0x20000082

080090c0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 80090c4:	4a0a      	ldr	r2, [pc, #40]	@ (80090f0 <sen5x_Power_On+0x30>)
 80090c6:	4b0b      	ldr	r3, [pc, #44]	@ (80090f4 <sen5x_Power_On+0x34>)
 80090c8:	0019      	movs	r1, r3
 80090ca:	2003      	movs	r0, #3
 80090cc:	f005 f98a 	bl	800e3e4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80090d0:	2380      	movs	r3, #128	@ 0x80
 80090d2:	015b      	lsls	r3, r3, #5
 80090d4:	4808      	ldr	r0, [pc, #32]	@ (80090f8 <sen5x_Power_On+0x38>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	0019      	movs	r1, r3
 80090da:	f007 f85a 	bl	8010192 <HAL_GPIO_WritePin>
  sen5x_On = true;
 80090de:	4b07      	ldr	r3, [pc, #28]	@ (80090fc <sen5x_Power_On+0x3c>)
 80090e0:	2201      	movs	r2, #1
 80090e2:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 80090e4:	2037      	movs	r0, #55	@ 0x37
 80090e6:	f005 fdcd 	bl	800ec84 <HAL_Delay>
}
 80090ea:	46c0      	nop			@ (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	0802447c 	.word	0x0802447c
 80090f4:	08024430 	.word	0x08024430
 80090f8:	50000800 	.word	0x50000800
 80090fc:	20001059 	.word	0x20001059

08009100 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009104:	4b0e      	ldr	r3, [pc, #56]	@ (8009140 <sen5x_Power_Off+0x40>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800910c:	4a0d      	ldr	r2, [pc, #52]	@ (8009144 <sen5x_Power_Off+0x44>)
 800910e:	4b0e      	ldr	r3, [pc, #56]	@ (8009148 <sen5x_Power_Off+0x48>)
 8009110:	0019      	movs	r1, r3
 8009112:	2003      	movs	r0, #3
 8009114:	f005 f966 	bl	800e3e4 <CreateLine>
  else {
    Debug("executing sen5x_Power_Off");
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
    sen5x_On = false;
  }
}
 8009118:	e00f      	b.n	800913a <sen5x_Power_Off+0x3a>
    Debug("executing sen5x_Power_Off");
 800911a:	4a0c      	ldr	r2, [pc, #48]	@ (800914c <sen5x_Power_Off+0x4c>)
 800911c:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <sen5x_Power_Off+0x48>)
 800911e:	0019      	movs	r1, r3
 8009120:	2003      	movs	r0, #3
 8009122:	f005 f95f 	bl	800e3e4 <CreateLine>
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8009126:	2380      	movs	r3, #128	@ 0x80
 8009128:	015b      	lsls	r3, r3, #5
 800912a:	4809      	ldr	r0, [pc, #36]	@ (8009150 <sen5x_Power_Off+0x50>)
 800912c:	2200      	movs	r2, #0
 800912e:	0019      	movs	r1, r3
 8009130:	f007 f82f 	bl	8010192 <HAL_GPIO_WritePin>
    sen5x_On = false;
 8009134:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <sen5x_Power_Off+0x54>)
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
}
 800913a:	46c0      	nop			@ (mov r8, r8)
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	2000105a 	.word	0x2000105a
 8009144:	08024498 	.word	0x08024498
 8009148:	08024430 	.word	0x08024430
 800914c:	080244c8 	.word	0x080244c8
 8009150:	50000800 	.word	0x50000800
 8009154:	20001059 	.word	0x20001059

08009158 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800915c:	4b02      	ldr	r3, [pc, #8]	@ (8009168 <reset_fanCleaningDone+0x10>)
 800915e:	2200      	movs	r2, #0
 8009160:	701a      	strb	r2, [r3, #0]
}
 8009162:	46c0      	nop			@ (mov r8, r8)
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20001058 	.word	0x20001058

0800916c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800916c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916e:	b093      	sub	sp, #76	@ 0x4c
 8009170:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8009172:	2436      	movs	r4, #54	@ 0x36
 8009174:	193b      	adds	r3, r7, r4
 8009176:	2200      	movs	r2, #0
 8009178:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800917a:	2335      	movs	r3, #53	@ 0x35
 800917c:	18fb      	adds	r3, r7, r3
 800917e:	2220      	movs	r2, #32
 8009180:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009182:	2334      	movs	r3, #52	@ 0x34
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	2220      	movs	r2, #32
 8009188:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800918a:	f7ff ff99 	bl	80090c0 <sen5x_Power_On>
  error = sen5x_device_reset();
 800918e:	0025      	movs	r5, r4
 8009190:	193c      	adds	r4, r7, r4
 8009192:	f001 f903 	bl	800a39c <sen5x_device_reset>
 8009196:	0003      	movs	r3, r0
 8009198:	8023      	strh	r3, [r4, #0]
  if (error) {
 800919a:	002c      	movs	r4, r5
 800919c:	193b      	adds	r3, r7, r4
 800919e:	2200      	movs	r2, #0
 80091a0:	5e9b      	ldrsh	r3, [r3, r2]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00b      	beq.n	80091be <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80091a6:	193b      	adds	r3, r7, r4
 80091a8:	2200      	movs	r2, #0
 80091aa:	5e9b      	ldrsh	r3, [r3, r2]
 80091ac:	4a6c      	ldr	r2, [pc, #432]	@ (8009360 <probe_sen5x+0x1f4>)
 80091ae:	496d      	ldr	r1, [pc, #436]	@ (8009364 <probe_sen5x+0x1f8>)
 80091b0:	2001      	movs	r0, #1
 80091b2:	f005 f917 	bl	800e3e4 <CreateLine>
      return error;
 80091b6:	193b      	adds	r3, r7, r4
 80091b8:	2200      	movs	r2, #0
 80091ba:	5e9b      	ldrsh	r3, [r3, r2]
 80091bc:	e0cc      	b.n	8009358 <probe_sen5x+0x1ec>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80091be:	2536      	movs	r5, #54	@ 0x36
 80091c0:	197c      	adds	r4, r7, r5
 80091c2:	2335      	movs	r3, #53	@ 0x35
 80091c4:	18fb      	adds	r3, r7, r3
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	230c      	movs	r3, #12
 80091ca:	18fb      	adds	r3, r7, r3
 80091cc:	0011      	movs	r1, r2
 80091ce:	0018      	movs	r0, r3
 80091d0:	f000 ffd0 	bl	800a174 <sen5x_get_serial_number>
 80091d4:	0003      	movs	r3, r0
 80091d6:	8023      	strh	r3, [r4, #0]
  if (error) {
 80091d8:	197b      	adds	r3, r7, r5
 80091da:	2200      	movs	r2, #0
 80091dc:	5e9b      	ldrsh	r3, [r3, r2]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00b      	beq.n	80091fa <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80091e2:	197b      	adds	r3, r7, r5
 80091e4:	2200      	movs	r2, #0
 80091e6:	5e9a      	ldrsh	r2, [r3, r2]
 80091e8:	4b5f      	ldr	r3, [pc, #380]	@ (8009368 <probe_sen5x+0x1fc>)
 80091ea:	0011      	movs	r1, r2
 80091ec:	0018      	movs	r0, r3
 80091ee:	f016 fde3 	bl	801fdb8 <iprintf>
      return error;
 80091f2:	197b      	adds	r3, r7, r5
 80091f4:	2200      	movs	r2, #0
 80091f6:	5e9b      	ldrsh	r3, [r3, r2]
 80091f8:	e0ae      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80091fa:	230c      	movs	r3, #12
 80091fc:	18fa      	adds	r2, r7, r3
 80091fe:	4b5b      	ldr	r3, [pc, #364]	@ (800936c <probe_sen5x+0x200>)
 8009200:	0011      	movs	r1, r2
 8009202:	0018      	movs	r0, r3
 8009204:	f016 fdd8 	bl	801fdb8 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009208:	2536      	movs	r5, #54	@ 0x36
 800920a:	197c      	adds	r4, r7, r5
 800920c:	2334      	movs	r3, #52	@ 0x34
 800920e:	18fb      	adds	r3, r7, r3
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	4b57      	ldr	r3, [pc, #348]	@ (8009370 <probe_sen5x+0x204>)
 8009214:	0011      	movs	r1, r2
 8009216:	0018      	movs	r0, r3
 8009218:	f000 ff56 	bl	800a0c8 <sen5x_get_product_name>
 800921c:	0003      	movs	r3, r0
 800921e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009220:	197b      	adds	r3, r7, r5
 8009222:	2200      	movs	r2, #0
 8009224:	5e9b      	ldrsh	r3, [r3, r2]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800922a:	197b      	adds	r3, r7, r5
 800922c:	2200      	movs	r2, #0
 800922e:	5e9a      	ldrsh	r2, [r3, r2]
 8009230:	4b50      	ldr	r3, [pc, #320]	@ (8009374 <probe_sen5x+0x208>)
 8009232:	0011      	movs	r1, r2
 8009234:	0018      	movs	r0, r3
 8009236:	f016 fdbf 	bl	801fdb8 <iprintf>
      return error;
 800923a:	197b      	adds	r3, r7, r5
 800923c:	2200      	movs	r2, #0
 800923e:	5e9b      	ldrsh	r3, [r3, r2]
 8009240:	e08a      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009242:	4a4b      	ldr	r2, [pc, #300]	@ (8009370 <probe_sen5x+0x204>)
 8009244:	4b4c      	ldr	r3, [pc, #304]	@ (8009378 <probe_sen5x+0x20c>)
 8009246:	0011      	movs	r1, r2
 8009248:	0018      	movs	r0, r3
 800924a:	f016 fdb5 	bl	801fdb8 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800924e:	2636      	movs	r6, #54	@ 0x36
 8009250:	19bc      	adds	r4, r7, r6
 8009252:	2308      	movs	r3, #8
 8009254:	18fd      	adds	r5, r7, r3
 8009256:	2309      	movs	r3, #9
 8009258:	18fa      	adds	r2, r7, r3
 800925a:	230a      	movs	r3, #10
 800925c:	18f9      	adds	r1, r7, r3
 800925e:	230b      	movs	r3, #11
 8009260:	18f8      	adds	r0, r7, r3
 8009262:	1d7b      	adds	r3, r7, #5
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	1dbb      	adds	r3, r7, #6
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	1dfb      	adds	r3, r7, #7
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	002b      	movs	r3, r5
 8009270:	f000 ffd6 	bl	800a220 <sen5x_get_version>
 8009274:	0003      	movs	r3, r0
 8009276:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8009278:	19bb      	adds	r3, r7, r6
 800927a:	2200      	movs	r2, #0
 800927c:	5e9b      	ldrsh	r3, [r3, r2]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009282:	19bb      	adds	r3, r7, r6
 8009284:	2200      	movs	r2, #0
 8009286:	5e9a      	ldrsh	r2, [r3, r2]
 8009288:	4b3c      	ldr	r3, [pc, #240]	@ (800937c <probe_sen5x+0x210>)
 800928a:	0011      	movs	r1, r2
 800928c:	0018      	movs	r0, r3
 800928e:	f016 fd93 	bl	801fdb8 <iprintf>
      return error;
 8009292:	19bb      	adds	r3, r7, r6
 8009294:	2200      	movs	r2, #0
 8009296:	5e9b      	ldrsh	r3, [r3, r2]
 8009298:	e05e      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800929a:	230b      	movs	r3, #11
 800929c:	18fb      	adds	r3, r7, r3
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	0019      	movs	r1, r3
 80092a2:	230a      	movs	r3, #10
 80092a4:	18fb      	adds	r3, r7, r3
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	001a      	movs	r2, r3
 80092aa:	2308      	movs	r3, #8
 80092ac:	18fb      	adds	r3, r7, r3
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	001c      	movs	r4, r3
 80092b2:	1dfb      	adds	r3, r7, #7
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4832      	ldr	r0, [pc, #200]	@ (8009380 <probe_sen5x+0x214>)
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	0023      	movs	r3, r4
 80092bc:	f016 fd7c 	bl	801fdb8 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80092c0:	2300      	movs	r3, #0
 80092c2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80092c4:	262e      	movs	r6, #46	@ 0x2e
 80092c6:	19bb      	adds	r3, r7, r6
 80092c8:	2200      	movs	r2, #0
 80092ca:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80092cc:	232c      	movs	r3, #44	@ 0x2c
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	2200      	movs	r2, #0
 80092d2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80092d4:	492b      	ldr	r1, [pc, #172]	@ (8009384 <probe_sen5x+0x218>)
 80092d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092d8:	f7f7 fe62 	bl	8000fa0 <__aeabi_fmul>
 80092dc:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80092de:	1c18      	adds	r0, r3, #0
 80092e0:	f7f8 f956 	bl	8001590 <__aeabi_f2iz>
 80092e4:	0003      	movs	r3, r0
 80092e6:	b218      	sxth	r0, r3
 80092e8:	2536      	movs	r5, #54	@ 0x36
 80092ea:	197c      	adds	r4, r7, r5
 80092ec:	232c      	movs	r3, #44	@ 0x2c
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	881a      	ldrh	r2, [r3, #0]
 80092f2:	19bb      	adds	r3, r7, r6
 80092f4:	2100      	movs	r1, #0
 80092f6:	5e5b      	ldrsh	r3, [r3, r1]
 80092f8:	0019      	movs	r1, r3
 80092fa:	f000 fe81 	bl	800a000 <sen5x_set_temperature_offset_parameters>
 80092fe:	0003      	movs	r3, r0
 8009300:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009302:	197b      	adds	r3, r7, r5
 8009304:	2200      	movs	r2, #0
 8009306:	5e9b      	ldrsh	r3, [r3, r2]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800930c:	197b      	adds	r3, r7, r5
 800930e:	2200      	movs	r2, #0
 8009310:	5e9b      	ldrsh	r3, [r3, r2]
 8009312:	4a1d      	ldr	r2, [pc, #116]	@ (8009388 <probe_sen5x+0x21c>)
 8009314:	4913      	ldr	r1, [pc, #76]	@ (8009364 <probe_sen5x+0x1f8>)
 8009316:	2001      	movs	r0, #1
 8009318:	f005 f864 	bl	800e3e4 <CreateLine>
      return error;
 800931c:	197b      	adds	r3, r7, r5
 800931e:	2200      	movs	r2, #0
 8009320:	5e9b      	ldrsh	r3, [r3, r2]
 8009322:	e019      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009326:	f7fa f89d 	bl	8003464 <__aeabi_f2d>
 800932a:	0002      	movs	r2, r0
 800932c:	000b      	movs	r3, r1
 800932e:	4817      	ldr	r0, [pc, #92]	@ (800938c <probe_sen5x+0x220>)
 8009330:	4917      	ldr	r1, [pc, #92]	@ (8009390 <probe_sen5x+0x224>)
 8009332:	9200      	str	r2, [sp, #0]
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	0002      	movs	r2, r0
 8009338:	2002      	movs	r0, #2
 800933a:	f005 f853 	bl	800e3e4 <CreateLine>
  }
  sen5x_Power_Off();
 800933e:	f7ff fedf 	bl	8009100 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8009342:	f005 fc95 	bl	800ec70 <HAL_GetTick>
 8009346:	0003      	movs	r3, r0
 8009348:	4a12      	ldr	r2, [pc, #72]	@ (8009394 <probe_sen5x+0x228>)
 800934a:	189a      	adds	r2, r3, r2
 800934c:	4b12      	ldr	r3, [pc, #72]	@ (8009398 <probe_sen5x+0x22c>)
 800934e:	601a      	str	r2, [r3, #0]
  return error;
 8009350:	2336      	movs	r3, #54	@ 0x36
 8009352:	18fb      	adds	r3, r7, r3
 8009354:	2200      	movs	r2, #0
 8009356:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009358:	0018      	movs	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	b00f      	add	sp, #60	@ 0x3c
 800935e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009360:	080244e4 	.word	0x080244e4
 8009364:	08024510 	.word	0x08024510
 8009368:	08024514 	.word	0x08024514
 800936c:	08024544 	.word	0x08024544
 8009370:	2000105c 	.word	0x2000105c
 8009374:	08024558 	.word	0x08024558
 8009378:	08024588 	.word	0x08024588
 800937c:	0802459c 	.word	0x0802459c
 8009380:	080245c8 	.word	0x080245c8
 8009384:	43480000 	.word	0x43480000
 8009388:	080245ec 	.word	0x080245ec
 800938c:	0802462c 	.word	0x0802462c
 8009390:	08024458 	.word	0x08024458
 8009394:	000061a8 	.word	0x000061a8
 8009398:	20001070 	.word	0x20001070

0800939c <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800939c:	b590      	push	{r4, r7, lr}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80093a2:	1dbb      	adds	r3, r7, #6
 80093a4:	2200      	movs	r2, #0
 80093a6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 80093a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <sen5x_lightup_measurement+0x7c>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 80093b0:	4a1a      	ldr	r2, [pc, #104]	@ (800941c <sen5x_lightup_measurement+0x80>)
 80093b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009420 <sen5x_lightup_measurement+0x84>)
 80093b4:	0019      	movs	r1, r3
 80093b6:	2002      	movs	r0, #2
 80093b8:	f005 f814 	bl	800e3e4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80093bc:	1dbc      	adds	r4, r7, #6
 80093be:	f000 fcab 	bl	8009d18 <sen5x_start_measurement_without_pm>
 80093c2:	0003      	movs	r3, r0
 80093c4:	8023      	strh	r3, [r4, #0]
 80093c6:	e00a      	b.n	80093de <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80093c8:	4a16      	ldr	r2, [pc, #88]	@ (8009424 <sen5x_lightup_measurement+0x88>)
 80093ca:	4b15      	ldr	r3, [pc, #84]	@ (8009420 <sen5x_lightup_measurement+0x84>)
 80093cc:	0019      	movs	r1, r3
 80093ce:	2002      	movs	r0, #2
 80093d0:	f005 f808 	bl	800e3e4 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80093d4:	1dbc      	adds	r4, r7, #6
 80093d6:	f000 fc71 	bl	8009cbc <sen5x_start_measurement>
 80093da:	0003      	movs	r3, r0
 80093dc:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 80093de:	1dbb      	adds	r3, r7, #6
 80093e0:	2200      	movs	r2, #0
 80093e2:	5e9b      	ldrsh	r3, [r3, r2]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d008      	beq.n	80093fa <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 80093e8:	1dbb      	adds	r3, r7, #6
 80093ea:	2200      	movs	r2, #0
 80093ec:	5e9b      	ldrsh	r3, [r3, r2]
 80093ee:	4a0e      	ldr	r2, [pc, #56]	@ (8009428 <sen5x_lightup_measurement+0x8c>)
 80093f0:	490e      	ldr	r1, [pc, #56]	@ (800942c <sen5x_lightup_measurement+0x90>)
 80093f2:	2001      	movs	r0, #1
 80093f4:	f004 fff6 	bl	800e3e4 <CreateLine>
 80093f8:	e007      	b.n	800940a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 80093fa:	f7fd f865 	bl	80064c8 <showTime>
    Info("sen5x_start_measurement executed");
 80093fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009430 <sen5x_lightup_measurement+0x94>)
 8009400:	4b07      	ldr	r3, [pc, #28]	@ (8009420 <sen5x_lightup_measurement+0x84>)
 8009402:	0019      	movs	r1, r3
 8009404:	2002      	movs	r0, #2
 8009406:	f004 ffed 	bl	800e3e4 <CreateLine>
  }
  return error;
 800940a:	1dbb      	adds	r3, r7, #6
 800940c:	2200      	movs	r2, #0
 800940e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009410:	0018      	movs	r0, r3
 8009412:	46bd      	mov	sp, r7
 8009414:	b003      	add	sp, #12
 8009416:	bd90      	pop	{r4, r7, pc}
 8009418:	2000105a 	.word	0x2000105a
 800941c:	08024664 	.word	0x08024664
 8009420:	08024458 	.word	0x08024458
 8009424:	08024690 	.word	0x08024690
 8009428:	080246b0 	.word	0x080246b0
 800942c:	08024510 	.word	0x08024510
 8009430:	080246e0 	.word	0x080246e0

08009434 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009434:	b590      	push	{r4, r7, lr}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 800943a:	1dbb      	adds	r3, r7, #6
 800943c:	2200      	movs	r2, #0
 800943e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009440:	4b21      	ldr	r3, [pc, #132]	@ (80094c8 <sen5x_extinguish_measurement+0x94>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01e      	beq.n	8009486 <sen5x_extinguish_measurement+0x52>
    Info("Continious VOC & NOx is active, sensor not powered off");
 8009448:	4a20      	ldr	r2, [pc, #128]	@ (80094cc <sen5x_extinguish_measurement+0x98>)
 800944a:	4b21      	ldr	r3, [pc, #132]	@ (80094d0 <sen5x_extinguish_measurement+0x9c>)
 800944c:	0019      	movs	r1, r3
 800944e:	2002      	movs	r0, #2
 8009450:	f004 ffc8 	bl	800e3e4 <CreateLine>
    Info("PM measurement is disabled");
 8009454:	4a1f      	ldr	r2, [pc, #124]	@ (80094d4 <sen5x_extinguish_measurement+0xa0>)
 8009456:	4b1e      	ldr	r3, [pc, #120]	@ (80094d0 <sen5x_extinguish_measurement+0x9c>)
 8009458:	0019      	movs	r1, r3
 800945a:	2002      	movs	r0, #2
 800945c:	f004 ffc2 	bl	800e3e4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009460:	1dbc      	adds	r4, r7, #6
 8009462:	f000 fc59 	bl	8009d18 <sen5x_start_measurement_without_pm>
 8009466:	0003      	movs	r3, r0
 8009468:	8023      	strh	r3, [r4, #0]
    if (error) {
 800946a:	1dbb      	adds	r3, r7, #6
 800946c:	2200      	movs	r2, #0
 800946e:	5e9b      	ldrsh	r3, [r3, r2]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d022      	beq.n	80094ba <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 8009474:	1dbb      	adds	r3, r7, #6
 8009476:	2200      	movs	r2, #0
 8009478:	5e9b      	ldrsh	r3, [r3, r2]
 800947a:	4a17      	ldr	r2, [pc, #92]	@ (80094d8 <sen5x_extinguish_measurement+0xa4>)
 800947c:	4917      	ldr	r1, [pc, #92]	@ (80094dc <sen5x_extinguish_measurement+0xa8>)
 800947e:	2001      	movs	r0, #1
 8009480:	f004 ffb0 	bl	800e3e4 <CreateLine>
 8009484:	e019      	b.n	80094ba <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 8009486:	1dbc      	adds	r4, r7, #6
 8009488:	f000 fc74 	bl	8009d74 <sen5x_stop_measurement>
 800948c:	0003      	movs	r3, r0
 800948e:	8023      	strh	r3, [r4, #0]
    showTime();
 8009490:	f7fd f81a 	bl	80064c8 <showTime>
    Info("sen5x_stop_measurement executed");
 8009494:	4a12      	ldr	r2, [pc, #72]	@ (80094e0 <sen5x_extinguish_measurement+0xac>)
 8009496:	4b0e      	ldr	r3, [pc, #56]	@ (80094d0 <sen5x_extinguish_measurement+0x9c>)
 8009498:	0019      	movs	r1, r3
 800949a:	2002      	movs	r0, #2
 800949c:	f004 ffa2 	bl	800e3e4 <CreateLine>
    if (error) {
 80094a0:	1dbb      	adds	r3, r7, #6
 80094a2:	2200      	movs	r2, #0
 80094a4:	5e9b      	ldrsh	r3, [r3, r2]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 80094aa:	1dbb      	adds	r3, r7, #6
 80094ac:	2200      	movs	r2, #0
 80094ae:	5e9b      	ldrsh	r3, [r3, r2]
 80094b0:	4a0c      	ldr	r2, [pc, #48]	@ (80094e4 <sen5x_extinguish_measurement+0xb0>)
 80094b2:	490a      	ldr	r1, [pc, #40]	@ (80094dc <sen5x_extinguish_measurement+0xa8>)
 80094b4:	2001      	movs	r0, #1
 80094b6:	f004 ff95 	bl	800e3e4 <CreateLine>
    }
  }
  return error;
 80094ba:	1dbb      	adds	r3, r7, #6
 80094bc:	2200      	movs	r2, #0
 80094be:	5e9b      	ldrsh	r3, [r3, r2]
}
 80094c0:	0018      	movs	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	b003      	add	sp, #12
 80094c6:	bd90      	pop	{r4, r7, pc}
 80094c8:	2000105a 	.word	0x2000105a
 80094cc:	08024704 	.word	0x08024704
 80094d0:	08024458 	.word	0x08024458
 80094d4:	0802473c 	.word	0x0802473c
 80094d8:	08024758 	.word	0x08024758
 80094dc:	08024510 	.word	0x08024510
 80094e0:	08024798 	.word	0x08024798
 80094e4:	080247b8 	.word	0x080247b8

080094e8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80094e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ea:	b08d      	sub	sp, #52	@ 0x34
 80094ec:	af04      	add	r7, sp, #16
 80094ee:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 80094f0:	261e      	movs	r6, #30
 80094f2:	19bb      	adds	r3, r7, r6
 80094f4:	2200      	movs	r2, #0
 80094f6:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 80094f8:	19bc      	adds	r4, r7, r6
 80094fa:	2316      	movs	r3, #22
 80094fc:	18fd      	adds	r5, r7, r3
 80094fe:	2318      	movs	r3, #24
 8009500:	18fa      	adds	r2, r7, r3
 8009502:	231a      	movs	r3, #26
 8009504:	18f9      	adds	r1, r7, r3
 8009506:	231c      	movs	r3, #28
 8009508:	18f8      	adds	r0, r7, r3
 800950a:	230e      	movs	r3, #14
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	2310      	movs	r3, #16
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	2312      	movs	r3, #18
 8009518:	18fb      	adds	r3, r7, r3
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	2314      	movs	r3, #20
 800951e:	18fb      	adds	r3, r7, r3
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	002b      	movs	r3, r5
 8009524:	f000 fca8 	bl	8009e78 <sen5x_read_measured_values>
 8009528:	0003      	movs	r3, r0
 800952a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800952c:	19bb      	adds	r3, r7, r6
 800952e:	2200      	movs	r2, #0
 8009530:	5e9b      	ldrsh	r3, [r3, r2]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <sen5x_read_measurement+0x56>
    return error;
 8009536:	19bb      	adds	r3, r7, r6
 8009538:	2200      	movs	r2, #0
 800953a:	5e9b      	ldrsh	r3, [r3, r2]
 800953c:	e02c      	b.n	8009598 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800953e:	231c      	movs	r3, #28
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	881a      	ldrh	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009548:	231a      	movs	r3, #26
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	881a      	ldrh	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009552:	2318      	movs	r3, #24
 8009554:	18fb      	adds	r3, r7, r3
 8009556:	881a      	ldrh	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800955c:	2316      	movs	r3, #22
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	881a      	ldrh	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8009566:	2314      	movs	r3, #20
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	2200      	movs	r2, #0
 800956c:	5e9a      	ldrsh	r2, [r3, r2]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009572:	2312      	movs	r3, #18
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	2200      	movs	r2, #0
 8009578:	5e9a      	ldrsh	r2, [r3, r2]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800957e:	2310      	movs	r3, #16
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	2200      	movs	r2, #0
 8009584:	5e9a      	ldrsh	r2, [r3, r2]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800958a:	230e      	movs	r3, #14
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	2200      	movs	r2, #0
 8009590:	5e9a      	ldrsh	r2, [r3, r2]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	81da      	strh	r2, [r3, #14]
//  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0, nox_index);
  return 0;
 8009596:	2300      	movs	r3, #0
}
 8009598:	0018      	movs	r0, r3
 800959a:	46bd      	mov	sp, r7
 800959c:	b009      	add	sp, #36	@ 0x24
 800959e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095a0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
//  Debug("entering sen5x_printvalues");
//  Info("sen5x_printvalues entered for sample %d", sen5xSamples);
//  if (sen5xSamples != 3) {
//    return; // first two sample reads are not reliable
//  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80095a4:	4b69      	ldr	r3, [pc, #420]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	4a69      	ldr	r2, [pc, #420]	@ (8009750 <sen5x_printvalues+0x1b0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d013      	beq.n	80095d6 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80095ae:	4b67      	ldr	r3, [pc, #412]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	0018      	movs	r0, r3
 80095b4:	f7f8 f80c 	bl	80015d0 <__aeabi_i2f>
 80095b8:	1c03      	adds	r3, r0, #0
 80095ba:	4966      	ldr	r1, [pc, #408]	@ (8009754 <sen5x_printvalues+0x1b4>)
 80095bc:	1c18      	adds	r0, r3, #0
 80095be:	f7f7 fb09 	bl	8000bd4 <__aeabi_fdiv>
 80095c2:	1c03      	adds	r3, r0, #0
 80095c4:	1c18      	adds	r0, r3, #0
 80095c6:	f7f9 ff4d 	bl	8003464 <__aeabi_f2d>
 80095ca:	0002      	movs	r2, r0
 80095cc:	000b      	movs	r3, r1
 80095ce:	4962      	ldr	r1, [pc, #392]	@ (8009758 <sen5x_printvalues+0x1b8>)
 80095d0:	0008      	movs	r0, r1
 80095d2:	f016 fbf1 	bl	801fdb8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80095d6:	4b5d      	ldr	r3, [pc, #372]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095d8:	885b      	ldrh	r3, [r3, #2]
 80095da:	4a5d      	ldr	r2, [pc, #372]	@ (8009750 <sen5x_printvalues+0x1b0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d013      	beq.n	8009608 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 80095e0:	4b5a      	ldr	r3, [pc, #360]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095e2:	885b      	ldrh	r3, [r3, #2]
 80095e4:	0018      	movs	r0, r3
 80095e6:	f7f7 fff3 	bl	80015d0 <__aeabi_i2f>
 80095ea:	1c03      	adds	r3, r0, #0
 80095ec:	4959      	ldr	r1, [pc, #356]	@ (8009754 <sen5x_printvalues+0x1b4>)
 80095ee:	1c18      	adds	r0, r3, #0
 80095f0:	f7f7 faf0 	bl	8000bd4 <__aeabi_fdiv>
 80095f4:	1c03      	adds	r3, r0, #0
 80095f6:	1c18      	adds	r0, r3, #0
 80095f8:	f7f9 ff34 	bl	8003464 <__aeabi_f2d>
 80095fc:	0002      	movs	r2, r0
 80095fe:	000b      	movs	r3, r1
 8009600:	4956      	ldr	r1, [pc, #344]	@ (800975c <sen5x_printvalues+0x1bc>)
 8009602:	0008      	movs	r0, r1
 8009604:	f016 fbd8 	bl	801fdb8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009608:	4b50      	ldr	r3, [pc, #320]	@ (800974c <sen5x_printvalues+0x1ac>)
 800960a:	889b      	ldrh	r3, [r3, #4]
 800960c:	4a50      	ldr	r2, [pc, #320]	@ (8009750 <sen5x_printvalues+0x1b0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d013      	beq.n	800963a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009612:	4b4e      	ldr	r3, [pc, #312]	@ (800974c <sen5x_printvalues+0x1ac>)
 8009614:	889b      	ldrh	r3, [r3, #4]
 8009616:	0018      	movs	r0, r3
 8009618:	f7f7 ffda 	bl	80015d0 <__aeabi_i2f>
 800961c:	1c03      	adds	r3, r0, #0
 800961e:	494d      	ldr	r1, [pc, #308]	@ (8009754 <sen5x_printvalues+0x1b4>)
 8009620:	1c18      	adds	r0, r3, #0
 8009622:	f7f7 fad7 	bl	8000bd4 <__aeabi_fdiv>
 8009626:	1c03      	adds	r3, r0, #0
 8009628:	1c18      	adds	r0, r3, #0
 800962a:	f7f9 ff1b 	bl	8003464 <__aeabi_f2d>
 800962e:	0002      	movs	r2, r0
 8009630:	000b      	movs	r3, r1
 8009632:	494b      	ldr	r1, [pc, #300]	@ (8009760 <sen5x_printvalues+0x1c0>)
 8009634:	0008      	movs	r0, r1
 8009636:	f016 fbbf 	bl	801fdb8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800963a:	4b44      	ldr	r3, [pc, #272]	@ (800974c <sen5x_printvalues+0x1ac>)
 800963c:	88db      	ldrh	r3, [r3, #6]
 800963e:	4a44      	ldr	r2, [pc, #272]	@ (8009750 <sen5x_printvalues+0x1b0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009644:	4b41      	ldr	r3, [pc, #260]	@ (800974c <sen5x_printvalues+0x1ac>)
 8009646:	88db      	ldrh	r3, [r3, #6]
 8009648:	0018      	movs	r0, r3
 800964a:	f7f7 ffc1 	bl	80015d0 <__aeabi_i2f>
 800964e:	1c03      	adds	r3, r0, #0
 8009650:	4940      	ldr	r1, [pc, #256]	@ (8009754 <sen5x_printvalues+0x1b4>)
 8009652:	1c18      	adds	r0, r3, #0
 8009654:	f7f7 fabe 	bl	8000bd4 <__aeabi_fdiv>
 8009658:	1c03      	adds	r3, r0, #0
 800965a:	1c18      	adds	r0, r3, #0
 800965c:	f7f9 ff02 	bl	8003464 <__aeabi_f2d>
 8009660:	0002      	movs	r2, r0
 8009662:	000b      	movs	r3, r1
 8009664:	493f      	ldr	r1, [pc, #252]	@ (8009764 <sen5x_printvalues+0x1c4>)
 8009666:	0008      	movs	r0, r1
 8009668:	f016 fba6 	bl	801fdb8 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800966c:	4b37      	ldr	r3, [pc, #220]	@ (800974c <sen5x_printvalues+0x1ac>)
 800966e:	2208      	movs	r2, #8
 8009670:	5e9b      	ldrsh	r3, [r3, r2]
 8009672:	4a3d      	ldr	r2, [pc, #244]	@ (8009768 <sen5x_printvalues+0x1c8>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d014      	beq.n	80096a2 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009678:	4b34      	ldr	r3, [pc, #208]	@ (800974c <sen5x_printvalues+0x1ac>)
 800967a:	2208      	movs	r2, #8
 800967c:	5e9b      	ldrsh	r3, [r3, r2]
 800967e:	0018      	movs	r0, r3
 8009680:	f7f7 ffa6 	bl	80015d0 <__aeabi_i2f>
 8009684:	1c03      	adds	r3, r0, #0
 8009686:	4939      	ldr	r1, [pc, #228]	@ (800976c <sen5x_printvalues+0x1cc>)
 8009688:	1c18      	adds	r0, r3, #0
 800968a:	f7f7 faa3 	bl	8000bd4 <__aeabi_fdiv>
 800968e:	1c03      	adds	r3, r0, #0
 8009690:	1c18      	adds	r0, r3, #0
 8009692:	f7f9 fee7 	bl	8003464 <__aeabi_f2d>
 8009696:	0002      	movs	r2, r0
 8009698:	000b      	movs	r3, r1
 800969a:	4935      	ldr	r1, [pc, #212]	@ (8009770 <sen5x_printvalues+0x1d0>)
 800969c:	0008      	movs	r0, r1
 800969e:	f016 fb8b 	bl	801fdb8 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80096a2:	4b2a      	ldr	r3, [pc, #168]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096a4:	220a      	movs	r2, #10
 80096a6:	5e9b      	ldrsh	r3, [r3, r2]
 80096a8:	4a2f      	ldr	r2, [pc, #188]	@ (8009768 <sen5x_printvalues+0x1c8>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d014      	beq.n	80096d8 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80096ae:	4b27      	ldr	r3, [pc, #156]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096b0:	220a      	movs	r2, #10
 80096b2:	5e9b      	ldrsh	r3, [r3, r2]
 80096b4:	0018      	movs	r0, r3
 80096b6:	f7f7 ff8b 	bl	80015d0 <__aeabi_i2f>
 80096ba:	1c03      	adds	r3, r0, #0
 80096bc:	492d      	ldr	r1, [pc, #180]	@ (8009774 <sen5x_printvalues+0x1d4>)
 80096be:	1c18      	adds	r0, r3, #0
 80096c0:	f7f7 fa88 	bl	8000bd4 <__aeabi_fdiv>
 80096c4:	1c03      	adds	r3, r0, #0
 80096c6:	1c18      	adds	r0, r3, #0
 80096c8:	f7f9 fecc 	bl	8003464 <__aeabi_f2d>
 80096cc:	0002      	movs	r2, r0
 80096ce:	000b      	movs	r3, r1
 80096d0:	4929      	ldr	r1, [pc, #164]	@ (8009778 <sen5x_printvalues+0x1d8>)
 80096d2:	0008      	movs	r0, r1
 80096d4:	f016 fb70 	bl	801fdb8 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 80096d8:	4b1c      	ldr	r3, [pc, #112]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096da:	220c      	movs	r2, #12
 80096dc:	5e9b      	ldrsh	r3, [r3, r2]
 80096de:	4a22      	ldr	r2, [pc, #136]	@ (8009768 <sen5x_printvalues+0x1c8>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d014      	beq.n	800970e <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80096e4:	4b19      	ldr	r3, [pc, #100]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096e6:	220c      	movs	r2, #12
 80096e8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ea:	0018      	movs	r0, r3
 80096ec:	f7f7 ff70 	bl	80015d0 <__aeabi_i2f>
 80096f0:	1c03      	adds	r3, r0, #0
 80096f2:	4918      	ldr	r1, [pc, #96]	@ (8009754 <sen5x_printvalues+0x1b4>)
 80096f4:	1c18      	adds	r0, r3, #0
 80096f6:	f7f7 fa6d 	bl	8000bd4 <__aeabi_fdiv>
 80096fa:	1c03      	adds	r3, r0, #0
 80096fc:	1c18      	adds	r0, r3, #0
 80096fe:	f7f9 feb1 	bl	8003464 <__aeabi_f2d>
 8009702:	0002      	movs	r2, r0
 8009704:	000b      	movs	r3, r1
 8009706:	491d      	ldr	r1, [pc, #116]	@ (800977c <sen5x_printvalues+0x1dc>)
 8009708:	0008      	movs	r0, r1
 800970a:	f016 fb55 	bl	801fdb8 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800970e:	4b0f      	ldr	r3, [pc, #60]	@ (800974c <sen5x_printvalues+0x1ac>)
 8009710:	220e      	movs	r2, #14
 8009712:	5e9b      	ldrsh	r3, [r3, r2]
 8009714:	4a14      	ldr	r2, [pc, #80]	@ (8009768 <sen5x_printvalues+0x1c8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d014      	beq.n	8009744 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 800971a:	4b0c      	ldr	r3, [pc, #48]	@ (800974c <sen5x_printvalues+0x1ac>)
 800971c:	220e      	movs	r2, #14
 800971e:	5e9b      	ldrsh	r3, [r3, r2]
 8009720:	0018      	movs	r0, r3
 8009722:	f7f7 ff55 	bl	80015d0 <__aeabi_i2f>
 8009726:	1c03      	adds	r3, r0, #0
 8009728:	490a      	ldr	r1, [pc, #40]	@ (8009754 <sen5x_printvalues+0x1b4>)
 800972a:	1c18      	adds	r0, r3, #0
 800972c:	f7f7 fa52 	bl	8000bd4 <__aeabi_fdiv>
 8009730:	1c03      	adds	r3, r0, #0
 8009732:	1c18      	adds	r0, r3, #0
 8009734:	f7f9 fe96 	bl	8003464 <__aeabi_f2d>
 8009738:	0002      	movs	r2, r0
 800973a:	000b      	movs	r3, r1
 800973c:	4910      	ldr	r1, [pc, #64]	@ (8009780 <sen5x_printvalues+0x1e0>)
 800973e:	0008      	movs	r0, r1
 8009740:	f016 fb3a 	bl	801fdb8 <iprintf>
  }
}
 8009744:	46c0      	nop			@ (mov r8, r8)
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	46c0      	nop			@ (mov r8, r8)
 800974c:	20001074 	.word	0x20001074
 8009750:	0000ffff 	.word	0x0000ffff
 8009754:	41200000 	.word	0x41200000
 8009758:	080247e8 	.word	0x080247e8
 800975c:	08024814 	.word	0x08024814
 8009760:	08024840 	.word	0x08024840
 8009764:	0802486c 	.word	0x0802486c
 8009768:	00007fff 	.word	0x00007fff
 800976c:	42c80000 	.word	0x42c80000
 8009770:	08024898 	.word	0x08024898
 8009774:	43480000 	.word	0x43480000
 8009778:	080248bc 	.word	0x080248bc
 800977c:	080248e4 	.word	0x080248e4
 8009780:	080248fc 	.word	0x080248fc

08009784 <sen5xStoreMax>:

void sen5xStoreMax() {
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 8009788:	4b32      	ldr	r3, [pc, #200]	@ (8009854 <sen5xStoreMax+0xd0>)
 800978a:	885b      	ldrh	r3, [r3, #2]
 800978c:	4a32      	ldr	r2, [pc, #200]	@ (8009858 <sen5xStoreMax+0xd4>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <sen5xStoreMax+0x22>
 8009792:	4b30      	ldr	r3, [pc, #192]	@ (8009854 <sen5xStoreMax+0xd0>)
 8009794:	885a      	ldrh	r2, [r3, #2]
 8009796:	4b31      	ldr	r3, [pc, #196]	@ (800985c <sen5xStoreMax+0xd8>)
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d903      	bls.n	80097a6 <sen5xStoreMax+0x22>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 800979e:	4b2d      	ldr	r3, [pc, #180]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097a0:	885a      	ldrh	r2, [r3, #2]
 80097a2:	4b2e      	ldr	r3, [pc, #184]	@ (800985c <sen5xStoreMax+0xd8>)
 80097a4:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 80097a6:	4b2b      	ldr	r3, [pc, #172]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097a8:	88db      	ldrh	r3, [r3, #6]
 80097aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009858 <sen5xStoreMax+0xd4>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d009      	beq.n	80097c4 <sen5xStoreMax+0x40>
 80097b0:	4b28      	ldr	r3, [pc, #160]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097b2:	88da      	ldrh	r2, [r3, #6]
 80097b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009860 <sen5xStoreMax+0xdc>)
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d903      	bls.n	80097c4 <sen5xStoreMax+0x40>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 80097bc:	4b25      	ldr	r3, [pc, #148]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097be:	88da      	ldrh	r2, [r3, #6]
 80097c0:	4b27      	ldr	r3, [pc, #156]	@ (8009860 <sen5xStoreMax+0xdc>)
 80097c2:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 80097c4:	4b23      	ldr	r3, [pc, #140]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097c6:	220c      	movs	r2, #12
 80097c8:	5e9b      	ldrsh	r3, [r3, r2]
 80097ca:	4a26      	ldr	r2, [pc, #152]	@ (8009864 <sen5xStoreMax+0xe0>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d00d      	beq.n	80097ec <sen5xStoreMax+0x68>
 80097d0:	4b20      	ldr	r3, [pc, #128]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097d2:	220c      	movs	r2, #12
 80097d4:	5e9b      	ldrsh	r3, [r3, r2]
 80097d6:	001a      	movs	r2, r3
 80097d8:	4b23      	ldr	r3, [pc, #140]	@ (8009868 <sen5xStoreMax+0xe4>)
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	429a      	cmp	r2, r3
 80097de:	dd05      	ble.n	80097ec <sen5xStoreMax+0x68>
    s5xvocimax = sen5x_data.voc_index;
 80097e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097e2:	220c      	movs	r2, #12
 80097e4:	5e9b      	ldrsh	r3, [r3, r2]
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009868 <sen5xStoreMax+0xe4>)
 80097ea:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 80097ec:	4b19      	ldr	r3, [pc, #100]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097ee:	220e      	movs	r2, #14
 80097f0:	5e9b      	ldrsh	r3, [r3, r2]
 80097f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009864 <sen5xStoreMax+0xe0>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d00d      	beq.n	8009814 <sen5xStoreMax+0x90>
 80097f8:	4b16      	ldr	r3, [pc, #88]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097fa:	220e      	movs	r2, #14
 80097fc:	5e9b      	ldrsh	r3, [r3, r2]
 80097fe:	001a      	movs	r2, r3
 8009800:	4b1a      	ldr	r3, [pc, #104]	@ (800986c <sen5xStoreMax+0xe8>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	dd05      	ble.n	8009814 <sen5xStoreMax+0x90>
    s5xnoximax = sen5x_data.nox_index;
 8009808:	4b12      	ldr	r3, [pc, #72]	@ (8009854 <sen5xStoreMax+0xd0>)
 800980a:	220e      	movs	r2, #14
 800980c:	5e9b      	ldrsh	r3, [r3, r2]
 800980e:	b29a      	uxth	r2, r3
 8009810:	4b16      	ldr	r3, [pc, #88]	@ (800986c <sen5xStoreMax+0xe8>)
 8009812:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009814:	4b16      	ldr	r3, [pc, #88]	@ (8009870 <sen5xStoreMax+0xec>)
 8009816:	791b      	ldrb	r3, [r3, #4]
 8009818:	2b34      	cmp	r3, #52	@ 0x34
 800981a:	d003      	beq.n	8009824 <sen5xStoreMax+0xa0>
 800981c:	4b14      	ldr	r3, [pc, #80]	@ (8009870 <sen5xStoreMax+0xec>)
 800981e:	791b      	ldrb	r3, [r3, #4]
 8009820:	2b35      	cmp	r3, #53	@ 0x35
 8009822:	d10a      	bne.n	800983a <sen5xStoreMax+0xb6>
    setPMs(pm2p5max, pm10p0max, s5xvocimax, s5xnoximax);
 8009824:	4b0d      	ldr	r3, [pc, #52]	@ (800985c <sen5xStoreMax+0xd8>)
 8009826:	8818      	ldrh	r0, [r3, #0]
 8009828:	4b0d      	ldr	r3, [pc, #52]	@ (8009860 <sen5xStoreMax+0xdc>)
 800982a:	8819      	ldrh	r1, [r3, #0]
 800982c:	4b0e      	ldr	r3, [pc, #56]	@ (8009868 <sen5xStoreMax+0xe4>)
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	4b0e      	ldr	r3, [pc, #56]	@ (800986c <sen5xStoreMax+0xe8>)
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	f7fa f8d4 	bl	80039e0 <setPMs>
 8009838:	e008      	b.n	800984c <sen5xStoreMax+0xc8>
  }
  else {
    setPMsen50(pm2p5max, pm10p0max);
 800983a:	4b08      	ldr	r3, [pc, #32]	@ (800985c <sen5xStoreMax+0xd8>)
 800983c:	881a      	ldrh	r2, [r3, #0]
 800983e:	4b08      	ldr	r3, [pc, #32]	@ (8009860 <sen5xStoreMax+0xdc>)
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	0019      	movs	r1, r3
 8009844:	0010      	movs	r0, r2
 8009846:	f7fa f89b 	bl	8003980 <setPMsen50>
  }
}
 800984a:	46c0      	nop			@ (mov r8, r8)
 800984c:	46c0      	nop			@ (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	46c0      	nop			@ (mov r8, r8)
 8009854:	20001074 	.word	0x20001074
 8009858:	0000ffff 	.word	0x0000ffff
 800985c:	20001066 	.word	0x20001066
 8009860:	20001068 	.word	0x20001068
 8009864:	00007fff 	.word	0x00007fff
 8009868:	2000106a 	.word	0x2000106a
 800986c:	2000106c 	.word	0x2000106c
 8009870:	2000105c 	.word	0x2000105c

08009874 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009874:	b590      	push	{r4, r7, lr}
 8009876:	b085      	sub	sp, #20
 8009878:	af02      	add	r7, sp, #8
 800987a:	6039      	str	r1, [r7, #0]
 800987c:	0011      	movs	r1, r2
 800987e:	1dfb      	adds	r3, r7, #7
 8009880:	1c02      	adds	r2, r0, #0
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	1d3b      	adds	r3, r7, #4
 8009886:	1c0a      	adds	r2, r1, #0
 8009888:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800988a:	1dfb      	adds	r3, r7, #7
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	18db      	adds	r3, r3, r3
 8009892:	b299      	uxth	r1, r3
 8009894:	1d3b      	adds	r3, r7, #4
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	4805      	ldr	r0, [pc, #20]	@ (80098b0 <sensirion_i2c_hal_read+0x3c>)
 800989c:	2464      	movs	r4, #100	@ 0x64
 800989e:	9400      	str	r4, [sp, #0]
 80098a0:	f006 fe4e 	bl	8010540 <HAL_I2C_Master_Receive>
 80098a4:	0003      	movs	r3, r0
 80098a6:	b25b      	sxtb	r3, r3
}
 80098a8:	0018      	movs	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b003      	add	sp, #12
 80098ae:	bd90      	pop	{r4, r7, pc}
 80098b0:	20000e38 	.word	0x20000e38

080098b4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 80098b4:	b590      	push	{r4, r7, lr}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6039      	str	r1, [r7, #0]
 80098bc:	0011      	movs	r1, r2
 80098be:	1dfb      	adds	r3, r7, #7
 80098c0:	1c02      	adds	r2, r0, #0
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	1d3b      	adds	r3, r7, #4
 80098c6:	1c0a      	adds	r2, r1, #0
 80098c8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 80098ca:	1dfb      	adds	r3, r7, #7
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	18db      	adds	r3, r3, r3
 80098d2:	b299      	uxth	r1, r3
 80098d4:	1d3b      	adds	r3, r7, #4
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	4805      	ldr	r0, [pc, #20]	@ (80098f0 <sensirion_i2c_hal_write+0x3c>)
 80098dc:	2464      	movs	r4, #100	@ 0x64
 80098de:	9400      	str	r4, [sp, #0]
 80098e0:	f006 fd26 	bl	8010330 <HAL_I2C_Master_Transmit>
 80098e4:	0003      	movs	r3, r0
 80098e6:	b25b      	sxtb	r3, r3
}
 80098e8:	0018      	movs	r0, r3
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b003      	add	sp, #12
 80098ee:	bd90      	pop	{r4, r7, pc}
 80098f0:	20000e38 	.word	0x20000e38

080098f4 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	22fa      	movs	r2, #250	@ 0xfa
 8009900:	0091      	lsls	r1, r2, #2
 8009902:	0018      	movs	r0, r3
 8009904:	f7f6 fc4e 	bl	80001a4 <__udivsi3>
 8009908:	0003      	movs	r3, r0
 800990a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	22fa      	movs	r2, #250	@ 0xfa
 8009910:	0091      	lsls	r1, r2, #2
 8009912:	0018      	movs	r0, r3
 8009914:	f7f6 fccc 	bl	80002b0 <__aeabi_uidivmod>
 8009918:	1e0b      	subs	r3, r1, #0
 800991a:	d002      	beq.n	8009922 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	0018      	movs	r0, r3
 8009926:	f005 f9ad 	bl	800ec84 <HAL_Delay>
}
 800992a:	46c0      	nop			@ (mov r8, r8)
 800992c:	46bd      	mov	sp, r7
 800992e:	b004      	add	sp, #16
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800993e:	1d3b      	adds	r3, r7, #4
 8009940:	0018      	movs	r0, r3
 8009942:	f000 fcd9 	bl	800a2f8 <sen5x_read_device_status>
 8009946:	1e03      	subs	r3, r0, #0
 8009948:	d007      	beq.n	800995a <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800994a:	4a28      	ldr	r2, [pc, #160]	@ (80099ec <sen5x_check_for_errors+0xb8>)
 800994c:	4b28      	ldr	r3, [pc, #160]	@ (80099f0 <sen5x_check_for_errors+0xbc>)
 800994e:	0019      	movs	r1, r3
 8009950:	2001      	movs	r0, #1
 8009952:	f004 fd47 	bl	800e3e4 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 8009956:	2300      	movs	r3, #0
 8009958:	e043      	b.n	80099e2 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 8009960:	2300      	movs	r3, #0
 8009962:	e03e      	b.n	80099e2 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	2380      	movs	r3, #128	@ 0x80
 8009968:	039b      	lsls	r3, r3, #14
 800996a:	4013      	ands	r3, r2
 800996c:	d005      	beq.n	800997a <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800996e:	4a21      	ldr	r2, [pc, #132]	@ (80099f4 <sen5x_check_for_errors+0xc0>)
 8009970:	4b21      	ldr	r3, [pc, #132]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 8009972:	0019      	movs	r1, r3
 8009974:	2003      	movs	r0, #3
 8009976:	f004 fd35 	bl	800e3e4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	2380      	movs	r3, #128	@ 0x80
 800997e:	031b      	lsls	r3, r3, #12
 8009980:	4013      	ands	r3, r2
 8009982:	d005      	beq.n	8009990 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009984:	4a1d      	ldr	r2, [pc, #116]	@ (80099fc <sen5x_check_for_errors+0xc8>)
 8009986:	4b1c      	ldr	r3, [pc, #112]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 8009988:	0019      	movs	r1, r3
 800998a:	2003      	movs	r0, #3
 800998c:	f004 fd2a 	bl	800e3e4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2280      	movs	r2, #128	@ 0x80
 8009994:	4013      	ands	r3, r2
 8009996:	d005      	beq.n	80099a4 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009998:	4a19      	ldr	r2, [pc, #100]	@ (8009a00 <sen5x_check_for_errors+0xcc>)
 800999a:	4b17      	ldr	r3, [pc, #92]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 800999c:	0019      	movs	r1, r3
 800999e:	2003      	movs	r0, #3
 80099a0:	f004 fd20 	bl	800e3e4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2240      	movs	r2, #64	@ 0x40
 80099a8:	4013      	ands	r3, r2
 80099aa:	d005      	beq.n	80099b8 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 80099ac:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <sen5x_check_for_errors+0xd0>)
 80099ae:	4b12      	ldr	r3, [pc, #72]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 80099b0:	0019      	movs	r1, r3
 80099b2:	2003      	movs	r0, #3
 80099b4:	f004 fd16 	bl	800e3e4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2220      	movs	r2, #32
 80099bc:	4013      	ands	r3, r2
 80099be:	d005      	beq.n	80099cc <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 80099c0:	4a11      	ldr	r2, [pc, #68]	@ (8009a08 <sen5x_check_for_errors+0xd4>)
 80099c2:	4b0d      	ldr	r3, [pc, #52]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 80099c4:	0019      	movs	r1, r3
 80099c6:	2003      	movs	r0, #3
 80099c8:	f004 fd0c 	bl	800e3e4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2210      	movs	r2, #16
 80099d0:	4013      	ands	r3, r2
 80099d2:	d005      	beq.n	80099e0 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 80099d4:	4a0d      	ldr	r2, [pc, #52]	@ (8009a0c <sen5x_check_for_errors+0xd8>)
 80099d6:	4b08      	ldr	r3, [pc, #32]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 80099d8:	0019      	movs	r1, r3
 80099da:	2003      	movs	r0, #3
 80099dc:	f004 fd02 	bl	800e3e4 <CreateLine>
  }
  return 1;
 80099e0:	2301      	movs	r3, #1
}
 80099e2:	0018      	movs	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b002      	add	sp, #8
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	46c0      	nop			@ (mov r8, r8)
 80099ec:	08024914 	.word	0x08024914
 80099f0:	08024510 	.word	0x08024510
 80099f4:	08024940 	.word	0x08024940
 80099f8:	08024430 	.word	0x08024430
 80099fc:	08024960 	.word	0x08024960
 8009a00:	0802497c 	.word	0x0802497c
 8009a04:	080249a0 	.word	0x080249a0
 8009a08:	080249c0 	.word	0x080249c0
 8009a0c:	080249d4 	.word	0x080249d4

08009a10 <set_light_on_state>:

void set_light_on_state(void) {
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009a14:	4b15      	ldr	r3, [pc, #84]	@ (8009a6c <set_light_on_state+0x5c>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	4053      	eors	r3, r2
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d008      	beq.n	8009a34 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009a22:	f7ff fb4d 	bl	80090c0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009a26:	4a12      	ldr	r2, [pc, #72]	@ (8009a70 <set_light_on_state+0x60>)
 8009a28:	4b12      	ldr	r3, [pc, #72]	@ (8009a74 <set_light_on_state+0x64>)
 8009a2a:	0019      	movs	r1, r3
 8009a2c:	2003      	movs	r0, #3
 8009a2e:	f004 fcd9 	bl	800e3e4 <CreateLine>
 8009a32:	e00a      	b.n	8009a4a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009a34:	f005 f91c 	bl	800ec70 <HAL_GetTick>
 8009a38:	0002      	movs	r2, r0
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a78 <set_light_on_state+0x68>)
 8009a3c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009a7c <set_light_on_state+0x6c>)
 8009a40:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <set_light_on_state+0x64>)
 8009a42:	0019      	movs	r1, r3
 8009a44:	2003      	movs	r0, #3
 8009a46:	f004 fccd 	bl	800e3e4 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009a4a:	f7ff fca7 	bl	800939c <sen5x_lightup_measurement>
 8009a4e:	1e03      	subs	r3, r0, #0
 8009a50:	d005      	beq.n	8009a5e <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009a52:	4a0b      	ldr	r2, [pc, #44]	@ (8009a80 <set_light_on_state+0x70>)
 8009a54:	4b0b      	ldr	r3, [pc, #44]	@ (8009a84 <set_light_on_state+0x74>)
 8009a56:	0019      	movs	r1, r3
 8009a58:	2001      	movs	r0, #1
 8009a5a:	f004 fcc3 	bl	800e3e4 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a88 <set_light_on_state+0x78>)
 8009a60:	2203      	movs	r2, #3
 8009a62:	701a      	strb	r2, [r3, #0]
}
 8009a64:	46c0      	nop			@ (mov r8, r8)
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	20001059 	.word	0x20001059
 8009a70:	08024a10 	.word	0x08024a10
 8009a74:	08024430 	.word	0x08024430
 8009a78:	20001070 	.word	0x20001070
 8009a7c:	08024a3c 	.word	0x08024a3c
 8009a80:	08024a54 	.word	0x08024a54
 8009a84:	08024510 	.word	0x08024510
 8009a88:	20000082 	.word	0x20000082

08009a8c <sen5x_statemachine>:

void sen5x_statemachine() {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009a92:	1dfb      	adds	r3, r7, #7
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
//  Debug("sen5xReadTimer has value %d", sen5xReadTimer);
  if (TimestampIsReached(sen5xReadTimer)) {
 8009a98:	4b75      	ldr	r3, [pc, #468]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f004 fc4b 	bl	800e338 <TimestampIsReached>
 8009aa2:	1e03      	subs	r3, r0, #0
 8009aa4:	d100      	bne.n	8009aa8 <sen5x_statemachine+0x1c>
 8009aa6:	e0df      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009aa8:	4b72      	ldr	r3, [pc, #456]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b05      	cmp	r3, #5
 8009aae:	d900      	bls.n	8009ab2 <sen5x_statemachine+0x26>
 8009ab0:	e0da      	b.n	8009c68 <sen5x_statemachine+0x1dc>
 8009ab2:	009a      	lsls	r2, r3, #2
 8009ab4:	4b70      	ldr	r3, [pc, #448]	@ (8009c78 <sen5x_statemachine+0x1ec>)
 8009ab6:	18d3      	adds	r3, r2, r3
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009abc:	4a6f      	ldr	r2, [pc, #444]	@ (8009c7c <sen5x_statemachine+0x1f0>)
 8009abe:	4b70      	ldr	r3, [pc, #448]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009ac0:	0019      	movs	r1, r3
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f004 fc8e 	bl	800e3e4 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009ac8:	f005 f8d2 	bl	800ec70 <HAL_GetTick>
 8009acc:	0003      	movs	r3, r0
 8009ace:	4a6d      	ldr	r2, [pc, #436]	@ (8009c84 <sen5x_statemachine+0x1f8>)
 8009ad0:	189a      	adds	r2, r3, r2
 8009ad2:	4b67      	ldr	r3, [pc, #412]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009ad4:	601a      	str	r2, [r3, #0]
      break;
 8009ad6:	e0c7      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009ad8:	f005 f8ca 	bl	800ec70 <HAL_GetTick>
 8009adc:	0003      	movs	r3, r0
 8009ade:	4a6a      	ldr	r2, [pc, #424]	@ (8009c88 <sen5x_statemachine+0x1fc>)
 8009ae0:	189a      	adds	r2, r3, r2
 8009ae2:	4b63      	ldr	r3, [pc, #396]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009ae4:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009ae6:	f7ff ff93 	bl	8009a10 <set_light_on_state>
      break;
 8009aea:	e0bd      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 8009aec:	4b61      	ldr	r3, [pc, #388]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009aee:	2202      	movs	r2, #2
 8009af0:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009af2:	4b66      	ldr	r3, [pc, #408]	@ (8009c8c <sen5x_statemachine+0x200>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d905      	bls.n	8009b06 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009afa:	4b5e      	ldr	r3, [pc, #376]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009b00:	f7ff fafe 	bl	8009100 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009b04:	e0ad      	b.n	8009c62 <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009b06:	f7ff ff15 	bl	8009934 <sen5x_check_for_errors>
 8009b0a:	1e03      	subs	r3, r0, #0
 8009b0c:	d100      	bne.n	8009b10 <sen5x_statemachine+0x84>
 8009b0e:	e0a8      	b.n	8009c62 <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009b10:	f000 fc44 	bl	800a39c <sen5x_device_reset>
 8009b14:	1e03      	subs	r3, r0, #0
 8009b16:	d006      	beq.n	8009b26 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009b18:	4a5d      	ldr	r2, [pc, #372]	@ (8009c90 <sen5x_statemachine+0x204>)
 8009b1a:	4b59      	ldr	r3, [pc, #356]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f004 fc60 	bl	800e3e4 <CreateLine>
 8009b24:	e005      	b.n	8009b32 <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009b26:	4a5b      	ldr	r2, [pc, #364]	@ (8009c94 <sen5x_statemachine+0x208>)
 8009b28:	4b5b      	ldr	r3, [pc, #364]	@ (8009c98 <sen5x_statemachine+0x20c>)
 8009b2a:	0019      	movs	r1, r3
 8009b2c:	2002      	movs	r0, #2
 8009b2e:	f004 fc59 	bl	800e3e4 <CreateLine>
          sen5xErrors++;
 8009b32:	4b56      	ldr	r3, [pc, #344]	@ (8009c8c <sen5x_statemachine+0x200>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	3301      	adds	r3, #1
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	4b54      	ldr	r3, [pc, #336]	@ (8009c8c <sen5x_statemachine+0x200>)
 8009b3c:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009b3e:	f005 f897 	bl	800ec70 <HAL_GetTick>
 8009b42:	0003      	movs	r3, r0
 8009b44:	3396      	adds	r3, #150	@ 0x96
 8009b46:	001a      	movs	r2, r3
 8009b48:	4b49      	ldr	r3, [pc, #292]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009b4a:	601a      	str	r2, [r3, #0]
      break;
 8009b4c:	e089      	b.n	8009c62 <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009b4e:	1dfb      	adds	r3, r7, #7
 8009b50:	0018      	movs	r0, r3
 8009b52:	f000 f93f 	bl	8009dd4 <sen5x_read_data_ready>
      if (data_ready) {
 8009b56:	1dfb      	adds	r3, r7, #7
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d028      	beq.n	8009bb0 <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009b5e:	f003 fc95 	bl	800d48c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009b62:	4b4e      	ldr	r3, [pc, #312]	@ (8009c9c <sen5x_statemachine+0x210>)
 8009b64:	0018      	movs	r0, r3
 8009b66:	f7ff fcbf 	bl	80094e8 <sen5x_read_measurement>
 8009b6a:	1e03      	subs	r3, r0, #0
 8009b6c:	d005      	beq.n	8009b7a <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8009ca0 <sen5x_statemachine+0x214>)
 8009b70:	4b43      	ldr	r3, [pc, #268]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009b72:	0019      	movs	r1, r3
 8009b74:	2001      	movs	r0, #1
 8009b76:	f004 fc35 	bl	800e3e4 <CreateLine>
        }
        sen5xSamples++;
 8009b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	4b48      	ldr	r3, [pc, #288]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b84:	701a      	strb	r2, [r3, #0]
        sen5xStoreMax();
 8009b86:	f7ff fdfd 	bl	8009784 <sen5xStoreMax>
        if (sen5xSamples == 31) { // about two times a minute
 8009b8a:	4b46      	ldr	r3, [pc, #280]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b1f      	cmp	r3, #31
 8009b90:	d102      	bne.n	8009b98 <sen5x_statemachine+0x10c>
          sen5xSamples = 0;  // enable display on serial
 8009b92:	4b44      	ldr	r3, [pc, #272]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009b98:	4b42      	ldr	r3, [pc, #264]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d901      	bls.n	8009ba4 <sen5x_statemachine+0x118>
          sen5xStoreMax();
 8009ba0:	f7ff fdf0 	bl	8009784 <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009ba4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d101      	bne.n	8009bb0 <sen5x_statemachine+0x124>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009bac:	f7ff fcf8 	bl	80095a0 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8009ca8 <sen5x_statemachine+0x21c>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d103      	bne.n	8009bc0 <sen5x_statemachine+0x134>
 8009bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d952      	bls.n	8009c66 <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009bc2:	2204      	movs	r2, #4
 8009bc4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009bc6:	e04e      	b.n	8009c66 <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
//      Debug(" state is CLEAN_FAN");
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009bc8:	f7fc ff2a 	bl	8006a20 <RTC_GetWeekday>
 8009bcc:	0003      	movs	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d118      	bne.n	8009c04 <sen5x_statemachine+0x178>
 8009bd2:	4b36      	ldr	r3, [pc, #216]	@ (8009cac <sen5x_statemachine+0x220>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4053      	eors	r3, r2
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d011      	beq.n	8009c04 <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009be0:	f000 f9de 	bl	8009fa0 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009be4:	4a32      	ldr	r2, [pc, #200]	@ (8009cb0 <sen5x_statemachine+0x224>)
 8009be6:	4b2c      	ldr	r3, [pc, #176]	@ (8009c98 <sen5x_statemachine+0x20c>)
 8009be8:	0019      	movs	r1, r3
 8009bea:	2002      	movs	r0, #2
 8009bec:	f004 fbfa 	bl	800e3e4 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009bf0:	f005 f83e 	bl	800ec70 <HAL_GetTick>
 8009bf4:	0003      	movs	r3, r0
 8009bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8009cb4 <sen5x_statemachine+0x228>)
 8009bf8:	189a      	adds	r2, r3, r2
 8009bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009bfc:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8009cac <sen5x_statemachine+0x220>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009c04:	4b1b      	ldr	r3, [pc, #108]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009c06:	2205      	movs	r2, #5
 8009c08:	701a      	strb	r2, [r3, #0]
      break;
 8009c0a:	e02d      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 8009c0c:	4b26      	ldr	r3, [pc, #152]	@ (8009ca8 <sen5x_statemachine+0x21c>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2201      	movs	r2, #1
 8009c12:	4053      	eors	r3, r2
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d015      	beq.n	8009c46 <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009c1a:	f7ff fc0b 	bl	8009434 <sen5x_extinguish_measurement>
 8009c1e:	1e03      	subs	r3, r0, #0
 8009c20:	d005      	beq.n	8009c2e <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009c22:	4a25      	ldr	r2, [pc, #148]	@ (8009cb8 <sen5x_statemachine+0x22c>)
 8009c24:	4b16      	ldr	r3, [pc, #88]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009c26:	0019      	movs	r1, r3
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f004 fbdb 	bl	800e3e4 <CreateLine>
        }
        sen5xSamples = 0;
 8009c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009c34:	f7ff fa64 	bl	8009100 <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009c38:	2000      	movs	r0, #0
 8009c3a:	f7fe fbd1 	bl	80083e0 <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e002      	b.n	8009c4c <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009c48:	2203      	movs	r2, #3
 8009c4a:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009c4c:	f003 fc44 	bl	800d4d8 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009c50:	f005 f80e 	bl	800ec70 <HAL_GetTick>
 8009c54:	0003      	movs	r3, r0
 8009c56:	22fa      	movs	r2, #250	@ 0xfa
 8009c58:	0092      	lsls	r2, r2, #2
 8009c5a:	189a      	adds	r2, r3, r2
 8009c5c:	4b04      	ldr	r3, [pc, #16]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009c5e:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009c60:	e002      	b.n	8009c68 <sen5x_statemachine+0x1dc>
      break;
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	e000      	b.n	8009c68 <sen5x_statemachine+0x1dc>
      break;
 8009c66:	46c0      	nop			@ (mov r8, r8)
}
 8009c68:	46c0      	nop			@ (mov r8, r8)
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	b002      	add	sp, #8
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20001070 	.word	0x20001070
 8009c74:	20000082 	.word	0x20000082
 8009c78:	0802543c 	.word	0x0802543c
 8009c7c:	08024a80 	.word	0x08024a80
 8009c80:	08024510 	.word	0x08024510
 8009c84:	002fefd8 	.word	0x002fefd8
 8009c88:	00005910 	.word	0x00005910
 8009c8c:	20001065 	.word	0x20001065
 8009c90:	08024ab0 	.word	0x08024ab0
 8009c94:	08024ac8 	.word	0x08024ac8
 8009c98:	08024458 	.word	0x08024458
 8009c9c:	20001074 	.word	0x20001074
 8009ca0:	08024ae0 	.word	0x08024ae0
 8009ca4:	20001064 	.word	0x20001064
 8009ca8:	20001ff1 	.word	0x20001ff1
 8009cac:	20001058 	.word	0x20001058
 8009cb0:	08024b10 	.word	0x08024b10
 8009cb4:	00002710 	.word	0x00002710
 8009cb8:	08024b28 	.word	0x08024b28

08009cbc <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009cc2:	1dbb      	adds	r3, r7, #6
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009cc8:	1dbc      	adds	r4, r7, #6
 8009cca:	1dbb      	adds	r3, r7, #6
 8009ccc:	8819      	ldrh	r1, [r3, #0]
 8009cce:	003b      	movs	r3, r7
 8009cd0:	2221      	movs	r2, #33	@ 0x21
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f001 fb56 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009cd8:	0003      	movs	r3, r0
 8009cda:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009cdc:	1d3c      	adds	r4, r7, #4
 8009cde:	1dbb      	adds	r3, r7, #6
 8009ce0:	881a      	ldrh	r2, [r3, #0]
 8009ce2:	003b      	movs	r3, r7
 8009ce4:	0019      	movs	r1, r3
 8009ce6:	2069      	movs	r0, #105	@ 0x69
 8009ce8:	f001 fbd0 	bl	800b48c <sensirion_i2c_write_data>
 8009cec:	0003      	movs	r3, r0
 8009cee:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009cf0:	1d3b      	adds	r3, r7, #4
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	5e9b      	ldrsh	r3, [r3, r2]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <sen5x_start_measurement+0x46>
        return error;
 8009cfa:	1d3b      	adds	r3, r7, #4
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	5e9b      	ldrsh	r3, [r3, r2]
 8009d00:	e004      	b.n	8009d0c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d02:	4b04      	ldr	r3, [pc, #16]	@ (8009d14 <sen5x_start_measurement+0x58>)
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7ff fdf5 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b003      	add	sp, #12
 8009d12:	bd90      	pop	{r4, r7, pc}
 8009d14:	0000c350 	.word	0x0000c350

08009d18 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d1e:	1dbb      	adds	r3, r7, #6
 8009d20:	2200      	movs	r2, #0
 8009d22:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009d24:	1dbc      	adds	r4, r7, #6
 8009d26:	1dbb      	adds	r3, r7, #6
 8009d28:	8819      	ldrh	r1, [r3, #0]
 8009d2a:	003b      	movs	r3, r7
 8009d2c:	2237      	movs	r2, #55	@ 0x37
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f001 fb28 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009d34:	0003      	movs	r3, r0
 8009d36:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d38:	1d3c      	adds	r4, r7, #4
 8009d3a:	1dbb      	adds	r3, r7, #6
 8009d3c:	881a      	ldrh	r2, [r3, #0]
 8009d3e:	003b      	movs	r3, r7
 8009d40:	0019      	movs	r1, r3
 8009d42:	2069      	movs	r0, #105	@ 0x69
 8009d44:	f001 fba2 	bl	800b48c <sensirion_i2c_write_data>
 8009d48:	0003      	movs	r3, r0
 8009d4a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d4c:	1d3b      	adds	r3, r7, #4
 8009d4e:	2200      	movs	r2, #0
 8009d50:	5e9b      	ldrsh	r3, [r3, r2]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009d56:	1d3b      	adds	r3, r7, #4
 8009d58:	2200      	movs	r2, #0
 8009d5a:	5e9b      	ldrsh	r3, [r3, r2]
 8009d5c:	e004      	b.n	8009d68 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d5e:	4b04      	ldr	r3, [pc, #16]	@ (8009d70 <sen5x_start_measurement_without_pm+0x58>)
 8009d60:	0018      	movs	r0, r3
 8009d62:	f7ff fdc7 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	0018      	movs	r0, r3
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	b003      	add	sp, #12
 8009d6e:	bd90      	pop	{r4, r7, pc}
 8009d70:	0000c350 	.word	0x0000c350

08009d74 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d7a:	1dbb      	adds	r3, r7, #6
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009d80:	1dbc      	adds	r4, r7, #6
 8009d82:	2382      	movs	r3, #130	@ 0x82
 8009d84:	005a      	lsls	r2, r3, #1
 8009d86:	1dbb      	adds	r3, r7, #6
 8009d88:	8819      	ldrh	r1, [r3, #0]
 8009d8a:	003b      	movs	r3, r7
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f001 faf9 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009d92:	0003      	movs	r3, r0
 8009d94:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d96:	1d3c      	adds	r4, r7, #4
 8009d98:	1dbb      	adds	r3, r7, #6
 8009d9a:	881a      	ldrh	r2, [r3, #0]
 8009d9c:	003b      	movs	r3, r7
 8009d9e:	0019      	movs	r1, r3
 8009da0:	2069      	movs	r0, #105	@ 0x69
 8009da2:	f001 fb73 	bl	800b48c <sensirion_i2c_write_data>
 8009da6:	0003      	movs	r3, r0
 8009da8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009daa:	1d3b      	adds	r3, r7, #4
 8009dac:	2200      	movs	r2, #0
 8009dae:	5e9b      	ldrsh	r3, [r3, r2]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <sen5x_stop_measurement+0x48>
        return error;
 8009db4:	1d3b      	adds	r3, r7, #4
 8009db6:	2200      	movs	r2, #0
 8009db8:	5e9b      	ldrsh	r3, [r3, r2]
 8009dba:	e004      	b.n	8009dc6 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009dbc:	4b04      	ldr	r3, [pc, #16]	@ (8009dd0 <sen5x_stop_measurement+0x5c>)
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f7ff fd98 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	b003      	add	sp, #12
 8009dcc:	bd90      	pop	{r4, r7, pc}
 8009dce:	46c0      	nop			@ (mov r8, r8)
 8009dd0:	00030d40 	.word	0x00030d40

08009dd4 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009ddc:	250e      	movs	r5, #14
 8009dde:	197b      	adds	r3, r7, r5
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009de4:	197c      	adds	r4, r7, r5
 8009de6:	4a22      	ldr	r2, [pc, #136]	@ (8009e70 <sen5x_read_data_ready+0x9c>)
 8009de8:	197b      	adds	r3, r7, r5
 8009dea:	8819      	ldrh	r1, [r3, #0]
 8009dec:	2308      	movs	r3, #8
 8009dee:	18fb      	adds	r3, r7, r3
 8009df0:	0018      	movs	r0, r3
 8009df2:	f001 fac7 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009df6:	0003      	movs	r3, r0
 8009df8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009dfa:	260c      	movs	r6, #12
 8009dfc:	19bc      	adds	r4, r7, r6
 8009dfe:	197b      	adds	r3, r7, r5
 8009e00:	881a      	ldrh	r2, [r3, #0]
 8009e02:	2308      	movs	r3, #8
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	0019      	movs	r1, r3
 8009e08:	2069      	movs	r0, #105	@ 0x69
 8009e0a:	f001 fb3f 	bl	800b48c <sensirion_i2c_write_data>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e12:	19bb      	adds	r3, r7, r6
 8009e14:	2200      	movs	r2, #0
 8009e16:	5e9b      	ldrsh	r3, [r3, r2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <sen5x_read_data_ready+0x50>
        return error;
 8009e1c:	19bb      	adds	r3, r7, r6
 8009e1e:	2200      	movs	r2, #0
 8009e20:	5e9b      	ldrsh	r3, [r3, r2]
 8009e22:	e020      	b.n	8009e66 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009e24:	4b13      	ldr	r3, [pc, #76]	@ (8009e74 <sen5x_read_data_ready+0xa0>)
 8009e26:	0018      	movs	r0, r3
 8009e28:	f7ff fd64 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009e2c:	250c      	movs	r5, #12
 8009e2e:	197c      	adds	r4, r7, r5
 8009e30:	2308      	movs	r3, #8
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	2202      	movs	r2, #2
 8009e36:	0019      	movs	r1, r3
 8009e38:	2069      	movs	r0, #105	@ 0x69
 8009e3a:	f001 fb3f 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 8009e3e:	0003      	movs	r3, r0
 8009e40:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e42:	197b      	adds	r3, r7, r5
 8009e44:	2200      	movs	r2, #0
 8009e46:	5e9b      	ldrsh	r3, [r3, r2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <sen5x_read_data_ready+0x80>
        return error;
 8009e4c:	197b      	adds	r3, r7, r5
 8009e4e:	2200      	movs	r2, #0
 8009e50:	5e9b      	ldrsh	r3, [r3, r2]
 8009e52:	e008      	b.n	8009e66 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009e54:	2308      	movs	r3, #8
 8009e56:	18fb      	adds	r3, r7, r3
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	1e5a      	subs	r2, r3, #1
 8009e5c:	4193      	sbcs	r3, r2
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	0018      	movs	r0, r3
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	b005      	add	sp, #20
 8009e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e6e:	46c0      	nop			@ (mov r8, r8)
 8009e70:	00000202 	.word	0x00000202
 8009e74:	00004e20 	.word	0x00004e20

08009e78 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7a:	b08d      	sub	sp, #52	@ 0x34
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009e86:	252e      	movs	r5, #46	@ 0x2e
 8009e88:	197b      	adds	r3, r7, r5
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009e8e:	197c      	adds	r4, r7, r5
 8009e90:	23f1      	movs	r3, #241	@ 0xf1
 8009e92:	009a      	lsls	r2, r3, #2
 8009e94:	197b      	adds	r3, r7, r5
 8009e96:	8819      	ldrh	r1, [r3, #0]
 8009e98:	2314      	movs	r3, #20
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f001 fa71 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ea6:	262c      	movs	r6, #44	@ 0x2c
 8009ea8:	19bc      	adds	r4, r7, r6
 8009eaa:	197b      	adds	r3, r7, r5
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	2314      	movs	r3, #20
 8009eb0:	18fb      	adds	r3, r7, r3
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	2069      	movs	r0, #105	@ 0x69
 8009eb6:	f001 fae9 	bl	800b48c <sensirion_i2c_write_data>
 8009eba:	0003      	movs	r3, r0
 8009ebc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ebe:	19bb      	adds	r3, r7, r6
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <sen5x_read_measured_values+0x58>
        return error;
 8009ec8:	19bb      	adds	r3, r7, r6
 8009eca:	2200      	movs	r2, #0
 8009ecc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ece:	e060      	b.n	8009f92 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009ed0:	4b32      	ldr	r3, [pc, #200]	@ (8009f9c <sen5x_read_measured_values+0x124>)
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	f7ff fd0e 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009ed8:	252c      	movs	r5, #44	@ 0x2c
 8009eda:	197c      	adds	r4, r7, r5
 8009edc:	2314      	movs	r3, #20
 8009ede:	18fb      	adds	r3, r7, r3
 8009ee0:	2210      	movs	r2, #16
 8009ee2:	0019      	movs	r1, r3
 8009ee4:	2069      	movs	r0, #105	@ 0x69
 8009ee6:	f001 fae9 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 8009eea:	0003      	movs	r3, r0
 8009eec:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009eee:	197b      	adds	r3, r7, r5
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <sen5x_read_measured_values+0x88>
        return error;
 8009ef8:	197b      	adds	r3, r7, r5
 8009efa:	2200      	movs	r2, #0
 8009efc:	5e9b      	ldrsh	r3, [r3, r2]
 8009efe:	e048      	b.n	8009f92 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009f00:	2414      	movs	r4, #20
 8009f02:	193b      	adds	r3, r7, r4
 8009f04:	0018      	movs	r0, r3
 8009f06:	f000 fa79 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f0a:	0003      	movs	r3, r0
 8009f0c:	001a      	movs	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009f12:	193b      	adds	r3, r7, r4
 8009f14:	3302      	adds	r3, #2
 8009f16:	0018      	movs	r0, r3
 8009f18:	f000 fa70 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f1c:	0003      	movs	r3, r0
 8009f1e:	001a      	movs	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009f24:	193b      	adds	r3, r7, r4
 8009f26:	3304      	adds	r3, #4
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f000 fa67 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f2e:	0003      	movs	r3, r0
 8009f30:	001a      	movs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009f36:	193b      	adds	r3, r7, r4
 8009f38:	3306      	adds	r3, #6
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	f000 fa5e 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f40:	0003      	movs	r3, r0
 8009f42:	001a      	movs	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009f48:	193b      	adds	r3, r7, r4
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f000 fa81 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f52:	0003      	movs	r3, r0
 8009f54:	001a      	movs	r2, r3
 8009f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f58:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009f5a:	193b      	adds	r3, r7, r4
 8009f5c:	330a      	adds	r3, #10
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f000 fa78 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f64:	0003      	movs	r3, r0
 8009f66:	001a      	movs	r2, r3
 8009f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f6a:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009f6c:	193b      	adds	r3, r7, r4
 8009f6e:	330c      	adds	r3, #12
 8009f70:	0018      	movs	r0, r3
 8009f72:	f000 fa6f 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f76:	0003      	movs	r3, r0
 8009f78:	001a      	movs	r2, r3
 8009f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f7c:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009f7e:	193b      	adds	r3, r7, r4
 8009f80:	330e      	adds	r3, #14
 8009f82:	0018      	movs	r0, r3
 8009f84:	f000 fa66 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f88:	0003      	movs	r3, r0
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f8e:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	0018      	movs	r0, r3
 8009f94:	46bd      	mov	sp, r7
 8009f96:	b00d      	add	sp, #52	@ 0x34
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	00004e20 	.word	0x00004e20

08009fa0 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009fa6:	1dbb      	adds	r3, r7, #6
 8009fa8:	2200      	movs	r2, #0
 8009faa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009fac:	1dbc      	adds	r4, r7, #6
 8009fae:	4a12      	ldr	r2, [pc, #72]	@ (8009ff8 <sen5x_start_fan_cleaning+0x58>)
 8009fb0:	1dbb      	adds	r3, r7, #6
 8009fb2:	8819      	ldrh	r1, [r3, #0]
 8009fb4:	003b      	movs	r3, r7
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f001 f9e4 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009fbc:	0003      	movs	r3, r0
 8009fbe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009fc0:	1d3c      	adds	r4, r7, #4
 8009fc2:	1dbb      	adds	r3, r7, #6
 8009fc4:	881a      	ldrh	r2, [r3, #0]
 8009fc6:	003b      	movs	r3, r7
 8009fc8:	0019      	movs	r1, r3
 8009fca:	2069      	movs	r0, #105	@ 0x69
 8009fcc:	f001 fa5e 	bl	800b48c <sensirion_i2c_write_data>
 8009fd0:	0003      	movs	r3, r0
 8009fd2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009fd4:	1d3b      	adds	r3, r7, #4
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	5e9b      	ldrsh	r3, [r3, r2]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <sen5x_start_fan_cleaning+0x46>
        return error;
 8009fde:	1d3b      	adds	r3, r7, #4
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8009fe4:	e004      	b.n	8009ff0 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009fe6:	4b05      	ldr	r3, [pc, #20]	@ (8009ffc <sen5x_start_fan_cleaning+0x5c>)
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f7ff fc83 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b003      	add	sp, #12
 8009ff6:	bd90      	pop	{r4, r7, pc}
 8009ff8:	00005607 	.word	0x00005607
 8009ffc:	00004e20 	.word	0x00004e20

0800a000 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	0004      	movs	r4, r0
 800a008:	0008      	movs	r0, r1
 800a00a:	0011      	movs	r1, r2
 800a00c:	1dbb      	adds	r3, r7, #6
 800a00e:	1c22      	adds	r2, r4, #0
 800a010:	801a      	strh	r2, [r3, #0]
 800a012:	1d3b      	adds	r3, r7, #4
 800a014:	1c02      	adds	r2, r0, #0
 800a016:	801a      	strh	r2, [r3, #0]
 800a018:	1cbb      	adds	r3, r7, #2
 800a01a:	1c0a      	adds	r2, r1, #0
 800a01c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a01e:	2516      	movs	r5, #22
 800a020:	197b      	adds	r3, r7, r5
 800a022:	2200      	movs	r2, #0
 800a024:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a026:	197c      	adds	r4, r7, r5
 800a028:	4a25      	ldr	r2, [pc, #148]	@ (800a0c0 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a02a:	197b      	adds	r3, r7, r5
 800a02c:	8819      	ldrh	r1, [r3, #0]
 800a02e:	2608      	movs	r6, #8
 800a030:	19bb      	adds	r3, r7, r6
 800a032:	0018      	movs	r0, r3
 800a034:	f001 f9a6 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a038:	0003      	movs	r3, r0
 800a03a:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a03c:	197c      	adds	r4, r7, r5
 800a03e:	1dbb      	adds	r3, r7, #6
 800a040:	2200      	movs	r2, #0
 800a042:	5e9a      	ldrsh	r2, [r3, r2]
 800a044:	197b      	adds	r3, r7, r5
 800a046:	8819      	ldrh	r1, [r3, #0]
 800a048:	19bb      	adds	r3, r7, r6
 800a04a:	0018      	movs	r0, r3
 800a04c:	f001 fa05 	bl	800b45a <sensirion_i2c_add_int16_t_to_buffer>
 800a050:	0003      	movs	r3, r0
 800a052:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a054:	197c      	adds	r4, r7, r5
 800a056:	1d3b      	adds	r3, r7, #4
 800a058:	2200      	movs	r2, #0
 800a05a:	5e9a      	ldrsh	r2, [r3, r2]
 800a05c:	197b      	adds	r3, r7, r5
 800a05e:	8819      	ldrh	r1, [r3, #0]
 800a060:	19bb      	adds	r3, r7, r6
 800a062:	0018      	movs	r0, r3
 800a064:	f001 f9f9 	bl	800b45a <sensirion_i2c_add_int16_t_to_buffer>
 800a068:	0003      	movs	r3, r0
 800a06a:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a06c:	197c      	adds	r4, r7, r5
 800a06e:	1cbb      	adds	r3, r7, #2
 800a070:	881a      	ldrh	r2, [r3, #0]
 800a072:	197b      	adds	r3, r7, r5
 800a074:	8819      	ldrh	r1, [r3, #0]
 800a076:	19bb      	adds	r3, r7, r6
 800a078:	0018      	movs	r0, r3
 800a07a:	f001 f9af 	bl	800b3dc <sensirion_i2c_add_uint16_t_to_buffer>
 800a07e:	0003      	movs	r3, r0
 800a080:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a082:	2214      	movs	r2, #20
 800a084:	18bc      	adds	r4, r7, r2
 800a086:	197b      	adds	r3, r7, r5
 800a088:	881a      	ldrh	r2, [r3, #0]
 800a08a:	19bb      	adds	r3, r7, r6
 800a08c:	0019      	movs	r1, r3
 800a08e:	2069      	movs	r0, #105	@ 0x69
 800a090:	f001 f9fc 	bl	800b48c <sensirion_i2c_write_data>
 800a094:	0003      	movs	r3, r0
 800a096:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a098:	2214      	movs	r2, #20
 800a09a:	18bb      	adds	r3, r7, r2
 800a09c:	2100      	movs	r1, #0
 800a09e:	5e5b      	ldrsh	r3, [r3, r1]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a0a4:	18bb      	adds	r3, r7, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	5e9b      	ldrsh	r3, [r3, r2]
 800a0aa:	e004      	b.n	800a0b6 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a0ac:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f7ff fc20 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	b007      	add	sp, #28
 800a0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0be:	46c0      	nop			@ (mov r8, r8)
 800a0c0:	000060b2 	.word	0x000060b2
 800a0c4:	00004e20 	.word	0x00004e20

0800a0c8 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ca:	b091      	sub	sp, #68	@ 0x44
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	000a      	movs	r2, r1
 800a0d2:	1cfb      	adds	r3, r7, #3
 800a0d4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a0d6:	253e      	movs	r5, #62	@ 0x3e
 800a0d8:	197b      	adds	r3, r7, r5
 800a0da:	2200      	movs	r2, #0
 800a0dc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a0de:	197c      	adds	r4, r7, r5
 800a0e0:	4a22      	ldr	r2, [pc, #136]	@ (800a16c <sen5x_get_product_name+0xa4>)
 800a0e2:	197b      	adds	r3, r7, r5
 800a0e4:	8819      	ldrh	r1, [r3, #0]
 800a0e6:	230c      	movs	r3, #12
 800a0e8:	18fb      	adds	r3, r7, r3
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	f001 f94a 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a0f0:	0003      	movs	r3, r0
 800a0f2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a0f4:	263c      	movs	r6, #60	@ 0x3c
 800a0f6:	19bc      	adds	r4, r7, r6
 800a0f8:	197b      	adds	r3, r7, r5
 800a0fa:	881a      	ldrh	r2, [r3, #0]
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	18fb      	adds	r3, r7, r3
 800a100:	0019      	movs	r1, r3
 800a102:	2069      	movs	r0, #105	@ 0x69
 800a104:	f001 f9c2 	bl	800b48c <sensirion_i2c_write_data>
 800a108:	0003      	movs	r3, r0
 800a10a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a10c:	19bb      	adds	r3, r7, r6
 800a10e:	2200      	movs	r2, #0
 800a110:	5e9b      	ldrsh	r3, [r3, r2]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <sen5x_get_product_name+0x56>
        return error;
 800a116:	19bb      	adds	r3, r7, r6
 800a118:	2200      	movs	r2, #0
 800a11a:	5e9b      	ldrsh	r3, [r3, r2]
 800a11c:	e021      	b.n	800a162 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a11e:	4b14      	ldr	r3, [pc, #80]	@ (800a170 <sen5x_get_product_name+0xa8>)
 800a120:	0018      	movs	r0, r3
 800a122:	f7ff fbe7 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a126:	253c      	movs	r5, #60	@ 0x3c
 800a128:	197c      	adds	r4, r7, r5
 800a12a:	230c      	movs	r3, #12
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	2220      	movs	r2, #32
 800a130:	0019      	movs	r1, r3
 800a132:	2069      	movs	r0, #105	@ 0x69
 800a134:	f001 f9c2 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a138:	0003      	movs	r3, r0
 800a13a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a13c:	197b      	adds	r3, r7, r5
 800a13e:	2200      	movs	r2, #0
 800a140:	5e9b      	ldrsh	r3, [r3, r2]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <sen5x_get_product_name+0x86>
        return error;
 800a146:	197b      	adds	r3, r7, r5
 800a148:	2200      	movs	r2, #0
 800a14a:	5e9b      	ldrsh	r3, [r3, r2]
 800a14c:	e009      	b.n	800a162 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a14e:	1cfb      	adds	r3, r7, #3
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b29a      	uxth	r2, r3
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	230c      	movs	r3, #12
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	0018      	movs	r0, r3
 800a15c:	f000 f988 	bl	800a470 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a160:	2300      	movs	r3, #0
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b011      	add	sp, #68	@ 0x44
 800a168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16a:	46c0      	nop			@ (mov r8, r8)
 800a16c:	0000d014 	.word	0x0000d014
 800a170:	0000c350 	.word	0x0000c350

0800a174 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a176:	b091      	sub	sp, #68	@ 0x44
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	000a      	movs	r2, r1
 800a17e:	1cfb      	adds	r3, r7, #3
 800a180:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a182:	253e      	movs	r5, #62	@ 0x3e
 800a184:	197b      	adds	r3, r7, r5
 800a186:	2200      	movs	r2, #0
 800a188:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a18a:	197c      	adds	r4, r7, r5
 800a18c:	4a22      	ldr	r2, [pc, #136]	@ (800a218 <sen5x_get_serial_number+0xa4>)
 800a18e:	197b      	adds	r3, r7, r5
 800a190:	8819      	ldrh	r1, [r3, #0]
 800a192:	230c      	movs	r3, #12
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	0018      	movs	r0, r3
 800a198:	f001 f8f4 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a19c:	0003      	movs	r3, r0
 800a19e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a1a0:	263c      	movs	r6, #60	@ 0x3c
 800a1a2:	19bc      	adds	r4, r7, r6
 800a1a4:	197b      	adds	r3, r7, r5
 800a1a6:	881a      	ldrh	r2, [r3, #0]
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	0019      	movs	r1, r3
 800a1ae:	2069      	movs	r0, #105	@ 0x69
 800a1b0:	f001 f96c 	bl	800b48c <sensirion_i2c_write_data>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1b8:	19bb      	adds	r3, r7, r6
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	5e9b      	ldrsh	r3, [r3, r2]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <sen5x_get_serial_number+0x56>
        return error;
 800a1c2:	19bb      	adds	r3, r7, r6
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1c8:	e021      	b.n	800a20e <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a1ca:	4b14      	ldr	r3, [pc, #80]	@ (800a21c <sen5x_get_serial_number+0xa8>)
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f7ff fb91 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a1d2:	253c      	movs	r5, #60	@ 0x3c
 800a1d4:	197c      	adds	r4, r7, r5
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	18fb      	adds	r3, r7, r3
 800a1da:	2220      	movs	r2, #32
 800a1dc:	0019      	movs	r1, r3
 800a1de:	2069      	movs	r0, #105	@ 0x69
 800a1e0:	f001 f96c 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1e8:	197b      	adds	r3, r7, r5
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <sen5x_get_serial_number+0x86>
        return error;
 800a1f2:	197b      	adds	r3, r7, r5
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1f8:	e009      	b.n	800a20e <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a1fa:	1cfb      	adds	r3, r7, #3
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	6879      	ldr	r1, [r7, #4]
 800a202:	230c      	movs	r3, #12
 800a204:	18fb      	adds	r3, r7, r3
 800a206:	0018      	movs	r0, r3
 800a208:	f000 f932 	bl	800a470 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	0018      	movs	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	b011      	add	sp, #68	@ 0x44
 800a214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a216:	46c0      	nop			@ (mov r8, r8)
 800a218:	0000d033 	.word	0x0000d033
 800a21c:	0000c350 	.word	0x0000c350

0800a220 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a222:	b089      	sub	sp, #36	@ 0x24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a22e:	251e      	movs	r5, #30
 800a230:	197b      	adds	r3, r7, r5
 800a232:	2200      	movs	r2, #0
 800a234:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a236:	197c      	adds	r4, r7, r5
 800a238:	23d1      	movs	r3, #209	@ 0xd1
 800a23a:	021a      	lsls	r2, r3, #8
 800a23c:	197b      	adds	r3, r7, r5
 800a23e:	8819      	ldrh	r1, [r3, #0]
 800a240:	2310      	movs	r3, #16
 800a242:	18fb      	adds	r3, r7, r3
 800a244:	0018      	movs	r0, r3
 800a246:	f001 f89d 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a24a:	0003      	movs	r3, r0
 800a24c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a24e:	261c      	movs	r6, #28
 800a250:	19bc      	adds	r4, r7, r6
 800a252:	197b      	adds	r3, r7, r5
 800a254:	881a      	ldrh	r2, [r3, #0]
 800a256:	2310      	movs	r3, #16
 800a258:	18fb      	adds	r3, r7, r3
 800a25a:	0019      	movs	r1, r3
 800a25c:	2069      	movs	r0, #105	@ 0x69
 800a25e:	f001 f915 	bl	800b48c <sensirion_i2c_write_data>
 800a262:	0003      	movs	r3, r0
 800a264:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a266:	19bb      	adds	r3, r7, r6
 800a268:	2200      	movs	r2, #0
 800a26a:	5e9b      	ldrsh	r3, [r3, r2]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <sen5x_get_version+0x58>
        return error;
 800a270:	19bb      	adds	r3, r7, r6
 800a272:	2200      	movs	r2, #0
 800a274:	5e9b      	ldrsh	r3, [r3, r2]
 800a276:	e038      	b.n	800a2ea <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a278:	4b1e      	ldr	r3, [pc, #120]	@ (800a2f4 <sen5x_get_version+0xd4>)
 800a27a:	0018      	movs	r0, r3
 800a27c:	f7ff fb3a 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a280:	251c      	movs	r5, #28
 800a282:	197c      	adds	r4, r7, r5
 800a284:	2310      	movs	r3, #16
 800a286:	18fb      	adds	r3, r7, r3
 800a288:	2208      	movs	r2, #8
 800a28a:	0019      	movs	r1, r3
 800a28c:	2069      	movs	r0, #105	@ 0x69
 800a28e:	f001 f915 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a292:	0003      	movs	r3, r0
 800a294:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a296:	197b      	adds	r3, r7, r5
 800a298:	2200      	movs	r2, #0
 800a29a:	5e9b      	ldrsh	r3, [r3, r2]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <sen5x_get_version+0x88>
        return error;
 800a2a0:	197b      	adds	r3, r7, r5
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a2a6:	e020      	b.n	800a2ea <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a2a8:	2110      	movs	r1, #16
 800a2aa:	187b      	adds	r3, r7, r1
 800a2ac:	781a      	ldrb	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a2b2:	187b      	adds	r3, r7, r1
 800a2b4:	785a      	ldrb	r2, [r3, #1]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a2ba:	187b      	adds	r3, r7, r1
 800a2bc:	789b      	ldrb	r3, [r3, #2]
 800a2be:	1e5a      	subs	r2, r3, #1
 800a2c0:	4193      	sbcs	r3, r2
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a2c8:	187b      	adds	r3, r7, r1
 800a2ca:	78da      	ldrb	r2, [r3, #3]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a2d0:	187b      	adds	r3, r7, r1
 800a2d2:	791a      	ldrb	r2, [r3, #4]
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a2d8:	187b      	adds	r3, r7, r1
 800a2da:	795a      	ldrb	r2, [r3, #5]
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2de:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a2e0:	187b      	adds	r3, r7, r1
 800a2e2:	799a      	ldrb	r2, [r3, #6]
 800a2e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2e6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	b009      	add	sp, #36	@ 0x24
 800a2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	00004e20 	.word	0x00004e20

0800a2f8 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a300:	2516      	movs	r5, #22
 800a302:	197b      	adds	r3, r7, r5
 800a304:	2200      	movs	r2, #0
 800a306:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a308:	197c      	adds	r4, r7, r5
 800a30a:	4a22      	ldr	r2, [pc, #136]	@ (800a394 <sen5x_read_device_status+0x9c>)
 800a30c:	197b      	adds	r3, r7, r5
 800a30e:	8819      	ldrh	r1, [r3, #0]
 800a310:	230c      	movs	r3, #12
 800a312:	18fb      	adds	r3, r7, r3
 800a314:	0018      	movs	r0, r3
 800a316:	f001 f835 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a31a:	0003      	movs	r3, r0
 800a31c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a31e:	2614      	movs	r6, #20
 800a320:	19bc      	adds	r4, r7, r6
 800a322:	197b      	adds	r3, r7, r5
 800a324:	881a      	ldrh	r2, [r3, #0]
 800a326:	230c      	movs	r3, #12
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	0019      	movs	r1, r3
 800a32c:	2069      	movs	r0, #105	@ 0x69
 800a32e:	f001 f8ad 	bl	800b48c <sensirion_i2c_write_data>
 800a332:	0003      	movs	r3, r0
 800a334:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a336:	19bb      	adds	r3, r7, r6
 800a338:	2200      	movs	r2, #0
 800a33a:	5e9b      	ldrsh	r3, [r3, r2]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <sen5x_read_device_status+0x50>
        return error;
 800a340:	19bb      	adds	r3, r7, r6
 800a342:	2200      	movs	r2, #0
 800a344:	5e9b      	ldrsh	r3, [r3, r2]
 800a346:	e020      	b.n	800a38a <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a348:	4b13      	ldr	r3, [pc, #76]	@ (800a398 <sen5x_read_device_status+0xa0>)
 800a34a:	0018      	movs	r0, r3
 800a34c:	f7ff fad2 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a350:	2514      	movs	r5, #20
 800a352:	197c      	adds	r4, r7, r5
 800a354:	230c      	movs	r3, #12
 800a356:	18fb      	adds	r3, r7, r3
 800a358:	2204      	movs	r2, #4
 800a35a:	0019      	movs	r1, r3
 800a35c:	2069      	movs	r0, #105	@ 0x69
 800a35e:	f001 f8ad 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a362:	0003      	movs	r3, r0
 800a364:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a366:	197b      	adds	r3, r7, r5
 800a368:	2200      	movs	r2, #0
 800a36a:	5e9b      	ldrsh	r3, [r3, r2]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <sen5x_read_device_status+0x80>
        return error;
 800a370:	197b      	adds	r3, r7, r5
 800a372:	2200      	movs	r2, #0
 800a374:	5e9b      	ldrsh	r3, [r3, r2]
 800a376:	e008      	b.n	800a38a <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a378:	230c      	movs	r3, #12
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	0018      	movs	r0, r3
 800a37e:	f000 f850 	bl	800a422 <sensirion_common_bytes_to_uint32_t>
 800a382:	0002      	movs	r2, r0
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	0018      	movs	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	b007      	add	sp, #28
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	46c0      	nop			@ (mov r8, r8)
 800a394:	0000d206 	.word	0x0000d206
 800a398:	00004e20 	.word	0x00004e20

0800a39c <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a3a2:	1dbb      	adds	r3, r7, #6
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a3a8:	1dbc      	adds	r4, r7, #6
 800a3aa:	4a12      	ldr	r2, [pc, #72]	@ (800a3f4 <sen5x_device_reset+0x58>)
 800a3ac:	1dbb      	adds	r3, r7, #6
 800a3ae:	8819      	ldrh	r1, [r3, #0]
 800a3b0:	003b      	movs	r3, r7
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f000 ffe6 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a3b8:	0003      	movs	r3, r0
 800a3ba:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a3bc:	1d3c      	adds	r4, r7, #4
 800a3be:	1dbb      	adds	r3, r7, #6
 800a3c0:	881a      	ldrh	r2, [r3, #0]
 800a3c2:	003b      	movs	r3, r7
 800a3c4:	0019      	movs	r1, r3
 800a3c6:	2069      	movs	r0, #105	@ 0x69
 800a3c8:	f001 f860 	bl	800b48c <sensirion_i2c_write_data>
 800a3cc:	0003      	movs	r3, r0
 800a3ce:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3d0:	1d3b      	adds	r3, r7, #4
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	5e9b      	ldrsh	r3, [r3, r2]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <sen5x_device_reset+0x46>
        return error;
 800a3da:	1d3b      	adds	r3, r7, #4
 800a3dc:	2200      	movs	r2, #0
 800a3de:	5e9b      	ldrsh	r3, [r3, r2]
 800a3e0:	e004      	b.n	800a3ec <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a3e2:	4b05      	ldr	r3, [pc, #20]	@ (800a3f8 <sen5x_device_reset+0x5c>)
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f7ff fa85 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	b003      	add	sp, #12
 800a3f2:	bd90      	pop	{r4, r7, pc}
 800a3f4:	0000d304 	.word	0x0000d304
 800a3f8:	00030d40 	.word	0x00030d40

0800a3fc <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	b21a      	sxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	3301      	adds	r3, #1
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	b21b      	sxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b21b      	sxth	r3, r3
 800a418:	b29b      	uxth	r3, r3
}
 800a41a:	0018      	movs	r0, r3
 800a41c:	46bd      	mov	sp, r7
 800a41e:	b002      	add	sp, #8
 800a420:	bd80      	pop	{r7, pc}

0800a422 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	061a      	lsls	r2, r3, #24
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3301      	adds	r3, #1
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3302      	adds	r3, #2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a442:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	3203      	adds	r2, #3
 800a448:	7812      	ldrb	r2, [r2, #0]
 800a44a:	4313      	orrs	r3, r2
}
 800a44c:	0018      	movs	r0, r3
 800a44e:	46bd      	mov	sp, r7
 800a450:	b002      	add	sp, #8
 800a452:	bd80      	pop	{r7, pc}

0800a454 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	0018      	movs	r0, r3
 800a460:	f7ff ffcc 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 800a464:	0003      	movs	r3, r0
 800a466:	b21b      	sxth	r3, r3
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b002      	add	sp, #8
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	1dbb      	adds	r3, r7, #6
 800a47c:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a47e:	2316      	movs	r3, #22
 800a480:	18fb      	adds	r3, r7, r3
 800a482:	2200      	movs	r2, #0
 800a484:	801a      	strh	r2, [r3, #0]
 800a486:	e00f      	b.n	800a4a8 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a488:	2016      	movs	r0, #22
 800a48a:	183b      	adds	r3, r7, r0
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	18d2      	adds	r2, r2, r3
 800a492:	183b      	adds	r3, r7, r0
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	68b9      	ldr	r1, [r7, #8]
 800a498:	18cb      	adds	r3, r1, r3
 800a49a:	7812      	ldrb	r2, [r2, #0]
 800a49c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a49e:	183b      	adds	r3, r7, r0
 800a4a0:	881a      	ldrh	r2, [r3, #0]
 800a4a2:	183b      	adds	r3, r7, r0
 800a4a4:	3201      	adds	r2, #1
 800a4a6:	801a      	strh	r2, [r3, #0]
 800a4a8:	2316      	movs	r3, #22
 800a4aa:	18fa      	adds	r2, r7, r3
 800a4ac:	1dbb      	adds	r3, r7, #6
 800a4ae:	8812      	ldrh	r2, [r2, #0]
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d3e8      	bcc.n	800a488 <sensirion_common_copy_bytes+0x18>
    }
}
 800a4b6:	46c0      	nop			@ (mov r8, r8)
 800a4b8:	46c0      	nop			@ (mov r8, r8)
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b006      	add	sp, #24
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d113      	bne.n	800a506 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	22fe      	movs	r2, #254	@ 0xfe
 800a4e2:	0592      	lsls	r2, r2, #22
 800a4e4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a554 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a4ea:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a4f0:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4a19      	ldr	r2, [pc, #100]	@ (800a55c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a4f6:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4a19      	ldr	r2, [pc, #100]	@ (800a560 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a4fc:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4a18      	ldr	r2, [pc, #96]	@ (800a564 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a502:	61da      	str	r2, [r3, #28]
 800a504:	e011      	b.n	800a52a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4a17      	ldr	r2, [pc, #92]	@ (800a568 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a50a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4a17      	ldr	r2, [pc, #92]	@ (800a56c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a510:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a516:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4a16      	ldr	r2, [pc, #88]	@ (800a574 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a51c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4a15      	ldr	r2, [pc, #84]	@ (800a578 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a522:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4a15      	ldr	r2, [pc, #84]	@ (800a57c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a528:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4a14      	ldr	r2, [pc, #80]	@ (800a580 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a52e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4a14      	ldr	r2, [pc, #80]	@ (800a584 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a534:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4a12      	ldr	r2, [pc, #72]	@ (800a584 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a53a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a12      	ldr	r2, [pc, #72]	@ (800a588 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a540:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	0018      	movs	r0, r3
 800a546:	f000 f833 	bl	800a5b0 <GasIndexAlgorithm_reset>
}
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b004      	add	sp, #16
 800a550:	bd80      	pop	{r7, pc}
 800a552:	46c0      	nop			@ (mov r8, r8)
 800a554:	00002710 	.word	0x00002710
 800a558:	44340000 	.word	0x44340000
 800a55c:	46859800 	.word	0x46859800
 800a560:	46a05000 	.word	0x46a05000
 800a564:	41f00000 	.word	0x41f00000
 800a568:	42c80000 	.word	0x42c80000
 800a56c:	00004e20 	.word	0x00004e20
 800a570:	43340000 	.word	0x43340000
 800a574:	4528c000 	.word	0x4528c000
 800a578:	45a32000 	.word	0x45a32000
 800a57c:	43aa0000 	.word	0x43aa0000
 800a580:	43660000 	.word	0x43660000
 800a584:	41400000 	.word	0x41400000
 800a588:	42480000 	.word	0x42480000

0800a58c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a596:	4a05      	ldr	r2, [pc, #20]	@ (800a5ac <GasIndexAlgorithm_init+0x20>)
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	0018      	movs	r0, r3
 800a59e:	f7ff ff8f 	bl	800a4c0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a5a2:	46c0      	nop			@ (mov r8, r8)
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	b002      	add	sp, #8
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	46c0      	nop			@ (mov r8, r8)
 800a5ac:	44610000 	.word	0x44610000

0800a5b0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	f000 f805 	bl	800a5dc <GasIndexAlgorithm__init_instances>
}
 800a5d2:	46c0      	nop			@ (mov r8, r8)
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b002      	add	sp, #8
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f000 f8e8 	bl	800a7bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	f000 f9a6 	bl	800a940 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a5f4:	1c04      	adds	r4, r0, #0
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f000 f9ab 	bl	800a954 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a5fe:	1c02      	adds	r2, r0, #0
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	1c21      	adds	r1, r4, #0
 800a604:	0018      	movs	r0, r3
 800a606:	f000 fc3b 	bl	800ae80 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d107      	bne.n	800a622 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a612:	23fe      	movs	r3, #254	@ 0xfe
 800a614:	059b      	lsls	r3, r3, #22
 800a616:	4a0a      	ldr	r2, [pc, #40]	@ (800a640 <GasIndexAlgorithm__init_instances+0x64>)
 800a618:	490a      	ldr	r1, [pc, #40]	@ (800a644 <GasIndexAlgorithm__init_instances+0x68>)
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fc86 	bl	800af2c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a620:	e005      	b.n	800a62e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a622:	4b09      	ldr	r3, [pc, #36]	@ (800a648 <GasIndexAlgorithm__init_instances+0x6c>)
 800a624:	4a09      	ldr	r2, [pc, #36]	@ (800a64c <GasIndexAlgorithm__init_instances+0x70>)
 800a626:	490a      	ldr	r1, [pc, #40]	@ (800a650 <GasIndexAlgorithm__init_instances+0x74>)
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fc7f 	bl	800af2c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	0018      	movs	r0, r3
 800a632:	f000 fd35 	bl	800b0a0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a636:	46c0      	nop			@ (mov r8, r8)
 800a638:	46bd      	mov	sp, r7
 800a63a:	b003      	add	sp, #12
 800a63c:	bd90      	pop	{r4, r7, pc}
 800a63e:	46c0      	nop			@ (mov r8, r8)
 800a640:	bc257a78 	.word	0xbc257a78
 800a644:	44198000 	.word	0x44198000
 800a648:	42c80000 	.word	0x42c80000
 800a64c:	bbd4fdf4 	.word	0xbbd4fdf4
 800a650:	43550000 	.word	0x43550000

0800a654 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a664:	4952      	ldr	r1, [pc, #328]	@ (800a7b0 <GasIndexAlgorithm_process+0x15c>)
 800a666:	1c18      	adds	r0, r3, #0
 800a668:	f7f5 ff6c 	bl	8000544 <__aeabi_fcmple>
 800a66c:	1e03      	subs	r3, r0, #0
 800a66e:	d00c      	beq.n	800a68a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	1c19      	adds	r1, r3, #0
 800a67a:	1c10      	adds	r0, r2, #0
 800a67c:	f7f6 f920 	bl	80008c0 <__aeabi_fadd>
 800a680:	1c03      	adds	r3, r0, #0
 800a682:	1c1a      	adds	r2, r3, #0
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	631a      	str	r2, [r3, #48]	@ 0x30
 800a688:	e080      	b.n	800a78c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd25      	ble.n	800a6dc <GasIndexAlgorithm_process+0x88>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	4a48      	ldr	r2, [pc, #288]	@ (800a7b4 <GasIndexAlgorithm_process+0x160>)
 800a694:	4293      	cmp	r3, r2
 800a696:	dc21      	bgt.n	800a6dc <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	dc04      	bgt.n	800a6ac <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60bb      	str	r3, [r7, #8]
 800a6aa:	e00d      	b.n	800a6c8 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	4a41      	ldr	r2, [pc, #260]	@ (800a7b8 <GasIndexAlgorithm_process+0x164>)
 800a6b2:	4694      	mov	ip, r2
 800a6b4:	4463      	add	r3, ip
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	dd05      	ble.n	800a6c8 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	4a3d      	ldr	r2, [pc, #244]	@ (800a7b8 <GasIndexAlgorithm_process+0x164>)
 800a6c2:	4694      	mov	ip, r2
 800a6c4:	4463      	add	r3, ip
 800a6c6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f7f6 ff7d 	bl	80015d0 <__aeabi_i2f>
 800a6d6:	1c02      	adds	r2, r0, #0
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f000 f945 	bl	800a976 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a6ec:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a6ee:	d014      	beq.n	800a71a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	1c11      	adds	r1, r2, #0
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f000 fbd1 	bl	800aea0 <GasIndexAlgorithm__mox_model__process>
 800a6fe:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	1c11      	adds	r1, r2, #0
 800a70c:	0018      	movs	r0, r3
 800a70e:	f000 fc25 	bl	800af5c <GasIndexAlgorithm__sigmoid_scaled__process>
 800a712:	1c02      	adds	r2, r0, #0
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	639a      	str	r2, [r3, #56]	@ 0x38
 800a718:	e003      	b.n	800a722 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	689a      	ldr	r2, [r3, #8]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1c11      	adds	r1, r2, #0
 800a72a:	0018      	movs	r0, r3
 800a72c:	f000 fcec 	bl	800b108 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a730:	1c02      	adds	r2, r0, #0
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73a:	21fc      	movs	r1, #252	@ 0xfc
 800a73c:	0589      	lsls	r1, r1, #22
 800a73e:	1c18      	adds	r0, r3, #0
 800a740:	f7f5 fef6 	bl	8000530 <__aeabi_fcmplt>
 800a744:	1e03      	subs	r3, r0, #0
 800a746:	d003      	beq.n	800a750 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	22fc      	movs	r2, #252	@ 0xfc
 800a74c:	0592      	lsls	r2, r2, #22
 800a74e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a754:	2100      	movs	r1, #0
 800a756:	1c18      	adds	r0, r3, #0
 800a758:	f7f5 fefe 	bl	8000558 <__aeabi_fcmpgt>
 800a75c:	1e03      	subs	r3, r0, #0
 800a75e:	d015      	beq.n	800a78c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	1c11      	adds	r1, r2, #0
 800a768:	0018      	movs	r0, r3
 800a76a:	f000 fa4f 	bl	800ac0c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	0018      	movs	r0, r3
 800a772:	f000 f8e5 	bl	800a940 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a776:	1c04      	adds	r4, r0, #0
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	0018      	movs	r0, r3
 800a77c:	f000 f8ea 	bl	800a954 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a780:	1c02      	adds	r2, r0, #0
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	1c21      	adds	r1, r4, #0
 800a786:	0018      	movs	r0, r3
 800a788:	f000 fb7a 	bl	800ae80 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a790:	21fc      	movs	r1, #252	@ 0xfc
 800a792:	0589      	lsls	r1, r1, #22
 800a794:	1c18      	adds	r0, r3, #0
 800a796:	f7f6 f893 	bl	80008c0 <__aeabi_fadd>
 800a79a:	1c03      	adds	r3, r0, #0
 800a79c:	1c18      	adds	r0, r3, #0
 800a79e:	f7f6 fef7 	bl	8001590 <__aeabi_f2iz>
 800a7a2:	0002      	movs	r2, r0
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]
    return;
 800a7a8:	46c0      	nop			@ (mov r8, r8)
}
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	b005      	add	sp, #20
 800a7ae:	bd90      	pop	{r4, r7, pc}
 800a7b0:	42340000 	.word	0x42340000
 800a7b4:	0000fde7 	.word	0x0000fde7
 800a7b8:	00007fff 	.word	0x00007fff

0800a7bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a7bc:	b5b0      	push	{r4, r5, r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	223c      	movs	r2, #60	@ 0x3c
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	4952      	ldr	r1, [pc, #328]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a7e6:	1c18      	adds	r0, r3, #0
 800a7e8:	f7f6 f9f4 	bl	8000bd4 <__aeabi_fdiv>
 800a7ec:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a7ee:	2188      	movs	r1, #136	@ 0x88
 800a7f0:	05c9      	lsls	r1, r1, #23
 800a7f2:	1c18      	adds	r0, r3, #0
 800a7f4:	f7f6 fbd4 	bl	8000fa0 <__aeabi_fmul>
 800a7f8:	1c03      	adds	r3, r0, #0
 800a7fa:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	494a      	ldr	r1, [pc, #296]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a806:	1c18      	adds	r0, r3, #0
 800a808:	f7f6 f9e4 	bl	8000bd4 <__aeabi_fdiv>
 800a80c:	1c03      	adds	r3, r0, #0
 800a80e:	1c19      	adds	r1, r3, #0
 800a810:	1c20      	adds	r0, r4, #0
 800a812:	f7f6 f855 	bl	80008c0 <__aeabi_fadd>
 800a816:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a818:	1c19      	adds	r1, r3, #0
 800a81a:	1c28      	adds	r0, r5, #0
 800a81c:	f7f6 f9da 	bl	8000bd4 <__aeabi_fdiv>
 800a820:	1c03      	adds	r3, r0, #0
 800a822:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	4940      	ldr	r1, [pc, #256]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a82e:	1c18      	adds	r0, r3, #0
 800a830:	f7f6 f9d0 	bl	8000bd4 <__aeabi_fdiv>
 800a834:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a836:	2185      	movs	r1, #133	@ 0x85
 800a838:	05c9      	lsls	r1, r1, #23
 800a83a:	1c18      	adds	r0, r3, #0
 800a83c:	f7f6 fbb0 	bl	8000fa0 <__aeabi_fmul>
 800a840:	1c03      	adds	r3, r0, #0
 800a842:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4938      	ldr	r1, [pc, #224]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a84e:	1c18      	adds	r0, r3, #0
 800a850:	f7f6 f9c0 	bl	8000bd4 <__aeabi_fdiv>
 800a854:	1c03      	adds	r3, r0, #0
 800a856:	1c19      	adds	r1, r3, #0
 800a858:	1c20      	adds	r0, r4, #0
 800a85a:	f7f6 f831 	bl	80008c0 <__aeabi_fadd>
 800a85e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a860:	1c19      	adds	r1, r3, #0
 800a862:	1c28      	adds	r0, r5, #0
 800a864:	f7f6 f9b6 	bl	8000bd4 <__aeabi_fdiv>
 800a868:	1c03      	adds	r3, r0, #0
 800a86a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d118      	bne.n	800a8aa <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a87c:	2188      	movs	r1, #136	@ 0x88
 800a87e:	05c9      	lsls	r1, r1, #23
 800a880:	1c18      	adds	r0, r3, #0
 800a882:	f7f6 fb8d 	bl	8000fa0 <__aeabi_fmul>
 800a886:	1c03      	adds	r3, r0, #0
 800a888:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a88e:	4929      	ldr	r1, [pc, #164]	@ (800a934 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a890:	1c18      	adds	r0, r3, #0
 800a892:	f7f6 f815 	bl	80008c0 <__aeabi_fadd>
 800a896:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a898:	1c19      	adds	r1, r3, #0
 800a89a:	1c20      	adds	r0, r4, #0
 800a89c:	f7f6 f99a 	bl	8000bd4 <__aeabi_fdiv>
 800a8a0:	1c03      	adds	r3, r0, #0
 800a8a2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	655a      	str	r2, [r3, #84]	@ 0x54
 800a8a8:	e017      	b.n	800a8da <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a8ae:	2188      	movs	r1, #136	@ 0x88
 800a8b0:	05c9      	lsls	r1, r1, #23
 800a8b2:	1c18      	adds	r0, r3, #0
 800a8b4:	f7f6 fb74 	bl	8000fa0 <__aeabi_fmul>
 800a8b8:	1c03      	adds	r3, r0, #0
 800a8ba:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a8c0:	491d      	ldr	r1, [pc, #116]	@ (800a938 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a8c2:	1c18      	adds	r0, r3, #0
 800a8c4:	f7f5 fffc 	bl	80008c0 <__aeabi_fadd>
 800a8c8:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a8ca:	1c19      	adds	r1, r3, #0
 800a8cc:	1c20      	adds	r0, r4, #0
 800a8ce:	f7f6 f981 	bl	8000bd4 <__aeabi_fdiv>
 800a8d2:	1c03      	adds	r3, r0, #0
 800a8d4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a8de:	2185      	movs	r1, #133	@ 0x85
 800a8e0:	05c9      	lsls	r1, r1, #23
 800a8e2:	1c18      	adds	r0, r3, #0
 800a8e4:	f7f6 fb5c 	bl	8000fa0 <__aeabi_fmul>
 800a8e8:	1c03      	adds	r3, r0, #0
 800a8ea:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4912      	ldr	r1, [pc, #72]	@ (800a93c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a8f2:	1c18      	adds	r0, r3, #0
 800a8f4:	f7f5 ffe4 	bl	80008c0 <__aeabi_fadd>
 800a8f8:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a8fa:	1c19      	adds	r1, r3, #0
 800a8fc:	1c20      	adds	r0, r4, #0
 800a8fe:	f7f6 f969 	bl	8000bd4 <__aeabi_fdiv>
 800a902:	1c03      	adds	r3, r0, #0
 800a904:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a928:	46c0      	nop			@ (mov r8, r8)
 800a92a:	46bd      	mov	sp, r7
 800a92c:	b002      	add	sp, #8
 800a92e:	bdb0      	pop	{r4, r5, r7, pc}
 800a930:	45610000 	.word	0x45610000
 800a934:	44960000 	.word	0x44960000
 800a938:	41a00000 	.word	0x41a00000
 800a93c:	451c4000 	.word	0x451c4000

0800a940 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a94c:	1c18      	adds	r0, r3, #0
 800a94e:	46bd      	mov	sp, r7
 800a950:	b002      	add	sp, #8
 800a952:	bd80      	pop	{r7, pc}

0800a954 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a964:	1c19      	adds	r1, r3, #0
 800a966:	1c10      	adds	r0, r2, #0
 800a968:	f7f5 ffaa 	bl	80008c0 <__aeabi_fadd>
 800a96c:	1c03      	adds	r3, r0, #0
}
 800a96e:	1c18      	adds	r0, r3, #0
 800a970:	46bd      	mov	sp, r7
 800a972:	b002      	add	sp, #8
 800a974:	bd80      	pop	{r7, pc}

0800a976 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	223c      	movs	r2, #60	@ 0x3c
 800a982:	5c9b      	ldrb	r3, [r3, r2]
}
 800a984:	0018      	movs	r0, r3
 800a986:	46bd      	mov	sp, r7
 800a988:	b002      	add	sp, #8
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a98c:	b5b0      	push	{r4, r5, r7, lr}
 800a98e:	b08c      	sub	sp, #48	@ 0x30
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a998:	1c19      	adds	r1, r3, #0
 800a99a:	4895      	ldr	r0, [pc, #596]	@ (800abf0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a99c:	f7f6 fc3e 	bl	800121c <__aeabi_fsub>
 800a9a0:	1c03      	adds	r3, r0, #0
 800a9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a8:	1c19      	adds	r1, r3, #0
 800a9aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9ac:	f7f5 fdd4 	bl	8000558 <__aeabi_fcmpgt>
 800a9b0:	1e03      	subs	r3, r0, #0
 800a9b2:	d00b      	beq.n	800a9cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a9bc:	1c19      	adds	r1, r3, #0
 800a9be:	1c10      	adds	r0, r2, #0
 800a9c0:	f7f5 ff7e 	bl	80008c0 <__aeabi_fadd>
 800a9c4:	1c03      	adds	r3, r0, #0
 800a9c6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9d0:	1c19      	adds	r1, r3, #0
 800a9d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9d4:	f7f5 fdc0 	bl	8000558 <__aeabi_fcmpgt>
 800a9d8:	1e03      	subs	r3, r0, #0
 800a9da:	d00b      	beq.n	800a9f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a9e4:	1c19      	adds	r1, r3, #0
 800a9e6:	1c10      	adds	r0, r2, #0
 800a9e8:	f7f5 ff6a 	bl	80008c0 <__aeabi_fadd>
 800a9ec:	1c03      	adds	r3, r0, #0
 800a9ee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6959      	ldr	r1, [r3, #20]
 800a9f8:	4a7e      	ldr	r2, [pc, #504]	@ (800abf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	0018      	movs	r0, r3
 800a9fe:	f000 f9f1 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	1c11      	adds	r1, r2, #0
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f000 f9fa 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa10:	1c03      	adds	r3, r0, #0
 800aa12:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa20:	1c19      	adds	r1, r3, #0
 800aa22:	1c10      	adds	r0, r2, #0
 800aa24:	f7f6 fbfa 	bl	800121c <__aeabi_fsub>
 800aa28:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa2c:	1c18      	adds	r0, r3, #0
 800aa2e:	f7f6 fab7 	bl	8000fa0 <__aeabi_fmul>
 800aa32:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa34:	1c19      	adds	r1, r3, #0
 800aa36:	1c20      	adds	r0, r4, #0
 800aa38:	f7f5 ff42 	bl	80008c0 <__aeabi_fadd>
 800aa3c:	1c03      	adds	r3, r0, #0
 800aa3e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800aa48:	1c19      	adds	r1, r3, #0
 800aa4a:	486b      	ldr	r0, [pc, #428]	@ (800abf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800aa4c:	f7f6 fbe6 	bl	800121c <__aeabi_fsub>
 800aa50:	1c03      	adds	r3, r0, #0
 800aa52:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	1c11      	adds	r1, r2, #0
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f000 f9d1 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa62:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aa64:	1c19      	adds	r1, r3, #0
 800aa66:	1c28      	adds	r0, r5, #0
 800aa68:	f7f6 fa9a 	bl	8000fa0 <__aeabi_fmul>
 800aa6c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aa6e:	1c19      	adds	r1, r3, #0
 800aa70:	1c20      	adds	r0, r4, #0
 800aa72:	f7f5 ff25 	bl	80008c0 <__aeabi_fadd>
 800aa76:	1c03      	adds	r3, r0, #0
 800aa78:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aa7a:	4a60      	ldr	r2, [pc, #384]	@ (800abfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aa7c:	6a39      	ldr	r1, [r7, #32]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	0018      	movs	r0, r3
 800aa82:	f000 f9af 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	1c11      	adds	r1, r2, #0
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f000 f9b8 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa94:	1c03      	adds	r3, r0, #0
 800aa96:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800aa98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa9a:	69f8      	ldr	r0, [r7, #28]
 800aa9c:	f7f6 fa80 	bl	8000fa0 <__aeabi_fmul>
 800aaa0:	1c03      	adds	r3, r0, #0
 800aaa2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6999      	ldr	r1, [r3, #24]
 800aaac:	4a51      	ldr	r2, [pc, #324]	@ (800abf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0018      	movs	r0, r3
 800aab2:	f000 f997 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	1c11      	adds	r1, r2, #0
 800aabe:	0018      	movs	r0, r3
 800aac0:	f000 f9a0 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aac4:	1c03      	adds	r3, r0, #0
 800aac6:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aad4:	1c19      	adds	r1, r3, #0
 800aad6:	1c10      	adds	r0, r2, #0
 800aad8:	f7f6 fba0 	bl	800121c <__aeabi_fsub>
 800aadc:	1c03      	adds	r3, r0, #0
 800aade:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800aae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aae2:	69b8      	ldr	r0, [r7, #24]
 800aae4:	f7f6 fb9a 	bl	800121c <__aeabi_fsub>
 800aae8:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800aaea:	1c19      	adds	r1, r3, #0
 800aaec:	1c28      	adds	r0, r5, #0
 800aaee:	f7f6 fa57 	bl	8000fa0 <__aeabi_fmul>
 800aaf2:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800aaf4:	1c19      	adds	r1, r3, #0
 800aaf6:	1c20      	adds	r0, r4, #0
 800aaf8:	f7f5 fee2 	bl	80008c0 <__aeabi_fadd>
 800aafc:	1c03      	adds	r3, r0, #0
 800aafe:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ab08:	1c19      	adds	r1, r3, #0
 800ab0a:	483b      	ldr	r0, [pc, #236]	@ (800abf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ab0c:	f7f6 fb86 	bl	800121c <__aeabi_fsub>
 800ab10:	1c03      	adds	r3, r0, #0
 800ab12:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1c11      	adds	r1, r2, #0
 800ab1c:	0018      	movs	r0, r3
 800ab1e:	f000 f971 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab22:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ab24:	1c19      	adds	r1, r3, #0
 800ab26:	1c28      	adds	r0, r5, #0
 800ab28:	f7f6 fa3a 	bl	8000fa0 <__aeabi_fmul>
 800ab2c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800ab2e:	1c19      	adds	r1, r3, #0
 800ab30:	1c20      	adds	r0, r4, #0
 800ab32:	f7f5 fec5 	bl	80008c0 <__aeabi_fadd>
 800ab36:	1c03      	adds	r3, r0, #0
 800ab38:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ab3a:	4a30      	ldr	r2, [pc, #192]	@ (800abfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ab3c:	6939      	ldr	r1, [r7, #16]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	0018      	movs	r0, r3
 800ab42:	f000 f94f 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	1c11      	adds	r1, r2, #0
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f000 f958 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab54:	1c03      	adds	r3, r0, #0
 800ab56:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ab58:	6979      	ldr	r1, [r7, #20]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7f6 fa20 	bl	8000fa0 <__aeabi_fmul>
 800ab60:	1c03      	adds	r3, r0, #0
 800ab62:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	4923      	ldr	r1, [pc, #140]	@ (800ac00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ab72:	1c18      	adds	r0, r3, #0
 800ab74:	f7f6 f82e 	bl	8000bd4 <__aeabi_fdiv>
 800ab78:	1c03      	adds	r3, r0, #0
 800ab7a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ab7c:	69f9      	ldr	r1, [r7, #28]
 800ab7e:	20fe      	movs	r0, #254	@ 0xfe
 800ab80:	0580      	lsls	r0, r0, #22
 800ab82:	f7f6 fb4b 	bl	800121c <__aeabi_fsub>
 800ab86:	1c03      	adds	r3, r0, #0
 800ab88:	491e      	ldr	r1, [pc, #120]	@ (800ac04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ab8a:	1c18      	adds	r0, r3, #0
 800ab8c:	f7f6 fa08 	bl	8000fa0 <__aeabi_fmul>
 800ab90:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ab92:	491d      	ldr	r1, [pc, #116]	@ (800ac08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ab94:	1c18      	adds	r0, r3, #0
 800ab96:	f7f6 fb41 	bl	800121c <__aeabi_fsub>
 800ab9a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ab9c:	1c19      	adds	r1, r3, #0
 800ab9e:	1c28      	adds	r0, r5, #0
 800aba0:	f7f6 f9fe 	bl	8000fa0 <__aeabi_fmul>
 800aba4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800aba6:	1c19      	adds	r1, r3, #0
 800aba8:	1c20      	adds	r0, r4, #0
 800abaa:	f7f5 fe89 	bl	80008c0 <__aeabi_fadd>
 800abae:	1c03      	adds	r3, r0, #0
 800abb0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abba:	2100      	movs	r1, #0
 800abbc:	1c18      	adds	r0, r3, #0
 800abbe:	f7f5 fcb7 	bl	8000530 <__aeabi_fcmplt>
 800abc2:	1e03      	subs	r3, r0, #0
 800abc4:	d002      	beq.n	800abcc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800abd4:	1c19      	adds	r1, r3, #0
 800abd6:	1c10      	adds	r0, r2, #0
 800abd8:	f7f5 fcbe 	bl	8000558 <__aeabi_fcmpgt>
 800abdc:	1e03      	subs	r3, r0, #0
 800abde:	d100      	bne.n	800abe2 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800abe0:	e002      	b.n	800abe8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800abe8:	46c0      	nop			@ (mov r8, r8)
 800abea:	46bd      	mov	sp, r7
 800abec:	b00c      	add	sp, #48	@ 0x30
 800abee:	bdb0      	pop	{r4, r5, r7, pc}
 800abf0:	46fffe00 	.word	0x46fffe00
 800abf4:	3c23d70a 	.word	0x3c23d70a
 800abf8:	43ff0000 	.word	0x43ff0000
 800abfc:	3db851ec 	.word	0x3db851ec
 800ac00:	42700000 	.word	0x42700000
 800ac04:	3fa66666 	.word	0x3fa66666
 800ac08:	3e99999a 	.word	0x3e99999a

0800ac0c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0e:	b087      	sub	sp, #28
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	223c      	movs	r2, #60	@ 0x3c
 800ac1a:	5c9b      	ldrb	r3, [r3, r2]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	4053      	eors	r3, r2
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	223c      	movs	r2, #60	@ 0x3c
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ac3a:	e0c8      	b.n	800adce <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac40:	4965      	ldr	r1, [pc, #404]	@ (800add8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ac42:	1c18      	adds	r0, r3, #0
 800ac44:	f7f5 fc92 	bl	800056c <__aeabi_fcmpge>
 800ac48:	1e03      	subs	r3, r0, #0
 800ac4a:	d107      	bne.n	800ac5c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac50:	4962      	ldr	r1, [pc, #392]	@ (800addc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ac52:	1c18      	adds	r0, r3, #0
 800ac54:	f7f5 fc76 	bl	8000544 <__aeabi_fcmple>
 800ac58:	1e03      	subs	r3, r0, #0
 800ac5a:	d00e      	beq.n	800ac7a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ac64:	1c19      	adds	r1, r3, #0
 800ac66:	1c10      	adds	r0, r2, #0
 800ac68:	f7f5 fe2a 	bl	80008c0 <__aeabi_fadd>
 800ac6c:	1c03      	adds	r3, r0, #0
 800ac6e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac7e:	1c19      	adds	r1, r3, #0
 800ac80:	6838      	ldr	r0, [r7, #0]
 800ac82:	f7f6 facb 	bl	800121c <__aeabi_fsub>
 800ac86:	1c03      	adds	r3, r0, #0
 800ac88:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	0018      	movs	r0, r3
 800ac8e:	f7ff fe7d 	bl	800a98c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac96:	1c19      	adds	r1, r3, #0
 800ac98:	6838      	ldr	r0, [r7, #0]
 800ac9a:	f7f6 fabf 	bl	800121c <__aeabi_fsub>
 800ac9e:	1c03      	adds	r3, r0, #0
 800aca0:	2185      	movs	r1, #133	@ 0x85
 800aca2:	05c9      	lsls	r1, r1, #23
 800aca4:	1c18      	adds	r0, r3, #0
 800aca6:	f7f5 ff95 	bl	8000bd4 <__aeabi_fdiv>
 800acaa:	1c03      	adds	r3, r0, #0
 800acac:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800acae:	2100      	movs	r1, #0
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7f5 fc3d 	bl	8000530 <__aeabi_fcmplt>
 800acb6:	1e03      	subs	r3, r0, #0
 800acb8:	d008      	beq.n	800accc <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	1c18      	adds	r0, r3, #0
 800acc2:	f7f6 faab 	bl	800121c <__aeabi_fsub>
 800acc6:	1c03      	adds	r3, r0, #0
 800acc8:	617b      	str	r3, [r7, #20]
 800acca:	e007      	b.n	800acdc <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acd0:	1c19      	adds	r1, r3, #0
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7f5 fdf4 	bl	80008c0 <__aeabi_fadd>
 800acd8:	1c03      	adds	r3, r0, #0
 800acda:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800acdc:	23fe      	movs	r3, #254	@ 0xfe
 800acde:	059b      	lsls	r3, r3, #22
 800ace0:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800ace2:	493f      	ldr	r1, [pc, #252]	@ (800ade0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ace4:	6978      	ldr	r0, [r7, #20]
 800ace6:	f7f5 fc37 	bl	8000558 <__aeabi_fcmpgt>
 800acea:	1e03      	subs	r3, r0, #0
 800acec:	d010      	beq.n	800ad10 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800acee:	493c      	ldr	r1, [pc, #240]	@ (800ade0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	f7f5 ff6f 	bl	8000bd4 <__aeabi_fdiv>
 800acf6:	1c03      	adds	r3, r0, #0
 800acf8:	1c1c      	adds	r4, r3, #0
 800acfa:	4939      	ldr	r1, [pc, #228]	@ (800ade0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800acfc:	6978      	ldr	r0, [r7, #20]
 800acfe:	f7f5 ff69 	bl	8000bd4 <__aeabi_fdiv>
 800ad02:	1c03      	adds	r3, r0, #0
 800ad04:	1c19      	adds	r1, r3, #0
 800ad06:	1c20      	adds	r0, r4, #0
 800ad08:	f7f6 f94a 	bl	8000fa0 <__aeabi_fmul>
 800ad0c:	1c03      	adds	r3, r0, #0
 800ad0e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800ad14:	1c19      	adds	r1, r3, #0
 800ad16:	2085      	movs	r0, #133	@ 0x85
 800ad18:	05c0      	lsls	r0, r0, #23
 800ad1a:	f7f6 fa7f 	bl	800121c <__aeabi_fsub>
 800ad1e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800ad20:	6939      	ldr	r1, [r7, #16]
 800ad22:	1c18      	adds	r0, r3, #0
 800ad24:	f7f6 f93c 	bl	8000fa0 <__aeabi_fmul>
 800ad28:	1c03      	adds	r3, r0, #0
 800ad2a:	1c18      	adds	r0, r3, #0
 800ad2c:	f017 ffc2 	bl	8022cb4 <sqrtf>
 800ad30:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ad3a:	2185      	movs	r1, #133	@ 0x85
 800ad3c:	05c9      	lsls	r1, r1, #23
 800ad3e:	6938      	ldr	r0, [r7, #16]
 800ad40:	f7f6 f92e 	bl	8000fa0 <__aeabi_fmul>
 800ad44:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800ad46:	1c19      	adds	r1, r3, #0
 800ad48:	1c28      	adds	r0, r5, #0
 800ad4a:	f7f5 ff43 	bl	8000bd4 <__aeabi_fdiv>
 800ad4e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad50:	1c19      	adds	r1, r3, #0
 800ad52:	1c20      	adds	r0, r4, #0
 800ad54:	f7f6 f924 	bl	8000fa0 <__aeabi_fmul>
 800ad58:	1c03      	adds	r3, r0, #0
 800ad5a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad60:	68f9      	ldr	r1, [r7, #12]
 800ad62:	1c18      	adds	r0, r3, #0
 800ad64:	f7f6 f91c 	bl	8000fa0 <__aeabi_fmul>
 800ad68:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800ad6a:	6939      	ldr	r1, [r7, #16]
 800ad6c:	1c18      	adds	r0, r3, #0
 800ad6e:	f7f5 ff31 	bl	8000bd4 <__aeabi_fdiv>
 800ad72:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800ad74:	68f9      	ldr	r1, [r7, #12]
 800ad76:	1c18      	adds	r0, r3, #0
 800ad78:	f7f6 f912 	bl	8000fa0 <__aeabi_fmul>
 800ad7c:	1c03      	adds	r3, r0, #0
             sqrtf(
 800ad7e:	1c19      	adds	r1, r3, #0
 800ad80:	1c20      	adds	r0, r4, #0
 800ad82:	f7f5 fd9d 	bl	80008c0 <__aeabi_fadd>
 800ad86:	1c03      	adds	r3, r0, #0
 800ad88:	1c18      	adds	r0, r3, #0
 800ad8a:	f017 ff93 	bl	8022cb4 <sqrtf>
 800ad8e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad90:	1c19      	adds	r1, r3, #0
 800ad92:	1c30      	adds	r0, r6, #0
 800ad94:	f7f6 f904 	bl	8000fa0 <__aeabi_fmul>
 800ad98:	1c03      	adds	r3, r0, #0
 800ad9a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	1c18      	adds	r0, r3, #0
 800adac:	f7f6 f8f8 	bl	8000fa0 <__aeabi_fmul>
 800adb0:	1c03      	adds	r3, r0, #0
 800adb2:	2182      	movs	r1, #130	@ 0x82
 800adb4:	05c9      	lsls	r1, r1, #23
 800adb6:	1c18      	adds	r0, r3, #0
 800adb8:	f7f5 ff0c 	bl	8000bd4 <__aeabi_fdiv>
 800adbc:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800adbe:	1c19      	adds	r1, r3, #0
 800adc0:	1c20      	adds	r0, r4, #0
 800adc2:	f7f5 fd7d 	bl	80008c0 <__aeabi_fadd>
 800adc6:	1c03      	adds	r3, r0, #0
 800adc8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800adce:	46c0      	nop			@ (mov r8, r8)
 800add0:	46bd      	mov	sp, r7
 800add2:	b007      	add	sp, #28
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add6:	46c0      	nop			@ (mov r8, r8)
 800add8:	42c80000 	.word	0x42c80000
 800addc:	c2c80000 	.word	0xc2c80000
 800ade0:	44b40000 	.word	0x44b40000

0800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800adfc:	46c0      	nop			@ (mov r8, r8)
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b004      	add	sp, #16
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ae04:	b590      	push	{r4, r7, lr}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae16:	1c19      	adds	r1, r3, #0
 800ae18:	6838      	ldr	r0, [r7, #0]
 800ae1a:	f7f6 f9ff 	bl	800121c <__aeabi_fsub>
 800ae1e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae20:	1c19      	adds	r1, r3, #0
 800ae22:	1c20      	adds	r0, r4, #0
 800ae24:	f7f6 f8bc 	bl	8000fa0 <__aeabi_fmul>
 800ae28:	1c03      	adds	r3, r0, #0
 800ae2a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800ae2c:	4912      	ldr	r1, [pc, #72]	@ (800ae78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7f5 fb7e 	bl	8000530 <__aeabi_fcmplt>
 800ae34:	1e03      	subs	r3, r0, #0
 800ae36:	d002      	beq.n	800ae3e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800ae38:	23fe      	movs	r3, #254	@ 0xfe
 800ae3a:	059b      	lsls	r3, r3, #22
 800ae3c:	e018      	b.n	800ae70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800ae3e:	490f      	ldr	r1, [pc, #60]	@ (800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7f5 fb89 	bl	8000558 <__aeabi_fcmpgt>
 800ae46:	1e03      	subs	r3, r0, #0
 800ae48:	d001      	beq.n	800ae4e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e010      	b.n	800ae70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1c18      	adds	r0, r3, #0
 800ae52:	f017 ff07 	bl	8022c64 <expf>
 800ae56:	1c03      	adds	r3, r0, #0
 800ae58:	21fe      	movs	r1, #254	@ 0xfe
 800ae5a:	0589      	lsls	r1, r1, #22
 800ae5c:	1c18      	adds	r0, r3, #0
 800ae5e:	f7f5 fd2f 	bl	80008c0 <__aeabi_fadd>
 800ae62:	1c03      	adds	r3, r0, #0
 800ae64:	1c19      	adds	r1, r3, #0
 800ae66:	20fe      	movs	r0, #254	@ 0xfe
 800ae68:	0580      	lsls	r0, r0, #22
 800ae6a:	f7f5 feb3 	bl	8000bd4 <__aeabi_fdiv>
 800ae6e:	1c03      	adds	r3, r0, #0
    }
}
 800ae70:	1c18      	adds	r0, r3, #0
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b005      	add	sp, #20
 800ae76:	bd90      	pop	{r4, r7, pc}
 800ae78:	c2480000 	.word	0xc2480000
 800ae7c:	42480000 	.word	0x42480000

0800ae80 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800ae98:	46c0      	nop			@ (mov r8, r8)
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	b004      	add	sp, #16
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d114      	bne.n	800aedc <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aeb6:	1c19      	adds	r1, r3, #0
 800aeb8:	6838      	ldr	r0, [r7, #0]
 800aeba:	f7f6 f9af 	bl	800121c <__aeabi_fsub>
 800aebe:	1c03      	adds	r3, r0, #0
 800aec0:	4918      	ldr	r1, [pc, #96]	@ (800af24 <GasIndexAlgorithm__mox_model__process+0x84>)
 800aec2:	1c18      	adds	r0, r3, #0
 800aec4:	f7f5 fe86 	bl	8000bd4 <__aeabi_fdiv>
 800aec8:	1c03      	adds	r3, r0, #0
 800aeca:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800aed0:	1c19      	adds	r1, r3, #0
 800aed2:	1c10      	adds	r0, r2, #0
 800aed4:	f7f6 f864 	bl	8000fa0 <__aeabi_fmul>
 800aed8:	1c03      	adds	r3, r0, #0
 800aeda:	e01f      	b.n	800af1c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aee0:	1c19      	adds	r1, r3, #0
 800aee2:	6838      	ldr	r0, [r7, #0]
 800aee4:	f7f6 f99a 	bl	800121c <__aeabi_fsub>
 800aee8:	1c03      	adds	r3, r0, #0
 800aeea:	1c1a      	adds	r2, r3, #0
 800aeec:	2380      	movs	r3, #128	@ 0x80
 800aeee:	061b      	lsls	r3, r3, #24
 800aef0:	4053      	eors	r3, r2
 800aef2:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aef8:	490b      	ldr	r1, [pc, #44]	@ (800af28 <GasIndexAlgorithm__mox_model__process+0x88>)
 800aefa:	1c18      	adds	r0, r3, #0
 800aefc:	f7f5 fce0 	bl	80008c0 <__aeabi_fadd>
 800af00:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af02:	1c19      	adds	r1, r3, #0
 800af04:	1c20      	adds	r0, r4, #0
 800af06:	f7f5 fe65 	bl	8000bd4 <__aeabi_fdiv>
 800af0a:	1c03      	adds	r3, r0, #0
 800af0c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800af12:	1c19      	adds	r1, r3, #0
 800af14:	1c10      	adds	r0, r2, #0
 800af16:	f7f6 f843 	bl	8000fa0 <__aeabi_fmul>
 800af1a:	1c03      	adds	r3, r0, #0
    }
}
 800af1c:	1c18      	adds	r0, r3, #0
 800af1e:	46bd      	mov	sp, r7
 800af20:	b003      	add	sp, #12
 800af22:	bd90      	pop	{r4, r7, pc}
 800af24:	44fa0000 	.word	0x44fa0000
 800af28:	435c0000 	.word	0x435c0000

0800af2c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2180      	movs	r1, #128	@ 0x80
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2184      	movs	r1, #132	@ 0x84
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2188      	movs	r1, #136	@ 0x88
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	505a      	str	r2, [r3, r1]
}
 800af52:	46c0      	nop			@ (mov r8, r8)
 800af54:	46bd      	mov	sp, r7
 800af56:	b004      	add	sp, #16
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2280      	movs	r2, #128	@ 0x80
 800af6a:	589c      	ldr	r4, [r3, r2]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2284      	movs	r2, #132	@ 0x84
 800af70:	589b      	ldr	r3, [r3, r2]
 800af72:	1c19      	adds	r1, r3, #0
 800af74:	6838      	ldr	r0, [r7, #0]
 800af76:	f7f6 f951 	bl	800121c <__aeabi_fsub>
 800af7a:	1c03      	adds	r3, r0, #0
 800af7c:	1c19      	adds	r1, r3, #0
 800af7e:	1c20      	adds	r0, r4, #0
 800af80:	f7f6 f80e 	bl	8000fa0 <__aeabi_fmul>
 800af84:	1c03      	adds	r3, r0, #0
 800af86:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800af88:	4940      	ldr	r1, [pc, #256]	@ (800b08c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800af8a:	68b8      	ldr	r0, [r7, #8]
 800af8c:	f7f5 fad0 	bl	8000530 <__aeabi_fcmplt>
 800af90:	1e03      	subs	r3, r0, #0
 800af92:	d001      	beq.n	800af98 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800af94:	4b3e      	ldr	r3, [pc, #248]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800af96:	e075      	b.n	800b084 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800af98:	493e      	ldr	r1, [pc, #248]	@ (800b094 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800af9a:	68b8      	ldr	r0, [r7, #8]
 800af9c:	f7f5 fadc 	bl	8000558 <__aeabi_fcmpgt>
 800afa0:	1e03      	subs	r3, r0, #0
 800afa2:	d001      	beq.n	800afa8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800afa4:	2300      	movs	r3, #0
 800afa6:	e06d      	b.n	800b084 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800afa8:	2100      	movs	r1, #0
 800afaa:	6838      	ldr	r0, [r7, #0]
 800afac:	f7f5 fade 	bl	800056c <__aeabi_fcmpge>
 800afb0:	1e03      	subs	r3, r0, #0
 800afb2:	d047      	beq.n	800b044 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2288      	movs	r2, #136	@ 0x88
 800afb8:	589b      	ldr	r3, [r3, r2]
 800afba:	21fe      	movs	r1, #254	@ 0xfe
 800afbc:	0589      	lsls	r1, r1, #22
 800afbe:	1c18      	adds	r0, r3, #0
 800afc0:	f7f5 fab0 	bl	8000524 <__aeabi_fcmpeq>
 800afc4:	1e03      	subs	r3, r0, #0
 800afc6:	d00e      	beq.n	800afe6 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	1c19      	adds	r1, r3, #0
 800afce:	20fe      	movs	r0, #254	@ 0xfe
 800afd0:	0580      	lsls	r0, r0, #22
 800afd2:	f7f6 f923 	bl	800121c <__aeabi_fsub>
 800afd6:	1c03      	adds	r3, r0, #0
 800afd8:	492f      	ldr	r1, [pc, #188]	@ (800b098 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800afda:	1c18      	adds	r0, r3, #0
 800afdc:	f7f5 ffe0 	bl	8000fa0 <__aeabi_fmul>
 800afe0:	1c03      	adds	r3, r0, #0
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e012      	b.n	800b00c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	492c      	ldr	r1, [pc, #176]	@ (800b09c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800afec:	1c18      	adds	r0, r3, #0
 800afee:	f7f5 ffd7 	bl	8000fa0 <__aeabi_fmul>
 800aff2:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800aff4:	1c19      	adds	r1, r3, #0
 800aff6:	4826      	ldr	r0, [pc, #152]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aff8:	f7f6 f910 	bl	800121c <__aeabi_fsub>
 800affc:	1c03      	adds	r3, r0, #0
 800affe:	2181      	movs	r1, #129	@ 0x81
 800b000:	05c9      	lsls	r1, r1, #23
 800b002:	1c18      	adds	r0, r3, #0
 800b004:	f7f5 fde6 	bl	8000bd4 <__aeabi_fdiv>
 800b008:	1c03      	adds	r3, r0, #0
 800b00a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b00c:	4920      	ldr	r1, [pc, #128]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7f5 fc56 	bl	80008c0 <__aeabi_fadd>
 800b014:	1c03      	adds	r3, r0, #0
 800b016:	1c1c      	adds	r4, r3, #0
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	1c18      	adds	r0, r3, #0
 800b01c:	f017 fe22 	bl	8022c64 <expf>
 800b020:	1c03      	adds	r3, r0, #0
 800b022:	21fe      	movs	r1, #254	@ 0xfe
 800b024:	0589      	lsls	r1, r1, #22
 800b026:	1c18      	adds	r0, r3, #0
 800b028:	f7f5 fc4a 	bl	80008c0 <__aeabi_fadd>
 800b02c:	1c03      	adds	r3, r0, #0
 800b02e:	1c19      	adds	r1, r3, #0
 800b030:	1c20      	adds	r0, r4, #0
 800b032:	f7f5 fdcf 	bl	8000bd4 <__aeabi_fdiv>
 800b036:	1c03      	adds	r3, r0, #0
 800b038:	68f9      	ldr	r1, [r7, #12]
 800b03a:	1c18      	adds	r0, r3, #0
 800b03c:	f7f6 f8ee 	bl	800121c <__aeabi_fsub>
 800b040:	1c03      	adds	r3, r0, #0
 800b042:	e01f      	b.n	800b084 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2188      	movs	r1, #136	@ 0x88
 800b04c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b04e:	1c19      	adds	r1, r3, #0
 800b050:	1c10      	adds	r0, r2, #0
 800b052:	f7f5 fdbf 	bl	8000bd4 <__aeabi_fdiv>
 800b056:	1c03      	adds	r3, r0, #0
 800b058:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	1c18      	adds	r0, r3, #0
 800b05e:	f017 fe01 	bl	8022c64 <expf>
 800b062:	1c03      	adds	r3, r0, #0
 800b064:	21fe      	movs	r1, #254	@ 0xfe
 800b066:	0589      	lsls	r1, r1, #22
 800b068:	1c18      	adds	r0, r3, #0
 800b06a:	f7f5 fc29 	bl	80008c0 <__aeabi_fadd>
 800b06e:	1c03      	adds	r3, r0, #0
 800b070:	1c19      	adds	r1, r3, #0
 800b072:	4807      	ldr	r0, [pc, #28]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b074:	f7f5 fdae 	bl	8000bd4 <__aeabi_fdiv>
 800b078:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b07a:	1c19      	adds	r1, r3, #0
 800b07c:	1c20      	adds	r0, r4, #0
 800b07e:	f7f5 ff8f 	bl	8000fa0 <__aeabi_fmul>
 800b082:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b084:	1c18      	adds	r0, r3, #0
 800b086:	46bd      	mov	sp, r7
 800b088:	b005      	add	sp, #20
 800b08a:	bd90      	pop	{r4, r7, pc}
 800b08c:	c2480000 	.word	0xc2480000
 800b090:	43fa0000 	.word	0x43fa0000
 800b094:	42480000 	.word	0x42480000
 800b098:	3f8041ab 	.word	0x3f8041ab
 800b09c:	40a00000 	.word	0x40a00000

0800b0a0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b0a0:	b590      	push	{r4, r7, lr}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	4913      	ldr	r1, [pc, #76]	@ (800b100 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b0b2:	1c18      	adds	r0, r3, #0
 800b0b4:	f7f5 fc04 	bl	80008c0 <__aeabi_fadd>
 800b0b8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b0ba:	1c19      	adds	r1, r3, #0
 800b0bc:	1c20      	adds	r0, r4, #0
 800b0be:	f7f5 fd89 	bl	8000bd4 <__aeabi_fdiv>
 800b0c2:	1c03      	adds	r3, r0, #0
 800b0c4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	228c      	movs	r2, #140	@ 0x8c
 800b0ca:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	490b      	ldr	r1, [pc, #44]	@ (800b104 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b0d6:	1c18      	adds	r0, r3, #0
 800b0d8:	f7f5 fbf2 	bl	80008c0 <__aeabi_fadd>
 800b0dc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b0de:	1c19      	adds	r1, r3, #0
 800b0e0:	1c20      	adds	r0, r4, #0
 800b0e2:	f7f5 fd77 	bl	8000bd4 <__aeabi_fdiv>
 800b0e6:	1c03      	adds	r3, r0, #0
 800b0e8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2290      	movs	r2, #144	@ 0x90
 800b0ee:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2294      	movs	r2, #148	@ 0x94
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	5499      	strb	r1, [r3, r2]
}
 800b0f8:	46c0      	nop			@ (mov r8, r8)
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	b003      	add	sp, #12
 800b0fe:	bd90      	pop	{r4, r7, pc}
 800b100:	41a00000 	.word	0x41a00000
 800b104:	43fa0000 	.word	0x43fa0000

0800b108 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b108:	b590      	push	{r4, r7, lr}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2294      	movs	r2, #148	@ 0x94
 800b116:	5c9b      	ldrb	r3, [r3, r2]
 800b118:	2201      	movs	r2, #1
 800b11a:	4053      	eors	r3, r2
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00f      	beq.n	800b142 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2198      	movs	r1, #152	@ 0x98
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	219c      	movs	r1, #156	@ 0x9c
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	21a0      	movs	r1, #160	@ 0xa0
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2294      	movs	r2, #148	@ 0x94
 800b13e:	2101      	movs	r1, #1
 800b140:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	228c      	movs	r2, #140	@ 0x8c
 800b146:	589b      	ldr	r3, [r3, r2]
 800b148:	1c19      	adds	r1, r3, #0
 800b14a:	20fe      	movs	r0, #254	@ 0xfe
 800b14c:	0580      	lsls	r0, r0, #22
 800b14e:	f7f6 f865 	bl	800121c <__aeabi_fsub>
 800b152:	1c03      	adds	r3, r0, #0
 800b154:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2298      	movs	r2, #152	@ 0x98
 800b15a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b15c:	1c19      	adds	r1, r3, #0
 800b15e:	f7f5 ff1f 	bl	8000fa0 <__aeabi_fmul>
 800b162:	1c03      	adds	r3, r0, #0
 800b164:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	228c      	movs	r2, #140	@ 0x8c
 800b16a:	589b      	ldr	r3, [r3, r2]
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	1c18      	adds	r0, r3, #0
 800b170:	f7f5 ff16 	bl	8000fa0 <__aeabi_fmul>
 800b174:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b176:	1c19      	adds	r1, r3, #0
 800b178:	1c20      	adds	r0, r4, #0
 800b17a:	f7f5 fba1 	bl	80008c0 <__aeabi_fadd>
 800b17e:	1c03      	adds	r3, r0, #0
 800b180:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2298      	movs	r2, #152	@ 0x98
 800b186:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2290      	movs	r2, #144	@ 0x90
 800b18c:	589b      	ldr	r3, [r3, r2]
 800b18e:	1c19      	adds	r1, r3, #0
 800b190:	20fe      	movs	r0, #254	@ 0xfe
 800b192:	0580      	lsls	r0, r0, #22
 800b194:	f7f6 f842 	bl	800121c <__aeabi_fsub>
 800b198:	1c03      	adds	r3, r0, #0
 800b19a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	229c      	movs	r2, #156	@ 0x9c
 800b1a0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b1a2:	1c19      	adds	r1, r3, #0
 800b1a4:	f7f5 fefc 	bl	8000fa0 <__aeabi_fmul>
 800b1a8:	1c03      	adds	r3, r0, #0
 800b1aa:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2290      	movs	r2, #144	@ 0x90
 800b1b0:	589b      	ldr	r3, [r3, r2]
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	1c18      	adds	r0, r3, #0
 800b1b6:	f7f5 fef3 	bl	8000fa0 <__aeabi_fmul>
 800b1ba:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b1bc:	1c19      	adds	r1, r3, #0
 800b1be:	1c20      	adds	r0, r4, #0
 800b1c0:	f7f5 fb7e 	bl	80008c0 <__aeabi_fadd>
 800b1c4:	1c03      	adds	r3, r0, #0
 800b1c6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	229c      	movs	r2, #156	@ 0x9c
 800b1cc:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2298      	movs	r2, #152	@ 0x98
 800b1d2:	589a      	ldr	r2, [r3, r2]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	219c      	movs	r1, #156	@ 0x9c
 800b1d8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b1da:	1c19      	adds	r1, r3, #0
 800b1dc:	1c10      	adds	r0, r2, #0
 800b1de:	f7f6 f81d 	bl	800121c <__aeabi_fsub>
 800b1e2:	1c03      	adds	r3, r0, #0
 800b1e4:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	6978      	ldr	r0, [r7, #20]
 800b1ea:	f7f5 f9a1 	bl	8000530 <__aeabi_fcmplt>
 800b1ee:	1e03      	subs	r3, r0, #0
 800b1f0:	d004      	beq.n	800b1fc <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2280      	movs	r2, #128	@ 0x80
 800b1f6:	0612      	lsls	r2, r2, #24
 800b1f8:	4053      	eors	r3, r2
 800b1fa:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b1fc:	4923      	ldr	r1, [pc, #140]	@ (800b28c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b1fe:	6978      	ldr	r0, [r7, #20]
 800b200:	f7f5 fece 	bl	8000fa0 <__aeabi_fmul>
 800b204:	1c03      	adds	r3, r0, #0
 800b206:	1c18      	adds	r0, r3, #0
 800b208:	f017 fd2c 	bl	8022c64 <expf>
 800b20c:	1c03      	adds	r3, r0, #0
 800b20e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b210:	491f      	ldr	r1, [pc, #124]	@ (800b290 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b212:	6938      	ldr	r0, [r7, #16]
 800b214:	f7f5 fec4 	bl	8000fa0 <__aeabi_fmul>
 800b218:	1c03      	adds	r3, r0, #0
 800b21a:	491e      	ldr	r1, [pc, #120]	@ (800b294 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b21c:	1c18      	adds	r0, r3, #0
 800b21e:	f7f5 fb4f 	bl	80008c0 <__aeabi_fadd>
 800b222:	1c03      	adds	r3, r0, #0
 800b224:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685c      	ldr	r4, [r3, #4]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	68f9      	ldr	r1, [r7, #12]
 800b230:	1c18      	adds	r0, r3, #0
 800b232:	f7f5 fb45 	bl	80008c0 <__aeabi_fadd>
 800b236:	1c03      	adds	r3, r0, #0
 800b238:	1c19      	adds	r1, r3, #0
 800b23a:	1c20      	adds	r0, r4, #0
 800b23c:	f7f5 fcca 	bl	8000bd4 <__aeabi_fdiv>
 800b240:	1c03      	adds	r3, r0, #0
 800b242:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	20fe      	movs	r0, #254	@ 0xfe
 800b248:	0580      	lsls	r0, r0, #22
 800b24a:	f7f5 ffe7 	bl	800121c <__aeabi_fsub>
 800b24e:	1c03      	adds	r3, r0, #0
 800b250:	1c18      	adds	r0, r3, #0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	22a0      	movs	r2, #160	@ 0xa0
 800b256:	589b      	ldr	r3, [r3, r2]
 800b258:	1c19      	adds	r1, r3, #0
 800b25a:	f7f5 fea1 	bl	8000fa0 <__aeabi_fmul>
 800b25e:	1c03      	adds	r3, r0, #0
 800b260:	1c1c      	adds	r4, r3, #0
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	68b8      	ldr	r0, [r7, #8]
 800b266:	f7f5 fe9b 	bl	8000fa0 <__aeabi_fmul>
 800b26a:	1c03      	adds	r3, r0, #0
 800b26c:	1c19      	adds	r1, r3, #0
 800b26e:	1c20      	adds	r0, r4, #0
 800b270:	f7f5 fb26 	bl	80008c0 <__aeabi_fadd>
 800b274:	1c03      	adds	r3, r0, #0
 800b276:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	22a0      	movs	r2, #160	@ 0xa0
 800b27c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	22a0      	movs	r2, #160	@ 0xa0
 800b282:	589b      	ldr	r3, [r3, r2]
}
 800b284:	1c18      	adds	r0, r3, #0
 800b286:	46bd      	mov	sp, r7
 800b288:	b007      	add	sp, #28
 800b28a:	bd90      	pop	{r4, r7, pc}
 800b28c:	be4ccccd 	.word	0xbe4ccccd
 800b290:	43f00000 	.word	0x43f00000
 800b294:	41a00000 	.word	0x41a00000

0800b298 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	000a      	movs	r2, r1
 800b2a2:	1cbb      	adds	r3, r7, #2
 800b2a4:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b2a6:	230d      	movs	r3, #13
 800b2a8:	18fb      	adds	r3, r7, r3
 800b2aa:	22ff      	movs	r2, #255	@ 0xff
 800b2ac:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b2ae:	230e      	movs	r3, #14
 800b2b0:	18fb      	adds	r3, r7, r3
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	801a      	strh	r2, [r3, #0]
 800b2b6:	e037      	b.n	800b328 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b2b8:	230e      	movs	r3, #14
 800b2ba:	18fb      	adds	r3, r7, r3
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	18d3      	adds	r3, r2, r3
 800b2c2:	7819      	ldrb	r1, [r3, #0]
 800b2c4:	220d      	movs	r2, #13
 800b2c6:	18bb      	adds	r3, r7, r2
 800b2c8:	18ba      	adds	r2, r7, r2
 800b2ca:	7812      	ldrb	r2, [r2, #0]
 800b2cc:	404a      	eors	r2, r1
 800b2ce:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	18fb      	adds	r3, r7, r3
 800b2d4:	2208      	movs	r2, #8
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	e01b      	b.n	800b312 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b2da:	210d      	movs	r1, #13
 800b2dc:	187b      	adds	r3, r7, r1
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	b25b      	sxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	da09      	bge.n	800b2fa <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b2e6:	187b      	adds	r3, r7, r1
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	b25b      	sxtb	r3, r3
 800b2ee:	2231      	movs	r2, #49	@ 0x31
 800b2f0:	4053      	eors	r3, r2
 800b2f2:	b25a      	sxtb	r2, r3
 800b2f4:	187b      	adds	r3, r7, r1
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	e005      	b.n	800b306 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b2fa:	230d      	movs	r3, #13
 800b2fc:	18fa      	adds	r2, r7, r3
 800b2fe:	18fb      	adds	r3, r7, r3
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	18db      	adds	r3, r3, r3
 800b304:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b306:	220c      	movs	r2, #12
 800b308:	18bb      	adds	r3, r7, r2
 800b30a:	18ba      	adds	r2, r7, r2
 800b30c:	7812      	ldrb	r2, [r2, #0]
 800b30e:	3a01      	subs	r2, #1
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	230c      	movs	r3, #12
 800b314:	18fb      	adds	r3, r7, r3
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1de      	bne.n	800b2da <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b31c:	220e      	movs	r2, #14
 800b31e:	18bb      	adds	r3, r7, r2
 800b320:	18ba      	adds	r2, r7, r2
 800b322:	8812      	ldrh	r2, [r2, #0]
 800b324:	3201      	adds	r2, #1
 800b326:	801a      	strh	r2, [r3, #0]
 800b328:	230e      	movs	r3, #14
 800b32a:	18fa      	adds	r2, r7, r3
 800b32c:	1cbb      	adds	r3, r7, #2
 800b32e:	8812      	ldrh	r2, [r2, #0]
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d3c0      	bcc.n	800b2b8 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b336:	230d      	movs	r3, #13
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	781b      	ldrb	r3, [r3, #0]
}
 800b33c:	0018      	movs	r0, r3
 800b33e:	46bd      	mov	sp, r7
 800b340:	b004      	add	sp, #16
 800b342:	bd80      	pop	{r7, pc}

0800b344 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	0008      	movs	r0, r1
 800b34e:	0011      	movs	r1, r2
 800b350:	1cbb      	adds	r3, r7, #2
 800b352:	1c02      	adds	r2, r0, #0
 800b354:	801a      	strh	r2, [r3, #0]
 800b356:	1c7b      	adds	r3, r7, #1
 800b358:	1c0a      	adds	r2, r1, #0
 800b35a:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b35c:	1cbb      	adds	r3, r7, #2
 800b35e:	881a      	ldrh	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	0011      	movs	r1, r2
 800b364:	0018      	movs	r0, r3
 800b366:	f7ff ff97 	bl	800b298 <sensirion_i2c_generate_crc>
 800b36a:	0003      	movs	r3, r0
 800b36c:	001a      	movs	r2, r3
 800b36e:	1c7b      	adds	r3, r7, #1
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	4293      	cmp	r3, r2
 800b374:	d001      	beq.n	800b37a <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	0018      	movs	r0, r3
 800b37e:	46bd      	mov	sp, r7
 800b380:	b002      	add	sp, #8
 800b382:	bd80      	pop	{r7, pc}

0800b384 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	0008      	movs	r0, r1
 800b38e:	0011      	movs	r1, r2
 800b390:	1cbb      	adds	r3, r7, #2
 800b392:	1c02      	adds	r2, r0, #0
 800b394:	801a      	strh	r2, [r3, #0]
 800b396:	003b      	movs	r3, r7
 800b398:	1c0a      	adds	r2, r1, #0
 800b39a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b39c:	003b      	movs	r3, r7
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	0a1b      	lsrs	r3, r3, #8
 800b3a2:	b299      	uxth	r1, r3
 800b3a4:	1cbb      	adds	r3, r7, #2
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	1cba      	adds	r2, r7, #2
 800b3aa:	1c58      	adds	r0, r3, #1
 800b3ac:	8010      	strh	r0, [r2, #0]
 800b3ae:	001a      	movs	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	189b      	adds	r3, r3, r2
 800b3b4:	b2ca      	uxtb	r2, r1
 800b3b6:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b3b8:	1cbb      	adds	r3, r7, #2
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	1cba      	adds	r2, r7, #2
 800b3be:	1c59      	adds	r1, r3, #1
 800b3c0:	8011      	strh	r1, [r2, #0]
 800b3c2:	001a      	movs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	189b      	adds	r3, r3, r2
 800b3c8:	003a      	movs	r2, r7
 800b3ca:	8812      	ldrh	r2, [r2, #0]
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	701a      	strb	r2, [r3, #0]
    return offset;
 800b3d0:	1cbb      	adds	r3, r7, #2
 800b3d2:	881b      	ldrh	r3, [r3, #0]
}
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b002      	add	sp, #8
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b3dc:	b590      	push	{r4, r7, lr}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	0008      	movs	r0, r1
 800b3e6:	0011      	movs	r1, r2
 800b3e8:	1cbb      	adds	r3, r7, #2
 800b3ea:	1c02      	adds	r2, r0, #0
 800b3ec:	801a      	strh	r2, [r3, #0]
 800b3ee:	003b      	movs	r3, r7
 800b3f0:	1c0a      	adds	r2, r1, #0
 800b3f2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b3f4:	003b      	movs	r3, r7
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	b299      	uxth	r1, r3
 800b3fc:	1cbb      	adds	r3, r7, #2
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	1cba      	adds	r2, r7, #2
 800b402:	1c58      	adds	r0, r3, #1
 800b404:	8010      	strh	r0, [r2, #0]
 800b406:	001a      	movs	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	189b      	adds	r3, r3, r2
 800b40c:	b2ca      	uxtb	r2, r1
 800b40e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b410:	1cbb      	adds	r3, r7, #2
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	1cba      	adds	r2, r7, #2
 800b416:	1c59      	adds	r1, r3, #1
 800b418:	8011      	strh	r1, [r2, #0]
 800b41a:	001a      	movs	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	189b      	adds	r3, r3, r2
 800b420:	003a      	movs	r2, r7
 800b422:	8812      	ldrh	r2, [r2, #0]
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b428:	1cbb      	adds	r3, r7, #2
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	3b02      	subs	r3, #2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b432:	1cbb      	adds	r3, r7, #2
 800b434:	881b      	ldrh	r3, [r3, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	18d4      	adds	r4, r2, r3
 800b43a:	2102      	movs	r1, #2
 800b43c:	f7ff ff2c 	bl	800b298 <sensirion_i2c_generate_crc>
 800b440:	0003      	movs	r3, r0
 800b442:	7023      	strb	r3, [r4, #0]
    offset++;
 800b444:	1cbb      	adds	r3, r7, #2
 800b446:	881a      	ldrh	r2, [r3, #0]
 800b448:	1cbb      	adds	r3, r7, #2
 800b44a:	3201      	adds	r2, #1
 800b44c:	801a      	strh	r2, [r3, #0]

    return offset;
 800b44e:	1cbb      	adds	r3, r7, #2
 800b450:	881b      	ldrh	r3, [r3, #0]
}
 800b452:	0018      	movs	r0, r3
 800b454:	46bd      	mov	sp, r7
 800b456:	b003      	add	sp, #12
 800b458:	bd90      	pop	{r4, r7, pc}

0800b45a <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	0008      	movs	r0, r1
 800b464:	0011      	movs	r1, r2
 800b466:	1cbb      	adds	r3, r7, #2
 800b468:	1c02      	adds	r2, r0, #0
 800b46a:	801a      	strh	r2, [r3, #0]
 800b46c:	003b      	movs	r3, r7
 800b46e:	1c0a      	adds	r2, r1, #0
 800b470:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b472:	003b      	movs	r3, r7
 800b474:	881a      	ldrh	r2, [r3, #0]
 800b476:	1cbb      	adds	r3, r7, #2
 800b478:	8819      	ldrh	r1, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7ff ffad 	bl	800b3dc <sensirion_i2c_add_uint16_t_to_buffer>
 800b482:	0003      	movs	r3, r0
}
 800b484:	0018      	movs	r0, r3
 800b486:	46bd      	mov	sp, r7
 800b488:	b002      	add	sp, #8
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6039      	str	r1, [r7, #0]
 800b494:	0011      	movs	r1, r2
 800b496:	1dfb      	adds	r3, r7, #7
 800b498:	1c02      	adds	r2, r0, #0
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	1d3b      	adds	r3, r7, #4
 800b49e:	1c0a      	adds	r2, r1, #0
 800b4a0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b4a2:	1d3b      	adds	r3, r7, #4
 800b4a4:	881a      	ldrh	r2, [r3, #0]
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	1dfb      	adds	r3, r7, #7
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	f7fe fa01 	bl	80098b4 <sensirion_i2c_hal_write>
 800b4b2:	0003      	movs	r3, r0
}
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	b002      	add	sp, #8
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b4bc:	b5b0      	push	{r4, r5, r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6039      	str	r1, [r7, #0]
 800b4c4:	0011      	movs	r1, r2
 800b4c6:	1dfb      	adds	r3, r7, #7
 800b4c8:	1c02      	adds	r2, r0, #0
 800b4ca:	701a      	strb	r2, [r3, #0]
 800b4cc:	1d3b      	adds	r3, r7, #4
 800b4ce:	1c0a      	adds	r2, r1, #0
 800b4d0:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	085b      	lsrs	r3, r3, #1
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	220a      	movs	r2, #10
 800b4dc:	18ba      	adds	r2, r7, r2
 800b4de:	1c19      	adds	r1, r3, #0
 800b4e0:	1c0b      	adds	r3, r1, #0
 800b4e2:	18db      	adds	r3, r3, r3
 800b4e4:	185b      	adds	r3, r3, r1
 800b4e6:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b4e8:	1d3b      	adds	r3, r7, #4
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b4f6:	2304      	movs	r3, #4
 800b4f8:	e06b      	b.n	800b5d2 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b4fa:	230a      	movs	r3, #10
 800b4fc:	18fb      	adds	r3, r7, r3
 800b4fe:	881a      	ldrh	r2, [r3, #0]
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	1dfb      	adds	r3, r7, #7
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	0018      	movs	r0, r3
 800b508:	f7fe f9b4 	bl	8009874 <sensirion_i2c_hal_read>
 800b50c:	0003      	movs	r3, r0
 800b50e:	001a      	movs	r2, r3
 800b510:	2108      	movs	r1, #8
 800b512:	187b      	adds	r3, r7, r1
 800b514:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b516:	000a      	movs	r2, r1
 800b518:	18bb      	adds	r3, r7, r2
 800b51a:	2100      	movs	r1, #0
 800b51c:	5e5b      	ldrsh	r3, [r3, r1]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b522:	18bb      	adds	r3, r7, r2
 800b524:	2200      	movs	r2, #0
 800b526:	5e9b      	ldrsh	r3, [r3, r2]
 800b528:	e053      	b.n	800b5d2 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b52a:	230e      	movs	r3, #14
 800b52c:	18fb      	adds	r3, r7, r3
 800b52e:	2200      	movs	r2, #0
 800b530:	801a      	strh	r2, [r3, #0]
 800b532:	230c      	movs	r3, #12
 800b534:	18fb      	adds	r3, r7, r3
 800b536:	2200      	movs	r2, #0
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	e041      	b.n	800b5c0 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b53c:	210e      	movs	r1, #14
 800b53e:	187b      	adds	r3, r7, r1
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b546:	187b      	adds	r3, r7, r1
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	3302      	adds	r3, #2
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	001a      	movs	r2, r3
 800b554:	2102      	movs	r1, #2
 800b556:	f7ff fef5 	bl	800b344 <sensirion_i2c_check_crc>
 800b55a:	0003      	movs	r3, r0
 800b55c:	001a      	movs	r2, r3
 800b55e:	2108      	movs	r1, #8
 800b560:	187b      	adds	r3, r7, r1
 800b562:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b564:	000a      	movs	r2, r1
 800b566:	18bb      	adds	r3, r7, r2
 800b568:	2100      	movs	r1, #0
 800b56a:	5e5b      	ldrsh	r3, [r3, r1]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d003      	beq.n	800b578 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b570:	18bb      	adds	r3, r7, r2
 800b572:	2200      	movs	r2, #0
 800b574:	5e9b      	ldrsh	r3, [r3, r2]
 800b576:	e02c      	b.n	800b5d2 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b578:	240e      	movs	r4, #14
 800b57a:	193b      	adds	r3, r7, r4
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	18d2      	adds	r2, r2, r3
 800b582:	250c      	movs	r5, #12
 800b584:	197b      	adds	r3, r7, r5
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	1979      	adds	r1, r7, r5
 800b58a:	1c58      	adds	r0, r3, #1
 800b58c:	8008      	strh	r0, [r1, #0]
 800b58e:	0019      	movs	r1, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	185b      	adds	r3, r3, r1
 800b594:	7812      	ldrb	r2, [r2, #0]
 800b596:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b598:	193b      	adds	r3, r7, r4
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	3301      	adds	r3, #1
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	18d2      	adds	r2, r2, r3
 800b5a2:	197b      	adds	r3, r7, r5
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	1979      	adds	r1, r7, r5
 800b5a8:	1c58      	adds	r0, r3, #1
 800b5aa:	8008      	strh	r0, [r1, #0]
 800b5ac:	0019      	movs	r1, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	185b      	adds	r3, r3, r1
 800b5b2:	7812      	ldrb	r2, [r2, #0]
 800b5b4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b5b6:	193b      	adds	r3, r7, r4
 800b5b8:	193a      	adds	r2, r7, r4
 800b5ba:	8812      	ldrh	r2, [r2, #0]
 800b5bc:	3203      	adds	r2, #3
 800b5be:	801a      	strh	r2, [r3, #0]
 800b5c0:	230e      	movs	r3, #14
 800b5c2:	18fa      	adds	r2, r7, r3
 800b5c4:	230a      	movs	r3, #10
 800b5c6:	18fb      	adds	r3, r7, r3
 800b5c8:	8812      	ldrh	r2, [r2, #0]
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d3b5      	bcc.n	800b53c <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	b004      	add	sp, #16
 800b5d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b5dc <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6039      	str	r1, [r7, #0]
 800b5e4:	0011      	movs	r1, r2
 800b5e6:	1dfb      	adds	r3, r7, #7
 800b5e8:	1c02      	adds	r2, r0, #0
 800b5ea:	701a      	strb	r2, [r3, #0]
 800b5ec:	1dbb      	adds	r3, r7, #6
 800b5ee:	1c0a      	adds	r2, r1, #0
 800b5f0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b5f2:	4b08      	ldr	r3, [pc, #32]	@ (800b614 <ReadRegister+0x38>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d008      	beq.n	800b60c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b5fa:	4b06      	ldr	r3, [pc, #24]	@ (800b614 <ReadRegister+0x38>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	1dba      	adds	r2, r7, #6
 800b600:	7814      	ldrb	r4, [r2, #0]
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	1dfa      	adds	r2, r7, #7
 800b606:	7810      	ldrb	r0, [r2, #0]
 800b608:	0022      	movs	r2, r4
 800b60a:	4798      	blx	r3
  }
}
 800b60c:	46c0      	nop			@ (mov r8, r8)
 800b60e:	46bd      	mov	sp, r7
 800b610:	b003      	add	sp, #12
 800b612:	bd90      	pop	{r4, r7, pc}
 800b614:	20001084 	.word	0x20001084

0800b618 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6039      	str	r1, [r7, #0]
 800b620:	0011      	movs	r1, r2
 800b622:	1dfb      	adds	r3, r7, #7
 800b624:	1c02      	adds	r2, r0, #0
 800b626:	701a      	strb	r2, [r3, #0]
 800b628:	1dbb      	adds	r3, r7, #6
 800b62a:	1c0a      	adds	r2, r1, #0
 800b62c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b62e:	4b08      	ldr	r3, [pc, #32]	@ (800b650 <WriteRegister+0x38>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d008      	beq.n	800b648 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b636:	4b06      	ldr	r3, [pc, #24]	@ (800b650 <WriteRegister+0x38>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	1dba      	adds	r2, r7, #6
 800b63c:	7814      	ldrb	r4, [r2, #0]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	1dfa      	adds	r2, r7, #7
 800b642:	7810      	ldrb	r0, [r2, #0]
 800b644:	0022      	movs	r2, r4
 800b646:	4798      	blx	r3
  }
}
 800b648:	46c0      	nop			@ (mov r8, r8)
 800b64a:	46bd      	mov	sp, r7
 800b64c:	b003      	add	sp, #12
 800b64e:	bd90      	pop	{r4, r7, pc}
 800b650:	20001088 	.word	0x20001088

0800b654 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b65c:	f003 fb08 	bl	800ec70 <HAL_GetTick>
 800b660:	0002      	movs	r2, r0
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	18d2      	adds	r2, r2, r3
 800b666:	4b03      	ldr	r3, [pc, #12]	@ (800b674 <setSGP40TimeStamp+0x20>)
 800b668:	601a      	str	r2, [r3, #0]
}
 800b66a:	46c0      	nop			@ (mov r8, r8)
 800b66c:	46bd      	mov	sp, r7
 800b66e:	b002      	add	sp, #8
 800b670:	bd80      	pop	{r7, pc}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	20001098 	.word	0x20001098

0800b678 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b67c:	4b02      	ldr	r3, [pc, #8]	@ (800b688 <ResetSGP40samplecounter+0x10>)
 800b67e:	2200      	movs	r2, #0
 800b680:	701a      	strb	r2, [r3, #0]
}
 800b682:	46c0      	nop			@ (mov r8, r8)
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20001096 	.word	0x20001096

0800b68c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b696:	4b07      	ldr	r3, [pc, #28]	@ (800b6b4 <SGP_Init+0x28>)
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b69c:	4b06      	ldr	r3, [pc, #24]	@ (800b6b8 <SGP_Init+0x2c>)
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b6a2:	4b06      	ldr	r3, [pc, #24]	@ (800b6bc <SGP_Init+0x30>)
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	f7fe ff70 	bl	800a58c <GasIndexAlgorithm_init>
}
 800b6ac:	46c0      	nop			@ (mov r8, r8)
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	b002      	add	sp, #8
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20001084 	.word	0x20001084
 800b6b8:	20001088 	.word	0x20001088
 800b6bc:	200010a0 	.word	0x200010a0

0800b6c0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b6c4:	4b07      	ldr	r3, [pc, #28]	@ (800b6e4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b6ce:	22fe      	movs	r2, #254	@ 0xfe
 800b6d0:	0592      	lsls	r2, r2, #22
 800b6d2:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b6d4:	e002      	b.n	800b6dc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b6d6:	4b04      	ldr	r3, [pc, #16]	@ (800b6e8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b6d8:	4a04      	ldr	r2, [pc, #16]	@ (800b6ec <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b6da:	605a      	str	r2, [r3, #4]
}
 800b6dc:	46c0      	nop			@ (mov r8, r8)
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	46c0      	nop			@ (mov r8, r8)
 800b6e4:	20001ff1 	.word	0x20001ff1
 800b6e8:	200010a0 	.word	0x200010a0
 800b6ec:	44610000 	.word	0x44610000

0800b6f0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b6f4:	4b13      	ldr	r3, [pc, #76]	@ (800b744 <SGP_StartMeasurement+0x54>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00d      	beq.n	800b718 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b6fc:	4b12      	ldr	r3, [pc, #72]	@ (800b748 <SGP_StartMeasurement+0x58>)
 800b6fe:	2208      	movs	r2, #8
 800b700:	0019      	movs	r1, r3
 800b702:	2059      	movs	r0, #89	@ 0x59
 800b704:	f7ff ff88 	bl	800b618 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b708:	f003 fab2 	bl	800ec70 <HAL_GetTick>
 800b70c:	0003      	movs	r3, r0
 800b70e:	331e      	adds	r3, #30
 800b710:	001a      	movs	r2, r3
 800b712:	4b0e      	ldr	r3, [pc, #56]	@ (800b74c <SGP_StartMeasurement+0x5c>)
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e00c      	b.n	800b732 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b718:	4b0d      	ldr	r3, [pc, #52]	@ (800b750 <SGP_StartMeasurement+0x60>)
 800b71a:	2208      	movs	r2, #8
 800b71c:	0019      	movs	r1, r3
 800b71e:	2059      	movs	r0, #89	@ 0x59
 800b720:	f7ff ff7a 	bl	800b618 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b724:	f003 faa4 	bl	800ec70 <HAL_GetTick>
 800b728:	0003      	movs	r3, r0
 800b72a:	33aa      	adds	r3, #170	@ 0xaa
 800b72c:	001a      	movs	r2, r3
 800b72e:	4b09      	ldr	r3, [pc, #36]	@ (800b754 <SGP_StartMeasurement+0x64>)
 800b730:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b732:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <SGP_StartMeasurement+0x68>)
 800b734:	2200      	movs	r2, #0
 800b736:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b738:	4b08      	ldr	r3, [pc, #32]	@ (800b75c <SGP_StartMeasurement+0x6c>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
}
 800b73e:	46c0      	nop			@ (mov r8, r8)
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20001148 	.word	0x20001148
 800b748:	20000094 	.word	0x20000094
 800b74c:	200000a8 	.word	0x200000a8
 800b750:	2000008c 	.word	0x2000008c
 800b754:	200000a0 	.word	0x200000a0
 800b758:	2000109c 	.word	0x2000109c
 800b75c:	2000109d 	.word	0x2000109d

0800b760 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b764:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <SGP_HeatedUp+0x18>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	0018      	movs	r0, r3
 800b76a:	f002 fde5 	bl	800e338 <TimestampIsReached>
 800b76e:	0003      	movs	r3, r0
}
 800b770:	0018      	movs	r0, r3
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	46c0      	nop			@ (mov r8, r8)
 800b778:	200000a0 	.word	0x200000a0

0800b77c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b780:	4b04      	ldr	r3, [pc, #16]	@ (800b794 <SGP_MeasurementReady+0x18>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	0018      	movs	r0, r3
 800b786:	f002 fdd7 	bl	800e338 <TimestampIsReached>
 800b78a:	0003      	movs	r3, r0
}
 800b78c:	0018      	movs	r0, r3
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	46c0      	nop			@ (mov r8, r8)
 800b794:	200000a8 	.word	0x200000a8

0800b798 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b79c:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <SGP_MeasurementDone+0x18>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	f002 fdc9 	bl	800e338 <TimestampIsReached>
 800b7a6:	0003      	movs	r3, r0
}
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	46c0      	nop			@ (mov r8, r8)
 800b7b0:	200000a4 	.word	0x200000a4

0800b7b4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b7b8:	4b04      	ldr	r3, [pc, #16]	@ (800b7cc <SGP_TurnHeaterOff+0x18>)
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	0019      	movs	r1, r3
 800b7be:	2059      	movs	r0, #89	@ 0x59
 800b7c0:	f7ff ff2a 	bl	800b618 <WriteRegister>
}
 800b7c4:	46c0      	nop			@ (mov r8, r8)
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	20000084 	.word	0x20000084

0800b7d0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b7d0:	b5b0      	push	{r4, r5, r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b7d8:	f7ff ffc2 	bl	800b760 <SGP_HeatedUp>
 800b7dc:	1e03      	subs	r3, r0, #0
 800b7de:	d032      	beq.n	800b846 <SGP_GetMeasurementValues+0x76>
 800b7e0:	4bd4      	ldr	r3, [pc, #848]	@ (800bb34 <SGP_GetMeasurementValues+0x364>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	4053      	eors	r3, r2
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d02b      	beq.n	800b846 <SGP_GetMeasurementValues+0x76>
 800b7ee:	4bd2      	ldr	r3, [pc, #840]	@ (800bb38 <SGP_GetMeasurementValues+0x368>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	4053      	eors	r3, r2
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d024      	beq.n	800b846 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b7fc:	4bcd      	ldr	r3, [pc, #820]	@ (800bb34 <SGP_GetMeasurementValues+0x364>)
 800b7fe:	2201      	movs	r2, #1
 800b800:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b802:	4bce      	ldr	r3, [pc, #824]	@ (800bb3c <SGP_GetMeasurementValues+0x36c>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00d      	beq.n	800b826 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b80a:	4bcd      	ldr	r3, [pc, #820]	@ (800bb40 <SGP_GetMeasurementValues+0x370>)
 800b80c:	2208      	movs	r2, #8
 800b80e:	0019      	movs	r1, r3
 800b810:	2059      	movs	r0, #89	@ 0x59
 800b812:	f7ff ff01 	bl	800b618 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b816:	f003 fa2b 	bl	800ec70 <HAL_GetTick>
 800b81a:	0003      	movs	r3, r0
 800b81c:	331e      	adds	r3, #30
 800b81e:	001a      	movs	r2, r3
 800b820:	4bc8      	ldr	r3, [pc, #800]	@ (800bb44 <SGP_GetMeasurementValues+0x374>)
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	e00c      	b.n	800b840 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b826:	4bc8      	ldr	r3, [pc, #800]	@ (800bb48 <SGP_GetMeasurementValues+0x378>)
 800b828:	2208      	movs	r2, #8
 800b82a:	0019      	movs	r1, r3
 800b82c:	2059      	movs	r0, #89	@ 0x59
 800b82e:	f7ff fef3 	bl	800b618 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b832:	f003 fa1d 	bl	800ec70 <HAL_GetTick>
 800b836:	0003      	movs	r3, r0
 800b838:	331e      	adds	r3, #30
 800b83a:	001a      	movs	r2, r3
 800b83c:	4bc1      	ldr	r3, [pc, #772]	@ (800bb44 <SGP_GetMeasurementValues+0x374>)
 800b83e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b840:	4bbd      	ldr	r3, [pc, #756]	@ (800bb38 <SGP_GetMeasurementValues+0x368>)
 800b842:	2201      	movs	r2, #1
 800b844:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b846:	4bbb      	ldr	r3, [pc, #748]	@ (800bb34 <SGP_GetMeasurementValues+0x364>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d100      	bne.n	800b850 <SGP_GetMeasurementValues+0x80>
 800b84e:	e1a9      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
 800b850:	f7ff ff94 	bl	800b77c <SGP_MeasurementReady>
 800b854:	1e03      	subs	r3, r0, #0
 800b856:	d100      	bne.n	800b85a <SGP_GetMeasurementValues+0x8a>
 800b858:	e1a4      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
 800b85a:	4bbc      	ldr	r3, [pc, #752]	@ (800bb4c <SGP_GetMeasurementValues+0x37c>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2201      	movs	r2, #1
 800b860:	4053      	eors	r3, r2
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b00      	cmp	r3, #0
 800b866:	d100      	bne.n	800b86a <SGP_GetMeasurementValues+0x9a>
 800b868:	e19c      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b86a:	4bb8      	ldr	r3, [pc, #736]	@ (800bb4c <SGP_GetMeasurementValues+0x37c>)
 800b86c:	2201      	movs	r2, #1
 800b86e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b870:	4bb7      	ldr	r3, [pc, #732]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b872:	2203      	movs	r2, #3
 800b874:	0019      	movs	r1, r3
 800b876:	2059      	movs	r0, #89	@ 0x59
 800b878:	f7ff feb0 	bl	800b5dc <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b87c:	4bb4      	ldr	r3, [pc, #720]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b87e:	2203      	movs	r2, #3
 800b880:	2103      	movs	r1, #3
 800b882:	0018      	movs	r0, r3
 800b884:	f000 f9f4 	bl	800bc70 <CheckCRC>
 800b888:	0003      	movs	r3, r0
 800b88a:	001a      	movs	r2, r3
 800b88c:	2301      	movs	r3, #1
 800b88e:	4053      	eors	r3, r2
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d02a      	beq.n	800b8ec <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b896:	4aaf      	ldr	r2, [pc, #700]	@ (800bb54 <SGP_GetMeasurementValues+0x384>)
 800b898:	4baf      	ldr	r3, [pc, #700]	@ (800bb58 <SGP_GetMeasurementValues+0x388>)
 800b89a:	0019      	movs	r1, r3
 800b89c:	2001      	movs	r0, #1
 800b89e:	f002 fda1 	bl	800e3e4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b8a2:	4aae      	ldr	r2, [pc, #696]	@ (800bb5c <SGP_GetMeasurementValues+0x38c>)
 800b8a4:	4bae      	ldr	r3, [pc, #696]	@ (800bb60 <SGP_GetMeasurementValues+0x390>)
 800b8a6:	0019      	movs	r1, r3
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f002 fd9b 	bl	800e3e4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b8ae:	230f      	movs	r3, #15
 800b8b0:	18fb      	adds	r3, r7, r3
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	701a      	strb	r2, [r3, #0]
 800b8b6:	e012      	b.n	800b8de <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b8b8:	240f      	movs	r4, #15
 800b8ba:	193b      	adds	r3, r7, r4
 800b8bc:	7818      	ldrb	r0, [r3, #0]
 800b8be:	193b      	adds	r3, r7, r4
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	4aa3      	ldr	r2, [pc, #652]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b8c4:	5cd3      	ldrb	r3, [r2, r3]
 800b8c6:	4aa7      	ldr	r2, [pc, #668]	@ (800bb64 <SGP_GetMeasurementValues+0x394>)
 800b8c8:	49a7      	ldr	r1, [pc, #668]	@ (800bb68 <SGP_GetMeasurementValues+0x398>)
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	0003      	movs	r3, r0
 800b8ce:	2003      	movs	r0, #3
 800b8d0:	f002 fd88 	bl	800e3e4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b8d4:	193b      	adds	r3, r7, r4
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	193b      	adds	r3, r7, r4
 800b8da:	3201      	adds	r2, #1
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	230f      	movs	r3, #15
 800b8e0:	18fb      	adds	r3, r7, r3
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d9e7      	bls.n	800b8b8 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e173      	b.n	800bbd4 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b8ec:	f003 f9c0 	bl	800ec70 <HAL_GetTick>
 800b8f0:	0003      	movs	r3, r0
 800b8f2:	22fa      	movs	r2, #250	@ 0xfa
 800b8f4:	0092      	lsls	r2, r2, #2
 800b8f6:	189a      	adds	r2, r3, r2
 800b8f8:	4b9c      	ldr	r3, [pc, #624]	@ (800bb6c <SGP_GetMeasurementValues+0x39c>)
 800b8fa:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b8fc:	f7ff ff5a 	bl	800b7b4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b900:	4b9b      	ldr	r3, [pc, #620]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	3301      	adds	r3, #1
 800b906:	b2da      	uxtb	r2, r3
 800b908:	4b99      	ldr	r3, [pc, #612]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800b90a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b90c:	4b98      	ldr	r3, [pc, #608]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800b90e:	781a      	ldrb	r2, [r3, #0]
 800b910:	4b98      	ldr	r3, [pc, #608]	@ (800bb74 <SGP_GetMeasurementValues+0x3a4>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d200      	bcs.n	800b91a <SGP_GetMeasurementValues+0x14a>
 800b918:	e144      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b91a:	4b8d      	ldr	r3, [pc, #564]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	021b      	lsls	r3, r3, #8
 800b920:	b21a      	sxth	r2, r3
 800b922:	4b8b      	ldr	r3, [pc, #556]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	b21b      	sxth	r3, r3
 800b928:	4313      	orrs	r3, r2
 800b92a:	b21a      	sxth	r2, r3
 800b92c:	240c      	movs	r4, #12
 800b92e:	193b      	adds	r3, r7, r4
 800b930:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b936:	193b      	adds	r3, r7, r4
 800b938:	8819      	ldrh	r1, [r3, #0]
 800b93a:	2308      	movs	r3, #8
 800b93c:	18fa      	adds	r2, r7, r3
 800b93e:	4b8e      	ldr	r3, [pc, #568]	@ (800bb78 <SGP_GetMeasurementValues+0x3a8>)
 800b940:	0018      	movs	r0, r3
 800b942:	f7fe fe87 	bl	800a654 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b946:	4b8d      	ldr	r3, [pc, #564]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	3301      	adds	r3, #1
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b8b      	ldr	r3, [pc, #556]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b950:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b952:	4b8a      	ldr	r3, [pc, #552]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d10d      	bne.n	800b976 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b95a:	193b      	adds	r3, r7, r4
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	4a88      	ldr	r2, [pc, #544]	@ (800bb80 <SGP_GetMeasurementValues+0x3b0>)
 800b960:	4981      	ldr	r1, [pc, #516]	@ (800bb68 <SGP_GetMeasurementValues+0x398>)
 800b962:	2003      	movs	r0, #3
 800b964:	f002 fd3e 	bl	800e3e4 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4a86      	ldr	r2, [pc, #536]	@ (800bb84 <SGP_GetMeasurementValues+0x3b4>)
 800b96c:	497e      	ldr	r1, [pc, #504]	@ (800bb68 <SGP_GetMeasurementValues+0x398>)
 800b96e:	2003      	movs	r0, #3
 800b970:	f002 fd38 	bl	800e3e4 <CreateLine>
 800b974:	e006      	b.n	800b984 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b976:	4b81      	ldr	r3, [pc, #516]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	2b0b      	cmp	r3, #11
 800b97c:	d102      	bne.n	800b984 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b97e:	4b7f      	ldr	r3, [pc, #508]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	dd5a      	ble.n	800ba48 <SGP_GetMeasurementValues+0x278>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b64      	cmp	r3, #100	@ 0x64
 800b998:	dc56      	bgt.n	800ba48 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f7f7 fd0e 	bl	80033c0 <__aeabi_i2d>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4b78      	ldr	r3, [pc, #480]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800b9a8:	f7f6 fa04 	bl	8001db4 <__aeabi_ddiv>
 800b9ac:	0002      	movs	r2, r0
 800b9ae:	000b      	movs	r3, r1
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	4976      	ldr	r1, [pc, #472]	@ (800bb8c <SGP_GetMeasurementValues+0x3bc>)
 800b9b4:	f7f7 f90a 	bl	8002bcc <__aeabi_dsub>
 800b9b8:	0002      	movs	r2, r0
 800b9ba:	000b      	movs	r3, r1
 800b9bc:	0014      	movs	r4, r2
 800b9be:	001d      	movs	r5, r3
 800b9c0:	4b73      	ldr	r3, [pc, #460]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	0018      	movs	r0, r3
 800b9c6:	f7f7 fcfb 	bl	80033c0 <__aeabi_i2d>
 800b9ca:	0002      	movs	r2, r0
 800b9cc:	000b      	movs	r3, r1
 800b9ce:	0020      	movs	r0, r4
 800b9d0:	0029      	movs	r1, r5
 800b9d2:	f7f6 fe33 	bl	800263c <__aeabi_dmul>
 800b9d6:	0002      	movs	r2, r0
 800b9d8:	000b      	movs	r3, r1
 800b9da:	0010      	movs	r0, r2
 800b9dc:	0019      	movs	r1, r3
 800b9de:	f7f4 fe35 	bl	800064c <__aeabi_d2uiz>
 800b9e2:	0003      	movs	r3, r0
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	4b6b      	ldr	r3, [pc, #428]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800b9e8:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	0018      	movs	r0, r3
 800b9f0:	f7f7 fce6 	bl	80033c0 <__aeabi_i2d>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4b64      	ldr	r3, [pc, #400]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800b9f8:	f7f6 f9dc 	bl	8001db4 <__aeabi_ddiv>
 800b9fc:	0002      	movs	r2, r0
 800b9fe:	000b      	movs	r3, r1
 800ba00:	0014      	movs	r4, r2
 800ba02:	001d      	movs	r5, r3
 800ba04:	4b62      	ldr	r3, [pc, #392]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	0018      	movs	r0, r3
 800ba0a:	f7f7 fcd9 	bl	80033c0 <__aeabi_i2d>
 800ba0e:	0002      	movs	r2, r0
 800ba10:	000b      	movs	r3, r1
 800ba12:	0020      	movs	r0, r4
 800ba14:	0029      	movs	r1, r5
 800ba16:	f7f6 fe11 	bl	800263c <__aeabi_dmul>
 800ba1a:	0002      	movs	r2, r0
 800ba1c:	000b      	movs	r3, r1
 800ba1e:	0010      	movs	r0, r2
 800ba20:	0019      	movs	r1, r3
 800ba22:	f7f4 fe13 	bl	800064c <__aeabi_d2uiz>
 800ba26:	0003      	movs	r3, r0
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	4b5b      	ldr	r3, [pc, #364]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800ba2c:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800ba2e:	4b58      	ldr	r3, [pc, #352]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800ba30:	881a      	ldrh	r2, [r3, #0]
 800ba32:	4b5a      	ldr	r3, [pc, #360]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800ba34:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800ba36:	4b59      	ldr	r3, [pc, #356]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800ba38:	8818      	ldrh	r0, [r3, #0]
 800ba3a:	4b56      	ldr	r3, [pc, #344]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800ba3c:	8819      	ldrh	r1, [r3, #0]
 800ba3e:	4b56      	ldr	r3, [pc, #344]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	001a      	movs	r2, r3
 800ba44:	f001 fc24 	bl	800d290 <SetVocLED>
      }
      if(*vocIndex > 100){
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b64      	cmp	r3, #100	@ 0x64
 800ba4e:	dd66      	ble.n	800bb1e <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	0018      	movs	r0, r3
 800ba56:	f7f7 fcb3 	bl	80033c0 <__aeabi_i2d>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	4b4a      	ldr	r3, [pc, #296]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800ba5e:	f7f7 f8b5 	bl	8002bcc <__aeabi_dsub>
 800ba62:	0002      	movs	r2, r0
 800ba64:	000b      	movs	r3, r1
 800ba66:	0010      	movs	r0, r2
 800ba68:	0019      	movs	r1, r3
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4b4c      	ldr	r3, [pc, #304]	@ (800bba0 <SGP_GetMeasurementValues+0x3d0>)
 800ba6e:	f7f6 f9a1 	bl	8001db4 <__aeabi_ddiv>
 800ba72:	0002      	movs	r2, r0
 800ba74:	000b      	movs	r3, r1
 800ba76:	0014      	movs	r4, r2
 800ba78:	001d      	movs	r5, r3
 800ba7a:	4b45      	ldr	r3, [pc, #276]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	0018      	movs	r0, r3
 800ba80:	f7f7 fc9e 	bl	80033c0 <__aeabi_i2d>
 800ba84:	0002      	movs	r2, r0
 800ba86:	000b      	movs	r3, r1
 800ba88:	0020      	movs	r0, r4
 800ba8a:	0029      	movs	r1, r5
 800ba8c:	f7f6 fdd6 	bl	800263c <__aeabi_dmul>
 800ba90:	0002      	movs	r2, r0
 800ba92:	000b      	movs	r3, r1
 800ba94:	0010      	movs	r0, r2
 800ba96:	0019      	movs	r1, r3
 800ba98:	f7f4 fdd8 	bl	800064c <__aeabi_d2uiz>
 800ba9c:	0003      	movs	r3, r0
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	4b3c      	ldr	r3, [pc, #240]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800baa2:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	0018      	movs	r0, r3
 800baaa:	f7f7 fc89 	bl	80033c0 <__aeabi_i2d>
 800baae:	2200      	movs	r2, #0
 800bab0:	4b35      	ldr	r3, [pc, #212]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800bab2:	f7f7 f88b 	bl	8002bcc <__aeabi_dsub>
 800bab6:	0002      	movs	r2, r0
 800bab8:	000b      	movs	r3, r1
 800baba:	0010      	movs	r0, r2
 800babc:	0019      	movs	r1, r3
 800babe:	2200      	movs	r2, #0
 800bac0:	4b37      	ldr	r3, [pc, #220]	@ (800bba0 <SGP_GetMeasurementValues+0x3d0>)
 800bac2:	f7f6 f977 	bl	8001db4 <__aeabi_ddiv>
 800bac6:	0002      	movs	r2, r0
 800bac8:	000b      	movs	r3, r1
 800baca:	2000      	movs	r0, #0
 800bacc:	492f      	ldr	r1, [pc, #188]	@ (800bb8c <SGP_GetMeasurementValues+0x3bc>)
 800bace:	f7f7 f87d 	bl	8002bcc <__aeabi_dsub>
 800bad2:	0002      	movs	r2, r0
 800bad4:	000b      	movs	r3, r1
 800bad6:	0014      	movs	r4, r2
 800bad8:	001d      	movs	r5, r3
 800bada:	4b2d      	ldr	r3, [pc, #180]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	0018      	movs	r0, r3
 800bae0:	f7f7 fc6e 	bl	80033c0 <__aeabi_i2d>
 800bae4:	0002      	movs	r2, r0
 800bae6:	000b      	movs	r3, r1
 800bae8:	0020      	movs	r0, r4
 800baea:	0029      	movs	r1, r5
 800baec:	f7f6 fda6 	bl	800263c <__aeabi_dmul>
 800baf0:	0002      	movs	r2, r0
 800baf2:	000b      	movs	r3, r1
 800baf4:	0010      	movs	r0, r2
 800baf6:	0019      	movs	r1, r3
 800baf8:	f7f4 fda8 	bl	800064c <__aeabi_d2uiz>
 800bafc:	0003      	movs	r3, r0
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	4b26      	ldr	r3, [pc, #152]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800bb02:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800bb04:	4b22      	ldr	r3, [pc, #136]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800bb06:	881a      	ldrh	r2, [r3, #0]
 800bb08:	4b23      	ldr	r3, [pc, #140]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800bb0a:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800bb0c:	4b23      	ldr	r3, [pc, #140]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800bb0e:	8818      	ldrh	r0, [r3, #0]
 800bb10:	4b20      	ldr	r3, [pc, #128]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800bb12:	8819      	ldrh	r1, [r3, #0]
 800bb14:	4b20      	ldr	r3, [pc, #128]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	001a      	movs	r2, r3
 800bb1a:	f001 fbb9 	bl	800d290 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800bb1e:	4b14      	ldr	r3, [pc, #80]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800bb24:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <SGP_GetMeasurementValues+0x36c>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bb2a:	4b03      	ldr	r3, [pc, #12]	@ (800bb38 <SGP_GetMeasurementValues+0x368>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e04f      	b.n	800bbd4 <SGP_GetMeasurementValues+0x404>
 800bb34:	2000109c 	.word	0x2000109c
 800bb38:	20001149 	.word	0x20001149
 800bb3c:	20001148 	.word	0x20001148
 800bb40:	20000094 	.word	0x20000094
 800bb44:	200000a8 	.word	0x200000a8
 800bb48:	2000008c 	.word	0x2000008c
 800bb4c:	2000109d 	.word	0x2000109d
 800bb50:	2000108c 	.word	0x2000108c
 800bb54:	08024b58 	.word	0x08024b58
 800bb58:	08024b80 	.word	0x08024b80
 800bb5c:	08024b84 	.word	0x08024b84
 800bb60:	08024ba4 	.word	0x08024ba4
 800bb64:	08024ba8 	.word	0x08024ba8
 800bb68:	08024bc8 	.word	0x08024bc8
 800bb6c:	200000a4 	.word	0x200000a4
 800bb70:	20001095 	.word	0x20001095
 800bb74:	2000009e 	.word	0x2000009e
 800bb78:	200010a0 	.word	0x200010a0
 800bb7c:	20001096 	.word	0x20001096
 800bb80:	08024bcc 	.word	0x08024bcc
 800bb84:	08024be8 	.word	0x08024be8
 800bb88:	40590000 	.word	0x40590000
 800bb8c:	3ff00000 	.word	0x3ff00000
 800bb90:	200000ac 	.word	0x200000ac
 800bb94:	20001154 	.word	0x20001154
 800bb98:	20001152 	.word	0x20001152
 800bb9c:	20001150 	.word	0x20001150
 800bba0:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bba4:	f7ff fdf8 	bl	800b798 <SGP_MeasurementDone>
 800bba8:	1e03      	subs	r3, r0, #0
 800bbaa:	d012      	beq.n	800bbd2 <SGP_GetMeasurementValues+0x402>
 800bbac:	4b0b      	ldr	r3, [pc, #44]	@ (800bbdc <SGP_GetMeasurementValues+0x40c>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00e      	beq.n	800bbd2 <SGP_GetMeasurementValues+0x402>
 800bbb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <SGP_GetMeasurementValues+0x410>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00a      	beq.n	800bbd2 <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bbbc:	4a09      	ldr	r2, [pc, #36]	@ (800bbe4 <SGP_GetMeasurementValues+0x414>)
 800bbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <SGP_GetMeasurementValues+0x418>)
 800bbc0:	0019      	movs	r1, r3
 800bbc2:	2003      	movs	r0, #3
 800bbc4:	f002 fc0e 	bl	800e3e4 <CreateLine>
    SGP_StartMeasurement();
 800bbc8:	f7ff fd92 	bl	800b6f0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bbcc:	4b07      	ldr	r3, [pc, #28]	@ (800bbec <SGP_GetMeasurementValues+0x41c>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	b004      	add	sp, #16
 800bbda:	bdb0      	pop	{r4, r5, r7, pc}
 800bbdc:	2000109c 	.word	0x2000109c
 800bbe0:	2000109d 	.word	0x2000109d
 800bbe4:	08024c04 	.word	0x08024c04
 800bbe8:	08024bc8 	.word	0x08024bc8
 800bbec:	20001149 	.word	0x20001149

0800bbf0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bbf6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc60 <SGP_DeviceConnected+0x70>)
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	0019      	movs	r1, r3
 800bbfc:	2059      	movs	r0, #89	@ 0x59
 800bbfe:	f7ff fd0b 	bl	800b618 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc02:	2001      	movs	r0, #1
 800bc04:	f003 f83e 	bl	800ec84 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc08:	4b16      	ldr	r3, [pc, #88]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc0a:	2209      	movs	r2, #9
 800bc0c:	0019      	movs	r1, r3
 800bc0e:	2059      	movs	r0, #89	@ 0x59
 800bc10:	f7ff fce4 	bl	800b5dc <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc14:	1dfb      	adds	r3, r7, #7
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	e011      	b.n	800bc40 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc1c:	1dfb      	adds	r3, r7, #7
 800bc1e:	7818      	ldrb	r0, [r3, #0]
 800bc20:	1dfb      	adds	r3, r7, #7
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	4a0f      	ldr	r2, [pc, #60]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc26:	5cd3      	ldrb	r3, [r2, r3]
 800bc28:	4a0f      	ldr	r2, [pc, #60]	@ (800bc68 <SGP_DeviceConnected+0x78>)
 800bc2a:	4910      	ldr	r1, [pc, #64]	@ (800bc6c <SGP_DeviceConnected+0x7c>)
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	0003      	movs	r3, r0
 800bc30:	2002      	movs	r0, #2
 800bc32:	f002 fbd7 	bl	800e3e4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc36:	1dfb      	adds	r3, r7, #7
 800bc38:	781a      	ldrb	r2, [r3, #0]
 800bc3a:	1dfb      	adds	r3, r7, #7
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	1dfb      	adds	r3, r7, #7
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b08      	cmp	r3, #8
 800bc46:	d9e9      	bls.n	800bc1c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bc48:	4b06      	ldr	r3, [pc, #24]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	2109      	movs	r1, #9
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f000 f80e 	bl	800bc70 <CheckCRC>
 800bc54:	0003      	movs	r3, r0
}
 800bc56:	0018      	movs	r0, r3
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	b002      	add	sp, #8
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	46c0      	nop			@ (mov r8, r8)
 800bc60:	20000088 	.word	0x20000088
 800bc64:	2000108c 	.word	0x2000108c
 800bc68:	08024c24 	.word	0x08024c24
 800bc6c:	08024ba4 	.word	0x08024ba4

0800bc70 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc72:	b08f      	sub	sp, #60	@ 0x3c
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc78:	0008      	movs	r0, r1
 800bc7a:	0011      	movs	r1, r2
 800bc7c:	2323      	movs	r3, #35	@ 0x23
 800bc7e:	18fb      	adds	r3, r7, r3
 800bc80:	1c02      	adds	r2, r0, #0
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	2322      	movs	r3, #34	@ 0x22
 800bc86:	18fb      	adds	r3, r7, r3
 800bc88:	1c0a      	adds	r2, r1, #0
 800bc8a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bc8c:	2317      	movs	r3, #23
 800bc8e:	2220      	movs	r2, #32
 800bc90:	189b      	adds	r3, r3, r2
 800bc92:	19db      	adds	r3, r3, r7
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e09f      	b.n	800bdda <CheckCRC+0x16a>
 800bc9a:	466b      	mov	r3, sp
 800bc9c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bc9e:	2322      	movs	r3, #34	@ 0x22
 800bca0:	18fb      	adds	r3, r7, r3
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	001a      	movs	r2, r3
 800bca6:	3a01      	subs	r2, #1
 800bca8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	2200      	movs	r2, #0
 800bcae:	60fa      	str	r2, [r7, #12]
 800bcb0:	68b8      	ldr	r0, [r7, #8]
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	0002      	movs	r2, r0
 800bcb6:	0f52      	lsrs	r2, r2, #29
 800bcb8:	000c      	movs	r4, r1
 800bcba:	00e4      	lsls	r4, r4, #3
 800bcbc:	61fc      	str	r4, [r7, #28]
 800bcbe:	69fc      	ldr	r4, [r7, #28]
 800bcc0:	4314      	orrs	r4, r2
 800bcc2:	61fc      	str	r4, [r7, #28]
 800bcc4:	0002      	movs	r2, r0
 800bcc6:	00d2      	lsls	r2, r2, #3
 800bcc8:	61ba      	str	r2, [r7, #24]
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	2200      	movs	r2, #0
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	6838      	ldr	r0, [r7, #0]
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	0002      	movs	r2, r0
 800bcd6:	0f52      	lsrs	r2, r2, #29
 800bcd8:	000c      	movs	r4, r1
 800bcda:	00e4      	lsls	r4, r4, #3
 800bcdc:	617c      	str	r4, [r7, #20]
 800bcde:	697c      	ldr	r4, [r7, #20]
 800bce0:	4314      	orrs	r4, r2
 800bce2:	617c      	str	r4, [r7, #20]
 800bce4:	0002      	movs	r2, r0
 800bce6:	00d2      	lsls	r2, r2, #3
 800bce8:	613a      	str	r2, [r7, #16]
 800bcea:	3307      	adds	r3, #7
 800bcec:	08db      	lsrs	r3, r3, #3
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	466a      	mov	r2, sp
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	469d      	mov	sp, r3
 800bcf6:	466b      	mov	r3, sp
 800bcf8:	3300      	adds	r3, #0
 800bcfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bcfc:	2316      	movs	r3, #22
 800bcfe:	2220      	movs	r2, #32
 800bd00:	189b      	adds	r3, r3, r2
 800bd02:	19db      	adds	r3, r3, r7
 800bd04:	2200      	movs	r2, #0
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	e01e      	b.n	800bd48 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd0a:	2317      	movs	r3, #23
 800bd0c:	2220      	movs	r2, #32
 800bd0e:	189b      	adds	r3, r3, r2
 800bd10:	19db      	adds	r3, r3, r7
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	2116      	movs	r1, #22
 800bd16:	2320      	movs	r3, #32
 800bd18:	18cb      	adds	r3, r1, r3
 800bd1a:	19db      	adds	r3, r3, r7
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	18d3      	adds	r3, r2, r3
 800bd20:	001a      	movs	r2, r3
 800bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd24:	189a      	adds	r2, r3, r2
 800bd26:	0008      	movs	r0, r1
 800bd28:	2320      	movs	r3, #32
 800bd2a:	18cb      	adds	r3, r1, r3
 800bd2c:	19db      	adds	r3, r3, r7
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	7811      	ldrb	r1, [r2, #0]
 800bd32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd34:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd36:	2320      	movs	r3, #32
 800bd38:	18c3      	adds	r3, r0, r3
 800bd3a:	19db      	adds	r3, r3, r7
 800bd3c:	781a      	ldrb	r2, [r3, #0]
 800bd3e:	2320      	movs	r3, #32
 800bd40:	18c3      	adds	r3, r0, r3
 800bd42:	19db      	adds	r3, r3, r7
 800bd44:	3201      	adds	r2, #1
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	2316      	movs	r3, #22
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	189b      	adds	r3, r3, r2
 800bd4e:	19da      	adds	r2, r3, r7
 800bd50:	2322      	movs	r3, #34	@ 0x22
 800bd52:	18fb      	adds	r3, r7, r3
 800bd54:	7812      	ldrb	r2, [r2, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d3d6      	bcc.n	800bd0a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bd5c:	2417      	movs	r4, #23
 800bd5e:	2320      	movs	r3, #32
 800bd60:	18e3      	adds	r3, r4, r3
 800bd62:	19db      	adds	r3, r3, r7
 800bd64:	781a      	ldrb	r2, [r3, #0]
 800bd66:	2322      	movs	r3, #34	@ 0x22
 800bd68:	18fb      	adds	r3, r7, r3
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	18d3      	adds	r3, r2, r3
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd72:	18d2      	adds	r2, r2, r3
 800bd74:	250b      	movs	r5, #11
 800bd76:	2320      	movs	r3, #32
 800bd78:	18eb      	adds	r3, r5, r3
 800bd7a:	19db      	adds	r3, r3, r7
 800bd7c:	7812      	ldrb	r2, [r2, #0]
 800bd7e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bd80:	2322      	movs	r3, #34	@ 0x22
 800bd82:	18fb      	adds	r3, r7, r3
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8c:	0011      	movs	r1, r2
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f000 f838 	bl	800be04 <CalculateCRC>
 800bd94:	0003      	movs	r3, r0
 800bd96:	001a      	movs	r2, r3
 800bd98:	2320      	movs	r3, #32
 800bd9a:	18eb      	adds	r3, r5, r3
 800bd9c:	19db      	adds	r3, r3, r7
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00c      	beq.n	800bdbe <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800bda4:	2320      	movs	r3, #32
 800bda6:	18e3      	adds	r3, r4, r3
 800bda8:	19db      	adds	r3, r3, r7
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	3301      	adds	r3, #1
 800bdae:	4a13      	ldr	r2, [pc, #76]	@ (800bdfc <CheckCRC+0x18c>)
 800bdb0:	4913      	ldr	r1, [pc, #76]	@ (800be00 <CheckCRC+0x190>)
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	f002 fb16 	bl	800e3e4 <CreateLine>
      return false;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	46b5      	mov	sp, r6
 800bdbc:	e019      	b.n	800bdf2 <CheckCRC+0x182>
 800bdbe:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bdc0:	2217      	movs	r2, #23
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	18d3      	adds	r3, r2, r3
 800bdc6:	19db      	adds	r3, r3, r7
 800bdc8:	2120      	movs	r1, #32
 800bdca:	1852      	adds	r2, r2, r1
 800bdcc:	19d1      	adds	r1, r2, r7
 800bdce:	2222      	movs	r2, #34	@ 0x22
 800bdd0:	18ba      	adds	r2, r7, r2
 800bdd2:	7809      	ldrb	r1, [r1, #0]
 800bdd4:	7812      	ldrb	r2, [r2, #0]
 800bdd6:	188a      	adds	r2, r1, r2
 800bdd8:	701a      	strb	r2, [r3, #0]
 800bdda:	2317      	movs	r3, #23
 800bddc:	2220      	movs	r2, #32
 800bdde:	189b      	adds	r3, r3, r2
 800bde0:	19da      	adds	r2, r3, r7
 800bde2:	2323      	movs	r3, #35	@ 0x23
 800bde4:	18fb      	adds	r3, r7, r3
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d200      	bcs.n	800bdf0 <CheckCRC+0x180>
 800bdee:	e754      	b.n	800bc9a <CheckCRC+0x2a>
    }
  }
  return true;
 800bdf0:	2301      	movs	r3, #1
}
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	b00f      	add	sp, #60	@ 0x3c
 800bdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdfa:	46c0      	nop			@ (mov r8, r8)
 800bdfc:	08024c44 	.word	0x08024c44
 800be00:	08024b80 	.word	0x08024b80

0800be04 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	000a      	movs	r2, r1
 800be0e:	1cfb      	adds	r3, r7, #3
 800be10:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be12:	230f      	movs	r3, #15
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	22ff      	movs	r2, #255	@ 0xff
 800be18:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be1a:	230e      	movs	r3, #14
 800be1c:	18fb      	adds	r3, r7, r3
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	e037      	b.n	800be94 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be24:	230e      	movs	r3, #14
 800be26:	18fb      	adds	r3, r7, r3
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	18d3      	adds	r3, r2, r3
 800be2e:	7819      	ldrb	r1, [r3, #0]
 800be30:	220f      	movs	r2, #15
 800be32:	18bb      	adds	r3, r7, r2
 800be34:	18ba      	adds	r2, r7, r2
 800be36:	7812      	ldrb	r2, [r2, #0]
 800be38:	404a      	eors	r2, r1
 800be3a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800be3c:	230d      	movs	r3, #13
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	2200      	movs	r2, #0
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e01b      	b.n	800be7e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800be46:	210f      	movs	r1, #15
 800be48:	187b      	adds	r3, r7, r1
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	da09      	bge.n	800be66 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800be52:	187b      	adds	r3, r7, r1
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	2231      	movs	r2, #49	@ 0x31
 800be5c:	4053      	eors	r3, r2
 800be5e:	b25a      	sxtb	r2, r3
 800be60:	187b      	adds	r3, r7, r1
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	e005      	b.n	800be72 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800be66:	230f      	movs	r3, #15
 800be68:	18fa      	adds	r2, r7, r3
 800be6a:	18fb      	adds	r3, r7, r3
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	18db      	adds	r3, r3, r3
 800be70:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800be72:	210d      	movs	r1, #13
 800be74:	187b      	adds	r3, r7, r1
 800be76:	781a      	ldrb	r2, [r3, #0]
 800be78:	187b      	adds	r3, r7, r1
 800be7a:	3201      	adds	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	230d      	movs	r3, #13
 800be80:	18fb      	adds	r3, r7, r3
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b07      	cmp	r3, #7
 800be86:	d9de      	bls.n	800be46 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800be88:	210e      	movs	r1, #14
 800be8a:	187b      	adds	r3, r7, r1
 800be8c:	781a      	ldrb	r2, [r3, #0]
 800be8e:	187b      	adds	r3, r7, r1
 800be90:	3201      	adds	r2, #1
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	230e      	movs	r3, #14
 800be96:	18fa      	adds	r2, r7, r3
 800be98:	1cfb      	adds	r3, r7, #3
 800be9a:	7812      	ldrb	r2, [r2, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d3c0      	bcc.n	800be24 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800bea2:	230f      	movs	r3, #15
 800bea4:	18fb      	adds	r3, r7, r3
 800bea6:	781b      	ldrb	r3, [r3, #0]
}
 800bea8:	0018      	movs	r0, r3
 800beaa:	46bd      	mov	sp, r7
 800beac:	b004      	add	sp, #16
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4936      	ldr	r1, [pc, #216]	@ (800bf98 <SGP_GetHT+0xe8>)
 800bec0:	1c18      	adds	r0, r3, #0
 800bec2:	f7f4 fcfd 	bl	80008c0 <__aeabi_fadd>
 800bec6:	1c03      	adds	r3, r0, #0
 800bec8:	4934      	ldr	r1, [pc, #208]	@ (800bf9c <SGP_GetHT+0xec>)
 800beca:	1c18      	adds	r0, r3, #0
 800becc:	f7f4 fe82 	bl	8000bd4 <__aeabi_fdiv>
 800bed0:	1c03      	adds	r3, r0, #0
 800bed2:	4933      	ldr	r1, [pc, #204]	@ (800bfa0 <SGP_GetHT+0xf0>)
 800bed4:	1c18      	adds	r0, r3, #0
 800bed6:	f7f5 f863 	bl	8000fa0 <__aeabi_fmul>
 800beda:	1c03      	adds	r3, r0, #0
 800bedc:	1c18      	adds	r0, r3, #0
 800bede:	f7f4 fb9d 	bl	800061c <__aeabi_f2uiz>
 800bee2:	0003      	movs	r3, r0
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	4b2f      	ldr	r3, [pc, #188]	@ (800bfa4 <SGP_GetHT+0xf4>)
 800bee8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	492e      	ldr	r1, [pc, #184]	@ (800bfa8 <SGP_GetHT+0xf8>)
 800bef0:	1c18      	adds	r0, r3, #0
 800bef2:	f7f4 fe6f 	bl	8000bd4 <__aeabi_fdiv>
 800bef6:	1c03      	adds	r3, r0, #0
 800bef8:	4929      	ldr	r1, [pc, #164]	@ (800bfa0 <SGP_GetHT+0xf0>)
 800befa:	1c18      	adds	r0, r3, #0
 800befc:	f7f5 f850 	bl	8000fa0 <__aeabi_fmul>
 800bf00:	1c03      	adds	r3, r0, #0
 800bf02:	1c18      	adds	r0, r3, #0
 800bf04:	f7f4 fb8a 	bl	800061c <__aeabi_f2uiz>
 800bf08:	0003      	movs	r3, r0
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	4b27      	ldr	r3, [pc, #156]	@ (800bfac <SGP_GetHT+0xfc>)
 800bf0e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf10:	4b26      	ldr	r3, [pc, #152]	@ (800bfac <SGP_GetHT+0xfc>)
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	0a1b      	lsrs	r3, r3, #8
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	4b25      	ldr	r3, [pc, #148]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf1c:	709a      	strb	r2, [r3, #2]
 800bf1e:	4b24      	ldr	r3, [pc, #144]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf20:	789a      	ldrb	r2, [r3, #2]
 800bf22:	210c      	movs	r1, #12
 800bf24:	187b      	adds	r3, r7, r1
 800bf26:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bf28:	4b20      	ldr	r3, [pc, #128]	@ (800bfac <SGP_GetHT+0xfc>)
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4b20      	ldr	r3, [pc, #128]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf30:	70da      	strb	r2, [r3, #3]
 800bf32:	4b1f      	ldr	r3, [pc, #124]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf34:	78da      	ldrb	r2, [r3, #3]
 800bf36:	187b      	adds	r3, r7, r1
 800bf38:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bf3a:	187b      	adds	r3, r7, r1
 800bf3c:	2102      	movs	r1, #2
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f7ff ff60 	bl	800be04 <CalculateCRC>
 800bf44:	0003      	movs	r3, r0
 800bf46:	001a      	movs	r2, r3
 800bf48:	4b19      	ldr	r3, [pc, #100]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf4a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bf4c:	4b15      	ldr	r3, [pc, #84]	@ (800bfa4 <SGP_GetHT+0xf4>)
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	0a1b      	lsrs	r3, r3, #8
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	4b16      	ldr	r3, [pc, #88]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf58:	715a      	strb	r2, [r3, #5]
 800bf5a:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf5c:	795a      	ldrb	r2, [r3, #5]
 800bf5e:	2108      	movs	r1, #8
 800bf60:	187b      	adds	r3, r7, r1
 800bf62:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bf64:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa4 <SGP_GetHT+0xf4>)
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	4b11      	ldr	r3, [pc, #68]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf6c:	719a      	strb	r2, [r3, #6]
 800bf6e:	4b10      	ldr	r3, [pc, #64]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf70:	799a      	ldrb	r2, [r3, #6]
 800bf72:	187b      	adds	r3, r7, r1
 800bf74:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bf76:	187b      	adds	r3, r7, r1
 800bf78:	2102      	movs	r1, #2
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	f7ff ff42 	bl	800be04 <CalculateCRC>
 800bf80:	0003      	movs	r3, r0
 800bf82:	001a      	movs	r2, r3
 800bf84:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf86:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bf88:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <SGP_GetHT+0x104>)
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	701a      	strb	r2, [r3, #0]
}
 800bf8e:	46c0      	nop			@ (mov r8, r8)
 800bf90:	46bd      	mov	sp, r7
 800bf92:	b004      	add	sp, #16
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	46c0      	nop			@ (mov r8, r8)
 800bf98:	42340000 	.word	0x42340000
 800bf9c:	432f0000 	.word	0x432f0000
 800bfa0:	477fff00 	.word	0x477fff00
 800bfa4:	20001146 	.word	0x20001146
 800bfa8:	42c80000 	.word	0x42c80000
 800bfac:	20001144 	.word	0x20001144
 800bfb0:	20000094 	.word	0x20000094
 800bfb4:	20001148 	.word	0x20001148

0800bfb8 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800bfbc:	4a09      	ldr	r2, [pc, #36]	@ (800bfe4 <SGP_SoftReset+0x2c>)
 800bfbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe8 <SGP_SoftReset+0x30>)
 800bfc0:	0019      	movs	r1, r3
 800bfc2:	2003      	movs	r0, #3
 800bfc4:	f002 fa0e 	bl	800e3e4 <CreateLine>
  SGP_TurnHeaterOff();
 800bfc8:	f7ff fbf4 	bl	800b7b4 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800bfcc:	200a      	movs	r0, #10
 800bfce:	f002 fe59 	bl	800ec84 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bfd2:	4b06      	ldr	r3, [pc, #24]	@ (800bfec <SGP_SoftReset+0x34>)
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	0019      	movs	r1, r3
 800bfd8:	2059      	movs	r0, #89	@ 0x59
 800bfda:	f7ff fb1d 	bl	800b618 <WriteRegister>
}
 800bfde:	46c0      	nop			@ (mov r8, r8)
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	08024cec 	.word	0x08024cec
 800bfe8:	08024bc8 	.word	0x08024bc8
 800bfec:	2000009c 	.word	0x2000009c

0800bff0 <ResetVOCresult>:

void ResetVOCresult(void) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800bff4:	4b02      	ldr	r3, [pc, #8]	@ (800c000 <ResetVOCresult+0x10>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	601a      	str	r2, [r3, #0]
}
 800bffa:	46c0      	nop			@ (mov r8, r8)
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	2000114c 	.word	0x2000114c

0800c004 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c004:	b580      	push	{r7, lr}
 800c006:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c008:	4b34      	ldr	r3, [pc, #208]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b07      	cmp	r3, #7
 800c00e:	d858      	bhi.n	800c0c2 <SGP_Upkeep+0xbe>
 800c010:	009a      	lsls	r2, r3, #2
 800c012:	4b33      	ldr	r3, [pc, #204]	@ (800c0e0 <SGP_Upkeep+0xdc>)
 800c014:	18d3      	adds	r3, r2, r3
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c01a:	4a32      	ldr	r2, [pc, #200]	@ (800c0e4 <SGP_Upkeep+0xe0>)
 800c01c:	4b32      	ldr	r3, [pc, #200]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c01e:	0019      	movs	r1, r3
 800c020:	2003      	movs	r0, #3
 800c022:	f002 f9df 	bl	800e3e4 <CreateLine>
    break;
 800c026:	e053      	b.n	800c0d0 <SGP_Upkeep+0xcc>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c028:	f7ff ffe2 	bl	800bff0 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c02c:	4b2b      	ldr	r3, [pc, #172]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c02e:	2201      	movs	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]
    break;
 800c032:	e04d      	b.n	800c0d0 <SGP_Upkeep+0xcc>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c034:	f7ff fb5c 	bl	800b6f0 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c038:	f001 f95e 	bl	800d2f8 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c03c:	4b27      	ldr	r3, [pc, #156]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c03e:	2202      	movs	r2, #2
 800c040:	701a      	strb	r2, [r3, #0]
    break;
 800c042:	e045      	b.n	800c0d0 <SGP_Upkeep+0xcc>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c044:	4b29      	ldr	r3, [pc, #164]	@ (800c0ec <SGP_Upkeep+0xe8>)
 800c046:	0018      	movs	r0, r3
 800c048:	f7ff fbc2 	bl	800b7d0 <SGP_GetMeasurementValues>
 800c04c:	1e03      	subs	r3, r0, #0
 800c04e:	d03c      	beq.n	800c0ca <SGP_Upkeep+0xc6>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c050:	4b22      	ldr	r3, [pc, #136]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c052:	2203      	movs	r2, #3
 800c054:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c056:	e038      	b.n	800c0ca <SGP_Upkeep+0xc6>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c058:	4b24      	ldr	r3, [pc, #144]	@ (800c0ec <SGP_Upkeep+0xe8>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	0018      	movs	r0, r3
 800c060:	f7f7 fc70 	bl	8003944 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c064:	4b1d      	ldr	r3, [pc, #116]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c066:	2206      	movs	r2, #6
 800c068:	701a      	strb	r2, [r3, #0]
    break;
 800c06a:	e031      	b.n	800c0d0 <SGP_Upkeep+0xcc>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c06c:	4b1b      	ldr	r3, [pc, #108]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c06e:	2207      	movs	r2, #7
 800c070:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c072:	4b1f      	ldr	r3, [pc, #124]	@ (800c0f0 <SGP_Upkeep+0xec>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d10b      	bne.n	800c092 <SGP_Upkeep+0x8e>
 800c07a:	4b1e      	ldr	r3, [pc, #120]	@ (800c0f4 <SGP_Upkeep+0xf0>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2201      	movs	r2, #1
 800c080:	4053      	eors	r3, r2
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d004      	beq.n	800c092 <SGP_Upkeep+0x8e>
      // restart the SGP40 with a soft reset to enter idle mode
      SGP_SoftReset();
 800c088:	f7ff ff96 	bl	800bfb8 <SGP_SoftReset>
      SetVOCSensorStatus(false);
 800c08c:	2000      	movs	r0, #0
 800c08e:	f7fc f997 	bl	80083c0 <SetVOCSensorStatus>
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c092:	f002 fded 	bl	800ec70 <HAL_GetTick>
 800c096:	0003      	movs	r3, r0
 800c098:	22c8      	movs	r2, #200	@ 0xc8
 800c09a:	0092      	lsls	r2, r2, #2
 800c09c:	189a      	adds	r2, r3, r2
 800c09e:	4b16      	ldr	r3, [pc, #88]	@ (800c0f8 <SGP_Upkeep+0xf4>)
 800c0a0:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c0a2:	f001 f941 	bl	800d328 <ResetMeasurementIndicator>
  break;
 800c0a6:	e013      	b.n	800c0d0 <SGP_Upkeep+0xcc>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c0a8:	4b13      	ldr	r3, [pc, #76]	@ (800c0f8 <SGP_Upkeep+0xf4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f002 f943 	bl	800e338 <TimestampIsReached>
 800c0b2:	1e03      	subs	r3, r0, #0
 800c0b4:	d00b      	beq.n	800c0ce <SGP_Upkeep+0xca>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c0b6:	f7ff fb03 	bl	800b6c0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c0ba:	4b08      	ldr	r3, [pc, #32]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0c0:	e005      	b.n	800c0ce <SGP_Upkeep+0xca>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c0c2:	4b06      	ldr	r3, [pc, #24]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
    break;
 800c0c8:	e002      	b.n	800c0d0 <SGP_Upkeep+0xcc>
    break;
 800c0ca:	46c0      	nop			@ (mov r8, r8)
 800c0cc:	e000      	b.n	800c0d0 <SGP_Upkeep+0xcc>
    break;
 800c0ce:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c0d0:	4b02      	ldr	r3, [pc, #8]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
}
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	46c0      	nop			@ (mov r8, r8)
 800c0dc:	20001156 	.word	0x20001156
 800c0e0:	08025454 	.word	0x08025454
 800c0e4:	08024d04 	.word	0x08024d04
 800c0e8:	08024bc8 	.word	0x08024bc8
 800c0ec:	2000114c 	.word	0x2000114c
 800c0f0:	20001096 	.word	0x20001096
 800c0f4:	20001ff1 	.word	0x20001ff1
 800c0f8:	20001098 	.word	0x20001098

0800c0fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	0002      	movs	r2, r0
 800c104:	1dfb      	adds	r3, r7, #7
 800c106:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c108:	1dfb      	adds	r3, r7, #7
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c10e:	d809      	bhi.n	800c124 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c110:	1dfb      	adds	r3, r7, #7
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	001a      	movs	r2, r3
 800c116:	231f      	movs	r3, #31
 800c118:	401a      	ands	r2, r3
 800c11a:	4b04      	ldr	r3, [pc, #16]	@ (800c12c <__NVIC_EnableIRQ+0x30>)
 800c11c:	2101      	movs	r1, #1
 800c11e:	4091      	lsls	r1, r2
 800c120:	000a      	movs	r2, r1
 800c122:	601a      	str	r2, [r3, #0]
  }
}
 800c124:	46c0      	nop			@ (mov r8, r8)
 800c126:	46bd      	mov	sp, r7
 800c128:	b002      	add	sp, #8
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	e000e100 	.word	0xe000e100

0800c130 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	0002      	movs	r2, r0
 800c138:	1dfb      	adds	r3, r7, #7
 800c13a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c13c:	1dfb      	adds	r3, r7, #7
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b7f      	cmp	r3, #127	@ 0x7f
 800c142:	d810      	bhi.n	800c166 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c144:	1dfb      	adds	r3, r7, #7
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	001a      	movs	r2, r3
 800c14a:	231f      	movs	r3, #31
 800c14c:	4013      	ands	r3, r2
 800c14e:	4908      	ldr	r1, [pc, #32]	@ (800c170 <__NVIC_DisableIRQ+0x40>)
 800c150:	2201      	movs	r2, #1
 800c152:	409a      	lsls	r2, r3
 800c154:	0013      	movs	r3, r2
 800c156:	2280      	movs	r2, #128	@ 0x80
 800c158:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c15a:	f3bf 8f4f 	dsb	sy
}
 800c15e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c160:	f3bf 8f6f 	isb	sy
}
 800c164:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c166:	46c0      	nop			@ (mov r8, r8)
 800c168:	46bd      	mov	sp, r7
 800c16a:	b002      	add	sp, #8
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	46c0      	nop			@ (mov r8, r8)
 800c170:	e000e100 	.word	0xe000e100

0800c174 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c174:	b5b0      	push	{r4, r5, r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af02      	add	r7, sp, #8
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	0008      	movs	r0, r1
 800c17e:	0011      	movs	r1, r2
 800c180:	1cfb      	adds	r3, r7, #3
 800c182:	1c02      	adds	r2, r0, #0
 800c184:	701a      	strb	r2, [r3, #0]
 800c186:	1cbb      	adds	r3, r7, #2
 800c188:	1c0a      	adds	r2, r1, #0
 800c18a:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c18c:	4b5b      	ldr	r3, [pc, #364]	@ (800c2fc <getSoundData+0x188>)
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2201      	movs	r2, #1
 800c194:	4053      	eors	r3, r2
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d107      	bne.n	800c1ac <getSoundData+0x38>
 800c19c:	4b58      	ldr	r3, [pc, #352]	@ (800c300 <getSoundData+0x18c>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	4053      	eors	r3, r2
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <getSoundData+0x3c>
    {
        return false;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	e0a0      	b.n	800c2f2 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c1b0:	4b54      	ldr	r3, [pc, #336]	@ (800c304 <getSoundData+0x190>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c1ba:	4b53      	ldr	r3, [pc, #332]	@ (800c308 <getSoundData+0x194>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	b25b      	sxtb	r3, r3
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	f7ff ffb5 	bl	800c130 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1c6:	f3bf 8f4f 	dsb	sy
}
 800c1ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1cc:	f3bf 8f6f 	isb	sy
}
 800c1d0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c1d2:	1cfb      	adds	r3, r7, #3
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d04c      	beq.n	800c274 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c1da:	4b4c      	ldr	r3, [pc, #304]	@ (800c30c <getSoundData+0x198>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d11b      	bne.n	800c21a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	617b      	str	r3, [r7, #20]
 800c1f2:	e00e      	b.n	800c212 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	18d3      	adds	r3, r2, r3
 800c1fa:	3302      	adds	r3, #2
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	18d3      	adds	r3, r2, r3
 800c206:	3308      	adds	r3, #8
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	3301      	adds	r3, #1
 800c210:	617b      	str	r3, [r7, #20]
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b05      	cmp	r3, #5
 800c216:	d9ed      	bls.n	800c1f4 <getSoundData+0x80>
 800c218:	e02c      	b.n	800c274 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	1c59      	adds	r1, r3, #1
 800c220:	4b3b      	ldr	r3, [pc, #236]	@ (800c310 <getSoundData+0x19c>)
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	4b3b      	ldr	r3, [pc, #236]	@ (800c314 <getSoundData+0x1a0>)
 800c226:	681c      	ldr	r4, [r3, #0]
 800c228:	4b38      	ldr	r3, [pc, #224]	@ (800c30c <getSoundData+0x198>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	0023      	movs	r3, r4
 800c230:	f000 fde8 	bl	800ce04 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c234:	2300      	movs	r3, #0
 800c236:	613b      	str	r3, [r7, #16]
 800c238:	e019      	b.n	800c26e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	18d3      	adds	r3, r2, r3
 800c240:	1c98      	adds	r0, r3, #2
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3308      	adds	r3, #8
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c24a:	4b33      	ldr	r3, [pc, #204]	@ (800c318 <getSoundData+0x1a4>)
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	0092      	lsls	r2, r2, #2
 800c250:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c252:	4b32      	ldr	r3, [pc, #200]	@ (800c31c <getSoundData+0x1a8>)
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	0092      	lsls	r2, r2, #2
 800c258:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c25a:	4b2c      	ldr	r3, [pc, #176]	@ (800c30c <getSoundData+0x198>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	0013      	movs	r3, r2
 800c262:	0022      	movs	r2, r4
 800c264:	f000 fdce 	bl	800ce04 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	3301      	adds	r3, #1
 800c26c:	613b      	str	r3, [r7, #16]
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2b05      	cmp	r3, #5
 800c272:	d9e2      	bls.n	800c23a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c274:	1cbb      	adds	r3, r7, #2
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d028      	beq.n	800c2ce <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c27c:	240e      	movs	r4, #14
 800c27e:	193b      	adds	r3, r7, r4
 800c280:	2200      	movs	r2, #0
 800c282:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c284:	250d      	movs	r5, #13
 800c286:	197b      	adds	r3, r7, r5
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c28c:	4b24      	ldr	r3, [pc, #144]	@ (800c320 <getSoundData+0x1ac>)
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	4924      	ldr	r1, [pc, #144]	@ (800c324 <getSoundData+0x1b0>)
 800c292:	197b      	adds	r3, r7, r5
 800c294:	193a      	adds	r2, r7, r4
 800c296:	f000 fe59 	bl	800cf4c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c29a:	193b      	adds	r3, r7, r4
 800c29c:	881a      	ldrh	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	21ff      	movs	r1, #255	@ 0xff
 800c2a2:	4011      	ands	r1, r2
 800c2a4:	000c      	movs	r4, r1
 800c2a6:	7b99      	ldrb	r1, [r3, #14]
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	4001      	ands	r1, r0
 800c2ac:	1c08      	adds	r0, r1, #0
 800c2ae:	1c21      	adds	r1, r4, #0
 800c2b0:	4301      	orrs	r1, r0
 800c2b2:	7399      	strb	r1, [r3, #14]
 800c2b4:	0a12      	lsrs	r2, r2, #8
 800c2b6:	b290      	uxth	r0, r2
 800c2b8:	7bda      	ldrb	r2, [r3, #15]
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	400a      	ands	r2, r1
 800c2be:	1c11      	adds	r1, r2, #0
 800c2c0:	1c02      	adds	r2, r0, #0
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c2c6:	197b      	adds	r3, r7, r5
 800c2c8:	781a      	ldrb	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c2ce:	f000 f86f 	bl	800c3b0 <micSettlingComplete>
 800c2d2:	0003      	movs	r3, r0
 800c2d4:	001a      	movs	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c2da:	4b0a      	ldr	r3, [pc, #40]	@ (800c304 <getSoundData+0x190>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c2e4:	4b08      	ldr	r3, [pc, #32]	@ (800c308 <getSoundData+0x194>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	b25b      	sxtb	r3, r3
 800c2ea:	0018      	movs	r0, r3
 800c2ec:	f7ff ff06 	bl	800c0fc <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c2f0:	2301      	movs	r3, #1
}
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	b006      	add	sp, #24
 800c2f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2fa:	46c0      	nop			@ (mov r8, r8)
 800c2fc:	20001158 	.word	0x20001158
 800c300:	2000115b 	.word	0x2000115b
 800c304:	2000115a 	.word	0x2000115a
 800c308:	20001ba8 	.word	0x20001ba8
 800c30c:	20001be4 	.word	0x20001be4
 800c310:	20001bac 	.word	0x20001bac
 800c314:	20001bb0 	.word	0x20001bb0
 800c318:	20001bb4 	.word	0x20001bb4
 800c31c:	20001bcc 	.word	0x20001bcc
 800c320:	20001160 	.word	0x20001160
 800c324:	3b5c7333 	.word	0x3b5c7333

0800c328 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	001a      	movs	r2, r3
 800c336:	1cfb      	adds	r3, r7, #3
 800c338:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c33a:	4b09      	ldr	r3, [pc, #36]	@ (800c360 <soundInit+0x38>)
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c340:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <soundInit+0x3c>)
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c346:	4b08      	ldr	r3, [pc, #32]	@ (800c368 <soundInit+0x40>)
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c34c:	4b07      	ldr	r3, [pc, #28]	@ (800c36c <soundInit+0x44>)
 800c34e:	2200      	movs	r2, #0
 800c350:	569a      	ldrsb	r2, [r3, r2]
 800c352:	4b06      	ldr	r3, [pc, #24]	@ (800c36c <soundInit+0x44>)
 800c354:	701a      	strb	r2, [r3, #0]

    return true;
 800c356:	2301      	movs	r3, #1
}
 800c358:	0018      	movs	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	b004      	add	sp, #16
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20001ba0 	.word	0x20001ba0
 800c364:	20001b9c 	.word	0x20001b9c
 800c368:	20001ba4 	.word	0x20001ba4
 800c36c:	20001ba8 	.word	0x20001ba8

0800c370 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c374:	4b02      	ldr	r3, [pc, #8]	@ (800c380 <clearMaximumAmplitude+0x10>)
 800c376:	2200      	movs	r2, #0
 800c378:	601a      	str	r2, [r3, #0]
}
 800c37a:	46c0      	nop			@ (mov r8, r8)
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	20001160 	.word	0x20001160

0800c384 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c388:	4b08      	ldr	r3, [pc, #32]	@ (800c3ac <startMicSettlingPeriod+0x28>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2200      	movs	r2, #0
 800c390:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c392:	4b06      	ldr	r3, [pc, #24]	@ (800c3ac <startMicSettlingPeriod+0x28>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	0018      	movs	r0, r3
 800c398:	f00a fa2e 	bl	80167f8 <HAL_TIM_Base_Start>
 800c39c:	1e03      	subs	r3, r0, #0
 800c39e:	d001      	beq.n	800c3a4 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	e000      	b.n	800c3a6 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c3a4:	2301      	movs	r3, #1
}
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20001b9c 	.word	0x20001b9c

0800c3b0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c3b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f0 <micSettlingComplete+0x40>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	401a      	ands	r2, r3
 800c3c2:	1dfb      	adds	r3, r7, #7
 800c3c4:	3a01      	subs	r2, #1
 800c3c6:	4251      	negs	r1, r2
 800c3c8:	414a      	adcs	r2, r1
 800c3ca:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c3cc:	1dfb      	adds	r3, r7, #7
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d007      	beq.n	800c3e4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c3d4:	4b06      	ldr	r3, [pc, #24]	@ (800c3f0 <micSettlingComplete+0x40>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	0018      	movs	r0, r3
 800c3da:	f00a fa57 	bl	801688c <HAL_TIM_Base_Stop>
      DataReady = true;
 800c3de:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <micSettlingComplete+0x44>)
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c3e4:	1dfb      	adds	r3, r7, #7
 800c3e6:	781b      	ldrb	r3, [r3, #0]
}
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	b002      	add	sp, #8
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20001b9c 	.word	0x20001b9c
 800c3f4:	20001157 	.word	0x20001157

0800c3f8 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	0002      	movs	r2, r0
 800c400:	1dfb      	adds	r3, r7, #7
 800c402:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c404:	4b29      	ldr	r3, [pc, #164]	@ (800c4ac <enableMicrophone+0xb4>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	1dfa      	adds	r2, r7, #7
 800c40c:	7812      	ldrb	r2, [r2, #0]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d101      	bne.n	800c416 <enableMicrophone+0x1e>
    {
        return true;
 800c412:	2301      	movs	r3, #1
 800c414:	e045      	b.n	800c4a2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c416:	1dfb      	adds	r3, r7, #7
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d025      	beq.n	800c46a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c41e:	f7ff ffb1 	bl	800c384 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c422:	4b23      	ldr	r3, [pc, #140]	@ (800c4b0 <enableMicrophone+0xb8>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2280      	movs	r2, #128	@ 0x80
 800c428:	0092      	lsls	r2, r2, #2
 800c42a:	4922      	ldr	r1, [pc, #136]	@ (800c4b4 <enableMicrophone+0xbc>)
 800c42c:	0018      	movs	r0, r3
 800c42e:	f006 fc4d 	bl	8012ccc <HAL_I2S_Receive_DMA>
 800c432:	1e03      	subs	r3, r0, #0
 800c434:	d001      	beq.n	800c43a <enableMicrophone+0x42>
        {
            return false;
 800c436:	2300      	movs	r3, #0
 800c438:	e033      	b.n	800c4a2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c43a:	f7ff ff99 	bl	800c370 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c43e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4b8 <enableMicrophone+0xc0>)
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c444:	4b1d      	ldr	r3, [pc, #116]	@ (800c4bc <enableMicrophone+0xc4>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	b25b      	sxtb	r3, r3
 800c44a:	0018      	movs	r0, r3
 800c44c:	f7ff fe56 	bl	800c0fc <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c450:	4b1b      	ldr	r3, [pc, #108]	@ (800c4c0 <enableMicrophone+0xc8>)
 800c452:	2201      	movs	r2, #1
 800c454:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c456:	4b15      	ldr	r3, [pc, #84]	@ (800c4ac <enableMicrophone+0xb4>)
 800c458:	2201      	movs	r2, #1
 800c45a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c45c:	4b19      	ldr	r3, [pc, #100]	@ (800c4c4 <enableMicrophone+0xcc>)
 800c45e:	2200      	movs	r2, #0
 800c460:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c462:	4b19      	ldr	r3, [pc, #100]	@ (800c4c8 <enableMicrophone+0xd0>)
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
 800c468:	e01a      	b.n	800c4a0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c46a:	4b14      	ldr	r3, [pc, #80]	@ (800c4bc <enableMicrophone+0xc4>)
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	b25b      	sxtb	r3, r3
 800c470:	0018      	movs	r0, r3
 800c472:	f7ff fe5d 	bl	800c130 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c476:	4b12      	ldr	r3, [pc, #72]	@ (800c4c0 <enableMicrophone+0xc8>)
 800c478:	2200      	movs	r2, #0
 800c47a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c47c:	4b11      	ldr	r3, [pc, #68]	@ (800c4c4 <enableMicrophone+0xcc>)
 800c47e:	2200      	movs	r2, #0
 800c480:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c482:	4b11      	ldr	r3, [pc, #68]	@ (800c4c8 <enableMicrophone+0xd0>)
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c488:	4b09      	ldr	r3, [pc, #36]	@ (800c4b0 <enableMicrophone+0xb8>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	0018      	movs	r0, r3
 800c48e:	f006 fcdf 	bl	8012e50 <HAL_I2S_DMAStop>
 800c492:	1e03      	subs	r3, r0, #0
 800c494:	d001      	beq.n	800c49a <enableMicrophone+0xa2>
        {
            return false;
 800c496:	2300      	movs	r3, #0
 800c498:	e003      	b.n	800c4a2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c49a:	4b04      	ldr	r3, [pc, #16]	@ (800c4ac <enableMicrophone+0xb4>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c4a0:	2301      	movs	r3, #1
}
 800c4a2:	0018      	movs	r0, r3
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	b002      	add	sp, #8
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	46c0      	nop			@ (mov r8, r8)
 800c4ac:	20001158 	.word	0x20001158
 800c4b0:	20001ba0 	.word	0x20001ba0
 800c4b4:	2000119c 	.word	0x2000119c
 800c4b8:	2000115c 	.word	0x2000115c
 800c4bc:	20001ba8 	.word	0x20001ba8
 800c4c0:	2000115a 	.word	0x2000115a
 800c4c4:	20001159 	.word	0x20001159
 800c4c8:	2000115b 	.word	0x2000115b

0800c4cc <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c504 <startSPLcalculation+0x38>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	4053      	eors	r3, r2
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <startSPLcalculation+0x18>
    {
        return false;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e00c      	b.n	800c4fe <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c4e4:	4b08      	ldr	r3, [pc, #32]	@ (800c508 <startSPLcalculation+0x3c>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <startSPLcalculation+0x26>
    {
        return true;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e005      	b.n	800c4fe <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c4f2:	f000 fb63 	bl	800cbbc <resetSPLstate>
    SPLcalcEnabled = true;
 800c4f6:	4b04      	ldr	r3, [pc, #16]	@ (800c508 <startSPLcalculation+0x3c>)
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	701a      	strb	r2, [r3, #0]
    return true;
 800c4fc:	2301      	movs	r3, #1
}
 800c4fe:	0018      	movs	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	20001158 	.word	0x20001158
 800c508:	20001159 	.word	0x20001159

0800c50c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c514:	4b05      	ldr	r3, [pc, #20]	@ (800c52c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d102      	bne.n	800c524 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c51e:	2000      	movs	r0, #0
 800c520:	f000 f81a 	bl	800c558 <processHalfDMAbuffer>
  }
}
 800c524:	46c0      	nop			@ (mov r8, r8)
 800c526:	46bd      	mov	sp, r7
 800c528:	b002      	add	sp, #8
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	20001ba0 	.word	0x20001ba0

0800c530 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c538:	4b06      	ldr	r3, [pc, #24]	@ (800c554 <HAL_I2S_RxCpltCallback+0x24>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d104      	bne.n	800c54c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c542:	2380      	movs	r3, #128	@ 0x80
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	0018      	movs	r0, r3
 800c548:	f000 f806 	bl	800c558 <processHalfDMAbuffer>
  }
}
 800c54c:	46c0      	nop			@ (mov r8, r8)
 800c54e:	46bd      	mov	sp, r7
 800c550:	b002      	add	sp, #8
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20001ba0 	.word	0x20001ba0

0800c558 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	005a      	lsls	r2, r3, #1
 800c564:	4b15      	ldr	r3, [pc, #84]	@ (800c5bc <processHalfDMAbuffer+0x64>)
 800c566:	18d3      	adds	r3, r2, r3
 800c568:	4a15      	ldr	r2, [pc, #84]	@ (800c5c0 <processHalfDMAbuffer+0x68>)
 800c56a:	2180      	movs	r1, #128	@ 0x80
 800c56c:	0089      	lsls	r1, r1, #2
 800c56e:	0018      	movs	r0, r3
 800c570:	f000 fd35 	bl	800cfde <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c574:	4b13      	ldr	r3, [pc, #76]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	425a      	negs	r2, r3
 800c57a:	4153      	adcs	r3, r2
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	4b11      	ldr	r3, [pc, #68]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2109      	movs	r1, #9
 800c584:	4299      	cmp	r1, r3
 800c586:	419b      	sbcs	r3, r3
 800c588:	425b      	negs	r3, r3
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	480c      	ldr	r0, [pc, #48]	@ (800c5c0 <processHalfDMAbuffer+0x68>)
 800c58e:	2180      	movs	r1, #128	@ 0x80
 800c590:	f000 fb46 	bl	800cc20 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c594:	4b0b      	ldr	r3, [pc, #44]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b09      	cmp	r3, #9
 800c59a:	d804      	bhi.n	800c5a6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c59c:	4b09      	ldr	r3, [pc, #36]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	4b08      	ldr	r3, [pc, #32]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c5a4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c5a6:	4b08      	ldr	r3, [pc, #32]	@ (800c5c8 <processHalfDMAbuffer+0x70>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c5b0:	f000 f826 	bl	800c600 <calculateSPLQ31>
    }
}
 800c5b4:	46c0      	nop			@ (mov r8, r8)
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	b002      	add	sp, #8
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	2000119c 	.word	0x2000119c
 800c5c0:	2000199c 	.word	0x2000199c
 800c5c4:	2000115c 	.word	0x2000115c
 800c5c8:	20001159 	.word	0x20001159

0800c5cc <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5d4:	4b07      	ldr	r3, [pc, #28]	@ (800c5f4 <HAL_I2S_ErrorCallback+0x28>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d106      	bne.n	800c5ec <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c5de:	4a06      	ldr	r2, [pc, #24]	@ (800c5f8 <HAL_I2S_ErrorCallback+0x2c>)
 800c5e0:	239e      	movs	r3, #158	@ 0x9e
 800c5e2:	0059      	lsls	r1, r3, #1
 800c5e4:	4b05      	ldr	r3, [pc, #20]	@ (800c5fc <HAL_I2S_ErrorCallback+0x30>)
 800c5e6:	0018      	movs	r0, r3
 800c5e8:	f001 ffb4 	bl	800e554 <errorHandler>
  }
}
 800c5ec:	46c0      	nop			@ (mov r8, r8)
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	b002      	add	sp, #8
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	20001ba0 	.word	0x20001ba0
 800c5f8:	08024d2c 	.word	0x08024d2c
 800c5fc:	08025544 	.word	0x08025544

0800c600 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	b0b3      	sub	sp, #204	@ 0xcc
 800c604:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c606:	4ae2      	ldr	r2, [pc, #904]	@ (800c990 <calculateSPLQ31+0x390>)
 800c608:	2338      	movs	r3, #56	@ 0x38
 800c60a:	2030      	movs	r0, #48	@ 0x30
 800c60c:	181b      	adds	r3, r3, r0
 800c60e:	19d9      	adds	r1, r3, r7
 800c610:	2334      	movs	r3, #52	@ 0x34
 800c612:	181b      	adds	r3, r3, r0
 800c614:	19d8      	adds	r0, r3, r7
 800c616:	2380      	movs	r3, #128	@ 0x80
 800c618:	f000 fc36 	bl	800ce88 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c61c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c61e:	2b00      	cmp	r3, #0
 800c620:	da00      	bge.n	800c624 <calculateSPLQ31+0x24>
 800c622:	3301      	adds	r3, #1
 800c624:	105b      	asrs	r3, r3, #1
 800c626:	001a      	movs	r2, r3
 800c628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	da00      	bge.n	800c630 <calculateSPLQ31+0x30>
 800c62e:	3301      	adds	r3, #1
 800c630:	105b      	asrs	r3, r3, #1
 800c632:	18d3      	adds	r3, r2, r3
 800c634:	2188      	movs	r1, #136	@ 0x88
 800c636:	187a      	adds	r2, r7, r1
 800c638:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c63a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c63c:	187b      	adds	r3, r7, r1
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	3304      	adds	r3, #4
 800c644:	2284      	movs	r2, #132	@ 0x84
 800c646:	18b9      	adds	r1, r7, r2
 800c648:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c64a:	18bb      	adds	r3, r7, r2
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4ad1      	ldr	r2, [pc, #836]	@ (800c994 <calculateSPLQ31+0x394>)
 800c650:	0019      	movs	r1, r3
 800c652:	0010      	movs	r0, r2
 800c654:	f000 fc58 	bl	800cf08 <getPo2factor>
 800c658:	0003      	movs	r3, r0
 800c65a:	2280      	movs	r2, #128	@ 0x80
 800c65c:	18ba      	adds	r2, r7, r2
 800c65e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	2284      	movs	r2, #132	@ 0x84
 800c664:	2130      	movs	r1, #48	@ 0x30
 800c666:	1852      	adds	r2, r2, r1
 800c668:	19d2      	adds	r2, r2, r7
 800c66a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c66c:	2300      	movs	r3, #0
 800c66e:	2280      	movs	r2, #128	@ 0x80
 800c670:	1852      	adds	r2, r2, r1
 800c672:	19d2      	adds	r2, r2, r7
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	e032      	b.n	800c6de <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c678:	4ac5      	ldr	r2, [pc, #788]	@ (800c990 <calculateSPLQ31+0x390>)
 800c67a:	2680      	movs	r6, #128	@ 0x80
 800c67c:	2330      	movs	r3, #48	@ 0x30
 800c67e:	18f1      	adds	r1, r6, r3
 800c680:	19cb      	adds	r3, r1, r7
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	589a      	ldr	r2, [r3, r2]
 800c688:	2188      	movs	r1, #136	@ 0x88
 800c68a:	1879      	adds	r1, r7, r1
 800c68c:	680b      	ldr	r3, [r1, #0]
 800c68e:	1ad2      	subs	r2, r2, r3
 800c690:	2180      	movs	r1, #128	@ 0x80
 800c692:	1879      	adds	r1, r7, r1
 800c694:	680b      	ldr	r3, [r1, #0]
 800c696:	409a      	lsls	r2, r3
 800c698:	0011      	movs	r1, r2
 800c69a:	4abf      	ldr	r2, [pc, #764]	@ (800c998 <calculateSPLQ31+0x398>)
 800c69c:	2084      	movs	r0, #132	@ 0x84
 800c69e:	2330      	movs	r3, #48	@ 0x30
 800c6a0:	18c3      	adds	r3, r0, r3
 800c6a2:	19db      	adds	r3, r3, r7
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c6aa:	2230      	movs	r2, #48	@ 0x30
 800c6ac:	1883      	adds	r3, r0, r2
 800c6ae:	19db      	adds	r3, r3, r7
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	49b8      	ldr	r1, [pc, #736]	@ (800c998 <calculateSPLQ31+0x398>)
 800c6b6:	009a      	lsls	r2, r3, #2
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	5053      	str	r3, [r2, r1]
        count += 2;
 800c6bc:	2230      	movs	r2, #48	@ 0x30
 800c6be:	1883      	adds	r3, r0, r2
 800c6c0:	19db      	adds	r3, r3, r7
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3302      	adds	r3, #2
 800c6c6:	0011      	movs	r1, r2
 800c6c8:	1882      	adds	r2, r0, r2
 800c6ca:	19d2      	adds	r2, r2, r7
 800c6cc:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6ce:	000a      	movs	r2, r1
 800c6d0:	18b3      	adds	r3, r6, r2
 800c6d2:	19db      	adds	r3, r3, r7
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	18b2      	adds	r2, r6, r2
 800c6da:	19d2      	adds	r2, r2, r7
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	2380      	movs	r3, #128	@ 0x80
 800c6e0:	2630      	movs	r6, #48	@ 0x30
 800c6e2:	199b      	adds	r3, r3, r6
 800c6e4:	19db      	adds	r3, r3, r7
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6ea:	d9c5      	bls.n	800c678 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c6ec:	4bab      	ldr	r3, [pc, #684]	@ (800c99c <calculateSPLQ31+0x39c>)
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	49a9      	ldr	r1, [pc, #676]	@ (800c998 <calculateSPLQ31+0x398>)
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f011 f945 	bl	801d984 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c6fa:	4aa9      	ldr	r2, [pc, #676]	@ (800c9a0 <calculateSPLQ31+0x3a0>)
 800c6fc:	2338      	movs	r3, #56	@ 0x38
 800c6fe:	199b      	adds	r3, r3, r6
 800c700:	19d9      	adds	r1, r3, r7
 800c702:	2334      	movs	r3, #52	@ 0x34
 800c704:	199b      	adds	r3, r3, r6
 800c706:	19d8      	adds	r0, r3, r7
 800c708:	237e      	movs	r3, #126	@ 0x7e
 800c70a:	f000 fbbd 	bl	800ce88 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c70e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c710:	2380      	movs	r3, #128	@ 0x80
 800c712:	061b      	lsls	r3, r3, #24
 800c714:	429a      	cmp	r2, r3
 800c716:	d101      	bne.n	800c71c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c718:	4b9e      	ldr	r3, [pc, #632]	@ (800c994 <calculateSPLQ31+0x394>)
 800c71a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c71c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c71e:	2380      	movs	r3, #128	@ 0x80
 800c720:	061b      	lsls	r3, r3, #24
 800c722:	429a      	cmp	r2, r3
 800c724:	d101      	bne.n	800c72a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c726:	4b9b      	ldr	r3, [pc, #620]	@ (800c994 <calculateSPLQ31+0x394>)
 800c728:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c72a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c72c:	17da      	asrs	r2, r3, #31
 800c72e:	189b      	adds	r3, r3, r2
 800c730:	4053      	eors	r3, r2
 800c732:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c736:	17da      	asrs	r2, r3, #31
 800c738:	189b      	adds	r3, r3, r2
 800c73a:	4053      	eors	r3, r2
 800c73c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c73e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c742:	429a      	cmp	r2, r3
 800c744:	dd01      	ble.n	800c74a <calculateSPLQ31+0x14a>
    {
        max = min;
 800c746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c748:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c74a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c74c:	3304      	adds	r3, #4
 800c74e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c752:	4a90      	ldr	r2, [pc, #576]	@ (800c994 <calculateSPLQ31+0x394>)
 800c754:	0019      	movs	r1, r3
 800c756:	0010      	movs	r0, r2
 800c758:	f000 fbd6 	bl	800cf08 <getPo2factor>
 800c75c:	0003      	movs	r3, r0
 800c75e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c760:	2302      	movs	r3, #2
 800c762:	22ac      	movs	r2, #172	@ 0xac
 800c764:	18ba      	adds	r2, r7, r2
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	e012      	b.n	800c790 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c76a:	4a8b      	ldr	r2, [pc, #556]	@ (800c998 <calculateSPLQ31+0x398>)
 800c76c:	20ac      	movs	r0, #172	@ 0xac
 800c76e:	183b      	adds	r3, r7, r0
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	589a      	ldr	r2, [r3, r2]
 800c776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c778:	409a      	lsls	r2, r3
 800c77a:	0011      	movs	r1, r2
 800c77c:	4a86      	ldr	r2, [pc, #536]	@ (800c998 <calculateSPLQ31+0x398>)
 800c77e:	183b      	adds	r3, r7, r0
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c786:	183b      	adds	r3, r7, r0
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3301      	adds	r3, #1
 800c78c:	183a      	adds	r2, r7, r0
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	23ac      	movs	r3, #172	@ 0xac
 800c792:	18fb      	adds	r3, r7, r3
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b7f      	cmp	r3, #127	@ 0x7f
 800c798:	d9e7      	bls.n	800c76a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c79a:	4b7d      	ldr	r3, [pc, #500]	@ (800c990 <calculateSPLQ31+0x390>)
 800c79c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c79e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c7a0:	4b7d      	ldr	r3, [pc, #500]	@ (800c998 <calculateSPLQ31+0x398>)
 800c7a2:	2240      	movs	r2, #64	@ 0x40
 800c7a4:	0018      	movs	r0, r3
 800c7a6:	f011 fe97 	bl	801e4d8 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c7aa:	2330      	movs	r3, #48	@ 0x30
 800c7ac:	18fb      	adds	r3, r7, r3
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	2330      	movs	r3, #48	@ 0x30
 800c7b2:	001a      	movs	r2, r3
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	f013 fcb3 	bl	8020120 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2300      	movs	r3, #0
 800c7be:	21a0      	movs	r1, #160	@ 0xa0
 800c7c0:	1879      	adds	r1, r7, r1
 800c7c2:	600a      	str	r2, [r1, #0]
 800c7c4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	229c      	movs	r2, #156	@ 0x9c
 800c7ca:	18ba      	adds	r2, r7, r2
 800c7cc:	6013      	str	r3, [r2, #0]
 800c7ce:	e05b      	b.n	800c888 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c7d0:	269c      	movs	r6, #156	@ 0x9c
 800c7d2:	19bb      	adds	r3, r7, r6
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	009a      	lsls	r2, r3, #2
 800c7d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7da:	189b      	adds	r3, r3, r2
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	17db      	asrs	r3, r3, #31
 800c7e2:	617b      	str	r3, [r7, #20]
 800c7e4:	4b6f      	ldr	r3, [pc, #444]	@ (800c9a4 <calculateSPLQ31+0x3a4>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	19bb      	adds	r3, r7, r6
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	18d3      	adds	r3, r2, r3
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	60bb      	str	r3, [r7, #8]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6938      	ldr	r0, [r7, #16]
 800c7fe:	6979      	ldr	r1, [r7, #20]
 800c800:	f7f3 fede 	bl	80005c0 <__aeabi_lmul>
 800c804:	0002      	movs	r2, r0
 800c806:	000b      	movs	r3, r1
 800c808:	0010      	movs	r0, r2
 800c80a:	0019      	movs	r1, r3
 800c80c:	23a0      	movs	r3, #160	@ 0xa0
 800c80e:	18fa      	adds	r2, r7, r3
 800c810:	6853      	ldr	r3, [r2, #4]
 800c812:	6812      	ldr	r2, [r2, #0]
 800c814:	1812      	adds	r2, r2, r0
 800c816:	414b      	adcs	r3, r1
 800c818:	21a0      	movs	r1, #160	@ 0xa0
 800c81a:	1879      	adds	r1, r7, r1
 800c81c:	600a      	str	r2, [r1, #0]
 800c81e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c820:	4b61      	ldr	r3, [pc, #388]	@ (800c9a8 <calculateSPLQ31+0x3a8>)
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	19bb      	adds	r3, r7, r6
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	18d3      	adds	r3, r2, r3
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b06      	cmp	r3, #6
 800c82e:	d025      	beq.n	800c87c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c830:	4b5d      	ldr	r3, [pc, #372]	@ (800c9a8 <calculateSPLQ31+0x3a8>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	19bb      	adds	r3, r7, r6
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	18d3      	adds	r3, r2, r3
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2230      	movs	r2, #48	@ 0x30
 800c83e:	18ba      	adds	r2, r7, r2
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	18d3      	adds	r3, r2, r3
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	6859      	ldr	r1, [r3, #4]
 800c848:	19bb      	adds	r3, r7, r6
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	009a      	lsls	r2, r3, #2
 800c84e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c850:	189b      	adds	r3, r3, r2
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	603b      	str	r3, [r7, #0]
 800c856:	17db      	asrs	r3, r3, #31
 800c858:	607b      	str	r3, [r7, #4]
 800c85a:	4b53      	ldr	r3, [pc, #332]	@ (800c9a8 <calculateSPLQ31+0x3a8>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	19be      	adds	r6, r7, r6
 800c860:	6833      	ldr	r3, [r6, #0]
 800c862:	18d3      	adds	r3, r2, r3
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	001e      	movs	r6, r3
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	1880      	adds	r0, r0, r2
 800c86e:	4159      	adcs	r1, r3
 800c870:	2330      	movs	r3, #48	@ 0x30
 800c872:	18fa      	adds	r2, r7, r3
 800c874:	00f3      	lsls	r3, r6, #3
 800c876:	18d3      	adds	r3, r2, r3
 800c878:	6018      	str	r0, [r3, #0]
 800c87a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c87c:	229c      	movs	r2, #156	@ 0x9c
 800c87e:	18bb      	adds	r3, r7, r2
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3301      	adds	r3, #1
 800c884:	18ba      	adds	r2, r7, r2
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	239c      	movs	r3, #156	@ 0x9c
 800c88a:	18fb      	adds	r3, r7, r3
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c890:	d99e      	bls.n	800c7d0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c892:	2380      	movs	r3, #128	@ 0x80
 800c894:	18fb      	adds	r3, r7, r3
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	001a      	movs	r2, r3
 800c89c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	18d3      	adds	r3, r2, r3
 800c8a2:	3b22      	subs	r3, #34	@ 0x22
 800c8a4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c8a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8a8:	17da      	asrs	r2, r3, #31
 800c8aa:	189b      	adds	r3, r3, r2
 800c8ac:	4053      	eors	r3, r2
 800c8ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c8b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da62      	bge.n	800c97c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c8b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8b8:	3b20      	subs	r3, #32
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	db05      	blt.n	800c8ca <calculateSPLQ31+0x2ca>
 800c8be:	22a0      	movs	r2, #160	@ 0xa0
 800c8c0:	18ba      	adds	r2, r7, r2
 800c8c2:	6812      	ldr	r2, [r2, #0]
 800c8c4:	409a      	lsls	r2, r3
 800c8c6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8c8:	e010      	b.n	800c8ec <calculateSPLQ31+0x2ec>
 800c8ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	22a0      	movs	r2, #160	@ 0xa0
 800c8d2:	18ba      	adds	r2, r7, r2
 800c8d4:	6812      	ldr	r2, [r2, #0]
 800c8d6:	40da      	lsrs	r2, r3
 800c8d8:	0013      	movs	r3, r2
 800c8da:	22a4      	movs	r2, #164	@ 0xa4
 800c8dc:	18ba      	adds	r2, r7, r2
 800c8de:	6811      	ldr	r1, [r2, #0]
 800c8e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8e2:	4091      	lsls	r1, r2
 800c8e4:	6279      	str	r1, [r7, #36]	@ 0x24
 800c8e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8ec:	21a0      	movs	r1, #160	@ 0xa0
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8f4:	409a      	lsls	r2, r3
 800c8f6:	623a      	str	r2, [r7, #32]
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c8fc:	187a      	adds	r2, r7, r1
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c902:	2300      	movs	r3, #0
 800c904:	2298      	movs	r2, #152	@ 0x98
 800c906:	18ba      	adds	r2, r7, r2
 800c908:	6013      	str	r3, [r2, #0]
 800c90a:	e031      	b.n	800c970 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c90c:	2330      	movs	r3, #48	@ 0x30
 800c90e:	18fa      	adds	r2, r7, r3
 800c910:	2398      	movs	r3, #152	@ 0x98
 800c912:	18fb      	adds	r3, r7, r3
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	18d3      	adds	r3, r2, r3
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c920:	3920      	subs	r1, #32
 800c922:	2900      	cmp	r1, #0
 800c924:	db03      	blt.n	800c92e <calculateSPLQ31+0x32e>
 800c926:	0010      	movs	r0, r2
 800c928:	4088      	lsls	r0, r1
 800c92a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c92c:	e00c      	b.n	800c948 <calculateSPLQ31+0x348>
 800c92e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c930:	2020      	movs	r0, #32
 800c932:	1a41      	subs	r1, r0, r1
 800c934:	0010      	movs	r0, r2
 800c936:	40c8      	lsrs	r0, r1
 800c938:	0001      	movs	r1, r0
 800c93a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c93c:	001c      	movs	r4, r3
 800c93e:	4084      	lsls	r4, r0
 800c940:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c942:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c944:	4308      	orrs	r0, r1
 800c946:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c948:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c94a:	0013      	movs	r3, r2
 800c94c:	408b      	lsls	r3, r1
 800c94e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c950:	2330      	movs	r3, #48	@ 0x30
 800c952:	18fa      	adds	r2, r7, r3
 800c954:	2098      	movs	r0, #152	@ 0x98
 800c956:	183b      	adds	r3, r7, r0
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	18d3      	adds	r3, r2, r3
 800c95e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c962:	6019      	str	r1, [r3, #0]
 800c964:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c966:	183b      	adds	r3, r7, r0
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3301      	adds	r3, #1
 800c96c:	183a      	adds	r2, r7, r0
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	2398      	movs	r3, #152	@ 0x98
 800c972:	18fb      	adds	r3, r7, r3
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b05      	cmp	r3, #5
 800c978:	d9c8      	bls.n	800c90c <calculateSPLQ31+0x30c>
 800c97a:	e06b      	b.n	800ca54 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c97c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c97e:	3b20      	subs	r3, #32
 800c980:	2b00      	cmp	r3, #0
 800c982:	db13      	blt.n	800c9ac <calculateSPLQ31+0x3ac>
 800c984:	22a4      	movs	r2, #164	@ 0xa4
 800c986:	18ba      	adds	r2, r7, r2
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	40da      	lsrs	r2, r3
 800c98c:	61ba      	str	r2, [r7, #24]
 800c98e:	e01e      	b.n	800c9ce <calculateSPLQ31+0x3ce>
 800c990:	2000199c 	.word	0x2000199c
 800c994:	7fffffff 	.word	0x7fffffff
 800c998:	20001be8 	.word	0x20001be8
 800c99c:	200000b0 	.word	0x200000b0
 800c9a0:	20001bf0 	.word	0x20001bf0
 800c9a4:	200000b4 	.word	0x200000b4
 800c9a8:	200000c0 	.word	0x200000c0
 800c9ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ae:	2220      	movs	r2, #32
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	22a4      	movs	r2, #164	@ 0xa4
 800c9b4:	18ba      	adds	r2, r7, r2
 800c9b6:	6812      	ldr	r2, [r2, #0]
 800c9b8:	409a      	lsls	r2, r3
 800c9ba:	0013      	movs	r3, r2
 800c9bc:	22a0      	movs	r2, #160	@ 0xa0
 800c9be:	18ba      	adds	r2, r7, r2
 800c9c0:	6811      	ldr	r1, [r2, #0]
 800c9c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9c4:	40d1      	lsrs	r1, r2
 800c9c6:	61b9      	str	r1, [r7, #24]
 800c9c8:	69ba      	ldr	r2, [r7, #24]
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	61ba      	str	r2, [r7, #24]
 800c9ce:	23a4      	movs	r3, #164	@ 0xa4
 800c9d0:	18fb      	adds	r3, r7, r3
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9d6:	40da      	lsrs	r2, r3
 800c9d8:	61fa      	str	r2, [r7, #28]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	21a0      	movs	r1, #160	@ 0xa0
 800c9e0:	1879      	adds	r1, r7, r1
 800c9e2:	600a      	str	r2, [r1, #0]
 800c9e4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2294      	movs	r2, #148	@ 0x94
 800c9ea:	18ba      	adds	r2, r7, r2
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	e02c      	b.n	800ca4a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c9f0:	2330      	movs	r3, #48	@ 0x30
 800c9f2:	18fa      	adds	r2, r7, r3
 800c9f4:	2394      	movs	r3, #148	@ 0x94
 800c9f6:	18fb      	adds	r3, r7, r3
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	18d3      	adds	r3, r2, r3
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca04:	3920      	subs	r1, #32
 800ca06:	2900      	cmp	r1, #0
 800ca08:	db03      	blt.n	800ca12 <calculateSPLQ31+0x412>
 800ca0a:	0018      	movs	r0, r3
 800ca0c:	40c8      	lsrs	r0, r1
 800ca0e:	0004      	movs	r4, r0
 800ca10:	e00a      	b.n	800ca28 <calculateSPLQ31+0x428>
 800ca12:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca14:	2020      	movs	r0, #32
 800ca16:	1a41      	subs	r1, r0, r1
 800ca18:	0018      	movs	r0, r3
 800ca1a:	4088      	lsls	r0, r1
 800ca1c:	0001      	movs	r1, r0
 800ca1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca20:	0016      	movs	r6, r2
 800ca22:	40c6      	lsrs	r6, r0
 800ca24:	0034      	movs	r4, r6
 800ca26:	430c      	orrs	r4, r1
 800ca28:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca2a:	40cb      	lsrs	r3, r1
 800ca2c:	001d      	movs	r5, r3
 800ca2e:	2330      	movs	r3, #48	@ 0x30
 800ca30:	18fa      	adds	r2, r7, r3
 800ca32:	2194      	movs	r1, #148	@ 0x94
 800ca34:	187b      	adds	r3, r7, r1
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	18d3      	adds	r3, r2, r3
 800ca3c:	601c      	str	r4, [r3, #0]
 800ca3e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca40:	187b      	adds	r3, r7, r1
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3301      	adds	r3, #1
 800ca46:	187a      	adds	r2, r7, r1
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	2394      	movs	r3, #148	@ 0x94
 800ca4c:	18fb      	adds	r3, r7, r3
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b05      	cmp	r3, #5
 800ca52:	d9cd      	bls.n	800c9f0 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ca54:	230f      	movs	r3, #15
 800ca56:	425d      	negs	r5, r3
 800ca58:	2305      	movs	r3, #5
 800ca5a:	425e      	negs	r6, r3
 800ca5c:	4b4a      	ldr	r3, [pc, #296]	@ (800cb88 <calculateSPLQ31+0x588>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	4b4a      	ldr	r3, [pc, #296]	@ (800cb8c <calculateSPLQ31+0x58c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	21a0      	movs	r1, #160	@ 0xa0
 800ca6a:	1879      	adds	r1, r7, r1
 800ca6c:	6808      	ldr	r0, [r1, #0]
 800ca6e:	6849      	ldr	r1, [r1, #4]
 800ca70:	4c47      	ldr	r4, [pc, #284]	@ (800cb90 <calculateSPLQ31+0x590>)
 800ca72:	9403      	str	r4, [sp, #12]
 800ca74:	4c47      	ldr	r4, [pc, #284]	@ (800cb94 <calculateSPLQ31+0x594>)
 800ca76:	9402      	str	r4, [sp, #8]
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	9200      	str	r2, [sp, #0]
 800ca7c:	0033      	movs	r3, r6
 800ca7e:	002a      	movs	r2, r5
 800ca80:	f000 fa86 	bl	800cf90 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ca84:	2300      	movs	r3, #0
 800ca86:	2290      	movs	r2, #144	@ 0x90
 800ca88:	18ba      	adds	r2, r7, r2
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	e026      	b.n	800cadc <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ca8e:	2330      	movs	r3, #48	@ 0x30
 800ca90:	18fa      	adds	r2, r7, r3
 800ca92:	2490      	movs	r4, #144	@ 0x90
 800ca94:	193b      	adds	r3, r7, r4
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	00db      	lsls	r3, r3, #3
 800ca9a:	18d3      	adds	r3, r2, r3
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	6859      	ldr	r1, [r3, #4]
 800caa0:	230f      	movs	r3, #15
 800caa2:	425d      	negs	r5, r3
 800caa4:	2305      	movs	r3, #5
 800caa6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800caa8:	193b      	adds	r3, r7, r4
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	009a      	lsls	r2, r3, #2
 800caae:	4b3a      	ldr	r3, [pc, #232]	@ (800cb98 <calculateSPLQ31+0x598>)
 800cab0:	18d3      	adds	r3, r2, r3
 800cab2:	193a      	adds	r2, r7, r4
 800cab4:	6812      	ldr	r2, [r2, #0]
 800cab6:	0094      	lsls	r4, r2, #2
 800cab8:	4a38      	ldr	r2, [pc, #224]	@ (800cb9c <calculateSPLQ31+0x59c>)
 800caba:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cabc:	9203      	str	r2, [sp, #12]
 800cabe:	9302      	str	r3, [sp, #8]
 800cac0:	2300      	movs	r3, #0
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	2300      	movs	r3, #0
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	0033      	movs	r3, r6
 800caca:	002a      	movs	r2, r5
 800cacc:	f000 fa60 	bl	800cf90 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cad0:	2490      	movs	r4, #144	@ 0x90
 800cad2:	193b      	adds	r3, r7, r4
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	3301      	adds	r3, #1
 800cad8:	193a      	adds	r2, r7, r4
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	2390      	movs	r3, #144	@ 0x90
 800cade:	18fb      	adds	r3, r7, r3
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b05      	cmp	r3, #5
 800cae4:	d9d3      	bls.n	800ca8e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cae6:	4b2b      	ldr	r3, [pc, #172]	@ (800cb94 <calculateSPLQ31+0x594>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b2d      	ldr	r3, [pc, #180]	@ (800cba0 <calculateSPLQ31+0x5a0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	18d2      	adds	r2, r2, r3
 800caf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cba0 <calculateSPLQ31+0x5a0>)
 800caf2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800caf4:	4b26      	ldr	r3, [pc, #152]	@ (800cb90 <calculateSPLQ31+0x590>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	4b2a      	ldr	r3, [pc, #168]	@ (800cba4 <calculateSPLQ31+0x5a4>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	18d2      	adds	r2, r2, r3
 800cafe:	4b29      	ldr	r3, [pc, #164]	@ (800cba4 <calculateSPLQ31+0x5a4>)
 800cb00:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb02:	2300      	movs	r3, #0
 800cb04:	228c      	movs	r2, #140	@ 0x8c
 800cb06:	18ba      	adds	r2, r7, r2
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	e025      	b.n	800cb58 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb0c:	4b22      	ldr	r3, [pc, #136]	@ (800cb98 <calculateSPLQ31+0x598>)
 800cb0e:	208c      	movs	r0, #140	@ 0x8c
 800cb10:	183a      	adds	r2, r7, r0
 800cb12:	6812      	ldr	r2, [r2, #0]
 800cb14:	0092      	lsls	r2, r2, #2
 800cb16:	58d2      	ldr	r2, [r2, r3]
 800cb18:	4b23      	ldr	r3, [pc, #140]	@ (800cba8 <calculateSPLQ31+0x5a8>)
 800cb1a:	1839      	adds	r1, r7, r0
 800cb1c:	6809      	ldr	r1, [r1, #0]
 800cb1e:	0089      	lsls	r1, r1, #2
 800cb20:	58cb      	ldr	r3, [r1, r3]
 800cb22:	18d1      	adds	r1, r2, r3
 800cb24:	4b20      	ldr	r3, [pc, #128]	@ (800cba8 <calculateSPLQ31+0x5a8>)
 800cb26:	183a      	adds	r2, r7, r0
 800cb28:	6812      	ldr	r2, [r2, #0]
 800cb2a:	0092      	lsls	r2, r2, #2
 800cb2c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cb2e:	4b1b      	ldr	r3, [pc, #108]	@ (800cb9c <calculateSPLQ31+0x59c>)
 800cb30:	183a      	adds	r2, r7, r0
 800cb32:	6812      	ldr	r2, [r2, #0]
 800cb34:	0092      	lsls	r2, r2, #2
 800cb36:	58d2      	ldr	r2, [r2, r3]
 800cb38:	4b1c      	ldr	r3, [pc, #112]	@ (800cbac <calculateSPLQ31+0x5ac>)
 800cb3a:	1839      	adds	r1, r7, r0
 800cb3c:	6809      	ldr	r1, [r1, #0]
 800cb3e:	0089      	lsls	r1, r1, #2
 800cb40:	58cb      	ldr	r3, [r1, r3]
 800cb42:	18d1      	adds	r1, r2, r3
 800cb44:	4b19      	ldr	r3, [pc, #100]	@ (800cbac <calculateSPLQ31+0x5ac>)
 800cb46:	183a      	adds	r2, r7, r0
 800cb48:	6812      	ldr	r2, [r2, #0]
 800cb4a:	0092      	lsls	r2, r2, #2
 800cb4c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb4e:	183b      	adds	r3, r7, r0
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	183a      	adds	r2, r7, r0
 800cb56:	6013      	str	r3, [r2, #0]
 800cb58:	238c      	movs	r3, #140	@ 0x8c
 800cb5a:	18fb      	adds	r3, r7, r3
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d9d4      	bls.n	800cb0c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cb62:	4b13      	ldr	r3, [pc, #76]	@ (800cbb0 <calculateSPLQ31+0x5b0>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	1c5a      	adds	r2, r3, #1
 800cb68:	4b11      	ldr	r3, [pc, #68]	@ (800cbb0 <calculateSPLQ31+0x5b0>)
 800cb6a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cb6c:	4b10      	ldr	r3, [pc, #64]	@ (800cbb0 <calculateSPLQ31+0x5b0>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b0f      	cmp	r3, #15
 800cb72:	d905      	bls.n	800cb80 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cb74:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb4 <calculateSPLQ31+0x5b4>)
 800cb76:	2201      	movs	r2, #1
 800cb78:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cb7a:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb8 <calculateSPLQ31+0x5b8>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	701a      	strb	r2, [r3, #0]
    }
}
 800cb80:	46c0      	nop			@ (mov r8, r8)
 800cb82:	46bd      	mov	sp, r7
 800cb84:	b02f      	add	sp, #188	@ 0xbc
 800cb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb88:	200000b8 	.word	0x200000b8
 800cb8c:	200000bc 	.word	0x200000bc
 800cb90:	20001168 	.word	0x20001168
 800cb94:	20001164 	.word	0x20001164
 800cb98:	2000116c 	.word	0x2000116c
 800cb9c:	20001184 	.word	0x20001184
 800cba0:	20001bac 	.word	0x20001bac
 800cba4:	20001bb0 	.word	0x20001bb0
 800cba8:	20001bb4 	.word	0x20001bb4
 800cbac:	20001bcc 	.word	0x20001bcc
 800cbb0:	20001be4 	.word	0x20001be4
 800cbb4:	2000115b 	.word	0x2000115b
 800cbb8:	20001159 	.word	0x20001159

0800cbbc <resetSPLstate>:

static void resetSPLstate(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cbc2:	4b11      	ldr	r3, [pc, #68]	@ (800cc08 <resetSPLstate+0x4c>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cbc8:	4b10      	ldr	r3, [pc, #64]	@ (800cc0c <resetSPLstate+0x50>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cbce:	4b10      	ldr	r3, [pc, #64]	@ (800cc10 <resetSPLstate+0x54>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	607b      	str	r3, [r7, #4]
 800cbd8:	e00c      	b.n	800cbf4 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cbda:	4b0e      	ldr	r3, [pc, #56]	@ (800cc14 <resetSPLstate+0x58>)
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	0092      	lsls	r2, r2, #2
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800cc18 <resetSPLstate+0x5c>)
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	0092      	lsls	r2, r2, #2
 800cbea:	2100      	movs	r1, #0
 800cbec:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	607b      	str	r3, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b05      	cmp	r3, #5
 800cbf8:	d9ef      	bls.n	800cbda <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cbfa:	4b08      	ldr	r3, [pc, #32]	@ (800cc1c <resetSPLstate+0x60>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	701a      	strb	r2, [r3, #0]
}
 800cc00:	46c0      	nop			@ (mov r8, r8)
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b002      	add	sp, #8
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20001bac 	.word	0x20001bac
 800cc0c:	20001bb0 	.word	0x20001bb0
 800cc10:	20001be4 	.word	0x20001be4
 800cc14:	20001bb4 	.word	0x20001bb4
 800cc18:	20001bcc 	.word	0x20001bcc
 800cc1c:	2000115b 	.word	0x2000115b

0800cc20 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cc20:	b5b0      	push	{r4, r5, r7, lr}
 800cc22:	b090      	sub	sp, #64	@ 0x40
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	0019      	movs	r1, r3
 800cc2c:	1dfb      	adds	r3, r7, #7
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	1dbb      	adds	r3, r7, #6
 800cc32:	1c0a      	adds	r2, r1, #0
 800cc34:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cc36:	1dfb      	adds	r3, r7, #7
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d005      	beq.n	800cc4a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cc3e:	4b3b      	ldr	r3, [pc, #236]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cc44:	4b3a      	ldr	r3, [pc, #232]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cc52:	2305      	movs	r3, #5
 800cc54:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cc56:	2300      	movs	r3, #0
 800cc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc5a:	e040      	b.n	800ccde <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	18d3      	adds	r3, r2, r3
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	409a      	lsls	r2, r3
 800cc6a:	0013      	movs	r3, r2
 800cc6c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cc6e:	4b30      	ldr	r3, [pc, #192]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	425a      	negs	r2, r3
 800cc74:	4b2e      	ldr	r3, [pc, #184]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc76:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cc78:	2418      	movs	r4, #24
 800cc7a:	193a      	adds	r2, r7, r4
 800cc7c:	492c      	ldr	r1, [pc, #176]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc7e:	231c      	movs	r3, #28
 800cc80:	18f8      	adds	r0, r7, r3
 800cc82:	2301      	movs	r3, #1
 800cc84:	f011 fc80 	bl	801e588 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cc88:	2514      	movs	r5, #20
 800cc8a:	197a      	adds	r2, r7, r5
 800cc8c:	1939      	adds	r1, r7, r4
 800cc8e:	4829      	ldr	r0, [pc, #164]	@ (800cd34 <getFilteredMaxAmplitudeQ31+0x114>)
 800cc90:	2301      	movs	r3, #1
 800cc92:	f011 fc47 	bl	801e524 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cc96:	2410      	movs	r4, #16
 800cc98:	193a      	adds	r2, r7, r4
 800cc9a:	4924      	ldr	r1, [pc, #144]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc9c:	4826      	ldr	r0, [pc, #152]	@ (800cd38 <getFilteredMaxAmplitudeQ31+0x118>)
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f011 fc40 	bl	801e524 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800cca4:	4a21      	ldr	r2, [pc, #132]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cca6:	1939      	adds	r1, r7, r4
 800cca8:	1978      	adds	r0, r7, r5
 800ccaa:	2301      	movs	r3, #1
 800ccac:	f011 fc6c 	bl	801e588 <arm_add_q31>

        lastData = fx;
 800ccb0:	69fa      	ldr	r2, [r7, #28]
 800ccb2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccb4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ccb6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	da03      	bge.n	800ccc8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccc6:	e007      	b.n	800ccd8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800ccc8:	4b18      	ldr	r3, [pc, #96]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	dd02      	ble.n	800ccd8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800ccd2:	4b16      	ldr	r3, [pc, #88]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800ccd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccda:	3301      	adds	r3, #1
 800ccdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d3ba      	bcc.n	800cc5c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce8:	17da      	asrs	r2, r3, #31
 800ccea:	189b      	adds	r3, r3, r2
 800ccec:	4053      	eors	r3, r2
 800ccee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800ccf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800ccf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d200      	bcs.n	800ccfe <getFilteredMaxAmplitudeQ31+0xde>
 800ccfc:	0013      	movs	r3, r2
 800ccfe:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	40da      	lsrs	r2, r3
 800cd06:	0013      	movs	r3, r2
 800cd08:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd0a:	1dbb      	adds	r3, r7, #6
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d007      	beq.n	800cd22 <getFilteredMaxAmplitudeQ31+0x102>
 800cd12:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6a3a      	ldr	r2, [r7, #32]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d902      	bls.n	800cd22 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cd1c:	4b07      	ldr	r3, [pc, #28]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd1e:	6a3a      	ldr	r2, [r7, #32]
 800cd20:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cd22:	6a3b      	ldr	r3, [r7, #32]
}
 800cd24:	0018      	movs	r0, r3
 800cd26:	46bd      	mov	sp, r7
 800cd28:	b010      	add	sp, #64	@ 0x40
 800cd2a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd2c:	20001fe8 	.word	0x20001fe8
 800cd30:	20001fec 	.word	0x20001fec
 800cd34:	0802553c 	.word	0x0802553c
 800cd38:	08025540 	.word	0x08025540
 800cd3c:	20001160 	.word	0x20001160

0800cd40 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cd4c:	4913      	ldr	r1, [pc, #76]	@ (800cd9c <floatToIntAndFrac2dp+0x5c>)
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f7f4 f926 	bl	8000fa0 <__aeabi_fmul>
 800cd54:	1c03      	adds	r3, r0, #0
 800cd56:	1c18      	adds	r0, r3, #0
 800cd58:	f016 f84a 	bl	8022df0 <roundf>
 800cd5c:	1c03      	adds	r3, r0, #0
 800cd5e:	1c18      	adds	r0, r3, #0
 800cd60:	f7f3 fc5c 	bl	800061c <__aeabi_f2uiz>
 800cd64:	0003      	movs	r3, r0
 800cd66:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2164      	movs	r1, #100	@ 0x64
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f7f3 fa19 	bl	80001a4 <__udivsi3>
 800cd72:	0003      	movs	r3, r0
 800cd74:	001a      	movs	r2, r3
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2164      	movs	r1, #100	@ 0x64
 800cd86:	434b      	muls	r3, r1
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	701a      	strb	r2, [r3, #0]
}
 800cd92:	46c0      	nop			@ (mov r8, r8)
 800cd94:	46bd      	mov	sp, r7
 800cd96:	b006      	add	sp, #24
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	46c0      	nop			@ (mov r8, r8)
 800cd9c:	42c80000 	.word	0x42c80000

0800cda0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800cdac:	4914      	ldr	r1, [pc, #80]	@ (800ce00 <floatToIntAndFrac1dp+0x60>)
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f7f4 f8f6 	bl	8000fa0 <__aeabi_fmul>
 800cdb4:	1c03      	adds	r3, r0, #0
 800cdb6:	1c18      	adds	r0, r3, #0
 800cdb8:	f016 f81a 	bl	8022df0 <roundf>
 800cdbc:	1c03      	adds	r3, r0, #0
 800cdbe:	1c18      	adds	r0, r3, #0
 800cdc0:	f7f3 fc2c 	bl	800061c <__aeabi_f2uiz>
 800cdc4:	0003      	movs	r3, r0
 800cdc6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	210a      	movs	r1, #10
 800cdcc:	0018      	movs	r0, r3
 800cdce:	f7f3 f9e9 	bl	80001a4 <__udivsi3>
 800cdd2:	0003      	movs	r3, r0
 800cdd4:	001a      	movs	r2, r3
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	1c19      	adds	r1, r3, #0
 800cde6:	0089      	lsls	r1, r1, #2
 800cde8:	18cb      	adds	r3, r1, r3
 800cdea:	18db      	adds	r3, r3, r3
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	701a      	strb	r2, [r3, #0]
}
 800cdf6:	46c0      	nop			@ (mov r8, r8)
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	b006      	add	sp, #24
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	46c0      	nop			@ (mov r8, r8)
 800ce00:	41200000 	.word	0x41200000

0800ce04 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce04:	b590      	push	{r4, r7, lr}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7f4 fbdc 	bl	80015d0 <__aeabi_i2f>
 800ce18:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce1a:	6838      	ldr	r0, [r7, #0]
 800ce1c:	f7f4 fbd8 	bl	80015d0 <__aeabi_i2f>
 800ce20:	1c03      	adds	r3, r0, #0
 800ce22:	4918      	ldr	r1, [pc, #96]	@ (800ce84 <sumToIntAverage+0x80>)
 800ce24:	1c18      	adds	r0, r3, #0
 800ce26:	f7f3 fed5 	bl	8000bd4 <__aeabi_fdiv>
 800ce2a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce2c:	1c19      	adds	r1, r3, #0
 800ce2e:	1c20      	adds	r0, r4, #0
 800ce30:	f7f3 fd46 	bl	80008c0 <__aeabi_fadd>
 800ce34:	1c03      	adds	r3, r0, #0
 800ce36:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce3a:	f7f4 fc15 	bl	8001668 <__aeabi_ui2f>
 800ce3e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce40:	1c19      	adds	r1, r3, #0
 800ce42:	1c20      	adds	r0, r4, #0
 800ce44:	f7f3 fec6 	bl	8000bd4 <__aeabi_fdiv>
 800ce48:	1c03      	adds	r3, r0, #0
 800ce4a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	2310      	movs	r3, #16
 800ce54:	18f9      	adds	r1, r7, r3
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	1c18      	adds	r0, r3, #0
 800ce5a:	f7ff ffa1 	bl	800cda0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2bff      	cmp	r3, #255	@ 0xff
 800ce62:	d906      	bls.n	800ce72 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	22ff      	movs	r2, #255	@ 0xff
 800ce68:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2209      	movs	r2, #9
 800ce6e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ce70:	e003      	b.n	800ce7a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	701a      	strb	r2, [r3, #0]
}
 800ce7a:	46c0      	nop			@ (mov r8, r8)
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	b007      	add	sp, #28
 800ce80:	bd90      	pop	{r4, r7, pc}
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	41200000 	.word	0x41200000

0800ce88 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2280      	movs	r2, #128	@ 0x80
 800ce9a:	0612      	lsls	r2, r2, #24
 800ce9c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	4a18      	ldr	r2, [pc, #96]	@ (800cf04 <findMinMax+0x7c>)
 800cea2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cea4:	2300      	movs	r3, #0
 800cea6:	617b      	str	r3, [r7, #20]
 800cea8:	e022      	b.n	800cef0 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	18d3      	adds	r3, r2, r3
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	da06      	bge.n	800ceca <findMinMax+0x42>
        {
            min[0] = array[i];
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	18d3      	adds	r3, r2, r3
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	dd06      	ble.n	800ceea <findMinMax+0x62>
        {
            max[0] = array[i];
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	18d3      	adds	r3, r2, r3
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	3301      	adds	r3, #1
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	697a      	ldr	r2, [r7, #20]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d3d8      	bcc.n	800ceaa <findMinMax+0x22>
        }
    }
}
 800cef8:	46c0      	nop			@ (mov r8, r8)
 800cefa:	46c0      	nop			@ (mov r8, r8)
 800cefc:	46bd      	mov	sp, r7
 800cefe:	b006      	add	sp, #24
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	46c0      	nop			@ (mov r8, r8)
 800cf04:	7fffffff 	.word	0x7fffffff

0800cf08 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d302      	bcc.n	800cf24 <getPo2factor+0x1c>
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d107      	bne.n	800cf34 <getPo2factor+0x2c>
    {
        return 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e00d      	b.n	800cf44 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	085b      	lsrs	r3, r3, #1
 800cf2c:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	3301      	adds	r3, #1
 800cf32:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d2f5      	bcs.n	800cf28 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cf42:	68fb      	ldr	r3, [r7, #12]
}
 800cf44:	0018      	movs	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	b004      	add	sp, #16
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f7f4 fb84 	bl	8001668 <__aeabi_ui2f>
 800cf60:	1c03      	adds	r3, r0, #0
 800cf62:	1c19      	adds	r1, r3, #0
 800cf64:	68b8      	ldr	r0, [r7, #8]
 800cf66:	f7f4 f81b 	bl	8000fa0 <__aeabi_fmul>
 800cf6a:	1c03      	adds	r3, r0, #0
 800cf6c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	2310      	movs	r3, #16
 800cf76:	18f9      	adds	r1, r7, r3
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	1c18      	adds	r0, r3, #0
 800cf7c:	f7ff fee0 	bl	800cd40 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	801a      	strh	r2, [r3, #0]
}
 800cf88:	46c0      	nop			@ (mov r8, r8)
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	b006      	add	sp, #24
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60b8      	str	r0, [r7, #8]
 800cf98:	60f9      	str	r1, [r7, #12]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa0:	6a3a      	ldr	r2, [r7, #32]
 800cfa2:	68b8      	ldr	r0, [r7, #8]
 800cfa4:	68f9      	ldr	r1, [r7, #12]
 800cfa6:	f7fa f97f 	bl	80072a8 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	18d2      	adds	r2, r2, r3
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	18d2      	adds	r2, r2, r3
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	18d2      	adds	r2, r2, r3
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	18d2      	adds	r2, r2, r3
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800cfca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	0011      	movs	r1, r2
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	f7fa f9f9 	bl	80073c8 <correctIntFracNumber>
}
 800cfd6:	46c0      	nop			@ (mov r8, r8)
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	b004      	add	sp, #16
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b086      	sub	sp, #24
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
 800cff2:	e019      	b.n	800d028 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	18d3      	adds	r3, r2, r3
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	3201      	adds	r2, #1
 800d004:	0052      	lsls	r2, r2, #1
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	188a      	adds	r2, r1, r2
 800d00a:	8812      	ldrh	r2, [r2, #0]
 800d00c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d00e:	0019      	movs	r1, r3
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d018:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d01a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	3301      	adds	r3, #1
 800d020:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	3304      	adds	r3, #4
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d3e1      	bcc.n	800cff4 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d030:	46c0      	nop			@ (mov r8, r8)
 800d032:	46c0      	nop			@ (mov r8, r8)
 800d034:	46bd      	mov	sp, r7
 800d036:	b006      	add	sp, #24
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d03c:	b580      	push	{r7, lr}
 800d03e:	af00      	add	r7, sp, #0
  init = false;
 800d040:	4b02      	ldr	r3, [pc, #8]	@ (800d04c <InitDone+0x10>)
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]
}
 800d046:	46c0      	nop			@ (mov r8, r8)
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	200000c4 	.word	0x200000c4

0800d050 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d056:	f7f9 f951 	bl	80062fc <ReadBatteryVoltage>
 800d05a:	1c02      	adds	r2, r0, #0
 800d05c:	4b25      	ldr	r3, [pc, #148]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d05e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800d060:	4b24      	ldr	r3, [pc, #144]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4924      	ldr	r1, [pc, #144]	@ (800d0f8 <batteryChargeCheck+0xa8>)
 800d066:	1c18      	adds	r0, r3, #0
 800d068:	f7f3 fa62 	bl	8000530 <__aeabi_fcmplt>
 800d06c:	1e03      	subs	r3, r0, #0
 800d06e:	d002      	beq.n	800d076 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d070:	1dfb      	adds	r3, r7, #7
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800d076:	4b1f      	ldr	r3, [pc, #124]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	1c18      	adds	r0, r3, #0
 800d07c:	f7f6 f9f2 	bl	8003464 <__aeabi_f2d>
 800d080:	4a1e      	ldr	r2, [pc, #120]	@ (800d0fc <batteryChargeCheck+0xac>)
 800d082:	4b1f      	ldr	r3, [pc, #124]	@ (800d100 <batteryChargeCheck+0xb0>)
 800d084:	f7f3 fa1a 	bl	80004bc <__aeabi_dcmplt>
 800d088:	1e03      	subs	r3, r0, #0
 800d08a:	d00a      	beq.n	800d0a2 <batteryChargeCheck+0x52>
 800d08c:	4b19      	ldr	r3, [pc, #100]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4919      	ldr	r1, [pc, #100]	@ (800d0f8 <batteryChargeCheck+0xa8>)
 800d092:	1c18      	adds	r0, r3, #0
 800d094:	f7f3 fa6a 	bl	800056c <__aeabi_fcmpge>
 800d098:	1e03      	subs	r3, r0, #0
 800d09a:	d002      	beq.n	800d0a2 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d09c:	1dfb      	adds	r3, r7, #7
 800d09e:	2201      	movs	r2, #1
 800d0a0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800d0a2:	4b14      	ldr	r3, [pc, #80]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2181      	movs	r1, #129	@ 0x81
 800d0a8:	05c9      	lsls	r1, r1, #23
 800d0aa:	1c18      	adds	r0, r3, #0
 800d0ac:	f7f3 fa40 	bl	8000530 <__aeabi_fcmplt>
 800d0b0:	1e03      	subs	r3, r0, #0
 800d0b2:	d00d      	beq.n	800d0d0 <batteryChargeCheck+0x80>
 800d0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	1c18      	adds	r0, r3, #0
 800d0ba:	f7f6 f9d3 	bl	8003464 <__aeabi_f2d>
 800d0be:	4a0f      	ldr	r2, [pc, #60]	@ (800d0fc <batteryChargeCheck+0xac>)
 800d0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d100 <batteryChargeCheck+0xb0>)
 800d0c2:	f7f3 fa19 	bl	80004f8 <__aeabi_dcmpge>
 800d0c6:	1e03      	subs	r3, r0, #0
 800d0c8:	d002      	beq.n	800d0d0 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d0ca:	1dfb      	adds	r3, r7, #7
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800d0d0:	4b08      	ldr	r3, [pc, #32]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2181      	movs	r1, #129	@ 0x81
 800d0d6:	05c9      	lsls	r1, r1, #23
 800d0d8:	1c18      	adds	r0, r3, #0
 800d0da:	f7f3 fa47 	bl	800056c <__aeabi_fcmpge>
 800d0de:	1e03      	subs	r3, r0, #0
 800d0e0:	d002      	beq.n	800d0e8 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d0e2:	1dfb      	adds	r3, r7, #7
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d0e8:	1dfb      	adds	r3, r7, #7
 800d0ea:	781b      	ldrb	r3, [r3, #0]
}
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	b002      	add	sp, #8
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20001ffc 	.word	0x20001ffc
 800d0f8:	40600000 	.word	0x40600000
 800d0fc:	9999999a 	.word	0x9999999a
 800d100:	400d9999 	.word	0x400d9999

0800d104 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d104:	b5b0      	push	{r4, r5, r7, lr}
 800d106:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d108:	f7f9 f95a 	bl	80063c0 <ReadSolarVoltage>
 800d10c:	0003      	movs	r3, r0
 800d10e:	001a      	movs	r2, r3
 800d110:	4b1a      	ldr	r3, [pc, #104]	@ (800d17c <Calculate_LED_ON+0x78>)
 800d112:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d114:	4b19      	ldr	r3, [pc, #100]	@ (800d17c <Calculate_LED_ON+0x78>)
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	4a19      	ldr	r2, [pc, #100]	@ (800d180 <Calculate_LED_ON+0x7c>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d802      	bhi.n	800d124 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d11e:	4b17      	ldr	r3, [pc, #92]	@ (800d17c <Calculate_LED_ON+0x78>)
 800d120:	4a18      	ldr	r2, [pc, #96]	@ (800d184 <Calculate_LED_ON+0x80>)
 800d122:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d124:	4b15      	ldr	r3, [pc, #84]	@ (800d17c <Calculate_LED_ON+0x78>)
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	4a17      	ldr	r2, [pc, #92]	@ (800d188 <Calculate_LED_ON+0x84>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d902      	bls.n	800d134 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d12e:	4b13      	ldr	r3, [pc, #76]	@ (800d17c <Calculate_LED_ON+0x78>)
 800d130:	4a15      	ldr	r2, [pc, #84]	@ (800d188 <Calculate_LED_ON+0x84>)
 800d132:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d134:	4b11      	ldr	r3, [pc, #68]	@ (800d17c <Calculate_LED_ON+0x78>)
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	0018      	movs	r0, r3
 800d13a:	f7f6 f941 	bl	80033c0 <__aeabi_i2d>
 800d13e:	0004      	movs	r4, r0
 800d140:	000d      	movs	r5, r1
 800d142:	4b0e      	ldr	r3, [pc, #56]	@ (800d17c <Calculate_LED_ON+0x78>)
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	001a      	movs	r2, r3
 800d148:	4b10      	ldr	r3, [pc, #64]	@ (800d18c <Calculate_LED_ON+0x88>)
 800d14a:	1a9b      	subs	r3, r3, r2
 800d14c:	0018      	movs	r0, r3
 800d14e:	f7f6 f937 	bl	80033c0 <__aeabi_i2d>
 800d152:	2200      	movs	r2, #0
 800d154:	4b0e      	ldr	r3, [pc, #56]	@ (800d190 <Calculate_LED_ON+0x8c>)
 800d156:	f7f5 fa71 	bl	800263c <__aeabi_dmul>
 800d15a:	0002      	movs	r2, r0
 800d15c:	000b      	movs	r3, r1
 800d15e:	0020      	movs	r0, r4
 800d160:	0029      	movs	r1, r5
 800d162:	f7f4 fac3 	bl	80016ec <__aeabi_dadd>
 800d166:	0002      	movs	r2, r0
 800d168:	000b      	movs	r3, r1
 800d16a:	0010      	movs	r0, r2
 800d16c:	0019      	movs	r1, r3
 800d16e:	f7f3 fa6d 	bl	800064c <__aeabi_d2uiz>
 800d172:	0003      	movs	r3, r0
 800d174:	b29b      	uxth	r3, r3
}
 800d176:	0018      	movs	r0, r3
 800d178:	46bd      	mov	sp, r7
 800d17a:	bdb0      	pop	{r4, r5, r7, pc}
 800d17c:	20002000 	.word	0x20002000
 800d180:	00000b53 	.word	0x00000b53
 800d184:	00000b54 	.word	0x00000b54
 800d188:	0000125c 	.word	0x0000125c
 800d18c:	00000dee 	.word	0x00000dee
 800d190:	3ff80000 	.word	0x3ff80000

0800d194 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d194:	b590      	push	{r4, r7, lr}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	0004      	movs	r4, r0
 800d19c:	0008      	movs	r0, r1
 800d19e:	0011      	movs	r1, r2
 800d1a0:	1dbb      	adds	r3, r7, #6
 800d1a2:	1c22      	adds	r2, r4, #0
 800d1a4:	801a      	strh	r2, [r3, #0]
 800d1a6:	1d3b      	adds	r3, r7, #4
 800d1a8:	1c02      	adds	r2, r0, #0
 800d1aa:	801a      	strh	r2, [r3, #0]
 800d1ac:	1cbb      	adds	r3, r7, #2
 800d1ae:	1c0a      	adds	r2, r1, #0
 800d1b0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d1b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f0 <SetStatusLED+0x5c>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d107      	bne.n	800d1ca <SetStatusLED+0x36>
 800d1ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d1f4 <SetStatusLED+0x60>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d103      	bne.n	800d1ca <SetStatusLED+0x36>
 800d1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f8 <SetStatusLED+0x64>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00e      	beq.n	800d1e8 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d1ca:	2380      	movs	r3, #128	@ 0x80
 800d1cc:	05db      	lsls	r3, r3, #23
 800d1ce:	1dba      	adds	r2, r7, #6
 800d1d0:	8812      	ldrh	r2, [r2, #0]
 800d1d2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d1d4:	2380      	movs	r3, #128	@ 0x80
 800d1d6:	05db      	lsls	r3, r3, #23
 800d1d8:	1d3a      	adds	r2, r7, #4
 800d1da:	8812      	ldrh	r2, [r2, #0]
 800d1dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d1de:	2380      	movs	r3, #128	@ 0x80
 800d1e0:	05db      	lsls	r3, r3, #23
 800d1e2:	1cba      	adds	r2, r7, #2
 800d1e4:	8812      	ldrh	r2, [r2, #0]
 800d1e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d1e8:	46c0      	nop			@ (mov r8, r8)
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	b003      	add	sp, #12
 800d1ee:	bd90      	pop	{r4, r7, pc}
 800d1f0:	20001ff1 	.word	0x20001ff1
 800d1f4:	200000c4 	.word	0x200000c4
 800d1f8:	20001ff2 	.word	0x20001ff2

0800d1fc <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d1fc:	b590      	push	{r4, r7, lr}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	0004      	movs	r4, r0
 800d204:	0008      	movs	r0, r1
 800d206:	0011      	movs	r1, r2
 800d208:	1dfb      	adds	r3, r7, #7
 800d20a:	1c22      	adds	r2, r4, #0
 800d20c:	701a      	strb	r2, [r3, #0]
 800d20e:	1dbb      	adds	r3, r7, #6
 800d210:	1c02      	adds	r2, r0, #0
 800d212:	701a      	strb	r2, [r3, #0]
 800d214:	1d7b      	adds	r3, r7, #5
 800d216:	1c0a      	adds	r2, r1, #0
 800d218:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d21a:	4b19      	ldr	r3, [pc, #100]	@ (800d280 <SetDBLED+0x84>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d107      	bne.n	800d232 <SetDBLED+0x36>
 800d222:	4b18      	ldr	r3, [pc, #96]	@ (800d284 <SetDBLED+0x88>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d103      	bne.n	800d232 <SetDBLED+0x36>
 800d22a:	4b17      	ldr	r3, [pc, #92]	@ (800d288 <SetDBLED+0x8c>)
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d022      	beq.n	800d278 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d232:	1dfb      	adds	r3, r7, #7
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2201      	movs	r2, #1
 800d238:	4053      	eors	r3, r2
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	001a      	movs	r2, r3
 800d23e:	4b13      	ldr	r3, [pc, #76]	@ (800d28c <SetDBLED+0x90>)
 800d240:	2101      	movs	r1, #1
 800d242:	0018      	movs	r0, r3
 800d244:	f002 ffa5 	bl	8010192 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d248:	1dbb      	adds	r3, r7, #6
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2201      	movs	r2, #1
 800d24e:	4053      	eors	r3, r2
 800d250:	b2db      	uxtb	r3, r3
 800d252:	001a      	movs	r2, r3
 800d254:	2380      	movs	r3, #128	@ 0x80
 800d256:	005b      	lsls	r3, r3, #1
 800d258:	480c      	ldr	r0, [pc, #48]	@ (800d28c <SetDBLED+0x90>)
 800d25a:	0019      	movs	r1, r3
 800d25c:	f002 ff99 	bl	8010192 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d260:	1d7b      	adds	r3, r7, #5
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2201      	movs	r2, #1
 800d266:	4053      	eors	r3, r2
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	001a      	movs	r2, r3
 800d26c:	2380      	movs	r3, #128	@ 0x80
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4806      	ldr	r0, [pc, #24]	@ (800d28c <SetDBLED+0x90>)
 800d272:	0019      	movs	r1, r3
 800d274:	f002 ff8d 	bl	8010192 <HAL_GPIO_WritePin>
  }
}
 800d278:	46c0      	nop			@ (mov r8, r8)
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b003      	add	sp, #12
 800d27e:	bd90      	pop	{r4, r7, pc}
 800d280:	20001ff1 	.word	0x20001ff1
 800d284:	200000c4 	.word	0x200000c4
 800d288:	20001ff2 	.word	0x20001ff2
 800d28c:	50000400 	.word	0x50000400

0800d290 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	0004      	movs	r4, r0
 800d298:	0008      	movs	r0, r1
 800d29a:	0011      	movs	r1, r2
 800d29c:	1dbb      	adds	r3, r7, #6
 800d29e:	1c22      	adds	r2, r4, #0
 800d2a0:	801a      	strh	r2, [r3, #0]
 800d2a2:	1d3b      	adds	r3, r7, #4
 800d2a4:	1c02      	adds	r2, r0, #0
 800d2a6:	801a      	strh	r2, [r3, #0]
 800d2a8:	1cbb      	adds	r3, r7, #2
 800d2aa:	1c0a      	adds	r2, r1, #0
 800d2ac:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d2ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d2e8 <SetVocLED+0x58>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d107      	bne.n	800d2c6 <SetVocLED+0x36>
 800d2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d2ec <SetVocLED+0x5c>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d103      	bne.n	800d2c6 <SetVocLED+0x36>
 800d2be:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f0 <SetVocLED+0x60>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00b      	beq.n	800d2de <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d2f4 <SetVocLED+0x64>)
 800d2c8:	1dba      	adds	r2, r7, #6
 800d2ca:	8812      	ldrh	r2, [r2, #0]
 800d2cc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d2ce:	4b09      	ldr	r3, [pc, #36]	@ (800d2f4 <SetVocLED+0x64>)
 800d2d0:	1d3a      	adds	r2, r7, #4
 800d2d2:	8812      	ldrh	r2, [r2, #0]
 800d2d4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d2d6:	4b07      	ldr	r3, [pc, #28]	@ (800d2f4 <SetVocLED+0x64>)
 800d2d8:	1cba      	adds	r2, r7, #2
 800d2da:	8812      	ldrh	r2, [r2, #0]
 800d2dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d2de:	46c0      	nop			@ (mov r8, r8)
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	b003      	add	sp, #12
 800d2e4:	bd90      	pop	{r4, r7, pc}
 800d2e6:	46c0      	nop			@ (mov r8, r8)
 800d2e8:	20001ff1 	.word	0x20001ff1
 800d2ec:	200000c4 	.word	0x200000c4
 800d2f0:	20001ff2 	.word	0x20001ff2
 800d2f4:	40000400 	.word	0x40000400

0800d2f8 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d2fc:	4b08      	ldr	r3, [pc, #32]	@ (800d320 <SetMeasurementIndicator+0x28>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d103      	bne.n	800d30c <SetMeasurementIndicator+0x14>
 800d304:	4b07      	ldr	r3, [pc, #28]	@ (800d324 <SetMeasurementIndicator+0x2c>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d006      	beq.n	800d31a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d30c:	f7ff fefa 	bl	800d104 <Calculate_LED_ON>
 800d310:	0003      	movs	r3, r0
 800d312:	001a      	movs	r2, r3
 800d314:	2380      	movs	r3, #128	@ 0x80
 800d316:	05db      	lsls	r3, r3, #23
 800d318:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d31a:	46c0      	nop			@ (mov r8, r8)
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20001ff1 	.word	0x20001ff1
 800d324:	20001ff2 	.word	0x20001ff2

0800d328 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d32c:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <ResetMeasurementIndicator+0x24>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d103      	bne.n	800d33c <ResetMeasurementIndicator+0x14>
 800d334:	4b06      	ldr	r3, [pc, #24]	@ (800d350 <ResetMeasurementIndicator+0x28>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d004      	beq.n	800d346 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d33c:	2380      	movs	r3, #128	@ 0x80
 800d33e:	05db      	lsls	r3, r3, #23
 800d340:	22fa      	movs	r2, #250	@ 0xfa
 800d342:	0112      	lsls	r2, r2, #4
 800d344:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d346:	46c0      	nop			@ (mov r8, r8)
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20001ff1 	.word	0x20001ff1
 800d350:	20001ff2 	.word	0x20001ff2

0800d354 <SetMICIndicator>:
void SetMICIndicator(){
 800d354:	b580      	push	{r7, lr}
 800d356:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d358:	4b16      	ldr	r3, [pc, #88]	@ (800d3b4 <SetMICIndicator+0x60>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d103      	bne.n	800d368 <SetMICIndicator+0x14>
 800d360:	4b15      	ldr	r3, [pc, #84]	@ (800d3b8 <SetMICIndicator+0x64>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d007      	beq.n	800d378 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d368:	f7ff fecc 	bl	800d104 <Calculate_LED_ON>
 800d36c:	0003      	movs	r3, r0
 800d36e:	001a      	movs	r2, r3
 800d370:	2380      	movs	r3, #128	@ 0x80
 800d372:	05db      	lsls	r3, r3, #23
 800d374:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
    }
  }
}
 800d376:	e019      	b.n	800d3ac <SetMICIndicator+0x58>
    if (batteryCharge > 3.7) {
 800d378:	4b10      	ldr	r3, [pc, #64]	@ (800d3bc <SetMICIndicator+0x68>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	1c18      	adds	r0, r3, #0
 800d37e:	f7f6 f871 	bl	8003464 <__aeabi_f2d>
 800d382:	4a0f      	ldr	r2, [pc, #60]	@ (800d3c0 <SetMICIndicator+0x6c>)
 800d384:	4b0f      	ldr	r3, [pc, #60]	@ (800d3c4 <SetMICIndicator+0x70>)
 800d386:	f7f3 f8ad 	bl	80004e4 <__aeabi_dcmpgt>
 800d38a:	1e03      	subs	r3, r0, #0
 800d38c:	d007      	beq.n	800d39e <SetMICIndicator+0x4a>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d38e:	f7ff feb9 	bl	800d104 <Calculate_LED_ON>
 800d392:	0003      	movs	r3, r0
 800d394:	001a      	movs	r2, r3
 800d396:	2380      	movs	r3, #128	@ 0x80
 800d398:	05db      	lsls	r3, r3, #23
 800d39a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d39c:	e006      	b.n	800d3ac <SetMICIndicator+0x58>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d39e:	f7ff feb1 	bl	800d104 <Calculate_LED_ON>
 800d3a2:	0003      	movs	r3, r0
 800d3a4:	001a      	movs	r2, r3
 800d3a6:	2380      	movs	r3, #128	@ 0x80
 800d3a8:	05db      	lsls	r3, r3, #23
 800d3aa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d3ac:	46c0      	nop			@ (mov r8, r8)
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	46c0      	nop			@ (mov r8, r8)
 800d3b4:	20001ff1 	.word	0x20001ff1
 800d3b8:	20001ff2 	.word	0x20001ff2
 800d3bc:	20001ffc 	.word	0x20001ffc
 800d3c0:	9999999a 	.word	0x9999999a
 800d3c4:	400d9999 	.word	0x400d9999

0800d3c8 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3cc:	4b13      	ldr	r3, [pc, #76]	@ (800d41c <ResetMICIndicator+0x54>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d103      	bne.n	800d3dc <ResetMICIndicator+0x14>
 800d3d4:	4b12      	ldr	r3, [pc, #72]	@ (800d420 <ResetMICIndicator+0x58>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d005      	beq.n	800d3e8 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d3dc:	2380      	movs	r3, #128	@ 0x80
 800d3de:	05db      	lsls	r3, r3, #23
 800d3e0:	22fa      	movs	r2, #250	@ 0xfa
 800d3e2:	0112      	lsls	r2, r2, #4
 800d3e4:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d3e6:	e015      	b.n	800d414 <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800d3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d424 <ResetMICIndicator+0x5c>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	1c18      	adds	r0, r3, #0
 800d3ee:	f7f6 f839 	bl	8003464 <__aeabi_f2d>
 800d3f2:	4a0d      	ldr	r2, [pc, #52]	@ (800d428 <ResetMICIndicator+0x60>)
 800d3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d42c <ResetMICIndicator+0x64>)
 800d3f6:	f7f3 f875 	bl	80004e4 <__aeabi_dcmpgt>
 800d3fa:	1e03      	subs	r3, r0, #0
 800d3fc:	d005      	beq.n	800d40a <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800d3fe:	2380      	movs	r3, #128	@ 0x80
 800d400:	05db      	lsls	r3, r3, #23
 800d402:	22fa      	movs	r2, #250	@ 0xfa
 800d404:	0112      	lsls	r2, r2, #4
 800d406:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d408:	e004      	b.n	800d414 <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800d40a:	2380      	movs	r3, #128	@ 0x80
 800d40c:	05db      	lsls	r3, r3, #23
 800d40e:	22fa      	movs	r2, #250	@ 0xfa
 800d410:	0112      	lsls	r2, r2, #4
 800d412:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d414:	46c0      	nop			@ (mov r8, r8)
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	20001ff1 	.word	0x20001ff1
 800d420:	20001ff2 	.word	0x20001ff2
 800d424:	20001ffc 	.word	0x20001ffc
 800d428:	1eb851ec 	.word	0x1eb851ec
 800d42c:	400deb85 	.word	0x400deb85

0800d430 <SetESPIndicator>:
void SetESPIndicator(){
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d434:	4b08      	ldr	r3, [pc, #32]	@ (800d458 <SetESPIndicator+0x28>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d103      	bne.n	800d444 <SetESPIndicator+0x14>
 800d43c:	4b07      	ldr	r3, [pc, #28]	@ (800d45c <SetESPIndicator+0x2c>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d444:	f7ff fe5e 	bl	800d104 <Calculate_LED_ON>
 800d448:	0003      	movs	r3, r0
 800d44a:	001a      	movs	r2, r3
 800d44c:	2380      	movs	r3, #128	@ 0x80
 800d44e:	05db      	lsls	r3, r3, #23
 800d450:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d452:	46c0      	nop			@ (mov r8, r8)
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20001ff1 	.word	0x20001ff1
 800d45c:	20001ff2 	.word	0x20001ff2

0800d460 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d464:	4b07      	ldr	r3, [pc, #28]	@ (800d484 <ResetESPIndicator+0x24>)
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <ResetESPIndicator+0x14>
 800d46c:	4b06      	ldr	r3, [pc, #24]	@ (800d488 <ResetESPIndicator+0x28>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d004      	beq.n	800d47e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d474:	2380      	movs	r3, #128	@ 0x80
 800d476:	05db      	lsls	r3, r3, #23
 800d478:	22fa      	movs	r2, #250	@ 0xfa
 800d47a:	0112      	lsls	r2, r2, #4
 800d47c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d47e:	46c0      	nop			@ (mov r8, r8)
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	20001ff1 	.word	0x20001ff1
 800d488:	20001ff2 	.word	0x20001ff2

0800d48c <SetPMIndicator>:

void SetPMIndicator() {
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d490:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d0 <SetPMIndicator+0x44>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d103      	bne.n	800d4a0 <SetPMIndicator+0x14>
 800d498:	4b0e      	ldr	r3, [pc, #56]	@ (800d4d4 <SetPMIndicator+0x48>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d014      	beq.n	800d4ca <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4a0:	f7ff fe30 	bl	800d104 <Calculate_LED_ON>
 800d4a4:	0003      	movs	r3, r0
 800d4a6:	001a      	movs	r2, r3
 800d4a8:	2380      	movs	r3, #128	@ 0x80
 800d4aa:	05db      	lsls	r3, r3, #23
 800d4ac:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d4ae:	f7ff fe29 	bl	800d104 <Calculate_LED_ON>
 800d4b2:	0003      	movs	r3, r0
 800d4b4:	001a      	movs	r2, r3
 800d4b6:	2380      	movs	r3, #128	@ 0x80
 800d4b8:	05db      	lsls	r3, r3, #23
 800d4ba:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d4bc:	f7ff fe22 	bl	800d104 <Calculate_LED_ON>
 800d4c0:	0003      	movs	r3, r0
 800d4c2:	001a      	movs	r2, r3
 800d4c4:	2380      	movs	r3, #128	@ 0x80
 800d4c6:	05db      	lsls	r3, r3, #23
 800d4c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d4ca:	46c0      	nop			@ (mov r8, r8)
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	20001ff1 	.word	0x20001ff1
 800d4d4:	20001ff2 	.word	0x20001ff2

0800d4d8 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d510 <ResetPMIndicator+0x38>)
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d103      	bne.n	800d4ec <ResetPMIndicator+0x14>
 800d4e4:	4b0b      	ldr	r3, [pc, #44]	@ (800d514 <ResetPMIndicator+0x3c>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00e      	beq.n	800d50a <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d4ec:	2380      	movs	r3, #128	@ 0x80
 800d4ee:	05db      	lsls	r3, r3, #23
 800d4f0:	22fa      	movs	r2, #250	@ 0xfa
 800d4f2:	0112      	lsls	r2, r2, #4
 800d4f4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d4f6:	2380      	movs	r3, #128	@ 0x80
 800d4f8:	05db      	lsls	r3, r3, #23
 800d4fa:	22fa      	movs	r2, #250	@ 0xfa
 800d4fc:	0112      	lsls	r2, r2, #4
 800d4fe:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d500:	2380      	movs	r3, #128	@ 0x80
 800d502:	05db      	lsls	r3, r3, #23
 800d504:	22fa      	movs	r2, #250	@ 0xfa
 800d506:	0112      	lsls	r2, r2, #4
 800d508:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d50a:	46c0      	nop			@ (mov r8, r8)
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20001ff1 	.word	0x20001ff1
 800d514:	20001ff2 	.word	0x20001ff2

0800d518 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d51c:	23fa      	movs	r3, #250	@ 0xfa
 800d51e:	011a      	lsls	r2, r3, #4
 800d520:	23fa      	movs	r3, #250	@ 0xfa
 800d522:	0119      	lsls	r1, r3, #4
 800d524:	23fa      	movs	r3, #250	@ 0xfa
 800d526:	011b      	lsls	r3, r3, #4
 800d528:	0018      	movs	r0, r3
 800d52a:	f7ff fe33 	bl	800d194 <SetStatusLED>
  SetDBLED(false,false,false);
 800d52e:	2200      	movs	r2, #0
 800d530:	2100      	movs	r1, #0
 800d532:	2000      	movs	r0, #0
 800d534:	f7ff fe62 	bl	800d1fc <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d538:	23fa      	movs	r3, #250	@ 0xfa
 800d53a:	011a      	lsls	r2, r3, #4
 800d53c:	23fa      	movs	r3, #250	@ 0xfa
 800d53e:	0119      	lsls	r1, r3, #4
 800d540:	23fa      	movs	r3, #250	@ 0xfa
 800d542:	011b      	lsls	r3, r3, #4
 800d544:	0018      	movs	r0, r3
 800d546:	f7ff fea3 	bl	800d290 <SetVocLED>
return;
 800d54a:	46c0      	nop			@ (mov r8, r8)
}
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <powerCheck>:

Battery_Status powerCheck(){
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d556:	f7f8 ff87 	bl	8006468 <Check_USB_PowerOn>
 800d55a:	0003      	movs	r3, r0
 800d55c:	001a      	movs	r2, r3
 800d55e:	2301      	movs	r3, #1
 800d560:	4053      	eors	r3, r2
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b00      	cmp	r3, #0
 800d566:	d005      	beq.n	800d574 <powerCheck+0x24>
    status = batteryChargeCheck();
 800d568:	1dfc      	adds	r4, r7, #7
 800d56a:	f7ff fd71 	bl	800d050 <batteryChargeCheck>
 800d56e:	0003      	movs	r3, r0
 800d570:	7023      	strb	r3, [r4, #0]
 800d572:	e002      	b.n	800d57a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d574:	1dfb      	adds	r3, r7, #7
 800d576:	2204      	movs	r2, #4
 800d578:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800d57a:	1dfb      	adds	r3, r7, #7
 800d57c:	781b      	ldrb	r3, [r3, #0]
}
 800d57e:	0018      	movs	r0, r3
 800d580:	46bd      	mov	sp, r7
 800d582:	b003      	add	sp, #12
 800d584:	bd90      	pop	{r4, r7, pc}
	...

0800d588 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	0002      	movs	r2, r0
 800d590:	1dfb      	adds	r3, r7, #7
 800d592:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d594:	1dfb      	adds	r3, r7, #7
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	2b04      	cmp	r3, #4
 800d59a:	d105      	bne.n	800d5a8 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800d59c:	4a18      	ldr	r2, [pc, #96]	@ (800d600 <powerDisplay+0x78>)
 800d59e:	4b19      	ldr	r3, [pc, #100]	@ (800d604 <powerDisplay+0x7c>)
 800d5a0:	0019      	movs	r1, r3
 800d5a2:	2003      	movs	r0, #3
 800d5a4:	f000 ff1e 	bl	800e3e4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d5a8:	1dfb      	adds	r3, r7, #7
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d105      	bne.n	800d5bc <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d5b0:	4a15      	ldr	r2, [pc, #84]	@ (800d608 <powerDisplay+0x80>)
 800d5b2:	4b14      	ldr	r3, [pc, #80]	@ (800d604 <powerDisplay+0x7c>)
 800d5b4:	0019      	movs	r1, r3
 800d5b6:	2003      	movs	r0, #3
 800d5b8:	f000 ff14 	bl	800e3e4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d5bc:	1dfb      	adds	r3, r7, #7
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d105      	bne.n	800d5d0 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d5c4:	4a11      	ldr	r2, [pc, #68]	@ (800d60c <powerDisplay+0x84>)
 800d5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d604 <powerDisplay+0x7c>)
 800d5c8:	0019      	movs	r1, r3
 800d5ca:	2003      	movs	r0, #3
 800d5cc:	f000 ff0a 	bl	800e3e4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d5d0:	1dfb      	adds	r3, r7, #7
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d105      	bne.n	800d5e4 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d5d8:	4a0d      	ldr	r2, [pc, #52]	@ (800d610 <powerDisplay+0x88>)
 800d5da:	4b0a      	ldr	r3, [pc, #40]	@ (800d604 <powerDisplay+0x7c>)
 800d5dc:	0019      	movs	r1, r3
 800d5de:	2003      	movs	r0, #3
 800d5e0:	f000 ff00 	bl	800e3e4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d5e4:	1dfb      	adds	r3, r7, #7
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d105      	bne.n	800d5f8 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d5ec:	4a09      	ldr	r2, [pc, #36]	@ (800d614 <powerDisplay+0x8c>)
 800d5ee:	4b05      	ldr	r3, [pc, #20]	@ (800d604 <powerDisplay+0x7c>)
 800d5f0:	0019      	movs	r1, r3
 800d5f2:	2003      	movs	r0, #3
 800d5f4:	f000 fef6 	bl	800e3e4 <CreateLine>
  }
}
 800d5f8:	46c0      	nop			@ (mov r8, r8)
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	b002      	add	sp, #8
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	08024d4c 	.word	0x08024d4c
 800d604:	08024d5c 	.word	0x08024d5c
 800d608:	08024d60 	.word	0x08024d60
 800d60c:	08024d78 	.word	0x08024d78
 800d610:	08024d98 	.word	0x08024d98
 800d614:	08024db0 	.word	0x08024db0

0800d618 <configCheck>:

void configCheck(){
 800d618:	b590      	push	{r4, r7, lr}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d61e:	f7f8 ff32 	bl	8006486 <BootButton_Pressed>
 800d622:	1e03      	subs	r3, r0, #0
 800d624:	d007      	beq.n	800d636 <configCheck+0x1e>
 800d626:	f7f8 ff3f 	bl	80064a8 <UserButton_Pressed>
 800d62a:	1e03      	subs	r3, r0, #0
 800d62c:	d003      	beq.n	800d636 <configCheck+0x1e>
    configSet = true;
 800d62e:	4ba2      	ldr	r3, [pc, #648]	@ (800d8b8 <configCheck+0x2a0>)
 800d630:	2201      	movs	r2, #1
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	e00a      	b.n	800d64c <configCheck+0x34>
  }
  else{
    configSet = false;
 800d636:	4ba0      	ldr	r3, [pc, #640]	@ (800d8b8 <configCheck+0x2a0>)
 800d638:	2200      	movs	r2, #0
 800d63a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d63c:	f001 fb18 	bl	800ec70 <HAL_GetTick>
 800d640:	0003      	movs	r3, r0
 800d642:	22fa      	movs	r2, #250	@ 0xfa
 800d644:	00d2      	lsls	r2, r2, #3
 800d646:	189a      	adds	r2, r3, r2
 800d648:	4b9c      	ldr	r3, [pc, #624]	@ (800d8bc <configCheck+0x2a4>)
 800d64a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d64c:	4b9a      	ldr	r3, [pc, #616]	@ (800d8b8 <configCheck+0x2a0>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00d      	beq.n	800d670 <configCheck+0x58>
 800d654:	4b99      	ldr	r3, [pc, #612]	@ (800d8bc <configCheck+0x2a4>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	0018      	movs	r0, r3
 800d65a:	f000 fe6d 	bl	800e338 <TimestampIsReached>
 800d65e:	1e03      	subs	r3, r0, #0
 800d660:	d006      	beq.n	800d670 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d662:	f7f6 fa1b 	bl	8003a9c <SetConfigMode>
    SetDBLED(true, true, true);
 800d666:	2201      	movs	r2, #1
 800d668:	2101      	movs	r1, #1
 800d66a:	2001      	movs	r0, #1
 800d66c:	f7ff fdc6 	bl	800d1fc <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800d670:	f7f8 ff09 	bl	8006486 <BootButton_Pressed>
 800d674:	0003      	movs	r3, r0
 800d676:	001a      	movs	r2, r3
 800d678:	2301      	movs	r3, #1
 800d67a:	4053      	eors	r3, r2
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d031      	beq.n	800d6e6 <configCheck+0xce>
 800d682:	f7f8 ff11 	bl	80064a8 <UserButton_Pressed>
 800d686:	1e03      	subs	r3, r0, #0
 800d688:	d02d      	beq.n	800d6e6 <configCheck+0xce>
 800d68a:	4b8d      	ldr	r3, [pc, #564]	@ (800d8c0 <configCheck+0x2a8>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2201      	movs	r2, #1
 800d690:	4053      	eors	r3, r2
 800d692:	b2db      	uxtb	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	d026      	beq.n	800d6e6 <configCheck+0xce>
    SetLEDsOff();
 800d698:	f7ff ff3e 	bl	800d518 <SetLEDsOff>
    Debug("userToggle flipped");
 800d69c:	4a89      	ldr	r2, [pc, #548]	@ (800d8c4 <configCheck+0x2ac>)
 800d69e:	4b8a      	ldr	r3, [pc, #552]	@ (800d8c8 <configCheck+0x2b0>)
 800d6a0:	0019      	movs	r1, r3
 800d6a2:	2003      	movs	r0, #3
 800d6a4:	f000 fe9e 	bl	800e3e4 <CreateLine>
    userToggle = !userToggle;
 800d6a8:	4b88      	ldr	r3, [pc, #544]	@ (800d8cc <configCheck+0x2b4>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	1e5a      	subs	r2, r3, #1
 800d6ae:	4193      	sbcs	r3, r2
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	4053      	eors	r3, r2
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	1c1a      	adds	r2, r3, #0
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4013      	ands	r3, r2
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	4b82      	ldr	r3, [pc, #520]	@ (800d8cc <configCheck+0x2b4>)
 800d6c2:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d6c4:	4b81      	ldr	r3, [pc, #516]	@ (800d8cc <configCheck+0x2b4>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <configCheck+0xb8>
      EnabledConnectedDevices();
 800d6cc:	f7fb f8ce 	bl	800886c <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d6d0:	4b7b      	ldr	r3, [pc, #492]	@ (800d8c0 <configCheck+0x2a8>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d6d6:	f001 facb 	bl	800ec70 <HAL_GetTick>
 800d6da:	0003      	movs	r3, r0
 800d6dc:	22fa      	movs	r2, #250	@ 0xfa
 800d6de:	00d2      	lsls	r2, r2, #3
 800d6e0:	189a      	adds	r2, r3, r2
 800d6e2:	4b7b      	ldr	r3, [pc, #492]	@ (800d8d0 <configCheck+0x2b8>)
 800d6e4:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d6e6:	f7f8 fece 	bl	8006486 <BootButton_Pressed>
 800d6ea:	0003      	movs	r3, r0
 800d6ec:	001a      	movs	r2, r3
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	4053      	eors	r3, r2
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d100      	bne.n	800d6fa <configCheck+0xe2>
 800d6f8:	e0aa      	b.n	800d850 <configCheck+0x238>
 800d6fa:	4b71      	ldr	r3, [pc, #452]	@ (800d8c0 <configCheck+0x2a8>)
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d100      	bne.n	800d704 <configCheck+0xec>
 800d702:	e0a5      	b.n	800d850 <configCheck+0x238>
 800d704:	4b72      	ldr	r3, [pc, #456]	@ (800d8d0 <configCheck+0x2b8>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	0018      	movs	r0, r3
 800d70a:	f000 fe15 	bl	800e338 <TimestampIsReached>
 800d70e:	1e03      	subs	r3, r0, #0
 800d710:	d100      	bne.n	800d714 <configCheck+0xfc>
 800d712:	e09d      	b.n	800d850 <configCheck+0x238>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d714:	f7fa fe0c 	bl	8008330 <GetPMSensorPresence>
 800d718:	1e03      	subs	r3, r0, #0
 800d71a:	d100      	bne.n	800d71e <configCheck+0x106>
 800d71c:	e088      	b.n	800d830 <configCheck+0x218>
 800d71e:	4b6d      	ldr	r3, [pc, #436]	@ (800d8d4 <configCheck+0x2bc>)
 800d720:	791b      	ldrb	r3, [r3, #4]
 800d722:	2b34      	cmp	r3, #52	@ 0x34
 800d724:	d004      	beq.n	800d730 <configCheck+0x118>
 800d726:	4b6b      	ldr	r3, [pc, #428]	@ (800d8d4 <configCheck+0x2bc>)
 800d728:	791b      	ldrb	r3, [r3, #4]
 800d72a:	2b35      	cmp	r3, #53	@ 0x35
 800d72c:	d000      	beq.n	800d730 <configCheck+0x118>
 800d72e:	e07f      	b.n	800d830 <configCheck+0x218>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d730:	4b69      	ldr	r3, [pc, #420]	@ (800d8d8 <configCheck+0x2c0>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	1e5a      	subs	r2, r3, #1
 800d736:	4193      	sbcs	r3, r2
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	2201      	movs	r2, #1
 800d73c:	4053      	eors	r3, r2
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	1c1a      	adds	r2, r3, #0
 800d742:	2301      	movs	r3, #1
 800d744:	4013      	ands	r3, r2
 800d746:	b2da      	uxtb	r2, r3
 800d748:	4b63      	ldr	r3, [pc, #396]	@ (800d8d8 <configCheck+0x2c0>)
 800d74a:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d74c:	4b62      	ldr	r3, [pc, #392]	@ (800d8d8 <configCheck+0x2c0>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d005      	beq.n	800d760 <configCheck+0x148>
 800d754:	1dbc      	adds	r4, r7, #6
 800d756:	f7ff fcd5 	bl	800d104 <Calculate_LED_ON>
 800d75a:	0003      	movs	r3, r0
 800d75c:	8023      	strh	r3, [r4, #0]
 800d75e:	e003      	b.n	800d768 <configCheck+0x150>
        else color = 4000;
 800d760:	1dbb      	adds	r3, r7, #6
 800d762:	22fa      	movs	r2, #250	@ 0xfa
 800d764:	0112      	lsls	r2, r2, #4
 800d766:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d768:	4b5b      	ldr	r3, [pc, #364]	@ (800d8d8 <configCheck+0x2c0>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d001      	beq.n	800d774 <configCheck+0x15c>
 800d770:	4b5a      	ldr	r3, [pc, #360]	@ (800d8dc <configCheck+0x2c4>)
 800d772:	e000      	b.n	800d776 <configCheck+0x15e>
 800d774:	4b5a      	ldr	r3, [pc, #360]	@ (800d8e0 <configCheck+0x2c8>)
 800d776:	4a5b      	ldr	r2, [pc, #364]	@ (800d8e4 <configCheck+0x2cc>)
 800d778:	495b      	ldr	r1, [pc, #364]	@ (800d8e8 <configCheck+0x2d0>)
 800d77a:	2002      	movs	r0, #2
 800d77c:	f000 fe32 	bl	800e3e4 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d780:	1d7b      	adds	r3, r7, #5
 800d782:	2200      	movs	r2, #0
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	e028      	b.n	800d7da <configCheck+0x1c2>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d788:	f7ff fcbc 	bl	800d104 <Calculate_LED_ON>
 800d78c:	0003      	movs	r3, r0
 800d78e:	001a      	movs	r2, r3
 800d790:	4b56      	ldr	r3, [pc, #344]	@ (800d8ec <configCheck+0x2d4>)
 800d792:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d794:	4b55      	ldr	r3, [pc, #340]	@ (800d8ec <configCheck+0x2d4>)
 800d796:	1dba      	adds	r2, r7, #6
 800d798:	8812      	ldrh	r2, [r2, #0]
 800d79a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d79c:	4b53      	ldr	r3, [pc, #332]	@ (800d8ec <configCheck+0x2d4>)
 800d79e:	1dba      	adds	r2, r7, #6
 800d7a0:	8812      	ldrh	r2, [r2, #0]
 800d7a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d7a4:	23c8      	movs	r3, #200	@ 0xc8
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	0018      	movs	r0, r3
 800d7aa:	f001 fa6b 	bl	800ec84 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d7ae:	4b4f      	ldr	r3, [pc, #316]	@ (800d8ec <configCheck+0x2d4>)
 800d7b0:	22fa      	movs	r2, #250	@ 0xfa
 800d7b2:	0112      	lsls	r2, r2, #4
 800d7b4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d7b6:	4b4d      	ldr	r3, [pc, #308]	@ (800d8ec <configCheck+0x2d4>)
 800d7b8:	22fa      	movs	r2, #250	@ 0xfa
 800d7ba:	0112      	lsls	r2, r2, #4
 800d7bc:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800d7be:	4b4b      	ldr	r3, [pc, #300]	@ (800d8ec <configCheck+0x2d4>)
 800d7c0:	22fa      	movs	r2, #250	@ 0xfa
 800d7c2:	0112      	lsls	r2, r2, #4
 800d7c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d7c6:	23c8      	movs	r3, #200	@ 0xc8
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	0018      	movs	r0, r3
 800d7cc:	f001 fa5a 	bl	800ec84 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800d7d0:	1d7b      	adds	r3, r7, #5
 800d7d2:	781a      	ldrb	r2, [r3, #0]
 800d7d4:	1d7b      	adds	r3, r7, #5
 800d7d6:	3201      	adds	r2, #1
 800d7d8:	701a      	strb	r2, [r3, #0]
 800d7da:	1d7b      	adds	r3, r7, #5
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d9d2      	bls.n	800d788 <configCheck+0x170>
      }
      Debug("userToggle flipped back to prior status");
 800d7e2:	4a43      	ldr	r2, [pc, #268]	@ (800d8f0 <configCheck+0x2d8>)
 800d7e4:	4b38      	ldr	r3, [pc, #224]	@ (800d8c8 <configCheck+0x2b0>)
 800d7e6:	0019      	movs	r1, r3
 800d7e8:	2003      	movs	r0, #3
 800d7ea:	f000 fdfb 	bl	800e3e4 <CreateLine>
      userToggle = !userToggle;
 800d7ee:	4b37      	ldr	r3, [pc, #220]	@ (800d8cc <configCheck+0x2b4>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	1e5a      	subs	r2, r3, #1
 800d7f4:	4193      	sbcs	r3, r2
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	4053      	eors	r3, r2
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	1c1a      	adds	r2, r3, #0
 800d800:	2301      	movs	r3, #1
 800d802:	4013      	ands	r3, r2
 800d804:	b2da      	uxtb	r2, r3
 800d806:	4b31      	ldr	r3, [pc, #196]	@ (800d8cc <configCheck+0x2b4>)
 800d808:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800d80a:	4b30      	ldr	r3, [pc, #192]	@ (800d8cc <configCheck+0x2b4>)
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d001      	beq.n	800d816 <configCheck+0x1fe>
 800d812:	4b32      	ldr	r3, [pc, #200]	@ (800d8dc <configCheck+0x2c4>)
 800d814:	e000      	b.n	800d818 <configCheck+0x200>
 800d816:	4b32      	ldr	r3, [pc, #200]	@ (800d8e0 <configCheck+0x2c8>)
 800d818:	4a36      	ldr	r2, [pc, #216]	@ (800d8f4 <configCheck+0x2dc>)
 800d81a:	4933      	ldr	r1, [pc, #204]	@ (800d8e8 <configCheck+0x2d0>)
 800d81c:	2002      	movs	r0, #2
 800d81e:	f000 fde1 	bl	800e3e4 <CreateLine>
      if (usbPluggedIn) {
 800d822:	4b35      	ldr	r3, [pc, #212]	@ (800d8f8 <configCheck+0x2e0>)
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d009      	beq.n	800d83e <configCheck+0x226>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800d82a:	f7fc f8f1 	bl	8009a10 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d82e:	e006      	b.n	800d83e <configCheck+0x226>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800d830:	4a32      	ldr	r2, [pc, #200]	@ (800d8fc <configCheck+0x2e4>)
 800d832:	4b2d      	ldr	r3, [pc, #180]	@ (800d8e8 <configCheck+0x2d0>)
 800d834:	0019      	movs	r1, r3
 800d836:	2002      	movs	r0, #2
 800d838:	f000 fdd4 	bl	800e3e4 <CreateLine>
 800d83c:	e000      	b.n	800d840 <configCheck+0x228>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d83e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800d840:	46c0      	nop			@ (mov r8, r8)
 800d842:	f7f8 fe31 	bl	80064a8 <UserButton_Pressed>
 800d846:	1e03      	subs	r3, r0, #0
 800d848:	d1fb      	bne.n	800d842 <configCheck+0x22a>
    }
    buttonHeld = false;
 800d84a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c0 <configCheck+0x2a8>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d850:	f7f8 fe19 	bl	8006486 <BootButton_Pressed>
 800d854:	0003      	movs	r3, r0
 800d856:	001a      	movs	r2, r3
 800d858:	2301      	movs	r3, #1
 800d85a:	4053      	eors	r3, r2
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00b      	beq.n	800d87a <configCheck+0x262>
 800d862:	f7f8 fe21 	bl	80064a8 <UserButton_Pressed>
 800d866:	0003      	movs	r3, r0
 800d868:	001a      	movs	r2, r3
 800d86a:	2301      	movs	r3, #1
 800d86c:	4053      	eors	r3, r2
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <configCheck+0x262>
    buttonHeld = false;
 800d874:	4b12      	ldr	r3, [pc, #72]	@ (800d8c0 <configCheck+0x2a8>)
 800d876:	2200      	movs	r2, #0
 800d878:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d87a:	f7f8 fdf5 	bl	8006468 <Check_USB_PowerOn>
 800d87e:	1e03      	subs	r3, r0, #0
 800d880:	d003      	beq.n	800d88a <configCheck+0x272>
    usbPluggedIn = true;
 800d882:	4b1d      	ldr	r3, [pc, #116]	@ (800d8f8 <configCheck+0x2e0>)
 800d884:	2201      	movs	r2, #1
 800d886:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d888:	e012      	b.n	800d8b0 <configCheck+0x298>
    if(!userToggle && !init){
 800d88a:	4b10      	ldr	r3, [pc, #64]	@ (800d8cc <configCheck+0x2b4>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	2201      	movs	r2, #1
 800d890:	4053      	eors	r3, r2
 800d892:	b2db      	uxtb	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d008      	beq.n	800d8aa <configCheck+0x292>
 800d898:	4b19      	ldr	r3, [pc, #100]	@ (800d900 <configCheck+0x2e8>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2201      	movs	r2, #1
 800d89e:	4053      	eors	r3, r2
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <configCheck+0x292>
      SetLEDsOff();
 800d8a6:	f7ff fe37 	bl	800d518 <SetLEDsOff>
    usbPluggedIn = false;
 800d8aa:	4b13      	ldr	r3, [pc, #76]	@ (800d8f8 <configCheck+0x2e0>)
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	701a      	strb	r2, [r3, #0]
}
 800d8b0:	46c0      	nop			@ (mov r8, r8)
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	b003      	add	sp, #12
 800d8b6:	bd90      	pop	{r4, r7, pc}
 800d8b8:	20001ff0 	.word	0x20001ff0
 800d8bc:	20001ff4 	.word	0x20001ff4
 800d8c0:	20001ff3 	.word	0x20001ff3
 800d8c4:	08024dd4 	.word	0x08024dd4
 800d8c8:	08024d5c 	.word	0x08024d5c
 800d8cc:	20001ff2 	.word	0x20001ff2
 800d8d0:	20001ff8 	.word	0x20001ff8
 800d8d4:	2000105c 	.word	0x2000105c
 800d8d8:	2000105a 	.word	0x2000105a
 800d8dc:	08024de8 	.word	0x08024de8
 800d8e0:	08024df0 	.word	0x08024df0
 800d8e4:	08024dfc 	.word	0x08024dfc
 800d8e8:	08024e1c 	.word	0x08024e1c
 800d8ec:	40000400 	.word	0x40000400
 800d8f0:	08024e20 	.word	0x08024e20
 800d8f4:	08024e48 	.word	0x08024e48
 800d8f8:	20001ff1 	.word	0x20001ff1
 800d8fc:	08024e60 	.word	0x08024e60
 800d900:	200000c4 	.word	0x200000c4

0800d904 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800d904:	b590      	push	{r4, r7, lr}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d90a:	1dfc      	adds	r4, r7, #7
 800d90c:	f7ff fe20 	bl	800d550 <powerCheck>
 800d910:	0003      	movs	r3, r0
 800d912:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d914:	1dfb      	adds	r3, r7, #7
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	0018      	movs	r0, r3
 800d91a:	f7ff fe35 	bl	800d588 <powerDisplay>
  return status;
 800d91e:	1dfb      	adds	r3, r7, #7
 800d920:	781b      	ldrb	r3, [r3, #0]
}
 800d922:	0018      	movs	r0, r3
 800d924:	46bd      	mov	sp, r7
 800d926:	b003      	add	sp, #12
 800d928:	bd90      	pop	{r4, r7, pc}
	...

0800d92c <setuserToggle>:

void setuserToggle(void) {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800d930:	f7ff fe0e 	bl	800d550 <powerCheck>
 800d934:	0003      	movs	r3, r0
 800d936:	2b04      	cmp	r3, #4
 800d938:	d002      	beq.n	800d940 <setuserToggle+0x14>
    userToggle = true;
 800d93a:	4b03      	ldr	r3, [pc, #12]	@ (800d948 <setuserToggle+0x1c>)
 800d93c:	2201      	movs	r2, #1
 800d93e:	701a      	strb	r2, [r3, #0]
  }
}
 800d940:	46c0      	nop			@ (mov r8, r8)
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	46c0      	nop			@ (mov r8, r8)
 800d948:	20001ff2 	.word	0x20001ff2

0800d94c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d950:	4b07      	ldr	r3, [pc, #28]	@ (800d970 <HAL_MspInit+0x24>)
 800d952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d954:	4b06      	ldr	r3, [pc, #24]	@ (800d970 <HAL_MspInit+0x24>)
 800d956:	2101      	movs	r1, #1
 800d958:	430a      	orrs	r2, r1
 800d95a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800d95c:	4b04      	ldr	r3, [pc, #16]	@ (800d970 <HAL_MspInit+0x24>)
 800d95e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d960:	4b03      	ldr	r3, [pc, #12]	@ (800d970 <HAL_MspInit+0x24>)
 800d962:	2180      	movs	r1, #128	@ 0x80
 800d964:	0549      	lsls	r1, r1, #21
 800d966:	430a      	orrs	r2, r1
 800d968:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d96a:	46c0      	nop			@ (mov r8, r8)
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	40021000 	.word	0x40021000

0800d974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d978:	46c0      	nop			@ (mov r8, r8)
 800d97a:	e7fd      	b.n	800d978 <NMI_Handler+0x4>

0800d97c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d980:	46c0      	nop			@ (mov r8, r8)
 800d982:	e7fd      	b.n	800d980 <HardFault_Handler+0x4>

0800d984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d988:	46c0      	nop			@ (mov r8, r8)
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d992:	46c0      	nop			@ (mov r8, r8)
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d99c:	f001 f956 	bl	800ec4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800d9a0:	46c0      	nop			@ (mov r8, r8)
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d9ac:	4b03      	ldr	r3, [pc, #12]	@ (800d9bc <RTC_IRQHandler+0x14>)
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f008 fe7c 	bl	80166ac <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d9b4:	46c0      	nop			@ (mov r8, r8)
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	46c0      	nop			@ (mov r8, r8)
 800d9bc:	20001034 	.word	0x20001034

0800d9c0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d9c4:	2380      	movs	r3, #128	@ 0x80
 800d9c6:	021b      	lsls	r3, r3, #8
 800d9c8:	0018      	movs	r0, r3
 800d9ca:	f002 fbff 	bl	80101cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d9ce:	46c0      	nop			@ (mov r8, r8)
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d9d8:	4b05      	ldr	r3, [pc, #20]	@ (800d9f0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d9da:	0018      	movs	r0, r3
 800d9dc:	f001 ff87 	bl	800f8ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d9e0:	4b04      	ldr	r3, [pc, #16]	@ (800d9f4 <DMA1_Channel2_3_IRQHandler+0x20>)
 800d9e2:	0018      	movs	r0, r3
 800d9e4:	f001 ff83 	bl	800f8ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d9e8:	46c0      	nop			@ (mov r8, r8)
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	46c0      	nop			@ (mov r8, r8)
 800d9f0:	20000ed4 	.word	0x20000ed4
 800d9f4:	20000e8c 	.word	0x20000e8c

0800d9f8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800d9fc:	4b07      	ldr	r3, [pc, #28]	@ (800da1c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800d9fe:	0018      	movs	r0, r3
 800da00:	f001 ff75 	bl	800f8ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800da04:	4b06      	ldr	r3, [pc, #24]	@ (800da20 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800da06:	0018      	movs	r0, r3
 800da08:	f001 ff71 	bl	800f8ee <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800da0c:	4b05      	ldr	r3, [pc, #20]	@ (800da24 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800da0e:	0018      	movs	r0, r3
 800da10:	f001 ff6d 	bl	800f8ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800da14:	46c0      	nop			@ (mov r8, r8)
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	46c0      	nop			@ (mov r8, r8)
 800da1c:	20000f58 	.word	0x20000f58
 800da20:	200022f0 	.word	0x200022f0
 800da24:	20002338 	.word	0x20002338

0800da28 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800da2c:	4b03      	ldr	r3, [pc, #12]	@ (800da3c <USART4_5_IRQHandler+0x14>)
 800da2e:	0018      	movs	r0, r3
 800da30:	f009 fd36 	bl	80174a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800da34:	46c0      	nop			@ (mov r8, r8)
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	46c0      	nop			@ (mov r8, r8)
 800da3c:	20002238 	.word	0x20002238

0800da40 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800da44:	4b09      	ldr	r3, [pc, #36]	@ (800da6c <I2C1_IRQHandler+0x2c>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	699a      	ldr	r2, [r3, #24]
 800da4a:	23e0      	movs	r3, #224	@ 0xe0
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	4013      	ands	r3, r2
 800da50:	d004      	beq.n	800da5c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800da52:	4b06      	ldr	r3, [pc, #24]	@ (800da6c <I2C1_IRQHandler+0x2c>)
 800da54:	0018      	movs	r0, r3
 800da56:	f003 f8a1 	bl	8010b9c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800da5a:	e003      	b.n	800da64 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800da5c:	4b03      	ldr	r3, [pc, #12]	@ (800da6c <I2C1_IRQHandler+0x2c>)
 800da5e:	0018      	movs	r0, r3
 800da60:	f003 f882 	bl	8010b68 <HAL_I2C_EV_IRQHandler>
}
 800da64:	46c0      	nop			@ (mov r8, r8)
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	46c0      	nop			@ (mov r8, r8)
 800da6c:	20000de4 	.word	0x20000de4

0800da70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800da74:	4b03      	ldr	r3, [pc, #12]	@ (800da84 <USART1_IRQHandler+0x14>)
 800da76:	0018      	movs	r0, r3
 800da78:	f009 fd12 	bl	80174a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800da7c:	46c0      	nop			@ (mov r8, r8)
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	46c0      	nop			@ (mov r8, r8)
 800da84:	20002180 	.word	0x20002180

0800da88 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800da8c:	4b03      	ldr	r3, [pc, #12]	@ (800da9c <USB_IRQHandler+0x14>)
 800da8e:	0018      	movs	r0, r3
 800da90:	f005 fc62 	bl	8013358 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800da94:	46c0      	nop			@ (mov r8, r8)
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	46c0      	nop			@ (mov r8, r8)
 800da9c:	2000314c 	.word	0x2000314c

0800daa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	af00      	add	r7, sp, #0
  return 1;
 800daa4:	2301      	movs	r3, #1
}
 800daa6:	0018      	movs	r0, r3
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <_kill>:

int _kill(int pid, int sig)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dab6:	f012 fbd7 	bl	8020268 <__errno>
 800daba:	0003      	movs	r3, r0
 800dabc:	2216      	movs	r2, #22
 800dabe:	601a      	str	r2, [r3, #0]
  return -1;
 800dac0:	2301      	movs	r3, #1
 800dac2:	425b      	negs	r3, r3
}
 800dac4:	0018      	movs	r0, r3
 800dac6:	46bd      	mov	sp, r7
 800dac8:	b002      	add	sp, #8
 800daca:	bd80      	pop	{r7, pc}

0800dacc <_exit>:

void _exit (int status)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dad4:	2301      	movs	r3, #1
 800dad6:	425a      	negs	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	0011      	movs	r1, r2
 800dadc:	0018      	movs	r0, r3
 800dade:	f7ff ffe5 	bl	800daac <_kill>
  while (1) {}    /* Make sure we hang here */
 800dae2:	46c0      	nop			@ (mov r8, r8)
 800dae4:	e7fd      	b.n	800dae2 <_exit+0x16>

0800dae6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b086      	sub	sp, #24
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	60b9      	str	r1, [r7, #8]
 800daf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]
 800daf6:	e00a      	b.n	800db0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800daf8:	e000      	b.n	800dafc <_read+0x16>
 800dafa:	bf00      	nop
 800dafc:	0001      	movs	r1, r0
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	1c5a      	adds	r2, r3, #1
 800db02:	60ba      	str	r2, [r7, #8]
 800db04:	b2ca      	uxtb	r2, r1
 800db06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	3301      	adds	r3, #1
 800db0c:	617b      	str	r3, [r7, #20]
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	429a      	cmp	r2, r3
 800db14:	dbf0      	blt.n	800daf8 <_read+0x12>
  }

  return len;
 800db16:	687b      	ldr	r3, [r7, #4]
}
 800db18:	0018      	movs	r0, r3
 800db1a:	46bd      	mov	sp, r7
 800db1c:	b006      	add	sp, #24
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <_close>:
  }
  return len;
}

int _close(int file)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800db28:	2301      	movs	r3, #1
 800db2a:	425b      	negs	r3, r3
}
 800db2c:	0018      	movs	r0, r3
 800db2e:	46bd      	mov	sp, r7
 800db30:	b002      	add	sp, #8
 800db32:	bd80      	pop	{r7, pc}

0800db34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2280      	movs	r2, #128	@ 0x80
 800db42:	0192      	lsls	r2, r2, #6
 800db44:	605a      	str	r2, [r3, #4]
  return 0;
 800db46:	2300      	movs	r3, #0
}
 800db48:	0018      	movs	r0, r3
 800db4a:	46bd      	mov	sp, r7
 800db4c:	b002      	add	sp, #8
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <_isatty>:

int _isatty(int file)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800db58:	2301      	movs	r3, #1
}
 800db5a:	0018      	movs	r0, r3
 800db5c:	46bd      	mov	sp, r7
 800db5e:	b002      	add	sp, #8
 800db60:	bd80      	pop	{r7, pc}

0800db62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b084      	sub	sp, #16
 800db66:	af00      	add	r7, sp, #0
 800db68:	60f8      	str	r0, [r7, #12]
 800db6a:	60b9      	str	r1, [r7, #8]
 800db6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	0018      	movs	r0, r3
 800db72:	46bd      	mov	sp, r7
 800db74:	b004      	add	sp, #16
 800db76:	bd80      	pop	{r7, pc}

0800db78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800db80:	4a14      	ldr	r2, [pc, #80]	@ (800dbd4 <_sbrk+0x5c>)
 800db82:	4b15      	ldr	r3, [pc, #84]	@ (800dbd8 <_sbrk+0x60>)
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800db8c:	4b13      	ldr	r3, [pc, #76]	@ (800dbdc <_sbrk+0x64>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d102      	bne.n	800db9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800db94:	4b11      	ldr	r3, [pc, #68]	@ (800dbdc <_sbrk+0x64>)
 800db96:	4a12      	ldr	r2, [pc, #72]	@ (800dbe0 <_sbrk+0x68>)
 800db98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800db9a:	4b10      	ldr	r3, [pc, #64]	@ (800dbdc <_sbrk+0x64>)
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	18d3      	adds	r3, r2, r3
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d207      	bcs.n	800dbb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dba8:	f012 fb5e 	bl	8020268 <__errno>
 800dbac:	0003      	movs	r3, r0
 800dbae:	220c      	movs	r2, #12
 800dbb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	425b      	negs	r3, r3
 800dbb6:	e009      	b.n	800dbcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dbb8:	4b08      	ldr	r3, [pc, #32]	@ (800dbdc <_sbrk+0x64>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dbbe:	4b07      	ldr	r3, [pc, #28]	@ (800dbdc <_sbrk+0x64>)
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	18d2      	adds	r2, r2, r3
 800dbc6:	4b05      	ldr	r3, [pc, #20]	@ (800dbdc <_sbrk+0x64>)
 800dbc8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800dbca:	68fb      	ldr	r3, [r7, #12]
}
 800dbcc:	0018      	movs	r0, r3
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	b006      	add	sp, #24
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	20005000 	.word	0x20005000
 800dbd8:	00000400 	.word	0x00000400
 800dbdc:	20002004 	.word	0x20002004
 800dbe0:	200037b0 	.word	0x200037b0

0800dbe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dbe8:	46c0      	nop			@ (mov r8, r8)
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
	...

0800dbf0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dbf6:	2310      	movs	r3, #16
 800dbf8:	18fb      	adds	r3, r7, r3
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	2308      	movs	r3, #8
 800dbfe:	001a      	movs	r2, r3
 800dc00:	2100      	movs	r1, #0
 800dc02:	f012 fa8d 	bl	8020120 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc06:	003b      	movs	r3, r7
 800dc08:	0018      	movs	r0, r3
 800dc0a:	2310      	movs	r3, #16
 800dc0c:	001a      	movs	r2, r3
 800dc0e:	2100      	movs	r1, #0
 800dc10:	f012 fa86 	bl	8020120 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc14:	4b2e      	ldr	r3, [pc, #184]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc16:	2280      	movs	r2, #128	@ 0x80
 800dc18:	05d2      	lsls	r2, r2, #23
 800dc1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc1c:	4b2c      	ldr	r3, [pc, #176]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc1e:	2200      	movs	r2, #0
 800dc20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc22:	4b2b      	ldr	r3, [pc, #172]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800dc28:	4b29      	ldr	r3, [pc, #164]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc2a:	4a2a      	ldr	r2, [pc, #168]	@ (800dcd4 <MX_TIM2_Init+0xe4>)
 800dc2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc2e:	4b28      	ldr	r3, [pc, #160]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc34:	4b26      	ldr	r3, [pc, #152]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dc3a:	4b25      	ldr	r3, [pc, #148]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f008 fe43 	bl	80168c8 <HAL_TIM_PWM_Init>
 800dc42:	1e03      	subs	r3, r0, #0
 800dc44:	d001      	beq.n	800dc4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800dc46:	f7fa fb35 	bl	80082b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc4a:	2110      	movs	r1, #16
 800dc4c:	187b      	adds	r3, r7, r1
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc52:	187b      	adds	r3, r7, r1
 800dc54:	2200      	movs	r2, #0
 800dc56:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dc58:	187a      	adds	r2, r7, r1
 800dc5a:	4b1d      	ldr	r3, [pc, #116]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc5c:	0011      	movs	r1, r2
 800dc5e:	0018      	movs	r0, r3
 800dc60:	f009 f950 	bl	8016f04 <HAL_TIMEx_MasterConfigSynchronization>
 800dc64:	1e03      	subs	r3, r0, #0
 800dc66:	d001      	beq.n	800dc6c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dc68:	f7fa fb24 	bl	80082b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dc6c:	003b      	movs	r3, r7
 800dc6e:	2260      	movs	r2, #96	@ 0x60
 800dc70:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dc72:	003b      	movs	r3, r7
 800dc74:	2200      	movs	r2, #0
 800dc76:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dc78:	003b      	movs	r3, r7
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dc7e:	003b      	movs	r3, r7
 800dc80:	2200      	movs	r2, #0
 800dc82:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dc84:	0039      	movs	r1, r7
 800dc86:	4b12      	ldr	r3, [pc, #72]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	0018      	movs	r0, r3
 800dc8c:	f008 feee 	bl	8016a6c <HAL_TIM_PWM_ConfigChannel>
 800dc90:	1e03      	subs	r3, r0, #0
 800dc92:	d001      	beq.n	800dc98 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800dc94:	f7fa fb0e 	bl	80082b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dc98:	0039      	movs	r1, r7
 800dc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dc9c:	2208      	movs	r2, #8
 800dc9e:	0018      	movs	r0, r3
 800dca0:	f008 fee4 	bl	8016a6c <HAL_TIM_PWM_ConfigChannel>
 800dca4:	1e03      	subs	r3, r0, #0
 800dca6:	d001      	beq.n	800dcac <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dca8:	f7fa fb04 	bl	80082b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dcac:	0039      	movs	r1, r7
 800dcae:	4b08      	ldr	r3, [pc, #32]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dcb0:	220c      	movs	r2, #12
 800dcb2:	0018      	movs	r0, r3
 800dcb4:	f008 feda 	bl	8016a6c <HAL_TIM_PWM_ConfigChannel>
 800dcb8:	1e03      	subs	r3, r0, #0
 800dcba:	d001      	beq.n	800dcc0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800dcbc:	f7fa fafa 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dcc0:	4b03      	ldr	r3, [pc, #12]	@ (800dcd0 <MX_TIM2_Init+0xe0>)
 800dcc2:	0018      	movs	r0, r3
 800dcc4:	f000 f8fe 	bl	800dec4 <HAL_TIM_MspPostInit>

}
 800dcc8:	46c0      	nop			@ (mov r8, r8)
 800dcca:	46bd      	mov	sp, r7
 800dccc:	b006      	add	sp, #24
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20002008 	.word	0x20002008
 800dcd4:	0000ffff 	.word	0x0000ffff

0800dcd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dcde:	2310      	movs	r3, #16
 800dce0:	18fb      	adds	r3, r7, r3
 800dce2:	0018      	movs	r0, r3
 800dce4:	2308      	movs	r3, #8
 800dce6:	001a      	movs	r2, r3
 800dce8:	2100      	movs	r1, #0
 800dcea:	f012 fa19 	bl	8020120 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dcee:	003b      	movs	r3, r7
 800dcf0:	0018      	movs	r0, r3
 800dcf2:	2310      	movs	r3, #16
 800dcf4:	001a      	movs	r2, r3
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	f012 fa12 	bl	8020120 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dcfc:	4b32      	ldr	r3, [pc, #200]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dcfe:	4a33      	ldr	r2, [pc, #204]	@ (800ddcc <MX_TIM3_Init+0xf4>)
 800dd00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dd02:	4b31      	ldr	r3, [pc, #196]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd08:	4b2f      	ldr	r3, [pc, #188]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800dd0e:	4b2e      	ldr	r3, [pc, #184]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd10:	4a2f      	ldr	r2, [pc, #188]	@ (800ddd0 <MX_TIM3_Init+0xf8>)
 800dd12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd14:	4b2c      	ldr	r3, [pc, #176]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd1a:	4b2b      	ldr	r3, [pc, #172]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dd20:	4b29      	ldr	r3, [pc, #164]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd22:	0018      	movs	r0, r3
 800dd24:	f008 fdd0 	bl	80168c8 <HAL_TIM_PWM_Init>
 800dd28:	1e03      	subs	r3, r0, #0
 800dd2a:	d001      	beq.n	800dd30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800dd2c:	f7fa fac2 	bl	80082b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd30:	2110      	movs	r1, #16
 800dd32:	187b      	adds	r3, r7, r1
 800dd34:	2200      	movs	r2, #0
 800dd36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd38:	187b      	adds	r3, r7, r1
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dd3e:	187a      	adds	r2, r7, r1
 800dd40:	4b21      	ldr	r3, [pc, #132]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd42:	0011      	movs	r1, r2
 800dd44:	0018      	movs	r0, r3
 800dd46:	f009 f8dd 	bl	8016f04 <HAL_TIMEx_MasterConfigSynchronization>
 800dd4a:	1e03      	subs	r3, r0, #0
 800dd4c:	d001      	beq.n	800dd52 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800dd4e:	f7fa fab1 	bl	80082b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd52:	003b      	movs	r3, r7
 800dd54:	2260      	movs	r2, #96	@ 0x60
 800dd56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dd58:	003b      	movs	r3, r7
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd5e:	003b      	movs	r3, r7
 800dd60:	2200      	movs	r2, #0
 800dd62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd64:	003b      	movs	r3, r7
 800dd66:	2200      	movs	r2, #0
 800dd68:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd6a:	0039      	movs	r1, r7
 800dd6c:	4b16      	ldr	r3, [pc, #88]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	0018      	movs	r0, r3
 800dd72:	f008 fe7b 	bl	8016a6c <HAL_TIM_PWM_ConfigChannel>
 800dd76:	1e03      	subs	r3, r0, #0
 800dd78:	d001      	beq.n	800dd7e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800dd7a:	f7fa fa9b 	bl	80082b4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800dd7e:	4b12      	ldr	r3, [pc, #72]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd80:	2104      	movs	r1, #4
 800dd82:	0018      	movs	r0, r3
 800dd84:	f009 f91c 	bl	8016fc0 <HAL_TIMEx_RemapConfig>
 800dd88:	1e03      	subs	r3, r0, #0
 800dd8a:	d001      	beq.n	800dd90 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800dd8c:	f7fa fa92 	bl	80082b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dd90:	0039      	movs	r1, r7
 800dd92:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dd94:	2204      	movs	r2, #4
 800dd96:	0018      	movs	r0, r3
 800dd98:	f008 fe68 	bl	8016a6c <HAL_TIM_PWM_ConfigChannel>
 800dd9c:	1e03      	subs	r3, r0, #0
 800dd9e:	d001      	beq.n	800dda4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800dda0:	f7fa fa88 	bl	80082b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dda4:	0039      	movs	r1, r7
 800dda6:	4b08      	ldr	r3, [pc, #32]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800dda8:	2208      	movs	r2, #8
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f008 fe5e 	bl	8016a6c <HAL_TIM_PWM_ConfigChannel>
 800ddb0:	1e03      	subs	r3, r0, #0
 800ddb2:	d001      	beq.n	800ddb8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800ddb4:	f7fa fa7e 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ddb8:	4b03      	ldr	r3, [pc, #12]	@ (800ddc8 <MX_TIM3_Init+0xf0>)
 800ddba:	0018      	movs	r0, r3
 800ddbc:	f000 f882 	bl	800dec4 <HAL_TIM_MspPostInit>

}
 800ddc0:	46c0      	nop			@ (mov r8, r8)
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	b006      	add	sp, #24
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	20002048 	.word	0x20002048
 800ddcc:	40000400 	.word	0x40000400
 800ddd0:	0000ffff 	.word	0x0000ffff

0800ddd4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ddda:	003b      	movs	r3, r7
 800dddc:	0018      	movs	r0, r3
 800ddde:	2308      	movs	r3, #8
 800dde0:	001a      	movs	r2, r3
 800dde2:	2100      	movs	r1, #0
 800dde4:	f012 f99c 	bl	8020120 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800dde8:	4b15      	ldr	r3, [pc, #84]	@ (800de40 <MX_TIM6_Init+0x6c>)
 800ddea:	4a16      	ldr	r2, [pc, #88]	@ (800de44 <MX_TIM6_Init+0x70>)
 800ddec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800ddee:	4b14      	ldr	r3, [pc, #80]	@ (800de40 <MX_TIM6_Init+0x6c>)
 800ddf0:	220a      	movs	r2, #10
 800ddf2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddf4:	4b12      	ldr	r3, [pc, #72]	@ (800de40 <MX_TIM6_Init+0x6c>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800ddfa:	4b11      	ldr	r3, [pc, #68]	@ (800de40 <MX_TIM6_Init+0x6c>)
 800ddfc:	4a12      	ldr	r2, [pc, #72]	@ (800de48 <MX_TIM6_Init+0x74>)
 800ddfe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de00:	4b0f      	ldr	r3, [pc, #60]	@ (800de40 <MX_TIM6_Init+0x6c>)
 800de02:	2200      	movs	r2, #0
 800de04:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800de06:	4b0e      	ldr	r3, [pc, #56]	@ (800de40 <MX_TIM6_Init+0x6c>)
 800de08:	0018      	movs	r0, r3
 800de0a:	f008 fcb5 	bl	8016778 <HAL_TIM_Base_Init>
 800de0e:	1e03      	subs	r3, r0, #0
 800de10:	d001      	beq.n	800de16 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800de12:	f7fa fa4f 	bl	80082b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de16:	003b      	movs	r3, r7
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de1c:	003b      	movs	r3, r7
 800de1e:	2200      	movs	r2, #0
 800de20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800de22:	003a      	movs	r2, r7
 800de24:	4b06      	ldr	r3, [pc, #24]	@ (800de40 <MX_TIM6_Init+0x6c>)
 800de26:	0011      	movs	r1, r2
 800de28:	0018      	movs	r0, r3
 800de2a:	f009 f86b 	bl	8016f04 <HAL_TIMEx_MasterConfigSynchronization>
 800de2e:	1e03      	subs	r3, r0, #0
 800de30:	d001      	beq.n	800de36 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800de32:	f7fa fa3f 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800de36:	46c0      	nop			@ (mov r8, r8)
 800de38:	46bd      	mov	sp, r7
 800de3a:	b002      	add	sp, #8
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	46c0      	nop			@ (mov r8, r8)
 800de40:	20002088 	.word	0x20002088
 800de44:	40001000 	.word	0x40001000
 800de48:	0000ffff 	.word	0x0000ffff

0800de4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	2380      	movs	r3, #128	@ 0x80
 800de5a:	05db      	lsls	r3, r3, #23
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d106      	bne.n	800de6e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800de60:	4b0a      	ldr	r3, [pc, #40]	@ (800de8c <HAL_TIM_PWM_MspInit+0x40>)
 800de62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de64:	4b09      	ldr	r3, [pc, #36]	@ (800de8c <HAL_TIM_PWM_MspInit+0x40>)
 800de66:	2101      	movs	r1, #1
 800de68:	430a      	orrs	r2, r1
 800de6a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800de6c:	e00a      	b.n	800de84 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a07      	ldr	r2, [pc, #28]	@ (800de90 <HAL_TIM_PWM_MspInit+0x44>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d105      	bne.n	800de84 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800de78:	4b04      	ldr	r3, [pc, #16]	@ (800de8c <HAL_TIM_PWM_MspInit+0x40>)
 800de7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de7c:	4b03      	ldr	r3, [pc, #12]	@ (800de8c <HAL_TIM_PWM_MspInit+0x40>)
 800de7e:	2102      	movs	r1, #2
 800de80:	430a      	orrs	r2, r1
 800de82:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800de84:	46c0      	nop			@ (mov r8, r8)
 800de86:	46bd      	mov	sp, r7
 800de88:	b002      	add	sp, #8
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	40021000 	.word	0x40021000
 800de90:	40000400 	.word	0x40000400

0800de94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a06      	ldr	r2, [pc, #24]	@ (800debc <HAL_TIM_Base_MspInit+0x28>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d105      	bne.n	800deb2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800dea6:	4b06      	ldr	r3, [pc, #24]	@ (800dec0 <HAL_TIM_Base_MspInit+0x2c>)
 800dea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800deaa:	4b05      	ldr	r3, [pc, #20]	@ (800dec0 <HAL_TIM_Base_MspInit+0x2c>)
 800deac:	2110      	movs	r1, #16
 800deae:	430a      	orrs	r2, r1
 800deb0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800deb2:	46c0      	nop			@ (mov r8, r8)
 800deb4:	46bd      	mov	sp, r7
 800deb6:	b002      	add	sp, #8
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	46c0      	nop			@ (mov r8, r8)
 800debc:	40001000 	.word	0x40001000
 800dec0:	40021000 	.word	0x40021000

0800dec4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800dec4:	b590      	push	{r4, r7, lr}
 800dec6:	b08b      	sub	sp, #44	@ 0x2c
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800decc:	2414      	movs	r4, #20
 800dece:	193b      	adds	r3, r7, r4
 800ded0:	0018      	movs	r0, r3
 800ded2:	2314      	movs	r3, #20
 800ded4:	001a      	movs	r2, r3
 800ded6:	2100      	movs	r1, #0
 800ded8:	f012 f922 	bl	8020120 <memset>
  if(timHandle->Instance==TIM2)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	2380      	movs	r3, #128	@ 0x80
 800dee2:	05db      	lsls	r3, r3, #23
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d123      	bne.n	800df30 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dee8:	4b27      	ldr	r3, [pc, #156]	@ (800df88 <HAL_TIM_MspPostInit+0xc4>)
 800deea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deec:	4b26      	ldr	r3, [pc, #152]	@ (800df88 <HAL_TIM_MspPostInit+0xc4>)
 800deee:	2101      	movs	r1, #1
 800def0:	430a      	orrs	r2, r1
 800def2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800def4:	4b24      	ldr	r3, [pc, #144]	@ (800df88 <HAL_TIM_MspPostInit+0xc4>)
 800def6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def8:	2201      	movs	r2, #1
 800defa:	4013      	ands	r3, r2
 800defc:	613b      	str	r3, [r7, #16]
 800defe:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800df00:	0021      	movs	r1, r4
 800df02:	187b      	adds	r3, r7, r1
 800df04:	220d      	movs	r2, #13
 800df06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df08:	187b      	adds	r3, r7, r1
 800df0a:	2202      	movs	r2, #2
 800df0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df0e:	187b      	adds	r3, r7, r1
 800df10:	2200      	movs	r2, #0
 800df12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df14:	187b      	adds	r3, r7, r1
 800df16:	2200      	movs	r2, #0
 800df18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800df1a:	187b      	adds	r3, r7, r1
 800df1c:	2202      	movs	r2, #2
 800df1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df20:	187a      	adds	r2, r7, r1
 800df22:	23a0      	movs	r3, #160	@ 0xa0
 800df24:	05db      	lsls	r3, r3, #23
 800df26:	0011      	movs	r1, r2
 800df28:	0018      	movs	r0, r3
 800df2a:	f001 ff97 	bl	800fe5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800df2e:	e027      	b.n	800df80 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a15      	ldr	r2, [pc, #84]	@ (800df8c <HAL_TIM_MspPostInit+0xc8>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d122      	bne.n	800df80 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df3a:	4b13      	ldr	r3, [pc, #76]	@ (800df88 <HAL_TIM_MspPostInit+0xc4>)
 800df3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df3e:	4b12      	ldr	r3, [pc, #72]	@ (800df88 <HAL_TIM_MspPostInit+0xc4>)
 800df40:	2104      	movs	r1, #4
 800df42:	430a      	orrs	r2, r1
 800df44:	62da      	str	r2, [r3, #44]	@ 0x2c
 800df46:	4b10      	ldr	r3, [pc, #64]	@ (800df88 <HAL_TIM_MspPostInit+0xc4>)
 800df48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4a:	2204      	movs	r2, #4
 800df4c:	4013      	ands	r3, r2
 800df4e:	60fb      	str	r3, [r7, #12]
 800df50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800df52:	2114      	movs	r1, #20
 800df54:	187b      	adds	r3, r7, r1
 800df56:	22e0      	movs	r2, #224	@ 0xe0
 800df58:	0052      	lsls	r2, r2, #1
 800df5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df5c:	187b      	adds	r3, r7, r1
 800df5e:	2202      	movs	r2, #2
 800df60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df62:	187b      	adds	r3, r7, r1
 800df64:	2200      	movs	r2, #0
 800df66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df68:	187b      	adds	r3, r7, r1
 800df6a:	2200      	movs	r2, #0
 800df6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800df6e:	187b      	adds	r3, r7, r1
 800df70:	2202      	movs	r2, #2
 800df72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df74:	187b      	adds	r3, r7, r1
 800df76:	4a06      	ldr	r2, [pc, #24]	@ (800df90 <HAL_TIM_MspPostInit+0xcc>)
 800df78:	0019      	movs	r1, r3
 800df7a:	0010      	movs	r0, r2
 800df7c:	f001 ff6e 	bl	800fe5c <HAL_GPIO_Init>
}
 800df80:	46c0      	nop			@ (mov r8, r8)
 800df82:	46bd      	mov	sp, r7
 800df84:	b00b      	add	sp, #44	@ 0x2c
 800df86:	bd90      	pop	{r4, r7, pc}
 800df88:	40021000 	.word	0x40021000
 800df8c:	40000400 	.word	0x40000400
 800df90:	50000800 	.word	0x50000800

0800df94 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800df98:	4b17      	ldr	r3, [pc, #92]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800df9a:	4a18      	ldr	r2, [pc, #96]	@ (800dffc <MX_LPUART1_UART_Init+0x68>)
 800df9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800df9e:	4b16      	ldr	r3, [pc, #88]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfa0:	22e1      	movs	r2, #225	@ 0xe1
 800dfa2:	0252      	lsls	r2, r2, #9
 800dfa4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dfa6:	4b14      	ldr	r3, [pc, #80]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800dfac:	4b12      	ldr	r3, [pc, #72]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800dfb2:	4b11      	ldr	r3, [pc, #68]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800dfb8:	4b0f      	ldr	r3, [pc, #60]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfba:	220c      	movs	r2, #12
 800dfbc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfbe:	4b0e      	ldr	r3, [pc, #56]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800dfca:	4b0b      	ldr	r3, [pc, #44]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfcc:	2218      	movs	r2, #24
 800dfce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dfd0:	4b09      	ldr	r3, [pc, #36]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfd2:	2280      	movs	r2, #128	@ 0x80
 800dfd4:	0212      	lsls	r2, r2, #8
 800dfd6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800dfd8:	4b07      	ldr	r3, [pc, #28]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfda:	2280      	movs	r2, #128	@ 0x80
 800dfdc:	0152      	lsls	r2, r2, #5
 800dfde:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800dfe0:	4b05      	ldr	r3, [pc, #20]	@ (800dff8 <MX_LPUART1_UART_Init+0x64>)
 800dfe2:	0018      	movs	r0, r3
 800dfe4:	f009 f80a 	bl	8016ffc <HAL_UART_Init>
 800dfe8:	1e03      	subs	r3, r0, #0
 800dfea:	d001      	beq.n	800dff0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800dfec:	f7fa f962 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800dff0:	46c0      	nop			@ (mov r8, r8)
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	46c0      	nop			@ (mov r8, r8)
 800dff8:	200020c8 	.word	0x200020c8
 800dffc:	40004800 	.word	0x40004800

0800e000 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e004:	4b16      	ldr	r3, [pc, #88]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e006:	4a17      	ldr	r2, [pc, #92]	@ (800e064 <MX_USART1_UART_Init+0x64>)
 800e008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e00a:	4b15      	ldr	r3, [pc, #84]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e00c:	22e1      	movs	r2, #225	@ 0xe1
 800e00e:	0252      	lsls	r2, r2, #9
 800e010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e012:	4b13      	ldr	r3, [pc, #76]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e014:	2200      	movs	r2, #0
 800e016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e018:	4b11      	ldr	r3, [pc, #68]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e01e:	4b10      	ldr	r3, [pc, #64]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e020:	2200      	movs	r2, #0
 800e022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e024:	4b0e      	ldr	r3, [pc, #56]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e026:	220c      	movs	r2, #12
 800e028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e02a:	4b0d      	ldr	r3, [pc, #52]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e030:	4b0b      	ldr	r3, [pc, #44]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e032:	2200      	movs	r2, #0
 800e034:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e036:	4b0a      	ldr	r3, [pc, #40]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e038:	2200      	movs	r2, #0
 800e03a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e03c:	4b08      	ldr	r3, [pc, #32]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e03e:	2208      	movs	r2, #8
 800e040:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e042:	4b07      	ldr	r3, [pc, #28]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e044:	2280      	movs	r2, #128	@ 0x80
 800e046:	0212      	lsls	r2, r2, #8
 800e048:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e04a:	4b05      	ldr	r3, [pc, #20]	@ (800e060 <MX_USART1_UART_Init+0x60>)
 800e04c:	0018      	movs	r0, r3
 800e04e:	f008 ffd5 	bl	8016ffc <HAL_UART_Init>
 800e052:	1e03      	subs	r3, r0, #0
 800e054:	d001      	beq.n	800e05a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e056:	f7fa f92d 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e05a:	46c0      	nop			@ (mov r8, r8)
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	20002180 	.word	0x20002180
 800e064:	40013800 	.word	0x40013800

0800e068 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e06c:	4b14      	ldr	r3, [pc, #80]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e06e:	4a15      	ldr	r2, [pc, #84]	@ (800e0c4 <MX_USART4_UART_Init+0x5c>)
 800e070:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e072:	4b13      	ldr	r3, [pc, #76]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e074:	22e1      	movs	r2, #225	@ 0xe1
 800e076:	0252      	lsls	r2, r2, #9
 800e078:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e07a:	4b11      	ldr	r3, [pc, #68]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e080:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e082:	2200      	movs	r2, #0
 800e084:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e086:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e088:	2200      	movs	r2, #0
 800e08a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e08c:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e08e:	220c      	movs	r2, #12
 800e090:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e092:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e094:	2200      	movs	r2, #0
 800e096:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e098:	4b09      	ldr	r3, [pc, #36]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e09e:	4b08      	ldr	r3, [pc, #32]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e0a4:	4b06      	ldr	r3, [pc, #24]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e0aa:	4b05      	ldr	r3, [pc, #20]	@ (800e0c0 <MX_USART4_UART_Init+0x58>)
 800e0ac:	0018      	movs	r0, r3
 800e0ae:	f008 ffa5 	bl	8016ffc <HAL_UART_Init>
 800e0b2:	1e03      	subs	r3, r0, #0
 800e0b4:	d001      	beq.n	800e0ba <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e0b6:	f7fa f8fd 	bl	80082b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e0ba:	46c0      	nop			@ (mov r8, r8)
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	20002238 	.word	0x20002238
 800e0c4:	40004c00 	.word	0x40004c00

0800e0c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e0c8:	b590      	push	{r4, r7, lr}
 800e0ca:	b08d      	sub	sp, #52	@ 0x34
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0d0:	241c      	movs	r4, #28
 800e0d2:	193b      	adds	r3, r7, r4
 800e0d4:	0018      	movs	r0, r3
 800e0d6:	2314      	movs	r3, #20
 800e0d8:	001a      	movs	r2, r3
 800e0da:	2100      	movs	r1, #0
 800e0dc:	f012 f820 	bl	8020120 <memset>
  if(uartHandle->Instance==LPUART1)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a8b      	ldr	r2, [pc, #556]	@ (800e314 <HAL_UART_MspInit+0x24c>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d129      	bne.n	800e13e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e0ea:	4b8b      	ldr	r3, [pc, #556]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e0ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0ee:	4b8a      	ldr	r3, [pc, #552]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e0f0:	2180      	movs	r1, #128	@ 0x80
 800e0f2:	02c9      	lsls	r1, r1, #11
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e0f8:	4b87      	ldr	r3, [pc, #540]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e0fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0fc:	4b86      	ldr	r3, [pc, #536]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e0fe:	2104      	movs	r1, #4
 800e100:	430a      	orrs	r2, r1
 800e102:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e104:	4b84      	ldr	r3, [pc, #528]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e108:	2204      	movs	r2, #4
 800e10a:	4013      	ands	r3, r2
 800e10c:	61bb      	str	r3, [r7, #24]
 800e10e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e110:	0021      	movs	r1, r4
 800e112:	187b      	adds	r3, r7, r1
 800e114:	2203      	movs	r2, #3
 800e116:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e118:	187b      	adds	r3, r7, r1
 800e11a:	2202      	movs	r2, #2
 800e11c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e11e:	187b      	adds	r3, r7, r1
 800e120:	2200      	movs	r2, #0
 800e122:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e124:	187b      	adds	r3, r7, r1
 800e126:	2203      	movs	r2, #3
 800e128:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e12a:	187b      	adds	r3, r7, r1
 800e12c:	2206      	movs	r2, #6
 800e12e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e130:	187b      	adds	r3, r7, r1
 800e132:	4a7a      	ldr	r2, [pc, #488]	@ (800e31c <HAL_UART_MspInit+0x254>)
 800e134:	0019      	movs	r1, r3
 800e136:	0010      	movs	r0, r2
 800e138:	f001 fe90 	bl	800fe5c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e13c:	e0e5      	b.n	800e30a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4a77      	ldr	r2, [pc, #476]	@ (800e320 <HAL_UART_MspInit+0x258>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d133      	bne.n	800e1b0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e148:	4b73      	ldr	r3, [pc, #460]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e14a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e14c:	4b72      	ldr	r3, [pc, #456]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e14e:	2180      	movs	r1, #128	@ 0x80
 800e150:	01c9      	lsls	r1, r1, #7
 800e152:	430a      	orrs	r2, r1
 800e154:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e156:	4b70      	ldr	r3, [pc, #448]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e15a:	4b6f      	ldr	r3, [pc, #444]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e15c:	2101      	movs	r1, #1
 800e15e:	430a      	orrs	r2, r1
 800e160:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e162:	4b6d      	ldr	r3, [pc, #436]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e166:	2201      	movs	r2, #1
 800e168:	4013      	ands	r3, r2
 800e16a:	617b      	str	r3, [r7, #20]
 800e16c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e16e:	211c      	movs	r1, #28
 800e170:	187b      	adds	r3, r7, r1
 800e172:	22c0      	movs	r2, #192	@ 0xc0
 800e174:	00d2      	lsls	r2, r2, #3
 800e176:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e178:	187b      	adds	r3, r7, r1
 800e17a:	2202      	movs	r2, #2
 800e17c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e17e:	187b      	adds	r3, r7, r1
 800e180:	2200      	movs	r2, #0
 800e182:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e184:	187b      	adds	r3, r7, r1
 800e186:	2203      	movs	r2, #3
 800e188:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e18a:	187b      	adds	r3, r7, r1
 800e18c:	2204      	movs	r2, #4
 800e18e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e190:	187a      	adds	r2, r7, r1
 800e192:	23a0      	movs	r3, #160	@ 0xa0
 800e194:	05db      	lsls	r3, r3, #23
 800e196:	0011      	movs	r1, r2
 800e198:	0018      	movs	r0, r3
 800e19a:	f001 fe5f 	bl	800fe5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e19e:	2200      	movs	r2, #0
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	201b      	movs	r0, #27
 800e1a4:	f001 fa08 	bl	800f5b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e1a8:	201b      	movs	r0, #27
 800e1aa:	f001 fa1a 	bl	800f5e2 <HAL_NVIC_EnableIRQ>
}
 800e1ae:	e0ac      	b.n	800e30a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a5b      	ldr	r2, [pc, #364]	@ (800e324 <HAL_UART_MspInit+0x25c>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d000      	beq.n	800e1bc <HAL_UART_MspInit+0xf4>
 800e1ba:	e0a6      	b.n	800e30a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e1bc:	4b56      	ldr	r3, [pc, #344]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1c0:	4b55      	ldr	r3, [pc, #340]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1c2:	2180      	movs	r1, #128	@ 0x80
 800e1c4:	0309      	lsls	r1, r1, #12
 800e1c6:	430a      	orrs	r2, r1
 800e1c8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1ca:	4b53      	ldr	r3, [pc, #332]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ce:	4b52      	ldr	r3, [pc, #328]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	430a      	orrs	r2, r1
 800e1d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e1d6:	4b50      	ldr	r3, [pc, #320]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1da:	2201      	movs	r2, #1
 800e1dc:	4013      	ands	r3, r2
 800e1de:	613b      	str	r3, [r7, #16]
 800e1e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1e2:	4b4d      	ldr	r3, [pc, #308]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1e6:	4b4c      	ldr	r3, [pc, #304]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1e8:	2104      	movs	r1, #4
 800e1ea:	430a      	orrs	r2, r1
 800e1ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e1ee:	4b4a      	ldr	r3, [pc, #296]	@ (800e318 <HAL_UART_MspInit+0x250>)
 800e1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f2:	2204      	movs	r2, #4
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e1fa:	241c      	movs	r4, #28
 800e1fc:	193b      	adds	r3, r7, r4
 800e1fe:	2202      	movs	r2, #2
 800e200:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e202:	193b      	adds	r3, r7, r4
 800e204:	2202      	movs	r2, #2
 800e206:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e208:	193b      	adds	r3, r7, r4
 800e20a:	2200      	movs	r2, #0
 800e20c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e20e:	193b      	adds	r3, r7, r4
 800e210:	2203      	movs	r2, #3
 800e212:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e214:	193b      	adds	r3, r7, r4
 800e216:	2206      	movs	r2, #6
 800e218:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e21a:	193a      	adds	r2, r7, r4
 800e21c:	23a0      	movs	r3, #160	@ 0xa0
 800e21e:	05db      	lsls	r3, r3, #23
 800e220:	0011      	movs	r1, r2
 800e222:	0018      	movs	r0, r3
 800e224:	f001 fe1a 	bl	800fe5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e228:	0021      	movs	r1, r4
 800e22a:	187b      	adds	r3, r7, r1
 800e22c:	2280      	movs	r2, #128	@ 0x80
 800e22e:	00d2      	lsls	r2, r2, #3
 800e230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e232:	187b      	adds	r3, r7, r1
 800e234:	2202      	movs	r2, #2
 800e236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e238:	187b      	adds	r3, r7, r1
 800e23a:	2200      	movs	r2, #0
 800e23c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e23e:	187b      	adds	r3, r7, r1
 800e240:	2203      	movs	r2, #3
 800e242:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e244:	187b      	adds	r3, r7, r1
 800e246:	2206      	movs	r2, #6
 800e248:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e24a:	187b      	adds	r3, r7, r1
 800e24c:	4a33      	ldr	r2, [pc, #204]	@ (800e31c <HAL_UART_MspInit+0x254>)
 800e24e:	0019      	movs	r1, r3
 800e250:	0010      	movs	r0, r2
 800e252:	f001 fe03 	bl	800fe5c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e256:	4b34      	ldr	r3, [pc, #208]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e258:	4a34      	ldr	r2, [pc, #208]	@ (800e32c <HAL_UART_MspInit+0x264>)
 800e25a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e25c:	4b32      	ldr	r3, [pc, #200]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e25e:	220c      	movs	r2, #12
 800e260:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e262:	4b31      	ldr	r3, [pc, #196]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e264:	2200      	movs	r2, #0
 800e266:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e268:	4b2f      	ldr	r3, [pc, #188]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e26e:	4b2e      	ldr	r3, [pc, #184]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e270:	2280      	movs	r2, #128	@ 0x80
 800e272:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e274:	4b2c      	ldr	r3, [pc, #176]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e276:	2200      	movs	r2, #0
 800e278:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e27a:	4b2b      	ldr	r3, [pc, #172]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e280:	4b29      	ldr	r3, [pc, #164]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e282:	2220      	movs	r2, #32
 800e284:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e286:	4b28      	ldr	r3, [pc, #160]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e288:	2200      	movs	r2, #0
 800e28a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e28c:	4b26      	ldr	r3, [pc, #152]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e28e:	0018      	movs	r0, r3
 800e290:	f001 f9c8 	bl	800f624 <HAL_DMA_Init>
 800e294:	1e03      	subs	r3, r0, #0
 800e296:	d001      	beq.n	800e29c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e298:	f7fa f80c 	bl	80082b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4a22      	ldr	r2, [pc, #136]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e2a0:	675a      	str	r2, [r3, #116]	@ 0x74
 800e2a2:	4b21      	ldr	r3, [pc, #132]	@ (800e328 <HAL_UART_MspInit+0x260>)
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e2a8:	4b21      	ldr	r3, [pc, #132]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2aa:	4a22      	ldr	r2, [pc, #136]	@ (800e334 <HAL_UART_MspInit+0x26c>)
 800e2ac:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e2ae:	4b20      	ldr	r3, [pc, #128]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2b0:	220c      	movs	r2, #12
 800e2b2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e2b4:	4b1e      	ldr	r3, [pc, #120]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2b6:	2210      	movs	r2, #16
 800e2b8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e2c0:	4b1b      	ldr	r3, [pc, #108]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2c2:	2280      	movs	r2, #128	@ 0x80
 800e2c4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e2cc:	4b18      	ldr	r3, [pc, #96]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e2d2:	4b17      	ldr	r3, [pc, #92]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e2d8:	4b15      	ldr	r3, [pc, #84]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e2de:	4b14      	ldr	r3, [pc, #80]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2e0:	0018      	movs	r0, r3
 800e2e2:	f001 f99f 	bl	800f624 <HAL_DMA_Init>
 800e2e6:	1e03      	subs	r3, r0, #0
 800e2e8:	d001      	beq.n	800e2ee <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e2ea:	f7f9 ffe3 	bl	80082b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	4a0f      	ldr	r2, [pc, #60]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2f2:	671a      	str	r2, [r3, #112]	@ 0x70
 800e2f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e330 <HAL_UART_MspInit+0x268>)
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	200e      	movs	r0, #14
 800e300:	f001 f95a 	bl	800f5b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e304:	200e      	movs	r0, #14
 800e306:	f001 f96c 	bl	800f5e2 <HAL_NVIC_EnableIRQ>
}
 800e30a:	46c0      	nop			@ (mov r8, r8)
 800e30c:	46bd      	mov	sp, r7
 800e30e:	b00d      	add	sp, #52	@ 0x34
 800e310:	bd90      	pop	{r4, r7, pc}
 800e312:	46c0      	nop			@ (mov r8, r8)
 800e314:	40004800 	.word	0x40004800
 800e318:	40021000 	.word	0x40021000
 800e31c:	50000800 	.word	0x50000800
 800e320:	40013800 	.word	0x40013800
 800e324:	40004c00 	.word	0x40004c00
 800e328:	200022f0 	.word	0x200022f0
 800e32c:	4002006c 	.word	0x4002006c
 800e330:	20002338 	.word	0x20002338
 800e334:	40020080 	.word	0x40020080

0800e338 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e340:	f000 fc96 	bl	800ec70 <HAL_GetTick>
 800e344:	0003      	movs	r3, r0
 800e346:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e348:	4b1c      	ldr	r3, [pc, #112]	@ (800e3bc <TimestampIsReached+0x84>)
 800e34a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e34c:	697a      	ldr	r2, [r7, #20]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	429a      	cmp	r2, r3
 800e352:	d307      	bcc.n	800e364 <TimestampIsReached+0x2c>
 800e354:	697a      	ldr	r2, [r7, #20]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	693a      	ldr	r2, [r7, #16]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d901      	bls.n	800e364 <TimestampIsReached+0x2c>
 800e360:	2201      	movs	r2, #1
 800e362:	e000      	b.n	800e366 <TimestampIsReached+0x2e>
 800e364:	2200      	movs	r2, #0
 800e366:	230f      	movs	r3, #15
 800e368:	18fb      	adds	r3, r7, r3
 800e36a:	701a      	strb	r2, [r3, #0]
 800e36c:	781a      	ldrb	r2, [r3, #0]
 800e36e:	2101      	movs	r1, #1
 800e370:	400a      	ands	r2, r1
 800e372:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e374:	697a      	ldr	r2, [r7, #20]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d207      	bcs.n	800e38c <TimestampIsReached+0x54>
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	429a      	cmp	r2, r3
 800e386:	d201      	bcs.n	800e38c <TimestampIsReached+0x54>
 800e388:	2201      	movs	r2, #1
 800e38a:	e000      	b.n	800e38e <TimestampIsReached+0x56>
 800e38c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e38e:	200e      	movs	r0, #14
 800e390:	183b      	adds	r3, r7, r0
 800e392:	701a      	strb	r2, [r3, #0]
 800e394:	781a      	ldrb	r2, [r3, #0]
 800e396:	2101      	movs	r1, #1
 800e398:	400a      	ands	r2, r1
 800e39a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e39c:	230f      	movs	r3, #15
 800e39e:	18fb      	adds	r3, r7, r3
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d103      	bne.n	800e3ae <TimestampIsReached+0x76>
 800e3a6:	183b      	adds	r3, r7, r0
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e000      	b.n	800e3b4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	b006      	add	sp, #24
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	7fffffff 	.word	0x7fffffff

0800e3c0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e3c8:	f000 fc52 	bl	800ec70 <HAL_GetTick>
 800e3cc:	0002      	movs	r2, r0
 800e3ce:	4904      	ldr	r1, [pc, #16]	@ (800e3e0 <AddTimestamp+0x20>)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	0018      	movs	r0, r3
 800e3d4:	f011 fd60 	bl	801fe98 <siprintf>
}
 800e3d8:	46c0      	nop			@ (mov r8, r8)
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	b002      	add	sp, #8
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	08024eb8 	.word	0x08024eb8

0800e3e4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e3e4:	b40c      	push	{r2, r3}
 800e3e6:	b5b0      	push	{r4, r5, r7, lr}
 800e3e8:	b0a4      	sub	sp, #144	@ 0x90
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	0002      	movs	r2, r0
 800e3ee:	6039      	str	r1, [r7, #0]
 800e3f0:	1dfb      	adds	r3, r7, #7
 800e3f2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e3f4:	4b23      	ldr	r3, [pc, #140]	@ (800e484 <CreateLine+0xa0>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	1dfa      	adds	r2, r7, #7
 800e3fa:	7812      	ldrb	r2, [r2, #0]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d839      	bhi.n	800e474 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e400:	683a      	ldr	r2, [r7, #0]
 800e402:	4921      	ldr	r1, [pc, #132]	@ (800e488 <CreateLine+0xa4>)
 800e404:	240c      	movs	r4, #12
 800e406:	193b      	adds	r3, r7, r4
 800e408:	0018      	movs	r0, r3
 800e40a:	f011 fd45 	bl	801fe98 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e40e:	4b1d      	ldr	r3, [pc, #116]	@ (800e484 <CreateLine+0xa0>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d909      	bls.n	800e42a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e416:	193b      	adds	r3, r7, r4
 800e418:	0018      	movs	r0, r3
 800e41a:	f7f1 fea7 	bl	800016c <strlen>
 800e41e:	0002      	movs	r2, r0
 800e420:	193b      	adds	r3, r7, r4
 800e422:	189b      	adds	r3, r3, r2
 800e424:	0018      	movs	r0, r3
 800e426:	f7ff ffcb 	bl	800e3c0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e42a:	240c      	movs	r4, #12
 800e42c:	193b      	adds	r3, r7, r4
 800e42e:	0018      	movs	r0, r3
 800e430:	f7f1 fe9c 	bl	800016c <strlen>
 800e434:	0003      	movs	r3, r0
 800e436:	218c      	movs	r1, #140	@ 0x8c
 800e438:	187a      	adds	r2, r7, r1
 800e43a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e43c:	239c      	movs	r3, #156	@ 0x9c
 800e43e:	2508      	movs	r5, #8
 800e440:	195b      	adds	r3, r3, r5
 800e442:	19db      	adds	r3, r3, r7
 800e444:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e446:	193a      	adds	r2, r7, r4
 800e448:	187b      	adds	r3, r7, r1
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	18d0      	adds	r0, r2, r3
 800e44e:	187b      	adds	r3, r7, r1
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2280      	movs	r2, #128	@ 0x80
 800e454:	1ad3      	subs	r3, r2, r3
 800e456:	0019      	movs	r1, r3
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2298      	movs	r2, #152	@ 0x98
 800e45c:	1952      	adds	r2, r2, r5
 800e45e:	19d2      	adds	r2, r2, r7
 800e460:	6812      	ldr	r2, [r2, #0]
 800e462:	f011 fdb1 	bl	801ffc8 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e466:	193a      	adds	r2, r7, r4
 800e468:	4b08      	ldr	r3, [pc, #32]	@ (800e48c <CreateLine+0xa8>)
 800e46a:	0011      	movs	r1, r2
 800e46c:	0018      	movs	r0, r3
 800e46e:	f011 fca3 	bl	801fdb8 <iprintf>
 800e472:	e000      	b.n	800e476 <CreateLine+0x92>
    return;
 800e474:	46c0      	nop			@ (mov r8, r8)
}
 800e476:	46bd      	mov	sp, r7
 800e478:	b024      	add	sp, #144	@ 0x90
 800e47a:	bcb0      	pop	{r4, r5, r7}
 800e47c:	bc08      	pop	{r3}
 800e47e:	b002      	add	sp, #8
 800e480:	4718      	bx	r3
 800e482:	46c0      	nop			@ (mov r8, r8)
 800e484:	200000cc 	.word	0x200000cc
 800e488:	08024ec4 	.word	0x08024ec4
 800e48c:	08024ec8 	.word	0x08024ec8

0800e490 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	68b9      	ldr	r1, [r7, #8]
 800e4a2:	4804      	ldr	r0, [pc, #16]	@ (800e4b4 <_write+0x24>)
 800e4a4:	2364      	movs	r3, #100	@ 0x64
 800e4a6:	f008 fe0f 	bl	80170c8 <HAL_UART_Transmit>

  return count;
 800e4aa:	687b      	ldr	r3, [r7, #4]
}
 800e4ac:	0018      	movs	r0, r3
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	b004      	add	sp, #16
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	20002180 	.word	0x20002180

0800e4b8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	0002      	movs	r2, r0
 800e4c0:	1dfb      	adds	r3, r7, #7
 800e4c2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e4c4:	4b03      	ldr	r3, [pc, #12]	@ (800e4d4 <SetVerboseLevel+0x1c>)
 800e4c6:	1dfa      	adds	r2, r7, #7
 800e4c8:	7812      	ldrb	r2, [r2, #0]
 800e4ca:	701a      	strb	r2, [r3, #0]
}
 800e4cc:	46c0      	nop			@ (mov r8, r8)
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	b002      	add	sp, #8
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	200000cc 	.word	0x200000cc

0800e4d8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e4dc:	4b02      	ldr	r3, [pc, #8]	@ (800e4e8 <GetVerboseLevel+0x10>)
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	0018      	movs	r0, r3
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	46c0      	nop			@ (mov r8, r8)
 800e4e8:	200000cc 	.word	0x200000cc

0800e4ec <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e4f2:	4a0f      	ldr	r2, [pc, #60]	@ (800e530 <BinaryReleaseInfo+0x44>)
 800e4f4:	4b0f      	ldr	r3, [pc, #60]	@ (800e534 <BinaryReleaseInfo+0x48>)
 800e4f6:	0019      	movs	r1, r3
 800e4f8:	2002      	movs	r0, #2
 800e4fa:	f7ff ff73 	bl	800e3e4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e4fe:	480e      	ldr	r0, [pc, #56]	@ (800e538 <BinaryReleaseInfo+0x4c>)
 800e500:	4a0e      	ldr	r2, [pc, #56]	@ (800e53c <BinaryReleaseInfo+0x50>)
 800e502:	490c      	ldr	r1, [pc, #48]	@ (800e534 <BinaryReleaseInfo+0x48>)
 800e504:	4b0e      	ldr	r3, [pc, #56]	@ (800e540 <BinaryReleaseInfo+0x54>)
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	0003      	movs	r3, r0
 800e50a:	2002      	movs	r0, #2
 800e50c:	f7ff ff6a 	bl	800e3e4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e510:	4b0c      	ldr	r3, [pc, #48]	@ (800e544 <BinaryReleaseInfo+0x58>)
 800e512:	4a0d      	ldr	r2, [pc, #52]	@ (800e548 <BinaryReleaseInfo+0x5c>)
 800e514:	4907      	ldr	r1, [pc, #28]	@ (800e534 <BinaryReleaseInfo+0x48>)
 800e516:	2002      	movs	r0, #2
 800e518:	f7ff ff64 	bl	800e3e4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e51c:	4b0b      	ldr	r3, [pc, #44]	@ (800e54c <BinaryReleaseInfo+0x60>)
 800e51e:	4a0c      	ldr	r2, [pc, #48]	@ (800e550 <BinaryReleaseInfo+0x64>)
 800e520:	4904      	ldr	r1, [pc, #16]	@ (800e534 <BinaryReleaseInfo+0x48>)
 800e522:	2002      	movs	r0, #2
 800e524:	f7ff ff5e 	bl	800e3e4 <CreateLine>
}
 800e528:	46c0      	nop			@ (mov r8, r8)
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	46c0      	nop			@ (mov r8, r8)
 800e530:	08024ed0 	.word	0x08024ed0
 800e534:	08024efc 	.word	0x08024efc
 800e538:	08024f00 	.word	0x08024f00
 800e53c:	08024f0c 	.word	0x08024f0c
 800e540:	08024f20 	.word	0x08024f20
 800e544:	08024f2c 	.word	0x08024f2c
 800e548:	08024f38 	.word	0x08024f38
 800e54c:	08024f40 	.word	0x08024f40
 800e550:	08024f48 	.word	0x08024f48

0800e554 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	68f9      	ldr	r1, [r7, #12]
 800e566:	4803      	ldr	r0, [pc, #12]	@ (800e574 <errorHandler+0x20>)
 800e568:	f011 fc26 	bl	801fdb8 <iprintf>
//    while (true)
//    {
//    }
}
 800e56c:	46c0      	nop			@ (mov r8, r8)
 800e56e:	46bd      	mov	sp, r7
 800e570:	b004      	add	sp, #16
 800e572:	bd80      	pop	{r7, pc}
 800e574:	08024f60 	.word	0x08024f60

0800e578 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e578:	b590      	push	{r4, r7, lr}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6039      	str	r1, [r7, #0]
 800e580:	0011      	movs	r1, r2
 800e582:	1dfb      	adds	r3, r7, #7
 800e584:	1c02      	adds	r2, r0, #0
 800e586:	701a      	strb	r2, [r3, #0]
 800e588:	1dbb      	adds	r3, r7, #6
 800e58a:	1c0a      	adds	r2, r1, #0
 800e58c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e58e:	4b0a      	ldr	r3, [pc, #40]	@ (800e5b8 <ReadRegister+0x40>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00a      	beq.n	800e5ac <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e596:	4b08      	ldr	r3, [pc, #32]	@ (800e5b8 <ReadRegister+0x40>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	1dba      	adds	r2, r7, #6
 800e59c:	7814      	ldrb	r4, [r2, #0]
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	1dfa      	adds	r2, r7, #7
 800e5a2:	7810      	ldrb	r0, [r2, #0]
 800e5a4:	0022      	movs	r2, r4
 800e5a6:	4798      	blx	r3
 800e5a8:	0003      	movs	r3, r0
 800e5aa:	e000      	b.n	800e5ae <ReadRegister+0x36>
	}
	return false;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	0018      	movs	r0, r3
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	b003      	add	sp, #12
 800e5b4:	bd90      	pop	{r4, r7, pc}
 800e5b6:	46c0      	nop			@ (mov r8, r8)
 800e5b8:	20002388 	.word	0x20002388

0800e5bc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e5bc:	b590      	push	{r4, r7, lr}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6039      	str	r1, [r7, #0]
 800e5c4:	0011      	movs	r1, r2
 800e5c6:	1dfb      	adds	r3, r7, #7
 800e5c8:	1c02      	adds	r2, r0, #0
 800e5ca:	701a      	strb	r2, [r3, #0]
 800e5cc:	1dbb      	adds	r3, r7, #6
 800e5ce:	1c0a      	adds	r2, r1, #0
 800e5d0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5fc <WriteRegister+0x40>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00a      	beq.n	800e5f0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e5da:	4b08      	ldr	r3, [pc, #32]	@ (800e5fc <WriteRegister+0x40>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	1dba      	adds	r2, r7, #6
 800e5e0:	7814      	ldrb	r4, [r2, #0]
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	1dfa      	adds	r2, r7, #7
 800e5e6:	7810      	ldrb	r0, [r2, #0]
 800e5e8:	0022      	movs	r2, r4
 800e5ea:	4798      	blx	r3
 800e5ec:	0003      	movs	r3, r0
 800e5ee:	e000      	b.n	800e5f2 <WriteRegister+0x36>
  }
  return false;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	0018      	movs	r0, r3
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	b003      	add	sp, #12
 800e5f8:	bd90      	pop	{r4, r7, pc}
 800e5fa:	46c0      	nop			@ (mov r8, r8)
 800e5fc:	2000238c 	.word	0x2000238c

0800e600 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	000a      	movs	r2, r1
 800e60a:	1cfb      	adds	r3, r7, #3
 800e60c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e60e:	230f      	movs	r3, #15
 800e610:	18fb      	adds	r3, r7, r3
 800e612:	22ff      	movs	r2, #255	@ 0xff
 800e614:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e616:	230e      	movs	r3, #14
 800e618:	18fb      	adds	r3, r7, r3
 800e61a:	2200      	movs	r2, #0
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	e037      	b.n	800e690 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e620:	230e      	movs	r3, #14
 800e622:	18fb      	adds	r3, r7, r3
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	18d3      	adds	r3, r2, r3
 800e62a:	7819      	ldrb	r1, [r3, #0]
 800e62c:	220f      	movs	r2, #15
 800e62e:	18bb      	adds	r3, r7, r2
 800e630:	18ba      	adds	r2, r7, r2
 800e632:	7812      	ldrb	r2, [r2, #0]
 800e634:	404a      	eors	r2, r1
 800e636:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e638:	230d      	movs	r3, #13
 800e63a:	18fb      	adds	r3, r7, r3
 800e63c:	2200      	movs	r2, #0
 800e63e:	701a      	strb	r2, [r3, #0]
 800e640:	e01b      	b.n	800e67a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e642:	210f      	movs	r1, #15
 800e644:	187b      	adds	r3, r7, r1
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	b25b      	sxtb	r3, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	da09      	bge.n	800e662 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e64e:	187b      	adds	r3, r7, r1
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	005b      	lsls	r3, r3, #1
 800e654:	b25b      	sxtb	r3, r3
 800e656:	2231      	movs	r2, #49	@ 0x31
 800e658:	4053      	eors	r3, r2
 800e65a:	b25a      	sxtb	r2, r3
 800e65c:	187b      	adds	r3, r7, r1
 800e65e:	701a      	strb	r2, [r3, #0]
 800e660:	e005      	b.n	800e66e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e662:	230f      	movs	r3, #15
 800e664:	18fa      	adds	r2, r7, r3
 800e666:	18fb      	adds	r3, r7, r3
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	18db      	adds	r3, r3, r3
 800e66c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e66e:	210d      	movs	r1, #13
 800e670:	187b      	adds	r3, r7, r1
 800e672:	781a      	ldrb	r2, [r3, #0]
 800e674:	187b      	adds	r3, r7, r1
 800e676:	3201      	adds	r2, #1
 800e678:	701a      	strb	r2, [r3, #0]
 800e67a:	230d      	movs	r3, #13
 800e67c:	18fb      	adds	r3, r7, r3
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b07      	cmp	r3, #7
 800e682:	d9de      	bls.n	800e642 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e684:	210e      	movs	r1, #14
 800e686:	187b      	adds	r3, r7, r1
 800e688:	781a      	ldrb	r2, [r3, #0]
 800e68a:	187b      	adds	r3, r7, r1
 800e68c:	3201      	adds	r2, #1
 800e68e:	701a      	strb	r2, [r3, #0]
 800e690:	230e      	movs	r3, #14
 800e692:	18fa      	adds	r2, r7, r3
 800e694:	1cfb      	adds	r3, r7, #3
 800e696:	7812      	ldrb	r2, [r2, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d3c0      	bcc.n	800e620 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e69e:	230f      	movs	r3, #15
 800e6a0:	18fb      	adds	r3, r7, r3
 800e6a2:	781b      	ldrb	r3, [r3, #0]
}
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	b004      	add	sp, #16
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e6e0 <HIDS_Init+0x34>)
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e6bc:	4b09      	ldr	r3, [pc, #36]	@ (800e6e4 <HIDS_Init+0x38>)
 800e6be:	683a      	ldr	r2, [r7, #0]
 800e6c0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e6c2:	4b09      	ldr	r3, [pc, #36]	@ (800e6e8 <HIDS_Init+0x3c>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	0018      	movs	r0, r3
 800e6c8:	f000 f840 	bl	800e74c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e6cc:	4b07      	ldr	r3, [pc, #28]	@ (800e6ec <HIDS_Init+0x40>)
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	0018      	movs	r0, r3
 800e6d2:	f000 f82b 	bl	800e72c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e6d6:	46c0      	nop			@ (mov r8, r8)
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	b002      	add	sp, #8
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	46c0      	nop			@ (mov r8, r8)
 800e6e0:	20002388 	.word	0x20002388
 800e6e4:	2000238c 	.word	0x2000238c
 800e6e8:	200000ce 	.word	0x200000ce
 800e6ec:	200000cd 	.word	0x200000cd

0800e6f0 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e6f4:	f000 fabc 	bl	800ec70 <HAL_GetTick>
 800e6f8:	0002      	movs	r2, r0
 800e6fa:	4b08      	ldr	r3, [pc, #32]	@ (800e71c <HIDS_StartMeasurement+0x2c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	18d2      	adds	r2, r2, r3
 800e700:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <HIDS_StartMeasurement+0x30>)
 800e702:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e704:	4b07      	ldr	r3, [pc, #28]	@ (800e724 <HIDS_StartMeasurement+0x34>)
 800e706:	2201      	movs	r2, #1
 800e708:	0019      	movs	r1, r3
 800e70a:	2044      	movs	r0, #68	@ 0x44
 800e70c:	f7ff ff56 	bl	800e5bc <WriteRegister>
  MeasurementDone = false;
 800e710:	4b05      	ldr	r3, [pc, #20]	@ (800e728 <HIDS_StartMeasurement+0x38>)
 800e712:	2200      	movs	r2, #0
 800e714:	701a      	strb	r2, [r3, #0]
}
 800e716:	46c0      	nop			@ (mov r8, r8)
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	200000d4 	.word	0x200000d4
 800e720:	200000d0 	.word	0x200000d0
 800e724:	200000ce 	.word	0x200000ce
 800e728:	2000239e 	.word	0x2000239e

0800e72c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	0002      	movs	r2, r0
 800e734:	1dfb      	adds	r3, r7, #7
 800e736:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e738:	4b03      	ldr	r3, [pc, #12]	@ (800e748 <HIDS_SetHeaterMode+0x1c>)
 800e73a:	1dfa      	adds	r2, r7, #7
 800e73c:	7812      	ldrb	r2, [r2, #0]
 800e73e:	701a      	strb	r2, [r3, #0]
}
 800e740:	46c0      	nop			@ (mov r8, r8)
 800e742:	46bd      	mov	sp, r7
 800e744:	b002      	add	sp, #8
 800e746:	bd80      	pop	{r7, pc}
 800e748:	200000cd 	.word	0x200000cd

0800e74c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	0002      	movs	r2, r0
 800e754:	1dfb      	adds	r3, r7, #7
 800e756:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e758:	4b03      	ldr	r3, [pc, #12]	@ (800e768 <HIDS_SetMeasurementMode+0x1c>)
 800e75a:	1dfa      	adds	r2, r7, #7
 800e75c:	7812      	ldrb	r2, [r2, #0]
 800e75e:	701a      	strb	r2, [r3, #0]
}
 800e760:	46c0      	nop			@ (mov r8, r8)
 800e762:	46bd      	mov	sp, r7
 800e764:	b002      	add	sp, #8
 800e766:	bd80      	pop	{r7, pc}
 800e768:	200000ce 	.word	0x200000ce

0800e76c <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e774:	f000 fa7c 	bl	800ec70 <HAL_GetTick>
 800e778:	0002      	movs	r2, r0
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	18d2      	adds	r2, r2, r3
 800e77e:	4b03      	ldr	r3, [pc, #12]	@ (800e78c <setHIDSTimeStamp+0x20>)
 800e780:	601a      	str	r2, [r3, #0]
}
 800e782:	46c0      	nop			@ (mov r8, r8)
 800e784:	46bd      	mov	sp, r7
 800e786:	b002      	add	sp, #8
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	46c0      	nop			@ (mov r8, r8)
 800e78c:	200023a0 	.word	0x200023a0

0800e790 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e790:	b590      	push	{r4, r7, lr}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	781a      	ldrb	r2, [r3, #0]
 800e79c:	210c      	movs	r1, #12
 800e79e:	187b      	adds	r3, r7, r1
 800e7a0:	701a      	strb	r2, [r3, #0]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	785a      	ldrb	r2, [r3, #1]
 800e7a6:	187b      	adds	r3, r7, r1
 800e7a8:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e7aa:	240f      	movs	r4, #15
 800e7ac:	193b      	adds	r3, r7, r4
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	7892      	ldrb	r2, [r2, #2]
 800e7b2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e7b4:	187b      	adds	r3, r7, r1
 800e7b6:	2102      	movs	r1, #2
 800e7b8:	0018      	movs	r0, r3
 800e7ba:	f7ff ff21 	bl	800e600 <CalculateCRC>
 800e7be:	0003      	movs	r3, r0
 800e7c0:	001a      	movs	r2, r3
 800e7c2:	193b      	adds	r3, r7, r4
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d007      	beq.n	800e7da <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800e7ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e834 <CheckCRC+0xa4>)
 800e7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e838 <CheckCRC+0xa8>)
 800e7ce:	0019      	movs	r1, r3
 800e7d0:	2001      	movs	r0, #1
 800e7d2:	f7ff fe07 	bl	800e3e4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	e027      	b.n	800e82a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	78da      	ldrb	r2, [r3, #3]
 800e7de:	2108      	movs	r1, #8
 800e7e0:	187b      	adds	r3, r7, r1
 800e7e2:	701a      	strb	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	791a      	ldrb	r2, [r3, #4]
 800e7e8:	187b      	adds	r3, r7, r1
 800e7ea:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800e7ec:	240e      	movs	r4, #14
 800e7ee:	193b      	adds	r3, r7, r4
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	7952      	ldrb	r2, [r2, #5]
 800e7f4:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800e7f6:	187b      	adds	r3, r7, r1
 800e7f8:	2102      	movs	r1, #2
 800e7fa:	0018      	movs	r0, r3
 800e7fc:	f7ff ff00 	bl	800e600 <CalculateCRC>
 800e800:	0003      	movs	r3, r0
 800e802:	001a      	movs	r2, r3
 800e804:	193b      	adds	r3, r7, r4
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	4293      	cmp	r3, r2
 800e80a:	d00d      	beq.n	800e828 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800e80c:	4a0b      	ldr	r2, [pc, #44]	@ (800e83c <CheckCRC+0xac>)
 800e80e:	4b0a      	ldr	r3, [pc, #40]	@ (800e838 <CheckCRC+0xa8>)
 800e810:	0019      	movs	r1, r3
 800e812:	2001      	movs	r0, #1
 800e814:	f7ff fde6 	bl	800e3e4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800e818:	4a09      	ldr	r2, [pc, #36]	@ (800e840 <CheckCRC+0xb0>)
 800e81a:	4b0a      	ldr	r3, [pc, #40]	@ (800e844 <CheckCRC+0xb4>)
 800e81c:	217c      	movs	r1, #124	@ 0x7c
 800e81e:	0018      	movs	r0, r3
 800e820:	f7ff fe98 	bl	800e554 <errorHandler>
		return false;
 800e824:	2300      	movs	r3, #0
 800e826:	e000      	b.n	800e82a <CheckCRC+0x9a>
	}
	return true;
 800e828:	2301      	movs	r3, #1
}
 800e82a:	0018      	movs	r0, r3
 800e82c:	46bd      	mov	sp, r7
 800e82e:	b005      	add	sp, #20
 800e830:	bd90      	pop	{r4, r7, pc}
 800e832:	46c0      	nop			@ (mov r8, r8)
 800e834:	08024fac 	.word	0x08024fac
 800e838:	08024fd4 	.word	0x08024fd4
 800e83c:	08024fd8 	.word	0x08024fd8
 800e840:	08025004 	.word	0x08025004
 800e844:	0802559c 	.word	0x0802559c

0800e848 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e84e:	1dbb      	adds	r3, r7, #6
 800e850:	2289      	movs	r2, #137	@ 0x89
 800e852:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e854:	1dbb      	adds	r3, r7, #6
 800e856:	2201      	movs	r2, #1
 800e858:	0019      	movs	r1, r3
 800e85a:	2044      	movs	r0, #68	@ 0x44
 800e85c:	f7ff feae 	bl	800e5bc <WriteRegister>
	HAL_Delay(30);
 800e860:	201e      	movs	r0, #30
 800e862:	f000 fa0f 	bl	800ec84 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e866:	4b14      	ldr	r3, [pc, #80]	@ (800e8b8 <HIDS_DeviceConnected+0x70>)
 800e868:	2206      	movs	r2, #6
 800e86a:	0019      	movs	r1, r3
 800e86c:	2044      	movs	r0, #68	@ 0x44
 800e86e:	f7ff fe83 	bl	800e578 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e872:	1dfb      	adds	r3, r7, #7
 800e874:	2200      	movs	r2, #0
 800e876:	701a      	strb	r2, [r3, #0]
 800e878:	e011      	b.n	800e89e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e87a:	1dfb      	adds	r3, r7, #7
 800e87c:	7818      	ldrb	r0, [r3, #0]
 800e87e:	1dfb      	adds	r3, r7, #7
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	4a0d      	ldr	r2, [pc, #52]	@ (800e8b8 <HIDS_DeviceConnected+0x70>)
 800e884:	5cd3      	ldrb	r3, [r2, r3]
 800e886:	4a0d      	ldr	r2, [pc, #52]	@ (800e8bc <HIDS_DeviceConnected+0x74>)
 800e888:	490d      	ldr	r1, [pc, #52]	@ (800e8c0 <HIDS_DeviceConnected+0x78>)
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	0003      	movs	r3, r0
 800e88e:	2002      	movs	r0, #2
 800e890:	f7ff fda8 	bl	800e3e4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e894:	1dfb      	adds	r3, r7, #7
 800e896:	781a      	ldrb	r2, [r3, #0]
 800e898:	1dfb      	adds	r3, r7, #7
 800e89a:	3201      	adds	r2, #1
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	1dfb      	adds	r3, r7, #7
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b05      	cmp	r3, #5
 800e8a4:	d9e9      	bls.n	800e87a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e8a6:	4b04      	ldr	r3, [pc, #16]	@ (800e8b8 <HIDS_DeviceConnected+0x70>)
 800e8a8:	0018      	movs	r0, r3
 800e8aa:	f7ff ff71 	bl	800e790 <CheckCRC>
 800e8ae:	0003      	movs	r3, r0
}
 800e8b0:	0018      	movs	r0, r3
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	b002      	add	sp, #8
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	20002390 	.word	0x20002390
 800e8bc:	0802501c 	.word	0x0802501c
 800e8c0:	08024fa8 	.word	0x08024fa8

0800e8c4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e8c8:	4b04      	ldr	r3, [pc, #16]	@ (800e8dc <HIDS_MeasurementReady+0x18>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	0018      	movs	r0, r3
 800e8ce:	f7ff fd33 	bl	800e338 <TimestampIsReached>
 800e8d2:	0003      	movs	r3, r0
}
 800e8d4:	0018      	movs	r0, r3
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	46c0      	nop			@ (mov r8, r8)
 800e8dc:	200000d0 	.word	0x200000d0

0800e8e0 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800e8ea:	4b44      	ldr	r3, [pc, #272]	@ (800e9fc <HIDS_GetMeasurementValues+0x11c>)
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <HIDS_GetMeasurementValues+0x16>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e07d      	b.n	800e9f2 <HIDS_GetMeasurementValues+0x112>
  if(!HIDS_MeasurementReady()) return false;
 800e8f6:	f7ff ffe5 	bl	800e8c4 <HIDS_MeasurementReady>
 800e8fa:	0003      	movs	r3, r0
 800e8fc:	001a      	movs	r2, r3
 800e8fe:	2301      	movs	r3, #1
 800e900:	4053      	eors	r3, r2
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <HIDS_GetMeasurementValues+0x2c>
 800e908:	2300      	movs	r3, #0
 800e90a:	e072      	b.n	800e9f2 <HIDS_GetMeasurementValues+0x112>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e90c:	4b3c      	ldr	r3, [pc, #240]	@ (800ea00 <HIDS_GetMeasurementValues+0x120>)
 800e90e:	2206      	movs	r2, #6
 800e910:	0019      	movs	r1, r3
 800e912:	2044      	movs	r0, #68	@ 0x44
 800e914:	f7ff fe30 	bl	800e578 <ReadRegister>
 800e918:	0003      	movs	r3, r0
 800e91a:	001a      	movs	r2, r3
 800e91c:	2301      	movs	r3, #1
 800e91e:	4053      	eors	r3, r2
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b00      	cmp	r3, #0
 800e924:	d005      	beq.n	800e932 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800e926:	4a37      	ldr	r2, [pc, #220]	@ (800ea04 <HIDS_GetMeasurementValues+0x124>)
 800e928:	4b37      	ldr	r3, [pc, #220]	@ (800ea08 <HIDS_GetMeasurementValues+0x128>)
 800e92a:	0019      	movs	r1, r3
 800e92c:	2001      	movs	r0, #1
 800e92e:	f7ff fd59 	bl	800e3e4 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800e932:	4b33      	ldr	r3, [pc, #204]	@ (800ea00 <HIDS_GetMeasurementValues+0x120>)
 800e934:	0018      	movs	r0, r3
 800e936:	f7ff ff2b 	bl	800e790 <CheckCRC>
 800e93a:	0003      	movs	r3, r0
 800e93c:	001a      	movs	r2, r3
 800e93e:	2301      	movs	r3, #1
 800e940:	4053      	eors	r3, r2
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	d001      	beq.n	800e94c <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800e948:	2300      	movs	r3, #0
 800e94a:	e052      	b.n	800e9f2 <HIDS_GetMeasurementValues+0x112>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800e94c:	4b2c      	ldr	r3, [pc, #176]	@ (800ea00 <HIDS_GetMeasurementValues+0x120>)
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	021b      	lsls	r3, r3, #8
 800e952:	4a2b      	ldr	r2, [pc, #172]	@ (800ea00 <HIDS_GetMeasurementValues+0x120>)
 800e954:	7852      	ldrb	r2, [r2, #1]
 800e956:	4313      	orrs	r3, r2
 800e958:	22af      	movs	r2, #175	@ 0xaf
 800e95a:	4353      	muls	r3, r2
 800e95c:	0018      	movs	r0, r3
 800e95e:	f7f4 fd2f 	bl	80033c0 <__aeabi_i2d>
 800e962:	2200      	movs	r2, #0
 800e964:	4b29      	ldr	r3, [pc, #164]	@ (800ea0c <HIDS_GetMeasurementValues+0x12c>)
 800e966:	f7f3 fa25 	bl	8001db4 <__aeabi_ddiv>
 800e96a:	0002      	movs	r2, r0
 800e96c:	000b      	movs	r3, r1
 800e96e:	0010      	movs	r0, r2
 800e970:	0019      	movs	r1, r3
 800e972:	f7f4 fdbf 	bl	80034f4 <__aeabi_d2f>
 800e976:	1c03      	adds	r3, r0, #0
 800e978:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800e97a:	4925      	ldr	r1, [pc, #148]	@ (800ea10 <HIDS_GetMeasurementValues+0x130>)
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f7f2 fc4d 	bl	800121c <__aeabi_fsub>
 800e982:	1c03      	adds	r3, r0, #0
 800e984:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e986:	4b1e      	ldr	r3, [pc, #120]	@ (800ea00 <HIDS_GetMeasurementValues+0x120>)
 800e988:	78db      	ldrb	r3, [r3, #3]
 800e98a:	021b      	lsls	r3, r3, #8
 800e98c:	4a1c      	ldr	r2, [pc, #112]	@ (800ea00 <HIDS_GetMeasurementValues+0x120>)
 800e98e:	7912      	ldrb	r2, [r2, #4]
 800e990:	431a      	orrs	r2, r3
 800e992:	0013      	movs	r3, r2
 800e994:	015b      	lsls	r3, r3, #5
 800e996:	1a9b      	subs	r3, r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	189b      	adds	r3, r3, r2
 800e99c:	0018      	movs	r0, r3
 800e99e:	f7f4 fd0f 	bl	80033c0 <__aeabi_i2d>
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	4b19      	ldr	r3, [pc, #100]	@ (800ea0c <HIDS_GetMeasurementValues+0x12c>)
 800e9a6:	f7f3 fa05 	bl	8001db4 <__aeabi_ddiv>
 800e9aa:	0002      	movs	r2, r0
 800e9ac:	000b      	movs	r3, r1
 800e9ae:	0010      	movs	r0, r2
 800e9b0:	0019      	movs	r1, r3
 800e9b2:	f7f4 fd9f 	bl	80034f4 <__aeabi_d2f>
 800e9b6:	1c03      	adds	r3, r0, #0
 800e9b8:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800e9ba:	4916      	ldr	r1, [pc, #88]	@ (800ea14 <HIDS_GetMeasurementValues+0x134>)
 800e9bc:	68b8      	ldr	r0, [r7, #8]
 800e9be:	f7f2 fc2d 	bl	800121c <__aeabi_fsub>
 800e9c2:	1c03      	adds	r3, r0, #0
 800e9c4:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	0011      	movs	r1, r2
 800e9d8:	0018      	movs	r0, r3
 800e9da:	f7fd fa69 	bl	800beb0 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	1c11      	adds	r1, r2, #0
 800e9e4:	1c18      	adds	r0, r3, #0
 800e9e6:	f7f4 ff85 	bl	80038f4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800e9ea:	4b04      	ldr	r3, [pc, #16]	@ (800e9fc <HIDS_GetMeasurementValues+0x11c>)
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800e9f0:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	b004      	add	sp, #16
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	46c0      	nop			@ (mov r8, r8)
 800e9fc:	2000239e 	.word	0x2000239e
 800ea00:	20002398 	.word	0x20002398
 800ea04:	0802503c 	.word	0x0802503c
 800ea08:	08024fd4 	.word	0x08024fd4
 800ea0c:	40efffe0 	.word	0x40efffe0
 800ea10:	42340000 	.word	0x42340000
 800ea14:	40c00000 	.word	0x40c00000

0800ea18 <ResetHIDSresults>:
void ResetHIDSresults() {
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ea1c:	4b04      	ldr	r3, [pc, #16]	@ (800ea30 <ResetHIDSresults+0x18>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ea22:	4b04      	ldr	r3, [pc, #16]	@ (800ea34 <ResetHIDSresults+0x1c>)
 800ea24:	2200      	movs	r2, #0
 800ea26:	601a      	str	r2, [r3, #0]
}
 800ea28:	46c0      	nop			@ (mov r8, r8)
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	46c0      	nop			@ (mov r8, r8)
 800ea30:	20002380 	.word	0x20002380
 800ea34:	20002384 	.word	0x20002384

0800ea38 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800ea38:	b5b0      	push	{r4, r5, r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800ea3e:	4b3b      	ldr	r3, [pc, #236]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b06      	cmp	r3, #6
 800ea44:	d865      	bhi.n	800eb12 <HIDS_Upkeep+0xda>
 800ea46:	009a      	lsls	r2, r3, #2
 800ea48:	4b39      	ldr	r3, [pc, #228]	@ (800eb30 <HIDS_Upkeep+0xf8>)
 800ea4a:	18d3      	adds	r3, r2, r3
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800ea50:	4a38      	ldr	r2, [pc, #224]	@ (800eb34 <HIDS_Upkeep+0xfc>)
 800ea52:	4b39      	ldr	r3, [pc, #228]	@ (800eb38 <HIDS_Upkeep+0x100>)
 800ea54:	0019      	movs	r1, r3
 800ea56:	2003      	movs	r0, #3
 800ea58:	f7ff fcc4 	bl	800e3e4 <CreateLine>
      break;
 800ea5c:	e060      	b.n	800eb20 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800ea5e:	f7ff ffdb 	bl	800ea18 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ea62:	4b32      	ldr	r3, [pc, #200]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800ea64:	2201      	movs	r2, #1
 800ea66:	701a      	strb	r2, [r3, #0]
      break;
 800ea68:	e05a      	b.n	800eb20 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800ea6a:	f7fe fc45 	bl	800d2f8 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800ea6e:	f7ff fe3f 	bl	800e6f0 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800ea72:	4b2e      	ldr	r3, [pc, #184]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800ea74:	2202      	movs	r2, #2
 800ea76:	701a      	strb	r2, [r3, #0]
      break;
 800ea78:	e052      	b.n	800eb20 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800ea7a:	4a30      	ldr	r2, [pc, #192]	@ (800eb3c <HIDS_Upkeep+0x104>)
 800ea7c:	4b30      	ldr	r3, [pc, #192]	@ (800eb40 <HIDS_Upkeep+0x108>)
 800ea7e:	0011      	movs	r1, r2
 800ea80:	0018      	movs	r0, r3
 800ea82:	f7ff ff2d 	bl	800e8e0 <HIDS_GetMeasurementValues>
 800ea86:	1e03      	subs	r3, r0, #0
 800ea88:	d047      	beq.n	800eb1a <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800ea8a:	4b28      	ldr	r3, [pc, #160]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800ea8c:	2203      	movs	r2, #3
 800ea8e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ea90:	e043      	b.n	800eb1a <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800ea92:	4b2b      	ldr	r3, [pc, #172]	@ (800eb40 <HIDS_Upkeep+0x108>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	1c18      	adds	r0, r3, #0
 800ea98:	f7f4 fce4 	bl	8003464 <__aeabi_f2d>
 800ea9c:	0004      	movs	r4, r0
 800ea9e:	000d      	movs	r5, r1
 800eaa0:	4b26      	ldr	r3, [pc, #152]	@ (800eb3c <HIDS_Upkeep+0x104>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	1c18      	adds	r0, r3, #0
 800eaa6:	f7f4 fcdd 	bl	8003464 <__aeabi_f2d>
 800eaaa:	0002      	movs	r2, r0
 800eaac:	000b      	movs	r3, r1
 800eaae:	4825      	ldr	r0, [pc, #148]	@ (800eb44 <HIDS_Upkeep+0x10c>)
 800eab0:	4921      	ldr	r1, [pc, #132]	@ (800eb38 <HIDS_Upkeep+0x100>)
 800eab2:	9202      	str	r2, [sp, #8]
 800eab4:	9303      	str	r3, [sp, #12]
 800eab6:	9400      	str	r4, [sp, #0]
 800eab8:	9501      	str	r5, [sp, #4]
 800eaba:	0002      	movs	r2, r0
 800eabc:	2003      	movs	r0, #3
 800eabe:	f7ff fc91 	bl	800e3e4 <CreateLine>
      setHIDS(temp, humid);
 800eac2:	4b1e      	ldr	r3, [pc, #120]	@ (800eb3c <HIDS_Upkeep+0x104>)
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	4b1e      	ldr	r3, [pc, #120]	@ (800eb40 <HIDS_Upkeep+0x108>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	1c19      	adds	r1, r3, #0
 800eacc:	1c10      	adds	r0, r2, #0
 800eace:	f7f4 ff25 	bl	800391c <setHIDS>
      ResetMeasurementIndicator();
 800ead2:	f7fe fc29 	bl	800d328 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800ead6:	f000 f8cb 	bl	800ec70 <HAL_GetTick>
 800eada:	0004      	movs	r4, r0
 800eadc:	f7fe fd38 	bl	800d550 <powerCheck>
 800eae0:	0003      	movs	r3, r0
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d101      	bne.n	800eaea <HIDS_Upkeep+0xb2>
 800eae6:	4b18      	ldr	r3, [pc, #96]	@ (800eb48 <HIDS_Upkeep+0x110>)
 800eae8:	e001      	b.n	800eaee <HIDS_Upkeep+0xb6>
 800eaea:	23fa      	movs	r3, #250	@ 0xfa
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	191a      	adds	r2, r3, r4
 800eaf0:	4b16      	ldr	r3, [pc, #88]	@ (800eb4c <HIDS_Upkeep+0x114>)
 800eaf2:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800eaf4:	4b0d      	ldr	r3, [pc, #52]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800eaf6:	2206      	movs	r2, #6
 800eaf8:	701a      	strb	r2, [r3, #0]
      break;
 800eafa:	e011      	b.n	800eb20 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800eafc:	4b13      	ldr	r3, [pc, #76]	@ (800eb4c <HIDS_Upkeep+0x114>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	0018      	movs	r0, r3
 800eb02:	f7ff fc19 	bl	800e338 <TimestampIsReached>
 800eb06:	1e03      	subs	r3, r0, #0
 800eb08:	d009      	beq.n	800eb1e <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800eb0a:	4b08      	ldr	r3, [pc, #32]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb10:	e005      	b.n	800eb1e <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800eb12:	4b06      	ldr	r3, [pc, #24]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	701a      	strb	r2, [r3, #0]
      break;
 800eb18:	e002      	b.n	800eb20 <HIDS_Upkeep+0xe8>
      break;
 800eb1a:	46c0      	nop			@ (mov r8, r8)
 800eb1c:	e000      	b.n	800eb20 <HIDS_Upkeep+0xe8>
      break;
 800eb1e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800eb20:	4b02      	ldr	r3, [pc, #8]	@ (800eb2c <HIDS_Upkeep+0xf4>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
}
 800eb24:	0018      	movs	r0, r3
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bdb0      	pop	{r4, r5, r7, pc}
 800eb2a:	46c0      	nop			@ (mov r8, r8)
 800eb2c:	200023a4 	.word	0x200023a4
 800eb30:	08025580 	.word	0x08025580
 800eb34:	08025070 	.word	0x08025070
 800eb38:	080250a4 	.word	0x080250a4
 800eb3c:	20002384 	.word	0x20002384
 800eb40:	20002380 	.word	0x20002380
 800eb44:	080250a8 	.word	0x080250a8
 800eb48:	00002710 	.word	0x00002710
 800eb4c:	200023a0 	.word	0x200023a0

0800eb50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800eb50:	480d      	ldr	r0, [pc, #52]	@ (800eb88 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800eb52:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800eb54:	f7ff f846 	bl	800dbe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800eb58:	480c      	ldr	r0, [pc, #48]	@ (800eb8c <LoopForever+0x6>)
  ldr r1, =_edata
 800eb5a:	490d      	ldr	r1, [pc, #52]	@ (800eb90 <LoopForever+0xa>)
  ldr r2, =_sidata
 800eb5c:	4a0d      	ldr	r2, [pc, #52]	@ (800eb94 <LoopForever+0xe>)
  movs r3, #0
 800eb5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800eb60:	e002      	b.n	800eb68 <LoopCopyDataInit>

0800eb62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800eb62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800eb64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800eb66:	3304      	adds	r3, #4

0800eb68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eb68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eb6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eb6c:	d3f9      	bcc.n	800eb62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eb6e:	4a0a      	ldr	r2, [pc, #40]	@ (800eb98 <LoopForever+0x12>)
  ldr r4, =_ebss
 800eb70:	4c0a      	ldr	r4, [pc, #40]	@ (800eb9c <LoopForever+0x16>)
  movs r3, #0
 800eb72:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eb74:	e001      	b.n	800eb7a <LoopFillZerobss>

0800eb76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eb76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eb78:	3204      	adds	r2, #4

0800eb7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eb7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800eb7c:	d3fb      	bcc.n	800eb76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800eb7e:	f011 fb79 	bl	8020274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800eb82:	f7f9 f85d 	bl	8007c40 <main>

0800eb86 <LoopForever>:

LoopForever:
    b LoopForever
 800eb86:	e7fe      	b.n	800eb86 <LoopForever>
   ldr   r0, =_estack
 800eb88:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800eb8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800eb90:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800eb94:	08025f20 	.word	0x08025f20
  ldr r2, =_sbss
 800eb98:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800eb9c:	200037ac 	.word	0x200037ac

0800eba0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800eba0:	e7fe      	b.n	800eba0 <ADC1_COMP_IRQHandler>
	...

0800eba4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ebaa:	1dfb      	adds	r3, r7, #7
 800ebac:	2200      	movs	r2, #0
 800ebae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ebb0:	4b0b      	ldr	r3, [pc, #44]	@ (800ebe0 <HAL_Init+0x3c>)
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe0 <HAL_Init+0x3c>)
 800ebb6:	2140      	movs	r1, #64	@ 0x40
 800ebb8:	430a      	orrs	r2, r1
 800ebba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ebbc:	2003      	movs	r0, #3
 800ebbe:	f000 f811 	bl	800ebe4 <HAL_InitTick>
 800ebc2:	1e03      	subs	r3, r0, #0
 800ebc4:	d003      	beq.n	800ebce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800ebc6:	1dfb      	adds	r3, r7, #7
 800ebc8:	2201      	movs	r2, #1
 800ebca:	701a      	strb	r2, [r3, #0]
 800ebcc:	e001      	b.n	800ebd2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ebce:	f7fe febd 	bl	800d94c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ebd2:	1dfb      	adds	r3, r7, #7
 800ebd4:	781b      	ldrb	r3, [r3, #0]
}
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	b002      	add	sp, #8
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	46c0      	nop			@ (mov r8, r8)
 800ebe0:	40022000 	.word	0x40022000

0800ebe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ebe4:	b590      	push	{r4, r7, lr}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ebec:	4b14      	ldr	r3, [pc, #80]	@ (800ec40 <HAL_InitTick+0x5c>)
 800ebee:	681c      	ldr	r4, [r3, #0]
 800ebf0:	4b14      	ldr	r3, [pc, #80]	@ (800ec44 <HAL_InitTick+0x60>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	0019      	movs	r1, r3
 800ebf6:	23fa      	movs	r3, #250	@ 0xfa
 800ebf8:	0098      	lsls	r0, r3, #2
 800ebfa:	f7f1 fad3 	bl	80001a4 <__udivsi3>
 800ebfe:	0003      	movs	r3, r0
 800ec00:	0019      	movs	r1, r3
 800ec02:	0020      	movs	r0, r4
 800ec04:	f7f1 face 	bl	80001a4 <__udivsi3>
 800ec08:	0003      	movs	r3, r0
 800ec0a:	0018      	movs	r0, r3
 800ec0c:	f000 fcfd 	bl	800f60a <HAL_SYSTICK_Config>
 800ec10:	1e03      	subs	r3, r0, #0
 800ec12:	d001      	beq.n	800ec18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	e00f      	b.n	800ec38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b03      	cmp	r3, #3
 800ec1c:	d80b      	bhi.n	800ec36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	2301      	movs	r3, #1
 800ec22:	425b      	negs	r3, r3
 800ec24:	2200      	movs	r2, #0
 800ec26:	0018      	movs	r0, r3
 800ec28:	f000 fcc6 	bl	800f5b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ec2c:	4b06      	ldr	r3, [pc, #24]	@ (800ec48 <HAL_InitTick+0x64>)
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ec32:	2300      	movs	r3, #0
 800ec34:	e000      	b.n	800ec38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
}
 800ec38:	0018      	movs	r0, r3
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	b003      	add	sp, #12
 800ec3e:	bd90      	pop	{r4, r7, pc}
 800ec40:	200000c8 	.word	0x200000c8
 800ec44:	200000dc 	.word	0x200000dc
 800ec48:	200000d8 	.word	0x200000d8

0800ec4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ec50:	4b05      	ldr	r3, [pc, #20]	@ (800ec68 <HAL_IncTick+0x1c>)
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	001a      	movs	r2, r3
 800ec56:	4b05      	ldr	r3, [pc, #20]	@ (800ec6c <HAL_IncTick+0x20>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	18d2      	adds	r2, r2, r3
 800ec5c:	4b03      	ldr	r3, [pc, #12]	@ (800ec6c <HAL_IncTick+0x20>)
 800ec5e:	601a      	str	r2, [r3, #0]
}
 800ec60:	46c0      	nop			@ (mov r8, r8)
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	46c0      	nop			@ (mov r8, r8)
 800ec68:	200000dc 	.word	0x200000dc
 800ec6c:	200023a8 	.word	0x200023a8

0800ec70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	af00      	add	r7, sp, #0
  return uwTick;
 800ec74:	4b02      	ldr	r3, [pc, #8]	@ (800ec80 <HAL_GetTick+0x10>)
 800ec76:	681b      	ldr	r3, [r3, #0]
}
 800ec78:	0018      	movs	r0, r3
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	46c0      	nop			@ (mov r8, r8)
 800ec80:	200023a8 	.word	0x200023a8

0800ec84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ec8c:	f7ff fff0 	bl	800ec70 <HAL_GetTick>
 800ec90:	0003      	movs	r3, r0
 800ec92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	d005      	beq.n	800ecaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ec9e:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc8 <HAL_Delay+0x44>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	001a      	movs	r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	189b      	adds	r3, r3, r2
 800eca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ecaa:	46c0      	nop			@ (mov r8, r8)
 800ecac:	f7ff ffe0 	bl	800ec70 <HAL_GetTick>
 800ecb0:	0002      	movs	r2, r0
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d8f7      	bhi.n	800ecac <HAL_Delay+0x28>
  {
  }
}
 800ecbc:	46c0      	nop			@ (mov r8, r8)
 800ecbe:	46c0      	nop			@ (mov r8, r8)
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	b004      	add	sp, #16
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	46c0      	nop			@ (mov r8, r8)
 800ecc8:	200000dc 	.word	0x200000dc

0800eccc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ecd0:	4b04      	ldr	r3, [pc, #16]	@ (800ece4 <HAL_SuspendTick+0x18>)
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	4b03      	ldr	r3, [pc, #12]	@ (800ece4 <HAL_SuspendTick+0x18>)
 800ecd6:	2102      	movs	r1, #2
 800ecd8:	438a      	bics	r2, r1
 800ecda:	601a      	str	r2, [r3, #0]
}
 800ecdc:	46c0      	nop			@ (mov r8, r8)
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	46c0      	nop			@ (mov r8, r8)
 800ece4:	e000e010 	.word	0xe000e010

0800ece8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ecec:	4b04      	ldr	r3, [pc, #16]	@ (800ed00 <HAL_ResumeTick+0x18>)
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	4b03      	ldr	r3, [pc, #12]	@ (800ed00 <HAL_ResumeTick+0x18>)
 800ecf2:	2102      	movs	r1, #2
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	601a      	str	r2, [r3, #0]
}
 800ecf8:	46c0      	nop			@ (mov r8, r8)
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	46c0      	nop			@ (mov r8, r8)
 800ed00:	e000e010 	.word	0xe000e010

0800ed04 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ed08:	4b02      	ldr	r3, [pc, #8]	@ (800ed14 <HAL_GetUIDw0+0x10>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
}
 800ed0c:	0018      	movs	r0, r3
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	46c0      	nop			@ (mov r8, r8)
 800ed14:	1ff80050 	.word	0x1ff80050

0800ed18 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ed1c:	4b02      	ldr	r3, [pc, #8]	@ (800ed28 <HAL_GetUIDw1+0x10>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
}
 800ed20:	0018      	movs	r0, r3
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	46c0      	nop			@ (mov r8, r8)
 800ed28:	1ff80054 	.word	0x1ff80054

0800ed2c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800ed30:	4b02      	ldr	r3, [pc, #8]	@ (800ed3c <HAL_GetUIDw2+0x10>)
 800ed32:	681b      	ldr	r3, [r3, #0]
}
 800ed34:	0018      	movs	r0, r3
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	46c0      	nop			@ (mov r8, r8)
 800ed3c:	1ff80064 	.word	0x1ff80064

0800ed40 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e159      	b.n	800f006 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d10a      	bne.n	800ed70 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2250      	movs	r2, #80	@ 0x50
 800ed64:	2100      	movs	r1, #0
 800ed66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	0018      	movs	r0, r3
 800ed6c:	f7f8 fa0e 	bl	800718c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed74:	2210      	movs	r2, #16
 800ed76:	4013      	ands	r3, r2
 800ed78:	2b10      	cmp	r3, #16
 800ed7a:	d005      	beq.n	800ed88 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	2204      	movs	r2, #4
 800ed84:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ed86:	d00b      	beq.n	800eda0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed8c:	2210      	movs	r2, #16
 800ed8e:	431a      	orrs	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2250      	movs	r2, #80	@ 0x50
 800ed98:	2100      	movs	r1, #0
 800ed9a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	e132      	b.n	800f006 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eda4:	4a9a      	ldr	r2, [pc, #616]	@ (800f010 <HAL_ADC_Init+0x2d0>)
 800eda6:	4013      	ands	r3, r2
 800eda8:	2202      	movs	r2, #2
 800edaa:	431a      	orrs	r2, r3
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	2203      	movs	r2, #3
 800edb8:	4013      	ands	r3, r2
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d108      	bne.n	800edd0 <HAL_ADC_Init+0x90>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2201      	movs	r2, #1
 800edc6:	4013      	ands	r3, r2
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d101      	bne.n	800edd0 <HAL_ADC_Init+0x90>
 800edcc:	2301      	movs	r3, #1
 800edce:	e000      	b.n	800edd2 <HAL_ADC_Init+0x92>
 800edd0:	2300      	movs	r3, #0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d149      	bne.n	800ee6a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	23c0      	movs	r3, #192	@ 0xc0
 800eddc:	061b      	lsls	r3, r3, #24
 800edde:	429a      	cmp	r2, r3
 800ede0:	d00b      	beq.n	800edfa <HAL_ADC_Init+0xba>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	2380      	movs	r3, #128	@ 0x80
 800ede8:	05db      	lsls	r3, r3, #23
 800edea:	429a      	cmp	r2, r3
 800edec:	d005      	beq.n	800edfa <HAL_ADC_Init+0xba>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	2380      	movs	r3, #128	@ 0x80
 800edf4:	061b      	lsls	r3, r3, #24
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d111      	bne.n	800ee1e <HAL_ADC_Init+0xde>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	691a      	ldr	r2, [r3, #16]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	0092      	lsls	r2, r2, #2
 800ee06:	0892      	lsrs	r2, r2, #2
 800ee08:	611a      	str	r2, [r3, #16]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	6919      	ldr	r1, [r3, #16]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	685a      	ldr	r2, [r3, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	430a      	orrs	r2, r1
 800ee1a:	611a      	str	r2, [r3, #16]
 800ee1c:	e014      	b.n	800ee48 <HAL_ADC_Init+0x108>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	691a      	ldr	r2, [r3, #16]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	0092      	lsls	r2, r2, #2
 800ee2a:	0892      	lsrs	r2, r2, #2
 800ee2c:	611a      	str	r2, [r3, #16]
 800ee2e:	4b79      	ldr	r3, [pc, #484]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	4b78      	ldr	r3, [pc, #480]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee34:	4978      	ldr	r1, [pc, #480]	@ (800f018 <HAL_ADC_Init+0x2d8>)
 800ee36:	400a      	ands	r2, r1
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	4b76      	ldr	r3, [pc, #472]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee3c:	6819      	ldr	r1, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685a      	ldr	r2, [r3, #4]
 800ee42:	4b74      	ldr	r3, [pc, #464]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee44:	430a      	orrs	r2, r1
 800ee46:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68da      	ldr	r2, [r3, #12]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2118      	movs	r1, #24
 800ee54:	438a      	bics	r2, r1
 800ee56:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	68d9      	ldr	r1, [r3, #12]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	689a      	ldr	r2, [r3, #8]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	430a      	orrs	r2, r1
 800ee68:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800ee6a:	4b6a      	ldr	r3, [pc, #424]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	4b69      	ldr	r3, [pc, #420]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee70:	496a      	ldr	r1, [pc, #424]	@ (800f01c <HAL_ADC_Init+0x2dc>)
 800ee72:	400a      	ands	r2, r1
 800ee74:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800ee76:	4b67      	ldr	r3, [pc, #412]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee78:	6819      	ldr	r1, [r3, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee7e:	065a      	lsls	r2, r3, #25
 800ee80:	4b64      	ldr	r3, [pc, #400]	@ (800f014 <HAL_ADC_Init+0x2d4>)
 800ee82:	430a      	orrs	r2, r1
 800ee84:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	689a      	ldr	r2, [r3, #8]
 800ee8c:	2380      	movs	r3, #128	@ 0x80
 800ee8e:	055b      	lsls	r3, r3, #21
 800ee90:	4013      	ands	r3, r2
 800ee92:	d108      	bne.n	800eea6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	689a      	ldr	r2, [r3, #8]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2180      	movs	r1, #128	@ 0x80
 800eea0:	0549      	lsls	r1, r1, #21
 800eea2:	430a      	orrs	r2, r1
 800eea4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	68da      	ldr	r2, [r3, #12]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	495b      	ldr	r1, [pc, #364]	@ (800f020 <HAL_ADC_Init+0x2e0>)
 800eeb2:	400a      	ands	r2, r1
 800eeb4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	68d9      	ldr	r1, [r3, #12]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d101      	bne.n	800eecc <HAL_ADC_Init+0x18c>
 800eec8:	2304      	movs	r3, #4
 800eeca:	e000      	b.n	800eece <HAL_ADC_Init+0x18e>
 800eecc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800eece:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2020      	movs	r0, #32
 800eed4:	5c1b      	ldrb	r3, [r3, r0]
 800eed6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800eed8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	202c      	movs	r0, #44	@ 0x2c
 800eede:	5c1b      	ldrb	r3, [r3, r0]
 800eee0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800eee2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800eee8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800eef0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800eef8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	430a      	orrs	r2, r1
 800ef00:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef06:	23c2      	movs	r3, #194	@ 0xc2
 800ef08:	33ff      	adds	r3, #255	@ 0xff
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d00b      	beq.n	800ef26 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68d9      	ldr	r1, [r3, #12]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ef1c:	431a      	orrs	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	430a      	orrs	r2, r1
 800ef24:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2221      	movs	r2, #33	@ 0x21
 800ef2a:	5c9b      	ldrb	r3, [r3, r2]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d11a      	bne.n	800ef66 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2220      	movs	r2, #32
 800ef34:	5c9b      	ldrb	r3, [r3, r2]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d109      	bne.n	800ef4e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	68da      	ldr	r2, [r3, #12]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	2180      	movs	r1, #128	@ 0x80
 800ef46:	0249      	lsls	r1, r1, #9
 800ef48:	430a      	orrs	r2, r1
 800ef4a:	60da      	str	r2, [r3, #12]
 800ef4c:	e00b      	b.n	800ef66 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef52:	2220      	movs	r2, #32
 800ef54:	431a      	orrs	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef5e:	2201      	movs	r2, #1
 800ef60:	431a      	orrs	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d11f      	bne.n	800efae <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	691a      	ldr	r2, [r3, #16]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	492a      	ldr	r1, [pc, #168]	@ (800f024 <HAL_ADC_Init+0x2e4>)
 800ef7a:	400a      	ands	r2, r1
 800ef7c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6919      	ldr	r1, [r3, #16]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800ef8c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800ef92:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	430a      	orrs	r2, r1
 800ef9a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	691a      	ldr	r2, [r3, #16]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2101      	movs	r1, #1
 800efa8:	430a      	orrs	r2, r1
 800efaa:	611a      	str	r2, [r3, #16]
 800efac:	e00e      	b.n	800efcc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	2201      	movs	r2, #1
 800efb6:	4013      	ands	r3, r2
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d107      	bne.n	800efcc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	691a      	ldr	r2, [r3, #16]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2101      	movs	r1, #1
 800efc8:	438a      	bics	r2, r1
 800efca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	695a      	ldr	r2, [r3, #20]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2107      	movs	r1, #7
 800efd8:	438a      	bics	r2, r1
 800efda:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6959      	ldr	r1, [r3, #20]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	430a      	orrs	r2, r1
 800efec:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eff8:	2203      	movs	r2, #3
 800effa:	4393      	bics	r3, r2
 800effc:	2201      	movs	r2, #1
 800effe:	431a      	orrs	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f004:	2300      	movs	r3, #0
}
 800f006:	0018      	movs	r0, r3
 800f008:	46bd      	mov	sp, r7
 800f00a:	b002      	add	sp, #8
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	46c0      	nop			@ (mov r8, r8)
 800f010:	fffffefd 	.word	0xfffffefd
 800f014:	40012708 	.word	0x40012708
 800f018:	ffc3ffff 	.word	0xffc3ffff
 800f01c:	fdffffff 	.word	0xfdffffff
 800f020:	fffe0219 	.word	0xfffe0219
 800f024:	fffffc03 	.word	0xfffffc03

0800f028 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f028:	b590      	push	{r4, r7, lr}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f030:	230f      	movs	r3, #15
 800f032:	18fb      	adds	r3, r7, r3
 800f034:	2200      	movs	r2, #0
 800f036:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	2204      	movs	r2, #4
 800f040:	4013      	ands	r3, r2
 800f042:	d138      	bne.n	800f0b6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2250      	movs	r2, #80	@ 0x50
 800f048:	5c9b      	ldrb	r3, [r3, r2]
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d101      	bne.n	800f052 <HAL_ADC_Start+0x2a>
 800f04e:	2302      	movs	r3, #2
 800f050:	e038      	b.n	800f0c4 <HAL_ADC_Start+0x9c>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2250      	movs	r2, #80	@ 0x50
 800f056:	2101      	movs	r1, #1
 800f058:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	69db      	ldr	r3, [r3, #28]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d007      	beq.n	800f072 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f062:	230f      	movs	r3, #15
 800f064:	18fc      	adds	r4, r7, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	0018      	movs	r0, r3
 800f06a:	f000 f95f 	bl	800f32c <ADC_Enable>
 800f06e:	0003      	movs	r3, r0
 800f070:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f072:	230f      	movs	r3, #15
 800f074:	18fb      	adds	r3, r7, r3
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d120      	bne.n	800f0be <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f080:	4a12      	ldr	r2, [pc, #72]	@ (800f0cc <HAL_ADC_Start+0xa4>)
 800f082:	4013      	ands	r3, r2
 800f084:	2280      	movs	r2, #128	@ 0x80
 800f086:	0052      	lsls	r2, r2, #1
 800f088:	431a      	orrs	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2250      	movs	r2, #80	@ 0x50
 800f098:	2100      	movs	r1, #0
 800f09a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	221c      	movs	r2, #28
 800f0a2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	689a      	ldr	r2, [r3, #8]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2104      	movs	r1, #4
 800f0b0:	430a      	orrs	r2, r1
 800f0b2:	609a      	str	r2, [r3, #8]
 800f0b4:	e003      	b.n	800f0be <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f0b6:	230f      	movs	r3, #15
 800f0b8:	18fb      	adds	r3, r7, r3
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f0be:	230f      	movs	r3, #15
 800f0c0:	18fb      	adds	r3, r7, r3
 800f0c2:	781b      	ldrb	r3, [r3, #0]
}
 800f0c4:	0018      	movs	r0, r3
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	b005      	add	sp, #20
 800f0ca:	bd90      	pop	{r4, r7, pc}
 800f0cc:	fffff0fe 	.word	0xfffff0fe

0800f0d0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	695b      	ldr	r3, [r3, #20]
 800f0e6:	2b08      	cmp	r3, #8
 800f0e8:	d102      	bne.n	800f0f0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f0ea:	2308      	movs	r3, #8
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	e014      	b.n	800f11a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d10b      	bne.n	800f116 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f102:	2220      	movs	r2, #32
 800f104:	431a      	orrs	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2250      	movs	r2, #80	@ 0x50
 800f10e:	2100      	movs	r1, #0
 800f110:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f112:	2301      	movs	r3, #1
 800f114:	e072      	b.n	800f1fc <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f116:	230c      	movs	r3, #12
 800f118:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f11a:	f7ff fda9 	bl	800ec70 <HAL_GetTick>
 800f11e:	0003      	movs	r3, r0
 800f120:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f122:	e01f      	b.n	800f164 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	3301      	adds	r3, #1
 800f128:	d01c      	beq.n	800f164 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d007      	beq.n	800f140 <HAL_ADC_PollForConversion+0x70>
 800f130:	f7ff fd9e 	bl	800ec70 <HAL_GetTick>
 800f134:	0002      	movs	r2, r0
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d211      	bcs.n	800f164 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	4013      	ands	r3, r2
 800f14a:	d10b      	bne.n	800f164 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f150:	2204      	movs	r2, #4
 800f152:	431a      	orrs	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2250      	movs	r2, #80	@ 0x50
 800f15c:	2100      	movs	r1, #0
 800f15e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f160:	2303      	movs	r3, #3
 800f162:	e04b      	b.n	800f1fc <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	4013      	ands	r3, r2
 800f16e:	d0d9      	beq.n	800f124 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f174:	2280      	movs	r2, #128	@ 0x80
 800f176:	0092      	lsls	r2, r2, #2
 800f178:	431a      	orrs	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	68da      	ldr	r2, [r3, #12]
 800f184:	23c0      	movs	r3, #192	@ 0xc0
 800f186:	011b      	lsls	r3, r3, #4
 800f188:	4013      	ands	r3, r2
 800f18a:	d12e      	bne.n	800f1ea <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2220      	movs	r2, #32
 800f190:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f192:	2b00      	cmp	r3, #0
 800f194:	d129      	bne.n	800f1ea <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2208      	movs	r2, #8
 800f19e:	4013      	ands	r3, r2
 800f1a0:	2b08      	cmp	r3, #8
 800f1a2:	d122      	bne.n	800f1ea <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	2204      	movs	r2, #4
 800f1ac:	4013      	ands	r3, r2
 800f1ae:	d110      	bne.n	800f1d2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	685a      	ldr	r2, [r3, #4]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	210c      	movs	r1, #12
 800f1bc:	438a      	bics	r2, r1
 800f1be:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f204 <HAL_ADC_PollForConversion+0x134>)
 800f1c6:	4013      	ands	r3, r2
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	655a      	str	r2, [r3, #84]	@ 0x54
 800f1d0:	e00b      	b.n	800f1ea <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1d6:	2220      	movs	r2, #32
 800f1d8:	431a      	orrs	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	431a      	orrs	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	699b      	ldr	r3, [r3, #24]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d103      	bne.n	800f1fa <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	220c      	movs	r2, #12
 800f1f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	46bd      	mov	sp, r7
 800f200:	b004      	add	sp, #16
 800f202:	bd80      	pop	{r7, pc}
 800f204:	fffffefe 	.word	0xfffffefe

0800f208 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f216:	0018      	movs	r0, r3
 800f218:	46bd      	mov	sp, r7
 800f21a:	b002      	add	sp, #8
 800f21c:	bd80      	pop	{r7, pc}
	...

0800f220 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2250      	movs	r2, #80	@ 0x50
 800f22e:	5c9b      	ldrb	r3, [r3, r2]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d101      	bne.n	800f238 <HAL_ADC_ConfigChannel+0x18>
 800f234:	2302      	movs	r3, #2
 800f236:	e06c      	b.n	800f312 <HAL_ADC_ConfigChannel+0xf2>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2250      	movs	r2, #80	@ 0x50
 800f23c:	2101      	movs	r1, #1
 800f23e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	2204      	movs	r2, #4
 800f248:	4013      	ands	r3, r2
 800f24a:	d00b      	beq.n	800f264 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f250:	2220      	movs	r2, #32
 800f252:	431a      	orrs	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2250      	movs	r2, #80	@ 0x50
 800f25c:	2100      	movs	r1, #0
 800f25e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f260:	2301      	movs	r3, #1
 800f262:	e056      	b.n	800f312 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	4a2c      	ldr	r2, [pc, #176]	@ (800f31c <HAL_ADC_ConfigChannel+0xfc>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d028      	beq.n	800f2c0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	035b      	lsls	r3, r3, #13
 800f27a:	0b5a      	lsrs	r2, r3, #13
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	430a      	orrs	r2, r1
 800f282:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	2380      	movs	r3, #128	@ 0x80
 800f28a:	02db      	lsls	r3, r3, #11
 800f28c:	4013      	ands	r3, r2
 800f28e:	d009      	beq.n	800f2a4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f290:	4b23      	ldr	r3, [pc, #140]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	4b22      	ldr	r3, [pc, #136]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f296:	2180      	movs	r1, #128	@ 0x80
 800f298:	0409      	lsls	r1, r1, #16
 800f29a:	430a      	orrs	r2, r1
 800f29c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f29e:	200a      	movs	r0, #10
 800f2a0:	f000 f8ac 	bl	800f3fc <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	2380      	movs	r3, #128	@ 0x80
 800f2aa:	029b      	lsls	r3, r3, #10
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	d02b      	beq.n	800f308 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f2b0:	4b1b      	ldr	r3, [pc, #108]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	4b1a      	ldr	r3, [pc, #104]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f2b6:	2180      	movs	r1, #128	@ 0x80
 800f2b8:	03c9      	lsls	r1, r1, #15
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	e023      	b.n	800f308 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	035b      	lsls	r3, r3, #13
 800f2cc:	0b5b      	lsrs	r3, r3, #13
 800f2ce:	43d9      	mvns	r1, r3
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	400a      	ands	r2, r1
 800f2d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	2380      	movs	r3, #128	@ 0x80
 800f2de:	02db      	lsls	r3, r3, #11
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	d005      	beq.n	800f2f0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f2e4:	4b0e      	ldr	r3, [pc, #56]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f2ea:	490e      	ldr	r1, [pc, #56]	@ (800f324 <HAL_ADC_ConfigChannel+0x104>)
 800f2ec:	400a      	ands	r2, r1
 800f2ee:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	2380      	movs	r3, #128	@ 0x80
 800f2f6:	029b      	lsls	r3, r3, #10
 800f2f8:	4013      	ands	r3, r2
 800f2fa:	d005      	beq.n	800f308 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f2fc:	4b08      	ldr	r3, [pc, #32]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	4b07      	ldr	r3, [pc, #28]	@ (800f320 <HAL_ADC_ConfigChannel+0x100>)
 800f302:	4909      	ldr	r1, [pc, #36]	@ (800f328 <HAL_ADC_ConfigChannel+0x108>)
 800f304:	400a      	ands	r2, r1
 800f306:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2250      	movs	r2, #80	@ 0x50
 800f30c:	2100      	movs	r1, #0
 800f30e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f310:	2300      	movs	r3, #0
}
 800f312:	0018      	movs	r0, r3
 800f314:	46bd      	mov	sp, r7
 800f316:	b002      	add	sp, #8
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	46c0      	nop			@ (mov r8, r8)
 800f31c:	00001001 	.word	0x00001001
 800f320:	40012708 	.word	0x40012708
 800f324:	ff7fffff 	.word	0xff7fffff
 800f328:	ffbfffff 	.word	0xffbfffff

0800f32c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f334:	2300      	movs	r3, #0
 800f336:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	2203      	movs	r2, #3
 800f340:	4013      	ands	r3, r2
 800f342:	2b01      	cmp	r3, #1
 800f344:	d108      	bne.n	800f358 <ADC_Enable+0x2c>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2201      	movs	r2, #1
 800f34e:	4013      	ands	r3, r2
 800f350:	2b01      	cmp	r3, #1
 800f352:	d101      	bne.n	800f358 <ADC_Enable+0x2c>
 800f354:	2301      	movs	r3, #1
 800f356:	e000      	b.n	800f35a <ADC_Enable+0x2e>
 800f358:	2300      	movs	r3, #0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d146      	bne.n	800f3ec <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	4a24      	ldr	r2, [pc, #144]	@ (800f3f8 <ADC_Enable+0xcc>)
 800f366:	4013      	ands	r3, r2
 800f368:	d00d      	beq.n	800f386 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f36e:	2210      	movs	r2, #16
 800f370:	431a      	orrs	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f37a:	2201      	movs	r2, #1
 800f37c:	431a      	orrs	r2, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f382:	2301      	movs	r3, #1
 800f384:	e033      	b.n	800f3ee <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	689a      	ldr	r2, [r3, #8]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2101      	movs	r1, #1
 800f392:	430a      	orrs	r2, r1
 800f394:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f396:	2001      	movs	r0, #1
 800f398:	f000 f830 	bl	800f3fc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f39c:	f7ff fc68 	bl	800ec70 <HAL_GetTick>
 800f3a0:	0003      	movs	r3, r0
 800f3a2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f3a4:	e01b      	b.n	800f3de <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f3a6:	f7ff fc63 	bl	800ec70 <HAL_GetTick>
 800f3aa:	0002      	movs	r2, r0
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	2b0a      	cmp	r3, #10
 800f3b2:	d914      	bls.n	800f3de <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	4013      	ands	r3, r2
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d00d      	beq.n	800f3de <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3c6:	2210      	movs	r2, #16
 800f3c8:	431a      	orrs	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	431a      	orrs	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e007      	b.n	800f3ee <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	4013      	ands	r3, r2
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d1dc      	bne.n	800f3a6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	0018      	movs	r0, r3
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	b004      	add	sp, #16
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	46c0      	nop			@ (mov r8, r8)
 800f3f8:	80000017 	.word	0x80000017

0800f3fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f404:	4b0b      	ldr	r3, [pc, #44]	@ (800f434 <ADC_DelayMicroSecond+0x38>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	490b      	ldr	r1, [pc, #44]	@ (800f438 <ADC_DelayMicroSecond+0x3c>)
 800f40a:	0018      	movs	r0, r3
 800f40c:	f7f0 feca 	bl	80001a4 <__udivsi3>
 800f410:	0003      	movs	r3, r0
 800f412:	001a      	movs	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4353      	muls	r3, r2
 800f418:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f41a:	e002      	b.n	800f422 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3b01      	subs	r3, #1
 800f420:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1f9      	bne.n	800f41c <ADC_DelayMicroSecond+0x20>
  }
}
 800f428:	46c0      	nop			@ (mov r8, r8)
 800f42a:	46c0      	nop			@ (mov r8, r8)
 800f42c:	46bd      	mov	sp, r7
 800f42e:	b004      	add	sp, #16
 800f430:	bd80      	pop	{r7, pc}
 800f432:	46c0      	nop			@ (mov r8, r8)
 800f434:	200000c8 	.word	0x200000c8
 800f438:	000f4240 	.word	0x000f4240

0800f43c <__NVIC_EnableIRQ>:
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	0002      	movs	r2, r0
 800f444:	1dfb      	adds	r3, r7, #7
 800f446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f448:	1dfb      	adds	r3, r7, #7
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f44e:	d809      	bhi.n	800f464 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f450:	1dfb      	adds	r3, r7, #7
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	001a      	movs	r2, r3
 800f456:	231f      	movs	r3, #31
 800f458:	401a      	ands	r2, r3
 800f45a:	4b04      	ldr	r3, [pc, #16]	@ (800f46c <__NVIC_EnableIRQ+0x30>)
 800f45c:	2101      	movs	r1, #1
 800f45e:	4091      	lsls	r1, r2
 800f460:	000a      	movs	r2, r1
 800f462:	601a      	str	r2, [r3, #0]
}
 800f464:	46c0      	nop			@ (mov r8, r8)
 800f466:	46bd      	mov	sp, r7
 800f468:	b002      	add	sp, #8
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	e000e100 	.word	0xe000e100

0800f470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f470:	b590      	push	{r4, r7, lr}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	0002      	movs	r2, r0
 800f478:	6039      	str	r1, [r7, #0]
 800f47a:	1dfb      	adds	r3, r7, #7
 800f47c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f47e:	1dfb      	adds	r3, r7, #7
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b7f      	cmp	r3, #127	@ 0x7f
 800f484:	d828      	bhi.n	800f4d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f486:	4a2f      	ldr	r2, [pc, #188]	@ (800f544 <__NVIC_SetPriority+0xd4>)
 800f488:	1dfb      	adds	r3, r7, #7
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	b25b      	sxtb	r3, r3
 800f48e:	089b      	lsrs	r3, r3, #2
 800f490:	33c0      	adds	r3, #192	@ 0xc0
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	589b      	ldr	r3, [r3, r2]
 800f496:	1dfa      	adds	r2, r7, #7
 800f498:	7812      	ldrb	r2, [r2, #0]
 800f49a:	0011      	movs	r1, r2
 800f49c:	2203      	movs	r2, #3
 800f49e:	400a      	ands	r2, r1
 800f4a0:	00d2      	lsls	r2, r2, #3
 800f4a2:	21ff      	movs	r1, #255	@ 0xff
 800f4a4:	4091      	lsls	r1, r2
 800f4a6:	000a      	movs	r2, r1
 800f4a8:	43d2      	mvns	r2, r2
 800f4aa:	401a      	ands	r2, r3
 800f4ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	019b      	lsls	r3, r3, #6
 800f4b2:	22ff      	movs	r2, #255	@ 0xff
 800f4b4:	401a      	ands	r2, r3
 800f4b6:	1dfb      	adds	r3, r7, #7
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	0018      	movs	r0, r3
 800f4bc:	2303      	movs	r3, #3
 800f4be:	4003      	ands	r3, r0
 800f4c0:	00db      	lsls	r3, r3, #3
 800f4c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4c4:	481f      	ldr	r0, [pc, #124]	@ (800f544 <__NVIC_SetPriority+0xd4>)
 800f4c6:	1dfb      	adds	r3, r7, #7
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	b25b      	sxtb	r3, r3
 800f4cc:	089b      	lsrs	r3, r3, #2
 800f4ce:	430a      	orrs	r2, r1
 800f4d0:	33c0      	adds	r3, #192	@ 0xc0
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f4d6:	e031      	b.n	800f53c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4d8:	4a1b      	ldr	r2, [pc, #108]	@ (800f548 <__NVIC_SetPriority+0xd8>)
 800f4da:	1dfb      	adds	r3, r7, #7
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	0019      	movs	r1, r3
 800f4e0:	230f      	movs	r3, #15
 800f4e2:	400b      	ands	r3, r1
 800f4e4:	3b08      	subs	r3, #8
 800f4e6:	089b      	lsrs	r3, r3, #2
 800f4e8:	3306      	adds	r3, #6
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	18d3      	adds	r3, r2, r3
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	1dfa      	adds	r2, r7, #7
 800f4f4:	7812      	ldrb	r2, [r2, #0]
 800f4f6:	0011      	movs	r1, r2
 800f4f8:	2203      	movs	r2, #3
 800f4fa:	400a      	ands	r2, r1
 800f4fc:	00d2      	lsls	r2, r2, #3
 800f4fe:	21ff      	movs	r1, #255	@ 0xff
 800f500:	4091      	lsls	r1, r2
 800f502:	000a      	movs	r2, r1
 800f504:	43d2      	mvns	r2, r2
 800f506:	401a      	ands	r2, r3
 800f508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	019b      	lsls	r3, r3, #6
 800f50e:	22ff      	movs	r2, #255	@ 0xff
 800f510:	401a      	ands	r2, r3
 800f512:	1dfb      	adds	r3, r7, #7
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	0018      	movs	r0, r3
 800f518:	2303      	movs	r3, #3
 800f51a:	4003      	ands	r3, r0
 800f51c:	00db      	lsls	r3, r3, #3
 800f51e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f520:	4809      	ldr	r0, [pc, #36]	@ (800f548 <__NVIC_SetPriority+0xd8>)
 800f522:	1dfb      	adds	r3, r7, #7
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	001c      	movs	r4, r3
 800f528:	230f      	movs	r3, #15
 800f52a:	4023      	ands	r3, r4
 800f52c:	3b08      	subs	r3, #8
 800f52e:	089b      	lsrs	r3, r3, #2
 800f530:	430a      	orrs	r2, r1
 800f532:	3306      	adds	r3, #6
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	18c3      	adds	r3, r0, r3
 800f538:	3304      	adds	r3, #4
 800f53a:	601a      	str	r2, [r3, #0]
}
 800f53c:	46c0      	nop			@ (mov r8, r8)
 800f53e:	46bd      	mov	sp, r7
 800f540:	b003      	add	sp, #12
 800f542:	bd90      	pop	{r4, r7, pc}
 800f544:	e000e100 	.word	0xe000e100
 800f548:	e000ed00 	.word	0xe000ed00

0800f54c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f550:	f3bf 8f4f 	dsb	sy
}
 800f554:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f556:	4b04      	ldr	r3, [pc, #16]	@ (800f568 <__NVIC_SystemReset+0x1c>)
 800f558:	4a04      	ldr	r2, [pc, #16]	@ (800f56c <__NVIC_SystemReset+0x20>)
 800f55a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f55c:	f3bf 8f4f 	dsb	sy
}
 800f560:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f562:	46c0      	nop			@ (mov r8, r8)
 800f564:	e7fd      	b.n	800f562 <__NVIC_SystemReset+0x16>
 800f566:	46c0      	nop			@ (mov r8, r8)
 800f568:	e000ed00 	.word	0xe000ed00
 800f56c:	05fa0004 	.word	0x05fa0004

0800f570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	1e5a      	subs	r2, r3, #1
 800f57c:	2380      	movs	r3, #128	@ 0x80
 800f57e:	045b      	lsls	r3, r3, #17
 800f580:	429a      	cmp	r2, r3
 800f582:	d301      	bcc.n	800f588 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f584:	2301      	movs	r3, #1
 800f586:	e010      	b.n	800f5aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f588:	4b0a      	ldr	r3, [pc, #40]	@ (800f5b4 <SysTick_Config+0x44>)
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	3a01      	subs	r2, #1
 800f58e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f590:	2301      	movs	r3, #1
 800f592:	425b      	negs	r3, r3
 800f594:	2103      	movs	r1, #3
 800f596:	0018      	movs	r0, r3
 800f598:	f7ff ff6a 	bl	800f470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f59c:	4b05      	ldr	r3, [pc, #20]	@ (800f5b4 <SysTick_Config+0x44>)
 800f59e:	2200      	movs	r2, #0
 800f5a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f5a2:	4b04      	ldr	r3, [pc, #16]	@ (800f5b4 <SysTick_Config+0x44>)
 800f5a4:	2207      	movs	r2, #7
 800f5a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	0018      	movs	r0, r3
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	b002      	add	sp, #8
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	46c0      	nop			@ (mov r8, r8)
 800f5b4:	e000e010 	.word	0xe000e010

0800f5b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60b9      	str	r1, [r7, #8]
 800f5c0:	607a      	str	r2, [r7, #4]
 800f5c2:	210f      	movs	r1, #15
 800f5c4:	187b      	adds	r3, r7, r1
 800f5c6:	1c02      	adds	r2, r0, #0
 800f5c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	187b      	adds	r3, r7, r1
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	b25b      	sxtb	r3, r3
 800f5d2:	0011      	movs	r1, r2
 800f5d4:	0018      	movs	r0, r3
 800f5d6:	f7ff ff4b 	bl	800f470 <__NVIC_SetPriority>
}
 800f5da:	46c0      	nop			@ (mov r8, r8)
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	b004      	add	sp, #16
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b082      	sub	sp, #8
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	0002      	movs	r2, r0
 800f5ea:	1dfb      	adds	r3, r7, #7
 800f5ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f5ee:	1dfb      	adds	r3, r7, #7
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	b25b      	sxtb	r3, r3
 800f5f4:	0018      	movs	r0, r3
 800f5f6:	f7ff ff21 	bl	800f43c <__NVIC_EnableIRQ>
}
 800f5fa:	46c0      	nop			@ (mov r8, r8)
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	b002      	add	sp, #8
 800f600:	bd80      	pop	{r7, pc}

0800f602 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f606:	f7ff ffa1 	bl	800f54c <__NVIC_SystemReset>

0800f60a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b082      	sub	sp, #8
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	0018      	movs	r0, r3
 800f616:	f7ff ffab 	bl	800f570 <SysTick_Config>
 800f61a:	0003      	movs	r3, r0
}
 800f61c:	0018      	movs	r0, r3
 800f61e:	46bd      	mov	sp, r7
 800f620:	b002      	add	sp, #8
 800f622:	bd80      	pop	{r7, pc}

0800f624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	e061      	b.n	800f6fa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a32      	ldr	r2, [pc, #200]	@ (800f704 <HAL_DMA_Init+0xe0>)
 800f63c:	4694      	mov	ip, r2
 800f63e:	4463      	add	r3, ip
 800f640:	2114      	movs	r1, #20
 800f642:	0018      	movs	r0, r3
 800f644:	f7f0 fdae 	bl	80001a4 <__udivsi3>
 800f648:	0003      	movs	r3, r0
 800f64a:	009a      	lsls	r2, r3, #2
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a2d      	ldr	r2, [pc, #180]	@ (800f708 <HAL_DMA_Init+0xe4>)
 800f654:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2225      	movs	r2, #37	@ 0x25
 800f65a:	2102      	movs	r1, #2
 800f65c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	4a28      	ldr	r2, [pc, #160]	@ (800f70c <HAL_DMA_Init+0xe8>)
 800f66a:	4013      	ands	r3, r2
 800f66c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	699b      	ldr	r3, [r3, #24]
 800f688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f68e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a1b      	ldr	r3, [r3, #32]
 800f694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f696:	68fa      	ldr	r2, [r7, #12]
 800f698:	4313      	orrs	r3, r2
 800f69a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	689a      	ldr	r2, [r3, #8]
 800f6a8:	2380      	movs	r3, #128	@ 0x80
 800f6aa:	01db      	lsls	r3, r3, #7
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d018      	beq.n	800f6e2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f6b0:	4b17      	ldr	r3, [pc, #92]	@ (800f710 <HAL_DMA_Init+0xec>)
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6b8:	211c      	movs	r1, #28
 800f6ba:	400b      	ands	r3, r1
 800f6bc:	210f      	movs	r1, #15
 800f6be:	4099      	lsls	r1, r3
 800f6c0:	000b      	movs	r3, r1
 800f6c2:	43d9      	mvns	r1, r3
 800f6c4:	4b12      	ldr	r3, [pc, #72]	@ (800f710 <HAL_DMA_Init+0xec>)
 800f6c6:	400a      	ands	r2, r1
 800f6c8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f6ca:	4b11      	ldr	r3, [pc, #68]	@ (800f710 <HAL_DMA_Init+0xec>)
 800f6cc:	6819      	ldr	r1, [r3, #0]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	685a      	ldr	r2, [r3, #4]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6d6:	201c      	movs	r0, #28
 800f6d8:	4003      	ands	r3, r0
 800f6da:	409a      	lsls	r2, r3
 800f6dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f710 <HAL_DMA_Init+0xec>)
 800f6de:	430a      	orrs	r2, r1
 800f6e0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2225      	movs	r2, #37	@ 0x25
 800f6ec:	2101      	movs	r1, #1
 800f6ee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2224      	movs	r2, #36	@ 0x24
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	0018      	movs	r0, r3
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	b004      	add	sp, #16
 800f700:	bd80      	pop	{r7, pc}
 800f702:	46c0      	nop			@ (mov r8, r8)
 800f704:	bffdfff8 	.word	0xbffdfff8
 800f708:	40020000 	.word	0x40020000
 800f70c:	ffff800f 	.word	0xffff800f
 800f710:	400200a8 	.word	0x400200a8

0800f714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b086      	sub	sp, #24
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
 800f720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f722:	2317      	movs	r3, #23
 800f724:	18fb      	adds	r3, r7, r3
 800f726:	2200      	movs	r2, #0
 800f728:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2224      	movs	r2, #36	@ 0x24
 800f72e:	5c9b      	ldrb	r3, [r3, r2]
 800f730:	2b01      	cmp	r3, #1
 800f732:	d101      	bne.n	800f738 <HAL_DMA_Start_IT+0x24>
 800f734:	2302      	movs	r3, #2
 800f736:	e04f      	b.n	800f7d8 <HAL_DMA_Start_IT+0xc4>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2224      	movs	r2, #36	@ 0x24
 800f73c:	2101      	movs	r1, #1
 800f73e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2225      	movs	r2, #37	@ 0x25
 800f744:	5c9b      	ldrb	r3, [r3, r2]
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d13a      	bne.n	800f7c2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2225      	movs	r2, #37	@ 0x25
 800f750:	2102      	movs	r1, #2
 800f752:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2200      	movs	r2, #0
 800f758:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2101      	movs	r1, #1
 800f766:	438a      	bics	r2, r1
 800f768:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	68b9      	ldr	r1, [r7, #8]
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f000 f976 	bl	800fa62 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d008      	beq.n	800f790 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	210e      	movs	r1, #14
 800f78a:	430a      	orrs	r2, r1
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	e00f      	b.n	800f7b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2104      	movs	r1, #4
 800f79c:	438a      	bics	r2, r1
 800f79e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	210a      	movs	r1, #10
 800f7ac:	430a      	orrs	r2, r1
 800f7ae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2101      	movs	r1, #1
 800f7bc:	430a      	orrs	r2, r1
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	e007      	b.n	800f7d2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2224      	movs	r2, #36	@ 0x24
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f7ca:	2317      	movs	r3, #23
 800f7cc:	18fb      	adds	r3, r7, r3
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f7d2:	2317      	movs	r3, #23
 800f7d4:	18fb      	adds	r3, r7, r3
 800f7d6:	781b      	ldrb	r3, [r3, #0]
}
 800f7d8:	0018      	movs	r0, r3
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	b006      	add	sp, #24
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7e8:	230f      	movs	r3, #15
 800f7ea:	18fb      	adds	r3, r7, r3
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2225      	movs	r2, #37	@ 0x25
 800f7f4:	5c9b      	ldrb	r3, [r3, r2]
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	d008      	beq.n	800f80e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2204      	movs	r2, #4
 800f800:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2224      	movs	r2, #36	@ 0x24
 800f806:	2100      	movs	r1, #0
 800f808:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f80a:	2301      	movs	r3, #1
 800f80c:	e024      	b.n	800f858 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	210e      	movs	r1, #14
 800f81a:	438a      	bics	r2, r1
 800f81c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2101      	movs	r1, #1
 800f82a:	438a      	bics	r2, r1
 800f82c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f832:	221c      	movs	r2, #28
 800f834:	401a      	ands	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f83a:	2101      	movs	r1, #1
 800f83c:	4091      	lsls	r1, r2
 800f83e:	000a      	movs	r2, r1
 800f840:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2225      	movs	r2, #37	@ 0x25
 800f846:	2101      	movs	r1, #1
 800f848:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2224      	movs	r2, #36	@ 0x24
 800f84e:	2100      	movs	r1, #0
 800f850:	5499      	strb	r1, [r3, r2]

    return status;
 800f852:	230f      	movs	r3, #15
 800f854:	18fb      	adds	r3, r7, r3
 800f856:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f858:	0018      	movs	r0, r3
 800f85a:	46bd      	mov	sp, r7
 800f85c:	b004      	add	sp, #16
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f868:	210f      	movs	r1, #15
 800f86a:	187b      	adds	r3, r7, r1
 800f86c:	2200      	movs	r2, #0
 800f86e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2225      	movs	r2, #37	@ 0x25
 800f874:	5c9b      	ldrb	r3, [r3, r2]
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d006      	beq.n	800f88a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2204      	movs	r2, #4
 800f880:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f882:	187b      	adds	r3, r7, r1
 800f884:	2201      	movs	r2, #1
 800f886:	701a      	strb	r2, [r3, #0]
 800f888:	e02a      	b.n	800f8e0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	210e      	movs	r1, #14
 800f896:	438a      	bics	r2, r1
 800f898:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2101      	movs	r1, #1
 800f8a6:	438a      	bics	r2, r1
 800f8a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8ae:	221c      	movs	r2, #28
 800f8b0:	401a      	ands	r2, r3
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8b6:	2101      	movs	r1, #1
 800f8b8:	4091      	lsls	r1, r2
 800f8ba:	000a      	movs	r2, r1
 800f8bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2225      	movs	r2, #37	@ 0x25
 800f8c2:	2101      	movs	r1, #1
 800f8c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2224      	movs	r2, #36	@ 0x24
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d004      	beq.n	800f8e0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	0010      	movs	r0, r2
 800f8de:	4798      	blx	r3
    }
  }
  return status;
 800f8e0:	230f      	movs	r3, #15
 800f8e2:	18fb      	adds	r3, r7, r3
 800f8e4:	781b      	ldrb	r3, [r3, #0]
}
 800f8e6:	0018      	movs	r0, r3
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	b004      	add	sp, #16
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b084      	sub	sp, #16
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f90a:	221c      	movs	r2, #28
 800f90c:	4013      	ands	r3, r2
 800f90e:	2204      	movs	r2, #4
 800f910:	409a      	lsls	r2, r3
 800f912:	0013      	movs	r3, r2
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	4013      	ands	r3, r2
 800f918:	d026      	beq.n	800f968 <HAL_DMA_IRQHandler+0x7a>
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2204      	movs	r2, #4
 800f91e:	4013      	ands	r3, r2
 800f920:	d022      	beq.n	800f968 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2220      	movs	r2, #32
 800f92a:	4013      	ands	r3, r2
 800f92c:	d107      	bne.n	800f93e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2104      	movs	r1, #4
 800f93a:	438a      	bics	r2, r1
 800f93c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f942:	221c      	movs	r2, #28
 800f944:	401a      	ands	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f94a:	2104      	movs	r1, #4
 800f94c:	4091      	lsls	r1, r2
 800f94e:	000a      	movs	r2, r1
 800f950:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f956:	2b00      	cmp	r3, #0
 800f958:	d100      	bne.n	800f95c <HAL_DMA_IRQHandler+0x6e>
 800f95a:	e071      	b.n	800fa40 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	0010      	movs	r0, r2
 800f964:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800f966:	e06b      	b.n	800fa40 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f96c:	221c      	movs	r2, #28
 800f96e:	4013      	ands	r3, r2
 800f970:	2202      	movs	r2, #2
 800f972:	409a      	lsls	r2, r3
 800f974:	0013      	movs	r3, r2
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	4013      	ands	r3, r2
 800f97a:	d02d      	beq.n	800f9d8 <HAL_DMA_IRQHandler+0xea>
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2202      	movs	r2, #2
 800f980:	4013      	ands	r3, r2
 800f982:	d029      	beq.n	800f9d8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2220      	movs	r2, #32
 800f98c:	4013      	ands	r3, r2
 800f98e:	d10b      	bne.n	800f9a8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	210a      	movs	r1, #10
 800f99c:	438a      	bics	r2, r1
 800f99e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2225      	movs	r2, #37	@ 0x25
 800f9a4:	2101      	movs	r1, #1
 800f9a6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9ac:	221c      	movs	r2, #28
 800f9ae:	401a      	ands	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9b4:	2102      	movs	r1, #2
 800f9b6:	4091      	lsls	r1, r2
 800f9b8:	000a      	movs	r2, r1
 800f9ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2224      	movs	r2, #36	@ 0x24
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d039      	beq.n	800fa40 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	0010      	movs	r0, r2
 800f9d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f9d6:	e033      	b.n	800fa40 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9dc:	221c      	movs	r2, #28
 800f9de:	4013      	ands	r3, r2
 800f9e0:	2208      	movs	r2, #8
 800f9e2:	409a      	lsls	r2, r3
 800f9e4:	0013      	movs	r3, r2
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	d02a      	beq.n	800fa42 <HAL_DMA_IRQHandler+0x154>
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2208      	movs	r2, #8
 800f9f0:	4013      	ands	r3, r2
 800f9f2:	d026      	beq.n	800fa42 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	210e      	movs	r1, #14
 800fa00:	438a      	bics	r2, r1
 800fa02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa08:	221c      	movs	r2, #28
 800fa0a:	401a      	ands	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa10:	2101      	movs	r1, #1
 800fa12:	4091      	lsls	r1, r2
 800fa14:	000a      	movs	r2, r1
 800fa16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2225      	movs	r2, #37	@ 0x25
 800fa22:	2101      	movs	r1, #1
 800fa24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2224      	movs	r2, #36	@ 0x24
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d005      	beq.n	800fa42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	0010      	movs	r0, r2
 800fa3e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fa40:	46c0      	nop			@ (mov r8, r8)
 800fa42:	46c0      	nop			@ (mov r8, r8)
}
 800fa44:	46bd      	mov	sp, r7
 800fa46:	b004      	add	sp, #16
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2225      	movs	r2, #37	@ 0x25
 800fa56:	5c9b      	ldrb	r3, [r3, r2]
 800fa58:	b2db      	uxtb	r3, r3
}
 800fa5a:	0018      	movs	r0, r3
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	b002      	add	sp, #8
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b084      	sub	sp, #16
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
 800fa6e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa74:	221c      	movs	r2, #28
 800fa76:	401a      	ands	r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa7c:	2101      	movs	r1, #1
 800fa7e:	4091      	lsls	r1, r2
 800fa80:	000a      	movs	r2, r1
 800fa82:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	2b10      	cmp	r3, #16
 800fa92:	d108      	bne.n	800faa6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800faa4:	e007      	b.n	800fab6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	60da      	str	r2, [r3, #12]
}
 800fab6:	46c0      	nop			@ (mov r8, r8)
 800fab8:	46bd      	mov	sp, r7
 800faba:	b004      	add	sp, #16
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fac8:	f7ff f8d2 	bl	800ec70 <HAL_GetTick>
 800facc:	0003      	movs	r3, r0
 800face:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fad0:	e00f      	b.n	800faf2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	3301      	adds	r3, #1
 800fad6:	d00c      	beq.n	800faf2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d007      	beq.n	800faee <FLASH_WaitForLastOperation+0x2e>
 800fade:	f7ff f8c7 	bl	800ec70 <HAL_GetTick>
 800fae2:	0002      	movs	r2, r0
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	1ad3      	subs	r3, r2, r3
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	429a      	cmp	r2, r3
 800faec:	d201      	bcs.n	800faf2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800faee:	2303      	movs	r3, #3
 800faf0:	e052      	b.n	800fb98 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800faf2:	4b2b      	ldr	r3, [pc, #172]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800faf4:	699b      	ldr	r3, [r3, #24]
 800faf6:	2201      	movs	r2, #1
 800faf8:	4013      	ands	r3, r2
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d0e9      	beq.n	800fad2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fafe:	4b28      	ldr	r3, [pc, #160]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb00:	699b      	ldr	r3, [r3, #24]
 800fb02:	2202      	movs	r2, #2
 800fb04:	4013      	ands	r3, r2
 800fb06:	2b02      	cmp	r3, #2
 800fb08:	d102      	bne.n	800fb10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fb0a:	4b25      	ldr	r3, [pc, #148]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb0c:	2202      	movs	r2, #2
 800fb0e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fb10:	4b23      	ldr	r3, [pc, #140]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb12:	699a      	ldr	r2, [r3, #24]
 800fb14:	2380      	movs	r3, #128	@ 0x80
 800fb16:	005b      	lsls	r3, r3, #1
 800fb18:	401a      	ands	r2, r3
 800fb1a:	2380      	movs	r3, #128	@ 0x80
 800fb1c:	005b      	lsls	r3, r3, #1
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d035      	beq.n	800fb8e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fb22:	4b1f      	ldr	r3, [pc, #124]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb24:	699a      	ldr	r2, [r3, #24]
 800fb26:	2380      	movs	r3, #128	@ 0x80
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fb2c:	2380      	movs	r3, #128	@ 0x80
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d02c      	beq.n	800fb8e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fb34:	4b1a      	ldr	r3, [pc, #104]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb36:	699a      	ldr	r2, [r3, #24]
 800fb38:	2380      	movs	r3, #128	@ 0x80
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fb3e:	2380      	movs	r3, #128	@ 0x80
 800fb40:	00db      	lsls	r3, r3, #3
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d023      	beq.n	800fb8e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fb46:	4b16      	ldr	r3, [pc, #88]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb48:	699a      	ldr	r2, [r3, #24]
 800fb4a:	2380      	movs	r3, #128	@ 0x80
 800fb4c:	011b      	lsls	r3, r3, #4
 800fb4e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fb50:	2380      	movs	r3, #128	@ 0x80
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d01a      	beq.n	800fb8e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fb58:	4b11      	ldr	r3, [pc, #68]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb5a:	699a      	ldr	r2, [r3, #24]
 800fb5c:	2380      	movs	r3, #128	@ 0x80
 800fb5e:	019b      	lsls	r3, r3, #6
 800fb60:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fb62:	2380      	movs	r3, #128	@ 0x80
 800fb64:	019b      	lsls	r3, r3, #6
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d011      	beq.n	800fb8e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fb6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb6c:	699a      	ldr	r2, [r3, #24]
 800fb6e:	2380      	movs	r3, #128	@ 0x80
 800fb70:	029b      	lsls	r3, r3, #10
 800fb72:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fb74:	2380      	movs	r3, #128	@ 0x80
 800fb76:	029b      	lsls	r3, r3, #10
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d008      	beq.n	800fb8e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fb7c:	4b08      	ldr	r3, [pc, #32]	@ (800fba0 <FLASH_WaitForLastOperation+0xe0>)
 800fb7e:	699a      	ldr	r2, [r3, #24]
 800fb80:	2380      	movs	r3, #128	@ 0x80
 800fb82:	025b      	lsls	r3, r3, #9
 800fb84:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fb86:	2380      	movs	r3, #128	@ 0x80
 800fb88:	025b      	lsls	r3, r3, #9
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d103      	bne.n	800fb96 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fb8e:	f000 f809 	bl	800fba4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fb92:	2301      	movs	r3, #1
 800fb94:	e000      	b.n	800fb98 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	0018      	movs	r0, r3
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	b004      	add	sp, #16
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	40022000 	.word	0x40022000

0800fba4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fbae:	4b49      	ldr	r3, [pc, #292]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fbb0:	699a      	ldr	r2, [r3, #24]
 800fbb2:	2380      	movs	r3, #128	@ 0x80
 800fbb4:	005b      	lsls	r3, r3, #1
 800fbb6:	401a      	ands	r2, r3
 800fbb8:	2380      	movs	r3, #128	@ 0x80
 800fbba:	005b      	lsls	r3, r3, #1
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d10a      	bne.n	800fbd6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fbc0:	4b45      	ldr	r3, [pc, #276]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	431a      	orrs	r2, r3
 800fbc8:	4b43      	ldr	r3, [pc, #268]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fbca:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2280      	movs	r2, #128	@ 0x80
 800fbd0:	0052      	lsls	r2, r2, #1
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fbd6:	4b3f      	ldr	r3, [pc, #252]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fbd8:	699a      	ldr	r2, [r3, #24]
 800fbda:	2380      	movs	r3, #128	@ 0x80
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	401a      	ands	r2, r3
 800fbe0:	2380      	movs	r3, #128	@ 0x80
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d10a      	bne.n	800fbfe <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fbe8:	4b3b      	ldr	r3, [pc, #236]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	2201      	movs	r2, #1
 800fbee:	431a      	orrs	r2, r3
 800fbf0:	4b39      	ldr	r3, [pc, #228]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fbf2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2280      	movs	r2, #128	@ 0x80
 800fbf8:	0092      	lsls	r2, r2, #2
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fbfe:	4b35      	ldr	r3, [pc, #212]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fc00:	699a      	ldr	r2, [r3, #24]
 800fc02:	2380      	movs	r3, #128	@ 0x80
 800fc04:	00db      	lsls	r3, r3, #3
 800fc06:	401a      	ands	r2, r3
 800fc08:	2380      	movs	r3, #128	@ 0x80
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d10a      	bne.n	800fc26 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fc10:	4b31      	ldr	r3, [pc, #196]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc12:	695b      	ldr	r3, [r3, #20]
 800fc14:	2208      	movs	r2, #8
 800fc16:	431a      	orrs	r2, r3
 800fc18:	4b2f      	ldr	r3, [pc, #188]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc1a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2280      	movs	r2, #128	@ 0x80
 800fc20:	00d2      	lsls	r2, r2, #3
 800fc22:	4313      	orrs	r3, r2
 800fc24:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fc26:	4b2b      	ldr	r3, [pc, #172]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fc28:	699a      	ldr	r2, [r3, #24]
 800fc2a:	2380      	movs	r3, #128	@ 0x80
 800fc2c:	011b      	lsls	r3, r3, #4
 800fc2e:	401a      	ands	r2, r3
 800fc30:	2380      	movs	r3, #128	@ 0x80
 800fc32:	011b      	lsls	r3, r3, #4
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d10a      	bne.n	800fc4e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fc38:	4b27      	ldr	r3, [pc, #156]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc3a:	695b      	ldr	r3, [r3, #20]
 800fc3c:	2204      	movs	r2, #4
 800fc3e:	431a      	orrs	r2, r3
 800fc40:	4b25      	ldr	r3, [pc, #148]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc42:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2280      	movs	r2, #128	@ 0x80
 800fc48:	0112      	lsls	r2, r2, #4
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fc4e:	4b21      	ldr	r3, [pc, #132]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fc50:	699a      	ldr	r2, [r3, #24]
 800fc52:	2380      	movs	r3, #128	@ 0x80
 800fc54:	019b      	lsls	r3, r3, #6
 800fc56:	401a      	ands	r2, r3
 800fc58:	2380      	movs	r3, #128	@ 0x80
 800fc5a:	019b      	lsls	r3, r3, #6
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d10a      	bne.n	800fc76 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fc60:	4b1d      	ldr	r3, [pc, #116]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc62:	695b      	ldr	r3, [r3, #20]
 800fc64:	2210      	movs	r2, #16
 800fc66:	431a      	orrs	r2, r3
 800fc68:	4b1b      	ldr	r3, [pc, #108]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc6a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2280      	movs	r2, #128	@ 0x80
 800fc70:	0192      	lsls	r2, r2, #6
 800fc72:	4313      	orrs	r3, r2
 800fc74:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fc76:	4b17      	ldr	r3, [pc, #92]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fc78:	699a      	ldr	r2, [r3, #24]
 800fc7a:	2380      	movs	r3, #128	@ 0x80
 800fc7c:	029b      	lsls	r3, r3, #10
 800fc7e:	401a      	ands	r2, r3
 800fc80:	2380      	movs	r3, #128	@ 0x80
 800fc82:	029b      	lsls	r3, r3, #10
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d109      	bne.n	800fc9c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800fc88:	4b13      	ldr	r3, [pc, #76]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc8a:	695b      	ldr	r3, [r3, #20]
 800fc8c:	2220      	movs	r2, #32
 800fc8e:	431a      	orrs	r2, r3
 800fc90:	4b11      	ldr	r3, [pc, #68]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fc92:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2220      	movs	r2, #32
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fc9c:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fc9e:	699a      	ldr	r2, [r3, #24]
 800fca0:	2380      	movs	r3, #128	@ 0x80
 800fca2:	025b      	lsls	r3, r3, #9
 800fca4:	401a      	ands	r2, r3
 800fca6:	2380      	movs	r3, #128	@ 0x80
 800fca8:	025b      	lsls	r3, r3, #9
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d10a      	bne.n	800fcc4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800fcae:	4b0a      	ldr	r3, [pc, #40]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fcb0:	695b      	ldr	r3, [r3, #20]
 800fcb2:	2240      	movs	r2, #64	@ 0x40
 800fcb4:	431a      	orrs	r2, r3
 800fcb6:	4b08      	ldr	r3, [pc, #32]	@ (800fcd8 <FLASH_SetErrorCode+0x134>)
 800fcb8:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2280      	movs	r2, #128	@ 0x80
 800fcbe:	0252      	lsls	r2, r2, #9
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fcc4:	4b03      	ldr	r3, [pc, #12]	@ (800fcd4 <FLASH_SetErrorCode+0x130>)
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	619a      	str	r2, [r3, #24]
}  
 800fcca:	46c0      	nop			@ (mov r8, r8)
 800fccc:	46bd      	mov	sp, r7
 800fcce:	b002      	add	sp, #8
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	46c0      	nop			@ (mov r8, r8)
 800fcd4:	40022000 	.word	0x40022000
 800fcd8:	200023ac 	.word	0x200023ac

0800fcdc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b084      	sub	sp, #16
 800fce0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fce2:	4b12      	ldr	r3, [pc, #72]	@ (800fd2c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	2201      	movs	r2, #1
 800fce8:	4013      	ands	r3, r2
 800fcea:	d019      	beq.n	800fd20 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcec:	f3ef 8310 	mrs	r3, PRIMASK
 800fcf0:	607b      	str	r3, [r7, #4]
  return(result);
 800fcf2:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800fcf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fcf6:	b672      	cpsid	i
}
 800fcf8:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800fcfa:	4b0c      	ldr	r3, [pc, #48]	@ (800fd2c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fcfc:	4a0c      	ldr	r2, [pc, #48]	@ (800fd30 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800fcfe:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800fd00:	4b0a      	ldr	r3, [pc, #40]	@ (800fd2c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd02:	4a0c      	ldr	r2, [pc, #48]	@ (800fd34 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800fd04:	60da      	str	r2, [r3, #12]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	f383 8810 	msr	PRIMASK, r3
}
 800fd10:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fd12:	4b06      	ldr	r3, [pc, #24]	@ (800fd2c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	2201      	movs	r2, #1
 800fd18:	4013      	ands	r3, r2
 800fd1a:	d001      	beq.n	800fd20 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	e000      	b.n	800fd22 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	0018      	movs	r0, r3
 800fd24:	46bd      	mov	sp, r7
 800fd26:	b004      	add	sp, #16
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	46c0      	nop			@ (mov r8, r8)
 800fd2c:	40022000 	.word	0x40022000
 800fd30:	89abcdef 	.word	0x89abcdef
 800fd34:	02030405 	.word	0x02030405

0800fd38 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800fd3c:	4b04      	ldr	r3, [pc, #16]	@ (800fd50 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	4b03      	ldr	r3, [pc, #12]	@ (800fd50 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fd42:	2101      	movs	r1, #1
 800fd44:	430a      	orrs	r2, r1
 800fd46:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	0018      	movs	r0, r3
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	40022000 	.word	0x40022000

0800fd54 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800fd54:	b5b0      	push	{r4, r5, r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd5c:	250f      	movs	r5, #15
 800fd5e:	197b      	adds	r3, r7, r5
 800fd60:	2200      	movs	r2, #0
 800fd62:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fd64:	197c      	adds	r4, r7, r5
 800fd66:	4b0f      	ldr	r3, [pc, #60]	@ (800fda4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fd68:	0018      	movs	r0, r3
 800fd6a:	f7ff fea9 	bl	800fac0 <FLASH_WaitForLastOperation>
 800fd6e:	0003      	movs	r3, r0
 800fd70:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fd72:	0029      	movs	r1, r5
 800fd74:	187b      	adds	r3, r7, r1
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d10c      	bne.n	800fd96 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fd7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fda8 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800fd7e:	2200      	movs	r2, #0
 800fd80:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fd88:	187c      	adds	r4, r7, r1
 800fd8a:	4b06      	ldr	r3, [pc, #24]	@ (800fda4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fd8c:	0018      	movs	r0, r3
 800fd8e:	f7ff fe97 	bl	800fac0 <FLASH_WaitForLastOperation>
 800fd92:	0003      	movs	r3, r0
 800fd94:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800fd96:	230f      	movs	r3, #15
 800fd98:	18fb      	adds	r3, r7, r3
 800fd9a:	781b      	ldrb	r3, [r3, #0]
}  
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	b004      	add	sp, #16
 800fda2:	bdb0      	pop	{r4, r5, r7, pc}
 800fda4:	0000c350 	.word	0x0000c350
 800fda8:	200023ac 	.word	0x200023ac

0800fdac <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800fdac:	b5b0      	push	{r4, r5, r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fdb8:	2317      	movs	r3, #23
 800fdba:	18fb      	adds	r3, r7, r3
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fdc0:	4b24      	ldr	r3, [pc, #144]	@ (800fe54 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fdc2:	7c1b      	ldrb	r3, [r3, #16]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d101      	bne.n	800fdcc <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800fdc8:	2302      	movs	r3, #2
 800fdca:	e03e      	b.n	800fe4a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800fdcc:	4b21      	ldr	r3, [pc, #132]	@ (800fe54 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fdce:	2201      	movs	r2, #1
 800fdd0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fdd2:	2517      	movs	r5, #23
 800fdd4:	197c      	adds	r4, r7, r5
 800fdd6:	4b20      	ldr	r3, [pc, #128]	@ (800fe58 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fdd8:	0018      	movs	r0, r3
 800fdda:	f7ff fe71 	bl	800fac0 <FLASH_WaitForLastOperation>
 800fdde:	0003      	movs	r3, r0
 800fde0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fde2:	197b      	adds	r3, r7, r5
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d129      	bne.n	800fe3e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fdea:	4b1a      	ldr	r3, [pc, #104]	@ (800fe54 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	2b02      	cmp	r3, #2
 800fdf4:	d103      	bne.n	800fdfe <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	601a      	str	r2, [r3, #0]
 800fdfc:	e013      	b.n	800fe26 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d104      	bne.n	800fe0e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	b292      	uxth	r2, r2
 800fe0a:	801a      	strh	r2, [r3, #0]
 800fe0c:	e00b      	b.n	800fe26 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d104      	bne.n	800fe1e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	b2d2      	uxtb	r2, r2
 800fe1a:	701a      	strb	r2, [r3, #0]
 800fe1c:	e003      	b.n	800fe26 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800fe1e:	2317      	movs	r3, #23
 800fe20:	18fb      	adds	r3, r7, r3
 800fe22:	2201      	movs	r2, #1
 800fe24:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800fe26:	2217      	movs	r2, #23
 800fe28:	18bb      	adds	r3, r7, r2
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d106      	bne.n	800fe3e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe30:	18bc      	adds	r4, r7, r2
 800fe32:	4b09      	ldr	r3, [pc, #36]	@ (800fe58 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fe34:	0018      	movs	r0, r3
 800fe36:	f7ff fe43 	bl	800fac0 <FLASH_WaitForLastOperation>
 800fe3a:	0003      	movs	r3, r0
 800fe3c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fe3e:	4b05      	ldr	r3, [pc, #20]	@ (800fe54 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe40:	2200      	movs	r2, #0
 800fe42:	741a      	strb	r2, [r3, #16]

  return status;
 800fe44:	2317      	movs	r3, #23
 800fe46:	18fb      	adds	r3, r7, r3
 800fe48:	781b      	ldrb	r3, [r3, #0]
}
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	b006      	add	sp, #24
 800fe50:	bdb0      	pop	{r4, r5, r7, pc}
 800fe52:	46c0      	nop			@ (mov r8, r8)
 800fe54:	200023ac 	.word	0x200023ac
 800fe58:	0000c350 	.word	0x0000c350

0800fe5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800fe66:	2300      	movs	r3, #0
 800fe68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800fe72:	e155      	b.n	8010120 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2101      	movs	r1, #1
 800fe7a:	697a      	ldr	r2, [r7, #20]
 800fe7c:	4091      	lsls	r1, r2
 800fe7e:	000a      	movs	r2, r1
 800fe80:	4013      	ands	r3, r2
 800fe82:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d100      	bne.n	800fe8c <HAL_GPIO_Init+0x30>
 800fe8a:	e146      	b.n	801011a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	2203      	movs	r2, #3
 800fe92:	4013      	ands	r3, r2
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d005      	beq.n	800fea4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	2203      	movs	r2, #3
 800fe9e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800fea0:	2b02      	cmp	r3, #2
 800fea2:	d130      	bne.n	800ff06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	689b      	ldr	r3, [r3, #8]
 800fea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	2203      	movs	r2, #3
 800feb0:	409a      	lsls	r2, r3
 800feb2:	0013      	movs	r3, r2
 800feb4:	43da      	mvns	r2, r3
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	4013      	ands	r3, r2
 800feba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	68da      	ldr	r2, [r3, #12]
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	409a      	lsls	r2, r3
 800fec6:	0013      	movs	r3, r2
 800fec8:	693a      	ldr	r2, [r7, #16]
 800feca:	4313      	orrs	r3, r2
 800fecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800feda:	2201      	movs	r2, #1
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	409a      	lsls	r2, r3
 800fee0:	0013      	movs	r3, r2
 800fee2:	43da      	mvns	r2, r3
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	4013      	ands	r3, r2
 800fee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	091b      	lsrs	r3, r3, #4
 800fef0:	2201      	movs	r2, #1
 800fef2:	401a      	ands	r2, r3
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	409a      	lsls	r2, r3
 800fef8:	0013      	movs	r3, r2
 800fefa:	693a      	ldr	r2, [r7, #16]
 800fefc:	4313      	orrs	r3, r2
 800fefe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	2203      	movs	r2, #3
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	2b03      	cmp	r3, #3
 800ff10:	d017      	beq.n	800ff42 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	2203      	movs	r2, #3
 800ff1e:	409a      	lsls	r2, r3
 800ff20:	0013      	movs	r3, r2
 800ff22:	43da      	mvns	r2, r3
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	4013      	ands	r3, r2
 800ff28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	689a      	ldr	r2, [r3, #8]
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	005b      	lsls	r3, r3, #1
 800ff32:	409a      	lsls	r2, r3
 800ff34:	0013      	movs	r3, r2
 800ff36:	693a      	ldr	r2, [r7, #16]
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	693a      	ldr	r2, [r7, #16]
 800ff40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	2203      	movs	r2, #3
 800ff48:	4013      	ands	r3, r2
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	d123      	bne.n	800ff96 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	08da      	lsrs	r2, r3, #3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	3208      	adds	r2, #8
 800ff56:	0092      	lsls	r2, r2, #2
 800ff58:	58d3      	ldr	r3, [r2, r3]
 800ff5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2207      	movs	r2, #7
 800ff60:	4013      	ands	r3, r2
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	220f      	movs	r2, #15
 800ff66:	409a      	lsls	r2, r3
 800ff68:	0013      	movs	r3, r2
 800ff6a:	43da      	mvns	r2, r3
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	4013      	ands	r3, r2
 800ff70:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	691a      	ldr	r2, [r3, #16]
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2107      	movs	r1, #7
 800ff7a:	400b      	ands	r3, r1
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	409a      	lsls	r2, r3
 800ff80:	0013      	movs	r3, r2
 800ff82:	693a      	ldr	r2, [r7, #16]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	08da      	lsrs	r2, r3, #3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	3208      	adds	r2, #8
 800ff90:	0092      	lsls	r2, r2, #2
 800ff92:	6939      	ldr	r1, [r7, #16]
 800ff94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	005b      	lsls	r3, r3, #1
 800ffa0:	2203      	movs	r2, #3
 800ffa2:	409a      	lsls	r2, r3
 800ffa4:	0013      	movs	r3, r2
 800ffa6:	43da      	mvns	r2, r3
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	4013      	ands	r3, r2
 800ffac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	2203      	movs	r2, #3
 800ffb4:	401a      	ands	r2, r3
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	005b      	lsls	r3, r3, #1
 800ffba:	409a      	lsls	r2, r3
 800ffbc:	0013      	movs	r3, r2
 800ffbe:	693a      	ldr	r2, [r7, #16]
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	693a      	ldr	r2, [r7, #16]
 800ffc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	685a      	ldr	r2, [r3, #4]
 800ffce:	23c0      	movs	r3, #192	@ 0xc0
 800ffd0:	029b      	lsls	r3, r3, #10
 800ffd2:	4013      	ands	r3, r2
 800ffd4:	d100      	bne.n	800ffd8 <HAL_GPIO_Init+0x17c>
 800ffd6:	e0a0      	b.n	801011a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ffd8:	4b57      	ldr	r3, [pc, #348]	@ (8010138 <HAL_GPIO_Init+0x2dc>)
 800ffda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ffdc:	4b56      	ldr	r3, [pc, #344]	@ (8010138 <HAL_GPIO_Init+0x2dc>)
 800ffde:	2101      	movs	r1, #1
 800ffe0:	430a      	orrs	r2, r1
 800ffe2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800ffe4:	4a55      	ldr	r2, [pc, #340]	@ (801013c <HAL_GPIO_Init+0x2e0>)
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	089b      	lsrs	r3, r3, #2
 800ffea:	3302      	adds	r3, #2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	589b      	ldr	r3, [r3, r2]
 800fff0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	2203      	movs	r2, #3
 800fff6:	4013      	ands	r3, r2
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	220f      	movs	r2, #15
 800fffc:	409a      	lsls	r2, r3
 800fffe:	0013      	movs	r3, r2
 8010000:	43da      	mvns	r2, r3
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	4013      	ands	r3, r2
 8010006:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	23a0      	movs	r3, #160	@ 0xa0
 801000c:	05db      	lsls	r3, r3, #23
 801000e:	429a      	cmp	r2, r3
 8010010:	d01f      	beq.n	8010052 <HAL_GPIO_Init+0x1f6>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4a4a      	ldr	r2, [pc, #296]	@ (8010140 <HAL_GPIO_Init+0x2e4>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d019      	beq.n	801004e <HAL_GPIO_Init+0x1f2>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4a49      	ldr	r2, [pc, #292]	@ (8010144 <HAL_GPIO_Init+0x2e8>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d013      	beq.n	801004a <HAL_GPIO_Init+0x1ee>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4a48      	ldr	r2, [pc, #288]	@ (8010148 <HAL_GPIO_Init+0x2ec>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d00d      	beq.n	8010046 <HAL_GPIO_Init+0x1ea>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4a47      	ldr	r2, [pc, #284]	@ (801014c <HAL_GPIO_Init+0x2f0>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d007      	beq.n	8010042 <HAL_GPIO_Init+0x1e6>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4a46      	ldr	r2, [pc, #280]	@ (8010150 <HAL_GPIO_Init+0x2f4>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d101      	bne.n	801003e <HAL_GPIO_Init+0x1e2>
 801003a:	2305      	movs	r3, #5
 801003c:	e00a      	b.n	8010054 <HAL_GPIO_Init+0x1f8>
 801003e:	2306      	movs	r3, #6
 8010040:	e008      	b.n	8010054 <HAL_GPIO_Init+0x1f8>
 8010042:	2304      	movs	r3, #4
 8010044:	e006      	b.n	8010054 <HAL_GPIO_Init+0x1f8>
 8010046:	2303      	movs	r3, #3
 8010048:	e004      	b.n	8010054 <HAL_GPIO_Init+0x1f8>
 801004a:	2302      	movs	r3, #2
 801004c:	e002      	b.n	8010054 <HAL_GPIO_Init+0x1f8>
 801004e:	2301      	movs	r3, #1
 8010050:	e000      	b.n	8010054 <HAL_GPIO_Init+0x1f8>
 8010052:	2300      	movs	r3, #0
 8010054:	697a      	ldr	r2, [r7, #20]
 8010056:	2103      	movs	r1, #3
 8010058:	400a      	ands	r2, r1
 801005a:	0092      	lsls	r2, r2, #2
 801005c:	4093      	lsls	r3, r2
 801005e:	693a      	ldr	r2, [r7, #16]
 8010060:	4313      	orrs	r3, r2
 8010062:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010064:	4935      	ldr	r1, [pc, #212]	@ (801013c <HAL_GPIO_Init+0x2e0>)
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	089b      	lsrs	r3, r3, #2
 801006a:	3302      	adds	r3, #2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	693a      	ldr	r2, [r7, #16]
 8010070:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010072:	4b38      	ldr	r3, [pc, #224]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	43da      	mvns	r2, r3
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	4013      	ands	r3, r2
 8010080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	685a      	ldr	r2, [r3, #4]
 8010086:	2380      	movs	r3, #128	@ 0x80
 8010088:	035b      	lsls	r3, r3, #13
 801008a:	4013      	ands	r3, r2
 801008c:	d003      	beq.n	8010096 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801008e:	693a      	ldr	r2, [r7, #16]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4313      	orrs	r3, r2
 8010094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010096:	4b2f      	ldr	r3, [pc, #188]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 8010098:	693a      	ldr	r2, [r7, #16]
 801009a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 801009c:	4b2d      	ldr	r3, [pc, #180]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	43da      	mvns	r2, r3
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	4013      	ands	r3, r2
 80100aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	685a      	ldr	r2, [r3, #4]
 80100b0:	2380      	movs	r3, #128	@ 0x80
 80100b2:	039b      	lsls	r3, r3, #14
 80100b4:	4013      	ands	r3, r2
 80100b6:	d003      	beq.n	80100c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80100b8:	693a      	ldr	r2, [r7, #16]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	4313      	orrs	r3, r2
 80100be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80100c0:	4b24      	ldr	r3, [pc, #144]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80100c6:	4b23      	ldr	r3, [pc, #140]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	43da      	mvns	r2, r3
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	4013      	ands	r3, r2
 80100d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	685a      	ldr	r2, [r3, #4]
 80100da:	2380      	movs	r3, #128	@ 0x80
 80100dc:	029b      	lsls	r3, r3, #10
 80100de:	4013      	ands	r3, r2
 80100e0:	d003      	beq.n	80100ea <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80100e2:	693a      	ldr	r2, [r7, #16]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80100ea:	4b1a      	ldr	r3, [pc, #104]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 80100ec:	693a      	ldr	r2, [r7, #16]
 80100ee:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80100f0:	4b18      	ldr	r3, [pc, #96]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	43da      	mvns	r2, r3
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	4013      	ands	r3, r2
 80100fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	685a      	ldr	r2, [r3, #4]
 8010104:	2380      	movs	r3, #128	@ 0x80
 8010106:	025b      	lsls	r3, r3, #9
 8010108:	4013      	ands	r3, r2
 801010a:	d003      	beq.n	8010114 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 801010c:	693a      	ldr	r2, [r7, #16]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	4313      	orrs	r3, r2
 8010112:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010114:	4b0f      	ldr	r3, [pc, #60]	@ (8010154 <HAL_GPIO_Init+0x2f8>)
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	3301      	adds	r3, #1
 801011e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	40da      	lsrs	r2, r3
 8010128:	1e13      	subs	r3, r2, #0
 801012a:	d000      	beq.n	801012e <HAL_GPIO_Init+0x2d2>
 801012c:	e6a2      	b.n	800fe74 <HAL_GPIO_Init+0x18>
  }
}
 801012e:	46c0      	nop			@ (mov r8, r8)
 8010130:	46c0      	nop			@ (mov r8, r8)
 8010132:	46bd      	mov	sp, r7
 8010134:	b006      	add	sp, #24
 8010136:	bd80      	pop	{r7, pc}
 8010138:	40021000 	.word	0x40021000
 801013c:	40010000 	.word	0x40010000
 8010140:	50000400 	.word	0x50000400
 8010144:	50000800 	.word	0x50000800
 8010148:	50000c00 	.word	0x50000c00
 801014c:	50001000 	.word	0x50001000
 8010150:	50001c00 	.word	0x50001c00
 8010154:	40010400 	.word	0x40010400

08010158 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	000a      	movs	r2, r1
 8010162:	1cbb      	adds	r3, r7, #2
 8010164:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	1cba      	adds	r2, r7, #2
 801016c:	8812      	ldrh	r2, [r2, #0]
 801016e:	4013      	ands	r3, r2
 8010170:	d004      	beq.n	801017c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8010172:	230f      	movs	r3, #15
 8010174:	18fb      	adds	r3, r7, r3
 8010176:	2201      	movs	r2, #1
 8010178:	701a      	strb	r2, [r3, #0]
 801017a:	e003      	b.n	8010184 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801017c:	230f      	movs	r3, #15
 801017e:	18fb      	adds	r3, r7, r3
 8010180:	2200      	movs	r2, #0
 8010182:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010184:	230f      	movs	r3, #15
 8010186:	18fb      	adds	r3, r7, r3
 8010188:	781b      	ldrb	r3, [r3, #0]
}
 801018a:	0018      	movs	r0, r3
 801018c:	46bd      	mov	sp, r7
 801018e:	b004      	add	sp, #16
 8010190:	bd80      	pop	{r7, pc}

08010192 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	0008      	movs	r0, r1
 801019c:	0011      	movs	r1, r2
 801019e:	1cbb      	adds	r3, r7, #2
 80101a0:	1c02      	adds	r2, r0, #0
 80101a2:	801a      	strh	r2, [r3, #0]
 80101a4:	1c7b      	adds	r3, r7, #1
 80101a6:	1c0a      	adds	r2, r1, #0
 80101a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80101aa:	1c7b      	adds	r3, r7, #1
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d004      	beq.n	80101bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80101b2:	1cbb      	adds	r3, r7, #2
 80101b4:	881a      	ldrh	r2, [r3, #0]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80101ba:	e003      	b.n	80101c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80101bc:	1cbb      	adds	r3, r7, #2
 80101be:	881a      	ldrh	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80101c4:	46c0      	nop			@ (mov r8, r8)
 80101c6:	46bd      	mov	sp, r7
 80101c8:	b002      	add	sp, #8
 80101ca:	bd80      	pop	{r7, pc}

080101cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	0002      	movs	r2, r0
 80101d4:	1dbb      	adds	r3, r7, #6
 80101d6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80101d8:	4b09      	ldr	r3, [pc, #36]	@ (8010200 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80101da:	695b      	ldr	r3, [r3, #20]
 80101dc:	1dba      	adds	r2, r7, #6
 80101de:	8812      	ldrh	r2, [r2, #0]
 80101e0:	4013      	ands	r3, r2
 80101e2:	d008      	beq.n	80101f6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80101e4:	4b06      	ldr	r3, [pc, #24]	@ (8010200 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80101e6:	1dba      	adds	r2, r7, #6
 80101e8:	8812      	ldrh	r2, [r2, #0]
 80101ea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80101ec:	1dbb      	adds	r3, r7, #6
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	0018      	movs	r0, r3
 80101f2:	f7f8 f841 	bl	8008278 <HAL_GPIO_EXTI_Callback>
  }
}
 80101f6:	46c0      	nop			@ (mov r8, r8)
 80101f8:	46bd      	mov	sp, r7
 80101fa:	b002      	add	sp, #8
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	46c0      	nop			@ (mov r8, r8)
 8010200:	40010400 	.word	0x40010400

08010204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d101      	bne.n	8010216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010212:	2301      	movs	r3, #1
 8010214:	e082      	b.n	801031c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2241      	movs	r2, #65	@ 0x41
 801021a:	5c9b      	ldrb	r3, [r3, r2]
 801021c:	b2db      	uxtb	r3, r3
 801021e:	2b00      	cmp	r3, #0
 8010220:	d107      	bne.n	8010232 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2240      	movs	r2, #64	@ 0x40
 8010226:	2100      	movs	r1, #0
 8010228:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	0018      	movs	r0, r3
 801022e:	f7f7 fb19 	bl	8007864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2241      	movs	r2, #65	@ 0x41
 8010236:	2124      	movs	r1, #36	@ 0x24
 8010238:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2101      	movs	r1, #1
 8010246:	438a      	bics	r2, r1
 8010248:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	685a      	ldr	r2, [r3, #4]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4934      	ldr	r1, [pc, #208]	@ (8010324 <HAL_I2C_Init+0x120>)
 8010254:	400a      	ands	r2, r1
 8010256:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	689a      	ldr	r2, [r3, #8]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4931      	ldr	r1, [pc, #196]	@ (8010328 <HAL_I2C_Init+0x124>)
 8010264:	400a      	ands	r2, r1
 8010266:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d108      	bne.n	8010282 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	689a      	ldr	r2, [r3, #8]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2180      	movs	r1, #128	@ 0x80
 801027a:	0209      	lsls	r1, r1, #8
 801027c:	430a      	orrs	r2, r1
 801027e:	609a      	str	r2, [r3, #8]
 8010280:	e007      	b.n	8010292 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	689a      	ldr	r2, [r3, #8]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2184      	movs	r1, #132	@ 0x84
 801028c:	0209      	lsls	r1, r1, #8
 801028e:	430a      	orrs	r2, r1
 8010290:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	2b02      	cmp	r3, #2
 8010298:	d104      	bne.n	80102a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2280      	movs	r2, #128	@ 0x80
 80102a0:	0112      	lsls	r2, r2, #4
 80102a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	491f      	ldr	r1, [pc, #124]	@ (801032c <HAL_I2C_Init+0x128>)
 80102b0:	430a      	orrs	r2, r1
 80102b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68da      	ldr	r2, [r3, #12]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	491a      	ldr	r1, [pc, #104]	@ (8010328 <HAL_I2C_Init+0x124>)
 80102c0:	400a      	ands	r2, r1
 80102c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	691a      	ldr	r2, [r3, #16]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	695b      	ldr	r3, [r3, #20]
 80102cc:	431a      	orrs	r2, r3
 80102ce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	699b      	ldr	r3, [r3, #24]
 80102d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	430a      	orrs	r2, r1
 80102dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	69d9      	ldr	r1, [r3, #28]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a1a      	ldr	r2, [r3, #32]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	430a      	orrs	r2, r1
 80102ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2101      	movs	r1, #1
 80102fa:	430a      	orrs	r2, r1
 80102fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2241      	movs	r2, #65	@ 0x41
 8010308:	2120      	movs	r1, #32
 801030a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2242      	movs	r2, #66	@ 0x42
 8010316:	2100      	movs	r1, #0
 8010318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801031a:	2300      	movs	r3, #0
}
 801031c:	0018      	movs	r0, r3
 801031e:	46bd      	mov	sp, r7
 8010320:	b002      	add	sp, #8
 8010322:	bd80      	pop	{r7, pc}
 8010324:	f0ffffff 	.word	0xf0ffffff
 8010328:	ffff7fff 	.word	0xffff7fff
 801032c:	02008000 	.word	0x02008000

08010330 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010330:	b590      	push	{r4, r7, lr}
 8010332:	b089      	sub	sp, #36	@ 0x24
 8010334:	af02      	add	r7, sp, #8
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	0008      	movs	r0, r1
 801033a:	607a      	str	r2, [r7, #4]
 801033c:	0019      	movs	r1, r3
 801033e:	230a      	movs	r3, #10
 8010340:	18fb      	adds	r3, r7, r3
 8010342:	1c02      	adds	r2, r0, #0
 8010344:	801a      	strh	r2, [r3, #0]
 8010346:	2308      	movs	r3, #8
 8010348:	18fb      	adds	r3, r7, r3
 801034a:	1c0a      	adds	r2, r1, #0
 801034c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2241      	movs	r2, #65	@ 0x41
 8010352:	5c9b      	ldrb	r3, [r3, r2]
 8010354:	b2db      	uxtb	r3, r3
 8010356:	2b20      	cmp	r3, #32
 8010358:	d000      	beq.n	801035c <HAL_I2C_Master_Transmit+0x2c>
 801035a:	e0e7      	b.n	801052c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2240      	movs	r2, #64	@ 0x40
 8010360:	5c9b      	ldrb	r3, [r3, r2]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d101      	bne.n	801036a <HAL_I2C_Master_Transmit+0x3a>
 8010366:	2302      	movs	r3, #2
 8010368:	e0e1      	b.n	801052e <HAL_I2C_Master_Transmit+0x1fe>
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2240      	movs	r2, #64	@ 0x40
 801036e:	2101      	movs	r1, #1
 8010370:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010372:	f7fe fc7d 	bl	800ec70 <HAL_GetTick>
 8010376:	0003      	movs	r3, r0
 8010378:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801037a:	2380      	movs	r3, #128	@ 0x80
 801037c:	0219      	lsls	r1, r3, #8
 801037e:	68f8      	ldr	r0, [r7, #12]
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	9300      	str	r3, [sp, #0]
 8010384:	2319      	movs	r3, #25
 8010386:	2201      	movs	r2, #1
 8010388:	f001 ff98 	bl	80122bc <I2C_WaitOnFlagUntilTimeout>
 801038c:	1e03      	subs	r3, r0, #0
 801038e:	d001      	beq.n	8010394 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010390:	2301      	movs	r3, #1
 8010392:	e0cc      	b.n	801052e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2241      	movs	r2, #65	@ 0x41
 8010398:	2121      	movs	r1, #33	@ 0x21
 801039a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2242      	movs	r2, #66	@ 0x42
 80103a0:	2110      	movs	r1, #16
 80103a2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2208      	movs	r2, #8
 80103b4:	18ba      	adds	r2, r7, r2
 80103b6:	8812      	ldrh	r2, [r2, #0]
 80103b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	2bff      	cmp	r3, #255	@ 0xff
 80103c8:	d911      	bls.n	80103ee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	22ff      	movs	r2, #255	@ 0xff
 80103ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103d4:	b2da      	uxtb	r2, r3
 80103d6:	2380      	movs	r3, #128	@ 0x80
 80103d8:	045c      	lsls	r4, r3, #17
 80103da:	230a      	movs	r3, #10
 80103dc:	18fb      	adds	r3, r7, r3
 80103de:	8819      	ldrh	r1, [r3, #0]
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	4b55      	ldr	r3, [pc, #340]	@ (8010538 <HAL_I2C_Master_Transmit+0x208>)
 80103e4:	9300      	str	r3, [sp, #0]
 80103e6:	0023      	movs	r3, r4
 80103e8:	f002 f9ba 	bl	8012760 <I2C_TransferConfig>
 80103ec:	e075      	b.n	80104da <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	2380      	movs	r3, #128	@ 0x80
 8010400:	049c      	lsls	r4, r3, #18
 8010402:	230a      	movs	r3, #10
 8010404:	18fb      	adds	r3, r7, r3
 8010406:	8819      	ldrh	r1, [r3, #0]
 8010408:	68f8      	ldr	r0, [r7, #12]
 801040a:	4b4b      	ldr	r3, [pc, #300]	@ (8010538 <HAL_I2C_Master_Transmit+0x208>)
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	0023      	movs	r3, r4
 8010410:	f002 f9a6 	bl	8012760 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010414:	e061      	b.n	80104da <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010416:	697a      	ldr	r2, [r7, #20]
 8010418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	0018      	movs	r0, r3
 801041e:	f001 ff9b 	bl	8012358 <I2C_WaitOnTXISFlagUntilTimeout>
 8010422:	1e03      	subs	r3, r0, #0
 8010424:	d001      	beq.n	801042a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8010426:	2301      	movs	r3, #1
 8010428:	e081      	b.n	801052e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801042e:	781a      	ldrb	r2, [r3, #0]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801043a:	1c5a      	adds	r2, r3, #1
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010444:	b29b      	uxth	r3, r3
 8010446:	3b01      	subs	r3, #1
 8010448:	b29a      	uxth	r2, r3
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010452:	3b01      	subs	r3, #1
 8010454:	b29a      	uxth	r2, r3
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801045e:	b29b      	uxth	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	d03a      	beq.n	80104da <HAL_I2C_Master_Transmit+0x1aa>
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010468:	2b00      	cmp	r3, #0
 801046a:	d136      	bne.n	80104da <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801046c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	0013      	movs	r3, r2
 8010476:	2200      	movs	r2, #0
 8010478:	2180      	movs	r1, #128	@ 0x80
 801047a:	f001 ff1f 	bl	80122bc <I2C_WaitOnFlagUntilTimeout>
 801047e:	1e03      	subs	r3, r0, #0
 8010480:	d001      	beq.n	8010486 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8010482:	2301      	movs	r3, #1
 8010484:	e053      	b.n	801052e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801048a:	b29b      	uxth	r3, r3
 801048c:	2bff      	cmp	r3, #255	@ 0xff
 801048e:	d911      	bls.n	80104b4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	22ff      	movs	r2, #255	@ 0xff
 8010494:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801049a:	b2da      	uxtb	r2, r3
 801049c:	2380      	movs	r3, #128	@ 0x80
 801049e:	045c      	lsls	r4, r3, #17
 80104a0:	230a      	movs	r3, #10
 80104a2:	18fb      	adds	r3, r7, r3
 80104a4:	8819      	ldrh	r1, [r3, #0]
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	2300      	movs	r3, #0
 80104aa:	9300      	str	r3, [sp, #0]
 80104ac:	0023      	movs	r3, r4
 80104ae:	f002 f957 	bl	8012760 <I2C_TransferConfig>
 80104b2:	e012      	b.n	80104da <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	2380      	movs	r3, #128	@ 0x80
 80104c6:	049c      	lsls	r4, r3, #18
 80104c8:	230a      	movs	r3, #10
 80104ca:	18fb      	adds	r3, r7, r3
 80104cc:	8819      	ldrh	r1, [r3, #0]
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	2300      	movs	r3, #0
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	0023      	movs	r3, r4
 80104d6:	f002 f943 	bl	8012760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104de:	b29b      	uxth	r3, r3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d198      	bne.n	8010416 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80104e4:	697a      	ldr	r2, [r7, #20]
 80104e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	0018      	movs	r0, r3
 80104ec:	f001 ff7a 	bl	80123e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80104f0:	1e03      	subs	r3, r0, #0
 80104f2:	d001      	beq.n	80104f8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80104f4:	2301      	movs	r3, #1
 80104f6:	e01a      	b.n	801052e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2220      	movs	r2, #32
 80104fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	490c      	ldr	r1, [pc, #48]	@ (801053c <HAL_I2C_Master_Transmit+0x20c>)
 801050c:	400a      	ands	r2, r1
 801050e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2241      	movs	r2, #65	@ 0x41
 8010514:	2120      	movs	r1, #32
 8010516:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2242      	movs	r2, #66	@ 0x42
 801051c:	2100      	movs	r1, #0
 801051e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2240      	movs	r2, #64	@ 0x40
 8010524:	2100      	movs	r1, #0
 8010526:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010528:	2300      	movs	r3, #0
 801052a:	e000      	b.n	801052e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 801052c:	2302      	movs	r3, #2
  }
}
 801052e:	0018      	movs	r0, r3
 8010530:	46bd      	mov	sp, r7
 8010532:	b007      	add	sp, #28
 8010534:	bd90      	pop	{r4, r7, pc}
 8010536:	46c0      	nop			@ (mov r8, r8)
 8010538:	80002000 	.word	0x80002000
 801053c:	fe00e800 	.word	0xfe00e800

08010540 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010540:	b590      	push	{r4, r7, lr}
 8010542:	b089      	sub	sp, #36	@ 0x24
 8010544:	af02      	add	r7, sp, #8
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	0008      	movs	r0, r1
 801054a:	607a      	str	r2, [r7, #4]
 801054c:	0019      	movs	r1, r3
 801054e:	230a      	movs	r3, #10
 8010550:	18fb      	adds	r3, r7, r3
 8010552:	1c02      	adds	r2, r0, #0
 8010554:	801a      	strh	r2, [r3, #0]
 8010556:	2308      	movs	r3, #8
 8010558:	18fb      	adds	r3, r7, r3
 801055a:	1c0a      	adds	r2, r1, #0
 801055c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2241      	movs	r2, #65	@ 0x41
 8010562:	5c9b      	ldrb	r3, [r3, r2]
 8010564:	b2db      	uxtb	r3, r3
 8010566:	2b20      	cmp	r3, #32
 8010568:	d000      	beq.n	801056c <HAL_I2C_Master_Receive+0x2c>
 801056a:	e0e8      	b.n	801073e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2240      	movs	r2, #64	@ 0x40
 8010570:	5c9b      	ldrb	r3, [r3, r2]
 8010572:	2b01      	cmp	r3, #1
 8010574:	d101      	bne.n	801057a <HAL_I2C_Master_Receive+0x3a>
 8010576:	2302      	movs	r3, #2
 8010578:	e0e2      	b.n	8010740 <HAL_I2C_Master_Receive+0x200>
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2240      	movs	r2, #64	@ 0x40
 801057e:	2101      	movs	r1, #1
 8010580:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010582:	f7fe fb75 	bl	800ec70 <HAL_GetTick>
 8010586:	0003      	movs	r3, r0
 8010588:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801058a:	2380      	movs	r3, #128	@ 0x80
 801058c:	0219      	lsls	r1, r3, #8
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	2319      	movs	r3, #25
 8010596:	2201      	movs	r2, #1
 8010598:	f001 fe90 	bl	80122bc <I2C_WaitOnFlagUntilTimeout>
 801059c:	1e03      	subs	r3, r0, #0
 801059e:	d001      	beq.n	80105a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80105a0:	2301      	movs	r3, #1
 80105a2:	e0cd      	b.n	8010740 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2241      	movs	r2, #65	@ 0x41
 80105a8:	2122      	movs	r1, #34	@ 0x22
 80105aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2242      	movs	r2, #66	@ 0x42
 80105b0:	2110      	movs	r1, #16
 80105b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2200      	movs	r2, #0
 80105b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2208      	movs	r2, #8
 80105c4:	18ba      	adds	r2, r7, r2
 80105c6:	8812      	ldrh	r2, [r2, #0]
 80105c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2200      	movs	r2, #0
 80105ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	2bff      	cmp	r3, #255	@ 0xff
 80105d8:	d911      	bls.n	80105fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	22ff      	movs	r2, #255	@ 0xff
 80105de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105e4:	b2da      	uxtb	r2, r3
 80105e6:	2380      	movs	r3, #128	@ 0x80
 80105e8:	045c      	lsls	r4, r3, #17
 80105ea:	230a      	movs	r3, #10
 80105ec:	18fb      	adds	r3, r7, r3
 80105ee:	8819      	ldrh	r1, [r3, #0]
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	4b55      	ldr	r3, [pc, #340]	@ (8010748 <HAL_I2C_Master_Receive+0x208>)
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	0023      	movs	r3, r4
 80105f8:	f002 f8b2 	bl	8012760 <I2C_TransferConfig>
 80105fc:	e076      	b.n	80106ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010602:	b29a      	uxth	r2, r3
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801060c:	b2da      	uxtb	r2, r3
 801060e:	2380      	movs	r3, #128	@ 0x80
 8010610:	049c      	lsls	r4, r3, #18
 8010612:	230a      	movs	r3, #10
 8010614:	18fb      	adds	r3, r7, r3
 8010616:	8819      	ldrh	r1, [r3, #0]
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	4b4b      	ldr	r3, [pc, #300]	@ (8010748 <HAL_I2C_Master_Receive+0x208>)
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	0023      	movs	r3, r4
 8010620:	f002 f89e 	bl	8012760 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010624:	e062      	b.n	80106ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	0018      	movs	r0, r3
 801062e:	f001 ff1d 	bl	801246c <I2C_WaitOnRXNEFlagUntilTimeout>
 8010632:	1e03      	subs	r3, r0, #0
 8010634:	d001      	beq.n	801063a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8010636:	2301      	movs	r3, #1
 8010638:	e082      	b.n	8010740 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010644:	b2d2      	uxtb	r2, r2
 8010646:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801064c:	1c5a      	adds	r2, r3, #1
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010656:	3b01      	subs	r3, #1
 8010658:	b29a      	uxth	r2, r3
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010662:	b29b      	uxth	r3, r3
 8010664:	3b01      	subs	r3, #1
 8010666:	b29a      	uxth	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010670:	b29b      	uxth	r3, r3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d03a      	beq.n	80106ec <HAL_I2C_Master_Receive+0x1ac>
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801067a:	2b00      	cmp	r3, #0
 801067c:	d136      	bne.n	80106ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801067e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	0013      	movs	r3, r2
 8010688:	2200      	movs	r2, #0
 801068a:	2180      	movs	r1, #128	@ 0x80
 801068c:	f001 fe16 	bl	80122bc <I2C_WaitOnFlagUntilTimeout>
 8010690:	1e03      	subs	r3, r0, #0
 8010692:	d001      	beq.n	8010698 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010694:	2301      	movs	r3, #1
 8010696:	e053      	b.n	8010740 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801069c:	b29b      	uxth	r3, r3
 801069e:	2bff      	cmp	r3, #255	@ 0xff
 80106a0:	d911      	bls.n	80106c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	22ff      	movs	r2, #255	@ 0xff
 80106a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106ac:	b2da      	uxtb	r2, r3
 80106ae:	2380      	movs	r3, #128	@ 0x80
 80106b0:	045c      	lsls	r4, r3, #17
 80106b2:	230a      	movs	r3, #10
 80106b4:	18fb      	adds	r3, r7, r3
 80106b6:	8819      	ldrh	r1, [r3, #0]
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	2300      	movs	r3, #0
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	0023      	movs	r3, r4
 80106c0:	f002 f84e 	bl	8012760 <I2C_TransferConfig>
 80106c4:	e012      	b.n	80106ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106ca:	b29a      	uxth	r2, r3
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106d4:	b2da      	uxtb	r2, r3
 80106d6:	2380      	movs	r3, #128	@ 0x80
 80106d8:	049c      	lsls	r4, r3, #18
 80106da:	230a      	movs	r3, #10
 80106dc:	18fb      	adds	r3, r7, r3
 80106de:	8819      	ldrh	r1, [r3, #0]
 80106e0:	68f8      	ldr	r0, [r7, #12]
 80106e2:	2300      	movs	r3, #0
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	0023      	movs	r3, r4
 80106e8:	f002 f83a 	bl	8012760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d197      	bne.n	8010626 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	0018      	movs	r0, r3
 80106fe:	f001 fe71 	bl	80123e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010702:	1e03      	subs	r3, r0, #0
 8010704:	d001      	beq.n	801070a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	e01a      	b.n	8010740 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2220      	movs	r2, #32
 8010710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	685a      	ldr	r2, [r3, #4]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	490b      	ldr	r1, [pc, #44]	@ (801074c <HAL_I2C_Master_Receive+0x20c>)
 801071e:	400a      	ands	r2, r1
 8010720:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2241      	movs	r2, #65	@ 0x41
 8010726:	2120      	movs	r1, #32
 8010728:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2242      	movs	r2, #66	@ 0x42
 801072e:	2100      	movs	r1, #0
 8010730:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2240      	movs	r2, #64	@ 0x40
 8010736:	2100      	movs	r1, #0
 8010738:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801073a:	2300      	movs	r3, #0
 801073c:	e000      	b.n	8010740 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801073e:	2302      	movs	r3, #2
  }
}
 8010740:	0018      	movs	r0, r3
 8010742:	46bd      	mov	sp, r7
 8010744:	b007      	add	sp, #28
 8010746:	bd90      	pop	{r4, r7, pc}
 8010748:	80002400 	.word	0x80002400
 801074c:	fe00e800 	.word	0xfe00e800

08010750 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010750:	b5b0      	push	{r4, r5, r7, lr}
 8010752:	b088      	sub	sp, #32
 8010754:	af02      	add	r7, sp, #8
 8010756:	60f8      	str	r0, [r7, #12]
 8010758:	0008      	movs	r0, r1
 801075a:	607a      	str	r2, [r7, #4]
 801075c:	0019      	movs	r1, r3
 801075e:	230a      	movs	r3, #10
 8010760:	18fb      	adds	r3, r7, r3
 8010762:	1c02      	adds	r2, r0, #0
 8010764:	801a      	strh	r2, [r3, #0]
 8010766:	2308      	movs	r3, #8
 8010768:	18fb      	adds	r3, r7, r3
 801076a:	1c0a      	adds	r2, r1, #0
 801076c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2241      	movs	r2, #65	@ 0x41
 8010772:	5c9b      	ldrb	r3, [r3, r2]
 8010774:	b2db      	uxtb	r3, r3
 8010776:	2b20      	cmp	r3, #32
 8010778:	d000      	beq.n	801077c <HAL_I2C_Master_Transmit_DMA+0x2c>
 801077a:	e0dd      	b.n	8010938 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	699a      	ldr	r2, [r3, #24]
 8010782:	2380      	movs	r3, #128	@ 0x80
 8010784:	021b      	lsls	r3, r3, #8
 8010786:	401a      	ands	r2, r3
 8010788:	2380      	movs	r3, #128	@ 0x80
 801078a:	021b      	lsls	r3, r3, #8
 801078c:	429a      	cmp	r2, r3
 801078e:	d101      	bne.n	8010794 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010790:	2302      	movs	r3, #2
 8010792:	e0d2      	b.n	801093a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2240      	movs	r2, #64	@ 0x40
 8010798:	5c9b      	ldrb	r3, [r3, r2]
 801079a:	2b01      	cmp	r3, #1
 801079c:	d101      	bne.n	80107a2 <HAL_I2C_Master_Transmit_DMA+0x52>
 801079e:	2302      	movs	r3, #2
 80107a0:	e0cb      	b.n	801093a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2240      	movs	r2, #64	@ 0x40
 80107a6:	2101      	movs	r1, #1
 80107a8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2241      	movs	r2, #65	@ 0x41
 80107ae:	2121      	movs	r1, #33	@ 0x21
 80107b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2242      	movs	r2, #66	@ 0x42
 80107b6:	2110      	movs	r1, #16
 80107b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2208      	movs	r2, #8
 80107ca:	18ba      	adds	r2, r7, r2
 80107cc:	8812      	ldrh	r2, [r2, #0]
 80107ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	4a5c      	ldr	r2, [pc, #368]	@ (8010944 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80107d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	4a5b      	ldr	r2, [pc, #364]	@ (8010948 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80107da:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	2bff      	cmp	r3, #255	@ 0xff
 80107e4:	d906      	bls.n	80107f4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	22ff      	movs	r2, #255	@ 0xff
 80107ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80107ec:	2380      	movs	r3, #128	@ 0x80
 80107ee:	045b      	lsls	r3, r3, #17
 80107f0:	617b      	str	r3, [r7, #20]
 80107f2:	e007      	b.n	8010804 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80107fe:	2380      	movs	r3, #128	@ 0x80
 8010800:	049b      	lsls	r3, r3, #18
 8010802:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010808:	2b00      	cmp	r3, #0
 801080a:	d100      	bne.n	801080e <HAL_I2C_Master_Transmit_DMA+0xbe>
 801080c:	e078      	b.n	8010900 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010812:	2b00      	cmp	r3, #0
 8010814:	d023      	beq.n	801085e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801081a:	4a4c      	ldr	r2, [pc, #304]	@ (801094c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 801081c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010822:	4a4b      	ldr	r2, [pc, #300]	@ (8010950 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010824:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801082a:	2200      	movs	r2, #0
 801082c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010832:	2200      	movs	r2, #0
 8010834:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801083a:	6879      	ldr	r1, [r7, #4]
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	3328      	adds	r3, #40	@ 0x28
 8010842:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010848:	2513      	movs	r5, #19
 801084a:	197c      	adds	r4, r7, r5
 801084c:	f7fe ff62 	bl	800f714 <HAL_DMA_Start_IT>
 8010850:	0003      	movs	r3, r0
 8010852:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010854:	197b      	adds	r3, r7, r5
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d13d      	bne.n	80108d8 <HAL_I2C_Master_Transmit_DMA+0x188>
 801085c:	e013      	b.n	8010886 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2241      	movs	r2, #65	@ 0x41
 8010862:	2120      	movs	r1, #32
 8010864:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2242      	movs	r2, #66	@ 0x42
 801086a:	2100      	movs	r1, #0
 801086c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010872:	2280      	movs	r2, #128	@ 0x80
 8010874:	431a      	orrs	r2, r3
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2240      	movs	r2, #64	@ 0x40
 801087e:	2100      	movs	r1, #0
 8010880:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010882:	2301      	movs	r3, #1
 8010884:	e059      	b.n	801093a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801088a:	b2da      	uxtb	r2, r3
 801088c:	697c      	ldr	r4, [r7, #20]
 801088e:	230a      	movs	r3, #10
 8010890:	18fb      	adds	r3, r7, r3
 8010892:	8819      	ldrh	r1, [r3, #0]
 8010894:	68f8      	ldr	r0, [r7, #12]
 8010896:	4b2f      	ldr	r3, [pc, #188]	@ (8010954 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	0023      	movs	r3, r4
 801089c:	f001 ff60 	bl	8012760 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2240      	movs	r2, #64	@ 0x40
 80108b6:	2100      	movs	r1, #0
 80108b8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2110      	movs	r1, #16
 80108be:	0018      	movs	r0, r3
 80108c0:	f001 ff88 	bl	80127d4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2180      	movs	r1, #128	@ 0x80
 80108d0:	01c9      	lsls	r1, r1, #7
 80108d2:	430a      	orrs	r2, r1
 80108d4:	601a      	str	r2, [r3, #0]
 80108d6:	e02d      	b.n	8010934 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2241      	movs	r2, #65	@ 0x41
 80108dc:	2120      	movs	r1, #32
 80108de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2242      	movs	r2, #66	@ 0x42
 80108e4:	2100      	movs	r1, #0
 80108e6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108ec:	2210      	movs	r2, #16
 80108ee:	431a      	orrs	r2, r3
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2240      	movs	r2, #64	@ 0x40
 80108f8:	2100      	movs	r1, #0
 80108fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80108fc:	2301      	movs	r3, #1
 80108fe:	e01c      	b.n	801093a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	4a15      	ldr	r2, [pc, #84]	@ (8010958 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010904:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801090a:	b2da      	uxtb	r2, r3
 801090c:	2380      	movs	r3, #128	@ 0x80
 801090e:	049c      	lsls	r4, r3, #18
 8010910:	230a      	movs	r3, #10
 8010912:	18fb      	adds	r3, r7, r3
 8010914:	8819      	ldrh	r1, [r3, #0]
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	4b0e      	ldr	r3, [pc, #56]	@ (8010954 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	0023      	movs	r3, r4
 801091e:	f001 ff1f 	bl	8012760 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2240      	movs	r2, #64	@ 0x40
 8010926:	2100      	movs	r1, #0
 8010928:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2101      	movs	r1, #1
 801092e:	0018      	movs	r0, r3
 8010930:	f001 ff50 	bl	80127d4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010934:	2300      	movs	r3, #0
 8010936:	e000      	b.n	801093a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010938:	2302      	movs	r3, #2
  }
}
 801093a:	0018      	movs	r0, r3
 801093c:	46bd      	mov	sp, r7
 801093e:	b006      	add	sp, #24
 8010940:	bdb0      	pop	{r4, r5, r7, pc}
 8010942:	46c0      	nop			@ (mov r8, r8)
 8010944:	ffff0000 	.word	0xffff0000
 8010948:	08011155 	.word	0x08011155
 801094c:	0801210d 	.word	0x0801210d
 8010950:	0801224d 	.word	0x0801224d
 8010954:	80002000 	.word	0x80002000
 8010958:	08010d01 	.word	0x08010d01

0801095c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 801095c:	b5b0      	push	{r4, r5, r7, lr}
 801095e:	b088      	sub	sp, #32
 8010960:	af02      	add	r7, sp, #8
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	0008      	movs	r0, r1
 8010966:	607a      	str	r2, [r7, #4]
 8010968:	0019      	movs	r1, r3
 801096a:	230a      	movs	r3, #10
 801096c:	18fb      	adds	r3, r7, r3
 801096e:	1c02      	adds	r2, r0, #0
 8010970:	801a      	strh	r2, [r3, #0]
 8010972:	2308      	movs	r3, #8
 8010974:	18fb      	adds	r3, r7, r3
 8010976:	1c0a      	adds	r2, r1, #0
 8010978:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2241      	movs	r2, #65	@ 0x41
 801097e:	5c9b      	ldrb	r3, [r3, r2]
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b20      	cmp	r3, #32
 8010984:	d000      	beq.n	8010988 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010986:	e0dd      	b.n	8010b44 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	699a      	ldr	r2, [r3, #24]
 801098e:	2380      	movs	r3, #128	@ 0x80
 8010990:	021b      	lsls	r3, r3, #8
 8010992:	401a      	ands	r2, r3
 8010994:	2380      	movs	r3, #128	@ 0x80
 8010996:	021b      	lsls	r3, r3, #8
 8010998:	429a      	cmp	r2, r3
 801099a:	d101      	bne.n	80109a0 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 801099c:	2302      	movs	r3, #2
 801099e:	e0d2      	b.n	8010b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2240      	movs	r2, #64	@ 0x40
 80109a4:	5c9b      	ldrb	r3, [r3, r2]
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d101      	bne.n	80109ae <HAL_I2C_Master_Receive_DMA+0x52>
 80109aa:	2302      	movs	r3, #2
 80109ac:	e0cb      	b.n	8010b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2240      	movs	r2, #64	@ 0x40
 80109b2:	2101      	movs	r1, #1
 80109b4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2241      	movs	r2, #65	@ 0x41
 80109ba:	2122      	movs	r1, #34	@ 0x22
 80109bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2242      	movs	r2, #66	@ 0x42
 80109c2:	2110      	movs	r1, #16
 80109c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2208      	movs	r2, #8
 80109d6:	18ba      	adds	r2, r7, r2
 80109d8:	8812      	ldrh	r2, [r2, #0]
 80109da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	4a5c      	ldr	r2, [pc, #368]	@ (8010b50 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80109e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	4a5b      	ldr	r2, [pc, #364]	@ (8010b54 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80109e6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	2bff      	cmp	r3, #255	@ 0xff
 80109f0:	d906      	bls.n	8010a00 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	22ff      	movs	r2, #255	@ 0xff
 80109f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80109f8:	2380      	movs	r3, #128	@ 0x80
 80109fa:	045b      	lsls	r3, r3, #17
 80109fc:	617b      	str	r3, [r7, #20]
 80109fe:	e007      	b.n	8010a10 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010a0a:	2380      	movs	r3, #128	@ 0x80
 8010a0c:	049b      	lsls	r3, r3, #18
 8010a0e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d100      	bne.n	8010a1a <HAL_I2C_Master_Receive_DMA+0xbe>
 8010a18:	e078      	b.n	8010b0c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d023      	beq.n	8010a6a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a26:	4a4c      	ldr	r2, [pc, #304]	@ (8010b58 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010a28:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8010b5c <HAL_I2C_Master_Receive_DMA+0x200>)
 8010a30:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a36:	2200      	movs	r2, #0
 8010a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a3e:	2200      	movs	r2, #0
 8010a40:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3324      	adds	r3, #36	@ 0x24
 8010a4c:	0019      	movs	r1, r3
 8010a4e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010a54:	2513      	movs	r5, #19
 8010a56:	197c      	adds	r4, r7, r5
 8010a58:	f7fe fe5c 	bl	800f714 <HAL_DMA_Start_IT>
 8010a5c:	0003      	movs	r3, r0
 8010a5e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010a60:	197b      	adds	r3, r7, r5
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d13d      	bne.n	8010ae4 <HAL_I2C_Master_Receive_DMA+0x188>
 8010a68:	e013      	b.n	8010a92 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2241      	movs	r2, #65	@ 0x41
 8010a6e:	2120      	movs	r1, #32
 8010a70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2242      	movs	r2, #66	@ 0x42
 8010a76:	2100      	movs	r1, #0
 8010a78:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a7e:	2280      	movs	r2, #128	@ 0x80
 8010a80:	431a      	orrs	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2240      	movs	r2, #64	@ 0x40
 8010a8a:	2100      	movs	r1, #0
 8010a8c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e059      	b.n	8010b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	697c      	ldr	r4, [r7, #20]
 8010a9a:	230a      	movs	r3, #10
 8010a9c:	18fb      	adds	r3, r7, r3
 8010a9e:	8819      	ldrh	r1, [r3, #0]
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8010b60 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010aa4:	9300      	str	r3, [sp, #0]
 8010aa6:	0023      	movs	r3, r4
 8010aa8:	f001 fe5a 	bl	8012760 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ab6:	1ad3      	subs	r3, r2, r3
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	2240      	movs	r2, #64	@ 0x40
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2110      	movs	r1, #16
 8010aca:	0018      	movs	r0, r3
 8010acc:	f001 fe82 	bl	80127d4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2180      	movs	r1, #128	@ 0x80
 8010adc:	0209      	lsls	r1, r1, #8
 8010ade:	430a      	orrs	r2, r1
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	e02d      	b.n	8010b40 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2241      	movs	r2, #65	@ 0x41
 8010ae8:	2120      	movs	r1, #32
 8010aea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2242      	movs	r2, #66	@ 0x42
 8010af0:	2100      	movs	r1, #0
 8010af2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010af8:	2210      	movs	r2, #16
 8010afa:	431a      	orrs	r2, r3
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2240      	movs	r2, #64	@ 0x40
 8010b04:	2100      	movs	r1, #0
 8010b06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e01c      	b.n	8010b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	4a15      	ldr	r2, [pc, #84]	@ (8010b64 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	2380      	movs	r3, #128	@ 0x80
 8010b1a:	049c      	lsls	r4, r3, #18
 8010b1c:	230a      	movs	r3, #10
 8010b1e:	18fb      	adds	r3, r7, r3
 8010b20:	8819      	ldrh	r1, [r3, #0]
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	4b0e      	ldr	r3, [pc, #56]	@ (8010b60 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	0023      	movs	r3, r4
 8010b2a:	f001 fe19 	bl	8012760 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2240      	movs	r2, #64	@ 0x40
 8010b32:	2100      	movs	r1, #0
 8010b34:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2101      	movs	r1, #1
 8010b3a:	0018      	movs	r0, r3
 8010b3c:	f001 fe4a 	bl	80127d4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010b40:	2300      	movs	r3, #0
 8010b42:	e000      	b.n	8010b46 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010b44:	2302      	movs	r3, #2
  }
}
 8010b46:	0018      	movs	r0, r3
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	b006      	add	sp, #24
 8010b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b4e:	46c0      	nop			@ (mov r8, r8)
 8010b50:	ffff0000 	.word	0xffff0000
 8010b54:	08011155 	.word	0x08011155
 8010b58:	080121ad 	.word	0x080121ad
 8010b5c:	0801224d 	.word	0x0801224d
 8010b60:	80002400 	.word	0x80002400
 8010b64:	08010d01 	.word	0x08010d01

08010b68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	699b      	ldr	r3, [r3, #24]
 8010b76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d005      	beq.n	8010b94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	68f9      	ldr	r1, [r7, #12]
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	4798      	blx	r3
  }
}
 8010b94:	46c0      	nop			@ (mov r8, r8)
 8010b96:	46bd      	mov	sp, r7
 8010b98:	b004      	add	sp, #16
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	699b      	ldr	r3, [r3, #24]
 8010baa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010bb4:	697a      	ldr	r2, [r7, #20]
 8010bb6:	2380      	movs	r3, #128	@ 0x80
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	4013      	ands	r3, r2
 8010bbc:	d00e      	beq.n	8010bdc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	2280      	movs	r2, #128	@ 0x80
 8010bc2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010bc4:	d00a      	beq.n	8010bdc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bca:	2201      	movs	r2, #1
 8010bcc:	431a      	orrs	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2280      	movs	r2, #128	@ 0x80
 8010bd8:	0052      	lsls	r2, r2, #1
 8010bda:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010bdc:	697a      	ldr	r2, [r7, #20]
 8010bde:	2380      	movs	r3, #128	@ 0x80
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	4013      	ands	r3, r2
 8010be4:	d00e      	beq.n	8010c04 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	2280      	movs	r2, #128	@ 0x80
 8010bea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010bec:	d00a      	beq.n	8010c04 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bf2:	2208      	movs	r2, #8
 8010bf4:	431a      	orrs	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2280      	movs	r2, #128	@ 0x80
 8010c00:	00d2      	lsls	r2, r2, #3
 8010c02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010c04:	697a      	ldr	r2, [r7, #20]
 8010c06:	2380      	movs	r3, #128	@ 0x80
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4013      	ands	r3, r2
 8010c0c:	d00e      	beq.n	8010c2c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	2280      	movs	r2, #128	@ 0x80
 8010c12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010c14:	d00a      	beq.n	8010c2c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c1a:	2202      	movs	r2, #2
 8010c1c:	431a      	orrs	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2280      	movs	r2, #128	@ 0x80
 8010c28:	0092      	lsls	r2, r2, #2
 8010c2a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c30:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	220b      	movs	r2, #11
 8010c36:	4013      	ands	r3, r2
 8010c38:	d005      	beq.n	8010c46 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	0011      	movs	r1, r2
 8010c40:	0018      	movs	r0, r3
 8010c42:	f001 f915 	bl	8011e70 <I2C_ITError>
  }
}
 8010c46:	46c0      	nop			@ (mov r8, r8)
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	b006      	add	sp, #24
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b082      	sub	sp, #8
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010c56:	46c0      	nop			@ (mov r8, r8)
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	b002      	add	sp, #8
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b082      	sub	sp, #8
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010c66:	46c0      	nop			@ (mov r8, r8)
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	b002      	add	sp, #8
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b082      	sub	sp, #8
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010c76:	46c0      	nop			@ (mov r8, r8)
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	b002      	add	sp, #8
 8010c7c:	bd80      	pop	{r7, pc}

08010c7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b082      	sub	sp, #8
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010c86:	46c0      	nop			@ (mov r8, r8)
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	b002      	add	sp, #8
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b082      	sub	sp, #8
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
 8010c96:	0008      	movs	r0, r1
 8010c98:	0011      	movs	r1, r2
 8010c9a:	1cfb      	adds	r3, r7, #3
 8010c9c:	1c02      	adds	r2, r0, #0
 8010c9e:	701a      	strb	r2, [r3, #0]
 8010ca0:	003b      	movs	r3, r7
 8010ca2:	1c0a      	adds	r2, r1, #0
 8010ca4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010ca6:	46c0      	nop			@ (mov r8, r8)
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	b002      	add	sp, #8
 8010cac:	bd80      	pop	{r7, pc}

08010cae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b082      	sub	sp, #8
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010cb6:	46c0      	nop			@ (mov r8, r8)
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	b002      	add	sp, #8
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b082      	sub	sp, #8
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010cc6:	46c0      	nop			@ (mov r8, r8)
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	b002      	add	sp, #8
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010cd6:	46c0      	nop			@ (mov r8, r8)
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	b002      	add	sp, #8
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010ce6:	46c0      	nop			@ (mov r8, r8)
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	b002      	add	sp, #8
 8010cec:	bd80      	pop	{r7, pc}

08010cee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cee:	b580      	push	{r7, lr}
 8010cf0:	b082      	sub	sp, #8
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010cf6:	46c0      	nop			@ (mov r8, r8)
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	b002      	add	sp, #8
 8010cfc:	bd80      	pop	{r7, pc}
	...

08010d00 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010d00:	b590      	push	{r4, r7, lr}
 8010d02:	b089      	sub	sp, #36	@ 0x24
 8010d04:	af02      	add	r7, sp, #8
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2240      	movs	r2, #64	@ 0x40
 8010d14:	5c9b      	ldrb	r3, [r3, r2]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d101      	bne.n	8010d1e <I2C_Master_ISR_IT+0x1e>
 8010d1a:	2302      	movs	r3, #2
 8010d1c:	e113      	b.n	8010f46 <I2C_Master_ISR_IT+0x246>
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2240      	movs	r2, #64	@ 0x40
 8010d22:	2101      	movs	r1, #1
 8010d24:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	2210      	movs	r2, #16
 8010d2a:	4013      	ands	r3, r2
 8010d2c:	d012      	beq.n	8010d54 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2210      	movs	r2, #16
 8010d32:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010d34:	d00e      	beq.n	8010d54 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2210      	movs	r2, #16
 8010d3c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d42:	2204      	movs	r2, #4
 8010d44:	431a      	orrs	r2, r3
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	0018      	movs	r0, r3
 8010d4e:	f001 f9ba 	bl	80120c6 <I2C_Flush_TXDR>
 8010d52:	e0e5      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	2204      	movs	r2, #4
 8010d58:	4013      	ands	r3, r2
 8010d5a:	d021      	beq.n	8010da0 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2204      	movs	r2, #4
 8010d60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010d62:	d01d      	beq.n	8010da0 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	2204      	movs	r2, #4
 8010d68:	4393      	bics	r3, r2
 8010d6a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d76:	b2d2      	uxtb	r2, r2
 8010d78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d7e:	1c5a      	adds	r2, r3, #1
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	3b01      	subs	r3, #1
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010d9e:	e0bf      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	2202      	movs	r2, #2
 8010da4:	4013      	ands	r3, r2
 8010da6:	d01c      	beq.n	8010de2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010dae:	d018      	beq.n	8010de2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010db4:	781a      	ldrb	r2, [r3, #0]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc0:	1c5a      	adds	r2, r3, #1
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010de0:	e09e      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	2280      	movs	r2, #128	@ 0x80
 8010de6:	4013      	ands	r3, r2
 8010de8:	d100      	bne.n	8010dec <I2C_Master_ISR_IT+0xec>
 8010dea:	e069      	b.n	8010ec0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2240      	movs	r2, #64	@ 0x40
 8010df0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010df2:	d065      	beq.n	8010ec0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d04a      	beq.n	8010e94 <I2C_Master_ISR_IT+0x194>
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d146      	bne.n	8010e94 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	2112      	movs	r1, #18
 8010e10:	187b      	adds	r3, r7, r1
 8010e12:	0592      	lsls	r2, r2, #22
 8010e14:	0d92      	lsrs	r2, r2, #22
 8010e16:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	2bff      	cmp	r3, #255	@ 0xff
 8010e20:	d910      	bls.n	8010e44 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	22ff      	movs	r2, #255	@ 0xff
 8010e26:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	2380      	movs	r3, #128	@ 0x80
 8010e30:	045c      	lsls	r4, r3, #17
 8010e32:	187b      	adds	r3, r7, r1
 8010e34:	8819      	ldrh	r1, [r3, #0]
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	2300      	movs	r3, #0
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	0023      	movs	r3, r4
 8010e3e:	f001 fc8f 	bl	8012760 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e42:	e03c      	b.n	8010ebe <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e52:	4a3f      	ldr	r2, [pc, #252]	@ (8010f50 <I2C_Master_ISR_IT+0x250>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d00e      	beq.n	8010e76 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e5c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010e62:	2312      	movs	r3, #18
 8010e64:	18fb      	adds	r3, r7, r3
 8010e66:	8819      	ldrh	r1, [r3, #0]
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	9300      	str	r3, [sp, #0]
 8010e6e:	0023      	movs	r3, r4
 8010e70:	f001 fc76 	bl	8012760 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e74:	e023      	b.n	8010ebe <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	2380      	movs	r3, #128	@ 0x80
 8010e7e:	049c      	lsls	r4, r3, #18
 8010e80:	2312      	movs	r3, #18
 8010e82:	18fb      	adds	r3, r7, r3
 8010e84:	8819      	ldrh	r1, [r3, #0]
 8010e86:	68f8      	ldr	r0, [r7, #12]
 8010e88:	2300      	movs	r3, #0
 8010e8a:	9300      	str	r3, [sp, #0]
 8010e8c:	0023      	movs	r3, r4
 8010e8e:	f001 fc67 	bl	8012760 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e92:	e014      	b.n	8010ebe <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	2380      	movs	r3, #128	@ 0x80
 8010e9c:	049b      	lsls	r3, r3, #18
 8010e9e:	401a      	ands	r2, r3
 8010ea0:	2380      	movs	r3, #128	@ 0x80
 8010ea2:	049b      	lsls	r3, r3, #18
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d004      	beq.n	8010eb2 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	0018      	movs	r0, r3
 8010eac:	f000 fcf4 	bl	8011898 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010eb0:	e036      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2140      	movs	r1, #64	@ 0x40
 8010eb6:	0018      	movs	r0, r3
 8010eb8:	f000 ffda 	bl	8011e70 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010ebc:	e030      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
 8010ebe:	e02f      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	2240      	movs	r2, #64	@ 0x40
 8010ec4:	4013      	ands	r3, r2
 8010ec6:	d02b      	beq.n	8010f20 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2240      	movs	r2, #64	@ 0x40
 8010ecc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010ece:	d027      	beq.n	8010f20 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d11d      	bne.n	8010f16 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	685a      	ldr	r2, [r3, #4]
 8010ee0:	2380      	movs	r3, #128	@ 0x80
 8010ee2:	049b      	lsls	r3, r3, #18
 8010ee4:	401a      	ands	r2, r3
 8010ee6:	2380      	movs	r3, #128	@ 0x80
 8010ee8:	049b      	lsls	r3, r3, #18
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d018      	beq.n	8010f20 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef2:	4a17      	ldr	r2, [pc, #92]	@ (8010f50 <I2C_Master_ISR_IT+0x250>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d109      	bne.n	8010f0c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	685a      	ldr	r2, [r3, #4]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2180      	movs	r1, #128	@ 0x80
 8010f04:	01c9      	lsls	r1, r1, #7
 8010f06:	430a      	orrs	r2, r1
 8010f08:	605a      	str	r2, [r3, #4]
 8010f0a:	e009      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	0018      	movs	r0, r3
 8010f10:	f000 fcc2 	bl	8011898 <I2C_ITMasterSeqCplt>
 8010f14:	e004      	b.n	8010f20 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2140      	movs	r1, #64	@ 0x40
 8010f1a:	0018      	movs	r0, r3
 8010f1c:	f000 ffa8 	bl	8011e70 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	2220      	movs	r2, #32
 8010f24:	4013      	ands	r3, r2
 8010f26:	d009      	beq.n	8010f3c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2220      	movs	r2, #32
 8010f2c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f2e:	d005      	beq.n	8010f3c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010f30:	697a      	ldr	r2, [r7, #20]
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	0011      	movs	r1, r2
 8010f36:	0018      	movs	r0, r3
 8010f38:	f000 fd54 	bl	80119e4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2240      	movs	r2, #64	@ 0x40
 8010f40:	2100      	movs	r1, #0
 8010f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	0018      	movs	r0, r3
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	b007      	add	sp, #28
 8010f4c:	bd90      	pop	{r4, r7, pc}
 8010f4e:	46c0      	nop			@ (mov r8, r8)
 8010f50:	ffff0000 	.word	0xffff0000

08010f54 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b086      	sub	sp, #24
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f64:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2240      	movs	r2, #64	@ 0x40
 8010f6e:	5c9b      	ldrb	r3, [r3, r2]
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d101      	bne.n	8010f78 <I2C_Slave_ISR_IT+0x24>
 8010f74:	2302      	movs	r3, #2
 8010f76:	e0e6      	b.n	8011146 <I2C_Slave_ISR_IT+0x1f2>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2240      	movs	r2, #64	@ 0x40
 8010f7c:	2101      	movs	r1, #1
 8010f7e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	2220      	movs	r2, #32
 8010f84:	4013      	ands	r3, r2
 8010f86:	d009      	beq.n	8010f9c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2220      	movs	r2, #32
 8010f8c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f8e:	d005      	beq.n	8010f9c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8010f90:	693a      	ldr	r2, [r7, #16]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	0011      	movs	r1, r2
 8010f96:	0018      	movs	r0, r3
 8010f98:	f000 fdf2 	bl	8011b80 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	2210      	movs	r2, #16
 8010fa0:	4013      	ands	r3, r2
 8010fa2:	d052      	beq.n	801104a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2210      	movs	r2, #16
 8010fa8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010faa:	d04e      	beq.n	801104a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d12d      	bne.n	8011012 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2241      	movs	r2, #65	@ 0x41
 8010fba:	5c9b      	ldrb	r3, [r3, r2]
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	2b28      	cmp	r3, #40	@ 0x28
 8010fc0:	d10b      	bne.n	8010fda <I2C_Slave_ISR_IT+0x86>
 8010fc2:	697a      	ldr	r2, [r7, #20]
 8010fc4:	2380      	movs	r3, #128	@ 0x80
 8010fc6:	049b      	lsls	r3, r3, #18
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d106      	bne.n	8010fda <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010fcc:	693a      	ldr	r2, [r7, #16]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	0011      	movs	r1, r2
 8010fd2:	0018      	movs	r0, r3
 8010fd4:	f000 fef4 	bl	8011dc0 <I2C_ITListenCplt>
 8010fd8:	e036      	b.n	8011048 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2241      	movs	r2, #65	@ 0x41
 8010fde:	5c9b      	ldrb	r3, [r3, r2]
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	2b29      	cmp	r3, #41	@ 0x29
 8010fe4:	d110      	bne.n	8011008 <I2C_Slave_ISR_IT+0xb4>
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	4a59      	ldr	r2, [pc, #356]	@ (8011150 <I2C_Slave_ISR_IT+0x1fc>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d00c      	beq.n	8011008 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2210      	movs	r2, #16
 8010ff4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	0018      	movs	r0, r3
 8010ffa:	f001 f864 	bl	80120c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	0018      	movs	r0, r3
 8011002:	f000 fc8b 	bl	801191c <I2C_ITSlaveSeqCplt>
 8011006:	e01f      	b.n	8011048 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2210      	movs	r2, #16
 801100e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011010:	e091      	b.n	8011136 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2210      	movs	r2, #16
 8011018:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801101e:	2204      	movs	r2, #4
 8011020:	431a      	orrs	r2, r3
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <I2C_Slave_ISR_IT+0xe4>
 801102c:	697a      	ldr	r2, [r7, #20]
 801102e:	2380      	movs	r3, #128	@ 0x80
 8011030:	045b      	lsls	r3, r3, #17
 8011032:	429a      	cmp	r2, r3
 8011034:	d000      	beq.n	8011038 <I2C_Slave_ISR_IT+0xe4>
 8011036:	e07e      	b.n	8011136 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	0011      	movs	r1, r2
 8011040:	0018      	movs	r0, r3
 8011042:	f000 ff15 	bl	8011e70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011046:	e076      	b.n	8011136 <I2C_Slave_ISR_IT+0x1e2>
 8011048:	e075      	b.n	8011136 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	2204      	movs	r2, #4
 801104e:	4013      	ands	r3, r2
 8011050:	d02f      	beq.n	80110b2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2204      	movs	r2, #4
 8011056:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011058:	d02b      	beq.n	80110b2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801105e:	b29b      	uxth	r3, r3
 8011060:	2b00      	cmp	r3, #0
 8011062:	d018      	beq.n	8011096 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801106e:	b2d2      	uxtb	r2, r2
 8011070:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011076:	1c5a      	adds	r2, r3, #1
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011080:	3b01      	subs	r3, #1
 8011082:	b29a      	uxth	r2, r3
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801108c:	b29b      	uxth	r3, r3
 801108e:	3b01      	subs	r3, #1
 8011090:	b29a      	uxth	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801109a:	b29b      	uxth	r3, r3
 801109c:	2b00      	cmp	r3, #0
 801109e:	d14c      	bne.n	801113a <I2C_Slave_ISR_IT+0x1e6>
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	4a2b      	ldr	r2, [pc, #172]	@ (8011150 <I2C_Slave_ISR_IT+0x1fc>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d048      	beq.n	801113a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	0018      	movs	r0, r3
 80110ac:	f000 fc36 	bl	801191c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80110b0:	e043      	b.n	801113a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	2208      	movs	r2, #8
 80110b6:	4013      	ands	r3, r2
 80110b8:	d00a      	beq.n	80110d0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2208      	movs	r2, #8
 80110be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80110c0:	d006      	beq.n	80110d0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80110c2:	693a      	ldr	r2, [r7, #16]
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	0011      	movs	r1, r2
 80110c8:	0018      	movs	r0, r3
 80110ca:	f000 fb41 	bl	8011750 <I2C_ITAddrCplt>
 80110ce:	e035      	b.n	801113c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	2202      	movs	r2, #2
 80110d4:	4013      	ands	r3, r2
 80110d6:	d031      	beq.n	801113c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2202      	movs	r2, #2
 80110dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80110de:	d02d      	beq.n	801113c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d018      	beq.n	801111c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ee:	781a      	ldrb	r2, [r3, #0]
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110fa:	1c5a      	adds	r2, r3, #1
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011104:	b29b      	uxth	r3, r3
 8011106:	3b01      	subs	r3, #1
 8011108:	b29a      	uxth	r2, r3
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011112:	3b01      	subs	r3, #1
 8011114:	b29a      	uxth	r2, r3
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	851a      	strh	r2, [r3, #40]	@ 0x28
 801111a:	e00f      	b.n	801113c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	2380      	movs	r3, #128	@ 0x80
 8011120:	045b      	lsls	r3, r3, #17
 8011122:	429a      	cmp	r2, r3
 8011124:	d002      	beq.n	801112c <I2C_Slave_ISR_IT+0x1d8>
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d107      	bne.n	801113c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	0018      	movs	r0, r3
 8011130:	f000 fbf4 	bl	801191c <I2C_ITSlaveSeqCplt>
 8011134:	e002      	b.n	801113c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8011136:	46c0      	nop			@ (mov r8, r8)
 8011138:	e000      	b.n	801113c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801113a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2240      	movs	r2, #64	@ 0x40
 8011140:	2100      	movs	r1, #0
 8011142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011144:	2300      	movs	r3, #0
}
 8011146:	0018      	movs	r0, r3
 8011148:	46bd      	mov	sp, r7
 801114a:	b006      	add	sp, #24
 801114c:	bd80      	pop	{r7, pc}
 801114e:	46c0      	nop			@ (mov r8, r8)
 8011150:	ffff0000 	.word	0xffff0000

08011154 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011154:	b590      	push	{r4, r7, lr}
 8011156:	b089      	sub	sp, #36	@ 0x24
 8011158:	af02      	add	r7, sp, #8
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	60b9      	str	r1, [r7, #8]
 801115e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2240      	movs	r2, #64	@ 0x40
 8011164:	5c9b      	ldrb	r3, [r3, r2]
 8011166:	2b01      	cmp	r3, #1
 8011168:	d101      	bne.n	801116e <I2C_Master_ISR_DMA+0x1a>
 801116a:	2302      	movs	r3, #2
 801116c:	e0e7      	b.n	801133e <I2C_Master_ISR_DMA+0x1ea>
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2240      	movs	r2, #64	@ 0x40
 8011172:	2101      	movs	r1, #1
 8011174:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	2210      	movs	r2, #16
 801117a:	4013      	ands	r3, r2
 801117c:	d017      	beq.n	80111ae <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2210      	movs	r2, #16
 8011182:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011184:	d013      	beq.n	80111ae <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2210      	movs	r2, #16
 801118c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011192:	2204      	movs	r2, #4
 8011194:	431a      	orrs	r2, r3
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2120      	movs	r1, #32
 801119e:	0018      	movs	r0, r3
 80111a0:	f001 fb18 	bl	80127d4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	0018      	movs	r0, r3
 80111a8:	f000 ff8d 	bl	80120c6 <I2C_Flush_TXDR>
 80111ac:	e0c2      	b.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	2280      	movs	r2, #128	@ 0x80
 80111b2:	4013      	ands	r3, r2
 80111b4:	d100      	bne.n	80111b8 <I2C_Master_ISR_DMA+0x64>
 80111b6:	e07c      	b.n	80112b2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2240      	movs	r2, #64	@ 0x40
 80111bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80111be:	d100      	bne.n	80111c2 <I2C_Master_ISR_DMA+0x6e>
 80111c0:	e077      	b.n	80112b2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2140      	movs	r1, #64	@ 0x40
 80111ce:	438a      	bics	r2, r1
 80111d0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d055      	beq.n	8011288 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	2312      	movs	r3, #18
 80111e6:	18fb      	adds	r3, r7, r3
 80111e8:	0592      	lsls	r2, r2, #22
 80111ea:	0d92      	lsrs	r2, r2, #22
 80111ec:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	2bff      	cmp	r3, #255	@ 0xff
 80111f6:	d906      	bls.n	8011206 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	22ff      	movs	r2, #255	@ 0xff
 80111fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80111fe:	2380      	movs	r3, #128	@ 0x80
 8011200:	045b      	lsls	r3, r3, #17
 8011202:	617b      	str	r3, [r7, #20]
 8011204:	e010      	b.n	8011228 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801120a:	b29a      	uxth	r2, r3
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011214:	4a4c      	ldr	r2, [pc, #304]	@ (8011348 <I2C_Master_ISR_DMA+0x1f4>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d003      	beq.n	8011222 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801121e:	617b      	str	r3, [r7, #20]
 8011220:	e002      	b.n	8011228 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011222:	2380      	movs	r3, #128	@ 0x80
 8011224:	049b      	lsls	r3, r3, #18
 8011226:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801122c:	b2da      	uxtb	r2, r3
 801122e:	697c      	ldr	r4, [r7, #20]
 8011230:	2312      	movs	r3, #18
 8011232:	18fb      	adds	r3, r7, r3
 8011234:	8819      	ldrh	r1, [r3, #0]
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	2300      	movs	r3, #0
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	0023      	movs	r3, r4
 801123e:	f001 fa8f 	bl	8012760 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011246:	b29a      	uxth	r2, r3
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	b29a      	uxth	r2, r3
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2241      	movs	r2, #65	@ 0x41
 8011258:	5c9b      	ldrb	r3, [r3, r2]
 801125a:	b2db      	uxtb	r3, r3
 801125c:	2b22      	cmp	r3, #34	@ 0x22
 801125e:	d109      	bne.n	8011274 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2180      	movs	r1, #128	@ 0x80
 801126c:	0209      	lsls	r1, r1, #8
 801126e:	430a      	orrs	r2, r1
 8011270:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011272:	e05f      	b.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2180      	movs	r1, #128	@ 0x80
 8011280:	01c9      	lsls	r1, r1, #7
 8011282:	430a      	orrs	r2, r1
 8011284:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011286:	e055      	b.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	685a      	ldr	r2, [r3, #4]
 801128e:	2380      	movs	r3, #128	@ 0x80
 8011290:	049b      	lsls	r3, r3, #18
 8011292:	401a      	ands	r2, r3
 8011294:	2380      	movs	r3, #128	@ 0x80
 8011296:	049b      	lsls	r3, r3, #18
 8011298:	429a      	cmp	r2, r3
 801129a:	d004      	beq.n	80112a6 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	0018      	movs	r0, r3
 80112a0:	f000 fafa 	bl	8011898 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80112a4:	e046      	b.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2140      	movs	r1, #64	@ 0x40
 80112aa:	0018      	movs	r0, r3
 80112ac:	f000 fde0 	bl	8011e70 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80112b0:	e040      	b.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	2240      	movs	r2, #64	@ 0x40
 80112b6:	4013      	ands	r3, r2
 80112b8:	d02c      	beq.n	8011314 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2240      	movs	r2, #64	@ 0x40
 80112be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80112c0:	d028      	beq.n	8011314 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d11d      	bne.n	8011308 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	685a      	ldr	r2, [r3, #4]
 80112d2:	2380      	movs	r3, #128	@ 0x80
 80112d4:	049b      	lsls	r3, r3, #18
 80112d6:	401a      	ands	r2, r3
 80112d8:	2380      	movs	r3, #128	@ 0x80
 80112da:	049b      	lsls	r3, r3, #18
 80112dc:	429a      	cmp	r2, r3
 80112de:	d028      	beq.n	8011332 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112e4:	4a18      	ldr	r2, [pc, #96]	@ (8011348 <I2C_Master_ISR_DMA+0x1f4>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d109      	bne.n	80112fe <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	685a      	ldr	r2, [r3, #4]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2180      	movs	r1, #128	@ 0x80
 80112f6:	01c9      	lsls	r1, r1, #7
 80112f8:	430a      	orrs	r2, r1
 80112fa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80112fc:	e019      	b.n	8011332 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	0018      	movs	r0, r3
 8011302:	f000 fac9 	bl	8011898 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011306:	e014      	b.n	8011332 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2140      	movs	r1, #64	@ 0x40
 801130c:	0018      	movs	r0, r3
 801130e:	f000 fdaf 	bl	8011e70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011312:	e00e      	b.n	8011332 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	2220      	movs	r2, #32
 8011318:	4013      	ands	r3, r2
 801131a:	d00b      	beq.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2220      	movs	r2, #32
 8011320:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011322:	d007      	beq.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	0011      	movs	r1, r2
 801132a:	0018      	movs	r0, r3
 801132c:	f000 fb5a 	bl	80119e4 <I2C_ITMasterCplt>
 8011330:	e000      	b.n	8011334 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011332:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2240      	movs	r2, #64	@ 0x40
 8011338:	2100      	movs	r1, #0
 801133a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801133c:	2300      	movs	r3, #0
}
 801133e:	0018      	movs	r0, r3
 8011340:	46bd      	mov	sp, r7
 8011342:	b007      	add	sp, #28
 8011344:	bd90      	pop	{r4, r7, pc}
 8011346:	46c0      	nop			@ (mov r8, r8)
 8011348:	ffff0000 	.word	0xffff0000

0801134c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801134c:	b590      	push	{r4, r7, lr}
 801134e:	b089      	sub	sp, #36	@ 0x24
 8011350:	af02      	add	r7, sp, #8
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011358:	4b88      	ldr	r3, [pc, #544]	@ (801157c <I2C_Mem_ISR_DMA+0x230>)
 801135a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2240      	movs	r2, #64	@ 0x40
 8011360:	5c9b      	ldrb	r3, [r3, r2]
 8011362:	2b01      	cmp	r3, #1
 8011364:	d101      	bne.n	801136a <I2C_Mem_ISR_DMA+0x1e>
 8011366:	2302      	movs	r3, #2
 8011368:	e104      	b.n	8011574 <I2C_Mem_ISR_DMA+0x228>
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2240      	movs	r2, #64	@ 0x40
 801136e:	2101      	movs	r1, #1
 8011370:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	2210      	movs	r2, #16
 8011376:	4013      	ands	r3, r2
 8011378:	d017      	beq.n	80113aa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2210      	movs	r2, #16
 801137e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011380:	d013      	beq.n	80113aa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2210      	movs	r2, #16
 8011388:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801138e:	2204      	movs	r2, #4
 8011390:	431a      	orrs	r2, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2120      	movs	r1, #32
 801139a:	0018      	movs	r0, r3
 801139c:	f001 fa1a 	bl	80127d4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	0018      	movs	r0, r3
 80113a4:	f000 fe8f 	bl	80120c6 <I2C_Flush_TXDR>
 80113a8:	e0df      	b.n	801156a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	2202      	movs	r2, #2
 80113ae:	4013      	ands	r3, r2
 80113b0:	d00d      	beq.n	80113ce <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2202      	movs	r2, #2
 80113b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80113b8:	d009      	beq.n	80113ce <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80113c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2201      	movs	r2, #1
 80113c8:	4252      	negs	r2, r2
 80113ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80113cc:	e0cd      	b.n	801156a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2280      	movs	r2, #128	@ 0x80
 80113d2:	4013      	ands	r3, r2
 80113d4:	d05e      	beq.n	8011494 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2240      	movs	r2, #64	@ 0x40
 80113da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113dc:	d05a      	beq.n	8011494 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2110      	movs	r1, #16
 80113e2:	0018      	movs	r0, r3
 80113e4:	f001 f9f6 	bl	80127d4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d04a      	beq.n	8011488 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	2bff      	cmp	r3, #255	@ 0xff
 80113fa:	d910      	bls.n	801141e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	22ff      	movs	r2, #255	@ 0xff
 8011400:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011406:	b299      	uxth	r1, r3
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801140c:	b2da      	uxtb	r2, r3
 801140e:	2380      	movs	r3, #128	@ 0x80
 8011410:	045b      	lsls	r3, r3, #17
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	2400      	movs	r4, #0
 8011416:	9400      	str	r4, [sp, #0]
 8011418:	f001 f9a2 	bl	8012760 <I2C_TransferConfig>
 801141c:	e011      	b.n	8011442 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011422:	b29a      	uxth	r2, r3
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801142c:	b299      	uxth	r1, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011432:	b2da      	uxtb	r2, r3
 8011434:	2380      	movs	r3, #128	@ 0x80
 8011436:	049b      	lsls	r3, r3, #18
 8011438:	68f8      	ldr	r0, [r7, #12]
 801143a:	2400      	movs	r4, #0
 801143c:	9400      	str	r4, [sp, #0]
 801143e:	f001 f98f 	bl	8012760 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011446:	b29a      	uxth	r2, r3
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801144c:	1ad3      	subs	r3, r2, r3
 801144e:	b29a      	uxth	r2, r3
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2241      	movs	r2, #65	@ 0x41
 8011458:	5c9b      	ldrb	r3, [r3, r2]
 801145a:	b2db      	uxtb	r3, r3
 801145c:	2b22      	cmp	r3, #34	@ 0x22
 801145e:	d109      	bne.n	8011474 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2180      	movs	r1, #128	@ 0x80
 801146c:	0209      	lsls	r1, r1, #8
 801146e:	430a      	orrs	r2, r1
 8011470:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011472:	e07a      	b.n	801156a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2180      	movs	r1, #128	@ 0x80
 8011480:	01c9      	lsls	r1, r1, #7
 8011482:	430a      	orrs	r2, r1
 8011484:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011486:	e070      	b.n	801156a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2140      	movs	r1, #64	@ 0x40
 801148c:	0018      	movs	r0, r3
 801148e:	f000 fcef 	bl	8011e70 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011492:	e06a      	b.n	801156a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	2240      	movs	r2, #64	@ 0x40
 8011498:	4013      	ands	r3, r2
 801149a:	d058      	beq.n	801154e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2240      	movs	r2, #64	@ 0x40
 80114a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114a2:	d054      	beq.n	801154e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2241      	movs	r2, #65	@ 0x41
 80114a8:	5c9b      	ldrb	r3, [r3, r2]
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	2b22      	cmp	r3, #34	@ 0x22
 80114ae:	d101      	bne.n	80114b4 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80114b0:	4b33      	ldr	r3, [pc, #204]	@ (8011580 <I2C_Mem_ISR_DMA+0x234>)
 80114b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	2bff      	cmp	r3, #255	@ 0xff
 80114bc:	d911      	bls.n	80114e2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	22ff      	movs	r2, #255	@ 0xff
 80114c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114c8:	b299      	uxth	r1, r3
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114ce:	b2da      	uxtb	r2, r3
 80114d0:	2380      	movs	r3, #128	@ 0x80
 80114d2:	045c      	lsls	r4, r3, #17
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	0023      	movs	r3, r4
 80114dc:	f001 f940 	bl	8012760 <I2C_TransferConfig>
 80114e0:	e012      	b.n	8011508 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114f0:	b299      	uxth	r1, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	2380      	movs	r3, #128	@ 0x80
 80114fa:	049c      	lsls	r4, r3, #18
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	9300      	str	r3, [sp, #0]
 8011502:	0023      	movs	r3, r4
 8011504:	f001 f92c 	bl	8012760 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801150c:	b29a      	uxth	r2, r3
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	b29a      	uxth	r2, r3
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2241      	movs	r2, #65	@ 0x41
 801151e:	5c9b      	ldrb	r3, [r3, r2]
 8011520:	b2db      	uxtb	r3, r3
 8011522:	2b22      	cmp	r3, #34	@ 0x22
 8011524:	d109      	bne.n	801153a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2180      	movs	r1, #128	@ 0x80
 8011532:	0209      	lsls	r1, r1, #8
 8011534:	430a      	orrs	r2, r1
 8011536:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011538:	e017      	b.n	801156a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2180      	movs	r1, #128	@ 0x80
 8011546:	01c9      	lsls	r1, r1, #7
 8011548:	430a      	orrs	r2, r1
 801154a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801154c:	e00d      	b.n	801156a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	2220      	movs	r2, #32
 8011552:	4013      	ands	r3, r2
 8011554:	d009      	beq.n	801156a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2220      	movs	r2, #32
 801155a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801155c:	d005      	beq.n	801156a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801155e:	68ba      	ldr	r2, [r7, #8]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	0011      	movs	r1, r2
 8011564:	0018      	movs	r0, r3
 8011566:	f000 fa3d 	bl	80119e4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2240      	movs	r2, #64	@ 0x40
 801156e:	2100      	movs	r1, #0
 8011570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	0018      	movs	r0, r3
 8011576:	46bd      	mov	sp, r7
 8011578:	b007      	add	sp, #28
 801157a:	bd90      	pop	{r4, r7, pc}
 801157c:	80002000 	.word	0x80002000
 8011580:	80002400 	.word	0x80002400

08011584 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011594:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8011596:	2300      	movs	r3, #0
 8011598:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2240      	movs	r2, #64	@ 0x40
 801159e:	5c9b      	ldrb	r3, [r3, r2]
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d101      	bne.n	80115a8 <I2C_Slave_ISR_DMA+0x24>
 80115a4:	2302      	movs	r3, #2
 80115a6:	e0cd      	b.n	8011744 <I2C_Slave_ISR_DMA+0x1c0>
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2240      	movs	r2, #64	@ 0x40
 80115ac:	2101      	movs	r1, #1
 80115ae:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	2220      	movs	r2, #32
 80115b4:	4013      	ands	r3, r2
 80115b6:	d009      	beq.n	80115cc <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2220      	movs	r2, #32
 80115bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80115be:	d005      	beq.n	80115cc <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	0011      	movs	r1, r2
 80115c6:	0018      	movs	r0, r3
 80115c8:	f000 fada 	bl	8011b80 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	2210      	movs	r2, #16
 80115d0:	4013      	ands	r3, r2
 80115d2:	d100      	bne.n	80115d6 <I2C_Slave_ISR_DMA+0x52>
 80115d4:	e0a3      	b.n	801171e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2210      	movs	r2, #16
 80115da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80115dc:	d100      	bne.n	80115e0 <I2C_Slave_ISR_DMA+0x5c>
 80115de:	e09e      	b.n	801171e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	2380      	movs	r3, #128	@ 0x80
 80115e4:	01db      	lsls	r3, r3, #7
 80115e6:	4013      	ands	r3, r2
 80115e8:	d105      	bne.n	80115f6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	2380      	movs	r3, #128	@ 0x80
 80115ee:	021b      	lsls	r3, r3, #8
 80115f0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80115f2:	d100      	bne.n	80115f6 <I2C_Slave_ISR_DMA+0x72>
 80115f4:	e08c      	b.n	8011710 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d00c      	beq.n	8011618 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	2380      	movs	r3, #128	@ 0x80
 8011602:	021b      	lsls	r3, r3, #8
 8011604:	4013      	ands	r3, r2
 8011606:	d007      	beq.n	8011618 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d101      	bne.n	8011618 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011614:	2301      	movs	r3, #1
 8011616:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801161c:	2b00      	cmp	r3, #0
 801161e:	d00c      	beq.n	801163a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	2380      	movs	r3, #128	@ 0x80
 8011624:	01db      	lsls	r3, r3, #7
 8011626:	4013      	ands	r3, r2
 8011628:	d007      	beq.n	801163a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8011636:	2301      	movs	r3, #1
 8011638:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	2b01      	cmp	r3, #1
 801163e:	d12d      	bne.n	801169c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2241      	movs	r2, #65	@ 0x41
 8011644:	5c9b      	ldrb	r3, [r3, r2]
 8011646:	b2db      	uxtb	r3, r3
 8011648:	2b28      	cmp	r3, #40	@ 0x28
 801164a:	d10b      	bne.n	8011664 <I2C_Slave_ISR_DMA+0xe0>
 801164c:	69ba      	ldr	r2, [r7, #24]
 801164e:	2380      	movs	r3, #128	@ 0x80
 8011650:	049b      	lsls	r3, r3, #18
 8011652:	429a      	cmp	r2, r3
 8011654:	d106      	bne.n	8011664 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8011656:	68ba      	ldr	r2, [r7, #8]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	0011      	movs	r1, r2
 801165c:	0018      	movs	r0, r3
 801165e:	f000 fbaf 	bl	8011dc0 <I2C_ITListenCplt>
 8011662:	e054      	b.n	801170e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2241      	movs	r2, #65	@ 0x41
 8011668:	5c9b      	ldrb	r3, [r3, r2]
 801166a:	b2db      	uxtb	r3, r3
 801166c:	2b29      	cmp	r3, #41	@ 0x29
 801166e:	d110      	bne.n	8011692 <I2C_Slave_ISR_DMA+0x10e>
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	4a36      	ldr	r2, [pc, #216]	@ (801174c <I2C_Slave_ISR_DMA+0x1c8>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d00c      	beq.n	8011692 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2210      	movs	r2, #16
 801167e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	0018      	movs	r0, r3
 8011684:	f000 fd1f 	bl	80120c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	0018      	movs	r0, r3
 801168c:	f000 f946 	bl	801191c <I2C_ITSlaveSeqCplt>
 8011690:	e03d      	b.n	801170e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2210      	movs	r2, #16
 8011698:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801169a:	e03e      	b.n	801171a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2210      	movs	r2, #16
 80116a2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116a8:	2204      	movs	r2, #4
 80116aa:	431a      	orrs	r2, r3
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80116b0:	2317      	movs	r3, #23
 80116b2:	18fb      	adds	r3, r7, r3
 80116b4:	68fa      	ldr	r2, [r7, #12]
 80116b6:	2141      	movs	r1, #65	@ 0x41
 80116b8:	5c52      	ldrb	r2, [r2, r1]
 80116ba:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d004      	beq.n	80116cc <I2C_Slave_ISR_DMA+0x148>
 80116c2:	69ba      	ldr	r2, [r7, #24]
 80116c4:	2380      	movs	r3, #128	@ 0x80
 80116c6:	045b      	lsls	r3, r3, #17
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d126      	bne.n	801171a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80116cc:	2217      	movs	r2, #23
 80116ce:	18bb      	adds	r3, r7, r2
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b21      	cmp	r3, #33	@ 0x21
 80116d4:	d003      	beq.n	80116de <I2C_Slave_ISR_DMA+0x15a>
 80116d6:	18bb      	adds	r3, r7, r2
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	2b29      	cmp	r3, #41	@ 0x29
 80116dc:	d103      	bne.n	80116e6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2221      	movs	r2, #33	@ 0x21
 80116e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80116e4:	e00b      	b.n	80116fe <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80116e6:	2217      	movs	r2, #23
 80116e8:	18bb      	adds	r3, r7, r2
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	2b22      	cmp	r3, #34	@ 0x22
 80116ee:	d003      	beq.n	80116f8 <I2C_Slave_ISR_DMA+0x174>
 80116f0:	18bb      	adds	r3, r7, r2
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80116f6:	d102      	bne.n	80116fe <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2222      	movs	r2, #34	@ 0x22
 80116fc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	0011      	movs	r1, r2
 8011706:	0018      	movs	r0, r3
 8011708:	f000 fbb2 	bl	8011e70 <I2C_ITError>
      if (treatdmanack == 1U)
 801170c:	e005      	b.n	801171a <I2C_Slave_ISR_DMA+0x196>
 801170e:	e004      	b.n	801171a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2210      	movs	r2, #16
 8011716:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011718:	e00f      	b.n	801173a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801171a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801171c:	e00d      	b.n	801173a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	2208      	movs	r2, #8
 8011722:	4013      	ands	r3, r2
 8011724:	d009      	beq.n	801173a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2208      	movs	r2, #8
 801172a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801172c:	d005      	beq.n	801173a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801172e:	68ba      	ldr	r2, [r7, #8]
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	0011      	movs	r1, r2
 8011734:	0018      	movs	r0, r3
 8011736:	f000 f80b 	bl	8011750 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2240      	movs	r2, #64	@ 0x40
 801173e:	2100      	movs	r1, #0
 8011740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	0018      	movs	r0, r3
 8011746:	46bd      	mov	sp, r7
 8011748:	b008      	add	sp, #32
 801174a:	bd80      	pop	{r7, pc}
 801174c:	ffff0000 	.word	0xffff0000

08011750 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011750:	b5b0      	push	{r4, r5, r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2241      	movs	r2, #65	@ 0x41
 801175e:	5c9b      	ldrb	r3, [r3, r2]
 8011760:	b2db      	uxtb	r3, r3
 8011762:	001a      	movs	r2, r3
 8011764:	2328      	movs	r3, #40	@ 0x28
 8011766:	4013      	ands	r3, r2
 8011768:	2b28      	cmp	r3, #40	@ 0x28
 801176a:	d000      	beq.n	801176e <I2C_ITAddrCplt+0x1e>
 801176c:	e088      	b.n	8011880 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	699b      	ldr	r3, [r3, #24]
 8011774:	0c1b      	lsrs	r3, r3, #16
 8011776:	b2da      	uxtb	r2, r3
 8011778:	250f      	movs	r5, #15
 801177a:	197b      	adds	r3, r7, r5
 801177c:	2101      	movs	r1, #1
 801177e:	400a      	ands	r2, r1
 8011780:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	699b      	ldr	r3, [r3, #24]
 8011788:	0c1b      	lsrs	r3, r3, #16
 801178a:	b29a      	uxth	r2, r3
 801178c:	200c      	movs	r0, #12
 801178e:	183b      	adds	r3, r7, r0
 8011790:	21fe      	movs	r1, #254	@ 0xfe
 8011792:	400a      	ands	r2, r1
 8011794:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	b29a      	uxth	r2, r3
 801179e:	240a      	movs	r4, #10
 80117a0:	193b      	adds	r3, r7, r4
 80117a2:	0592      	lsls	r2, r2, #22
 80117a4:	0d92      	lsrs	r2, r2, #22
 80117a6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	2308      	movs	r3, #8
 80117b2:	18fb      	adds	r3, r7, r3
 80117b4:	21fe      	movs	r1, #254	@ 0xfe
 80117b6:	400a      	ands	r2, r1
 80117b8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	2b02      	cmp	r3, #2
 80117c0:	d148      	bne.n	8011854 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80117c2:	0021      	movs	r1, r4
 80117c4:	187b      	adds	r3, r7, r1
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	09db      	lsrs	r3, r3, #7
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	183b      	adds	r3, r7, r0
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	4053      	eors	r3, r2
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	001a      	movs	r2, r3
 80117d6:	2306      	movs	r3, #6
 80117d8:	4013      	ands	r3, r2
 80117da:	d120      	bne.n	801181e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80117dc:	183b      	adds	r3, r7, r0
 80117de:	187a      	adds	r2, r7, r1
 80117e0:	8812      	ldrh	r2, [r2, #0]
 80117e2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80117e8:	1c5a      	adds	r2, r3, #1
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80117f2:	2b02      	cmp	r3, #2
 80117f4:	d14c      	bne.n	8011890 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2208      	movs	r2, #8
 8011802:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2240      	movs	r2, #64	@ 0x40
 8011808:	2100      	movs	r1, #0
 801180a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801180c:	183b      	adds	r3, r7, r0
 801180e:	881a      	ldrh	r2, [r3, #0]
 8011810:	197b      	adds	r3, r7, r5
 8011812:	7819      	ldrb	r1, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	0018      	movs	r0, r3
 8011818:	f7ff fa39 	bl	8010c8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801181c:	e038      	b.n	8011890 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801181e:	240c      	movs	r4, #12
 8011820:	193b      	adds	r3, r7, r4
 8011822:	2208      	movs	r2, #8
 8011824:	18ba      	adds	r2, r7, r2
 8011826:	8812      	ldrh	r2, [r2, #0]
 8011828:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801182a:	2380      	movs	r3, #128	@ 0x80
 801182c:	021a      	lsls	r2, r3, #8
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	0011      	movs	r1, r2
 8011832:	0018      	movs	r0, r3
 8011834:	f001 f85c 	bl	80128f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2240      	movs	r2, #64	@ 0x40
 801183c:	2100      	movs	r1, #0
 801183e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011840:	193b      	adds	r3, r7, r4
 8011842:	881a      	ldrh	r2, [r3, #0]
 8011844:	230f      	movs	r3, #15
 8011846:	18fb      	adds	r3, r7, r3
 8011848:	7819      	ldrb	r1, [r3, #0]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	0018      	movs	r0, r3
 801184e:	f7ff fa1e 	bl	8010c8e <HAL_I2C_AddrCallback>
}
 8011852:	e01d      	b.n	8011890 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011854:	2380      	movs	r3, #128	@ 0x80
 8011856:	021a      	lsls	r2, r3, #8
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	0011      	movs	r1, r2
 801185c:	0018      	movs	r0, r3
 801185e:	f001 f847 	bl	80128f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2240      	movs	r2, #64	@ 0x40
 8011866:	2100      	movs	r1, #0
 8011868:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801186a:	230c      	movs	r3, #12
 801186c:	18fb      	adds	r3, r7, r3
 801186e:	881a      	ldrh	r2, [r3, #0]
 8011870:	230f      	movs	r3, #15
 8011872:	18fb      	adds	r3, r7, r3
 8011874:	7819      	ldrb	r1, [r3, #0]
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	0018      	movs	r0, r3
 801187a:	f7ff fa08 	bl	8010c8e <HAL_I2C_AddrCallback>
}
 801187e:	e007      	b.n	8011890 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2208      	movs	r2, #8
 8011886:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2240      	movs	r2, #64	@ 0x40
 801188c:	2100      	movs	r1, #0
 801188e:	5499      	strb	r1, [r3, r2]
}
 8011890:	46c0      	nop			@ (mov r8, r8)
 8011892:	46bd      	mov	sp, r7
 8011894:	b004      	add	sp, #16
 8011896:	bdb0      	pop	{r4, r5, r7, pc}

08011898 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2242      	movs	r2, #66	@ 0x42
 80118a4:	2100      	movs	r1, #0
 80118a6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2241      	movs	r2, #65	@ 0x41
 80118ac:	5c9b      	ldrb	r3, [r3, r2]
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	2b21      	cmp	r3, #33	@ 0x21
 80118b2:	d117      	bne.n	80118e4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2241      	movs	r2, #65	@ 0x41
 80118b8:	2120      	movs	r1, #32
 80118ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2211      	movs	r2, #17
 80118c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2101      	movs	r1, #1
 80118cc:	0018      	movs	r0, r3
 80118ce:	f001 f80f 	bl	80128f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2240      	movs	r2, #64	@ 0x40
 80118d6:	2100      	movs	r1, #0
 80118d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	0018      	movs	r0, r3
 80118de:	f7ff f9b6 	bl	8010c4e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80118e2:	e016      	b.n	8011912 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2241      	movs	r2, #65	@ 0x41
 80118e8:	2120      	movs	r1, #32
 80118ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2212      	movs	r2, #18
 80118f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2200      	movs	r2, #0
 80118f6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2102      	movs	r1, #2
 80118fc:	0018      	movs	r0, r3
 80118fe:	f000 fff7 	bl	80128f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2240      	movs	r2, #64	@ 0x40
 8011906:	2100      	movs	r1, #0
 8011908:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	0018      	movs	r0, r3
 801190e:	f7ff f9a6 	bl	8010c5e <HAL_I2C_MasterRxCpltCallback>
}
 8011912:	46c0      	nop			@ (mov r8, r8)
 8011914:	46bd      	mov	sp, r7
 8011916:	b002      	add	sp, #8
 8011918:	bd80      	pop	{r7, pc}
	...

0801191c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2242      	movs	r2, #66	@ 0x42
 8011930:	2100      	movs	r1, #0
 8011932:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011934:	68fa      	ldr	r2, [r7, #12]
 8011936:	2380      	movs	r3, #128	@ 0x80
 8011938:	01db      	lsls	r3, r3, #7
 801193a:	4013      	ands	r3, r2
 801193c:	d008      	beq.n	8011950 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4924      	ldr	r1, [pc, #144]	@ (80119dc <I2C_ITSlaveSeqCplt+0xc0>)
 801194a:	400a      	ands	r2, r1
 801194c:	601a      	str	r2, [r3, #0]
 801194e:	e00c      	b.n	801196a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	2380      	movs	r3, #128	@ 0x80
 8011954:	021b      	lsls	r3, r3, #8
 8011956:	4013      	ands	r3, r2
 8011958:	d007      	beq.n	801196a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	491e      	ldr	r1, [pc, #120]	@ (80119e0 <I2C_ITSlaveSeqCplt+0xc4>)
 8011966:	400a      	ands	r2, r1
 8011968:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2241      	movs	r2, #65	@ 0x41
 801196e:	5c9b      	ldrb	r3, [r3, r2]
 8011970:	b2db      	uxtb	r3, r3
 8011972:	2b29      	cmp	r3, #41	@ 0x29
 8011974:	d114      	bne.n	80119a0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2241      	movs	r2, #65	@ 0x41
 801197a:	2128      	movs	r1, #40	@ 0x28
 801197c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2221      	movs	r2, #33	@ 0x21
 8011982:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2101      	movs	r1, #1
 8011988:	0018      	movs	r0, r3
 801198a:	f000 ffb1 	bl	80128f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2240      	movs	r2, #64	@ 0x40
 8011992:	2100      	movs	r1, #0
 8011994:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	0018      	movs	r0, r3
 801199a:	f7ff f968 	bl	8010c6e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801199e:	e019      	b.n	80119d4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2241      	movs	r2, #65	@ 0x41
 80119a4:	5c9b      	ldrb	r3, [r3, r2]
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80119aa:	d113      	bne.n	80119d4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2241      	movs	r2, #65	@ 0x41
 80119b0:	2128      	movs	r1, #40	@ 0x28
 80119b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2222      	movs	r2, #34	@ 0x22
 80119b8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2102      	movs	r1, #2
 80119be:	0018      	movs	r0, r3
 80119c0:	f000 ff96 	bl	80128f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2240      	movs	r2, #64	@ 0x40
 80119c8:	2100      	movs	r1, #0
 80119ca:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	0018      	movs	r0, r3
 80119d0:	f7ff f955 	bl	8010c7e <HAL_I2C_SlaveRxCpltCallback>
}
 80119d4:	46c0      	nop			@ (mov r8, r8)
 80119d6:	46bd      	mov	sp, r7
 80119d8:	b004      	add	sp, #16
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	ffffbfff 	.word	0xffffbfff
 80119e0:	ffff7fff 	.word	0xffff7fff

080119e4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b086      	sub	sp, #24
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2220      	movs	r2, #32
 80119f8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2241      	movs	r2, #65	@ 0x41
 80119fe:	5c9b      	ldrb	r3, [r3, r2]
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	2b21      	cmp	r3, #33	@ 0x21
 8011a04:	d108      	bne.n	8011a18 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2101      	movs	r1, #1
 8011a0a:	0018      	movs	r0, r3
 8011a0c:	f000 ff70 	bl	80128f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2211      	movs	r2, #17
 8011a14:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a16:	e00d      	b.n	8011a34 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2241      	movs	r2, #65	@ 0x41
 8011a1c:	5c9b      	ldrb	r3, [r3, r2]
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b22      	cmp	r3, #34	@ 0x22
 8011a22:	d107      	bne.n	8011a34 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2102      	movs	r1, #2
 8011a28:	0018      	movs	r0, r3
 8011a2a:	f000 ff61 	bl	80128f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2212      	movs	r2, #18
 8011a32:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	685a      	ldr	r2, [r3, #4]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	494e      	ldr	r1, [pc, #312]	@ (8011b78 <I2C_ITMasterCplt+0x194>)
 8011a40:	400a      	ands	r2, r1
 8011a42:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8011b7c <I2C_ITMasterCplt+0x198>)
 8011a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	2210      	movs	r2, #16
 8011a54:	4013      	ands	r3, r2
 8011a56:	d009      	beq.n	8011a6c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	2210      	movs	r2, #16
 8011a5e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a64:	2204      	movs	r2, #4
 8011a66:	431a      	orrs	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2241      	movs	r2, #65	@ 0x41
 8011a70:	5c9b      	ldrb	r3, [r3, r2]
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b60      	cmp	r3, #96	@ 0x60
 8011a76:	d109      	bne.n	8011a8c <I2C_ITMasterCplt+0xa8>
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	2204      	movs	r2, #4
 8011a7c:	4013      	ands	r3, r2
 8011a7e:	d005      	beq.n	8011a8c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011a8a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	0018      	movs	r0, r3
 8011a90:	f000 fb19 	bl	80120c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a98:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2241      	movs	r2, #65	@ 0x41
 8011a9e:	5c9b      	ldrb	r3, [r3, r2]
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	2b60      	cmp	r3, #96	@ 0x60
 8011aa4:	d002      	beq.n	8011aac <I2C_ITMasterCplt+0xc8>
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d007      	beq.n	8011abc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	0011      	movs	r1, r2
 8011ab4:	0018      	movs	r0, r3
 8011ab6:	f000 f9db 	bl	8011e70 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011aba:	e058      	b.n	8011b6e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2241      	movs	r2, #65	@ 0x41
 8011ac0:	5c9b      	ldrb	r3, [r3, r2]
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	2b21      	cmp	r3, #33	@ 0x21
 8011ac6:	d126      	bne.n	8011b16 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2241      	movs	r2, #65	@ 0x41
 8011acc:	2120      	movs	r1, #32
 8011ace:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2242      	movs	r2, #66	@ 0x42
 8011ada:	5c9b      	ldrb	r3, [r3, r2]
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b40      	cmp	r3, #64	@ 0x40
 8011ae0:	d10c      	bne.n	8011afc <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2242      	movs	r2, #66	@ 0x42
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2240      	movs	r2, #64	@ 0x40
 8011aee:	2100      	movs	r1, #0
 8011af0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	0018      	movs	r0, r3
 8011af6:	f7ff f8e2 	bl	8010cbe <HAL_I2C_MemTxCpltCallback>
}
 8011afa:	e038      	b.n	8011b6e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2242      	movs	r2, #66	@ 0x42
 8011b00:	2100      	movs	r1, #0
 8011b02:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2240      	movs	r2, #64	@ 0x40
 8011b08:	2100      	movs	r1, #0
 8011b0a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	0018      	movs	r0, r3
 8011b10:	f7ff f89d 	bl	8010c4e <HAL_I2C_MasterTxCpltCallback>
}
 8011b14:	e02b      	b.n	8011b6e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2241      	movs	r2, #65	@ 0x41
 8011b1a:	5c9b      	ldrb	r3, [r3, r2]
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	2b22      	cmp	r3, #34	@ 0x22
 8011b20:	d125      	bne.n	8011b6e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2241      	movs	r2, #65	@ 0x41
 8011b26:	2120      	movs	r1, #32
 8011b28:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2242      	movs	r2, #66	@ 0x42
 8011b34:	5c9b      	ldrb	r3, [r3, r2]
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	2b40      	cmp	r3, #64	@ 0x40
 8011b3a:	d10c      	bne.n	8011b56 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2242      	movs	r2, #66	@ 0x42
 8011b40:	2100      	movs	r1, #0
 8011b42:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2240      	movs	r2, #64	@ 0x40
 8011b48:	2100      	movs	r1, #0
 8011b4a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	0018      	movs	r0, r3
 8011b50:	f7ff f8bd 	bl	8010cce <HAL_I2C_MemRxCpltCallback>
}
 8011b54:	e00b      	b.n	8011b6e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2242      	movs	r2, #66	@ 0x42
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2240      	movs	r2, #64	@ 0x40
 8011b62:	2100      	movs	r1, #0
 8011b64:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	0018      	movs	r0, r3
 8011b6a:	f7ff f878 	bl	8010c5e <HAL_I2C_MasterRxCpltCallback>
}
 8011b6e:	46c0      	nop			@ (mov r8, r8)
 8011b70:	46bd      	mov	sp, r7
 8011b72:	b006      	add	sp, #24
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	46c0      	nop			@ (mov r8, r8)
 8011b78:	fe00e800 	.word	0xfe00e800
 8011b7c:	ffff0000 	.word	0xffff0000

08011b80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011b96:	200f      	movs	r0, #15
 8011b98:	183b      	adds	r3, r7, r0
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	2141      	movs	r1, #65	@ 0x41
 8011b9e:	5c52      	ldrb	r2, [r2, r1]
 8011ba0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2220      	movs	r2, #32
 8011ba8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011baa:	183b      	adds	r3, r7, r0
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	2b21      	cmp	r3, #33	@ 0x21
 8011bb0:	d003      	beq.n	8011bba <I2C_ITSlaveCplt+0x3a>
 8011bb2:	183b      	adds	r3, r7, r0
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b29      	cmp	r3, #41	@ 0x29
 8011bb8:	d109      	bne.n	8011bce <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011bba:	4a7b      	ldr	r2, [pc, #492]	@ (8011da8 <I2C_ITSlaveCplt+0x228>)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	0011      	movs	r1, r2
 8011bc0:	0018      	movs	r0, r3
 8011bc2:	f000 fe95 	bl	80128f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2221      	movs	r2, #33	@ 0x21
 8011bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8011bcc:	e011      	b.n	8011bf2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011bce:	220f      	movs	r2, #15
 8011bd0:	18bb      	adds	r3, r7, r2
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	2b22      	cmp	r3, #34	@ 0x22
 8011bd6:	d003      	beq.n	8011be0 <I2C_ITSlaveCplt+0x60>
 8011bd8:	18bb      	adds	r3, r7, r2
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bde:	d108      	bne.n	8011bf2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011be0:	4a72      	ldr	r2, [pc, #456]	@ (8011dac <I2C_ITSlaveCplt+0x22c>)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	0011      	movs	r1, r2
 8011be6:	0018      	movs	r0, r3
 8011be8:	f000 fe82 	bl	80128f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2222      	movs	r2, #34	@ 0x22
 8011bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	685a      	ldr	r2, [r3, #4]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2180      	movs	r1, #128	@ 0x80
 8011bfe:	0209      	lsls	r1, r1, #8
 8011c00:	430a      	orrs	r2, r1
 8011c02:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	685a      	ldr	r2, [r3, #4]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	4968      	ldr	r1, [pc, #416]	@ (8011db0 <I2C_ITSlaveCplt+0x230>)
 8011c10:	400a      	ands	r2, r1
 8011c12:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	0018      	movs	r0, r3
 8011c18:	f000 fa55 	bl	80120c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011c1c:	693a      	ldr	r2, [r7, #16]
 8011c1e:	2380      	movs	r3, #128	@ 0x80
 8011c20:	01db      	lsls	r3, r3, #7
 8011c22:	4013      	ands	r3, r2
 8011c24:	d013      	beq.n	8011c4e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4960      	ldr	r1, [pc, #384]	@ (8011db4 <I2C_ITSlaveCplt+0x234>)
 8011c32:	400a      	ands	r2, r1
 8011c34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d01f      	beq.n	8011c7e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011c4c:	e017      	b.n	8011c7e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011c4e:	693a      	ldr	r2, [r7, #16]
 8011c50:	2380      	movs	r3, #128	@ 0x80
 8011c52:	021b      	lsls	r3, r3, #8
 8011c54:	4013      	ands	r3, r2
 8011c56:	d012      	beq.n	8011c7e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4955      	ldr	r1, [pc, #340]	@ (8011db8 <I2C_ITSlaveCplt+0x238>)
 8011c64:	400a      	ands	r2, r1
 8011c66:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d006      	beq.n	8011c7e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	2204      	movs	r2, #4
 8011c82:	4013      	ands	r3, r2
 8011c84:	d020      	beq.n	8011cc8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	2204      	movs	r2, #4
 8011c8a:	4393      	bics	r3, r2
 8011c8c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c98:	b2d2      	uxtb	r2, r2
 8011c9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ca0:	1c5a      	adds	r2, r3, #1
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00c      	beq.n	8011cc8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	b29a      	uxth	r2, r3
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d005      	beq.n	8011cde <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cd6:	2204      	movs	r2, #4
 8011cd8:	431a      	orrs	r2, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2242      	movs	r2, #66	@ 0x42
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d013      	beq.n	8011d1c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	0011      	movs	r1, r2
 8011cfc:	0018      	movs	r0, r3
 8011cfe:	f000 f8b7 	bl	8011e70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2241      	movs	r2, #65	@ 0x41
 8011d06:	5c9b      	ldrb	r3, [r3, r2]
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	2b28      	cmp	r3, #40	@ 0x28
 8011d0c:	d147      	bne.n	8011d9e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011d0e:	697a      	ldr	r2, [r7, #20]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	0011      	movs	r1, r2
 8011d14:	0018      	movs	r0, r3
 8011d16:	f000 f853 	bl	8011dc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011d1a:	e040      	b.n	8011d9e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d20:	4a26      	ldr	r2, [pc, #152]	@ (8011dbc <I2C_ITSlaveCplt+0x23c>)
 8011d22:	4293      	cmp	r3, r2
 8011d24:	d016      	beq.n	8011d54 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	0018      	movs	r0, r3
 8011d2a:	f7ff fdf7 	bl	801191c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	4a22      	ldr	r2, [pc, #136]	@ (8011dbc <I2C_ITSlaveCplt+0x23c>)
 8011d32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2241      	movs	r2, #65	@ 0x41
 8011d38:	2120      	movs	r1, #32
 8011d3a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2240      	movs	r2, #64	@ 0x40
 8011d46:	2100      	movs	r1, #0
 8011d48:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	0018      	movs	r0, r3
 8011d4e:	f7fe ffae 	bl	8010cae <HAL_I2C_ListenCpltCallback>
}
 8011d52:	e024      	b.n	8011d9e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2241      	movs	r2, #65	@ 0x41
 8011d58:	5c9b      	ldrb	r3, [r3, r2]
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	2b22      	cmp	r3, #34	@ 0x22
 8011d5e:	d10f      	bne.n	8011d80 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2241      	movs	r2, #65	@ 0x41
 8011d64:	2120      	movs	r1, #32
 8011d66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2240      	movs	r2, #64	@ 0x40
 8011d72:	2100      	movs	r1, #0
 8011d74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	0018      	movs	r0, r3
 8011d7a:	f7fe ff80 	bl	8010c7e <HAL_I2C_SlaveRxCpltCallback>
}
 8011d7e:	e00e      	b.n	8011d9e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2241      	movs	r2, #65	@ 0x41
 8011d84:	2120      	movs	r1, #32
 8011d86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2240      	movs	r2, #64	@ 0x40
 8011d92:	2100      	movs	r1, #0
 8011d94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	0018      	movs	r0, r3
 8011d9a:	f7fe ff68 	bl	8010c6e <HAL_I2C_SlaveTxCpltCallback>
}
 8011d9e:	46c0      	nop			@ (mov r8, r8)
 8011da0:	46bd      	mov	sp, r7
 8011da2:	b006      	add	sp, #24
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	46c0      	nop			@ (mov r8, r8)
 8011da8:	00008001 	.word	0x00008001
 8011dac:	00008002 	.word	0x00008002
 8011db0:	fe00e800 	.word	0xfe00e800
 8011db4:	ffffbfff 	.word	0xffffbfff
 8011db8:	ffff7fff 	.word	0xffff7fff
 8011dbc:	ffff0000 	.word	0xffff0000

08011dc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	4a26      	ldr	r2, [pc, #152]	@ (8011e68 <I2C_ITListenCplt+0xa8>)
 8011dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2241      	movs	r2, #65	@ 0x41
 8011dda:	2120      	movs	r1, #32
 8011ddc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2242      	movs	r2, #66	@ 0x42
 8011de2:	2100      	movs	r1, #0
 8011de4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2200      	movs	r2, #0
 8011dea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	2204      	movs	r2, #4
 8011df0:	4013      	ands	r3, r2
 8011df2:	d022      	beq.n	8011e3a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dfe:	b2d2      	uxtb	r2, r2
 8011e00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e06:	1c5a      	adds	r2, r3, #1
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d012      	beq.n	8011e3a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	3b01      	subs	r3, #1
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e32:	2204      	movs	r2, #4
 8011e34:	431a      	orrs	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8011e6c <I2C_ITListenCplt+0xac>)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	0011      	movs	r1, r2
 8011e40:	0018      	movs	r0, r3
 8011e42:	f000 fd55 	bl	80128f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2210      	movs	r2, #16
 8011e4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2240      	movs	r2, #64	@ 0x40
 8011e52:	2100      	movs	r1, #0
 8011e54:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	0018      	movs	r0, r3
 8011e5a:	f7fe ff28 	bl	8010cae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011e5e:	46c0      	nop			@ (mov r8, r8)
 8011e60:	46bd      	mov	sp, r7
 8011e62:	b002      	add	sp, #8
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	46c0      	nop			@ (mov r8, r8)
 8011e68:	ffff0000 	.word	0xffff0000
 8011e6c:	00008003 	.word	0x00008003

08011e70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011e7a:	200f      	movs	r0, #15
 8011e7c:	183b      	adds	r3, r7, r0
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	2141      	movs	r1, #65	@ 0x41
 8011e82:	5c52      	ldrb	r2, [r2, r1]
 8011e84:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2242      	movs	r2, #66	@ 0x42
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	4a72      	ldr	r2, [pc, #456]	@ (801205c <I2C_ITError+0x1ec>)
 8011e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2200      	movs	r2, #0
 8011e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	431a      	orrs	r2, r3
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011ea6:	183b      	adds	r3, r7, r0
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b28      	cmp	r3, #40	@ 0x28
 8011eac:	d007      	beq.n	8011ebe <I2C_ITError+0x4e>
 8011eae:	183b      	adds	r3, r7, r0
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	2b29      	cmp	r3, #41	@ 0x29
 8011eb4:	d003      	beq.n	8011ebe <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011eb6:	183b      	adds	r3, r7, r0
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ebc:	d10c      	bne.n	8011ed8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2103      	movs	r1, #3
 8011ec2:	0018      	movs	r0, r3
 8011ec4:	f000 fd14 	bl	80128f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2241      	movs	r2, #65	@ 0x41
 8011ecc:	2128      	movs	r1, #40	@ 0x28
 8011ece:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	4a63      	ldr	r2, [pc, #396]	@ (8012060 <I2C_ITError+0x1f0>)
 8011ed4:	635a      	str	r2, [r3, #52]	@ 0x34
 8011ed6:	e032      	b.n	8011f3e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011ed8:	4a62      	ldr	r2, [pc, #392]	@ (8012064 <I2C_ITError+0x1f4>)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	0011      	movs	r1, r2
 8011ede:	0018      	movs	r0, r3
 8011ee0:	f000 fd06 	bl	80128f0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	0018      	movs	r0, r3
 8011ee8:	f000 f8ed 	bl	80120c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2241      	movs	r2, #65	@ 0x41
 8011ef0:	5c9b      	ldrb	r3, [r3, r2]
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	2b60      	cmp	r3, #96	@ 0x60
 8011ef6:	d01f      	beq.n	8011f38 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2241      	movs	r2, #65	@ 0x41
 8011efc:	2120      	movs	r1, #32
 8011efe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	699b      	ldr	r3, [r3, #24]
 8011f06:	2220      	movs	r2, #32
 8011f08:	4013      	ands	r3, r2
 8011f0a:	2b20      	cmp	r3, #32
 8011f0c:	d114      	bne.n	8011f38 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	699b      	ldr	r3, [r3, #24]
 8011f14:	2210      	movs	r2, #16
 8011f16:	4013      	ands	r3, r2
 8011f18:	2b10      	cmp	r3, #16
 8011f1a:	d109      	bne.n	8011f30 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	2210      	movs	r2, #16
 8011f22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f28:	2204      	movs	r2, #4
 8011f2a:	431a      	orrs	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	2220      	movs	r2, #32
 8011f36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d03b      	beq.n	8011fc4 <I2C_ITError+0x154>
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	2b11      	cmp	r3, #17
 8011f50:	d002      	beq.n	8011f58 <I2C_ITError+0xe8>
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	2b21      	cmp	r3, #33	@ 0x21
 8011f56:	d135      	bne.n	8011fc4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	2380      	movs	r3, #128	@ 0x80
 8011f60:	01db      	lsls	r3, r3, #7
 8011f62:	401a      	ands	r2, r3
 8011f64:	2380      	movs	r3, #128	@ 0x80
 8011f66:	01db      	lsls	r3, r3, #7
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d107      	bne.n	8011f7c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	493c      	ldr	r1, [pc, #240]	@ (8012068 <I2C_ITError+0x1f8>)
 8011f78:	400a      	ands	r2, r1
 8011f7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f80:	0018      	movs	r0, r3
 8011f82:	f7fd fd62 	bl	800fa4a <HAL_DMA_GetState>
 8011f86:	0003      	movs	r3, r0
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d016      	beq.n	8011fba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f90:	4a36      	ldr	r2, [pc, #216]	@ (801206c <I2C_ITError+0x1fc>)
 8011f92:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2240      	movs	r2, #64	@ 0x40
 8011f98:	2100      	movs	r1, #0
 8011f9a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fa0:	0018      	movs	r0, r3
 8011fa2:	f7fd fc5d 	bl	800f860 <HAL_DMA_Abort_IT>
 8011fa6:	1e03      	subs	r3, r0, #0
 8011fa8:	d051      	beq.n	801204e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fb4:	0018      	movs	r0, r3
 8011fb6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011fb8:	e049      	b.n	801204e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	0018      	movs	r0, r3
 8011fbe:	f000 f859 	bl	8012074 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011fc2:	e044      	b.n	801204e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d03b      	beq.n	8012044 <I2C_ITError+0x1d4>
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	2b12      	cmp	r3, #18
 8011fd0:	d002      	beq.n	8011fd8 <I2C_ITError+0x168>
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	2b22      	cmp	r3, #34	@ 0x22
 8011fd6:	d135      	bne.n	8012044 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	2380      	movs	r3, #128	@ 0x80
 8011fe0:	021b      	lsls	r3, r3, #8
 8011fe2:	401a      	ands	r2, r3
 8011fe4:	2380      	movs	r3, #128	@ 0x80
 8011fe6:	021b      	lsls	r3, r3, #8
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d107      	bne.n	8011ffc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	491e      	ldr	r1, [pc, #120]	@ (8012070 <I2C_ITError+0x200>)
 8011ff8:	400a      	ands	r2, r1
 8011ffa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012000:	0018      	movs	r0, r3
 8012002:	f7fd fd22 	bl	800fa4a <HAL_DMA_GetState>
 8012006:	0003      	movs	r3, r0
 8012008:	2b01      	cmp	r3, #1
 801200a:	d016      	beq.n	801203a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012010:	4a16      	ldr	r2, [pc, #88]	@ (801206c <I2C_ITError+0x1fc>)
 8012012:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2240      	movs	r2, #64	@ 0x40
 8012018:	2100      	movs	r1, #0
 801201a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012020:	0018      	movs	r0, r3
 8012022:	f7fd fc1d 	bl	800f860 <HAL_DMA_Abort_IT>
 8012026:	1e03      	subs	r3, r0, #0
 8012028:	d013      	beq.n	8012052 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801202e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012034:	0018      	movs	r0, r3
 8012036:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012038:	e00b      	b.n	8012052 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	0018      	movs	r0, r3
 801203e:	f000 f819 	bl	8012074 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012042:	e006      	b.n	8012052 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	0018      	movs	r0, r3
 8012048:	f000 f814 	bl	8012074 <I2C_TreatErrorCallback>
  }
}
 801204c:	e002      	b.n	8012054 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801204e:	46c0      	nop			@ (mov r8, r8)
 8012050:	e000      	b.n	8012054 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012052:	46c0      	nop			@ (mov r8, r8)
}
 8012054:	46c0      	nop			@ (mov r8, r8)
 8012056:	46bd      	mov	sp, r7
 8012058:	b004      	add	sp, #16
 801205a:	bd80      	pop	{r7, pc}
 801205c:	ffff0000 	.word	0xffff0000
 8012060:	08010f55 	.word	0x08010f55
 8012064:	00008003 	.word	0x00008003
 8012068:	ffffbfff 	.word	0xffffbfff
 801206c:	0801227f 	.word	0x0801227f
 8012070:	ffff7fff 	.word	0xffff7fff

08012074 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2241      	movs	r2, #65	@ 0x41
 8012080:	5c9b      	ldrb	r3, [r3, r2]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	2b60      	cmp	r3, #96	@ 0x60
 8012086:	d10f      	bne.n	80120a8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2241      	movs	r2, #65	@ 0x41
 801208c:	2120      	movs	r1, #32
 801208e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2200      	movs	r2, #0
 8012094:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2240      	movs	r2, #64	@ 0x40
 801209a:	2100      	movs	r1, #0
 801209c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	0018      	movs	r0, r3
 80120a2:	f7fe fe24 	bl	8010cee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80120a6:	e00a      	b.n	80120be <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2240      	movs	r2, #64	@ 0x40
 80120b2:	2100      	movs	r1, #0
 80120b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	0018      	movs	r0, r3
 80120ba:	f7fe fe10 	bl	8010cde <HAL_I2C_ErrorCallback>
}
 80120be:	46c0      	nop			@ (mov r8, r8)
 80120c0:	46bd      	mov	sp, r7
 80120c2:	b002      	add	sp, #8
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b082      	sub	sp, #8
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	699b      	ldr	r3, [r3, #24]
 80120d4:	2202      	movs	r2, #2
 80120d6:	4013      	ands	r3, r2
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d103      	bne.n	80120e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2200      	movs	r2, #0
 80120e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	699b      	ldr	r3, [r3, #24]
 80120ea:	2201      	movs	r2, #1
 80120ec:	4013      	ands	r3, r2
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	d007      	beq.n	8012102 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	699a      	ldr	r2, [r3, #24]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2101      	movs	r1, #1
 80120fe:	430a      	orrs	r2, r1
 8012100:	619a      	str	r2, [r3, #24]
  }
}
 8012102:	46c0      	nop			@ (mov r8, r8)
 8012104:	46bd      	mov	sp, r7
 8012106:	b002      	add	sp, #8
 8012108:	bd80      	pop	{r7, pc}
	...

0801210c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012118:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	4920      	ldr	r1, [pc, #128]	@ (80121a8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012126:	400a      	ands	r2, r1
 8012128:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801212e:	b29b      	uxth	r3, r3
 8012130:	2b00      	cmp	r3, #0
 8012132:	d105      	bne.n	8012140 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2120      	movs	r1, #32
 8012138:	0018      	movs	r0, r3
 801213a:	f000 fb4b 	bl	80127d4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801213e:	e02e      	b.n	801219e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012148:	189a      	adds	r2, r3, r2
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012152:	b29b      	uxth	r3, r3
 8012154:	2bff      	cmp	r3, #255	@ 0xff
 8012156:	d903      	bls.n	8012160 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	22ff      	movs	r2, #255	@ 0xff
 801215c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801215e:	e004      	b.n	801216a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012164:	b29a      	uxth	r2, r3
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012172:	0019      	movs	r1, r3
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	3328      	adds	r3, #40	@ 0x28
 801217a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012180:	f7fd fac8 	bl	800f714 <HAL_DMA_Start_IT>
 8012184:	1e03      	subs	r3, r0, #0
 8012186:	d005      	beq.n	8012194 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2110      	movs	r1, #16
 801218c:	0018      	movs	r0, r3
 801218e:	f7ff fe6f 	bl	8011e70 <I2C_ITError>
}
 8012192:	e004      	b.n	801219e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2140      	movs	r1, #64	@ 0x40
 8012198:	0018      	movs	r0, r3
 801219a:	f000 fb1b 	bl	80127d4 <I2C_Enable_IRQ>
}
 801219e:	46c0      	nop			@ (mov r8, r8)
 80121a0:	46bd      	mov	sp, r7
 80121a2:	b004      	add	sp, #16
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	46c0      	nop			@ (mov r8, r8)
 80121a8:	ffffbfff 	.word	0xffffbfff

080121ac <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121b8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	4920      	ldr	r1, [pc, #128]	@ (8012248 <I2C_DMAMasterReceiveCplt+0x9c>)
 80121c6:	400a      	ands	r2, r1
 80121c8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d105      	bne.n	80121e0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2120      	movs	r1, #32
 80121d8:	0018      	movs	r0, r3
 80121da:	f000 fafb 	bl	80127d4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80121de:	e02e      	b.n	801223e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121e4:	68fa      	ldr	r2, [r7, #12]
 80121e6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80121e8:	189a      	adds	r2, r3, r2
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	2bff      	cmp	r3, #255	@ 0xff
 80121f6:	d903      	bls.n	8012200 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	22ff      	movs	r2, #255	@ 0xff
 80121fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80121fe:	e004      	b.n	801220a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012204:	b29a      	uxth	r2, r3
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	3324      	adds	r3, #36	@ 0x24
 8012214:	0019      	movs	r1, r3
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801221a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012220:	f7fd fa78 	bl	800f714 <HAL_DMA_Start_IT>
 8012224:	1e03      	subs	r3, r0, #0
 8012226:	d005      	beq.n	8012234 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	2110      	movs	r1, #16
 801222c:	0018      	movs	r0, r3
 801222e:	f7ff fe1f 	bl	8011e70 <I2C_ITError>
}
 8012232:	e004      	b.n	801223e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2140      	movs	r1, #64	@ 0x40
 8012238:	0018      	movs	r0, r3
 801223a:	f000 facb 	bl	80127d4 <I2C_Enable_IRQ>
}
 801223e:	46c0      	nop			@ (mov r8, r8)
 8012240:	46bd      	mov	sp, r7
 8012242:	b004      	add	sp, #16
 8012244:	bd80      	pop	{r7, pc}
 8012246:	46c0      	nop			@ (mov r8, r8)
 8012248:	ffff7fff 	.word	0xffff7fff

0801224c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012258:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	685a      	ldr	r2, [r3, #4]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2180      	movs	r1, #128	@ 0x80
 8012266:	0209      	lsls	r1, r1, #8
 8012268:	430a      	orrs	r2, r1
 801226a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2110      	movs	r1, #16
 8012270:	0018      	movs	r0, r3
 8012272:	f7ff fdfd 	bl	8011e70 <I2C_ITError>
}
 8012276:	46c0      	nop			@ (mov r8, r8)
 8012278:	46bd      	mov	sp, r7
 801227a:	b004      	add	sp, #16
 801227c:	bd80      	pop	{r7, pc}

0801227e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801227e:	b580      	push	{r7, lr}
 8012280:	b084      	sub	sp, #16
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801228a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012290:	2b00      	cmp	r3, #0
 8012292:	d003      	beq.n	801229c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012298:	2200      	movs	r2, #0
 801229a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d003      	beq.n	80122ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122a8:	2200      	movs	r2, #0
 80122aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	0018      	movs	r0, r3
 80122b0:	f7ff fee0 	bl	8012074 <I2C_TreatErrorCallback>
}
 80122b4:	46c0      	nop			@ (mov r8, r8)
 80122b6:	46bd      	mov	sp, r7
 80122b8:	b004      	add	sp, #16
 80122ba:	bd80      	pop	{r7, pc}

080122bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	603b      	str	r3, [r7, #0]
 80122c8:	1dfb      	adds	r3, r7, #7
 80122ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80122cc:	e030      	b.n	8012330 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	3301      	adds	r3, #1
 80122d2:	d02d      	beq.n	8012330 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80122d4:	f7fc fccc 	bl	800ec70 <HAL_GetTick>
 80122d8:	0002      	movs	r2, r0
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	1ad3      	subs	r3, r2, r3
 80122de:	683a      	ldr	r2, [r7, #0]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d302      	bcc.n	80122ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d122      	bne.n	8012330 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	699b      	ldr	r3, [r3, #24]
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	4013      	ands	r3, r2
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	425a      	negs	r2, r3
 80122fa:	4153      	adcs	r3, r2
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	001a      	movs	r2, r3
 8012300:	1dfb      	adds	r3, r7, #7
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	429a      	cmp	r2, r3
 8012306:	d113      	bne.n	8012330 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801230c:	2220      	movs	r2, #32
 801230e:	431a      	orrs	r2, r3
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2241      	movs	r2, #65	@ 0x41
 8012318:	2120      	movs	r1, #32
 801231a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2242      	movs	r2, #66	@ 0x42
 8012320:	2100      	movs	r1, #0
 8012322:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2240      	movs	r2, #64	@ 0x40
 8012328:	2100      	movs	r1, #0
 801232a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 801232c:	2301      	movs	r3, #1
 801232e:	e00f      	b.n	8012350 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	699b      	ldr	r3, [r3, #24]
 8012336:	68ba      	ldr	r2, [r7, #8]
 8012338:	4013      	ands	r3, r2
 801233a:	68ba      	ldr	r2, [r7, #8]
 801233c:	1ad3      	subs	r3, r2, r3
 801233e:	425a      	negs	r2, r3
 8012340:	4153      	adcs	r3, r2
 8012342:	b2db      	uxtb	r3, r3
 8012344:	001a      	movs	r2, r3
 8012346:	1dfb      	adds	r3, r7, #7
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	429a      	cmp	r2, r3
 801234c:	d0bf      	beq.n	80122ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	0018      	movs	r0, r3
 8012352:	46bd      	mov	sp, r7
 8012354:	b004      	add	sp, #16
 8012356:	bd80      	pop	{r7, pc}

08012358 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b084      	sub	sp, #16
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012364:	e032      	b.n	80123cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	68b9      	ldr	r1, [r7, #8]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	0018      	movs	r0, r3
 801236e:	f000 f8ff 	bl	8012570 <I2C_IsErrorOccurred>
 8012372:	1e03      	subs	r3, r0, #0
 8012374:	d001      	beq.n	801237a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012376:	2301      	movs	r3, #1
 8012378:	e030      	b.n	80123dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	3301      	adds	r3, #1
 801237e:	d025      	beq.n	80123cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012380:	f7fc fc76 	bl	800ec70 <HAL_GetTick>
 8012384:	0002      	movs	r2, r0
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	68ba      	ldr	r2, [r7, #8]
 801238c:	429a      	cmp	r2, r3
 801238e:	d302      	bcc.n	8012396 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d11a      	bne.n	80123cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	699b      	ldr	r3, [r3, #24]
 801239c:	2202      	movs	r2, #2
 801239e:	4013      	ands	r3, r2
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d013      	beq.n	80123cc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123a8:	2220      	movs	r2, #32
 80123aa:	431a      	orrs	r2, r3
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	2241      	movs	r2, #65	@ 0x41
 80123b4:	2120      	movs	r1, #32
 80123b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2242      	movs	r2, #66	@ 0x42
 80123bc:	2100      	movs	r1, #0
 80123be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2240      	movs	r2, #64	@ 0x40
 80123c4:	2100      	movs	r1, #0
 80123c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80123c8:	2301      	movs	r3, #1
 80123ca:	e007      	b.n	80123dc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	699b      	ldr	r3, [r3, #24]
 80123d2:	2202      	movs	r2, #2
 80123d4:	4013      	ands	r3, r2
 80123d6:	2b02      	cmp	r3, #2
 80123d8:	d1c5      	bne.n	8012366 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	0018      	movs	r0, r3
 80123de:	46bd      	mov	sp, r7
 80123e0:	b004      	add	sp, #16
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80123f0:	e02f      	b.n	8012452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	68b9      	ldr	r1, [r7, #8]
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	0018      	movs	r0, r3
 80123fa:	f000 f8b9 	bl	8012570 <I2C_IsErrorOccurred>
 80123fe:	1e03      	subs	r3, r0, #0
 8012400:	d001      	beq.n	8012406 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012402:	2301      	movs	r3, #1
 8012404:	e02d      	b.n	8012462 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012406:	f7fc fc33 	bl	800ec70 <HAL_GetTick>
 801240a:	0002      	movs	r2, r0
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	68ba      	ldr	r2, [r7, #8]
 8012412:	429a      	cmp	r2, r3
 8012414:	d302      	bcc.n	801241c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d11a      	bne.n	8012452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	699b      	ldr	r3, [r3, #24]
 8012422:	2220      	movs	r2, #32
 8012424:	4013      	ands	r3, r2
 8012426:	2b20      	cmp	r3, #32
 8012428:	d013      	beq.n	8012452 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801242e:	2220      	movs	r2, #32
 8012430:	431a      	orrs	r2, r3
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2241      	movs	r2, #65	@ 0x41
 801243a:	2120      	movs	r1, #32
 801243c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2242      	movs	r2, #66	@ 0x42
 8012442:	2100      	movs	r1, #0
 8012444:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	2240      	movs	r2, #64	@ 0x40
 801244a:	2100      	movs	r1, #0
 801244c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801244e:	2301      	movs	r3, #1
 8012450:	e007      	b.n	8012462 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	699b      	ldr	r3, [r3, #24]
 8012458:	2220      	movs	r2, #32
 801245a:	4013      	ands	r3, r2
 801245c:	2b20      	cmp	r3, #32
 801245e:	d1c8      	bne.n	80123f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012460:	2300      	movs	r3, #0
}
 8012462:	0018      	movs	r0, r3
 8012464:	46bd      	mov	sp, r7
 8012466:	b004      	add	sp, #16
 8012468:	bd80      	pop	{r7, pc}
	...

0801246c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012478:	e06b      	b.n	8012552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	68b9      	ldr	r1, [r7, #8]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	0018      	movs	r0, r3
 8012482:	f000 f875 	bl	8012570 <I2C_IsErrorOccurred>
 8012486:	1e03      	subs	r3, r0, #0
 8012488:	d001      	beq.n	801248e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801248a:	2301      	movs	r3, #1
 801248c:	e069      	b.n	8012562 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	699b      	ldr	r3, [r3, #24]
 8012494:	2220      	movs	r2, #32
 8012496:	4013      	ands	r3, r2
 8012498:	2b20      	cmp	r3, #32
 801249a:	d138      	bne.n	801250e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	699b      	ldr	r3, [r3, #24]
 80124a2:	2204      	movs	r2, #4
 80124a4:	4013      	ands	r3, r2
 80124a6:	2b04      	cmp	r3, #4
 80124a8:	d105      	bne.n	80124b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80124b2:	2300      	movs	r3, #0
 80124b4:	e055      	b.n	8012562 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	699b      	ldr	r3, [r3, #24]
 80124bc:	2210      	movs	r2, #16
 80124be:	4013      	ands	r3, r2
 80124c0:	2b10      	cmp	r3, #16
 80124c2:	d107      	bne.n	80124d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2210      	movs	r2, #16
 80124ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2204      	movs	r2, #4
 80124d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80124d2:	e002      	b.n	80124da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2200      	movs	r2, #0
 80124d8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	2220      	movs	r2, #32
 80124e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	685a      	ldr	r2, [r3, #4]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	491f      	ldr	r1, [pc, #124]	@ (801256c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80124ee:	400a      	ands	r2, r1
 80124f0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2241      	movs	r2, #65	@ 0x41
 80124f6:	2120      	movs	r1, #32
 80124f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	2242      	movs	r2, #66	@ 0x42
 80124fe:	2100      	movs	r1, #0
 8012500:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	2240      	movs	r2, #64	@ 0x40
 8012506:	2100      	movs	r1, #0
 8012508:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801250a:	2301      	movs	r3, #1
 801250c:	e029      	b.n	8012562 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801250e:	f7fc fbaf 	bl	800ec70 <HAL_GetTick>
 8012512:	0002      	movs	r2, r0
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	429a      	cmp	r2, r3
 801251c:	d302      	bcc.n	8012524 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d116      	bne.n	8012552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	699b      	ldr	r3, [r3, #24]
 801252a:	2204      	movs	r2, #4
 801252c:	4013      	ands	r3, r2
 801252e:	2b04      	cmp	r3, #4
 8012530:	d00f      	beq.n	8012552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012536:	2220      	movs	r2, #32
 8012538:	431a      	orrs	r2, r3
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2241      	movs	r2, #65	@ 0x41
 8012542:	2120      	movs	r1, #32
 8012544:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2240      	movs	r2, #64	@ 0x40
 801254a:	2100      	movs	r1, #0
 801254c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801254e:	2301      	movs	r3, #1
 8012550:	e007      	b.n	8012562 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	699b      	ldr	r3, [r3, #24]
 8012558:	2204      	movs	r2, #4
 801255a:	4013      	ands	r3, r2
 801255c:	2b04      	cmp	r3, #4
 801255e:	d18c      	bne.n	801247a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012560:	2300      	movs	r3, #0
}
 8012562:	0018      	movs	r0, r3
 8012564:	46bd      	mov	sp, r7
 8012566:	b004      	add	sp, #16
 8012568:	bd80      	pop	{r7, pc}
 801256a:	46c0      	nop			@ (mov r8, r8)
 801256c:	fe00e800 	.word	0xfe00e800

08012570 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b08a      	sub	sp, #40	@ 0x28
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801257c:	2327      	movs	r3, #39	@ 0x27
 801257e:	18fb      	adds	r3, r7, r3
 8012580:	2200      	movs	r2, #0
 8012582:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	699b      	ldr	r3, [r3, #24]
 801258a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801258c:	2300      	movs	r3, #0
 801258e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012594:	69bb      	ldr	r3, [r7, #24]
 8012596:	2210      	movs	r2, #16
 8012598:	4013      	ands	r3, r2
 801259a:	d100      	bne.n	801259e <I2C_IsErrorOccurred+0x2e>
 801259c:	e079      	b.n	8012692 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2210      	movs	r2, #16
 80125a4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80125a6:	e057      	b.n	8012658 <I2C_IsErrorOccurred+0xe8>
 80125a8:	2227      	movs	r2, #39	@ 0x27
 80125aa:	18bb      	adds	r3, r7, r2
 80125ac:	18ba      	adds	r2, r7, r2
 80125ae:	7812      	ldrb	r2, [r2, #0]
 80125b0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	3301      	adds	r3, #1
 80125b6:	d04f      	beq.n	8012658 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80125b8:	f7fc fb5a 	bl	800ec70 <HAL_GetTick>
 80125bc:	0002      	movs	r2, r0
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	1ad3      	subs	r3, r2, r3
 80125c2:	68ba      	ldr	r2, [r7, #8]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d302      	bcc.n	80125ce <I2C_IsErrorOccurred+0x5e>
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d144      	bne.n	8012658 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	685a      	ldr	r2, [r3, #4]
 80125d4:	2380      	movs	r3, #128	@ 0x80
 80125d6:	01db      	lsls	r3, r3, #7
 80125d8:	4013      	ands	r3, r2
 80125da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80125dc:	2013      	movs	r0, #19
 80125de:	183b      	adds	r3, r7, r0
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	2142      	movs	r1, #66	@ 0x42
 80125e4:	5c52      	ldrb	r2, [r2, r1]
 80125e6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	699a      	ldr	r2, [r3, #24]
 80125ee:	2380      	movs	r3, #128	@ 0x80
 80125f0:	021b      	lsls	r3, r3, #8
 80125f2:	401a      	ands	r2, r3
 80125f4:	2380      	movs	r3, #128	@ 0x80
 80125f6:	021b      	lsls	r3, r3, #8
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d126      	bne.n	801264a <I2C_IsErrorOccurred+0xda>
 80125fc:	697a      	ldr	r2, [r7, #20]
 80125fe:	2380      	movs	r3, #128	@ 0x80
 8012600:	01db      	lsls	r3, r3, #7
 8012602:	429a      	cmp	r2, r3
 8012604:	d021      	beq.n	801264a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012606:	183b      	adds	r3, r7, r0
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	2b20      	cmp	r3, #32
 801260c:	d01d      	beq.n	801264a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	685a      	ldr	r2, [r3, #4]
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2180      	movs	r1, #128	@ 0x80
 801261a:	01c9      	lsls	r1, r1, #7
 801261c:	430a      	orrs	r2, r1
 801261e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012620:	f7fc fb26 	bl	800ec70 <HAL_GetTick>
 8012624:	0003      	movs	r3, r0
 8012626:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012628:	e00f      	b.n	801264a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801262a:	f7fc fb21 	bl	800ec70 <HAL_GetTick>
 801262e:	0002      	movs	r2, r0
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	2b19      	cmp	r3, #25
 8012636:	d908      	bls.n	801264a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8012638:	6a3b      	ldr	r3, [r7, #32]
 801263a:	2220      	movs	r2, #32
 801263c:	4313      	orrs	r3, r2
 801263e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012640:	2327      	movs	r3, #39	@ 0x27
 8012642:	18fb      	adds	r3, r7, r3
 8012644:	2201      	movs	r2, #1
 8012646:	701a      	strb	r2, [r3, #0]

              break;
 8012648:	e006      	b.n	8012658 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	699b      	ldr	r3, [r3, #24]
 8012650:	2220      	movs	r2, #32
 8012652:	4013      	ands	r3, r2
 8012654:	2b20      	cmp	r3, #32
 8012656:	d1e8      	bne.n	801262a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	699b      	ldr	r3, [r3, #24]
 801265e:	2220      	movs	r2, #32
 8012660:	4013      	ands	r3, r2
 8012662:	2b20      	cmp	r3, #32
 8012664:	d004      	beq.n	8012670 <I2C_IsErrorOccurred+0x100>
 8012666:	2327      	movs	r3, #39	@ 0x27
 8012668:	18fb      	adds	r3, r7, r3
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d09b      	beq.n	80125a8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012670:	2327      	movs	r3, #39	@ 0x27
 8012672:	18fb      	adds	r3, r7, r3
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d103      	bne.n	8012682 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2220      	movs	r2, #32
 8012680:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012682:	6a3b      	ldr	r3, [r7, #32]
 8012684:	2204      	movs	r2, #4
 8012686:	4313      	orrs	r3, r2
 8012688:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801268a:	2327      	movs	r3, #39	@ 0x27
 801268c:	18fb      	adds	r3, r7, r3
 801268e:	2201      	movs	r2, #1
 8012690:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	699b      	ldr	r3, [r3, #24]
 8012698:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801269a:	69ba      	ldr	r2, [r7, #24]
 801269c:	2380      	movs	r3, #128	@ 0x80
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	4013      	ands	r3, r2
 80126a2:	d00c      	beq.n	80126be <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80126a4:	6a3b      	ldr	r3, [r7, #32]
 80126a6:	2201      	movs	r2, #1
 80126a8:	4313      	orrs	r3, r2
 80126aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2280      	movs	r2, #128	@ 0x80
 80126b2:	0052      	lsls	r2, r2, #1
 80126b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80126b6:	2327      	movs	r3, #39	@ 0x27
 80126b8:	18fb      	adds	r3, r7, r3
 80126ba:	2201      	movs	r2, #1
 80126bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80126be:	69ba      	ldr	r2, [r7, #24]
 80126c0:	2380      	movs	r3, #128	@ 0x80
 80126c2:	00db      	lsls	r3, r3, #3
 80126c4:	4013      	ands	r3, r2
 80126c6:	d00c      	beq.n	80126e2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80126c8:	6a3b      	ldr	r3, [r7, #32]
 80126ca:	2208      	movs	r2, #8
 80126cc:	4313      	orrs	r3, r2
 80126ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2280      	movs	r2, #128	@ 0x80
 80126d6:	00d2      	lsls	r2, r2, #3
 80126d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80126da:	2327      	movs	r3, #39	@ 0x27
 80126dc:	18fb      	adds	r3, r7, r3
 80126de:	2201      	movs	r2, #1
 80126e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80126e2:	69ba      	ldr	r2, [r7, #24]
 80126e4:	2380      	movs	r3, #128	@ 0x80
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	4013      	ands	r3, r2
 80126ea:	d00c      	beq.n	8012706 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80126ec:	6a3b      	ldr	r3, [r7, #32]
 80126ee:	2202      	movs	r2, #2
 80126f0:	4313      	orrs	r3, r2
 80126f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2280      	movs	r2, #128	@ 0x80
 80126fa:	0092      	lsls	r2, r2, #2
 80126fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80126fe:	2327      	movs	r3, #39	@ 0x27
 8012700:	18fb      	adds	r3, r7, r3
 8012702:	2201      	movs	r2, #1
 8012704:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012706:	2327      	movs	r3, #39	@ 0x27
 8012708:	18fb      	adds	r3, r7, r3
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d01d      	beq.n	801274c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	0018      	movs	r0, r3
 8012714:	f7ff fcd7 	bl	80120c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	685a      	ldr	r2, [r3, #4]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	490e      	ldr	r1, [pc, #56]	@ (801275c <I2C_IsErrorOccurred+0x1ec>)
 8012724:	400a      	ands	r2, r1
 8012726:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801272c:	6a3b      	ldr	r3, [r7, #32]
 801272e:	431a      	orrs	r2, r3
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	2241      	movs	r2, #65	@ 0x41
 8012738:	2120      	movs	r1, #32
 801273a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2242      	movs	r2, #66	@ 0x42
 8012740:	2100      	movs	r1, #0
 8012742:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2240      	movs	r2, #64	@ 0x40
 8012748:	2100      	movs	r1, #0
 801274a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801274c:	2327      	movs	r3, #39	@ 0x27
 801274e:	18fb      	adds	r3, r7, r3
 8012750:	781b      	ldrb	r3, [r3, #0]
}
 8012752:	0018      	movs	r0, r3
 8012754:	46bd      	mov	sp, r7
 8012756:	b00a      	add	sp, #40	@ 0x28
 8012758:	bd80      	pop	{r7, pc}
 801275a:	46c0      	nop			@ (mov r8, r8)
 801275c:	fe00e800 	.word	0xfe00e800

08012760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012760:	b590      	push	{r4, r7, lr}
 8012762:	b087      	sub	sp, #28
 8012764:	af00      	add	r7, sp, #0
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	0008      	movs	r0, r1
 801276a:	0011      	movs	r1, r2
 801276c:	607b      	str	r3, [r7, #4]
 801276e:	240a      	movs	r4, #10
 8012770:	193b      	adds	r3, r7, r4
 8012772:	1c02      	adds	r2, r0, #0
 8012774:	801a      	strh	r2, [r3, #0]
 8012776:	2009      	movs	r0, #9
 8012778:	183b      	adds	r3, r7, r0
 801277a:	1c0a      	adds	r2, r1, #0
 801277c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801277e:	193b      	adds	r3, r7, r4
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	059b      	lsls	r3, r3, #22
 8012784:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012786:	183b      	adds	r3, r7, r0
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	0419      	lsls	r1, r3, #16
 801278c:	23ff      	movs	r3, #255	@ 0xff
 801278e:	041b      	lsls	r3, r3, #16
 8012790:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012792:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801279a:	4313      	orrs	r3, r2
 801279c:	005b      	lsls	r3, r3, #1
 801279e:	085b      	lsrs	r3, r3, #1
 80127a0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127aa:	0d51      	lsrs	r1, r2, #21
 80127ac:	2280      	movs	r2, #128	@ 0x80
 80127ae:	00d2      	lsls	r2, r2, #3
 80127b0:	400a      	ands	r2, r1
 80127b2:	4907      	ldr	r1, [pc, #28]	@ (80127d0 <I2C_TransferConfig+0x70>)
 80127b4:	430a      	orrs	r2, r1
 80127b6:	43d2      	mvns	r2, r2
 80127b8:	401a      	ands	r2, r3
 80127ba:	0011      	movs	r1, r2
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	697a      	ldr	r2, [r7, #20]
 80127c2:	430a      	orrs	r2, r1
 80127c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80127c6:	46c0      	nop			@ (mov r8, r8)
 80127c8:	46bd      	mov	sp, r7
 80127ca:	b007      	add	sp, #28
 80127cc:	bd90      	pop	{r4, r7, pc}
 80127ce:	46c0      	nop			@ (mov r8, r8)
 80127d0:	03ff63ff 	.word	0x03ff63ff

080127d4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b084      	sub	sp, #16
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	000a      	movs	r2, r1
 80127de:	1cbb      	adds	r3, r7, #2
 80127e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80127e2:	2300      	movs	r3, #0
 80127e4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80127ea:	4b3e      	ldr	r3, [pc, #248]	@ (80128e4 <I2C_Enable_IRQ+0x110>)
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d035      	beq.n	801285c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80127f4:	4b3c      	ldr	r3, [pc, #240]	@ (80128e8 <I2C_Enable_IRQ+0x114>)
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d030      	beq.n	801285c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80127fe:	4b3b      	ldr	r3, [pc, #236]	@ (80128ec <I2C_Enable_IRQ+0x118>)
 8012800:	429a      	cmp	r2, r3
 8012802:	d02b      	beq.n	801285c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012804:	1cbb      	adds	r3, r7, #2
 8012806:	2200      	movs	r2, #0
 8012808:	5e9b      	ldrsh	r3, [r3, r2]
 801280a:	2b00      	cmp	r3, #0
 801280c:	da03      	bge.n	8012816 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	22b8      	movs	r2, #184	@ 0xb8
 8012812:	4313      	orrs	r3, r2
 8012814:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012816:	1cbb      	adds	r3, r7, #2
 8012818:	881b      	ldrh	r3, [r3, #0]
 801281a:	2201      	movs	r2, #1
 801281c:	4013      	ands	r3, r2
 801281e:	d003      	beq.n	8012828 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	22f2      	movs	r2, #242	@ 0xf2
 8012824:	4313      	orrs	r3, r2
 8012826:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012828:	1cbb      	adds	r3, r7, #2
 801282a:	881b      	ldrh	r3, [r3, #0]
 801282c:	2202      	movs	r2, #2
 801282e:	4013      	ands	r3, r2
 8012830:	d003      	beq.n	801283a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	22f4      	movs	r2, #244	@ 0xf4
 8012836:	4313      	orrs	r3, r2
 8012838:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801283a:	1cbb      	adds	r3, r7, #2
 801283c:	881b      	ldrh	r3, [r3, #0]
 801283e:	2b10      	cmp	r3, #16
 8012840:	d103      	bne.n	801284a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2290      	movs	r2, #144	@ 0x90
 8012846:	4313      	orrs	r3, r2
 8012848:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801284a:	1cbb      	adds	r3, r7, #2
 801284c:	881b      	ldrh	r3, [r3, #0]
 801284e:	2b20      	cmp	r3, #32
 8012850:	d13c      	bne.n	80128cc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	2220      	movs	r2, #32
 8012856:	4313      	orrs	r3, r2
 8012858:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801285a:	e037      	b.n	80128cc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801285c:	1cbb      	adds	r3, r7, #2
 801285e:	2200      	movs	r2, #0
 8012860:	5e9b      	ldrsh	r3, [r3, r2]
 8012862:	2b00      	cmp	r3, #0
 8012864:	da03      	bge.n	801286e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	22b8      	movs	r2, #184	@ 0xb8
 801286a:	4313      	orrs	r3, r2
 801286c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801286e:	1cbb      	adds	r3, r7, #2
 8012870:	881b      	ldrh	r3, [r3, #0]
 8012872:	2201      	movs	r2, #1
 8012874:	4013      	ands	r3, r2
 8012876:	d003      	beq.n	8012880 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	22f2      	movs	r2, #242	@ 0xf2
 801287c:	4313      	orrs	r3, r2
 801287e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012880:	1cbb      	adds	r3, r7, #2
 8012882:	881b      	ldrh	r3, [r3, #0]
 8012884:	2202      	movs	r2, #2
 8012886:	4013      	ands	r3, r2
 8012888:	d003      	beq.n	8012892 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	22f4      	movs	r2, #244	@ 0xf4
 801288e:	4313      	orrs	r3, r2
 8012890:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012892:	1cbb      	adds	r3, r7, #2
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	2b10      	cmp	r3, #16
 8012898:	d103      	bne.n	80128a2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2290      	movs	r2, #144	@ 0x90
 801289e:	4313      	orrs	r3, r2
 80128a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80128a2:	1cbb      	adds	r3, r7, #2
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	2b20      	cmp	r3, #32
 80128a8:	d103      	bne.n	80128b2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2260      	movs	r2, #96	@ 0x60
 80128ae:	4313      	orrs	r3, r2
 80128b0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128b6:	4b0d      	ldr	r3, [pc, #52]	@ (80128ec <I2C_Enable_IRQ+0x118>)
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d007      	beq.n	80128cc <I2C_Enable_IRQ+0xf8>
 80128bc:	1cbb      	adds	r3, r7, #2
 80128be:	881b      	ldrh	r3, [r3, #0]
 80128c0:	2b40      	cmp	r3, #64	@ 0x40
 80128c2:	d103      	bne.n	80128cc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2240      	movs	r2, #64	@ 0x40
 80128c8:	4313      	orrs	r3, r2
 80128ca:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	6819      	ldr	r1, [r3, #0]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	68fa      	ldr	r2, [r7, #12]
 80128d8:	430a      	orrs	r2, r1
 80128da:	601a      	str	r2, [r3, #0]
}
 80128dc:	46c0      	nop			@ (mov r8, r8)
 80128de:	46bd      	mov	sp, r7
 80128e0:	b004      	add	sp, #16
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	08011155 	.word	0x08011155
 80128e8:	08011585 	.word	0x08011585
 80128ec:	0801134d 	.word	0x0801134d

080128f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	000a      	movs	r2, r1
 80128fa:	1cbb      	adds	r3, r7, #2
 80128fc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80128fe:	2300      	movs	r3, #0
 8012900:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012902:	1cbb      	adds	r3, r7, #2
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	2201      	movs	r2, #1
 8012908:	4013      	ands	r3, r2
 801290a:	d010      	beq.n	801292e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2242      	movs	r2, #66	@ 0x42
 8012910:	4313      	orrs	r3, r2
 8012912:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2241      	movs	r2, #65	@ 0x41
 8012918:	5c9b      	ldrb	r3, [r3, r2]
 801291a:	b2db      	uxtb	r3, r3
 801291c:	001a      	movs	r2, r3
 801291e:	2328      	movs	r3, #40	@ 0x28
 8012920:	4013      	ands	r3, r2
 8012922:	2b28      	cmp	r3, #40	@ 0x28
 8012924:	d003      	beq.n	801292e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	22b0      	movs	r2, #176	@ 0xb0
 801292a:	4313      	orrs	r3, r2
 801292c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801292e:	1cbb      	adds	r3, r7, #2
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	2202      	movs	r2, #2
 8012934:	4013      	ands	r3, r2
 8012936:	d010      	beq.n	801295a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2244      	movs	r2, #68	@ 0x44
 801293c:	4313      	orrs	r3, r2
 801293e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2241      	movs	r2, #65	@ 0x41
 8012944:	5c9b      	ldrb	r3, [r3, r2]
 8012946:	b2db      	uxtb	r3, r3
 8012948:	001a      	movs	r2, r3
 801294a:	2328      	movs	r3, #40	@ 0x28
 801294c:	4013      	ands	r3, r2
 801294e:	2b28      	cmp	r3, #40	@ 0x28
 8012950:	d003      	beq.n	801295a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	22b0      	movs	r2, #176	@ 0xb0
 8012956:	4313      	orrs	r3, r2
 8012958:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801295a:	1cbb      	adds	r3, r7, #2
 801295c:	2200      	movs	r2, #0
 801295e:	5e9b      	ldrsh	r3, [r3, r2]
 8012960:	2b00      	cmp	r3, #0
 8012962:	da03      	bge.n	801296c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	22b8      	movs	r2, #184	@ 0xb8
 8012968:	4313      	orrs	r3, r2
 801296a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801296c:	1cbb      	adds	r3, r7, #2
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	2b10      	cmp	r3, #16
 8012972:	d103      	bne.n	801297c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2290      	movs	r2, #144	@ 0x90
 8012978:	4313      	orrs	r3, r2
 801297a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801297c:	1cbb      	adds	r3, r7, #2
 801297e:	881b      	ldrh	r3, [r3, #0]
 8012980:	2b20      	cmp	r3, #32
 8012982:	d103      	bne.n	801298c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2220      	movs	r2, #32
 8012988:	4313      	orrs	r3, r2
 801298a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801298c:	1cbb      	adds	r3, r7, #2
 801298e:	881b      	ldrh	r3, [r3, #0]
 8012990:	2b40      	cmp	r3, #64	@ 0x40
 8012992:	d103      	bne.n	801299c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	2240      	movs	r2, #64	@ 0x40
 8012998:	4313      	orrs	r3, r2
 801299a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	43d9      	mvns	r1, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	400a      	ands	r2, r1
 80129ac:	601a      	str	r2, [r3, #0]
}
 80129ae:	46c0      	nop			@ (mov r8, r8)
 80129b0:	46bd      	mov	sp, r7
 80129b2:	b004      	add	sp, #16
 80129b4:	bd80      	pop	{r7, pc}
	...

080129b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2241      	movs	r2, #65	@ 0x41
 80129c6:	5c9b      	ldrb	r3, [r3, r2]
 80129c8:	b2db      	uxtb	r3, r3
 80129ca:	2b20      	cmp	r3, #32
 80129cc:	d138      	bne.n	8012a40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2240      	movs	r2, #64	@ 0x40
 80129d2:	5c9b      	ldrb	r3, [r3, r2]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d101      	bne.n	80129dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80129d8:	2302      	movs	r3, #2
 80129da:	e032      	b.n	8012a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2240      	movs	r2, #64	@ 0x40
 80129e0:	2101      	movs	r1, #1
 80129e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2241      	movs	r2, #65	@ 0x41
 80129e8:	2124      	movs	r1, #36	@ 0x24
 80129ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	2101      	movs	r1, #1
 80129f8:	438a      	bics	r2, r1
 80129fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4911      	ldr	r1, [pc, #68]	@ (8012a4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012a08:	400a      	ands	r2, r1
 8012a0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	6819      	ldr	r1, [r3, #0]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	683a      	ldr	r2, [r7, #0]
 8012a18:	430a      	orrs	r2, r1
 8012a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	2101      	movs	r1, #1
 8012a28:	430a      	orrs	r2, r1
 8012a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2241      	movs	r2, #65	@ 0x41
 8012a30:	2120      	movs	r1, #32
 8012a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2240      	movs	r2, #64	@ 0x40
 8012a38:	2100      	movs	r1, #0
 8012a3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	e000      	b.n	8012a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012a40:	2302      	movs	r3, #2
  }
}
 8012a42:	0018      	movs	r0, r3
 8012a44:	46bd      	mov	sp, r7
 8012a46:	b002      	add	sp, #8
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	46c0      	nop			@ (mov r8, r8)
 8012a4c:	ffffefff 	.word	0xffffefff

08012a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2241      	movs	r2, #65	@ 0x41
 8012a5e:	5c9b      	ldrb	r3, [r3, r2]
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	2b20      	cmp	r3, #32
 8012a64:	d139      	bne.n	8012ada <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2240      	movs	r2, #64	@ 0x40
 8012a6a:	5c9b      	ldrb	r3, [r3, r2]
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	d101      	bne.n	8012a74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012a70:	2302      	movs	r3, #2
 8012a72:	e033      	b.n	8012adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2240      	movs	r2, #64	@ 0x40
 8012a78:	2101      	movs	r1, #1
 8012a7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2241      	movs	r2, #65	@ 0x41
 8012a80:	2124      	movs	r1, #36	@ 0x24
 8012a82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2101      	movs	r1, #1
 8012a90:	438a      	bics	r2, r1
 8012a92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4a11      	ldr	r2, [pc, #68]	@ (8012ae4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012aa0:	4013      	ands	r3, r2
 8012aa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	021b      	lsls	r3, r3, #8
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	4313      	orrs	r3, r2
 8012aac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2101      	movs	r1, #1
 8012ac2:	430a      	orrs	r2, r1
 8012ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2241      	movs	r2, #65	@ 0x41
 8012aca:	2120      	movs	r1, #32
 8012acc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2240      	movs	r2, #64	@ 0x40
 8012ad2:	2100      	movs	r1, #0
 8012ad4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	e000      	b.n	8012adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012ada:	2302      	movs	r3, #2
  }
}
 8012adc:	0018      	movs	r0, r3
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	b004      	add	sp, #16
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	fffff0ff 	.word	0xfffff0ff

08012ae8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b088      	sub	sp, #32
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d101      	bne.n	8012afa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012af6:	2301      	movs	r3, #1
 8012af8:	e0e1      	b.n	8012cbe <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2235      	movs	r2, #53	@ 0x35
 8012afe:	5c9b      	ldrb	r3, [r3, r2]
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d107      	bne.n	8012b16 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2234      	movs	r2, #52	@ 0x34
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	0018      	movs	r0, r3
 8012b12:	f7f4 ffa9 	bl	8007a68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2235      	movs	r2, #53	@ 0x35
 8012b1a:	2102      	movs	r1, #2
 8012b1c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	69da      	ldr	r2, [r3, #28]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4967      	ldr	r1, [pc, #412]	@ (8012cc8 <HAL_I2S_Init+0x1e0>)
 8012b2a:	400a      	ands	r2, r1
 8012b2c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2202      	movs	r2, #2
 8012b34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	695b      	ldr	r3, [r3, #20]
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	d073      	beq.n	8012c26 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d102      	bne.n	8012b4c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012b46:	2310      	movs	r3, #16
 8012b48:	617b      	str	r3, [r7, #20]
 8012b4a:	e001      	b.n	8012b50 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012b4c:	2320      	movs	r3, #32
 8012b4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	689b      	ldr	r3, [r3, #8]
 8012b54:	2b20      	cmp	r3, #32
 8012b56:	d802      	bhi.n	8012b5e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012b5e:	f002 fed3 	bl	8015908 <HAL_RCC_GetSysClockFreq>
 8012b62:	0003      	movs	r3, r0
 8012b64:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	691a      	ldr	r2, [r3, #16]
 8012b6a:	2380      	movs	r3, #128	@ 0x80
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d131      	bne.n	8012bd6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d016      	beq.n	8012ba8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	009b      	lsls	r3, r3, #2
 8012b7e:	0019      	movs	r1, r3
 8012b80:	68f8      	ldr	r0, [r7, #12]
 8012b82:	f7ed fb0f 	bl	80001a4 <__udivsi3>
 8012b86:	0003      	movs	r3, r0
 8012b88:	001a      	movs	r2, r3
 8012b8a:	0013      	movs	r3, r2
 8012b8c:	009b      	lsls	r3, r3, #2
 8012b8e:	189b      	adds	r3, r3, r2
 8012b90:	005b      	lsls	r3, r3, #1
 8012b92:	001a      	movs	r2, r3
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	695b      	ldr	r3, [r3, #20]
 8012b98:	0019      	movs	r1, r3
 8012b9a:	0010      	movs	r0, r2
 8012b9c:	f7ed fb02 	bl	80001a4 <__udivsi3>
 8012ba0:	0003      	movs	r3, r0
 8012ba2:	3305      	adds	r3, #5
 8012ba4:	613b      	str	r3, [r7, #16]
 8012ba6:	e02a      	b.n	8012bfe <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	00db      	lsls	r3, r3, #3
 8012bac:	0019      	movs	r1, r3
 8012bae:	68f8      	ldr	r0, [r7, #12]
 8012bb0:	f7ed faf8 	bl	80001a4 <__udivsi3>
 8012bb4:	0003      	movs	r3, r0
 8012bb6:	001a      	movs	r2, r3
 8012bb8:	0013      	movs	r3, r2
 8012bba:	009b      	lsls	r3, r3, #2
 8012bbc:	189b      	adds	r3, r3, r2
 8012bbe:	005b      	lsls	r3, r3, #1
 8012bc0:	001a      	movs	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	695b      	ldr	r3, [r3, #20]
 8012bc6:	0019      	movs	r1, r3
 8012bc8:	0010      	movs	r0, r2
 8012bca:	f7ed faeb 	bl	80001a4 <__udivsi3>
 8012bce:	0003      	movs	r3, r0
 8012bd0:	3305      	adds	r3, #5
 8012bd2:	613b      	str	r3, [r7, #16]
 8012bd4:	e013      	b.n	8012bfe <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012bd6:	6979      	ldr	r1, [r7, #20]
 8012bd8:	68f8      	ldr	r0, [r7, #12]
 8012bda:	f7ed fae3 	bl	80001a4 <__udivsi3>
 8012bde:	0003      	movs	r3, r0
 8012be0:	001a      	movs	r2, r3
 8012be2:	0013      	movs	r3, r2
 8012be4:	009b      	lsls	r3, r3, #2
 8012be6:	189b      	adds	r3, r3, r2
 8012be8:	005b      	lsls	r3, r3, #1
 8012bea:	001a      	movs	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	695b      	ldr	r3, [r3, #20]
 8012bf0:	0019      	movs	r1, r3
 8012bf2:	0010      	movs	r0, r2
 8012bf4:	f7ed fad6 	bl	80001a4 <__udivsi3>
 8012bf8:	0003      	movs	r3, r0
 8012bfa:	3305      	adds	r3, #5
 8012bfc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	210a      	movs	r1, #10
 8012c02:	0018      	movs	r0, r3
 8012c04:	f7ed face 	bl	80001a4 <__udivsi3>
 8012c08:	0003      	movs	r3, r0
 8012c0a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	2201      	movs	r2, #1
 8012c10:	4013      	ands	r3, r2
 8012c12:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012c14:	693a      	ldr	r2, [r7, #16]
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	1ad3      	subs	r3, r2, r3
 8012c1a:	085b      	lsrs	r3, r3, #1
 8012c1c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	021b      	lsls	r3, r3, #8
 8012c22:	61bb      	str	r3, [r7, #24]
 8012c24:	e003      	b.n	8012c2e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012c26:	2302      	movs	r3, #2
 8012c28:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d902      	bls.n	8012c3a <HAL_I2S_Init+0x152>
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	2bff      	cmp	r3, #255	@ 0xff
 8012c38:	d907      	bls.n	8012c4a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c3e:	2210      	movs	r2, #16
 8012c40:	431a      	orrs	r2, r3
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012c46:	2301      	movs	r3, #1
 8012c48:	e039      	b.n	8012cbe <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	691a      	ldr	r2, [r3, #16]
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	431a      	orrs	r2, r3
 8012c52:	0011      	movs	r1, r2
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	69fa      	ldr	r2, [r7, #28]
 8012c5a:	430a      	orrs	r2, r1
 8012c5c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	69db      	ldr	r3, [r3, #28]
 8012c64:	4a18      	ldr	r2, [pc, #96]	@ (8012cc8 <HAL_I2S_Init+0x1e0>)
 8012c66:	401a      	ands	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6859      	ldr	r1, [r3, #4]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	4319      	orrs	r1, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	4319      	orrs	r1, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	699b      	ldr	r3, [r3, #24]
 8012c7c:	430b      	orrs	r3, r1
 8012c7e:	431a      	orrs	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2180      	movs	r1, #128	@ 0x80
 8012c86:	0109      	lsls	r1, r1, #4
 8012c88:	430a      	orrs	r2, r1
 8012c8a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	689b      	ldr	r3, [r3, #8]
 8012c90:	2b30      	cmp	r3, #48	@ 0x30
 8012c92:	d003      	beq.n	8012c9c <HAL_I2S_Init+0x1b4>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	2bb0      	cmp	r3, #176	@ 0xb0
 8012c9a:	d108      	bne.n	8012cae <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	69da      	ldr	r2, [r3, #28]
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	2180      	movs	r1, #128	@ 0x80
 8012ca8:	0149      	lsls	r1, r1, #5
 8012caa:	430a      	orrs	r2, r1
 8012cac:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2235      	movs	r2, #53	@ 0x35
 8012cb8:	2101      	movs	r1, #1
 8012cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	0018      	movs	r0, r3
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	b008      	add	sp, #32
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	46c0      	nop			@ (mov r8, r8)
 8012cc8:	fffff040 	.word	0xfffff040

08012ccc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b086      	sub	sp, #24
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	1dbb      	adds	r3, r7, #6
 8012cd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d003      	beq.n	8012ce8 <HAL_I2S_Receive_DMA+0x1c>
 8012ce0:	1dbb      	adds	r3, r7, #6
 8012ce2:	881b      	ldrh	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e0a6      	b.n	8012e3a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2234      	movs	r2, #52	@ 0x34
 8012cf0:	5c9b      	ldrb	r3, [r3, r2]
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d101      	bne.n	8012cfc <HAL_I2S_Receive_DMA+0x30>
 8012cf8:	2302      	movs	r3, #2
 8012cfa:	e09e      	b.n	8012e3a <HAL_I2S_Receive_DMA+0x16e>
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2234      	movs	r2, #52	@ 0x34
 8012d00:	2101      	movs	r1, #1
 8012d02:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2235      	movs	r2, #53	@ 0x35
 8012d08:	5c9b      	ldrb	r3, [r3, r2]
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d005      	beq.n	8012d1c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2234      	movs	r2, #52	@ 0x34
 8012d14:	2100      	movs	r1, #0
 8012d16:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012d18:	2302      	movs	r3, #2
 8012d1a:	e08e      	b.n	8012e3a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2235      	movs	r2, #53	@ 0x35
 8012d20:	2104      	movs	r1, #4
 8012d22:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2200      	movs	r2, #0
 8012d28:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	68ba      	ldr	r2, [r7, #8]
 8012d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	69db      	ldr	r3, [r3, #28]
 8012d36:	2207      	movs	r2, #7
 8012d38:	4013      	ands	r3, r2
 8012d3a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	2b03      	cmp	r3, #3
 8012d40:	d002      	beq.n	8012d48 <HAL_I2S_Receive_DMA+0x7c>
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	2b05      	cmp	r3, #5
 8012d46:	d10c      	bne.n	8012d62 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012d48:	1dbb      	adds	r3, r7, #6
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	18db      	adds	r3, r3, r3
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012d54:	1dbb      	adds	r3, r7, #6
 8012d56:	881b      	ldrh	r3, [r3, #0]
 8012d58:	18db      	adds	r3, r3, r3
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012d60:	e007      	b.n	8012d72 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	1dba      	adds	r2, r7, #6
 8012d66:	8812      	ldrh	r2, [r2, #0]
 8012d68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	1dba      	adds	r2, r7, #6
 8012d6e:	8812      	ldrh	r2, [r2, #0]
 8012d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d76:	4a33      	ldr	r2, [pc, #204]	@ (8012e44 <HAL_I2S_Receive_DMA+0x178>)
 8012d78:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d7e:	4a32      	ldr	r2, [pc, #200]	@ (8012e48 <HAL_I2S_Receive_DMA+0x17c>)
 8012d80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d86:	4a31      	ldr	r2, [pc, #196]	@ (8012e4c <HAL_I2S_Receive_DMA+0x180>)
 8012d88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	69da      	ldr	r2, [r3, #28]
 8012d90:	23c0      	movs	r3, #192	@ 0xc0
 8012d92:	009b      	lsls	r3, r3, #2
 8012d94:	401a      	ands	r2, r3
 8012d96:	23c0      	movs	r3, #192	@ 0xc0
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d10a      	bne.n	8012db4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012d9e:	2300      	movs	r3, #0
 8012da0:	613b      	str	r3, [r7, #16]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	613b      	str	r3, [r7, #16]
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	689b      	ldr	r3, [r3, #8]
 8012db0:	613b      	str	r3, [r7, #16]
 8012db2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	330c      	adds	r3, #12
 8012dbe:	0019      	movs	r1, r3
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dc4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012dcc:	f7fc fca2 	bl	800f714 <HAL_DMA_Start_IT>
 8012dd0:	1e03      	subs	r3, r0, #0
 8012dd2:	d00f      	beq.n	8012df4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dd8:	2208      	movs	r2, #8
 8012dda:	431a      	orrs	r2, r3
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2235      	movs	r2, #53	@ 0x35
 8012de4:	2101      	movs	r1, #1
 8012de6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2234      	movs	r2, #52	@ 0x34
 8012dec:	2100      	movs	r1, #0
 8012dee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e022      	b.n	8012e3a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	69da      	ldr	r2, [r3, #28]
 8012dfa:	2380      	movs	r3, #128	@ 0x80
 8012dfc:	00db      	lsls	r3, r3, #3
 8012dfe:	4013      	ands	r3, r2
 8012e00:	d108      	bne.n	8012e14 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	69da      	ldr	r2, [r3, #28]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	2180      	movs	r1, #128	@ 0x80
 8012e0e:	00c9      	lsls	r1, r1, #3
 8012e10:	430a      	orrs	r2, r1
 8012e12:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	4013      	ands	r3, r2
 8012e1e:	d107      	bne.n	8012e30 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	685a      	ldr	r2, [r3, #4]
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2101      	movs	r1, #1
 8012e2c:	430a      	orrs	r2, r1
 8012e2e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2234      	movs	r2, #52	@ 0x34
 8012e34:	2100      	movs	r1, #0
 8012e36:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012e38:	2300      	movs	r3, #0
}
 8012e3a:	0018      	movs	r0, r3
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	b006      	add	sp, #24
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	46c0      	nop			@ (mov r8, r8)
 8012e44:	0801302d 	.word	0x0801302d
 8012e48:	08012fe9 	.word	0x08012fe9
 8012e4c:	0801304b 	.word	0x0801304b

08012e50 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e58:	2317      	movs	r3, #23
 8012e5a:	18fb      	adds	r3, r7, r3
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	685a      	ldr	r2, [r3, #4]
 8012e64:	2380      	movs	r3, #128	@ 0x80
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d003      	beq.n	8012e74 <HAL_I2S_DMAStop+0x24>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d158      	bne.n	8012f26 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d010      	beq.n	8012e9e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e80:	0018      	movs	r0, r3
 8012e82:	f7fc fcad 	bl	800f7e0 <HAL_DMA_Abort>
 8012e86:	1e03      	subs	r3, r0, #0
 8012e88:	d009      	beq.n	8012e9e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e8e:	2208      	movs	r2, #8
 8012e90:	431a      	orrs	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012e96:	2317      	movs	r3, #23
 8012e98:	18fb      	adds	r3, r7, r3
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	2364      	movs	r3, #100	@ 0x64
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	2102      	movs	r1, #2
 8012ea6:	f000 f8f7 	bl	8013098 <I2S_WaitFlagStateUntilTimeout>
 8012eaa:	1e03      	subs	r3, r0, #0
 8012eac:	d00d      	beq.n	8012eca <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	431a      	orrs	r2, r3
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2235      	movs	r2, #53	@ 0x35
 8012ebe:	2101      	movs	r1, #1
 8012ec0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012ec2:	2317      	movs	r3, #23
 8012ec4:	18fb      	adds	r3, r7, r3
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	2364      	movs	r3, #100	@ 0x64
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2180      	movs	r1, #128	@ 0x80
 8012ed2:	f000 f8e1 	bl	8013098 <I2S_WaitFlagStateUntilTimeout>
 8012ed6:	1e03      	subs	r3, r0, #0
 8012ed8:	d00d      	beq.n	8012ef6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ede:	2201      	movs	r2, #1
 8012ee0:	431a      	orrs	r2, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2235      	movs	r2, #53	@ 0x35
 8012eea:	2101      	movs	r1, #1
 8012eec:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012eee:	2317      	movs	r3, #23
 8012ef0:	18fb      	adds	r3, r7, r3
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	69da      	ldr	r2, [r3, #28]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	4938      	ldr	r1, [pc, #224]	@ (8012fe4 <HAL_I2S_DMAStop+0x194>)
 8012f02:	400a      	ands	r2, r1
 8012f04:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012f06:	2300      	movs	r3, #0
 8012f08:	613b      	str	r3, [r7, #16]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	689b      	ldr	r3, [r3, #8]
 8012f10:	613b      	str	r3, [r7, #16]
 8012f12:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	685a      	ldr	r2, [r3, #4]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	2102      	movs	r1, #2
 8012f20:	438a      	bics	r2, r1
 8012f22:	605a      	str	r2, [r3, #4]
 8012f24:	e053      	b.n	8012fce <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	685a      	ldr	r2, [r3, #4]
 8012f2a:	23c0      	movs	r3, #192	@ 0xc0
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d005      	beq.n	8012f3e <HAL_I2S_DMAStop+0xee>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	685a      	ldr	r2, [r3, #4]
 8012f36:	2380      	movs	r3, #128	@ 0x80
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d147      	bne.n	8012fce <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d010      	beq.n	8012f68 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f4a:	0018      	movs	r0, r3
 8012f4c:	f7fc fc48 	bl	800f7e0 <HAL_DMA_Abort>
 8012f50:	1e03      	subs	r3, r0, #0
 8012f52:	d009      	beq.n	8012f68 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f58:	2208      	movs	r2, #8
 8012f5a:	431a      	orrs	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012f60:	2317      	movs	r3, #23
 8012f62:	18fb      	adds	r3, r7, r3
 8012f64:	2201      	movs	r2, #1
 8012f66:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	69da      	ldr	r2, [r3, #28]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	491c      	ldr	r1, [pc, #112]	@ (8012fe4 <HAL_I2S_DMAStop+0x194>)
 8012f74:	400a      	ands	r2, r1
 8012f76:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012f78:	2300      	movs	r3, #0
 8012f7a:	60fb      	str	r3, [r7, #12]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	60fb      	str	r3, [r7, #12]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	689b      	ldr	r3, [r3, #8]
 8012f8a:	60fb      	str	r3, [r7, #12]
 8012f8c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	685a      	ldr	r2, [r3, #4]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2101      	movs	r1, #1
 8012f9a:	438a      	bics	r2, r1
 8012f9c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	685a      	ldr	r2, [r3, #4]
 8012fa2:	2380      	movs	r3, #128	@ 0x80
 8012fa4:	005b      	lsls	r3, r3, #1
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d10e      	bne.n	8012fc8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fae:	2240      	movs	r2, #64	@ 0x40
 8012fb0:	431a      	orrs	r2, r3
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2235      	movs	r2, #53	@ 0x35
 8012fba:	2101      	movs	r1, #1
 8012fbc:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8012fbe:	2317      	movs	r3, #23
 8012fc0:	18fb      	adds	r3, r7, r3
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	701a      	strb	r2, [r3, #0]
 8012fc6:	e002      	b.n	8012fce <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2235      	movs	r2, #53	@ 0x35
 8012fd2:	2101      	movs	r1, #1
 8012fd4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8012fd6:	2317      	movs	r3, #23
 8012fd8:	18fb      	adds	r3, r7, r3
 8012fda:	781b      	ldrb	r3, [r3, #0]
}
 8012fdc:	0018      	movs	r0, r3
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	b006      	add	sp, #24
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	fffffbff 	.word	0xfffffbff

08012fe8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b084      	sub	sp, #16
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ff4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	69db      	ldr	r3, [r3, #28]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d10e      	bne.n	801301c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	685a      	ldr	r2, [r3, #4]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	2101      	movs	r1, #1
 801300a:	438a      	bics	r2, r1
 801300c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2200      	movs	r2, #0
 8013012:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2235      	movs	r2, #53	@ 0x35
 8013018:	2101      	movs	r1, #1
 801301a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	0018      	movs	r0, r3
 8013020:	f7f9 fa86 	bl	800c530 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013024:	46c0      	nop			@ (mov r8, r8)
 8013026:	46bd      	mov	sp, r7
 8013028:	b004      	add	sp, #16
 801302a:	bd80      	pop	{r7, pc}

0801302c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013038:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	0018      	movs	r0, r3
 801303e:	f7f9 fa65 	bl	800c50c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013042:	46c0      	nop			@ (mov r8, r8)
 8013044:	46bd      	mov	sp, r7
 8013046:	b004      	add	sp, #16
 8013048:	bd80      	pop	{r7, pc}

0801304a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801304a:	b580      	push	{r7, lr}
 801304c:	b084      	sub	sp, #16
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013056:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	685a      	ldr	r2, [r3, #4]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	2103      	movs	r1, #3
 8013064:	438a      	bics	r2, r1
 8013066:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2200      	movs	r2, #0
 801306c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2200      	movs	r2, #0
 8013072:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2235      	movs	r2, #53	@ 0x35
 8013078:	2101      	movs	r1, #1
 801307a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013080:	2208      	movs	r2, #8
 8013082:	431a      	orrs	r2, r3
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	0018      	movs	r0, r3
 801308c:	f7f9 fa9e 	bl	800c5cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013090:	46c0      	nop			@ (mov r8, r8)
 8013092:	46bd      	mov	sp, r7
 8013094:	b004      	add	sp, #16
 8013096:	bd80      	pop	{r7, pc}

08013098 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b086      	sub	sp, #24
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	603b      	str	r3, [r7, #0]
 80130a4:	1dfb      	adds	r3, r7, #7
 80130a6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80130a8:	f7fb fde2 	bl	800ec70 <HAL_GetTick>
 80130ac:	0003      	movs	r3, r0
 80130ae:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80130b0:	e017      	b.n	80130e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	3301      	adds	r3, #1
 80130b6:	d014      	beq.n	80130e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80130b8:	f7fb fdda 	bl	800ec70 <HAL_GetTick>
 80130bc:	0002      	movs	r2, r0
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	1ad3      	subs	r3, r2, r3
 80130c2:	683a      	ldr	r2, [r7, #0]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d902      	bls.n	80130ce <I2S_WaitFlagStateUntilTimeout+0x36>
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d109      	bne.n	80130e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2235      	movs	r2, #53	@ 0x35
 80130d2:	2101      	movs	r1, #1
 80130d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2234      	movs	r2, #52	@ 0x34
 80130da:	2100      	movs	r1, #0
 80130dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80130de:	2303      	movs	r3, #3
 80130e0:	e00f      	b.n	8013102 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	689b      	ldr	r3, [r3, #8]
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	4013      	ands	r3, r2
 80130ec:	68ba      	ldr	r2, [r7, #8]
 80130ee:	1ad3      	subs	r3, r2, r3
 80130f0:	425a      	negs	r2, r3
 80130f2:	4153      	adcs	r3, r2
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	001a      	movs	r2, r3
 80130f8:	1dfb      	adds	r3, r7, #7
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	429a      	cmp	r2, r3
 80130fe:	d1d8      	bne.n	80130b2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013100:	2300      	movs	r3, #0
}
 8013102:	0018      	movs	r0, r3
 8013104:	46bd      	mov	sp, r7
 8013106:	b006      	add	sp, #24
 8013108:	bd80      	pop	{r7, pc}
	...

0801310c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801310e:	b08b      	sub	sp, #44	@ 0x2c
 8013110:	af06      	add	r7, sp, #24
 8013112:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d101      	bne.n	801311e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801311a:	2301      	movs	r3, #1
 801311c:	e0f0      	b.n	8013300 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4a79      	ldr	r2, [pc, #484]	@ (8013308 <HAL_PCD_Init+0x1fc>)
 8013122:	5c9b      	ldrb	r3, [r3, r2]
 8013124:	b2db      	uxtb	r3, r3
 8013126:	2b00      	cmp	r3, #0
 8013128:	d108      	bne.n	801313c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	23aa      	movs	r3, #170	@ 0xaa
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	2100      	movs	r1, #0
 8013132:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	0018      	movs	r0, r3
 8013138:	f009 ff4a 	bl	801cfd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	4a72      	ldr	r2, [pc, #456]	@ (8013308 <HAL_PCD_Init+0x1fc>)
 8013140:	2103      	movs	r1, #3
 8013142:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	0018      	movs	r0, r3
 801314a:	f005 fefd 	bl	8018f48 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801314e:	230f      	movs	r3, #15
 8013150:	18fb      	adds	r3, r7, r3
 8013152:	2200      	movs	r2, #0
 8013154:	701a      	strb	r2, [r3, #0]
 8013156:	e049      	b.n	80131ec <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013158:	200f      	movs	r0, #15
 801315a:	183b      	adds	r3, r7, r0
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	6879      	ldr	r1, [r7, #4]
 8013160:	1c5a      	adds	r2, r3, #1
 8013162:	0013      	movs	r3, r2
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	189b      	adds	r3, r3, r2
 8013168:	00db      	lsls	r3, r3, #3
 801316a:	18cb      	adds	r3, r1, r3
 801316c:	3301      	adds	r3, #1
 801316e:	2201      	movs	r2, #1
 8013170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013172:	183b      	adds	r3, r7, r0
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	6879      	ldr	r1, [r7, #4]
 8013178:	1c5a      	adds	r2, r3, #1
 801317a:	0013      	movs	r3, r2
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	189b      	adds	r3, r3, r2
 8013180:	00db      	lsls	r3, r3, #3
 8013182:	183a      	adds	r2, r7, r0
 8013184:	7812      	ldrb	r2, [r2, #0]
 8013186:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013188:	183b      	adds	r3, r7, r0
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	6879      	ldr	r1, [r7, #4]
 801318e:	1c5a      	adds	r2, r3, #1
 8013190:	0013      	movs	r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	189b      	adds	r3, r3, r2
 8013196:	00db      	lsls	r3, r3, #3
 8013198:	18cb      	adds	r3, r1, r3
 801319a:	3303      	adds	r3, #3
 801319c:	2200      	movs	r2, #0
 801319e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80131a0:	183b      	adds	r3, r7, r0
 80131a2:	781a      	ldrb	r2, [r3, #0]
 80131a4:	6879      	ldr	r1, [r7, #4]
 80131a6:	0013      	movs	r3, r2
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	189b      	adds	r3, r3, r2
 80131ac:	00db      	lsls	r3, r3, #3
 80131ae:	18cb      	adds	r3, r1, r3
 80131b0:	3338      	adds	r3, #56	@ 0x38
 80131b2:	2200      	movs	r2, #0
 80131b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80131b6:	183b      	adds	r3, r7, r0
 80131b8:	781a      	ldrb	r2, [r3, #0]
 80131ba:	6879      	ldr	r1, [r7, #4]
 80131bc:	0013      	movs	r3, r2
 80131be:	009b      	lsls	r3, r3, #2
 80131c0:	189b      	adds	r3, r3, r2
 80131c2:	00db      	lsls	r3, r3, #3
 80131c4:	18cb      	adds	r3, r1, r3
 80131c6:	333c      	adds	r3, #60	@ 0x3c
 80131c8:	2200      	movs	r2, #0
 80131ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80131cc:	183b      	adds	r3, r7, r0
 80131ce:	781a      	ldrb	r2, [r3, #0]
 80131d0:	6879      	ldr	r1, [r7, #4]
 80131d2:	0013      	movs	r3, r2
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	189b      	adds	r3, r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	18cb      	adds	r3, r1, r3
 80131dc:	3340      	adds	r3, #64	@ 0x40
 80131de:	2200      	movs	r2, #0
 80131e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80131e2:	183b      	adds	r3, r7, r0
 80131e4:	781a      	ldrb	r2, [r3, #0]
 80131e6:	183b      	adds	r3, r7, r0
 80131e8:	3201      	adds	r2, #1
 80131ea:	701a      	strb	r2, [r3, #0]
 80131ec:	210f      	movs	r1, #15
 80131ee:	187b      	adds	r3, r7, r1
 80131f0:	781a      	ldrb	r2, [r3, #0]
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d3ae      	bcc.n	8013158 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80131fa:	187b      	adds	r3, r7, r1
 80131fc:	2200      	movs	r2, #0
 80131fe:	701a      	strb	r2, [r3, #0]
 8013200:	e056      	b.n	80132b0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013202:	240f      	movs	r4, #15
 8013204:	193b      	adds	r3, r7, r4
 8013206:	781a      	ldrb	r2, [r3, #0]
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	236a      	movs	r3, #106	@ 0x6a
 801320c:	33ff      	adds	r3, #255	@ 0xff
 801320e:	0019      	movs	r1, r3
 8013210:	0013      	movs	r3, r2
 8013212:	009b      	lsls	r3, r3, #2
 8013214:	189b      	adds	r3, r3, r2
 8013216:	00db      	lsls	r3, r3, #3
 8013218:	18c3      	adds	r3, r0, r3
 801321a:	185b      	adds	r3, r3, r1
 801321c:	2200      	movs	r2, #0
 801321e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013220:	193b      	adds	r3, r7, r4
 8013222:	781a      	ldrb	r2, [r3, #0]
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	23b4      	movs	r3, #180	@ 0xb4
 8013228:	0059      	lsls	r1, r3, #1
 801322a:	0013      	movs	r3, r2
 801322c:	009b      	lsls	r3, r3, #2
 801322e:	189b      	adds	r3, r3, r2
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	18c3      	adds	r3, r0, r3
 8013234:	185b      	adds	r3, r3, r1
 8013236:	193a      	adds	r2, r7, r4
 8013238:	7812      	ldrb	r2, [r2, #0]
 801323a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801323c:	193b      	adds	r3, r7, r4
 801323e:	781a      	ldrb	r2, [r3, #0]
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	236c      	movs	r3, #108	@ 0x6c
 8013244:	33ff      	adds	r3, #255	@ 0xff
 8013246:	0019      	movs	r1, r3
 8013248:	0013      	movs	r3, r2
 801324a:	009b      	lsls	r3, r3, #2
 801324c:	189b      	adds	r3, r3, r2
 801324e:	00db      	lsls	r3, r3, #3
 8013250:	18c3      	adds	r3, r0, r3
 8013252:	185b      	adds	r3, r3, r1
 8013254:	2200      	movs	r2, #0
 8013256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013258:	193b      	adds	r3, r7, r4
 801325a:	781a      	ldrb	r2, [r3, #0]
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	23bc      	movs	r3, #188	@ 0xbc
 8013260:	0059      	lsls	r1, r3, #1
 8013262:	0013      	movs	r3, r2
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	189b      	adds	r3, r3, r2
 8013268:	00db      	lsls	r3, r3, #3
 801326a:	18c3      	adds	r3, r0, r3
 801326c:	185b      	adds	r3, r3, r1
 801326e:	2200      	movs	r2, #0
 8013270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013272:	193b      	adds	r3, r7, r4
 8013274:	781a      	ldrb	r2, [r3, #0]
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	23be      	movs	r3, #190	@ 0xbe
 801327a:	0059      	lsls	r1, r3, #1
 801327c:	0013      	movs	r3, r2
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	189b      	adds	r3, r3, r2
 8013282:	00db      	lsls	r3, r3, #3
 8013284:	18c3      	adds	r3, r0, r3
 8013286:	185b      	adds	r3, r3, r1
 8013288:	2200      	movs	r2, #0
 801328a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801328c:	193b      	adds	r3, r7, r4
 801328e:	781a      	ldrb	r2, [r3, #0]
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	23c0      	movs	r3, #192	@ 0xc0
 8013294:	0059      	lsls	r1, r3, #1
 8013296:	0013      	movs	r3, r2
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	189b      	adds	r3, r3, r2
 801329c:	00db      	lsls	r3, r3, #3
 801329e:	18c3      	adds	r3, r0, r3
 80132a0:	185b      	adds	r3, r3, r1
 80132a2:	2200      	movs	r2, #0
 80132a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80132a6:	193b      	adds	r3, r7, r4
 80132a8:	781a      	ldrb	r2, [r3, #0]
 80132aa:	193b      	adds	r3, r7, r4
 80132ac:	3201      	adds	r2, #1
 80132ae:	701a      	strb	r2, [r3, #0]
 80132b0:	230f      	movs	r3, #15
 80132b2:	18fb      	adds	r3, r7, r3
 80132b4:	781a      	ldrb	r2, [r3, #0]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d3a1      	bcc.n	8013202 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6818      	ldr	r0, [r3, #0]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	466a      	mov	r2, sp
 80132c6:	0011      	movs	r1, r2
 80132c8:	001a      	movs	r2, r3
 80132ca:	3210      	adds	r2, #16
 80132cc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80132ce:	c170      	stmia	r1!, {r4, r5, r6}
 80132d0:	ca30      	ldmia	r2!, {r4, r5}
 80132d2:	c130      	stmia	r1!, {r4, r5}
 80132d4:	6859      	ldr	r1, [r3, #4]
 80132d6:	689a      	ldr	r2, [r3, #8]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	f005 fe4f 	bl	8018f7c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2224      	movs	r2, #36	@ 0x24
 80132e2:	2100      	movs	r1, #0
 80132e4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4a07      	ldr	r2, [pc, #28]	@ (8013308 <HAL_PCD_Init+0x1fc>)
 80132ea:	2101      	movs	r1, #1
 80132ec:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	69db      	ldr	r3, [r3, #28]
 80132f2:	2b01      	cmp	r3, #1
 80132f4:	d103      	bne.n	80132fe <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	0018      	movs	r0, r3
 80132fa:	f001 fd23 	bl	8014d44 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	0018      	movs	r0, r3
 8013302:	46bd      	mov	sp, r7
 8013304:	b005      	add	sp, #20
 8013306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013308:	000002a9 	.word	0x000002a9

0801330c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	23aa      	movs	r3, #170	@ 0xaa
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	5cd3      	ldrb	r3, [r2, r3]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d101      	bne.n	8013324 <HAL_PCD_Start+0x18>
 8013320:	2302      	movs	r3, #2
 8013322:	e014      	b.n	801334e <HAL_PCD_Start+0x42>
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	23aa      	movs	r3, #170	@ 0xaa
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	2101      	movs	r1, #1
 801332c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	0018      	movs	r0, r3
 8013334:	f005 fdf2 	bl	8018f1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	0018      	movs	r0, r3
 801333e:	f007 fdf5 	bl	801af2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	23aa      	movs	r3, #170	@ 0xaa
 8013346:	009b      	lsls	r3, r3, #2
 8013348:	2100      	movs	r1, #0
 801334a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801334c:	2300      	movs	r3, #0
}
 801334e:	0018      	movs	r0, r3
 8013350:	46bd      	mov	sp, r7
 8013352:	b002      	add	sp, #8
 8013354:	bd80      	pop	{r7, pc}
	...

08013358 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	0018      	movs	r0, r3
 8013366:	f007 fdf7 	bl	801af58 <USB_ReadInterrupts>
 801336a:	0003      	movs	r3, r0
 801336c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801336e:	68fa      	ldr	r2, [r7, #12]
 8013370:	2380      	movs	r3, #128	@ 0x80
 8013372:	021b      	lsls	r3, r3, #8
 8013374:	4013      	ands	r3, r2
 8013376:	d004      	beq.n	8013382 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	0018      	movs	r0, r3
 801337c:	f000 fb62 	bl	8013a44 <PCD_EP_ISR_Handler>

    return;
 8013380:	e11d      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	2380      	movs	r3, #128	@ 0x80
 8013386:	00db      	lsls	r3, r3, #3
 8013388:	4013      	ands	r3, r2
 801338a:	d015      	beq.n	80133b8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	2244      	movs	r2, #68	@ 0x44
 8013392:	5a9b      	ldrh	r3, [r3, r2]
 8013394:	b29a      	uxth	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	498a      	ldr	r1, [pc, #552]	@ (80135c4 <HAL_PCD_IRQHandler+0x26c>)
 801339c:	400a      	ands	r2, r1
 801339e:	b291      	uxth	r1, r2
 80133a0:	2244      	movs	r2, #68	@ 0x44
 80133a2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	0018      	movs	r0, r3
 80133a8:	f009 fe95 	bl	801d0d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2100      	movs	r1, #0
 80133b0:	0018      	movs	r0, r3
 80133b2:	f000 f915 	bl	80135e0 <HAL_PCD_SetAddress>

    return;
 80133b6:	e102      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	2380      	movs	r3, #128	@ 0x80
 80133bc:	01db      	lsls	r3, r3, #7
 80133be:	4013      	ands	r3, r2
 80133c0:	d00c      	beq.n	80133dc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2244      	movs	r2, #68	@ 0x44
 80133c8:	5a9b      	ldrh	r3, [r3, r2]
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	497d      	ldr	r1, [pc, #500]	@ (80135c8 <HAL_PCD_IRQHandler+0x270>)
 80133d2:	400a      	ands	r2, r1
 80133d4:	b291      	uxth	r1, r2
 80133d6:	2244      	movs	r2, #68	@ 0x44
 80133d8:	5299      	strh	r1, [r3, r2]

    return;
 80133da:	e0f0      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	2380      	movs	r3, #128	@ 0x80
 80133e0:	019b      	lsls	r3, r3, #6
 80133e2:	4013      	ands	r3, r2
 80133e4:	d00c      	beq.n	8013400 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2244      	movs	r2, #68	@ 0x44
 80133ec:	5a9b      	ldrh	r3, [r3, r2]
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4975      	ldr	r1, [pc, #468]	@ (80135cc <HAL_PCD_IRQHandler+0x274>)
 80133f6:	400a      	ands	r2, r1
 80133f8:	b291      	uxth	r1, r2
 80133fa:	2244      	movs	r2, #68	@ 0x44
 80133fc:	5299      	strh	r1, [r3, r2]

    return;
 80133fe:	e0de      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	2380      	movs	r3, #128	@ 0x80
 8013404:	015b      	lsls	r3, r3, #5
 8013406:	4013      	ands	r3, r2
 8013408:	d038      	beq.n	801347c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	2240      	movs	r2, #64	@ 0x40
 8013410:	5a9b      	ldrh	r3, [r3, r2]
 8013412:	b29a      	uxth	r2, r3
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	2104      	movs	r1, #4
 801341a:	438a      	bics	r2, r1
 801341c:	b291      	uxth	r1, r2
 801341e:	2240      	movs	r2, #64	@ 0x40
 8013420:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2240      	movs	r2, #64	@ 0x40
 8013428:	5a9b      	ldrh	r3, [r3, r2]
 801342a:	b29a      	uxth	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	2108      	movs	r1, #8
 8013432:	438a      	bics	r2, r1
 8013434:	b291      	uxth	r1, r2
 8013436:	2240      	movs	r2, #64	@ 0x40
 8013438:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	23b8      	movs	r3, #184	@ 0xb8
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	5cd3      	ldrb	r3, [r2, r3]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d109      	bne.n	801345a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	23b8      	movs	r3, #184	@ 0xb8
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	2100      	movs	r1, #0
 801344e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2100      	movs	r1, #0
 8013454:	0018      	movs	r0, r3
 8013456:	f001 fc9f 	bl	8014d98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	0018      	movs	r0, r3
 801345e:	f009 fe7b 	bl	801d158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	2244      	movs	r2, #68	@ 0x44
 8013468:	5a9b      	ldrh	r3, [r3, r2]
 801346a:	b29a      	uxth	r2, r3
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4957      	ldr	r1, [pc, #348]	@ (80135d0 <HAL_PCD_IRQHandler+0x278>)
 8013472:	400a      	ands	r2, r1
 8013474:	b291      	uxth	r1, r2
 8013476:	2244      	movs	r2, #68	@ 0x44
 8013478:	5299      	strh	r1, [r3, r2]

    return;
 801347a:	e0a0      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 801347c:	68fa      	ldr	r2, [r7, #12]
 801347e:	2380      	movs	r3, #128	@ 0x80
 8013480:	011b      	lsls	r3, r3, #4
 8013482:	4013      	ands	r3, r2
 8013484:	d028      	beq.n	80134d8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2240      	movs	r2, #64	@ 0x40
 801348c:	5a9b      	ldrh	r3, [r3, r2]
 801348e:	b29a      	uxth	r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	2108      	movs	r1, #8
 8013496:	430a      	orrs	r2, r1
 8013498:	b291      	uxth	r1, r2
 801349a:	2240      	movs	r2, #64	@ 0x40
 801349c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2244      	movs	r2, #68	@ 0x44
 80134a4:	5a9b      	ldrh	r3, [r3, r2]
 80134a6:	b29a      	uxth	r2, r3
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4949      	ldr	r1, [pc, #292]	@ (80135d4 <HAL_PCD_IRQHandler+0x27c>)
 80134ae:	400a      	ands	r2, r1
 80134b0:	b291      	uxth	r1, r2
 80134b2:	2244      	movs	r2, #68	@ 0x44
 80134b4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2240      	movs	r2, #64	@ 0x40
 80134bc:	5a9b      	ldrh	r3, [r3, r2]
 80134be:	b29a      	uxth	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	2104      	movs	r1, #4
 80134c6:	430a      	orrs	r2, r1
 80134c8:	b291      	uxth	r1, r2
 80134ca:	2240      	movs	r2, #64	@ 0x40
 80134cc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	0018      	movs	r0, r3
 80134d2:	f009 fe25 	bl	801d120 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80134d6:	e072      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2280      	movs	r2, #128	@ 0x80
 80134dc:	4013      	ands	r3, r2
 80134de:	d046      	beq.n	801356e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2244      	movs	r2, #68	@ 0x44
 80134e6:	5a9b      	ldrh	r3, [r3, r2]
 80134e8:	b29a      	uxth	r2, r3
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	2180      	movs	r1, #128	@ 0x80
 80134f0:	438a      	bics	r2, r1
 80134f2:	b291      	uxth	r1, r2
 80134f4:	2244      	movs	r2, #68	@ 0x44
 80134f6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80134f8:	687a      	ldr	r2, [r7, #4]
 80134fa:	23b8      	movs	r3, #184	@ 0xb8
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	5cd3      	ldrb	r3, [r2, r3]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d12f      	bne.n	8013564 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2240      	movs	r2, #64	@ 0x40
 801350a:	5a9b      	ldrh	r3, [r3, r2]
 801350c:	b29a      	uxth	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2104      	movs	r1, #4
 8013514:	430a      	orrs	r2, r1
 8013516:	b291      	uxth	r1, r2
 8013518:	2240      	movs	r2, #64	@ 0x40
 801351a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	2240      	movs	r2, #64	@ 0x40
 8013522:	5a9b      	ldrh	r3, [r3, r2]
 8013524:	b29a      	uxth	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2108      	movs	r1, #8
 801352c:	430a      	orrs	r2, r1
 801352e:	b291      	uxth	r1, r2
 8013530:	2240      	movs	r2, #64	@ 0x40
 8013532:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	23b8      	movs	r3, #184	@ 0xb8
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	2101      	movs	r1, #1
 801353c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	2254      	movs	r2, #84	@ 0x54
 8013544:	5a9b      	ldrh	r3, [r3, r2]
 8013546:	b29b      	uxth	r3, r3
 8013548:	089b      	lsrs	r3, r3, #2
 801354a:	223c      	movs	r2, #60	@ 0x3c
 801354c:	4013      	ands	r3, r2
 801354e:	0019      	movs	r1, r3
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	23b9      	movs	r3, #185	@ 0xb9
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2101      	movs	r1, #1
 801355c:	0018      	movs	r0, r3
 801355e:	f001 fc1b 	bl	8014d98 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013562:	e02c      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	0018      	movs	r0, r3
 8013568:	f009 fdda 	bl	801d120 <HAL_PCD_SuspendCallback>
    return;
 801356c:	e027      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	2380      	movs	r3, #128	@ 0x80
 8013572:	009b      	lsls	r3, r3, #2
 8013574:	4013      	ands	r3, r2
 8013576:	d010      	beq.n	801359a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2244      	movs	r2, #68	@ 0x44
 801357e:	5a9b      	ldrh	r3, [r3, r2]
 8013580:	b29a      	uxth	r2, r3
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	4914      	ldr	r1, [pc, #80]	@ (80135d8 <HAL_PCD_IRQHandler+0x280>)
 8013588:	400a      	ands	r2, r1
 801358a:	b291      	uxth	r1, r2
 801358c:	2244      	movs	r2, #68	@ 0x44
 801358e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	0018      	movs	r0, r3
 8013594:	f009 fd90 	bl	801d0b8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013598:	e011      	b.n	80135be <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801359a:	68fa      	ldr	r2, [r7, #12]
 801359c:	2380      	movs	r3, #128	@ 0x80
 801359e:	005b      	lsls	r3, r3, #1
 80135a0:	4013      	ands	r3, r2
 80135a2:	d00c      	beq.n	80135be <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	2244      	movs	r2, #68	@ 0x44
 80135aa:	5a9b      	ldrh	r3, [r3, r2]
 80135ac:	b29a      	uxth	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	490a      	ldr	r1, [pc, #40]	@ (80135dc <HAL_PCD_IRQHandler+0x284>)
 80135b4:	400a      	ands	r2, r1
 80135b6:	b291      	uxth	r1, r2
 80135b8:	2244      	movs	r2, #68	@ 0x44
 80135ba:	5299      	strh	r1, [r3, r2]

    return;
 80135bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80135be:	46bd      	mov	sp, r7
 80135c0:	b004      	add	sp, #16
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	fffffbff 	.word	0xfffffbff
 80135c8:	ffffbfff 	.word	0xffffbfff
 80135cc:	ffffdfff 	.word	0xffffdfff
 80135d0:	ffffefff 	.word	0xffffefff
 80135d4:	fffff7ff 	.word	0xfffff7ff
 80135d8:	fffffdff 	.word	0xfffffdff
 80135dc:	fffffeff 	.word	0xfffffeff

080135e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
 80135e8:	000a      	movs	r2, r1
 80135ea:	1cfb      	adds	r3, r7, #3
 80135ec:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	23aa      	movs	r3, #170	@ 0xaa
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	5cd3      	ldrb	r3, [r2, r3]
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	d101      	bne.n	80135fe <HAL_PCD_SetAddress+0x1e>
 80135fa:	2302      	movs	r3, #2
 80135fc:	e017      	b.n	801362e <HAL_PCD_SetAddress+0x4e>
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	23aa      	movs	r3, #170	@ 0xaa
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	2101      	movs	r1, #1
 8013606:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	1cfa      	adds	r2, r7, #3
 801360c:	2124      	movs	r1, #36	@ 0x24
 801360e:	7812      	ldrb	r2, [r2, #0]
 8013610:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681a      	ldr	r2, [r3, #0]
 8013616:	1cfb      	adds	r3, r7, #3
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	0019      	movs	r1, r3
 801361c:	0010      	movs	r0, r2
 801361e:	f007 fc71 	bl	801af04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	23aa      	movs	r3, #170	@ 0xaa
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	2100      	movs	r1, #0
 801362a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801362c:	2300      	movs	r3, #0
}
 801362e:	0018      	movs	r0, r3
 8013630:	46bd      	mov	sp, r7
 8013632:	b002      	add	sp, #8
 8013634:	bd80      	pop	{r7, pc}

08013636 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013636:	b590      	push	{r4, r7, lr}
 8013638:	b085      	sub	sp, #20
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	000c      	movs	r4, r1
 8013640:	0010      	movs	r0, r2
 8013642:	0019      	movs	r1, r3
 8013644:	1cfb      	adds	r3, r7, #3
 8013646:	1c22      	adds	r2, r4, #0
 8013648:	701a      	strb	r2, [r3, #0]
 801364a:	003b      	movs	r3, r7
 801364c:	1c02      	adds	r2, r0, #0
 801364e:	801a      	strh	r2, [r3, #0]
 8013650:	1cbb      	adds	r3, r7, #2
 8013652:	1c0a      	adds	r2, r1, #0
 8013654:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013656:	230b      	movs	r3, #11
 8013658:	18fb      	adds	r3, r7, r3
 801365a:	2200      	movs	r2, #0
 801365c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801365e:	1cfb      	adds	r3, r7, #3
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	b25b      	sxtb	r3, r3
 8013664:	2b00      	cmp	r3, #0
 8013666:	da0f      	bge.n	8013688 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013668:	1cfb      	adds	r3, r7, #3
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	2207      	movs	r2, #7
 801366e:	4013      	ands	r3, r2
 8013670:	1c5a      	adds	r2, r3, #1
 8013672:	0013      	movs	r3, r2
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	189b      	adds	r3, r3, r2
 8013678:	00db      	lsls	r3, r3, #3
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	18d3      	adds	r3, r2, r3
 801367e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2201      	movs	r2, #1
 8013684:	705a      	strb	r2, [r3, #1]
 8013686:	e00f      	b.n	80136a8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013688:	1cfb      	adds	r3, r7, #3
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	2207      	movs	r2, #7
 801368e:	401a      	ands	r2, r3
 8013690:	0013      	movs	r3, r2
 8013692:	009b      	lsls	r3, r3, #2
 8013694:	189b      	adds	r3, r3, r2
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	3369      	adds	r3, #105	@ 0x69
 801369a:	33ff      	adds	r3, #255	@ 0xff
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	18d3      	adds	r3, r2, r3
 80136a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2200      	movs	r2, #0
 80136a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80136a8:	1cfb      	adds	r3, r7, #3
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	2207      	movs	r2, #7
 80136ae:	4013      	ands	r3, r2
 80136b0:	b2da      	uxtb	r2, r3
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80136b6:	003b      	movs	r3, r7
 80136b8:	881a      	ldrh	r2, [r3, #0]
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	1cba      	adds	r2, r7, #2
 80136c2:	7812      	ldrb	r2, [r2, #0]
 80136c4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80136c6:	1cbb      	adds	r3, r7, #2
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	2b02      	cmp	r3, #2
 80136cc:	d102      	bne.n	80136d4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	2200      	movs	r2, #0
 80136d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	23aa      	movs	r3, #170	@ 0xaa
 80136d8:	009b      	lsls	r3, r3, #2
 80136da:	5cd3      	ldrb	r3, [r2, r3]
 80136dc:	2b01      	cmp	r3, #1
 80136de:	d101      	bne.n	80136e4 <HAL_PCD_EP_Open+0xae>
 80136e0:	2302      	movs	r3, #2
 80136e2:	e013      	b.n	801370c <HAL_PCD_EP_Open+0xd6>
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	23aa      	movs	r3, #170	@ 0xaa
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	2101      	movs	r1, #1
 80136ec:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	0011      	movs	r1, r2
 80136f6:	0018      	movs	r0, r3
 80136f8:	f005 fc68 	bl	8018fcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80136fc:	687a      	ldr	r2, [r7, #4]
 80136fe:	23aa      	movs	r3, #170	@ 0xaa
 8013700:	009b      	lsls	r3, r3, #2
 8013702:	2100      	movs	r1, #0
 8013704:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013706:	230b      	movs	r3, #11
 8013708:	18fb      	adds	r3, r7, r3
 801370a:	781b      	ldrb	r3, [r3, #0]
}
 801370c:	0018      	movs	r0, r3
 801370e:	46bd      	mov	sp, r7
 8013710:	b005      	add	sp, #20
 8013712:	bd90      	pop	{r4, r7, pc}

08013714 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	000a      	movs	r2, r1
 801371e:	1cfb      	adds	r3, r7, #3
 8013720:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013722:	1cfb      	adds	r3, r7, #3
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	b25b      	sxtb	r3, r3
 8013728:	2b00      	cmp	r3, #0
 801372a:	da0f      	bge.n	801374c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801372c:	1cfb      	adds	r3, r7, #3
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	2207      	movs	r2, #7
 8013732:	4013      	ands	r3, r2
 8013734:	1c5a      	adds	r2, r3, #1
 8013736:	0013      	movs	r3, r2
 8013738:	009b      	lsls	r3, r3, #2
 801373a:	189b      	adds	r3, r3, r2
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	18d3      	adds	r3, r2, r3
 8013742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	2201      	movs	r2, #1
 8013748:	705a      	strb	r2, [r3, #1]
 801374a:	e00f      	b.n	801376c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801374c:	1cfb      	adds	r3, r7, #3
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	2207      	movs	r2, #7
 8013752:	401a      	ands	r2, r3
 8013754:	0013      	movs	r3, r2
 8013756:	009b      	lsls	r3, r3, #2
 8013758:	189b      	adds	r3, r3, r2
 801375a:	00db      	lsls	r3, r3, #3
 801375c:	3369      	adds	r3, #105	@ 0x69
 801375e:	33ff      	adds	r3, #255	@ 0xff
 8013760:	687a      	ldr	r2, [r7, #4]
 8013762:	18d3      	adds	r3, r2, r3
 8013764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2200      	movs	r2, #0
 801376a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 801376c:	1cfb      	adds	r3, r7, #3
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	2207      	movs	r2, #7
 8013772:	4013      	ands	r3, r2
 8013774:	b2da      	uxtb	r2, r3
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	23aa      	movs	r3, #170	@ 0xaa
 801377e:	009b      	lsls	r3, r3, #2
 8013780:	5cd3      	ldrb	r3, [r2, r3]
 8013782:	2b01      	cmp	r3, #1
 8013784:	d101      	bne.n	801378a <HAL_PCD_EP_Close+0x76>
 8013786:	2302      	movs	r3, #2
 8013788:	e011      	b.n	80137ae <HAL_PCD_EP_Close+0x9a>
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	23aa      	movs	r3, #170	@ 0xaa
 801378e:	009b      	lsls	r3, r3, #2
 8013790:	2101      	movs	r1, #1
 8013792:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	68fa      	ldr	r2, [r7, #12]
 801379a:	0011      	movs	r1, r2
 801379c:	0018      	movs	r0, r3
 801379e:	f005 ffb7 	bl	8019710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	23aa      	movs	r3, #170	@ 0xaa
 80137a6:	009b      	lsls	r3, r3, #2
 80137a8:	2100      	movs	r1, #0
 80137aa:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	0018      	movs	r0, r3
 80137b0:	46bd      	mov	sp, r7
 80137b2:	b004      	add	sp, #16
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b086      	sub	sp, #24
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	60f8      	str	r0, [r7, #12]
 80137be:	607a      	str	r2, [r7, #4]
 80137c0:	603b      	str	r3, [r7, #0]
 80137c2:	200b      	movs	r0, #11
 80137c4:	183b      	adds	r3, r7, r0
 80137c6:	1c0a      	adds	r2, r1, #0
 80137c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80137ca:	0001      	movs	r1, r0
 80137cc:	187b      	adds	r3, r7, r1
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	2207      	movs	r2, #7
 80137d2:	401a      	ands	r2, r3
 80137d4:	0013      	movs	r3, r2
 80137d6:	009b      	lsls	r3, r3, #2
 80137d8:	189b      	adds	r3, r3, r2
 80137da:	00db      	lsls	r3, r3, #3
 80137dc:	3369      	adds	r3, #105	@ 0x69
 80137de:	33ff      	adds	r3, #255	@ 0xff
 80137e0:	68fa      	ldr	r2, [r7, #12]
 80137e2:	18d3      	adds	r3, r2, r3
 80137e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	687a      	ldr	r2, [r7, #4]
 80137ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	683a      	ldr	r2, [r7, #0]
 80137f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	2200      	movs	r2, #0
 80137f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	2200      	movs	r2, #0
 80137fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80137fe:	187b      	adds	r3, r7, r1
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	2207      	movs	r2, #7
 8013804:	4013      	ands	r3, r2
 8013806:	b2da      	uxtb	r2, r3
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	697a      	ldr	r2, [r7, #20]
 8013812:	0011      	movs	r1, r2
 8013814:	0018      	movs	r0, r3
 8013816:	f006 f93b 	bl	8019a90 <USB_EPStartXfer>

  return HAL_OK;
 801381a:	2300      	movs	r3, #0
}
 801381c:	0018      	movs	r0, r3
 801381e:	46bd      	mov	sp, r7
 8013820:	b006      	add	sp, #24
 8013822:	bd80      	pop	{r7, pc}

08013824 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	000a      	movs	r2, r1
 801382e:	1cfb      	adds	r3, r7, #3
 8013830:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013832:	1cfb      	adds	r3, r7, #3
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	2207      	movs	r2, #7
 8013838:	401a      	ands	r2, r3
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	23c2      	movs	r3, #194	@ 0xc2
 801383e:	0059      	lsls	r1, r3, #1
 8013840:	0013      	movs	r3, r2
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	189b      	adds	r3, r3, r2
 8013846:	00db      	lsls	r3, r3, #3
 8013848:	18c3      	adds	r3, r0, r3
 801384a:	185b      	adds	r3, r3, r1
 801384c:	681b      	ldr	r3, [r3, #0]
}
 801384e:	0018      	movs	r0, r3
 8013850:	46bd      	mov	sp, r7
 8013852:	b002      	add	sp, #8
 8013854:	bd80      	pop	{r7, pc}

08013856 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013856:	b580      	push	{r7, lr}
 8013858:	b086      	sub	sp, #24
 801385a:	af00      	add	r7, sp, #0
 801385c:	60f8      	str	r0, [r7, #12]
 801385e:	607a      	str	r2, [r7, #4]
 8013860:	603b      	str	r3, [r7, #0]
 8013862:	200b      	movs	r0, #11
 8013864:	183b      	adds	r3, r7, r0
 8013866:	1c0a      	adds	r2, r1, #0
 8013868:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801386a:	183b      	adds	r3, r7, r0
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	2207      	movs	r2, #7
 8013870:	4013      	ands	r3, r2
 8013872:	1c5a      	adds	r2, r3, #1
 8013874:	0013      	movs	r3, r2
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	189b      	adds	r3, r3, r2
 801387a:	00db      	lsls	r3, r3, #3
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	18d3      	adds	r3, r2, r3
 8013880:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	683a      	ldr	r2, [r7, #0]
 801388c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	2224      	movs	r2, #36	@ 0x24
 8013892:	2101      	movs	r1, #1
 8013894:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	683a      	ldr	r2, [r7, #0]
 801389a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	2200      	movs	r2, #0
 80138a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2201      	movs	r2, #1
 80138a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80138a8:	183b      	adds	r3, r7, r0
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	2207      	movs	r2, #7
 80138ae:	4013      	ands	r3, r2
 80138b0:	b2da      	uxtb	r2, r3
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	697a      	ldr	r2, [r7, #20]
 80138bc:	0011      	movs	r1, r2
 80138be:	0018      	movs	r0, r3
 80138c0:	f006 f8e6 	bl	8019a90 <USB_EPStartXfer>

  return HAL_OK;
 80138c4:	2300      	movs	r3, #0
}
 80138c6:	0018      	movs	r0, r3
 80138c8:	46bd      	mov	sp, r7
 80138ca:	b006      	add	sp, #24
 80138cc:	bd80      	pop	{r7, pc}

080138ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b084      	sub	sp, #16
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	000a      	movs	r2, r1
 80138d8:	1cfb      	adds	r3, r7, #3
 80138da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80138dc:	1cfb      	adds	r3, r7, #3
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	2207      	movs	r2, #7
 80138e2:	401a      	ands	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d901      	bls.n	80138f0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80138ec:	2301      	movs	r3, #1
 80138ee:	e046      	b.n	801397e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80138f0:	1cfb      	adds	r3, r7, #3
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	b25b      	sxtb	r3, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	da0f      	bge.n	801391a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80138fa:	1cfb      	adds	r3, r7, #3
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	2207      	movs	r2, #7
 8013900:	4013      	ands	r3, r2
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	0013      	movs	r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	189b      	adds	r3, r3, r2
 801390a:	00db      	lsls	r3, r3, #3
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	18d3      	adds	r3, r2, r3
 8013910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2201      	movs	r2, #1
 8013916:	705a      	strb	r2, [r3, #1]
 8013918:	e00d      	b.n	8013936 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801391a:	1cfb      	adds	r3, r7, #3
 801391c:	781a      	ldrb	r2, [r3, #0]
 801391e:	0013      	movs	r3, r2
 8013920:	009b      	lsls	r3, r3, #2
 8013922:	189b      	adds	r3, r3, r2
 8013924:	00db      	lsls	r3, r3, #3
 8013926:	3369      	adds	r3, #105	@ 0x69
 8013928:	33ff      	adds	r3, #255	@ 0xff
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	18d3      	adds	r3, r2, r3
 801392e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	2200      	movs	r2, #0
 8013934:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2201      	movs	r2, #1
 801393a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801393c:	1cfb      	adds	r3, r7, #3
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	2207      	movs	r2, #7
 8013942:	4013      	ands	r3, r2
 8013944:	b2da      	uxtb	r2, r3
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	23aa      	movs	r3, #170	@ 0xaa
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	5cd3      	ldrb	r3, [r2, r3]
 8013952:	2b01      	cmp	r3, #1
 8013954:	d101      	bne.n	801395a <HAL_PCD_EP_SetStall+0x8c>
 8013956:	2302      	movs	r3, #2
 8013958:	e011      	b.n	801397e <HAL_PCD_EP_SetStall+0xb0>
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	23aa      	movs	r3, #170	@ 0xaa
 801395e:	009b      	lsls	r3, r3, #2
 8013960:	2101      	movs	r1, #1
 8013962:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	68fa      	ldr	r2, [r7, #12]
 801396a:	0011      	movs	r1, r2
 801396c:	0018      	movs	r0, r3
 801396e:	f007 f9c7 	bl	801ad00 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013972:	687a      	ldr	r2, [r7, #4]
 8013974:	23aa      	movs	r3, #170	@ 0xaa
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	2100      	movs	r1, #0
 801397a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801397c:	2300      	movs	r3, #0
}
 801397e:	0018      	movs	r0, r3
 8013980:	46bd      	mov	sp, r7
 8013982:	b004      	add	sp, #16
 8013984:	bd80      	pop	{r7, pc}

08013986 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013986:	b580      	push	{r7, lr}
 8013988:	b084      	sub	sp, #16
 801398a:	af00      	add	r7, sp, #0
 801398c:	6078      	str	r0, [r7, #4]
 801398e:	000a      	movs	r2, r1
 8013990:	1cfb      	adds	r3, r7, #3
 8013992:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013994:	1cfb      	adds	r3, r7, #3
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	220f      	movs	r2, #15
 801399a:	401a      	ands	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d901      	bls.n	80139a8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80139a4:	2301      	movs	r3, #1
 80139a6:	e048      	b.n	8013a3a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80139a8:	1cfb      	adds	r3, r7, #3
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	b25b      	sxtb	r3, r3
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	da0f      	bge.n	80139d2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80139b2:	1cfb      	adds	r3, r7, #3
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	2207      	movs	r2, #7
 80139b8:	4013      	ands	r3, r2
 80139ba:	1c5a      	adds	r2, r3, #1
 80139bc:	0013      	movs	r3, r2
 80139be:	009b      	lsls	r3, r3, #2
 80139c0:	189b      	adds	r3, r3, r2
 80139c2:	00db      	lsls	r3, r3, #3
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	18d3      	adds	r3, r2, r3
 80139c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2201      	movs	r2, #1
 80139ce:	705a      	strb	r2, [r3, #1]
 80139d0:	e00f      	b.n	80139f2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80139d2:	1cfb      	adds	r3, r7, #3
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	2207      	movs	r2, #7
 80139d8:	401a      	ands	r2, r3
 80139da:	0013      	movs	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	189b      	adds	r3, r3, r2
 80139e0:	00db      	lsls	r3, r3, #3
 80139e2:	3369      	adds	r3, #105	@ 0x69
 80139e4:	33ff      	adds	r3, #255	@ 0xff
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	18d3      	adds	r3, r2, r3
 80139ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2200      	movs	r2, #0
 80139f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2200      	movs	r2, #0
 80139f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80139f8:	1cfb      	adds	r3, r7, #3
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	2207      	movs	r2, #7
 80139fe:	4013      	ands	r3, r2
 8013a00:	b2da      	uxtb	r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	23aa      	movs	r3, #170	@ 0xaa
 8013a0a:	009b      	lsls	r3, r3, #2
 8013a0c:	5cd3      	ldrb	r3, [r2, r3]
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d101      	bne.n	8013a16 <HAL_PCD_EP_ClrStall+0x90>
 8013a12:	2302      	movs	r3, #2
 8013a14:	e011      	b.n	8013a3a <HAL_PCD_EP_ClrStall+0xb4>
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	23aa      	movs	r3, #170	@ 0xaa
 8013a1a:	009b      	lsls	r3, r3, #2
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	0011      	movs	r1, r2
 8013a28:	0018      	movs	r0, r3
 8013a2a:	f007 f9b9 	bl	801ada0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	23aa      	movs	r3, #170	@ 0xaa
 8013a32:	009b      	lsls	r3, r3, #2
 8013a34:	2100      	movs	r1, #0
 8013a36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	0018      	movs	r0, r3
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	b004      	add	sp, #16
 8013a40:	bd80      	pop	{r7, pc}
	...

08013a44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013a44:	b5b0      	push	{r4, r5, r7, lr}
 8013a46:	b096      	sub	sp, #88	@ 0x58
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013a4c:	f000 fbec 	bl	8014228 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	204e      	movs	r0, #78	@ 0x4e
 8013a56:	183b      	adds	r3, r7, r0
 8013a58:	2144      	movs	r1, #68	@ 0x44
 8013a5a:	5a52      	ldrh	r2, [r2, r1]
 8013a5c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013a5e:	183b      	adds	r3, r7, r0
 8013a60:	881b      	ldrh	r3, [r3, #0]
 8013a62:	b2da      	uxtb	r2, r3
 8013a64:	244d      	movs	r4, #77	@ 0x4d
 8013a66:	193b      	adds	r3, r7, r4
 8013a68:	210f      	movs	r1, #15
 8013a6a:	400a      	ands	r2, r1
 8013a6c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013a6e:	193b      	adds	r3, r7, r4
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d000      	beq.n	8013a78 <PCD_EP_ISR_Handler+0x34>
 8013a76:	e18f      	b.n	8013d98 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013a78:	183b      	adds	r3, r7, r0
 8013a7a:	881b      	ldrh	r3, [r3, #0]
 8013a7c:	2210      	movs	r2, #16
 8013a7e:	4013      	ands	r3, r2
 8013a80:	d155      	bne.n	8013b2e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	881b      	ldrh	r3, [r3, #0]
 8013a88:	b29a      	uxth	r2, r3
 8013a8a:	200e      	movs	r0, #14
 8013a8c:	183b      	adds	r3, r7, r0
 8013a8e:	49bb      	ldr	r1, [pc, #748]	@ (8013d7c <PCD_EP_ISR_Handler+0x338>)
 8013a90:	400a      	ands	r2, r1
 8013a92:	801a      	strh	r2, [r3, #0]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	183a      	adds	r2, r7, r0
 8013a9a:	8812      	ldrh	r2, [r2, #0]
 8013a9c:	49b8      	ldr	r1, [pc, #736]	@ (8013d80 <PCD_EP_ISR_Handler+0x33c>)
 8013a9e:	430a      	orrs	r2, r1
 8013aa0:	b292      	uxth	r2, r2
 8013aa2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	3328      	adds	r3, #40	@ 0x28
 8013aa8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	2250      	movs	r2, #80	@ 0x50
 8013ab0:	5a9b      	ldrh	r3, [r3, r2]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	001a      	movs	r2, r3
 8013ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	00db      	lsls	r3, r3, #3
 8013abc:	18d2      	adds	r2, r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	18d3      	adds	r3, r2, r3
 8013ac4:	4aaf      	ldr	r2, [pc, #700]	@ (8013d84 <PCD_EP_ISR_Handler+0x340>)
 8013ac6:	4694      	mov	ip, r2
 8013ac8:	4463      	add	r3, ip
 8013aca:	881b      	ldrh	r3, [r3, #0]
 8013acc:	059b      	lsls	r3, r3, #22
 8013ace:	0d9a      	lsrs	r2, r3, #22
 8013ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ad2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ad6:	695a      	ldr	r2, [r3, #20]
 8013ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ada:	69db      	ldr	r3, [r3, #28]
 8013adc:	18d2      	adds	r2, r2, r3
 8013ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ae0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	0018      	movs	r0, r3
 8013ae8:	f009 fac8 	bl	801d07c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2224      	movs	r2, #36	@ 0x24
 8013af0:	5c9b      	ldrb	r3, [r3, r2]
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <PCD_EP_ISR_Handler+0xb8>
 8013af8:	f000 fb96 	bl	8014228 <PCD_EP_ISR_Handler+0x7e4>
 8013afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013afe:	699b      	ldr	r3, [r3, #24]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d001      	beq.n	8013b08 <PCD_EP_ISR_Handler+0xc4>
 8013b04:	f000 fb90 	bl	8014228 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2224      	movs	r2, #36	@ 0x24
 8013b0c:	5c9b      	ldrb	r3, [r3, r2]
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	2280      	movs	r2, #128	@ 0x80
 8013b12:	4252      	negs	r2, r2
 8013b14:	4313      	orrs	r3, r2
 8013b16:	b2da      	uxtb	r2, r3
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	0011      	movs	r1, r2
 8013b1e:	224c      	movs	r2, #76	@ 0x4c
 8013b20:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2224      	movs	r2, #36	@ 0x24
 8013b26:	2100      	movs	r1, #0
 8013b28:	5499      	strb	r1, [r3, r2]
 8013b2a:	f000 fb7d 	bl	8014228 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	3369      	adds	r3, #105	@ 0x69
 8013b32:	33ff      	adds	r3, #255	@ 0xff
 8013b34:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681a      	ldr	r2, [r3, #0]
 8013b3a:	214a      	movs	r1, #74	@ 0x4a
 8013b3c:	187b      	adds	r3, r7, r1
 8013b3e:	8812      	ldrh	r2, [r2, #0]
 8013b40:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013b42:	187b      	adds	r3, r7, r1
 8013b44:	881a      	ldrh	r2, [r3, #0]
 8013b46:	2380      	movs	r3, #128	@ 0x80
 8013b48:	011b      	lsls	r3, r3, #4
 8013b4a:	4013      	ands	r3, r2
 8013b4c:	d037      	beq.n	8013bbe <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	2250      	movs	r2, #80	@ 0x50
 8013b54:	5a9b      	ldrh	r3, [r3, r2]
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	001a      	movs	r2, r3
 8013b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b5c:	781b      	ldrb	r3, [r3, #0]
 8013b5e:	00db      	lsls	r3, r3, #3
 8013b60:	18d2      	adds	r2, r2, r3
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	18d3      	adds	r3, r2, r3
 8013b68:	4a87      	ldr	r2, [pc, #540]	@ (8013d88 <PCD_EP_ISR_Handler+0x344>)
 8013b6a:	4694      	mov	ip, r2
 8013b6c:	4463      	add	r3, ip
 8013b6e:	881b      	ldrh	r3, [r3, #0]
 8013b70:	059b      	lsls	r3, r3, #22
 8013b72:	0d9a      	lsrs	r2, r3, #22
 8013b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6818      	ldr	r0, [r3, #0]
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	22ac      	movs	r2, #172	@ 0xac
 8013b80:	0092      	lsls	r2, r2, #2
 8013b82:	1899      	adds	r1, r3, r2
 8013b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	f007 fa3a 	bl	801b006 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	881b      	ldrh	r3, [r3, #0]
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	2010      	movs	r0, #16
 8013b9c:	183b      	adds	r3, r7, r0
 8013b9e:	497b      	ldr	r1, [pc, #492]	@ (8013d8c <PCD_EP_ISR_Handler+0x348>)
 8013ba0:	400a      	ands	r2, r1
 8013ba2:	801a      	strh	r2, [r3, #0]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	183a      	adds	r2, r7, r0
 8013baa:	8812      	ldrh	r2, [r2, #0]
 8013bac:	2180      	movs	r1, #128	@ 0x80
 8013bae:	430a      	orrs	r2, r1
 8013bb0:	b292      	uxth	r2, r2
 8013bb2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	0018      	movs	r0, r3
 8013bb8:	f009 fa2a 	bl	801d010 <HAL_PCD_SetupStageCallback>
 8013bbc:	e334      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013bbe:	234a      	movs	r3, #74	@ 0x4a
 8013bc0:	18fb      	adds	r3, r7, r3
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	db00      	blt.n	8013bcc <PCD_EP_ISR_Handler+0x188>
 8013bca:	e32d      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	881b      	ldrh	r3, [r3, #0]
 8013bd2:	b29a      	uxth	r2, r3
 8013bd4:	201e      	movs	r0, #30
 8013bd6:	183b      	adds	r3, r7, r0
 8013bd8:	496c      	ldr	r1, [pc, #432]	@ (8013d8c <PCD_EP_ISR_Handler+0x348>)
 8013bda:	400a      	ands	r2, r1
 8013bdc:	801a      	strh	r2, [r3, #0]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	183a      	adds	r2, r7, r0
 8013be4:	8812      	ldrh	r2, [r2, #0]
 8013be6:	2180      	movs	r1, #128	@ 0x80
 8013be8:	430a      	orrs	r2, r1
 8013bea:	b292      	uxth	r2, r2
 8013bec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	2250      	movs	r2, #80	@ 0x50
 8013bf4:	5a9b      	ldrh	r3, [r3, r2]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	001a      	movs	r2, r3
 8013bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	00db      	lsls	r3, r3, #3
 8013c00:	18d2      	adds	r2, r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	18d3      	adds	r3, r2, r3
 8013c08:	4a5f      	ldr	r2, [pc, #380]	@ (8013d88 <PCD_EP_ISR_Handler+0x344>)
 8013c0a:	4694      	mov	ip, r2
 8013c0c:	4463      	add	r3, ip
 8013c0e:	881b      	ldrh	r3, [r3, #0]
 8013c10:	059b      	lsls	r3, r3, #22
 8013c12:	0d9a      	lsrs	r2, r3, #22
 8013c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c16:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c1a:	69db      	ldr	r3, [r3, #28]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d01a      	beq.n	8013c56 <PCD_EP_ISR_Handler+0x212>
 8013c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c22:	695b      	ldr	r3, [r3, #20]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d016      	beq.n	8013c56 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6818      	ldr	r0, [r3, #0]
 8013c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c2e:	6959      	ldr	r1, [r3, #20]
 8013c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c32:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c36:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	f007 f9e4 	bl	801b006 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c40:	695a      	ldr	r2, [r3, #20]
 8013c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c44:	69db      	ldr	r3, [r3, #28]
 8013c46:	18d2      	adds	r2, r2, r3
 8013c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c4a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2100      	movs	r1, #0
 8013c50:	0018      	movs	r0, r3
 8013c52:	f009 f9f2 	bl	801d03a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	214a      	movs	r1, #74	@ 0x4a
 8013c5c:	187b      	adds	r3, r7, r1
 8013c5e:	8812      	ldrh	r2, [r2, #0]
 8013c60:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013c62:	187b      	adds	r3, r7, r1
 8013c64:	881a      	ldrh	r2, [r3, #0]
 8013c66:	2380      	movs	r3, #128	@ 0x80
 8013c68:	011b      	lsls	r3, r3, #4
 8013c6a:	4013      	ands	r3, r2
 8013c6c:	d000      	beq.n	8013c70 <PCD_EP_ISR_Handler+0x22c>
 8013c6e:	e2db      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
 8013c70:	187b      	adds	r3, r7, r1
 8013c72:	881a      	ldrh	r2, [r3, #0]
 8013c74:	23c0      	movs	r3, #192	@ 0xc0
 8013c76:	019b      	lsls	r3, r3, #6
 8013c78:	401a      	ands	r2, r3
 8013c7a:	23c0      	movs	r3, #192	@ 0xc0
 8013c7c:	019b      	lsls	r3, r3, #6
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d100      	bne.n	8013c84 <PCD_EP_ISR_Handler+0x240>
 8013c82:	e2d1      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	61bb      	str	r3, [r7, #24]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2250      	movs	r2, #80	@ 0x50
 8013c90:	5a9b      	ldrh	r3, [r3, r2]
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	001a      	movs	r2, r3
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	189b      	adds	r3, r3, r2
 8013c9a:	61bb      	str	r3, [r7, #24]
 8013c9c:	69bb      	ldr	r3, [r7, #24]
 8013c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8013d88 <PCD_EP_ISR_Handler+0x344>)
 8013ca0:	4694      	mov	ip, r2
 8013ca2:	4463      	add	r3, ip
 8013ca4:	617b      	str	r3, [r7, #20]
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	881b      	ldrh	r3, [r3, #0]
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	059b      	lsls	r3, r3, #22
 8013cae:	0d9b      	lsrs	r3, r3, #22
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	801a      	strh	r2, [r3, #0]
 8013cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cb8:	691b      	ldr	r3, [r3, #16]
 8013cba:	2b3e      	cmp	r3, #62	@ 0x3e
 8013cbc:	d91a      	bls.n	8013cf4 <PCD_EP_ISR_Handler+0x2b0>
 8013cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cc0:	691b      	ldr	r3, [r3, #16]
 8013cc2:	095b      	lsrs	r3, r3, #5
 8013cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8013cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cc8:	691b      	ldr	r3, [r3, #16]
 8013cca:	221f      	movs	r2, #31
 8013ccc:	4013      	ands	r3, r2
 8013cce:	d102      	bne.n	8013cd6 <PCD_EP_ISR_Handler+0x292>
 8013cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cd2:	3b01      	subs	r3, #1
 8013cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	881b      	ldrh	r3, [r3, #0]
 8013cda:	b29a      	uxth	r2, r3
 8013cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	029b      	lsls	r3, r3, #10
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	4313      	orrs	r3, r2
 8013ce6:	b29b      	uxth	r3, r3
 8013ce8:	4a25      	ldr	r2, [pc, #148]	@ (8013d80 <PCD_EP_ISR_Handler+0x33c>)
 8013cea:	4313      	orrs	r3, r2
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	801a      	strh	r2, [r3, #0]
 8013cf2:	e023      	b.n	8013d3c <PCD_EP_ISR_Handler+0x2f8>
 8013cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cf6:	691b      	ldr	r3, [r3, #16]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d108      	bne.n	8013d0e <PCD_EP_ISR_Handler+0x2ca>
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	881b      	ldrh	r3, [r3, #0]
 8013d00:	b29b      	uxth	r3, r3
 8013d02:	4a1f      	ldr	r2, [pc, #124]	@ (8013d80 <PCD_EP_ISR_Handler+0x33c>)
 8013d04:	4313      	orrs	r3, r2
 8013d06:	b29a      	uxth	r2, r3
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	801a      	strh	r2, [r3, #0]
 8013d0c:	e016      	b.n	8013d3c <PCD_EP_ISR_Handler+0x2f8>
 8013d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d10:	691b      	ldr	r3, [r3, #16]
 8013d12:	085b      	lsrs	r3, r3, #1
 8013d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d18:	691b      	ldr	r3, [r3, #16]
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	4013      	ands	r3, r2
 8013d1e:	d002      	beq.n	8013d26 <PCD_EP_ISR_Handler+0x2e2>
 8013d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d22:	3301      	adds	r3, #1
 8013d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	029b      	lsls	r3, r3, #10
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	4313      	orrs	r3, r2
 8013d36:	b29a      	uxth	r2, r3
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	881b      	ldrh	r3, [r3, #0]
 8013d42:	b29a      	uxth	r2, r3
 8013d44:	2012      	movs	r0, #18
 8013d46:	183b      	adds	r3, r7, r0
 8013d48:	4911      	ldr	r1, [pc, #68]	@ (8013d90 <PCD_EP_ISR_Handler+0x34c>)
 8013d4a:	400a      	ands	r2, r1
 8013d4c:	801a      	strh	r2, [r3, #0]
 8013d4e:	183b      	adds	r3, r7, r0
 8013d50:	183a      	adds	r2, r7, r0
 8013d52:	8812      	ldrh	r2, [r2, #0]
 8013d54:	2180      	movs	r1, #128	@ 0x80
 8013d56:	0149      	lsls	r1, r1, #5
 8013d58:	404a      	eors	r2, r1
 8013d5a:	801a      	strh	r2, [r3, #0]
 8013d5c:	183b      	adds	r3, r7, r0
 8013d5e:	183a      	adds	r2, r7, r0
 8013d60:	8812      	ldrh	r2, [r2, #0]
 8013d62:	2180      	movs	r1, #128	@ 0x80
 8013d64:	0189      	lsls	r1, r1, #6
 8013d66:	404a      	eors	r2, r1
 8013d68:	801a      	strh	r2, [r3, #0]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	183a      	adds	r2, r7, r0
 8013d70:	8812      	ldrh	r2, [r2, #0]
 8013d72:	4908      	ldr	r1, [pc, #32]	@ (8013d94 <PCD_EP_ISR_Handler+0x350>)
 8013d74:	430a      	orrs	r2, r1
 8013d76:	b292      	uxth	r2, r2
 8013d78:	801a      	strh	r2, [r3, #0]
 8013d7a:	e255      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
 8013d7c:	ffff8f0f 	.word	0xffff8f0f
 8013d80:	ffff8000 	.word	0xffff8000
 8013d84:	00000402 	.word	0x00000402
 8013d88:	00000406 	.word	0x00000406
 8013d8c:	00000f8f 	.word	0x00000f8f
 8013d90:	ffffbf8f 	.word	0xffffbf8f
 8013d94:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	001a      	movs	r2, r3
 8013d9e:	204d      	movs	r0, #77	@ 0x4d
 8013da0:	183b      	adds	r3, r7, r0
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	18d2      	adds	r2, r2, r3
 8013da8:	214a      	movs	r1, #74	@ 0x4a
 8013daa:	187b      	adds	r3, r7, r1
 8013dac:	8812      	ldrh	r2, [r2, #0]
 8013dae:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013db0:	187b      	adds	r3, r7, r1
 8013db2:	2200      	movs	r2, #0
 8013db4:	5e9b      	ldrsh	r3, [r3, r2]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	db00      	blt.n	8013dbc <PCD_EP_ISR_Handler+0x378>
 8013dba:	e0fa      	b.n	8013fb2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	001a      	movs	r2, r3
 8013dc2:	183b      	adds	r3, r7, r0
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	009b      	lsls	r3, r3, #2
 8013dc8:	18d3      	adds	r3, r2, r3
 8013dca:	881b      	ldrh	r3, [r3, #0]
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	2448      	movs	r4, #72	@ 0x48
 8013dd0:	193b      	adds	r3, r7, r4
 8013dd2:	49d1      	ldr	r1, [pc, #836]	@ (8014118 <PCD_EP_ISR_Handler+0x6d4>)
 8013dd4:	400a      	ands	r2, r1
 8013dd6:	801a      	strh	r2, [r3, #0]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	001a      	movs	r2, r3
 8013dde:	183b      	adds	r3, r7, r0
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	009b      	lsls	r3, r3, #2
 8013de4:	18d3      	adds	r3, r2, r3
 8013de6:	193a      	adds	r2, r7, r4
 8013de8:	8812      	ldrh	r2, [r2, #0]
 8013dea:	2180      	movs	r1, #128	@ 0x80
 8013dec:	430a      	orrs	r2, r1
 8013dee:	b292      	uxth	r2, r2
 8013df0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013df2:	183b      	adds	r3, r7, r0
 8013df4:	781a      	ldrb	r2, [r3, #0]
 8013df6:	0013      	movs	r3, r2
 8013df8:	009b      	lsls	r3, r3, #2
 8013dfa:	189b      	adds	r3, r3, r2
 8013dfc:	00db      	lsls	r3, r3, #3
 8013dfe:	3369      	adds	r3, #105	@ 0x69
 8013e00:	33ff      	adds	r3, #255	@ 0xff
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	18d3      	adds	r3, r2, r3
 8013e06:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e0a:	7b1b      	ldrb	r3, [r3, #12]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d125      	bne.n	8013e5c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2250      	movs	r2, #80	@ 0x50
 8013e16:	5a9b      	ldrh	r3, [r3, r2]
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	001a      	movs	r2, r3
 8013e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e1e:	781b      	ldrb	r3, [r3, #0]
 8013e20:	00db      	lsls	r3, r3, #3
 8013e22:	18d2      	adds	r2, r2, r3
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	18d3      	adds	r3, r2, r3
 8013e2a:	4abc      	ldr	r2, [pc, #752]	@ (801411c <PCD_EP_ISR_Handler+0x6d8>)
 8013e2c:	4694      	mov	ip, r2
 8013e2e:	4463      	add	r3, ip
 8013e30:	881a      	ldrh	r2, [r3, #0]
 8013e32:	2450      	movs	r4, #80	@ 0x50
 8013e34:	193b      	adds	r3, r7, r4
 8013e36:	0592      	lsls	r2, r2, #22
 8013e38:	0d92      	lsrs	r2, r2, #22
 8013e3a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013e3c:	193b      	adds	r3, r7, r4
 8013e3e:	881b      	ldrh	r3, [r3, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d100      	bne.n	8013e46 <PCD_EP_ISR_Handler+0x402>
 8013e44:	e08d      	b.n	8013f62 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6818      	ldr	r0, [r3, #0]
 8013e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e4c:	6959      	ldr	r1, [r3, #20]
 8013e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e50:	88da      	ldrh	r2, [r3, #6]
 8013e52:	193b      	adds	r3, r7, r4
 8013e54:	881b      	ldrh	r3, [r3, #0]
 8013e56:	f007 f8d6 	bl	801b006 <USB_ReadPMA>
 8013e5a:	e082      	b.n	8013f62 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e5e:	78db      	ldrb	r3, [r3, #3]
 8013e60:	2b02      	cmp	r3, #2
 8013e62:	d10c      	bne.n	8013e7e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013e64:	2350      	movs	r3, #80	@ 0x50
 8013e66:	18fc      	adds	r4, r7, r3
 8013e68:	234a      	movs	r3, #74	@ 0x4a
 8013e6a:	18fb      	adds	r3, r7, r3
 8013e6c:	881a      	ldrh	r2, [r3, #0]
 8013e6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	0018      	movs	r0, r3
 8013e74:	f000 f9ec 	bl	8014250 <HAL_PCD_EP_DB_Receive>
 8013e78:	0003      	movs	r3, r0
 8013e7a:	8023      	strh	r3, [r4, #0]
 8013e7c:	e071      	b.n	8013f62 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	001a      	movs	r2, r3
 8013e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	18d3      	adds	r3, r2, r3
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	2052      	movs	r0, #82	@ 0x52
 8013e92:	183b      	adds	r3, r7, r0
 8013e94:	49a2      	ldr	r1, [pc, #648]	@ (8014120 <PCD_EP_ISR_Handler+0x6dc>)
 8013e96:	400a      	ands	r2, r1
 8013e98:	801a      	strh	r2, [r3, #0]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	001a      	movs	r2, r3
 8013ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	009b      	lsls	r3, r3, #2
 8013ea6:	18d3      	adds	r3, r2, r3
 8013ea8:	183a      	adds	r2, r7, r0
 8013eaa:	8812      	ldrh	r2, [r2, #0]
 8013eac:	499d      	ldr	r1, [pc, #628]	@ (8014124 <PCD_EP_ISR_Handler+0x6e0>)
 8013eae:	430a      	orrs	r2, r1
 8013eb0:	b292      	uxth	r2, r2
 8013eb2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	001a      	movs	r2, r3
 8013eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	009b      	lsls	r3, r3, #2
 8013ec0:	18d3      	adds	r3, r2, r3
 8013ec2:	881b      	ldrh	r3, [r3, #0]
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	001a      	movs	r2, r3
 8013ec8:	2380      	movs	r3, #128	@ 0x80
 8013eca:	01db      	lsls	r3, r3, #7
 8013ecc:	4013      	ands	r3, r2
 8013ece:	d024      	beq.n	8013f1a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2250      	movs	r2, #80	@ 0x50
 8013ed6:	5a9b      	ldrh	r3, [r3, r2]
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	001a      	movs	r2, r3
 8013edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	00db      	lsls	r3, r3, #3
 8013ee2:	18d2      	adds	r2, r2, r3
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	18d3      	adds	r3, r2, r3
 8013eea:	4a8f      	ldr	r2, [pc, #572]	@ (8014128 <PCD_EP_ISR_Handler+0x6e4>)
 8013eec:	4694      	mov	ip, r2
 8013eee:	4463      	add	r3, ip
 8013ef0:	881a      	ldrh	r2, [r3, #0]
 8013ef2:	2450      	movs	r4, #80	@ 0x50
 8013ef4:	193b      	adds	r3, r7, r4
 8013ef6:	0592      	lsls	r2, r2, #22
 8013ef8:	0d92      	lsrs	r2, r2, #22
 8013efa:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013efc:	193b      	adds	r3, r7, r4
 8013efe:	881b      	ldrh	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d02e      	beq.n	8013f62 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	6818      	ldr	r0, [r3, #0]
 8013f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f0a:	6959      	ldr	r1, [r3, #20]
 8013f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f0e:	891a      	ldrh	r2, [r3, #8]
 8013f10:	193b      	adds	r3, r7, r4
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	f007 f877 	bl	801b006 <USB_ReadPMA>
 8013f18:	e023      	b.n	8013f62 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	2250      	movs	r2, #80	@ 0x50
 8013f20:	5a9b      	ldrh	r3, [r3, r2]
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	001a      	movs	r2, r3
 8013f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	00db      	lsls	r3, r3, #3
 8013f2c:	18d2      	adds	r2, r2, r3
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	18d3      	adds	r3, r2, r3
 8013f34:	4a79      	ldr	r2, [pc, #484]	@ (801411c <PCD_EP_ISR_Handler+0x6d8>)
 8013f36:	4694      	mov	ip, r2
 8013f38:	4463      	add	r3, ip
 8013f3a:	881a      	ldrh	r2, [r3, #0]
 8013f3c:	2450      	movs	r4, #80	@ 0x50
 8013f3e:	193b      	adds	r3, r7, r4
 8013f40:	0592      	lsls	r2, r2, #22
 8013f42:	0d92      	lsrs	r2, r2, #22
 8013f44:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013f46:	193b      	adds	r3, r7, r4
 8013f48:	881b      	ldrh	r3, [r3, #0]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d009      	beq.n	8013f62 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6818      	ldr	r0, [r3, #0]
 8013f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f54:	6959      	ldr	r1, [r3, #20]
 8013f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f58:	895a      	ldrh	r2, [r3, #10]
 8013f5a:	193b      	adds	r3, r7, r4
 8013f5c:	881b      	ldrh	r3, [r3, #0]
 8013f5e:	f007 f852 	bl	801b006 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8013f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f64:	69da      	ldr	r2, [r3, #28]
 8013f66:	2150      	movs	r1, #80	@ 0x50
 8013f68:	187b      	adds	r3, r7, r1
 8013f6a:	881b      	ldrh	r3, [r3, #0]
 8013f6c:	18d2      	adds	r2, r2, r3
 8013f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8013f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f74:	695a      	ldr	r2, [r3, #20]
 8013f76:	187b      	adds	r3, r7, r1
 8013f78:	881b      	ldrh	r3, [r3, #0]
 8013f7a:	18d2      	adds	r2, r2, r3
 8013f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8013f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f82:	699b      	ldr	r3, [r3, #24]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d005      	beq.n	8013f94 <PCD_EP_ISR_Handler+0x550>
 8013f88:	187b      	adds	r3, r7, r1
 8013f8a:	881a      	ldrh	r2, [r3, #0]
 8013f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f8e:	691b      	ldr	r3, [r3, #16]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d207      	bcs.n	8013fa4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8013f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f96:	781a      	ldrb	r2, [r3, #0]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	0011      	movs	r1, r2
 8013f9c:	0018      	movs	r0, r3
 8013f9e:	f009 f84c 	bl	801d03a <HAL_PCD_DataOutStageCallback>
 8013fa2:	e006      	b.n	8013fb2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013faa:	0011      	movs	r1, r2
 8013fac:	0018      	movs	r0, r3
 8013fae:	f005 fd6f 	bl	8019a90 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8013fb2:	244a      	movs	r4, #74	@ 0x4a
 8013fb4:	193b      	adds	r3, r7, r4
 8013fb6:	881b      	ldrh	r3, [r3, #0]
 8013fb8:	2280      	movs	r2, #128	@ 0x80
 8013fba:	4013      	ands	r3, r2
 8013fbc:	d100      	bne.n	8013fc0 <PCD_EP_ISR_Handler+0x57c>
 8013fbe:	e133      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8013fc0:	204d      	movs	r0, #77	@ 0x4d
 8013fc2:	183b      	adds	r3, r7, r0
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	1c5a      	adds	r2, r3, #1
 8013fc8:	0013      	movs	r3, r2
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	189b      	adds	r3, r3, r2
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	18d3      	adds	r3, r2, r3
 8013fd4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	001a      	movs	r2, r3
 8013fdc:	183b      	adds	r3, r7, r0
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	18d3      	adds	r3, r2, r3
 8013fe4:	881b      	ldrh	r3, [r3, #0]
 8013fe6:	b29a      	uxth	r2, r3
 8013fe8:	2542      	movs	r5, #66	@ 0x42
 8013fea:	197b      	adds	r3, r7, r5
 8013fec:	494f      	ldr	r1, [pc, #316]	@ (801412c <PCD_EP_ISR_Handler+0x6e8>)
 8013fee:	400a      	ands	r2, r1
 8013ff0:	801a      	strh	r2, [r3, #0]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	001a      	movs	r2, r3
 8013ff8:	183b      	adds	r3, r7, r0
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	18d3      	adds	r3, r2, r3
 8014000:	197a      	adds	r2, r7, r5
 8014002:	8812      	ldrh	r2, [r2, #0]
 8014004:	494a      	ldr	r1, [pc, #296]	@ (8014130 <PCD_EP_ISR_Handler+0x6ec>)
 8014006:	430a      	orrs	r2, r1
 8014008:	b292      	uxth	r2, r2
 801400a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801400c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801400e:	78db      	ldrb	r3, [r3, #3]
 8014010:	2b01      	cmp	r3, #1
 8014012:	d000      	beq.n	8014016 <PCD_EP_ISR_Handler+0x5d2>
 8014014:	e0af      	b.n	8014176 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8014016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014018:	2200      	movs	r2, #0
 801401a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801401c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801401e:	7b1b      	ldrb	r3, [r3, #12]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d100      	bne.n	8014026 <PCD_EP_ISR_Handler+0x5e2>
 8014024:	e09f      	b.n	8014166 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014026:	193b      	adds	r3, r7, r4
 8014028:	881b      	ldrh	r3, [r3, #0]
 801402a:	2240      	movs	r2, #64	@ 0x40
 801402c:	4013      	ands	r3, r2
 801402e:	d046      	beq.n	80140be <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014032:	785b      	ldrb	r3, [r3, #1]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d125      	bne.n	8014084 <PCD_EP_ISR_Handler+0x640>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	627b      	str	r3, [r7, #36]	@ 0x24
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2250      	movs	r2, #80	@ 0x50
 8014044:	5a9b      	ldrh	r3, [r3, r2]
 8014046:	b29b      	uxth	r3, r3
 8014048:	001a      	movs	r2, r3
 801404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801404c:	189b      	adds	r3, r3, r2
 801404e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	00da      	lsls	r2, r3, #3
 8014056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014058:	18d3      	adds	r3, r2, r3
 801405a:	4a33      	ldr	r2, [pc, #204]	@ (8014128 <PCD_EP_ISR_Handler+0x6e4>)
 801405c:	4694      	mov	ip, r2
 801405e:	4463      	add	r3, ip
 8014060:	623b      	str	r3, [r7, #32]
 8014062:	6a3b      	ldr	r3, [r7, #32]
 8014064:	881b      	ldrh	r3, [r3, #0]
 8014066:	b29b      	uxth	r3, r3
 8014068:	059b      	lsls	r3, r3, #22
 801406a:	0d9b      	lsrs	r3, r3, #22
 801406c:	b29a      	uxth	r2, r3
 801406e:	6a3b      	ldr	r3, [r7, #32]
 8014070:	801a      	strh	r2, [r3, #0]
 8014072:	6a3b      	ldr	r3, [r7, #32]
 8014074:	881b      	ldrh	r3, [r3, #0]
 8014076:	b29b      	uxth	r3, r3
 8014078:	4a2d      	ldr	r2, [pc, #180]	@ (8014130 <PCD_EP_ISR_Handler+0x6ec>)
 801407a:	4313      	orrs	r3, r2
 801407c:	b29a      	uxth	r2, r3
 801407e:	6a3b      	ldr	r3, [r7, #32]
 8014080:	801a      	strh	r2, [r3, #0]
 8014082:	e070      	b.n	8014166 <PCD_EP_ISR_Handler+0x722>
 8014084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014086:	785b      	ldrb	r3, [r3, #1]
 8014088:	2b01      	cmp	r3, #1
 801408a:	d16c      	bne.n	8014166 <PCD_EP_ISR_Handler+0x722>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2250      	movs	r2, #80	@ 0x50
 8014098:	5a9b      	ldrh	r3, [r3, r2]
 801409a:	b29b      	uxth	r3, r3
 801409c:	001a      	movs	r2, r3
 801409e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140a0:	189b      	adds	r3, r3, r2
 80140a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80140a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	00da      	lsls	r2, r3, #3
 80140aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ac:	18d3      	adds	r3, r2, r3
 80140ae:	4a1e      	ldr	r2, [pc, #120]	@ (8014128 <PCD_EP_ISR_Handler+0x6e4>)
 80140b0:	4694      	mov	ip, r2
 80140b2:	4463      	add	r3, ip
 80140b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80140b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140b8:	2200      	movs	r2, #0
 80140ba:	801a      	strh	r2, [r3, #0]
 80140bc:	e053      	b.n	8014166 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80140c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140c6:	785b      	ldrb	r3, [r3, #1]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d133      	bne.n	8014134 <PCD_EP_ISR_Handler+0x6f0>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	2250      	movs	r2, #80	@ 0x50
 80140d8:	5a9b      	ldrh	r3, [r3, r2]
 80140da:	b29b      	uxth	r3, r3
 80140dc:	001a      	movs	r2, r3
 80140de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140e0:	189b      	adds	r3, r3, r2
 80140e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80140e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	00da      	lsls	r2, r3, #3
 80140ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140ec:	18d3      	adds	r3, r2, r3
 80140ee:	4a0b      	ldr	r2, [pc, #44]	@ (801411c <PCD_EP_ISR_Handler+0x6d8>)
 80140f0:	4694      	mov	ip, r2
 80140f2:	4463      	add	r3, ip
 80140f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80140f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	059b      	lsls	r3, r3, #22
 80140fe:	0d9b      	lsrs	r3, r3, #22
 8014100:	b29a      	uxth	r2, r3
 8014102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014104:	801a      	strh	r2, [r3, #0]
 8014106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014108:	881b      	ldrh	r3, [r3, #0]
 801410a:	b29b      	uxth	r3, r3
 801410c:	4a08      	ldr	r2, [pc, #32]	@ (8014130 <PCD_EP_ISR_Handler+0x6ec>)
 801410e:	4313      	orrs	r3, r2
 8014110:	b29a      	uxth	r2, r3
 8014112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014114:	801a      	strh	r2, [r3, #0]
 8014116:	e026      	b.n	8014166 <PCD_EP_ISR_Handler+0x722>
 8014118:	00000f8f 	.word	0x00000f8f
 801411c:	00000406 	.word	0x00000406
 8014120:	ffff8f8f 	.word	0xffff8f8f
 8014124:	ffff80c0 	.word	0xffff80c0
 8014128:	00000402 	.word	0x00000402
 801412c:	ffff8f0f 	.word	0xffff8f0f
 8014130:	ffff8000 	.word	0xffff8000
 8014134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014136:	785b      	ldrb	r3, [r3, #1]
 8014138:	2b01      	cmp	r3, #1
 801413a:	d114      	bne.n	8014166 <PCD_EP_ISR_Handler+0x722>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2250      	movs	r2, #80	@ 0x50
 8014142:	5a9b      	ldrh	r3, [r3, r2]
 8014144:	b29b      	uxth	r3, r3
 8014146:	001a      	movs	r2, r3
 8014148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801414a:	189b      	adds	r3, r3, r2
 801414c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801414e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	00da      	lsls	r2, r3, #3
 8014154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014156:	18d3      	adds	r3, r2, r3
 8014158:	4a3b      	ldr	r2, [pc, #236]	@ (8014248 <PCD_EP_ISR_Handler+0x804>)
 801415a:	4694      	mov	ip, r2
 801415c:	4463      	add	r3, ip
 801415e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014162:	2200      	movs	r2, #0
 8014164:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014168:	781a      	ldrb	r2, [r3, #0]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	0011      	movs	r1, r2
 801416e:	0018      	movs	r0, r3
 8014170:	f008 ff84 	bl	801d07c <HAL_PCD_DataInStageCallback>
 8014174:	e058      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8014176:	234a      	movs	r3, #74	@ 0x4a
 8014178:	18fb      	adds	r3, r7, r3
 801417a:	881a      	ldrh	r2, [r3, #0]
 801417c:	2380      	movs	r3, #128	@ 0x80
 801417e:	005b      	lsls	r3, r3, #1
 8014180:	4013      	ands	r3, r2
 8014182:	d149      	bne.n	8014218 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	2250      	movs	r2, #80	@ 0x50
 801418a:	5a9b      	ldrh	r3, [r3, r2]
 801418c:	b29b      	uxth	r3, r3
 801418e:	001a      	movs	r2, r3
 8014190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	00db      	lsls	r3, r3, #3
 8014196:	18d2      	adds	r2, r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	18d3      	adds	r3, r2, r3
 801419e:	4a2b      	ldr	r2, [pc, #172]	@ (801424c <PCD_EP_ISR_Handler+0x808>)
 80141a0:	4694      	mov	ip, r2
 80141a2:	4463      	add	r3, ip
 80141a4:	881a      	ldrh	r2, [r3, #0]
 80141a6:	2140      	movs	r1, #64	@ 0x40
 80141a8:	187b      	adds	r3, r7, r1
 80141aa:	0592      	lsls	r2, r2, #22
 80141ac:	0d92      	lsrs	r2, r2, #22
 80141ae:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80141b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141b2:	699a      	ldr	r2, [r3, #24]
 80141b4:	187b      	adds	r3, r7, r1
 80141b6:	881b      	ldrh	r3, [r3, #0]
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d907      	bls.n	80141cc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80141bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141be:	699a      	ldr	r2, [r3, #24]
 80141c0:	187b      	adds	r3, r7, r1
 80141c2:	881b      	ldrh	r3, [r3, #0]
 80141c4:	1ad2      	subs	r2, r2, r3
 80141c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c8:	619a      	str	r2, [r3, #24]
 80141ca:	e002      	b.n	80141d2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80141cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ce:	2200      	movs	r2, #0
 80141d0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80141d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141d4:	699b      	ldr	r3, [r3, #24]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d107      	bne.n	80141ea <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80141da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141dc:	781a      	ldrb	r2, [r3, #0]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	0011      	movs	r1, r2
 80141e2:	0018      	movs	r0, r3
 80141e4:	f008 ff4a 	bl	801d07c <HAL_PCD_DataInStageCallback>
 80141e8:	e01e      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80141ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ec:	695a      	ldr	r2, [r3, #20]
 80141ee:	2140      	movs	r1, #64	@ 0x40
 80141f0:	187b      	adds	r3, r7, r1
 80141f2:	881b      	ldrh	r3, [r3, #0]
 80141f4:	18d2      	adds	r2, r2, r3
 80141f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141f8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80141fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141fc:	69da      	ldr	r2, [r3, #28]
 80141fe:	187b      	adds	r3, r7, r1
 8014200:	881b      	ldrh	r3, [r3, #0]
 8014202:	18d2      	adds	r2, r2, r3
 8014204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014206:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801420e:	0011      	movs	r1, r2
 8014210:	0018      	movs	r0, r3
 8014212:	f005 fc3d 	bl	8019a90 <USB_EPStartXfer>
 8014216:	e007      	b.n	8014228 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014218:	234a      	movs	r3, #74	@ 0x4a
 801421a:	18fb      	adds	r3, r7, r3
 801421c:	881a      	ldrh	r2, [r3, #0]
 801421e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	0018      	movs	r0, r3
 8014224:	f000 f930 	bl	8014488 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2244      	movs	r2, #68	@ 0x44
 801422e:	5a9b      	ldrh	r3, [r3, r2]
 8014230:	b29b      	uxth	r3, r3
 8014232:	b21b      	sxth	r3, r3
 8014234:	2b00      	cmp	r3, #0
 8014236:	da01      	bge.n	801423c <PCD_EP_ISR_Handler+0x7f8>
 8014238:	f7ff fc0a 	bl	8013a50 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801423c:	2300      	movs	r3, #0
}
 801423e:	0018      	movs	r0, r3
 8014240:	46bd      	mov	sp, r7
 8014242:	b016      	add	sp, #88	@ 0x58
 8014244:	bdb0      	pop	{r4, r5, r7, pc}
 8014246:	46c0      	nop			@ (mov r8, r8)
 8014248:	00000406 	.word	0x00000406
 801424c:	00000402 	.word	0x00000402

08014250 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014250:	b590      	push	{r4, r7, lr}
 8014252:	b089      	sub	sp, #36	@ 0x24
 8014254:	af00      	add	r7, sp, #0
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	1dbb      	adds	r3, r7, #6
 801425c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801425e:	1dbb      	adds	r3, r7, #6
 8014260:	881a      	ldrh	r2, [r3, #0]
 8014262:	2380      	movs	r3, #128	@ 0x80
 8014264:	01db      	lsls	r3, r3, #7
 8014266:	4013      	ands	r3, r2
 8014268:	d100      	bne.n	801426c <HAL_PCD_EP_DB_Receive+0x1c>
 801426a:	e07d      	b.n	8014368 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	2250      	movs	r2, #80	@ 0x50
 8014272:	5a9b      	ldrh	r3, [r3, r2]
 8014274:	b29b      	uxth	r3, r3
 8014276:	001a      	movs	r2, r3
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	00db      	lsls	r3, r3, #3
 801427e:	18d2      	adds	r2, r2, r3
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	18d3      	adds	r3, r2, r3
 8014286:	4a7a      	ldr	r2, [pc, #488]	@ (8014470 <HAL_PCD_EP_DB_Receive+0x220>)
 8014288:	4694      	mov	ip, r2
 801428a:	4463      	add	r3, ip
 801428c:	881a      	ldrh	r2, [r3, #0]
 801428e:	211a      	movs	r1, #26
 8014290:	187b      	adds	r3, r7, r1
 8014292:	0592      	lsls	r2, r2, #22
 8014294:	0d92      	lsrs	r2, r2, #22
 8014296:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	699a      	ldr	r2, [r3, #24]
 801429c:	187b      	adds	r3, r7, r1
 801429e:	881b      	ldrh	r3, [r3, #0]
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d307      	bcc.n	80142b4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	699a      	ldr	r2, [r3, #24]
 80142a8:	187b      	adds	r3, r7, r1
 80142aa:	881b      	ldrh	r3, [r3, #0]
 80142ac:	1ad2      	subs	r2, r2, r3
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	619a      	str	r2, [r3, #24]
 80142b2:	e002      	b.n	80142ba <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	2200      	movs	r2, #0
 80142b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	699b      	ldr	r3, [r3, #24]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d121      	bne.n	8014306 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	001a      	movs	r2, r3
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	009b      	lsls	r3, r3, #2
 80142ce:	18d3      	adds	r3, r2, r3
 80142d0:	881b      	ldrh	r3, [r3, #0]
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	2018      	movs	r0, #24
 80142d6:	183b      	adds	r3, r7, r0
 80142d8:	4966      	ldr	r1, [pc, #408]	@ (8014474 <HAL_PCD_EP_DB_Receive+0x224>)
 80142da:	400a      	ands	r2, r1
 80142dc:	801a      	strh	r2, [r3, #0]
 80142de:	183b      	adds	r3, r7, r0
 80142e0:	183a      	adds	r2, r7, r0
 80142e2:	8812      	ldrh	r2, [r2, #0]
 80142e4:	2180      	movs	r1, #128	@ 0x80
 80142e6:	0189      	lsls	r1, r1, #6
 80142e8:	404a      	eors	r2, r1
 80142ea:	801a      	strh	r2, [r3, #0]
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	001a      	movs	r2, r3
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	781b      	ldrb	r3, [r3, #0]
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	18d3      	adds	r3, r2, r3
 80142fa:	183a      	adds	r2, r7, r0
 80142fc:	8812      	ldrh	r2, [r2, #0]
 80142fe:	495e      	ldr	r1, [pc, #376]	@ (8014478 <HAL_PCD_EP_DB_Receive+0x228>)
 8014300:	430a      	orrs	r2, r1
 8014302:	b292      	uxth	r2, r2
 8014304:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014306:	1dbb      	adds	r3, r7, #6
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	2240      	movs	r2, #64	@ 0x40
 801430c:	4013      	ands	r3, r2
 801430e:	d01a      	beq.n	8014346 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	001a      	movs	r2, r3
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	009b      	lsls	r3, r3, #2
 801431c:	18d3      	adds	r3, r2, r3
 801431e:	881b      	ldrh	r3, [r3, #0]
 8014320:	b29a      	uxth	r2, r3
 8014322:	2016      	movs	r0, #22
 8014324:	183b      	adds	r3, r7, r0
 8014326:	4955      	ldr	r1, [pc, #340]	@ (801447c <HAL_PCD_EP_DB_Receive+0x22c>)
 8014328:	400a      	ands	r2, r1
 801432a:	801a      	strh	r2, [r3, #0]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	001a      	movs	r2, r3
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	18d3      	adds	r3, r2, r3
 801433a:	183a      	adds	r2, r7, r0
 801433c:	8812      	ldrh	r2, [r2, #0]
 801433e:	4950      	ldr	r1, [pc, #320]	@ (8014480 <HAL_PCD_EP_DB_Receive+0x230>)
 8014340:	430a      	orrs	r2, r1
 8014342:	b292      	uxth	r2, r2
 8014344:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014346:	241a      	movs	r4, #26
 8014348:	193b      	adds	r3, r7, r4
 801434a:	881b      	ldrh	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d100      	bne.n	8014352 <HAL_PCD_EP_DB_Receive+0x102>
 8014350:	e086      	b.n	8014460 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	6818      	ldr	r0, [r3, #0]
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	6959      	ldr	r1, [r3, #20]
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	891a      	ldrh	r2, [r3, #8]
 801435e:	193b      	adds	r3, r7, r4
 8014360:	881b      	ldrh	r3, [r3, #0]
 8014362:	f006 fe50 	bl	801b006 <USB_ReadPMA>
 8014366:	e07b      	b.n	8014460 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2250      	movs	r2, #80	@ 0x50
 801436e:	5a9b      	ldrh	r3, [r3, r2]
 8014370:	b29b      	uxth	r3, r3
 8014372:	001a      	movs	r2, r3
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	00db      	lsls	r3, r3, #3
 801437a:	18d2      	adds	r2, r2, r3
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	18d3      	adds	r3, r2, r3
 8014382:	4a40      	ldr	r2, [pc, #256]	@ (8014484 <HAL_PCD_EP_DB_Receive+0x234>)
 8014384:	4694      	mov	ip, r2
 8014386:	4463      	add	r3, ip
 8014388:	881a      	ldrh	r2, [r3, #0]
 801438a:	211a      	movs	r1, #26
 801438c:	187b      	adds	r3, r7, r1
 801438e:	0592      	lsls	r2, r2, #22
 8014390:	0d92      	lsrs	r2, r2, #22
 8014392:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	699a      	ldr	r2, [r3, #24]
 8014398:	187b      	adds	r3, r7, r1
 801439a:	881b      	ldrh	r3, [r3, #0]
 801439c:	429a      	cmp	r2, r3
 801439e:	d307      	bcc.n	80143b0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	699a      	ldr	r2, [r3, #24]
 80143a4:	187b      	adds	r3, r7, r1
 80143a6:	881b      	ldrh	r3, [r3, #0]
 80143a8:	1ad2      	subs	r2, r2, r3
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	619a      	str	r2, [r3, #24]
 80143ae:	e002      	b.n	80143b6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	2200      	movs	r2, #0
 80143b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	699b      	ldr	r3, [r3, #24]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d121      	bne.n	8014402 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	001a      	movs	r2, r3
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	009b      	lsls	r3, r3, #2
 80143ca:	18d3      	adds	r3, r2, r3
 80143cc:	881b      	ldrh	r3, [r3, #0]
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	201e      	movs	r0, #30
 80143d2:	183b      	adds	r3, r7, r0
 80143d4:	4927      	ldr	r1, [pc, #156]	@ (8014474 <HAL_PCD_EP_DB_Receive+0x224>)
 80143d6:	400a      	ands	r2, r1
 80143d8:	801a      	strh	r2, [r3, #0]
 80143da:	183b      	adds	r3, r7, r0
 80143dc:	183a      	adds	r2, r7, r0
 80143de:	8812      	ldrh	r2, [r2, #0]
 80143e0:	2180      	movs	r1, #128	@ 0x80
 80143e2:	0189      	lsls	r1, r1, #6
 80143e4:	404a      	eors	r2, r1
 80143e6:	801a      	strh	r2, [r3, #0]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	001a      	movs	r2, r3
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	009b      	lsls	r3, r3, #2
 80143f4:	18d3      	adds	r3, r2, r3
 80143f6:	183a      	adds	r2, r7, r0
 80143f8:	8812      	ldrh	r2, [r2, #0]
 80143fa:	491f      	ldr	r1, [pc, #124]	@ (8014478 <HAL_PCD_EP_DB_Receive+0x228>)
 80143fc:	430a      	orrs	r2, r1
 80143fe:	b292      	uxth	r2, r2
 8014400:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014402:	1dbb      	adds	r3, r7, #6
 8014404:	881b      	ldrh	r3, [r3, #0]
 8014406:	2240      	movs	r2, #64	@ 0x40
 8014408:	4013      	ands	r3, r2
 801440a:	d11a      	bne.n	8014442 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	001a      	movs	r2, r3
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	18d3      	adds	r3, r2, r3
 801441a:	881b      	ldrh	r3, [r3, #0]
 801441c:	b29a      	uxth	r2, r3
 801441e:	201c      	movs	r0, #28
 8014420:	183b      	adds	r3, r7, r0
 8014422:	4916      	ldr	r1, [pc, #88]	@ (801447c <HAL_PCD_EP_DB_Receive+0x22c>)
 8014424:	400a      	ands	r2, r1
 8014426:	801a      	strh	r2, [r3, #0]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	001a      	movs	r2, r3
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	18d3      	adds	r3, r2, r3
 8014436:	183a      	adds	r2, r7, r0
 8014438:	8812      	ldrh	r2, [r2, #0]
 801443a:	4911      	ldr	r1, [pc, #68]	@ (8014480 <HAL_PCD_EP_DB_Receive+0x230>)
 801443c:	430a      	orrs	r2, r1
 801443e:	b292      	uxth	r2, r2
 8014440:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014442:	241a      	movs	r4, #26
 8014444:	193b      	adds	r3, r7, r4
 8014446:	881b      	ldrh	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d009      	beq.n	8014460 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	6818      	ldr	r0, [r3, #0]
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	6959      	ldr	r1, [r3, #20]
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	895a      	ldrh	r2, [r3, #10]
 8014458:	193b      	adds	r3, r7, r4
 801445a:	881b      	ldrh	r3, [r3, #0]
 801445c:	f006 fdd3 	bl	801b006 <USB_ReadPMA>
    }
  }

  return count;
 8014460:	231a      	movs	r3, #26
 8014462:	18fb      	adds	r3, r7, r3
 8014464:	881b      	ldrh	r3, [r3, #0]
}
 8014466:	0018      	movs	r0, r3
 8014468:	46bd      	mov	sp, r7
 801446a:	b009      	add	sp, #36	@ 0x24
 801446c:	bd90      	pop	{r4, r7, pc}
 801446e:	46c0      	nop			@ (mov r8, r8)
 8014470:	00000402 	.word	0x00000402
 8014474:	ffffbf8f 	.word	0xffffbf8f
 8014478:	ffff8080 	.word	0xffff8080
 801447c:	ffff8f8f 	.word	0xffff8f8f
 8014480:	ffff80c0 	.word	0xffff80c0
 8014484:	00000406 	.word	0x00000406

08014488 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b0a4      	sub	sp, #144	@ 0x90
 801448c:	af00      	add	r7, sp, #0
 801448e:	60f8      	str	r0, [r7, #12]
 8014490:	60b9      	str	r1, [r7, #8]
 8014492:	1dbb      	adds	r3, r7, #6
 8014494:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014496:	1dbb      	adds	r3, r7, #6
 8014498:	881b      	ldrh	r3, [r3, #0]
 801449a:	2240      	movs	r2, #64	@ 0x40
 801449c:	4013      	ands	r3, r2
 801449e:	d100      	bne.n	80144a2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80144a0:	e1e4      	b.n	801486c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2250      	movs	r2, #80	@ 0x50
 80144a8:	5a9b      	ldrh	r3, [r3, r2]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	001a      	movs	r2, r3
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	00db      	lsls	r3, r3, #3
 80144b4:	18d2      	adds	r2, r2, r3
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	18d3      	adds	r3, r2, r3
 80144bc:	4ad0      	ldr	r2, [pc, #832]	@ (8014800 <HAL_PCD_EP_DB_Transmit+0x378>)
 80144be:	4694      	mov	ip, r2
 80144c0:	4463      	add	r3, ip
 80144c2:	881a      	ldrh	r2, [r3, #0]
 80144c4:	2186      	movs	r1, #134	@ 0x86
 80144c6:	187b      	adds	r3, r7, r1
 80144c8:	0592      	lsls	r2, r2, #22
 80144ca:	0d92      	lsrs	r2, r2, #22
 80144cc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	699a      	ldr	r2, [r3, #24]
 80144d2:	187b      	adds	r3, r7, r1
 80144d4:	881b      	ldrh	r3, [r3, #0]
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d907      	bls.n	80144ea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	699a      	ldr	r2, [r3, #24]
 80144de:	187b      	adds	r3, r7, r1
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	1ad2      	subs	r2, r2, r3
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	619a      	str	r2, [r3, #24]
 80144e8:	e002      	b.n	80144f0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	2200      	movs	r2, #0
 80144ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	699b      	ldr	r3, [r3, #24]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d000      	beq.n	80144fa <HAL_PCD_EP_DB_Transmit+0x72>
 80144f8:	e0b5      	b.n	8014666 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	785b      	ldrb	r3, [r3, #1]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d125      	bne.n	801454e <HAL_PCD_EP_DB_Transmit+0xc6>
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2250      	movs	r2, #80	@ 0x50
 801450e:	5a9b      	ldrh	r3, [r3, r2]
 8014510:	b29b      	uxth	r3, r3
 8014512:	001a      	movs	r2, r3
 8014514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014516:	189b      	adds	r3, r3, r2
 8014518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	00da      	lsls	r2, r3, #3
 8014520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014522:	18d3      	adds	r3, r2, r3
 8014524:	4ab6      	ldr	r2, [pc, #728]	@ (8014800 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014526:	4694      	mov	ip, r2
 8014528:	4463      	add	r3, ip
 801452a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801452e:	881b      	ldrh	r3, [r3, #0]
 8014530:	b29b      	uxth	r3, r3
 8014532:	059b      	lsls	r3, r3, #22
 8014534:	0d9b      	lsrs	r3, r3, #22
 8014536:	b29a      	uxth	r2, r3
 8014538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801453a:	801a      	strh	r2, [r3, #0]
 801453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	b29b      	uxth	r3, r3
 8014542:	4ab0      	ldr	r2, [pc, #704]	@ (8014804 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014544:	4313      	orrs	r3, r2
 8014546:	b29a      	uxth	r2, r3
 8014548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801454a:	801a      	strh	r2, [r3, #0]
 801454c:	e01b      	b.n	8014586 <HAL_PCD_EP_DB_Transmit+0xfe>
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	785b      	ldrb	r3, [r3, #1]
 8014552:	2b01      	cmp	r3, #1
 8014554:	d117      	bne.n	8014586 <HAL_PCD_EP_DB_Transmit+0xfe>
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	637b      	str	r3, [r7, #52]	@ 0x34
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2250      	movs	r2, #80	@ 0x50
 8014562:	5a9b      	ldrh	r3, [r3, r2]
 8014564:	b29b      	uxth	r3, r3
 8014566:	001a      	movs	r2, r3
 8014568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801456a:	189b      	adds	r3, r3, r2
 801456c:	637b      	str	r3, [r7, #52]	@ 0x34
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	00da      	lsls	r2, r3, #3
 8014574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014576:	18d3      	adds	r3, r2, r3
 8014578:	4aa1      	ldr	r2, [pc, #644]	@ (8014800 <HAL_PCD_EP_DB_Transmit+0x378>)
 801457a:	4694      	mov	ip, r2
 801457c:	4463      	add	r3, ip
 801457e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014582:	2200      	movs	r2, #0
 8014584:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	627b      	str	r3, [r7, #36]	@ 0x24
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	785b      	ldrb	r3, [r3, #1]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d125      	bne.n	80145e0 <HAL_PCD_EP_DB_Transmit+0x158>
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	61fb      	str	r3, [r7, #28]
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2250      	movs	r2, #80	@ 0x50
 80145a0:	5a9b      	ldrh	r3, [r3, r2]
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	001a      	movs	r2, r3
 80145a6:	69fb      	ldr	r3, [r7, #28]
 80145a8:	189b      	adds	r3, r3, r2
 80145aa:	61fb      	str	r3, [r7, #28]
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	00da      	lsls	r2, r3, #3
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	18d3      	adds	r3, r2, r3
 80145b6:	4a94      	ldr	r2, [pc, #592]	@ (8014808 <HAL_PCD_EP_DB_Transmit+0x380>)
 80145b8:	4694      	mov	ip, r2
 80145ba:	4463      	add	r3, ip
 80145bc:	61bb      	str	r3, [r7, #24]
 80145be:	69bb      	ldr	r3, [r7, #24]
 80145c0:	881b      	ldrh	r3, [r3, #0]
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	059b      	lsls	r3, r3, #22
 80145c6:	0d9b      	lsrs	r3, r3, #22
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	801a      	strh	r2, [r3, #0]
 80145ce:	69bb      	ldr	r3, [r7, #24]
 80145d0:	881b      	ldrh	r3, [r3, #0]
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	4a8b      	ldr	r2, [pc, #556]	@ (8014804 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80145d6:	4313      	orrs	r3, r2
 80145d8:	b29a      	uxth	r2, r3
 80145da:	69bb      	ldr	r3, [r7, #24]
 80145dc:	801a      	strh	r2, [r3, #0]
 80145de:	e018      	b.n	8014612 <HAL_PCD_EP_DB_Transmit+0x18a>
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	785b      	ldrb	r3, [r3, #1]
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	d114      	bne.n	8014612 <HAL_PCD_EP_DB_Transmit+0x18a>
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2250      	movs	r2, #80	@ 0x50
 80145ee:	5a9b      	ldrh	r3, [r3, r2]
 80145f0:	b29b      	uxth	r3, r3
 80145f2:	001a      	movs	r2, r3
 80145f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145f6:	189b      	adds	r3, r3, r2
 80145f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	00da      	lsls	r2, r3, #3
 8014600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014602:	18d3      	adds	r3, r2, r3
 8014604:	4a80      	ldr	r2, [pc, #512]	@ (8014808 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014606:	4694      	mov	ip, r2
 8014608:	4463      	add	r3, ip
 801460a:	623b      	str	r3, [r7, #32]
 801460c:	6a3b      	ldr	r3, [r7, #32]
 801460e:	2200      	movs	r2, #0
 8014610:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	781a      	ldrb	r2, [r3, #0]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	0011      	movs	r1, r2
 801461a:	0018      	movs	r0, r3
 801461c:	f008 fd2e 	bl	801d07c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014620:	1dbb      	adds	r3, r7, #6
 8014622:	881a      	ldrh	r2, [r3, #0]
 8014624:	2380      	movs	r3, #128	@ 0x80
 8014626:	01db      	lsls	r3, r3, #7
 8014628:	4013      	ands	r3, r2
 801462a:	d100      	bne.n	801462e <HAL_PCD_EP_DB_Transmit+0x1a6>
 801462c:	e309      	b.n	8014c42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	001a      	movs	r2, r3
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	781b      	ldrb	r3, [r3, #0]
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	18d3      	adds	r3, r2, r3
 801463c:	881b      	ldrh	r3, [r3, #0]
 801463e:	b29a      	uxth	r2, r3
 8014640:	2016      	movs	r0, #22
 8014642:	183b      	adds	r3, r7, r0
 8014644:	4971      	ldr	r1, [pc, #452]	@ (801480c <HAL_PCD_EP_DB_Transmit+0x384>)
 8014646:	400a      	ands	r2, r1
 8014648:	801a      	strh	r2, [r3, #0]
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	001a      	movs	r2, r3
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	18d3      	adds	r3, r2, r3
 8014658:	183a      	adds	r2, r7, r0
 801465a:	8812      	ldrh	r2, [r2, #0]
 801465c:	496c      	ldr	r1, [pc, #432]	@ (8014810 <HAL_PCD_EP_DB_Transmit+0x388>)
 801465e:	430a      	orrs	r2, r1
 8014660:	b292      	uxth	r2, r2
 8014662:	801a      	strh	r2, [r3, #0]
 8014664:	e2ed      	b.n	8014c42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014666:	1dbb      	adds	r3, r7, #6
 8014668:	881a      	ldrh	r2, [r3, #0]
 801466a:	2380      	movs	r3, #128	@ 0x80
 801466c:	01db      	lsls	r3, r3, #7
 801466e:	4013      	ands	r3, r2
 8014670:	d01a      	beq.n	80146a8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	001a      	movs	r2, r3
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	009b      	lsls	r3, r3, #2
 801467e:	18d3      	adds	r3, r2, r3
 8014680:	881b      	ldrh	r3, [r3, #0]
 8014682:	b29a      	uxth	r2, r3
 8014684:	208a      	movs	r0, #138	@ 0x8a
 8014686:	183b      	adds	r3, r7, r0
 8014688:	4960      	ldr	r1, [pc, #384]	@ (801480c <HAL_PCD_EP_DB_Transmit+0x384>)
 801468a:	400a      	ands	r2, r1
 801468c:	801a      	strh	r2, [r3, #0]
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	001a      	movs	r2, r3
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	18d3      	adds	r3, r2, r3
 801469c:	183a      	adds	r2, r7, r0
 801469e:	8812      	ldrh	r2, [r2, #0]
 80146a0:	495b      	ldr	r1, [pc, #364]	@ (8014810 <HAL_PCD_EP_DB_Transmit+0x388>)
 80146a2:	430a      	orrs	r2, r1
 80146a4:	b292      	uxth	r2, r2
 80146a6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	2224      	movs	r2, #36	@ 0x24
 80146ac:	5c9b      	ldrb	r3, [r3, r2]
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	d000      	beq.n	80146b4 <HAL_PCD_EP_DB_Transmit+0x22c>
 80146b2:	e2c6      	b.n	8014c42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	695a      	ldr	r2, [r3, #20]
 80146b8:	2186      	movs	r1, #134	@ 0x86
 80146ba:	187b      	adds	r3, r7, r1
 80146bc:	881b      	ldrh	r3, [r3, #0]
 80146be:	18d2      	adds	r2, r2, r3
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	69da      	ldr	r2, [r3, #28]
 80146c8:	187b      	adds	r3, r7, r1
 80146ca:	881b      	ldrh	r3, [r3, #0]
 80146cc:	18d2      	adds	r2, r2, r3
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	6a1a      	ldr	r2, [r3, #32]
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	691b      	ldr	r3, [r3, #16]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d30c      	bcc.n	80146f8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	691b      	ldr	r3, [r3, #16]
 80146e2:	218c      	movs	r1, #140	@ 0x8c
 80146e4:	187a      	adds	r2, r7, r1
 80146e6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	6a1a      	ldr	r2, [r3, #32]
 80146ec:	187b      	adds	r3, r7, r1
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	1ad2      	subs	r2, r2, r3
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	621a      	str	r2, [r3, #32]
 80146f6:	e01a      	b.n	801472e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	6a1b      	ldr	r3, [r3, #32]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d10a      	bne.n	8014716 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014700:	2386      	movs	r3, #134	@ 0x86
 8014702:	18fb      	adds	r3, r7, r3
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	228c      	movs	r2, #140	@ 0x8c
 8014708:	18ba      	adds	r2, r7, r2
 801470a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	2224      	movs	r2, #36	@ 0x24
 8014710:	2100      	movs	r1, #0
 8014712:	5499      	strb	r1, [r3, r2]
 8014714:	e00b      	b.n	801472e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	2224      	movs	r2, #36	@ 0x24
 801471a:	2100      	movs	r1, #0
 801471c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	6a1b      	ldr	r3, [r3, #32]
 8014722:	228c      	movs	r2, #140	@ 0x8c
 8014724:	18ba      	adds	r2, r7, r2
 8014726:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2200      	movs	r2, #0
 801472c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	785b      	ldrb	r3, [r3, #1]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d000      	beq.n	8014738 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8014736:	e06d      	b.n	8014814 <HAL_PCD_EP_DB_Transmit+0x38c>
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	2250      	movs	r2, #80	@ 0x50
 8014744:	5a9b      	ldrh	r3, [r3, r2]
 8014746:	b29b      	uxth	r3, r3
 8014748:	001a      	movs	r2, r3
 801474a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801474c:	189b      	adds	r3, r3, r2
 801474e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	00da      	lsls	r2, r3, #3
 8014756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014758:	18d3      	adds	r3, r2, r3
 801475a:	4a29      	ldr	r2, [pc, #164]	@ (8014800 <HAL_PCD_EP_DB_Transmit+0x378>)
 801475c:	4694      	mov	ip, r2
 801475e:	4463      	add	r3, ip
 8014760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014764:	881b      	ldrh	r3, [r3, #0]
 8014766:	b29b      	uxth	r3, r3
 8014768:	059b      	lsls	r3, r3, #22
 801476a:	0d9b      	lsrs	r3, r3, #22
 801476c:	b29a      	uxth	r2, r3
 801476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014770:	801a      	strh	r2, [r3, #0]
 8014772:	228c      	movs	r2, #140	@ 0x8c
 8014774:	18bb      	adds	r3, r7, r2
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b3e      	cmp	r3, #62	@ 0x3e
 801477a:	d91a      	bls.n	80147b2 <HAL_PCD_EP_DB_Transmit+0x32a>
 801477c:	18bb      	adds	r3, r7, r2
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	095b      	lsrs	r3, r3, #5
 8014782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014784:	18bb      	adds	r3, r7, r2
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	221f      	movs	r2, #31
 801478a:	4013      	ands	r3, r2
 801478c:	d102      	bne.n	8014794 <HAL_PCD_EP_DB_Transmit+0x30c>
 801478e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014790:	3b01      	subs	r3, #1
 8014792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014796:	881b      	ldrh	r3, [r3, #0]
 8014798:	b29a      	uxth	r2, r3
 801479a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801479c:	b29b      	uxth	r3, r3
 801479e:	029b      	lsls	r3, r3, #10
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	4313      	orrs	r3, r2
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	4a17      	ldr	r2, [pc, #92]	@ (8014804 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80147a8:	4313      	orrs	r3, r2
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ae:	801a      	strh	r2, [r3, #0]
 80147b0:	e04f      	b.n	8014852 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80147b2:	238c      	movs	r3, #140	@ 0x8c
 80147b4:	18fb      	adds	r3, r7, r3
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d108      	bne.n	80147ce <HAL_PCD_EP_DB_Transmit+0x346>
 80147bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147be:	881b      	ldrh	r3, [r3, #0]
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	4a10      	ldr	r2, [pc, #64]	@ (8014804 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80147c4:	4313      	orrs	r3, r2
 80147c6:	b29a      	uxth	r2, r3
 80147c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ca:	801a      	strh	r2, [r3, #0]
 80147cc:	e041      	b.n	8014852 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80147ce:	228c      	movs	r2, #140	@ 0x8c
 80147d0:	18bb      	adds	r3, r7, r2
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	085b      	lsrs	r3, r3, #1
 80147d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147d8:	18bb      	adds	r3, r7, r2
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2201      	movs	r2, #1
 80147de:	4013      	ands	r3, r2
 80147e0:	d002      	beq.n	80147e8 <HAL_PCD_EP_DB_Transmit+0x360>
 80147e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147e4:	3301      	adds	r3, #1
 80147e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ea:	881b      	ldrh	r3, [r3, #0]
 80147ec:	b29a      	uxth	r2, r3
 80147ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	029b      	lsls	r3, r3, #10
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	4313      	orrs	r3, r2
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147fc:	801a      	strh	r2, [r3, #0]
 80147fe:	e028      	b.n	8014852 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014800:	00000402 	.word	0x00000402
 8014804:	ffff8000 	.word	0xffff8000
 8014808:	00000406 	.word	0x00000406
 801480c:	ffff8f8f 	.word	0xffff8f8f
 8014810:	ffffc080 	.word	0xffffc080
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	785b      	ldrb	r3, [r3, #1]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d11a      	bne.n	8014852 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	647b      	str	r3, [r7, #68]	@ 0x44
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2250      	movs	r2, #80	@ 0x50
 8014828:	5a9b      	ldrh	r3, [r3, r2]
 801482a:	b29b      	uxth	r3, r3
 801482c:	001a      	movs	r2, r3
 801482e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014830:	189b      	adds	r3, r3, r2
 8014832:	647b      	str	r3, [r7, #68]	@ 0x44
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	00da      	lsls	r2, r3, #3
 801483a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801483c:	18d3      	adds	r3, r2, r3
 801483e:	4adb      	ldr	r2, [pc, #876]	@ (8014bac <HAL_PCD_EP_DB_Transmit+0x724>)
 8014840:	4694      	mov	ip, r2
 8014842:	4463      	add	r3, ip
 8014844:	643b      	str	r3, [r7, #64]	@ 0x40
 8014846:	238c      	movs	r3, #140	@ 0x8c
 8014848:	18fb      	adds	r3, r7, r3
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	b29a      	uxth	r2, r3
 801484e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014850:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	6818      	ldr	r0, [r3, #0]
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	6959      	ldr	r1, [r3, #20]
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	891a      	ldrh	r2, [r3, #8]
 801485e:	238c      	movs	r3, #140	@ 0x8c
 8014860:	18fb      	adds	r3, r7, r3
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	b29b      	uxth	r3, r3
 8014866:	f006 fb85 	bl	801af74 <USB_WritePMA>
 801486a:	e1ea      	b.n	8014c42 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	2250      	movs	r2, #80	@ 0x50
 8014872:	5a9b      	ldrh	r3, [r3, r2]
 8014874:	b29b      	uxth	r3, r3
 8014876:	001a      	movs	r2, r3
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	00db      	lsls	r3, r3, #3
 801487e:	18d2      	adds	r2, r2, r3
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	18d3      	adds	r3, r2, r3
 8014886:	4aca      	ldr	r2, [pc, #808]	@ (8014bb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014888:	4694      	mov	ip, r2
 801488a:	4463      	add	r3, ip
 801488c:	881a      	ldrh	r2, [r3, #0]
 801488e:	2186      	movs	r1, #134	@ 0x86
 8014890:	187b      	adds	r3, r7, r1
 8014892:	0592      	lsls	r2, r2, #22
 8014894:	0d92      	lsrs	r2, r2, #22
 8014896:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	699a      	ldr	r2, [r3, #24]
 801489c:	187b      	adds	r3, r7, r1
 801489e:	881b      	ldrh	r3, [r3, #0]
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d307      	bcc.n	80148b4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	699a      	ldr	r2, [r3, #24]
 80148a8:	187b      	adds	r3, r7, r1
 80148aa:	881b      	ldrh	r3, [r3, #0]
 80148ac:	1ad2      	subs	r2, r2, r3
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	619a      	str	r2, [r3, #24]
 80148b2:	e002      	b.n	80148ba <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	2200      	movs	r2, #0
 80148b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	699b      	ldr	r3, [r3, #24]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d000      	beq.n	80148c4 <HAL_PCD_EP_DB_Transmit+0x43c>
 80148c2:	e0bb      	b.n	8014a3c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	785b      	ldrb	r3, [r3, #1]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d125      	bne.n	8014918 <HAL_PCD_EP_DB_Transmit+0x490>
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	2250      	movs	r2, #80	@ 0x50
 80148d8:	5a9b      	ldrh	r3, [r3, r2]
 80148da:	b29b      	uxth	r3, r3
 80148dc:	001a      	movs	r2, r3
 80148de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80148e0:	189b      	adds	r3, r3, r2
 80148e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	00da      	lsls	r2, r3, #3
 80148ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80148ec:	18d3      	adds	r3, r2, r3
 80148ee:	4aaf      	ldr	r2, [pc, #700]	@ (8014bac <HAL_PCD_EP_DB_Transmit+0x724>)
 80148f0:	4694      	mov	ip, r2
 80148f2:	4463      	add	r3, ip
 80148f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80148f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80148f8:	881b      	ldrh	r3, [r3, #0]
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	059b      	lsls	r3, r3, #22
 80148fe:	0d9b      	lsrs	r3, r3, #22
 8014900:	b29a      	uxth	r2, r3
 8014902:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014904:	801a      	strh	r2, [r3, #0]
 8014906:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	b29b      	uxth	r3, r3
 801490c:	4aa9      	ldr	r2, [pc, #676]	@ (8014bb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801490e:	4313      	orrs	r3, r2
 8014910:	b29a      	uxth	r2, r3
 8014912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014914:	801a      	strh	r2, [r3, #0]
 8014916:	e01b      	b.n	8014950 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	785b      	ldrb	r3, [r3, #1]
 801491c:	2b01      	cmp	r3, #1
 801491e:	d117      	bne.n	8014950 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	667b      	str	r3, [r7, #100]	@ 0x64
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2250      	movs	r2, #80	@ 0x50
 801492c:	5a9b      	ldrh	r3, [r3, r2]
 801492e:	b29b      	uxth	r3, r3
 8014930:	001a      	movs	r2, r3
 8014932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014934:	189b      	adds	r3, r3, r2
 8014936:	667b      	str	r3, [r7, #100]	@ 0x64
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	00da      	lsls	r2, r3, #3
 801493e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014940:	18d3      	adds	r3, r2, r3
 8014942:	4a9a      	ldr	r2, [pc, #616]	@ (8014bac <HAL_PCD_EP_DB_Transmit+0x724>)
 8014944:	4694      	mov	ip, r2
 8014946:	4463      	add	r3, ip
 8014948:	663b      	str	r3, [r7, #96]	@ 0x60
 801494a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801494c:	2200      	movs	r2, #0
 801494e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	677b      	str	r3, [r7, #116]	@ 0x74
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	785b      	ldrb	r3, [r3, #1]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d12b      	bne.n	80149b6 <HAL_PCD_EP_DB_Transmit+0x52e>
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2250      	movs	r2, #80	@ 0x50
 801496a:	5a9b      	ldrh	r3, [r3, r2]
 801496c:	b29b      	uxth	r3, r3
 801496e:	001a      	movs	r2, r3
 8014970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014972:	189b      	adds	r3, r3, r2
 8014974:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	00da      	lsls	r2, r3, #3
 801497c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801497e:	18d3      	adds	r3, r2, r3
 8014980:	4a8b      	ldr	r2, [pc, #556]	@ (8014bb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014982:	4694      	mov	ip, r2
 8014984:	4463      	add	r3, ip
 8014986:	2180      	movs	r1, #128	@ 0x80
 8014988:	187a      	adds	r2, r7, r1
 801498a:	6013      	str	r3, [r2, #0]
 801498c:	187b      	adds	r3, r7, r1
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	881b      	ldrh	r3, [r3, #0]
 8014992:	b29b      	uxth	r3, r3
 8014994:	059b      	lsls	r3, r3, #22
 8014996:	0d9b      	lsrs	r3, r3, #22
 8014998:	b29a      	uxth	r2, r3
 801499a:	187b      	adds	r3, r7, r1
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	801a      	strh	r2, [r3, #0]
 80149a0:	187b      	adds	r3, r7, r1
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	4a82      	ldr	r2, [pc, #520]	@ (8014bb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80149aa:	4313      	orrs	r3, r2
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	187b      	adds	r3, r7, r1
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	801a      	strh	r2, [r3, #0]
 80149b4:	e018      	b.n	80149e8 <HAL_PCD_EP_DB_Transmit+0x560>
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	785b      	ldrb	r3, [r3, #1]
 80149ba:	2b01      	cmp	r3, #1
 80149bc:	d114      	bne.n	80149e8 <HAL_PCD_EP_DB_Transmit+0x560>
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2250      	movs	r2, #80	@ 0x50
 80149c4:	5a9b      	ldrh	r3, [r3, r2]
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	001a      	movs	r2, r3
 80149ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80149cc:	189b      	adds	r3, r3, r2
 80149ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	00da      	lsls	r2, r3, #3
 80149d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80149d8:	18d3      	adds	r3, r2, r3
 80149da:	4a75      	ldr	r2, [pc, #468]	@ (8014bb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 80149dc:	4694      	mov	ip, r2
 80149de:	4463      	add	r3, ip
 80149e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80149e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80149e4:	2200      	movs	r2, #0
 80149e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	781a      	ldrb	r2, [r3, #0]
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	0011      	movs	r1, r2
 80149f0:	0018      	movs	r0, r3
 80149f2:	f008 fb43 	bl	801d07c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80149f6:	1dbb      	adds	r3, r7, #6
 80149f8:	881a      	ldrh	r2, [r3, #0]
 80149fa:	2380      	movs	r3, #128	@ 0x80
 80149fc:	01db      	lsls	r3, r3, #7
 80149fe:	4013      	ands	r3, r2
 8014a00:	d000      	beq.n	8014a04 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014a02:	e11e      	b.n	8014c42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	001a      	movs	r2, r3
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	781b      	ldrb	r3, [r3, #0]
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	18d3      	adds	r3, r2, r3
 8014a12:	881b      	ldrh	r3, [r3, #0]
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	2088      	movs	r0, #136	@ 0x88
 8014a18:	183b      	adds	r3, r7, r0
 8014a1a:	4967      	ldr	r1, [pc, #412]	@ (8014bb8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014a1c:	400a      	ands	r2, r1
 8014a1e:	801a      	strh	r2, [r3, #0]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	001a      	movs	r2, r3
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	18d3      	adds	r3, r2, r3
 8014a2e:	183a      	adds	r2, r7, r0
 8014a30:	8812      	ldrh	r2, [r2, #0]
 8014a32:	4962      	ldr	r1, [pc, #392]	@ (8014bbc <HAL_PCD_EP_DB_Transmit+0x734>)
 8014a34:	430a      	orrs	r2, r1
 8014a36:	b292      	uxth	r2, r2
 8014a38:	801a      	strh	r2, [r3, #0]
 8014a3a:	e102      	b.n	8014c42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014a3c:	1dbb      	adds	r3, r7, #6
 8014a3e:	881a      	ldrh	r2, [r3, #0]
 8014a40:	2380      	movs	r3, #128	@ 0x80
 8014a42:	01db      	lsls	r3, r3, #7
 8014a44:	4013      	ands	r3, r2
 8014a46:	d11a      	bne.n	8014a7e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	001a      	movs	r2, r3
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	009b      	lsls	r3, r3, #2
 8014a54:	18d3      	adds	r3, r2, r3
 8014a56:	881b      	ldrh	r3, [r3, #0]
 8014a58:	b29a      	uxth	r2, r3
 8014a5a:	204e      	movs	r0, #78	@ 0x4e
 8014a5c:	183b      	adds	r3, r7, r0
 8014a5e:	4956      	ldr	r1, [pc, #344]	@ (8014bb8 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014a60:	400a      	ands	r2, r1
 8014a62:	801a      	strh	r2, [r3, #0]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	001a      	movs	r2, r3
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	18d3      	adds	r3, r2, r3
 8014a72:	183a      	adds	r2, r7, r0
 8014a74:	8812      	ldrh	r2, [r2, #0]
 8014a76:	4951      	ldr	r1, [pc, #324]	@ (8014bbc <HAL_PCD_EP_DB_Transmit+0x734>)
 8014a78:	430a      	orrs	r2, r1
 8014a7a:	b292      	uxth	r2, r2
 8014a7c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	2224      	movs	r2, #36	@ 0x24
 8014a82:	5c9b      	ldrb	r3, [r3, r2]
 8014a84:	2b01      	cmp	r3, #1
 8014a86:	d000      	beq.n	8014a8a <HAL_PCD_EP_DB_Transmit+0x602>
 8014a88:	e0db      	b.n	8014c42 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	695a      	ldr	r2, [r3, #20]
 8014a8e:	2186      	movs	r1, #134	@ 0x86
 8014a90:	187b      	adds	r3, r7, r1
 8014a92:	881b      	ldrh	r3, [r3, #0]
 8014a94:	18d2      	adds	r2, r2, r3
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	69da      	ldr	r2, [r3, #28]
 8014a9e:	187b      	adds	r3, r7, r1
 8014aa0:	881b      	ldrh	r3, [r3, #0]
 8014aa2:	18d2      	adds	r2, r2, r3
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	6a1a      	ldr	r2, [r3, #32]
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	691b      	ldr	r3, [r3, #16]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d30c      	bcc.n	8014ace <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	691b      	ldr	r3, [r3, #16]
 8014ab8:	218c      	movs	r1, #140	@ 0x8c
 8014aba:	187a      	adds	r2, r7, r1
 8014abc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	6a1a      	ldr	r2, [r3, #32]
 8014ac2:	187b      	adds	r3, r7, r1
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	1ad2      	subs	r2, r2, r3
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	621a      	str	r2, [r3, #32]
 8014acc:	e01a      	b.n	8014b04 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	6a1b      	ldr	r3, [r3, #32]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d10a      	bne.n	8014aec <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014ad6:	2386      	movs	r3, #134	@ 0x86
 8014ad8:	18fb      	adds	r3, r7, r3
 8014ada:	881b      	ldrh	r3, [r3, #0]
 8014adc:	228c      	movs	r2, #140	@ 0x8c
 8014ade:	18ba      	adds	r2, r7, r2
 8014ae0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	2224      	movs	r2, #36	@ 0x24
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	5499      	strb	r1, [r3, r2]
 8014aea:	e00b      	b.n	8014b04 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	6a1b      	ldr	r3, [r3, #32]
 8014af0:	228c      	movs	r2, #140	@ 0x8c
 8014af2:	18ba      	adds	r2, r7, r2
 8014af4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	2200      	movs	r2, #0
 8014afa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	2224      	movs	r2, #36	@ 0x24
 8014b00:	2100      	movs	r1, #0
 8014b02:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	785b      	ldrb	r3, [r3, #1]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d000      	beq.n	8014b14 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014b12:	e06e      	b.n	8014bf2 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	2250      	movs	r2, #80	@ 0x50
 8014b20:	5a9b      	ldrh	r3, [r3, r2]
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	001a      	movs	r2, r3
 8014b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b28:	189b      	adds	r3, r3, r2
 8014b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	00da      	lsls	r2, r3, #3
 8014b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b34:	18d3      	adds	r3, r2, r3
 8014b36:	4a1e      	ldr	r2, [pc, #120]	@ (8014bb0 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014b38:	4694      	mov	ip, r2
 8014b3a:	4463      	add	r3, ip
 8014b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014b3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	059b      	lsls	r3, r3, #22
 8014b46:	0d9b      	lsrs	r3, r3, #22
 8014b48:	b29a      	uxth	r2, r3
 8014b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b4c:	801a      	strh	r2, [r3, #0]
 8014b4e:	228c      	movs	r2, #140	@ 0x8c
 8014b50:	18bb      	adds	r3, r7, r2
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2b3e      	cmp	r3, #62	@ 0x3e
 8014b56:	d91a      	bls.n	8014b8e <HAL_PCD_EP_DB_Transmit+0x706>
 8014b58:	18bb      	adds	r3, r7, r2
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	095b      	lsrs	r3, r3, #5
 8014b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014b60:	18bb      	adds	r3, r7, r2
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	221f      	movs	r2, #31
 8014b66:	4013      	ands	r3, r2
 8014b68:	d102      	bne.n	8014b70 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014b6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014b6c:	3b01      	subs	r3, #1
 8014b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b72:	881b      	ldrh	r3, [r3, #0]
 8014b74:	b29a      	uxth	r2, r3
 8014b76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	029b      	lsls	r3, r3, #10
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	4313      	orrs	r3, r2
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	4a0c      	ldr	r2, [pc, #48]	@ (8014bb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014b84:	4313      	orrs	r3, r2
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b8a:	801a      	strh	r2, [r3, #0]
 8014b8c:	e04d      	b.n	8014c2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014b8e:	238c      	movs	r3, #140	@ 0x8c
 8014b90:	18fb      	adds	r3, r7, r3
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d113      	bne.n	8014bc0 <HAL_PCD_EP_DB_Transmit+0x738>
 8014b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b9a:	881b      	ldrh	r3, [r3, #0]
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	4a05      	ldr	r2, [pc, #20]	@ (8014bb4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ba6:	801a      	strh	r2, [r3, #0]
 8014ba8:	e03f      	b.n	8014c2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014baa:	46c0      	nop			@ (mov r8, r8)
 8014bac:	00000402 	.word	0x00000402
 8014bb0:	00000406 	.word	0x00000406
 8014bb4:	ffff8000 	.word	0xffff8000
 8014bb8:	ffff8f8f 	.word	0xffff8f8f
 8014bbc:	ffffc080 	.word	0xffffc080
 8014bc0:	228c      	movs	r2, #140	@ 0x8c
 8014bc2:	18bb      	adds	r3, r7, r2
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	085b      	lsrs	r3, r3, #1
 8014bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014bca:	18bb      	adds	r3, r7, r2
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	4013      	ands	r3, r2
 8014bd2:	d002      	beq.n	8014bda <HAL_PCD_EP_DB_Transmit+0x752>
 8014bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bdc:	881b      	ldrh	r3, [r3, #0]
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	029b      	lsls	r3, r3, #10
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	4313      	orrs	r3, r2
 8014bea:	b29a      	uxth	r2, r3
 8014bec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bee:	801a      	strh	r2, [r3, #0]
 8014bf0:	e01b      	b.n	8014c2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	785b      	ldrb	r3, [r3, #1]
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d117      	bne.n	8014c2a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2250      	movs	r2, #80	@ 0x50
 8014c00:	5a9b      	ldrh	r3, [r3, r2]
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	001a      	movs	r2, r3
 8014c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c08:	189b      	adds	r3, r3, r2
 8014c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	00da      	lsls	r2, r3, #3
 8014c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c14:	18d3      	adds	r3, r2, r3
 8014c16:	4a21      	ldr	r2, [pc, #132]	@ (8014c9c <HAL_PCD_EP_DB_Transmit+0x814>)
 8014c18:	4694      	mov	ip, r2
 8014c1a:	4463      	add	r3, ip
 8014c1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8014c1e:	238c      	movs	r3, #140	@ 0x8c
 8014c20:	18fb      	adds	r3, r7, r3
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	b29a      	uxth	r2, r3
 8014c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	6818      	ldr	r0, [r3, #0]
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	6959      	ldr	r1, [r3, #20]
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	895a      	ldrh	r2, [r3, #10]
 8014c36:	238c      	movs	r3, #140	@ 0x8c
 8014c38:	18fb      	adds	r3, r7, r3
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	f006 f999 	bl	801af74 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	001a      	movs	r2, r3
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	009b      	lsls	r3, r3, #2
 8014c4e:	18d3      	adds	r3, r2, r3
 8014c50:	881b      	ldrh	r3, [r3, #0]
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	2014      	movs	r0, #20
 8014c56:	183b      	adds	r3, r7, r0
 8014c58:	4911      	ldr	r1, [pc, #68]	@ (8014ca0 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014c5a:	400a      	ands	r2, r1
 8014c5c:	801a      	strh	r2, [r3, #0]
 8014c5e:	183b      	adds	r3, r7, r0
 8014c60:	183a      	adds	r2, r7, r0
 8014c62:	8812      	ldrh	r2, [r2, #0]
 8014c64:	2110      	movs	r1, #16
 8014c66:	404a      	eors	r2, r1
 8014c68:	801a      	strh	r2, [r3, #0]
 8014c6a:	183b      	adds	r3, r7, r0
 8014c6c:	183a      	adds	r2, r7, r0
 8014c6e:	8812      	ldrh	r2, [r2, #0]
 8014c70:	2120      	movs	r1, #32
 8014c72:	404a      	eors	r2, r1
 8014c74:	801a      	strh	r2, [r3, #0]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	001a      	movs	r2, r3
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	18d3      	adds	r3, r2, r3
 8014c84:	183a      	adds	r2, r7, r0
 8014c86:	8812      	ldrh	r2, [r2, #0]
 8014c88:	4906      	ldr	r1, [pc, #24]	@ (8014ca4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014c8a:	430a      	orrs	r2, r1
 8014c8c:	b292      	uxth	r2, r2
 8014c8e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014c90:	2300      	movs	r3, #0
}
 8014c92:	0018      	movs	r0, r3
 8014c94:	46bd      	mov	sp, r7
 8014c96:	b024      	add	sp, #144	@ 0x90
 8014c98:	bd80      	pop	{r7, pc}
 8014c9a:	46c0      	nop			@ (mov r8, r8)
 8014c9c:	00000406 	.word	0x00000406
 8014ca0:	ffff8fbf 	.word	0xffff8fbf
 8014ca4:	ffff8080 	.word	0xffff8080

08014ca8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014ca8:	b590      	push	{r4, r7, lr}
 8014caa:	b087      	sub	sp, #28
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	0008      	movs	r0, r1
 8014cb2:	0011      	movs	r1, r2
 8014cb4:	607b      	str	r3, [r7, #4]
 8014cb6:	240a      	movs	r4, #10
 8014cb8:	193b      	adds	r3, r7, r4
 8014cba:	1c02      	adds	r2, r0, #0
 8014cbc:	801a      	strh	r2, [r3, #0]
 8014cbe:	2308      	movs	r3, #8
 8014cc0:	18fb      	adds	r3, r7, r3
 8014cc2:	1c0a      	adds	r2, r1, #0
 8014cc4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014cc6:	0021      	movs	r1, r4
 8014cc8:	187b      	adds	r3, r7, r1
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	2280      	movs	r2, #128	@ 0x80
 8014cce:	4013      	ands	r3, r2
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00c      	beq.n	8014cf0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014cd6:	187b      	adds	r3, r7, r1
 8014cd8:	881b      	ldrh	r3, [r3, #0]
 8014cda:	2207      	movs	r2, #7
 8014cdc:	4013      	ands	r3, r2
 8014cde:	1c5a      	adds	r2, r3, #1
 8014ce0:	0013      	movs	r3, r2
 8014ce2:	009b      	lsls	r3, r3, #2
 8014ce4:	189b      	adds	r3, r3, r2
 8014ce6:	00db      	lsls	r3, r3, #3
 8014ce8:	68fa      	ldr	r2, [r7, #12]
 8014cea:	18d3      	adds	r3, r2, r3
 8014cec:	617b      	str	r3, [r7, #20]
 8014cee:	e00b      	b.n	8014d08 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014cf0:	230a      	movs	r3, #10
 8014cf2:	18fb      	adds	r3, r7, r3
 8014cf4:	881a      	ldrh	r2, [r3, #0]
 8014cf6:	0013      	movs	r3, r2
 8014cf8:	009b      	lsls	r3, r3, #2
 8014cfa:	189b      	adds	r3, r3, r2
 8014cfc:	00db      	lsls	r3, r3, #3
 8014cfe:	3369      	adds	r3, #105	@ 0x69
 8014d00:	33ff      	adds	r3, #255	@ 0xff
 8014d02:	68fa      	ldr	r2, [r7, #12]
 8014d04:	18d3      	adds	r3, r2, r3
 8014d06:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014d08:	2308      	movs	r3, #8
 8014d0a:	18fb      	adds	r3, r7, r3
 8014d0c:	881b      	ldrh	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d107      	bne.n	8014d22 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	2200      	movs	r2, #0
 8014d16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	b29a      	uxth	r2, r3
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	80da      	strh	r2, [r3, #6]
 8014d20:	e00b      	b.n	8014d3a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	2201      	movs	r2, #1
 8014d26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	b29a      	uxth	r2, r3
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	0c1b      	lsrs	r3, r3, #16
 8014d34:	b29a      	uxth	r2, r3
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	0018      	movs	r0, r3
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	b007      	add	sp, #28
 8014d42:	bd90      	pop	{r4, r7, pc}

08014d44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	23ba      	movs	r3, #186	@ 0xba
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	2101      	movs	r1, #1
 8014d5a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	23b8      	movs	r3, #184	@ 0xb8
 8014d60:	009b      	lsls	r3, r3, #2
 8014d62:	2100      	movs	r1, #0
 8014d64:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2254      	movs	r2, #84	@ 0x54
 8014d6a:	5a9b      	ldrh	r3, [r3, r2]
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	2201      	movs	r2, #1
 8014d70:	4313      	orrs	r3, r2
 8014d72:	b299      	uxth	r1, r3
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2254      	movs	r2, #84	@ 0x54
 8014d78:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2254      	movs	r2, #84	@ 0x54
 8014d7e:	5a9b      	ldrh	r3, [r3, r2]
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	2202      	movs	r2, #2
 8014d84:	4313      	orrs	r3, r2
 8014d86:	b299      	uxth	r1, r3
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2254      	movs	r2, #84	@ 0x54
 8014d8c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014d8e:	2300      	movs	r3, #0
}
 8014d90:	0018      	movs	r0, r3
 8014d92:	46bd      	mov	sp, r7
 8014d94:	b004      	add	sp, #16
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	000a      	movs	r2, r1
 8014da2:	1cfb      	adds	r3, r7, #3
 8014da4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014da6:	46c0      	nop			@ (mov r8, r8)
 8014da8:	46bd      	mov	sp, r7
 8014daa:	b002      	add	sp, #8
 8014dac:	bd80      	pop	{r7, pc}
	...

08014db0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014db4:	4b04      	ldr	r3, [pc, #16]	@ (8014dc8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014db6:	681a      	ldr	r2, [r3, #0]
 8014db8:	4b03      	ldr	r3, [pc, #12]	@ (8014dc8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014dba:	2180      	movs	r1, #128	@ 0x80
 8014dbc:	0049      	lsls	r1, r1, #1
 8014dbe:	430a      	orrs	r2, r1
 8014dc0:	601a      	str	r2, [r3, #0]
}
 8014dc2:	46c0      	nop			@ (mov r8, r8)
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	40007000 	.word	0x40007000

08014dcc <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014dd0:	4b04      	ldr	r3, [pc, #16]	@ (8014de4 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	4b03      	ldr	r3, [pc, #12]	@ (8014de4 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014dd6:	4904      	ldr	r1, [pc, #16]	@ (8014de8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014dd8:	400a      	ands	r2, r1
 8014dda:	601a      	str	r2, [r3, #0]
}
 8014ddc:	46c0      	nop			@ (mov r8, r8)
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	46c0      	nop			@ (mov r8, r8)
 8014de4:	40007000 	.word	0x40007000
 8014de8:	fffffeff 	.word	0xfffffeff

08014dec <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b086      	sub	sp, #24
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	000a      	movs	r2, r1
 8014df6:	1cfb      	adds	r3, r7, #3
 8014df8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014dfe:	4b25      	ldr	r3, [pc, #148]	@ (8014e94 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	2380      	movs	r3, #128	@ 0x80
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	4013      	ands	r3, r2
 8014e08:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014e0a:	4b23      	ldr	r3, [pc, #140]	@ (8014e98 <HAL_PWR_EnterSTOPMode+0xac>)
 8014e0c:	6a1b      	ldr	r3, [r3, #32]
 8014e0e:	2201      	movs	r2, #1
 8014e10:	4013      	ands	r3, r2
 8014e12:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d008      	beq.n	8014e2c <HAL_PWR_EnterSTOPMode+0x40>
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d005      	beq.n	8014e2c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014e20:	4b1c      	ldr	r3, [pc, #112]	@ (8014e94 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	4b1b      	ldr	r3, [pc, #108]	@ (8014e94 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e26:	491d      	ldr	r1, [pc, #116]	@ (8014e9c <HAL_PWR_EnterSTOPMode+0xb0>)
 8014e28:	400a      	ands	r2, r1
 8014e2a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014e2c:	4b19      	ldr	r3, [pc, #100]	@ (8014e94 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	2203      	movs	r2, #3
 8014e36:	4393      	bics	r3, r2
 8014e38:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8014e3a:	697a      	ldr	r2, [r7, #20]
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	4313      	orrs	r3, r2
 8014e40:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014e42:	4b14      	ldr	r3, [pc, #80]	@ (8014e94 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e44:	697a      	ldr	r2, [r7, #20]
 8014e46:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014e48:	4b15      	ldr	r3, [pc, #84]	@ (8014ea0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014e4a:	691a      	ldr	r2, [r3, #16]
 8014e4c:	4b14      	ldr	r3, [pc, #80]	@ (8014ea0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014e4e:	2104      	movs	r1, #4
 8014e50:	430a      	orrs	r2, r1
 8014e52:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014e54:	1cfb      	adds	r3, r7, #3
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	2b01      	cmp	r3, #1
 8014e5a:	d101      	bne.n	8014e60 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014e5c:	bf30      	wfi
 8014e5e:	e002      	b.n	8014e66 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014e60:	bf40      	sev
    __WFE();
 8014e62:	bf20      	wfe
    __WFE();
 8014e64:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014e66:	4b0e      	ldr	r3, [pc, #56]	@ (8014ea0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014e68:	691a      	ldr	r2, [r3, #16]
 8014e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea0 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014e6c:	2104      	movs	r1, #4
 8014e6e:	438a      	bics	r2, r1
 8014e70:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d009      	beq.n	8014e8c <HAL_PWR_EnterSTOPMode+0xa0>
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d006      	beq.n	8014e8c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014e7e:	4b05      	ldr	r3, [pc, #20]	@ (8014e94 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	4b04      	ldr	r3, [pc, #16]	@ (8014e94 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e84:	2180      	movs	r1, #128	@ 0x80
 8014e86:	0089      	lsls	r1, r1, #2
 8014e88:	430a      	orrs	r2, r1
 8014e8a:	601a      	str	r2, [r3, #0]
  }
}
 8014e8c:	46c0      	nop			@ (mov r8, r8)
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	b006      	add	sp, #24
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	40007000 	.word	0x40007000
 8014e98:	40010000 	.word	0x40010000
 8014e9c:	fffffdff 	.word	0xfffffdff
 8014ea0:	e000ed00 	.word	0xe000ed00

08014ea4 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014ea8:	4b07      	ldr	r3, [pc, #28]	@ (8014ec8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	4b06      	ldr	r3, [pc, #24]	@ (8014ec8 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014eae:	2102      	movs	r1, #2
 8014eb0:	430a      	orrs	r2, r1
 8014eb2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014eb4:	4b05      	ldr	r3, [pc, #20]	@ (8014ecc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014eb6:	691a      	ldr	r2, [r3, #16]
 8014eb8:	4b04      	ldr	r3, [pc, #16]	@ (8014ecc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014eba:	2104      	movs	r1, #4
 8014ebc:	430a      	orrs	r2, r1
 8014ebe:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014ec0:	bf30      	wfi
}
 8014ec2:	46c0      	nop			@ (mov r8, r8)
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	40007000 	.word	0x40007000
 8014ecc:	e000ed00 	.word	0xe000ed00

08014ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014ed0:	b5b0      	push	{r4, r5, r7, lr}
 8014ed2:	b08a      	sub	sp, #40	@ 0x28
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d102      	bne.n	8014ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014ede:	2301      	movs	r3, #1
 8014ee0:	f000 fbbf 	bl	8015662 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014ee4:	4bc9      	ldr	r3, [pc, #804]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014ee6:	68db      	ldr	r3, [r3, #12]
 8014ee8:	220c      	movs	r2, #12
 8014eea:	4013      	ands	r3, r2
 8014eec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014eee:	4bc7      	ldr	r3, [pc, #796]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014ef0:	68da      	ldr	r2, [r3, #12]
 8014ef2:	2380      	movs	r3, #128	@ 0x80
 8014ef4:	025b      	lsls	r3, r3, #9
 8014ef6:	4013      	ands	r3, r2
 8014ef8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	2201      	movs	r2, #1
 8014f00:	4013      	ands	r3, r2
 8014f02:	d100      	bne.n	8014f06 <HAL_RCC_OscConfig+0x36>
 8014f04:	e07e      	b.n	8015004 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014f06:	69fb      	ldr	r3, [r7, #28]
 8014f08:	2b08      	cmp	r3, #8
 8014f0a:	d007      	beq.n	8014f1c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014f0c:	69fb      	ldr	r3, [r7, #28]
 8014f0e:	2b0c      	cmp	r3, #12
 8014f10:	d112      	bne.n	8014f38 <HAL_RCC_OscConfig+0x68>
 8014f12:	69ba      	ldr	r2, [r7, #24]
 8014f14:	2380      	movs	r3, #128	@ 0x80
 8014f16:	025b      	lsls	r3, r3, #9
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d10d      	bne.n	8014f38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014f1c:	4bbb      	ldr	r3, [pc, #748]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	2380      	movs	r3, #128	@ 0x80
 8014f22:	029b      	lsls	r3, r3, #10
 8014f24:	4013      	ands	r3, r2
 8014f26:	d100      	bne.n	8014f2a <HAL_RCC_OscConfig+0x5a>
 8014f28:	e06b      	b.n	8015002 <HAL_RCC_OscConfig+0x132>
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d167      	bne.n	8015002 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014f32:	2301      	movs	r3, #1
 8014f34:	f000 fb95 	bl	8015662 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	685a      	ldr	r2, [r3, #4]
 8014f3c:	2380      	movs	r3, #128	@ 0x80
 8014f3e:	025b      	lsls	r3, r3, #9
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d107      	bne.n	8014f54 <HAL_RCC_OscConfig+0x84>
 8014f44:	4bb1      	ldr	r3, [pc, #708]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	4bb0      	ldr	r3, [pc, #704]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f4a:	2180      	movs	r1, #128	@ 0x80
 8014f4c:	0249      	lsls	r1, r1, #9
 8014f4e:	430a      	orrs	r2, r1
 8014f50:	601a      	str	r2, [r3, #0]
 8014f52:	e027      	b.n	8014fa4 <HAL_RCC_OscConfig+0xd4>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	685a      	ldr	r2, [r3, #4]
 8014f58:	23a0      	movs	r3, #160	@ 0xa0
 8014f5a:	02db      	lsls	r3, r3, #11
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	d10e      	bne.n	8014f7e <HAL_RCC_OscConfig+0xae>
 8014f60:	4baa      	ldr	r3, [pc, #680]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	4ba9      	ldr	r3, [pc, #676]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f66:	2180      	movs	r1, #128	@ 0x80
 8014f68:	02c9      	lsls	r1, r1, #11
 8014f6a:	430a      	orrs	r2, r1
 8014f6c:	601a      	str	r2, [r3, #0]
 8014f6e:	4ba7      	ldr	r3, [pc, #668]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	4ba6      	ldr	r3, [pc, #664]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f74:	2180      	movs	r1, #128	@ 0x80
 8014f76:	0249      	lsls	r1, r1, #9
 8014f78:	430a      	orrs	r2, r1
 8014f7a:	601a      	str	r2, [r3, #0]
 8014f7c:	e012      	b.n	8014fa4 <HAL_RCC_OscConfig+0xd4>
 8014f7e:	4ba3      	ldr	r3, [pc, #652]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f80:	681a      	ldr	r2, [r3, #0]
 8014f82:	4ba2      	ldr	r3, [pc, #648]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f84:	49a2      	ldr	r1, [pc, #648]	@ (8015210 <HAL_RCC_OscConfig+0x340>)
 8014f86:	400a      	ands	r2, r1
 8014f88:	601a      	str	r2, [r3, #0]
 8014f8a:	4ba0      	ldr	r3, [pc, #640]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f8c:	681a      	ldr	r2, [r3, #0]
 8014f8e:	2380      	movs	r3, #128	@ 0x80
 8014f90:	025b      	lsls	r3, r3, #9
 8014f92:	4013      	ands	r3, r2
 8014f94:	60fb      	str	r3, [r7, #12]
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	4b9c      	ldr	r3, [pc, #624]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	4b9b      	ldr	r3, [pc, #620]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014f9e:	499d      	ldr	r1, [pc, #628]	@ (8015214 <HAL_RCC_OscConfig+0x344>)
 8014fa0:	400a      	ands	r2, r1
 8014fa2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d015      	beq.n	8014fd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014fac:	f7f9 fe60 	bl	800ec70 <HAL_GetTick>
 8014fb0:	0003      	movs	r3, r0
 8014fb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014fb4:	e009      	b.n	8014fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014fb6:	f7f9 fe5b 	bl	800ec70 <HAL_GetTick>
 8014fba:	0002      	movs	r2, r0
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	1ad3      	subs	r3, r2, r3
 8014fc0:	2b64      	cmp	r3, #100	@ 0x64
 8014fc2:	d902      	bls.n	8014fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014fc4:	2303      	movs	r3, #3
 8014fc6:	f000 fb4c 	bl	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014fca:	4b90      	ldr	r3, [pc, #576]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014fcc:	681a      	ldr	r2, [r3, #0]
 8014fce:	2380      	movs	r3, #128	@ 0x80
 8014fd0:	029b      	lsls	r3, r3, #10
 8014fd2:	4013      	ands	r3, r2
 8014fd4:	d0ef      	beq.n	8014fb6 <HAL_RCC_OscConfig+0xe6>
 8014fd6:	e015      	b.n	8015004 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014fd8:	f7f9 fe4a 	bl	800ec70 <HAL_GetTick>
 8014fdc:	0003      	movs	r3, r0
 8014fde:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014fe0:	e008      	b.n	8014ff4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014fe2:	f7f9 fe45 	bl	800ec70 <HAL_GetTick>
 8014fe6:	0002      	movs	r2, r0
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	1ad3      	subs	r3, r2, r3
 8014fec:	2b64      	cmp	r3, #100	@ 0x64
 8014fee:	d901      	bls.n	8014ff4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8014ff0:	2303      	movs	r3, #3
 8014ff2:	e336      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014ff4:	4b85      	ldr	r3, [pc, #532]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	2380      	movs	r3, #128	@ 0x80
 8014ffa:	029b      	lsls	r3, r3, #10
 8014ffc:	4013      	ands	r3, r2
 8014ffe:	d1f0      	bne.n	8014fe2 <HAL_RCC_OscConfig+0x112>
 8015000:	e000      	b.n	8015004 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015002:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	2202      	movs	r2, #2
 801500a:	4013      	ands	r3, r2
 801500c:	d100      	bne.n	8015010 <HAL_RCC_OscConfig+0x140>
 801500e:	e099      	b.n	8015144 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	68db      	ldr	r3, [r3, #12]
 8015014:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8015016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015018:	2220      	movs	r2, #32
 801501a:	4013      	ands	r3, r2
 801501c:	d009      	beq.n	8015032 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801501e:	4b7b      	ldr	r3, [pc, #492]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015020:	681a      	ldr	r2, [r3, #0]
 8015022:	4b7a      	ldr	r3, [pc, #488]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015024:	2120      	movs	r1, #32
 8015026:	430a      	orrs	r2, r1
 8015028:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801502c:	2220      	movs	r2, #32
 801502e:	4393      	bics	r3, r2
 8015030:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015032:	69fb      	ldr	r3, [r7, #28]
 8015034:	2b04      	cmp	r3, #4
 8015036:	d005      	beq.n	8015044 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	2b0c      	cmp	r3, #12
 801503c:	d13e      	bne.n	80150bc <HAL_RCC_OscConfig+0x1ec>
 801503e:	69bb      	ldr	r3, [r7, #24]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d13b      	bne.n	80150bc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015044:	4b71      	ldr	r3, [pc, #452]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2204      	movs	r2, #4
 801504a:	4013      	ands	r3, r2
 801504c:	d004      	beq.n	8015058 <HAL_RCC_OscConfig+0x188>
 801504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015050:	2b00      	cmp	r3, #0
 8015052:	d101      	bne.n	8015058 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015054:	2301      	movs	r3, #1
 8015056:	e304      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015058:	4b6c      	ldr	r3, [pc, #432]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 801505a:	685b      	ldr	r3, [r3, #4]
 801505c:	4a6e      	ldr	r2, [pc, #440]	@ (8015218 <HAL_RCC_OscConfig+0x348>)
 801505e:	4013      	ands	r3, r2
 8015060:	0019      	movs	r1, r3
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	691b      	ldr	r3, [r3, #16]
 8015066:	021a      	lsls	r2, r3, #8
 8015068:	4b68      	ldr	r3, [pc, #416]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 801506a:	430a      	orrs	r2, r1
 801506c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801506e:	4b67      	ldr	r3, [pc, #412]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2209      	movs	r2, #9
 8015074:	4393      	bics	r3, r2
 8015076:	0019      	movs	r1, r3
 8015078:	4b64      	ldr	r3, [pc, #400]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 801507a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801507c:	430a      	orrs	r2, r1
 801507e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015080:	f000 fc42 	bl	8015908 <HAL_RCC_GetSysClockFreq>
 8015084:	0001      	movs	r1, r0
 8015086:	4b61      	ldr	r3, [pc, #388]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015088:	68db      	ldr	r3, [r3, #12]
 801508a:	091b      	lsrs	r3, r3, #4
 801508c:	220f      	movs	r2, #15
 801508e:	4013      	ands	r3, r2
 8015090:	4a62      	ldr	r2, [pc, #392]	@ (801521c <HAL_RCC_OscConfig+0x34c>)
 8015092:	5cd3      	ldrb	r3, [r2, r3]
 8015094:	000a      	movs	r2, r1
 8015096:	40da      	lsrs	r2, r3
 8015098:	4b61      	ldr	r3, [pc, #388]	@ (8015220 <HAL_RCC_OscConfig+0x350>)
 801509a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801509c:	4b61      	ldr	r3, [pc, #388]	@ (8015224 <HAL_RCC_OscConfig+0x354>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2513      	movs	r5, #19
 80150a2:	197c      	adds	r4, r7, r5
 80150a4:	0018      	movs	r0, r3
 80150a6:	f7f9 fd9d 	bl	800ebe4 <HAL_InitTick>
 80150aa:	0003      	movs	r3, r0
 80150ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80150ae:	197b      	adds	r3, r7, r5
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d046      	beq.n	8015144 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80150b6:	197b      	adds	r3, r7, r5
 80150b8:	781b      	ldrb	r3, [r3, #0]
 80150ba:	e2d2      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80150bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d027      	beq.n	8015112 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80150c2:	4b52      	ldr	r3, [pc, #328]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2209      	movs	r2, #9
 80150c8:	4393      	bics	r3, r2
 80150ca:	0019      	movs	r1, r3
 80150cc:	4b4f      	ldr	r3, [pc, #316]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 80150ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150d0:	430a      	orrs	r2, r1
 80150d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80150d4:	f7f9 fdcc 	bl	800ec70 <HAL_GetTick>
 80150d8:	0003      	movs	r3, r0
 80150da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80150dc:	e008      	b.n	80150f0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80150de:	f7f9 fdc7 	bl	800ec70 <HAL_GetTick>
 80150e2:	0002      	movs	r2, r0
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	1ad3      	subs	r3, r2, r3
 80150e8:	2b02      	cmp	r3, #2
 80150ea:	d901      	bls.n	80150f0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80150ec:	2303      	movs	r3, #3
 80150ee:	e2b8      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80150f0:	4b46      	ldr	r3, [pc, #280]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2204      	movs	r2, #4
 80150f6:	4013      	ands	r3, r2
 80150f8:	d0f1      	beq.n	80150de <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80150fa:	4b44      	ldr	r3, [pc, #272]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	4a46      	ldr	r2, [pc, #280]	@ (8015218 <HAL_RCC_OscConfig+0x348>)
 8015100:	4013      	ands	r3, r2
 8015102:	0019      	movs	r1, r3
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	691b      	ldr	r3, [r3, #16]
 8015108:	021a      	lsls	r2, r3, #8
 801510a:	4b40      	ldr	r3, [pc, #256]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 801510c:	430a      	orrs	r2, r1
 801510e:	605a      	str	r2, [r3, #4]
 8015110:	e018      	b.n	8015144 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015112:	4b3e      	ldr	r3, [pc, #248]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	4b3d      	ldr	r3, [pc, #244]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015118:	2101      	movs	r1, #1
 801511a:	438a      	bics	r2, r1
 801511c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801511e:	f7f9 fda7 	bl	800ec70 <HAL_GetTick>
 8015122:	0003      	movs	r3, r0
 8015124:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015126:	e008      	b.n	801513a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015128:	f7f9 fda2 	bl	800ec70 <HAL_GetTick>
 801512c:	0002      	movs	r2, r0
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	1ad3      	subs	r3, r2, r3
 8015132:	2b02      	cmp	r3, #2
 8015134:	d901      	bls.n	801513a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8015136:	2303      	movs	r3, #3
 8015138:	e293      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801513a:	4b34      	ldr	r3, [pc, #208]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2204      	movs	r2, #4
 8015140:	4013      	ands	r3, r2
 8015142:	d1f1      	bne.n	8015128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	2210      	movs	r2, #16
 801514a:	4013      	ands	r3, r2
 801514c:	d100      	bne.n	8015150 <HAL_RCC_OscConfig+0x280>
 801514e:	e0a2      	b.n	8015296 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d140      	bne.n	80151d8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015156:	4b2d      	ldr	r3, [pc, #180]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	2380      	movs	r3, #128	@ 0x80
 801515c:	009b      	lsls	r3, r3, #2
 801515e:	4013      	ands	r3, r2
 8015160:	d005      	beq.n	801516e <HAL_RCC_OscConfig+0x29e>
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	69db      	ldr	r3, [r3, #28]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d101      	bne.n	801516e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801516a:	2301      	movs	r3, #1
 801516c:	e279      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801516e:	4b27      	ldr	r3, [pc, #156]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	4a2d      	ldr	r2, [pc, #180]	@ (8015228 <HAL_RCC_OscConfig+0x358>)
 8015174:	4013      	ands	r3, r2
 8015176:	0019      	movs	r1, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801517c:	4b23      	ldr	r3, [pc, #140]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 801517e:	430a      	orrs	r2, r1
 8015180:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015182:	4b22      	ldr	r3, [pc, #136]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	021b      	lsls	r3, r3, #8
 8015188:	0a19      	lsrs	r1, r3, #8
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6a1b      	ldr	r3, [r3, #32]
 801518e:	061a      	lsls	r2, r3, #24
 8015190:	4b1e      	ldr	r3, [pc, #120]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 8015192:	430a      	orrs	r2, r1
 8015194:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801519a:	0b5b      	lsrs	r3, r3, #13
 801519c:	3301      	adds	r3, #1
 801519e:	2280      	movs	r2, #128	@ 0x80
 80151a0:	0212      	lsls	r2, r2, #8
 80151a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80151a4:	4b19      	ldr	r3, [pc, #100]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 80151a6:	68db      	ldr	r3, [r3, #12]
 80151a8:	091b      	lsrs	r3, r3, #4
 80151aa:	210f      	movs	r1, #15
 80151ac:	400b      	ands	r3, r1
 80151ae:	491b      	ldr	r1, [pc, #108]	@ (801521c <HAL_RCC_OscConfig+0x34c>)
 80151b0:	5ccb      	ldrb	r3, [r1, r3]
 80151b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80151b4:	4b1a      	ldr	r3, [pc, #104]	@ (8015220 <HAL_RCC_OscConfig+0x350>)
 80151b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80151b8:	4b1a      	ldr	r3, [pc, #104]	@ (8015224 <HAL_RCC_OscConfig+0x354>)
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	2513      	movs	r5, #19
 80151be:	197c      	adds	r4, r7, r5
 80151c0:	0018      	movs	r0, r3
 80151c2:	f7f9 fd0f 	bl	800ebe4 <HAL_InitTick>
 80151c6:	0003      	movs	r3, r0
 80151c8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80151ca:	197b      	adds	r3, r7, r5
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d061      	beq.n	8015296 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80151d2:	197b      	adds	r3, r7, r5
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	e244      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	69db      	ldr	r3, [r3, #28]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d040      	beq.n	8015262 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80151e0:	4b0a      	ldr	r3, [pc, #40]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 80151e2:	681a      	ldr	r2, [r3, #0]
 80151e4:	4b09      	ldr	r3, [pc, #36]	@ (801520c <HAL_RCC_OscConfig+0x33c>)
 80151e6:	2180      	movs	r1, #128	@ 0x80
 80151e8:	0049      	lsls	r1, r1, #1
 80151ea:	430a      	orrs	r2, r1
 80151ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151ee:	f7f9 fd3f 	bl	800ec70 <HAL_GetTick>
 80151f2:	0003      	movs	r3, r0
 80151f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80151f6:	e019      	b.n	801522c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80151f8:	f7f9 fd3a 	bl	800ec70 <HAL_GetTick>
 80151fc:	0002      	movs	r2, r0
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	1ad3      	subs	r3, r2, r3
 8015202:	2b02      	cmp	r3, #2
 8015204:	d912      	bls.n	801522c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015206:	2303      	movs	r3, #3
 8015208:	e22b      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
 801520a:	46c0      	nop			@ (mov r8, r8)
 801520c:	40021000 	.word	0x40021000
 8015210:	fffeffff 	.word	0xfffeffff
 8015214:	fffbffff 	.word	0xfffbffff
 8015218:	ffffe0ff 	.word	0xffffe0ff
 801521c:	0802555c 	.word	0x0802555c
 8015220:	200000c8 	.word	0x200000c8
 8015224:	200000d8 	.word	0x200000d8
 8015228:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801522c:	4bca      	ldr	r3, [pc, #808]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	2380      	movs	r3, #128	@ 0x80
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	4013      	ands	r3, r2
 8015236:	d0df      	beq.n	80151f8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015238:	4bc7      	ldr	r3, [pc, #796]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	4ac7      	ldr	r2, [pc, #796]	@ (801555c <HAL_RCC_OscConfig+0x68c>)
 801523e:	4013      	ands	r3, r2
 8015240:	0019      	movs	r1, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015246:	4bc4      	ldr	r3, [pc, #784]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015248:	430a      	orrs	r2, r1
 801524a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801524c:	4bc2      	ldr	r3, [pc, #776]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	021b      	lsls	r3, r3, #8
 8015252:	0a19      	lsrs	r1, r3, #8
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6a1b      	ldr	r3, [r3, #32]
 8015258:	061a      	lsls	r2, r3, #24
 801525a:	4bbf      	ldr	r3, [pc, #764]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801525c:	430a      	orrs	r2, r1
 801525e:	605a      	str	r2, [r3, #4]
 8015260:	e019      	b.n	8015296 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015262:	4bbd      	ldr	r3, [pc, #756]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	4bbc      	ldr	r3, [pc, #752]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015268:	49bd      	ldr	r1, [pc, #756]	@ (8015560 <HAL_RCC_OscConfig+0x690>)
 801526a:	400a      	ands	r2, r1
 801526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801526e:	f7f9 fcff 	bl	800ec70 <HAL_GetTick>
 8015272:	0003      	movs	r3, r0
 8015274:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015276:	e008      	b.n	801528a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015278:	f7f9 fcfa 	bl	800ec70 <HAL_GetTick>
 801527c:	0002      	movs	r2, r0
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	1ad3      	subs	r3, r2, r3
 8015282:	2b02      	cmp	r3, #2
 8015284:	d901      	bls.n	801528a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8015286:	2303      	movs	r3, #3
 8015288:	e1eb      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801528a:	4bb3      	ldr	r3, [pc, #716]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	2380      	movs	r3, #128	@ 0x80
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	4013      	ands	r3, r2
 8015294:	d1f0      	bne.n	8015278 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	2208      	movs	r2, #8
 801529c:	4013      	ands	r3, r2
 801529e:	d036      	beq.n	801530e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	695b      	ldr	r3, [r3, #20]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d019      	beq.n	80152dc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80152a8:	4bab      	ldr	r3, [pc, #684]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80152aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80152ac:	4baa      	ldr	r3, [pc, #680]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80152ae:	2101      	movs	r1, #1
 80152b0:	430a      	orrs	r2, r1
 80152b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80152b4:	f7f9 fcdc 	bl	800ec70 <HAL_GetTick>
 80152b8:	0003      	movs	r3, r0
 80152ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80152bc:	e008      	b.n	80152d0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80152be:	f7f9 fcd7 	bl	800ec70 <HAL_GetTick>
 80152c2:	0002      	movs	r2, r0
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	2b02      	cmp	r3, #2
 80152ca:	d901      	bls.n	80152d0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80152cc:	2303      	movs	r3, #3
 80152ce:	e1c8      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80152d0:	4ba1      	ldr	r3, [pc, #644]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80152d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80152d4:	2202      	movs	r2, #2
 80152d6:	4013      	ands	r3, r2
 80152d8:	d0f1      	beq.n	80152be <HAL_RCC_OscConfig+0x3ee>
 80152da:	e018      	b.n	801530e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80152dc:	4b9e      	ldr	r3, [pc, #632]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80152de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80152e0:	4b9d      	ldr	r3, [pc, #628]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80152e2:	2101      	movs	r1, #1
 80152e4:	438a      	bics	r2, r1
 80152e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80152e8:	f7f9 fcc2 	bl	800ec70 <HAL_GetTick>
 80152ec:	0003      	movs	r3, r0
 80152ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80152f0:	e008      	b.n	8015304 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80152f2:	f7f9 fcbd 	bl	800ec70 <HAL_GetTick>
 80152f6:	0002      	movs	r2, r0
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	1ad3      	subs	r3, r2, r3
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d901      	bls.n	8015304 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015300:	2303      	movs	r3, #3
 8015302:	e1ae      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015304:	4b94      	ldr	r3, [pc, #592]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015308:	2202      	movs	r2, #2
 801530a:	4013      	ands	r3, r2
 801530c:	d1f1      	bne.n	80152f2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2204      	movs	r2, #4
 8015314:	4013      	ands	r3, r2
 8015316:	d100      	bne.n	801531a <HAL_RCC_OscConfig+0x44a>
 8015318:	e0ae      	b.n	8015478 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801531a:	2023      	movs	r0, #35	@ 0x23
 801531c:	183b      	adds	r3, r7, r0
 801531e:	2200      	movs	r2, #0
 8015320:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015322:	4b8d      	ldr	r3, [pc, #564]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015326:	2380      	movs	r3, #128	@ 0x80
 8015328:	055b      	lsls	r3, r3, #21
 801532a:	4013      	ands	r3, r2
 801532c:	d109      	bne.n	8015342 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801532e:	4b8a      	ldr	r3, [pc, #552]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015332:	4b89      	ldr	r3, [pc, #548]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015334:	2180      	movs	r1, #128	@ 0x80
 8015336:	0549      	lsls	r1, r1, #21
 8015338:	430a      	orrs	r2, r1
 801533a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801533c:	183b      	adds	r3, r7, r0
 801533e:	2201      	movs	r2, #1
 8015340:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015342:	4b88      	ldr	r3, [pc, #544]	@ (8015564 <HAL_RCC_OscConfig+0x694>)
 8015344:	681a      	ldr	r2, [r3, #0]
 8015346:	2380      	movs	r3, #128	@ 0x80
 8015348:	005b      	lsls	r3, r3, #1
 801534a:	4013      	ands	r3, r2
 801534c:	d11a      	bne.n	8015384 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801534e:	4b85      	ldr	r3, [pc, #532]	@ (8015564 <HAL_RCC_OscConfig+0x694>)
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	4b84      	ldr	r3, [pc, #528]	@ (8015564 <HAL_RCC_OscConfig+0x694>)
 8015354:	2180      	movs	r1, #128	@ 0x80
 8015356:	0049      	lsls	r1, r1, #1
 8015358:	430a      	orrs	r2, r1
 801535a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801535c:	f7f9 fc88 	bl	800ec70 <HAL_GetTick>
 8015360:	0003      	movs	r3, r0
 8015362:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015364:	e008      	b.n	8015378 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015366:	f7f9 fc83 	bl	800ec70 <HAL_GetTick>
 801536a:	0002      	movs	r2, r0
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	1ad3      	subs	r3, r2, r3
 8015370:	2b64      	cmp	r3, #100	@ 0x64
 8015372:	d901      	bls.n	8015378 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8015374:	2303      	movs	r3, #3
 8015376:	e174      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015378:	4b7a      	ldr	r3, [pc, #488]	@ (8015564 <HAL_RCC_OscConfig+0x694>)
 801537a:	681a      	ldr	r2, [r3, #0]
 801537c:	2380      	movs	r3, #128	@ 0x80
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	4013      	ands	r3, r2
 8015382:	d0f0      	beq.n	8015366 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	689a      	ldr	r2, [r3, #8]
 8015388:	2380      	movs	r3, #128	@ 0x80
 801538a:	005b      	lsls	r3, r3, #1
 801538c:	429a      	cmp	r2, r3
 801538e:	d107      	bne.n	80153a0 <HAL_RCC_OscConfig+0x4d0>
 8015390:	4b71      	ldr	r3, [pc, #452]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015392:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015394:	4b70      	ldr	r3, [pc, #448]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015396:	2180      	movs	r1, #128	@ 0x80
 8015398:	0049      	lsls	r1, r1, #1
 801539a:	430a      	orrs	r2, r1
 801539c:	651a      	str	r2, [r3, #80]	@ 0x50
 801539e:	e031      	b.n	8015404 <HAL_RCC_OscConfig+0x534>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	689b      	ldr	r3, [r3, #8]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d10c      	bne.n	80153c2 <HAL_RCC_OscConfig+0x4f2>
 80153a8:	4b6b      	ldr	r3, [pc, #428]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153ac:	4b6a      	ldr	r3, [pc, #424]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153ae:	496c      	ldr	r1, [pc, #432]	@ (8015560 <HAL_RCC_OscConfig+0x690>)
 80153b0:	400a      	ands	r2, r1
 80153b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80153b4:	4b68      	ldr	r3, [pc, #416]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153b8:	4b67      	ldr	r3, [pc, #412]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153ba:	496b      	ldr	r1, [pc, #428]	@ (8015568 <HAL_RCC_OscConfig+0x698>)
 80153bc:	400a      	ands	r2, r1
 80153be:	651a      	str	r2, [r3, #80]	@ 0x50
 80153c0:	e020      	b.n	8015404 <HAL_RCC_OscConfig+0x534>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	689a      	ldr	r2, [r3, #8]
 80153c6:	23a0      	movs	r3, #160	@ 0xa0
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d10e      	bne.n	80153ec <HAL_RCC_OscConfig+0x51c>
 80153ce:	4b62      	ldr	r3, [pc, #392]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153d2:	4b61      	ldr	r3, [pc, #388]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153d4:	2180      	movs	r1, #128	@ 0x80
 80153d6:	00c9      	lsls	r1, r1, #3
 80153d8:	430a      	orrs	r2, r1
 80153da:	651a      	str	r2, [r3, #80]	@ 0x50
 80153dc:	4b5e      	ldr	r3, [pc, #376]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153e0:	4b5d      	ldr	r3, [pc, #372]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153e2:	2180      	movs	r1, #128	@ 0x80
 80153e4:	0049      	lsls	r1, r1, #1
 80153e6:	430a      	orrs	r2, r1
 80153e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80153ea:	e00b      	b.n	8015404 <HAL_RCC_OscConfig+0x534>
 80153ec:	4b5a      	ldr	r3, [pc, #360]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153f0:	4b59      	ldr	r3, [pc, #356]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153f2:	495b      	ldr	r1, [pc, #364]	@ (8015560 <HAL_RCC_OscConfig+0x690>)
 80153f4:	400a      	ands	r2, r1
 80153f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80153f8:	4b57      	ldr	r3, [pc, #348]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153fc:	4b56      	ldr	r3, [pc, #344]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80153fe:	495a      	ldr	r1, [pc, #360]	@ (8015568 <HAL_RCC_OscConfig+0x698>)
 8015400:	400a      	ands	r2, r1
 8015402:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	689b      	ldr	r3, [r3, #8]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d015      	beq.n	8015438 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801540c:	f7f9 fc30 	bl	800ec70 <HAL_GetTick>
 8015410:	0003      	movs	r3, r0
 8015412:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015414:	e009      	b.n	801542a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015416:	f7f9 fc2b 	bl	800ec70 <HAL_GetTick>
 801541a:	0002      	movs	r2, r0
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	4a52      	ldr	r2, [pc, #328]	@ (801556c <HAL_RCC_OscConfig+0x69c>)
 8015422:	4293      	cmp	r3, r2
 8015424:	d901      	bls.n	801542a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8015426:	2303      	movs	r3, #3
 8015428:	e11b      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801542a:	4b4b      	ldr	r3, [pc, #300]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801542c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801542e:	2380      	movs	r3, #128	@ 0x80
 8015430:	009b      	lsls	r3, r3, #2
 8015432:	4013      	ands	r3, r2
 8015434:	d0ef      	beq.n	8015416 <HAL_RCC_OscConfig+0x546>
 8015436:	e014      	b.n	8015462 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015438:	f7f9 fc1a 	bl	800ec70 <HAL_GetTick>
 801543c:	0003      	movs	r3, r0
 801543e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015440:	e009      	b.n	8015456 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015442:	f7f9 fc15 	bl	800ec70 <HAL_GetTick>
 8015446:	0002      	movs	r2, r0
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	1ad3      	subs	r3, r2, r3
 801544c:	4a47      	ldr	r2, [pc, #284]	@ (801556c <HAL_RCC_OscConfig+0x69c>)
 801544e:	4293      	cmp	r3, r2
 8015450:	d901      	bls.n	8015456 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015452:	2303      	movs	r3, #3
 8015454:	e105      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015456:	4b40      	ldr	r3, [pc, #256]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801545a:	2380      	movs	r3, #128	@ 0x80
 801545c:	009b      	lsls	r3, r3, #2
 801545e:	4013      	ands	r3, r2
 8015460:	d1ef      	bne.n	8015442 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015462:	2323      	movs	r3, #35	@ 0x23
 8015464:	18fb      	adds	r3, r7, r3
 8015466:	781b      	ldrb	r3, [r3, #0]
 8015468:	2b01      	cmp	r3, #1
 801546a:	d105      	bne.n	8015478 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801546c:	4b3a      	ldr	r3, [pc, #232]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801546e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015470:	4b39      	ldr	r3, [pc, #228]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015472:	493f      	ldr	r1, [pc, #252]	@ (8015570 <HAL_RCC_OscConfig+0x6a0>)
 8015474:	400a      	ands	r2, r1
 8015476:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	2220      	movs	r2, #32
 801547e:	4013      	ands	r3, r2
 8015480:	d049      	beq.n	8015516 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	699b      	ldr	r3, [r3, #24]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d026      	beq.n	80154d8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801548a:	4b33      	ldr	r3, [pc, #204]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801548c:	689a      	ldr	r2, [r3, #8]
 801548e:	4b32      	ldr	r3, [pc, #200]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015490:	2101      	movs	r1, #1
 8015492:	430a      	orrs	r2, r1
 8015494:	609a      	str	r2, [r3, #8]
 8015496:	4b30      	ldr	r3, [pc, #192]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801549a:	4b2f      	ldr	r3, [pc, #188]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801549c:	2101      	movs	r1, #1
 801549e:	430a      	orrs	r2, r1
 80154a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80154a2:	4b34      	ldr	r3, [pc, #208]	@ (8015574 <HAL_RCC_OscConfig+0x6a4>)
 80154a4:	6a1a      	ldr	r2, [r3, #32]
 80154a6:	4b33      	ldr	r3, [pc, #204]	@ (8015574 <HAL_RCC_OscConfig+0x6a4>)
 80154a8:	2180      	movs	r1, #128	@ 0x80
 80154aa:	0189      	lsls	r1, r1, #6
 80154ac:	430a      	orrs	r2, r1
 80154ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154b0:	f7f9 fbde 	bl	800ec70 <HAL_GetTick>
 80154b4:	0003      	movs	r3, r0
 80154b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80154b8:	e008      	b.n	80154cc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80154ba:	f7f9 fbd9 	bl	800ec70 <HAL_GetTick>
 80154be:	0002      	movs	r2, r0
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	1ad3      	subs	r3, r2, r3
 80154c4:	2b02      	cmp	r3, #2
 80154c6:	d901      	bls.n	80154cc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80154c8:	2303      	movs	r3, #3
 80154ca:	e0ca      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80154cc:	4b22      	ldr	r3, [pc, #136]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	2202      	movs	r2, #2
 80154d2:	4013      	ands	r3, r2
 80154d4:	d0f1      	beq.n	80154ba <HAL_RCC_OscConfig+0x5ea>
 80154d6:	e01e      	b.n	8015516 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80154d8:	4b1f      	ldr	r3, [pc, #124]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80154da:	689a      	ldr	r2, [r3, #8]
 80154dc:	4b1e      	ldr	r3, [pc, #120]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 80154de:	2101      	movs	r1, #1
 80154e0:	438a      	bics	r2, r1
 80154e2:	609a      	str	r2, [r3, #8]
 80154e4:	4b23      	ldr	r3, [pc, #140]	@ (8015574 <HAL_RCC_OscConfig+0x6a4>)
 80154e6:	6a1a      	ldr	r2, [r3, #32]
 80154e8:	4b22      	ldr	r3, [pc, #136]	@ (8015574 <HAL_RCC_OscConfig+0x6a4>)
 80154ea:	4923      	ldr	r1, [pc, #140]	@ (8015578 <HAL_RCC_OscConfig+0x6a8>)
 80154ec:	400a      	ands	r2, r1
 80154ee:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154f0:	f7f9 fbbe 	bl	800ec70 <HAL_GetTick>
 80154f4:	0003      	movs	r3, r0
 80154f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80154f8:	e008      	b.n	801550c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80154fa:	f7f9 fbb9 	bl	800ec70 <HAL_GetTick>
 80154fe:	0002      	movs	r2, r0
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	1ad3      	subs	r3, r2, r3
 8015504:	2b02      	cmp	r3, #2
 8015506:	d901      	bls.n	801550c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015508:	2303      	movs	r3, #3
 801550a:	e0aa      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801550c:	4b12      	ldr	r3, [pc, #72]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 801550e:	689b      	ldr	r3, [r3, #8]
 8015510:	2202      	movs	r2, #2
 8015512:	4013      	ands	r3, r2
 8015514:	d1f1      	bne.n	80154fa <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801551a:	2b00      	cmp	r3, #0
 801551c:	d100      	bne.n	8015520 <HAL_RCC_OscConfig+0x650>
 801551e:	e09f      	b.n	8015660 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015520:	69fb      	ldr	r3, [r7, #28]
 8015522:	2b0c      	cmp	r3, #12
 8015524:	d100      	bne.n	8015528 <HAL_RCC_OscConfig+0x658>
 8015526:	e078      	b.n	801561a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801552c:	2b02      	cmp	r3, #2
 801552e:	d159      	bne.n	80155e4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015530:	4b09      	ldr	r3, [pc, #36]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015532:	681a      	ldr	r2, [r3, #0]
 8015534:	4b08      	ldr	r3, [pc, #32]	@ (8015558 <HAL_RCC_OscConfig+0x688>)
 8015536:	4911      	ldr	r1, [pc, #68]	@ (801557c <HAL_RCC_OscConfig+0x6ac>)
 8015538:	400a      	ands	r2, r1
 801553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801553c:	f7f9 fb98 	bl	800ec70 <HAL_GetTick>
 8015540:	0003      	movs	r3, r0
 8015542:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015544:	e01c      	b.n	8015580 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015546:	f7f9 fb93 	bl	800ec70 <HAL_GetTick>
 801554a:	0002      	movs	r2, r0
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	1ad3      	subs	r3, r2, r3
 8015550:	2b02      	cmp	r3, #2
 8015552:	d915      	bls.n	8015580 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015554:	2303      	movs	r3, #3
 8015556:	e084      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
 8015558:	40021000 	.word	0x40021000
 801555c:	ffff1fff 	.word	0xffff1fff
 8015560:	fffffeff 	.word	0xfffffeff
 8015564:	40007000 	.word	0x40007000
 8015568:	fffffbff 	.word	0xfffffbff
 801556c:	00001388 	.word	0x00001388
 8015570:	efffffff 	.word	0xefffffff
 8015574:	40010000 	.word	0x40010000
 8015578:	ffffdfff 	.word	0xffffdfff
 801557c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015580:	4b3a      	ldr	r3, [pc, #232]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	2380      	movs	r3, #128	@ 0x80
 8015586:	049b      	lsls	r3, r3, #18
 8015588:	4013      	ands	r3, r2
 801558a:	d1dc      	bne.n	8015546 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801558c:	4b37      	ldr	r3, [pc, #220]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	4a37      	ldr	r2, [pc, #220]	@ (8015670 <HAL_RCC_OscConfig+0x7a0>)
 8015592:	4013      	ands	r3, r2
 8015594:	0019      	movs	r1, r3
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801559e:	431a      	orrs	r2, r3
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155a4:	431a      	orrs	r2, r3
 80155a6:	4b31      	ldr	r3, [pc, #196]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 80155a8:	430a      	orrs	r2, r1
 80155aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80155ac:	4b2f      	ldr	r3, [pc, #188]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 80155ae:	681a      	ldr	r2, [r3, #0]
 80155b0:	4b2e      	ldr	r3, [pc, #184]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 80155b2:	2180      	movs	r1, #128	@ 0x80
 80155b4:	0449      	lsls	r1, r1, #17
 80155b6:	430a      	orrs	r2, r1
 80155b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155ba:	f7f9 fb59 	bl	800ec70 <HAL_GetTick>
 80155be:	0003      	movs	r3, r0
 80155c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80155c2:	e008      	b.n	80155d6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80155c4:	f7f9 fb54 	bl	800ec70 <HAL_GetTick>
 80155c8:	0002      	movs	r2, r0
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	1ad3      	subs	r3, r2, r3
 80155ce:	2b02      	cmp	r3, #2
 80155d0:	d901      	bls.n	80155d6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80155d2:	2303      	movs	r3, #3
 80155d4:	e045      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80155d6:	4b25      	ldr	r3, [pc, #148]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	2380      	movs	r3, #128	@ 0x80
 80155dc:	049b      	lsls	r3, r3, #18
 80155de:	4013      	ands	r3, r2
 80155e0:	d0f0      	beq.n	80155c4 <HAL_RCC_OscConfig+0x6f4>
 80155e2:	e03d      	b.n	8015660 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80155e4:	4b21      	ldr	r3, [pc, #132]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	4b20      	ldr	r3, [pc, #128]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 80155ea:	4922      	ldr	r1, [pc, #136]	@ (8015674 <HAL_RCC_OscConfig+0x7a4>)
 80155ec:	400a      	ands	r2, r1
 80155ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155f0:	f7f9 fb3e 	bl	800ec70 <HAL_GetTick>
 80155f4:	0003      	movs	r3, r0
 80155f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80155f8:	e008      	b.n	801560c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80155fa:	f7f9 fb39 	bl	800ec70 <HAL_GetTick>
 80155fe:	0002      	movs	r2, r0
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	1ad3      	subs	r3, r2, r3
 8015604:	2b02      	cmp	r3, #2
 8015606:	d901      	bls.n	801560c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015608:	2303      	movs	r3, #3
 801560a:	e02a      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801560c:	4b17      	ldr	r3, [pc, #92]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 801560e:	681a      	ldr	r2, [r3, #0]
 8015610:	2380      	movs	r3, #128	@ 0x80
 8015612:	049b      	lsls	r3, r3, #18
 8015614:	4013      	ands	r3, r2
 8015616:	d1f0      	bne.n	80155fa <HAL_RCC_OscConfig+0x72a>
 8015618:	e022      	b.n	8015660 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801561e:	2b01      	cmp	r3, #1
 8015620:	d101      	bne.n	8015626 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015622:	2301      	movs	r3, #1
 8015624:	e01d      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015626:	4b11      	ldr	r3, [pc, #68]	@ (801566c <HAL_RCC_OscConfig+0x79c>)
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801562c:	69ba      	ldr	r2, [r7, #24]
 801562e:	2380      	movs	r3, #128	@ 0x80
 8015630:	025b      	lsls	r3, r3, #9
 8015632:	401a      	ands	r2, r3
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015638:	429a      	cmp	r2, r3
 801563a:	d10f      	bne.n	801565c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801563c:	69ba      	ldr	r2, [r7, #24]
 801563e:	23f0      	movs	r3, #240	@ 0xf0
 8015640:	039b      	lsls	r3, r3, #14
 8015642:	401a      	ands	r2, r3
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015648:	429a      	cmp	r2, r3
 801564a:	d107      	bne.n	801565c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801564c:	69ba      	ldr	r2, [r7, #24]
 801564e:	23c0      	movs	r3, #192	@ 0xc0
 8015650:	041b      	lsls	r3, r3, #16
 8015652:	401a      	ands	r2, r3
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015658:	429a      	cmp	r2, r3
 801565a:	d001      	beq.n	8015660 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801565c:	2301      	movs	r3, #1
 801565e:	e000      	b.n	8015662 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015660:	2300      	movs	r3, #0
}
 8015662:	0018      	movs	r0, r3
 8015664:	46bd      	mov	sp, r7
 8015666:	b00a      	add	sp, #40	@ 0x28
 8015668:	bdb0      	pop	{r4, r5, r7, pc}
 801566a:	46c0      	nop			@ (mov r8, r8)
 801566c:	40021000 	.word	0x40021000
 8015670:	ff02ffff 	.word	0xff02ffff
 8015674:	feffffff 	.word	0xfeffffff

08015678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015678:	b5b0      	push	{r4, r5, r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d101      	bne.n	801568c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015688:	2301      	movs	r3, #1
 801568a:	e128      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801568c:	4b96      	ldr	r3, [pc, #600]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2201      	movs	r2, #1
 8015692:	4013      	ands	r3, r2
 8015694:	683a      	ldr	r2, [r7, #0]
 8015696:	429a      	cmp	r2, r3
 8015698:	d91e      	bls.n	80156d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801569a:	4b93      	ldr	r3, [pc, #588]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2201      	movs	r2, #1
 80156a0:	4393      	bics	r3, r2
 80156a2:	0019      	movs	r1, r3
 80156a4:	4b90      	ldr	r3, [pc, #576]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 80156a6:	683a      	ldr	r2, [r7, #0]
 80156a8:	430a      	orrs	r2, r1
 80156aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80156ac:	f7f9 fae0 	bl	800ec70 <HAL_GetTick>
 80156b0:	0003      	movs	r3, r0
 80156b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80156b4:	e009      	b.n	80156ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80156b6:	f7f9 fadb 	bl	800ec70 <HAL_GetTick>
 80156ba:	0002      	movs	r2, r0
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	1ad3      	subs	r3, r2, r3
 80156c0:	4a8a      	ldr	r2, [pc, #552]	@ (80158ec <HAL_RCC_ClockConfig+0x274>)
 80156c2:	4293      	cmp	r3, r2
 80156c4:	d901      	bls.n	80156ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80156c6:	2303      	movs	r3, #3
 80156c8:	e109      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80156ca:	4b87      	ldr	r3, [pc, #540]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	2201      	movs	r2, #1
 80156d0:	4013      	ands	r3, r2
 80156d2:	683a      	ldr	r2, [r7, #0]
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d1ee      	bne.n	80156b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	2202      	movs	r2, #2
 80156de:	4013      	ands	r3, r2
 80156e0:	d009      	beq.n	80156f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80156e2:	4b83      	ldr	r3, [pc, #524]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 80156e4:	68db      	ldr	r3, [r3, #12]
 80156e6:	22f0      	movs	r2, #240	@ 0xf0
 80156e8:	4393      	bics	r3, r2
 80156ea:	0019      	movs	r1, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	689a      	ldr	r2, [r3, #8]
 80156f0:	4b7f      	ldr	r3, [pc, #508]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 80156f2:	430a      	orrs	r2, r1
 80156f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	2201      	movs	r2, #1
 80156fc:	4013      	ands	r3, r2
 80156fe:	d100      	bne.n	8015702 <HAL_RCC_ClockConfig+0x8a>
 8015700:	e089      	b.n	8015816 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	2b02      	cmp	r3, #2
 8015708:	d107      	bne.n	801571a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801570a:	4b79      	ldr	r3, [pc, #484]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	2380      	movs	r3, #128	@ 0x80
 8015710:	029b      	lsls	r3, r3, #10
 8015712:	4013      	ands	r3, r2
 8015714:	d120      	bne.n	8015758 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015716:	2301      	movs	r3, #1
 8015718:	e0e1      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	2b03      	cmp	r3, #3
 8015720:	d107      	bne.n	8015732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015722:	4b73      	ldr	r3, [pc, #460]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 8015724:	681a      	ldr	r2, [r3, #0]
 8015726:	2380      	movs	r3, #128	@ 0x80
 8015728:	049b      	lsls	r3, r3, #18
 801572a:	4013      	ands	r3, r2
 801572c:	d114      	bne.n	8015758 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801572e:	2301      	movs	r3, #1
 8015730:	e0d5      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	685b      	ldr	r3, [r3, #4]
 8015736:	2b01      	cmp	r3, #1
 8015738:	d106      	bne.n	8015748 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801573a:	4b6d      	ldr	r3, [pc, #436]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2204      	movs	r2, #4
 8015740:	4013      	ands	r3, r2
 8015742:	d109      	bne.n	8015758 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015744:	2301      	movs	r3, #1
 8015746:	e0ca      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015748:	4b69      	ldr	r3, [pc, #420]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801574a:	681a      	ldr	r2, [r3, #0]
 801574c:	2380      	movs	r3, #128	@ 0x80
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	4013      	ands	r3, r2
 8015752:	d101      	bne.n	8015758 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015754:	2301      	movs	r3, #1
 8015756:	e0c2      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015758:	4b65      	ldr	r3, [pc, #404]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	2203      	movs	r2, #3
 801575e:	4393      	bics	r3, r2
 8015760:	0019      	movs	r1, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	685a      	ldr	r2, [r3, #4]
 8015766:	4b62      	ldr	r3, [pc, #392]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 8015768:	430a      	orrs	r2, r1
 801576a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801576c:	f7f9 fa80 	bl	800ec70 <HAL_GetTick>
 8015770:	0003      	movs	r3, r0
 8015772:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	2b02      	cmp	r3, #2
 801577a:	d111      	bne.n	80157a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801577c:	e009      	b.n	8015792 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801577e:	f7f9 fa77 	bl	800ec70 <HAL_GetTick>
 8015782:	0002      	movs	r2, r0
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	1ad3      	subs	r3, r2, r3
 8015788:	4a58      	ldr	r2, [pc, #352]	@ (80158ec <HAL_RCC_ClockConfig+0x274>)
 801578a:	4293      	cmp	r3, r2
 801578c:	d901      	bls.n	8015792 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801578e:	2303      	movs	r3, #3
 8015790:	e0a5      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015792:	4b57      	ldr	r3, [pc, #348]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 8015794:	68db      	ldr	r3, [r3, #12]
 8015796:	220c      	movs	r2, #12
 8015798:	4013      	ands	r3, r2
 801579a:	2b08      	cmp	r3, #8
 801579c:	d1ef      	bne.n	801577e <HAL_RCC_ClockConfig+0x106>
 801579e:	e03a      	b.n	8015816 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	685b      	ldr	r3, [r3, #4]
 80157a4:	2b03      	cmp	r3, #3
 80157a6:	d111      	bne.n	80157cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80157a8:	e009      	b.n	80157be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80157aa:	f7f9 fa61 	bl	800ec70 <HAL_GetTick>
 80157ae:	0002      	movs	r2, r0
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	1ad3      	subs	r3, r2, r3
 80157b4:	4a4d      	ldr	r2, [pc, #308]	@ (80158ec <HAL_RCC_ClockConfig+0x274>)
 80157b6:	4293      	cmp	r3, r2
 80157b8:	d901      	bls.n	80157be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80157ba:	2303      	movs	r3, #3
 80157bc:	e08f      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80157be:	4b4c      	ldr	r3, [pc, #304]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 80157c0:	68db      	ldr	r3, [r3, #12]
 80157c2:	220c      	movs	r2, #12
 80157c4:	4013      	ands	r3, r2
 80157c6:	2b0c      	cmp	r3, #12
 80157c8:	d1ef      	bne.n	80157aa <HAL_RCC_ClockConfig+0x132>
 80157ca:	e024      	b.n	8015816 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	2b01      	cmp	r3, #1
 80157d2:	d11b      	bne.n	801580c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80157d4:	e009      	b.n	80157ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80157d6:	f7f9 fa4b 	bl	800ec70 <HAL_GetTick>
 80157da:	0002      	movs	r2, r0
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	1ad3      	subs	r3, r2, r3
 80157e0:	4a42      	ldr	r2, [pc, #264]	@ (80158ec <HAL_RCC_ClockConfig+0x274>)
 80157e2:	4293      	cmp	r3, r2
 80157e4:	d901      	bls.n	80157ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80157e6:	2303      	movs	r3, #3
 80157e8:	e079      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80157ea:	4b41      	ldr	r3, [pc, #260]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	220c      	movs	r2, #12
 80157f0:	4013      	ands	r3, r2
 80157f2:	2b04      	cmp	r3, #4
 80157f4:	d1ef      	bne.n	80157d6 <HAL_RCC_ClockConfig+0x15e>
 80157f6:	e00e      	b.n	8015816 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80157f8:	f7f9 fa3a 	bl	800ec70 <HAL_GetTick>
 80157fc:	0002      	movs	r2, r0
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	4a3a      	ldr	r2, [pc, #232]	@ (80158ec <HAL_RCC_ClockConfig+0x274>)
 8015804:	4293      	cmp	r3, r2
 8015806:	d901      	bls.n	801580c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015808:	2303      	movs	r3, #3
 801580a:	e068      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801580c:	4b38      	ldr	r3, [pc, #224]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	220c      	movs	r2, #12
 8015812:	4013      	ands	r3, r2
 8015814:	d1f0      	bne.n	80157f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015816:	4b34      	ldr	r3, [pc, #208]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	2201      	movs	r2, #1
 801581c:	4013      	ands	r3, r2
 801581e:	683a      	ldr	r2, [r7, #0]
 8015820:	429a      	cmp	r2, r3
 8015822:	d21e      	bcs.n	8015862 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015824:	4b30      	ldr	r3, [pc, #192]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2201      	movs	r2, #1
 801582a:	4393      	bics	r3, r2
 801582c:	0019      	movs	r1, r3
 801582e:	4b2e      	ldr	r3, [pc, #184]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	430a      	orrs	r2, r1
 8015834:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015836:	f7f9 fa1b 	bl	800ec70 <HAL_GetTick>
 801583a:	0003      	movs	r3, r0
 801583c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801583e:	e009      	b.n	8015854 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015840:	f7f9 fa16 	bl	800ec70 <HAL_GetTick>
 8015844:	0002      	movs	r2, r0
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	1ad3      	subs	r3, r2, r3
 801584a:	4a28      	ldr	r2, [pc, #160]	@ (80158ec <HAL_RCC_ClockConfig+0x274>)
 801584c:	4293      	cmp	r3, r2
 801584e:	d901      	bls.n	8015854 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015850:	2303      	movs	r3, #3
 8015852:	e044      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015854:	4b24      	ldr	r3, [pc, #144]	@ (80158e8 <HAL_RCC_ClockConfig+0x270>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2201      	movs	r2, #1
 801585a:	4013      	ands	r3, r2
 801585c:	683a      	ldr	r2, [r7, #0]
 801585e:	429a      	cmp	r2, r3
 8015860:	d1ee      	bne.n	8015840 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2204      	movs	r2, #4
 8015868:	4013      	ands	r3, r2
 801586a:	d009      	beq.n	8015880 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801586c:	4b20      	ldr	r3, [pc, #128]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	4a20      	ldr	r2, [pc, #128]	@ (80158f4 <HAL_RCC_ClockConfig+0x27c>)
 8015872:	4013      	ands	r3, r2
 8015874:	0019      	movs	r1, r3
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	68da      	ldr	r2, [r3, #12]
 801587a:	4b1d      	ldr	r3, [pc, #116]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801587c:	430a      	orrs	r2, r1
 801587e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2208      	movs	r2, #8
 8015886:	4013      	ands	r3, r2
 8015888:	d00a      	beq.n	80158a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801588a:	4b19      	ldr	r3, [pc, #100]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	4a1a      	ldr	r2, [pc, #104]	@ (80158f8 <HAL_RCC_ClockConfig+0x280>)
 8015890:	4013      	ands	r3, r2
 8015892:	0019      	movs	r1, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	691b      	ldr	r3, [r3, #16]
 8015898:	00da      	lsls	r2, r3, #3
 801589a:	4b15      	ldr	r3, [pc, #84]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 801589c:	430a      	orrs	r2, r1
 801589e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80158a0:	f000 f832 	bl	8015908 <HAL_RCC_GetSysClockFreq>
 80158a4:	0001      	movs	r1, r0
 80158a6:	4b12      	ldr	r3, [pc, #72]	@ (80158f0 <HAL_RCC_ClockConfig+0x278>)
 80158a8:	68db      	ldr	r3, [r3, #12]
 80158aa:	091b      	lsrs	r3, r3, #4
 80158ac:	220f      	movs	r2, #15
 80158ae:	4013      	ands	r3, r2
 80158b0:	4a12      	ldr	r2, [pc, #72]	@ (80158fc <HAL_RCC_ClockConfig+0x284>)
 80158b2:	5cd3      	ldrb	r3, [r2, r3]
 80158b4:	000a      	movs	r2, r1
 80158b6:	40da      	lsrs	r2, r3
 80158b8:	4b11      	ldr	r3, [pc, #68]	@ (8015900 <HAL_RCC_ClockConfig+0x288>)
 80158ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80158bc:	4b11      	ldr	r3, [pc, #68]	@ (8015904 <HAL_RCC_ClockConfig+0x28c>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	250b      	movs	r5, #11
 80158c2:	197c      	adds	r4, r7, r5
 80158c4:	0018      	movs	r0, r3
 80158c6:	f7f9 f98d 	bl	800ebe4 <HAL_InitTick>
 80158ca:	0003      	movs	r3, r0
 80158cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80158ce:	197b      	adds	r3, r7, r5
 80158d0:	781b      	ldrb	r3, [r3, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d002      	beq.n	80158dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80158d6:	197b      	adds	r3, r7, r5
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	e000      	b.n	80158de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80158dc:	2300      	movs	r3, #0
}
 80158de:	0018      	movs	r0, r3
 80158e0:	46bd      	mov	sp, r7
 80158e2:	b004      	add	sp, #16
 80158e4:	bdb0      	pop	{r4, r5, r7, pc}
 80158e6:	46c0      	nop			@ (mov r8, r8)
 80158e8:	40022000 	.word	0x40022000
 80158ec:	00001388 	.word	0x00001388
 80158f0:	40021000 	.word	0x40021000
 80158f4:	fffff8ff 	.word	0xfffff8ff
 80158f8:	ffffc7ff 	.word	0xffffc7ff
 80158fc:	0802555c 	.word	0x0802555c
 8015900:	200000c8 	.word	0x200000c8
 8015904:	200000d8 	.word	0x200000d8

08015908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015908:	b5b0      	push	{r4, r5, r7, lr}
 801590a:	b08e      	sub	sp, #56	@ 0x38
 801590c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801590e:	4b4c      	ldr	r3, [pc, #304]	@ (8015a40 <HAL_RCC_GetSysClockFreq+0x138>)
 8015910:	68db      	ldr	r3, [r3, #12]
 8015912:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015916:	230c      	movs	r3, #12
 8015918:	4013      	ands	r3, r2
 801591a:	2b0c      	cmp	r3, #12
 801591c:	d014      	beq.n	8015948 <HAL_RCC_GetSysClockFreq+0x40>
 801591e:	d900      	bls.n	8015922 <HAL_RCC_GetSysClockFreq+0x1a>
 8015920:	e07b      	b.n	8015a1a <HAL_RCC_GetSysClockFreq+0x112>
 8015922:	2b04      	cmp	r3, #4
 8015924:	d002      	beq.n	801592c <HAL_RCC_GetSysClockFreq+0x24>
 8015926:	2b08      	cmp	r3, #8
 8015928:	d00b      	beq.n	8015942 <HAL_RCC_GetSysClockFreq+0x3a>
 801592a:	e076      	b.n	8015a1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801592c:	4b44      	ldr	r3, [pc, #272]	@ (8015a40 <HAL_RCC_GetSysClockFreq+0x138>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	2210      	movs	r2, #16
 8015932:	4013      	ands	r3, r2
 8015934:	d002      	beq.n	801593c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015936:	4b43      	ldr	r3, [pc, #268]	@ (8015a44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015938:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801593a:	e07c      	b.n	8015a36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801593c:	4b42      	ldr	r3, [pc, #264]	@ (8015a48 <HAL_RCC_GetSysClockFreq+0x140>)
 801593e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015940:	e079      	b.n	8015a36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015942:	4b42      	ldr	r3, [pc, #264]	@ (8015a4c <HAL_RCC_GetSysClockFreq+0x144>)
 8015944:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015946:	e076      	b.n	8015a36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801594a:	0c9a      	lsrs	r2, r3, #18
 801594c:	230f      	movs	r3, #15
 801594e:	401a      	ands	r2, r3
 8015950:	4b3f      	ldr	r3, [pc, #252]	@ (8015a50 <HAL_RCC_GetSysClockFreq+0x148>)
 8015952:	5c9b      	ldrb	r3, [r3, r2]
 8015954:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015958:	0d9a      	lsrs	r2, r3, #22
 801595a:	2303      	movs	r3, #3
 801595c:	4013      	ands	r3, r2
 801595e:	3301      	adds	r3, #1
 8015960:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015962:	4b37      	ldr	r3, [pc, #220]	@ (8015a40 <HAL_RCC_GetSysClockFreq+0x138>)
 8015964:	68da      	ldr	r2, [r3, #12]
 8015966:	2380      	movs	r3, #128	@ 0x80
 8015968:	025b      	lsls	r3, r3, #9
 801596a:	4013      	ands	r3, r2
 801596c:	d01a      	beq.n	80159a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015970:	61bb      	str	r3, [r7, #24]
 8015972:	2300      	movs	r3, #0
 8015974:	61fb      	str	r3, [r7, #28]
 8015976:	4a35      	ldr	r2, [pc, #212]	@ (8015a4c <HAL_RCC_GetSysClockFreq+0x144>)
 8015978:	2300      	movs	r3, #0
 801597a:	69b8      	ldr	r0, [r7, #24]
 801597c:	69f9      	ldr	r1, [r7, #28]
 801597e:	f7ea fe1f 	bl	80005c0 <__aeabi_lmul>
 8015982:	0002      	movs	r2, r0
 8015984:	000b      	movs	r3, r1
 8015986:	0010      	movs	r0, r2
 8015988:	0019      	movs	r1, r3
 801598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801598c:	613b      	str	r3, [r7, #16]
 801598e:	2300      	movs	r3, #0
 8015990:	617b      	str	r3, [r7, #20]
 8015992:	693a      	ldr	r2, [r7, #16]
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	f7ea fdf3 	bl	8000580 <__aeabi_uldivmod>
 801599a:	0002      	movs	r2, r0
 801599c:	000b      	movs	r3, r1
 801599e:	0013      	movs	r3, r2
 80159a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80159a2:	e037      	b.n	8015a14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80159a4:	4b26      	ldr	r3, [pc, #152]	@ (8015a40 <HAL_RCC_GetSysClockFreq+0x138>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	2210      	movs	r2, #16
 80159aa:	4013      	ands	r3, r2
 80159ac:	d01a      	beq.n	80159e4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80159ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159b0:	60bb      	str	r3, [r7, #8]
 80159b2:	2300      	movs	r3, #0
 80159b4:	60fb      	str	r3, [r7, #12]
 80159b6:	4a23      	ldr	r2, [pc, #140]	@ (8015a44 <HAL_RCC_GetSysClockFreq+0x13c>)
 80159b8:	2300      	movs	r3, #0
 80159ba:	68b8      	ldr	r0, [r7, #8]
 80159bc:	68f9      	ldr	r1, [r7, #12]
 80159be:	f7ea fdff 	bl	80005c0 <__aeabi_lmul>
 80159c2:	0002      	movs	r2, r0
 80159c4:	000b      	movs	r3, r1
 80159c6:	0010      	movs	r0, r2
 80159c8:	0019      	movs	r1, r3
 80159ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159cc:	603b      	str	r3, [r7, #0]
 80159ce:	2300      	movs	r3, #0
 80159d0:	607b      	str	r3, [r7, #4]
 80159d2:	683a      	ldr	r2, [r7, #0]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f7ea fdd3 	bl	8000580 <__aeabi_uldivmod>
 80159da:	0002      	movs	r2, r0
 80159dc:	000b      	movs	r3, r1
 80159de:	0013      	movs	r3, r2
 80159e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80159e2:	e017      	b.n	8015a14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80159e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e6:	0018      	movs	r0, r3
 80159e8:	2300      	movs	r3, #0
 80159ea:	0019      	movs	r1, r3
 80159ec:	4a16      	ldr	r2, [pc, #88]	@ (8015a48 <HAL_RCC_GetSysClockFreq+0x140>)
 80159ee:	2300      	movs	r3, #0
 80159f0:	f7ea fde6 	bl	80005c0 <__aeabi_lmul>
 80159f4:	0002      	movs	r2, r0
 80159f6:	000b      	movs	r3, r1
 80159f8:	0010      	movs	r0, r2
 80159fa:	0019      	movs	r1, r3
 80159fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fe:	001c      	movs	r4, r3
 8015a00:	2300      	movs	r3, #0
 8015a02:	001d      	movs	r5, r3
 8015a04:	0022      	movs	r2, r4
 8015a06:	002b      	movs	r3, r5
 8015a08:	f7ea fdba 	bl	8000580 <__aeabi_uldivmod>
 8015a0c:	0002      	movs	r2, r0
 8015a0e:	000b      	movs	r3, r1
 8015a10:	0013      	movs	r3, r2
 8015a12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a16:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a18:	e00d      	b.n	8015a36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015a1a:	4b09      	ldr	r3, [pc, #36]	@ (8015a40 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	0b5b      	lsrs	r3, r3, #13
 8015a20:	2207      	movs	r2, #7
 8015a22:	4013      	ands	r3, r2
 8015a24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015a26:	6a3b      	ldr	r3, [r7, #32]
 8015a28:	3301      	adds	r3, #1
 8015a2a:	2280      	movs	r2, #128	@ 0x80
 8015a2c:	0212      	lsls	r2, r2, #8
 8015a2e:	409a      	lsls	r2, r3
 8015a30:	0013      	movs	r3, r2
 8015a32:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a34:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015a38:	0018      	movs	r0, r3
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	b00e      	add	sp, #56	@ 0x38
 8015a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8015a40:	40021000 	.word	0x40021000
 8015a44:	003d0900 	.word	0x003d0900
 8015a48:	00f42400 	.word	0x00f42400
 8015a4c:	007a1200 	.word	0x007a1200
 8015a50:	08025574 	.word	0x08025574

08015a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015a58:	4b02      	ldr	r3, [pc, #8]	@ (8015a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
}
 8015a5c:	0018      	movs	r0, r3
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}
 8015a62:	46c0      	nop			@ (mov r8, r8)
 8015a64:	200000c8 	.word	0x200000c8

08015a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015a6c:	f7ff fff2 	bl	8015a54 <HAL_RCC_GetHCLKFreq>
 8015a70:	0001      	movs	r1, r0
 8015a72:	4b06      	ldr	r3, [pc, #24]	@ (8015a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8015a74:	68db      	ldr	r3, [r3, #12]
 8015a76:	0a1b      	lsrs	r3, r3, #8
 8015a78:	2207      	movs	r2, #7
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	4a04      	ldr	r2, [pc, #16]	@ (8015a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015a7e:	5cd3      	ldrb	r3, [r2, r3]
 8015a80:	40d9      	lsrs	r1, r3
 8015a82:	000b      	movs	r3, r1
}
 8015a84:	0018      	movs	r0, r3
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}
 8015a8a:	46c0      	nop			@ (mov r8, r8)
 8015a8c:	40021000 	.word	0x40021000
 8015a90:	0802556c 	.word	0x0802556c

08015a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015a98:	f7ff ffdc 	bl	8015a54 <HAL_RCC_GetHCLKFreq>
 8015a9c:	0001      	movs	r1, r0
 8015a9e:	4b06      	ldr	r3, [pc, #24]	@ (8015ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	0adb      	lsrs	r3, r3, #11
 8015aa4:	2207      	movs	r2, #7
 8015aa6:	4013      	ands	r3, r2
 8015aa8:	4a04      	ldr	r2, [pc, #16]	@ (8015abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8015aaa:	5cd3      	ldrb	r3, [r2, r3]
 8015aac:	40d9      	lsrs	r1, r3
 8015aae:	000b      	movs	r3, r1
}
 8015ab0:	0018      	movs	r0, r3
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	46c0      	nop			@ (mov r8, r8)
 8015ab8:	40021000 	.word	0x40021000
 8015abc:	0802556c 	.word	0x0802556c

08015ac0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b086      	sub	sp, #24
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015ac8:	2017      	movs	r0, #23
 8015aca:	183b      	adds	r3, r7, r0
 8015acc:	2200      	movs	r2, #0
 8015ace:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2220      	movs	r2, #32
 8015ad6:	4013      	ands	r3, r2
 8015ad8:	d100      	bne.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015ada:	e0c7      	b.n	8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015adc:	4b9b      	ldr	r3, [pc, #620]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ae0:	2380      	movs	r3, #128	@ 0x80
 8015ae2:	055b      	lsls	r3, r3, #21
 8015ae4:	4013      	ands	r3, r2
 8015ae6:	d109      	bne.n	8015afc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015ae8:	4b98      	ldr	r3, [pc, #608]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015aec:	4b97      	ldr	r3, [pc, #604]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015aee:	2180      	movs	r1, #128	@ 0x80
 8015af0:	0549      	lsls	r1, r1, #21
 8015af2:	430a      	orrs	r2, r1
 8015af4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015af6:	183b      	adds	r3, r7, r0
 8015af8:	2201      	movs	r2, #1
 8015afa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015afc:	4b94      	ldr	r3, [pc, #592]	@ (8015d50 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	2380      	movs	r3, #128	@ 0x80
 8015b02:	005b      	lsls	r3, r3, #1
 8015b04:	4013      	ands	r3, r2
 8015b06:	d11a      	bne.n	8015b3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015b08:	4b91      	ldr	r3, [pc, #580]	@ (8015d50 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	4b90      	ldr	r3, [pc, #576]	@ (8015d50 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b0e:	2180      	movs	r1, #128	@ 0x80
 8015b10:	0049      	lsls	r1, r1, #1
 8015b12:	430a      	orrs	r2, r1
 8015b14:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015b16:	f7f9 f8ab 	bl	800ec70 <HAL_GetTick>
 8015b1a:	0003      	movs	r3, r0
 8015b1c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b1e:	e008      	b.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015b20:	f7f9 f8a6 	bl	800ec70 <HAL_GetTick>
 8015b24:	0002      	movs	r2, r0
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	1ad3      	subs	r3, r2, r3
 8015b2a:	2b64      	cmp	r3, #100	@ 0x64
 8015b2c:	d901      	bls.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015b2e:	2303      	movs	r3, #3
 8015b30:	e107      	b.n	8015d42 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b32:	4b87      	ldr	r3, [pc, #540]	@ (8015d50 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b34:	681a      	ldr	r2, [r3, #0]
 8015b36:	2380      	movs	r3, #128	@ 0x80
 8015b38:	005b      	lsls	r3, r3, #1
 8015b3a:	4013      	ands	r3, r2
 8015b3c:	d0f0      	beq.n	8015b20 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015b3e:	4b83      	ldr	r3, [pc, #524]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	23c0      	movs	r3, #192	@ 0xc0
 8015b44:	039b      	lsls	r3, r3, #14
 8015b46:	4013      	ands	r3, r2
 8015b48:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	685a      	ldr	r2, [r3, #4]
 8015b4e:	23c0      	movs	r3, #192	@ 0xc0
 8015b50:	039b      	lsls	r3, r3, #14
 8015b52:	4013      	ands	r3, r2
 8015b54:	68fa      	ldr	r2, [r7, #12]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d013      	beq.n	8015b82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	685a      	ldr	r2, [r3, #4]
 8015b5e:	23c0      	movs	r3, #192	@ 0xc0
 8015b60:	029b      	lsls	r3, r3, #10
 8015b62:	401a      	ands	r2, r3
 8015b64:	23c0      	movs	r3, #192	@ 0xc0
 8015b66:	029b      	lsls	r3, r3, #10
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d10a      	bne.n	8015b82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015b6c:	4b77      	ldr	r3, [pc, #476]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	2380      	movs	r3, #128	@ 0x80
 8015b72:	029b      	lsls	r3, r3, #10
 8015b74:	401a      	ands	r2, r3
 8015b76:	2380      	movs	r3, #128	@ 0x80
 8015b78:	029b      	lsls	r3, r3, #10
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d101      	bne.n	8015b82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015b7e:	2301      	movs	r3, #1
 8015b80:	e0df      	b.n	8015d42 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015b82:	4b72      	ldr	r3, [pc, #456]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015b86:	23c0      	movs	r3, #192	@ 0xc0
 8015b88:	029b      	lsls	r3, r3, #10
 8015b8a:	4013      	ands	r3, r2
 8015b8c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d03b      	beq.n	8015c0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	685a      	ldr	r2, [r3, #4]
 8015b98:	23c0      	movs	r3, #192	@ 0xc0
 8015b9a:	029b      	lsls	r3, r3, #10
 8015b9c:	4013      	ands	r3, r2
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d033      	beq.n	8015c0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	2220      	movs	r2, #32
 8015baa:	4013      	ands	r3, r2
 8015bac:	d02e      	beq.n	8015c0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015bae:	4b67      	ldr	r3, [pc, #412]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015bb2:	4a68      	ldr	r2, [pc, #416]	@ (8015d54 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015bb4:	4013      	ands	r3, r2
 8015bb6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015bb8:	4b64      	ldr	r3, [pc, #400]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bbc:	4b63      	ldr	r3, [pc, #396]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bbe:	2180      	movs	r1, #128	@ 0x80
 8015bc0:	0309      	lsls	r1, r1, #12
 8015bc2:	430a      	orrs	r2, r1
 8015bc4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015bc6:	4b61      	ldr	r3, [pc, #388]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bca:	4b60      	ldr	r3, [pc, #384]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bcc:	4962      	ldr	r1, [pc, #392]	@ (8015d58 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015bce:	400a      	ands	r2, r1
 8015bd0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015bd2:	4b5e      	ldr	r3, [pc, #376]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bd4:	68fa      	ldr	r2, [r7, #12]
 8015bd6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015bd8:	68fa      	ldr	r2, [r7, #12]
 8015bda:	2380      	movs	r3, #128	@ 0x80
 8015bdc:	005b      	lsls	r3, r3, #1
 8015bde:	4013      	ands	r3, r2
 8015be0:	d014      	beq.n	8015c0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015be2:	f7f9 f845 	bl	800ec70 <HAL_GetTick>
 8015be6:	0003      	movs	r3, r0
 8015be8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015bea:	e009      	b.n	8015c00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015bec:	f7f9 f840 	bl	800ec70 <HAL_GetTick>
 8015bf0:	0002      	movs	r2, r0
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	1ad3      	subs	r3, r2, r3
 8015bf6:	4a59      	ldr	r2, [pc, #356]	@ (8015d5c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	d901      	bls.n	8015c00 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015bfc:	2303      	movs	r3, #3
 8015bfe:	e0a0      	b.n	8015d42 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015c00:	4b52      	ldr	r3, [pc, #328]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c04:	2380      	movs	r3, #128	@ 0x80
 8015c06:	009b      	lsls	r3, r3, #2
 8015c08:	4013      	ands	r3, r2
 8015c0a:	d0ef      	beq.n	8015bec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2220      	movs	r2, #32
 8015c12:	4013      	ands	r3, r2
 8015c14:	d01f      	beq.n	8015c56 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	685a      	ldr	r2, [r3, #4]
 8015c1a:	23c0      	movs	r3, #192	@ 0xc0
 8015c1c:	029b      	lsls	r3, r3, #10
 8015c1e:	401a      	ands	r2, r3
 8015c20:	23c0      	movs	r3, #192	@ 0xc0
 8015c22:	029b      	lsls	r3, r3, #10
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d10c      	bne.n	8015c42 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015c28:	4b48      	ldr	r3, [pc, #288]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8015d60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015c2e:	4013      	ands	r3, r2
 8015c30:	0019      	movs	r1, r3
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	685a      	ldr	r2, [r3, #4]
 8015c36:	23c0      	movs	r3, #192	@ 0xc0
 8015c38:	039b      	lsls	r3, r3, #14
 8015c3a:	401a      	ands	r2, r3
 8015c3c:	4b43      	ldr	r3, [pc, #268]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c3e:	430a      	orrs	r2, r1
 8015c40:	601a      	str	r2, [r3, #0]
 8015c42:	4b42      	ldr	r3, [pc, #264]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	685a      	ldr	r2, [r3, #4]
 8015c4a:	23c0      	movs	r3, #192	@ 0xc0
 8015c4c:	029b      	lsls	r3, r3, #10
 8015c4e:	401a      	ands	r2, r3
 8015c50:	4b3e      	ldr	r3, [pc, #248]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c52:	430a      	orrs	r2, r1
 8015c54:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015c56:	2317      	movs	r3, #23
 8015c58:	18fb      	adds	r3, r7, r3
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	2b01      	cmp	r3, #1
 8015c5e:	d105      	bne.n	8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015c60:	4b3a      	ldr	r3, [pc, #232]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015c64:	4b39      	ldr	r3, [pc, #228]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c66:	493f      	ldr	r1, [pc, #252]	@ (8015d64 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015c68:	400a      	ands	r2, r1
 8015c6a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2201      	movs	r2, #1
 8015c72:	4013      	ands	r3, r2
 8015c74:	d009      	beq.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015c76:	4b35      	ldr	r3, [pc, #212]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c7a:	2203      	movs	r2, #3
 8015c7c:	4393      	bics	r3, r2
 8015c7e:	0019      	movs	r1, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	689a      	ldr	r2, [r3, #8]
 8015c84:	4b31      	ldr	r3, [pc, #196]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c86:	430a      	orrs	r2, r1
 8015c88:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	2202      	movs	r2, #2
 8015c90:	4013      	ands	r3, r2
 8015c92:	d009      	beq.n	8015ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015c94:	4b2d      	ldr	r3, [pc, #180]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c98:	220c      	movs	r2, #12
 8015c9a:	4393      	bics	r3, r2
 8015c9c:	0019      	movs	r1, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	68da      	ldr	r2, [r3, #12]
 8015ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ca4:	430a      	orrs	r2, r1
 8015ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	2204      	movs	r2, #4
 8015cae:	4013      	ands	r3, r2
 8015cb0:	d009      	beq.n	8015cc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015cb2:	4b26      	ldr	r3, [pc, #152]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8015d68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015cb8:	4013      	ands	r3, r2
 8015cba:	0019      	movs	r1, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	691a      	ldr	r2, [r3, #16]
 8015cc0:	4b22      	ldr	r3, [pc, #136]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cc2:	430a      	orrs	r2, r1
 8015cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2208      	movs	r2, #8
 8015ccc:	4013      	ands	r3, r2
 8015cce:	d009      	beq.n	8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015cd4:	4a25      	ldr	r2, [pc, #148]	@ (8015d6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015cd6:	4013      	ands	r3, r2
 8015cd8:	0019      	movs	r1, r3
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	695a      	ldr	r2, [r3, #20]
 8015cde:	4b1b      	ldr	r3, [pc, #108]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ce0:	430a      	orrs	r2, r1
 8015ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	681a      	ldr	r2, [r3, #0]
 8015ce8:	2380      	movs	r3, #128	@ 0x80
 8015cea:	005b      	lsls	r3, r3, #1
 8015cec:	4013      	ands	r3, r2
 8015cee:	d009      	beq.n	8015d04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015cf0:	4b16      	ldr	r3, [pc, #88]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015cf4:	4a17      	ldr	r2, [pc, #92]	@ (8015d54 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015cf6:	4013      	ands	r3, r2
 8015cf8:	0019      	movs	r1, r3
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	699a      	ldr	r2, [r3, #24]
 8015cfe:	4b13      	ldr	r3, [pc, #76]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d00:	430a      	orrs	r2, r1
 8015d02:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	2240      	movs	r2, #64	@ 0x40
 8015d0a:	4013      	ands	r3, r2
 8015d0c:	d009      	beq.n	8015d22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d12:	4a17      	ldr	r2, [pc, #92]	@ (8015d70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015d14:	4013      	ands	r3, r2
 8015d16:	0019      	movs	r1, r3
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6a1a      	ldr	r2, [r3, #32]
 8015d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d1e:	430a      	orrs	r2, r1
 8015d20:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2280      	movs	r2, #128	@ 0x80
 8015d28:	4013      	ands	r3, r2
 8015d2a:	d009      	beq.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015d2c:	4b07      	ldr	r3, [pc, #28]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d30:	4a10      	ldr	r2, [pc, #64]	@ (8015d74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015d32:	4013      	ands	r3, r2
 8015d34:	0019      	movs	r1, r3
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	69da      	ldr	r2, [r3, #28]
 8015d3a:	4b04      	ldr	r3, [pc, #16]	@ (8015d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d3c:	430a      	orrs	r2, r1
 8015d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015d40:	2300      	movs	r3, #0
}
 8015d42:	0018      	movs	r0, r3
 8015d44:	46bd      	mov	sp, r7
 8015d46:	b006      	add	sp, #24
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	46c0      	nop			@ (mov r8, r8)
 8015d4c:	40021000 	.word	0x40021000
 8015d50:	40007000 	.word	0x40007000
 8015d54:	fffcffff 	.word	0xfffcffff
 8015d58:	fff7ffff 	.word	0xfff7ffff
 8015d5c:	00001388 	.word	0x00001388
 8015d60:	ffcfffff 	.word	0xffcfffff
 8015d64:	efffffff 	.word	0xefffffff
 8015d68:	fffff3ff 	.word	0xfffff3ff
 8015d6c:	ffffcfff 	.word	0xffffcfff
 8015d70:	fbffffff 	.word	0xfbffffff
 8015d74:	fff3ffff 	.word	0xfff3ffff

08015d78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015d78:	b5b0      	push	{r4, r5, r7, lr}
 8015d7a:	b084      	sub	sp, #16
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015d80:	230f      	movs	r3, #15
 8015d82:	18fb      	adds	r3, r7, r3
 8015d84:	2201      	movs	r2, #1
 8015d86:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d101      	bne.n	8015d92 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015d8e:	2301      	movs	r3, #1
 8015d90:	e088      	b.n	8015ea4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2221      	movs	r2, #33	@ 0x21
 8015d96:	5c9b      	ldrb	r3, [r3, r2]
 8015d98:	b2db      	uxtb	r3, r3
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d107      	bne.n	8015dae <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2220      	movs	r2, #32
 8015da2:	2100      	movs	r1, #0
 8015da4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	0018      	movs	r0, r3
 8015daa:	f7f3 f8eb 	bl	8008f84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2221      	movs	r2, #33	@ 0x21
 8015db2:	2102      	movs	r1, #2
 8015db4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	2210      	movs	r2, #16
 8015dbe:	4013      	ands	r3, r2
 8015dc0:	2b10      	cmp	r3, #16
 8015dc2:	d05f      	beq.n	8015e84 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	22ca      	movs	r2, #202	@ 0xca
 8015dca:	625a      	str	r2, [r3, #36]	@ 0x24
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	2253      	movs	r2, #83	@ 0x53
 8015dd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015dd4:	250f      	movs	r5, #15
 8015dd6:	197c      	adds	r4, r7, r5
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	0018      	movs	r0, r3
 8015ddc:	f000 fa7c 	bl	80162d8 <RTC_EnterInitMode>
 8015de0:	0003      	movs	r3, r0
 8015de2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015de4:	0028      	movs	r0, r5
 8015de6:	183b      	adds	r3, r7, r0
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d12c      	bne.n	8015e48 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	689a      	ldr	r2, [r3, #8]
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	492c      	ldr	r1, [pc, #176]	@ (8015eac <HAL_RTC_Init+0x134>)
 8015dfa:	400a      	ands	r2, r1
 8015dfc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	6899      	ldr	r1, [r3, #8]
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	685a      	ldr	r2, [r3, #4]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	691b      	ldr	r3, [r3, #16]
 8015e0c:	431a      	orrs	r2, r3
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	699b      	ldr	r3, [r3, #24]
 8015e12:	431a      	orrs	r2, r3
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	430a      	orrs	r2, r1
 8015e1a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	687a      	ldr	r2, [r7, #4]
 8015e22:	68d2      	ldr	r2, [r2, #12]
 8015e24:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	6919      	ldr	r1, [r3, #16]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	689b      	ldr	r3, [r3, #8]
 8015e30:	041a      	lsls	r2, r3, #16
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	430a      	orrs	r2, r1
 8015e38:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015e3a:	183c      	adds	r4, r7, r0
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	0018      	movs	r0, r3
 8015e40:	f000 fa8e 	bl	8016360 <RTC_ExitInitMode>
 8015e44:	0003      	movs	r3, r0
 8015e46:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015e48:	230f      	movs	r3, #15
 8015e4a:	18fb      	adds	r3, r7, r3
 8015e4c:	781b      	ldrb	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d113      	bne.n	8015e7a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2103      	movs	r1, #3
 8015e5e:	438a      	bics	r2, r1
 8015e60:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	69da      	ldr	r2, [r3, #28]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	695b      	ldr	r3, [r3, #20]
 8015e70:	431a      	orrs	r2, r3
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	430a      	orrs	r2, r1
 8015e78:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	22ff      	movs	r2, #255	@ 0xff
 8015e80:	625a      	str	r2, [r3, #36]	@ 0x24
 8015e82:	e003      	b.n	8015e8c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015e84:	230f      	movs	r3, #15
 8015e86:	18fb      	adds	r3, r7, r3
 8015e88:	2200      	movs	r2, #0
 8015e8a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015e8c:	230f      	movs	r3, #15
 8015e8e:	18fb      	adds	r3, r7, r3
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d103      	bne.n	8015e9e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2221      	movs	r2, #33	@ 0x21
 8015e9a:	2101      	movs	r1, #1
 8015e9c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015e9e:	230f      	movs	r3, #15
 8015ea0:	18fb      	adds	r3, r7, r3
 8015ea2:	781b      	ldrb	r3, [r3, #0]
}
 8015ea4:	0018      	movs	r0, r3
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	b004      	add	sp, #16
 8015eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8015eac:	ff8fffbf 	.word	0xff8fffbf

08015eb0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015eb0:	b5b0      	push	{r4, r5, r7, lr}
 8015eb2:	b086      	sub	sp, #24
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	2220      	movs	r2, #32
 8015ec4:	5c9b      	ldrb	r3, [r3, r2]
 8015ec6:	2b01      	cmp	r3, #1
 8015ec8:	d101      	bne.n	8015ece <HAL_RTC_SetTime+0x1e>
 8015eca:	2302      	movs	r3, #2
 8015ecc:	e092      	b.n	8015ff4 <HAL_RTC_SetTime+0x144>
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	2220      	movs	r2, #32
 8015ed2:	2101      	movs	r1, #1
 8015ed4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2221      	movs	r2, #33	@ 0x21
 8015eda:	2102      	movs	r1, #2
 8015edc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d125      	bne.n	8015f30 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	689b      	ldr	r3, [r3, #8]
 8015eea:	2240      	movs	r2, #64	@ 0x40
 8015eec:	4013      	ands	r3, r2
 8015eee:	d102      	bne.n	8015ef6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	0018      	movs	r0, r3
 8015efc:	f000 fa5a 	bl	80163b4 <RTC_ByteToBcd2>
 8015f00:	0003      	movs	r3, r0
 8015f02:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	785b      	ldrb	r3, [r3, #1]
 8015f08:	0018      	movs	r0, r3
 8015f0a:	f000 fa53 	bl	80163b4 <RTC_ByteToBcd2>
 8015f0e:	0003      	movs	r3, r0
 8015f10:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f12:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	789b      	ldrb	r3, [r3, #2]
 8015f18:	0018      	movs	r0, r3
 8015f1a:	f000 fa4b 	bl	80163b4 <RTC_ByteToBcd2>
 8015f1e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015f20:	0022      	movs	r2, r4
 8015f22:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	78db      	ldrb	r3, [r3, #3]
 8015f28:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f2a:	4313      	orrs	r3, r2
 8015f2c:	617b      	str	r3, [r7, #20]
 8015f2e:	e017      	b.n	8015f60 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	689b      	ldr	r3, [r3, #8]
 8015f36:	2240      	movs	r2, #64	@ 0x40
 8015f38:	4013      	ands	r3, r2
 8015f3a:	d102      	bne.n	8015f42 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	781b      	ldrb	r3, [r3, #0]
 8015f46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	785b      	ldrb	r3, [r3, #1]
 8015f4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015f4e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015f50:	68ba      	ldr	r2, [r7, #8]
 8015f52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015f54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	78db      	ldrb	r3, [r3, #3]
 8015f5a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015f5c:	4313      	orrs	r3, r2
 8015f5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	22ca      	movs	r2, #202	@ 0xca
 8015f66:	625a      	str	r2, [r3, #36]	@ 0x24
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2253      	movs	r2, #83	@ 0x53
 8015f6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015f70:	2513      	movs	r5, #19
 8015f72:	197c      	adds	r4, r7, r5
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	0018      	movs	r0, r3
 8015f78:	f000 f9ae 	bl	80162d8 <RTC_EnterInitMode>
 8015f7c:	0003      	movs	r3, r0
 8015f7e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015f80:	0028      	movs	r0, r5
 8015f82:	183b      	adds	r3, r7, r0
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d120      	bne.n	8015fcc <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	697a      	ldr	r2, [r7, #20]
 8015f90:	491a      	ldr	r1, [pc, #104]	@ (8015ffc <HAL_RTC_SetTime+0x14c>)
 8015f92:	400a      	ands	r2, r1
 8015f94:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	689a      	ldr	r2, [r3, #8]
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	4917      	ldr	r1, [pc, #92]	@ (8016000 <HAL_RTC_SetTime+0x150>)
 8015fa2:	400a      	ands	r2, r1
 8015fa4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	6899      	ldr	r1, [r3, #8]
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	68da      	ldr	r2, [r3, #12]
 8015fb0:	68bb      	ldr	r3, [r7, #8]
 8015fb2:	691b      	ldr	r3, [r3, #16]
 8015fb4:	431a      	orrs	r2, r3
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	430a      	orrs	r2, r1
 8015fbc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015fbe:	183c      	adds	r4, r7, r0
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	0018      	movs	r0, r3
 8015fc4:	f000 f9cc 	bl	8016360 <RTC_ExitInitMode>
 8015fc8:	0003      	movs	r3, r0
 8015fca:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015fcc:	2313      	movs	r3, #19
 8015fce:	18fb      	adds	r3, r7, r3
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d103      	bne.n	8015fde <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2221      	movs	r2, #33	@ 0x21
 8015fda:	2101      	movs	r1, #1
 8015fdc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	22ff      	movs	r2, #255	@ 0xff
 8015fe4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2220      	movs	r2, #32
 8015fea:	2100      	movs	r1, #0
 8015fec:	5499      	strb	r1, [r3, r2]

  return status;
 8015fee:	2313      	movs	r3, #19
 8015ff0:	18fb      	adds	r3, r7, r3
 8015ff2:	781b      	ldrb	r3, [r3, #0]
}
 8015ff4:	0018      	movs	r0, r3
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	b006      	add	sp, #24
 8015ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8015ffc:	007f7f7f 	.word	0x007f7f7f
 8016000:	fffbffff 	.word	0xfffbffff

08016004 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b086      	sub	sp, #24
 8016008:	af00      	add	r7, sp, #0
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	60b9      	str	r1, [r7, #8]
 801600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016010:	2300      	movs	r3, #0
 8016012:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	691b      	ldr	r3, [r3, #16]
 8016024:	045b      	lsls	r3, r3, #17
 8016026:	0c5a      	lsrs	r2, r3, #17
 8016028:	68bb      	ldr	r3, [r7, #8]
 801602a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	4a22      	ldr	r2, [pc, #136]	@ (80160bc <HAL_RTC_GetTime+0xb8>)
 8016034:	4013      	ands	r3, r2
 8016036:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	0c1b      	lsrs	r3, r3, #16
 801603c:	b2db      	uxtb	r3, r3
 801603e:	223f      	movs	r2, #63	@ 0x3f
 8016040:	4013      	ands	r3, r2
 8016042:	b2da      	uxtb	r2, r3
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	0a1b      	lsrs	r3, r3, #8
 801604c:	b2db      	uxtb	r3, r3
 801604e:	227f      	movs	r2, #127	@ 0x7f
 8016050:	4013      	ands	r3, r2
 8016052:	b2da      	uxtb	r2, r3
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	b2db      	uxtb	r3, r3
 801605c:	227f      	movs	r2, #127	@ 0x7f
 801605e:	4013      	ands	r3, r2
 8016060:	b2da      	uxtb	r2, r3
 8016062:	68bb      	ldr	r3, [r7, #8]
 8016064:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	0d9b      	lsrs	r3, r3, #22
 801606a:	b2db      	uxtb	r3, r3
 801606c:	2201      	movs	r2, #1
 801606e:	4013      	ands	r3, r2
 8016070:	b2da      	uxtb	r2, r3
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d11a      	bne.n	80160b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	0018      	movs	r0, r3
 8016082:	f000 f9b8 	bl	80163f6 <RTC_Bcd2ToByte>
 8016086:	0003      	movs	r3, r0
 8016088:	001a      	movs	r2, r3
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	785b      	ldrb	r3, [r3, #1]
 8016092:	0018      	movs	r0, r3
 8016094:	f000 f9af 	bl	80163f6 <RTC_Bcd2ToByte>
 8016098:	0003      	movs	r3, r0
 801609a:	001a      	movs	r2, r3
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	789b      	ldrb	r3, [r3, #2]
 80160a4:	0018      	movs	r0, r3
 80160a6:	f000 f9a6 	bl	80163f6 <RTC_Bcd2ToByte>
 80160aa:	0003      	movs	r3, r0
 80160ac:	001a      	movs	r2, r3
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80160b2:	2300      	movs	r3, #0
}
 80160b4:	0018      	movs	r0, r3
 80160b6:	46bd      	mov	sp, r7
 80160b8:	b006      	add	sp, #24
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	007f7f7f 	.word	0x007f7f7f

080160c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80160c0:	b5b0      	push	{r4, r5, r7, lr}
 80160c2:	b086      	sub	sp, #24
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80160cc:	2300      	movs	r3, #0
 80160ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2220      	movs	r2, #32
 80160d4:	5c9b      	ldrb	r3, [r3, r2]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d101      	bne.n	80160de <HAL_RTC_SetDate+0x1e>
 80160da:	2302      	movs	r3, #2
 80160dc:	e07e      	b.n	80161dc <HAL_RTC_SetDate+0x11c>
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2220      	movs	r2, #32
 80160e2:	2101      	movs	r1, #1
 80160e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2221      	movs	r2, #33	@ 0x21
 80160ea:	2102      	movs	r1, #2
 80160ec:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d10e      	bne.n	8016112 <HAL_RTC_SetDate+0x52>
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	785b      	ldrb	r3, [r3, #1]
 80160f8:	001a      	movs	r2, r3
 80160fa:	2310      	movs	r3, #16
 80160fc:	4013      	ands	r3, r2
 80160fe:	d008      	beq.n	8016112 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	785b      	ldrb	r3, [r3, #1]
 8016104:	2210      	movs	r2, #16
 8016106:	4393      	bics	r3, r2
 8016108:	b2db      	uxtb	r3, r3
 801610a:	330a      	adds	r3, #10
 801610c:	b2da      	uxtb	r2, r3
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d11c      	bne.n	8016152 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	78db      	ldrb	r3, [r3, #3]
 801611c:	0018      	movs	r0, r3
 801611e:	f000 f949 	bl	80163b4 <RTC_ByteToBcd2>
 8016122:	0003      	movs	r3, r0
 8016124:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	785b      	ldrb	r3, [r3, #1]
 801612a:	0018      	movs	r0, r3
 801612c:	f000 f942 	bl	80163b4 <RTC_ByteToBcd2>
 8016130:	0003      	movs	r3, r0
 8016132:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016134:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	789b      	ldrb	r3, [r3, #2]
 801613a:	0018      	movs	r0, r3
 801613c:	f000 f93a 	bl	80163b4 <RTC_ByteToBcd2>
 8016140:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016142:	0022      	movs	r2, r4
 8016144:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8016146:	68bb      	ldr	r3, [r7, #8]
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801614c:	4313      	orrs	r3, r2
 801614e:	617b      	str	r3, [r7, #20]
 8016150:	e00e      	b.n	8016170 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	78db      	ldrb	r3, [r3, #3]
 8016156:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	785b      	ldrb	r3, [r3, #1]
 801615c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801615e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016164:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801616c:	4313      	orrs	r3, r2
 801616e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	22ca      	movs	r2, #202	@ 0xca
 8016176:	625a      	str	r2, [r3, #36]	@ 0x24
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2253      	movs	r2, #83	@ 0x53
 801617e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016180:	2513      	movs	r5, #19
 8016182:	197c      	adds	r4, r7, r5
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	0018      	movs	r0, r3
 8016188:	f000 f8a6 	bl	80162d8 <RTC_EnterInitMode>
 801618c:	0003      	movs	r3, r0
 801618e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016190:	0028      	movs	r0, r5
 8016192:	183b      	adds	r3, r7, r0
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d10c      	bne.n	80161b4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	697a      	ldr	r2, [r7, #20]
 80161a0:	4910      	ldr	r1, [pc, #64]	@ (80161e4 <HAL_RTC_SetDate+0x124>)
 80161a2:	400a      	ands	r2, r1
 80161a4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80161a6:	183c      	adds	r4, r7, r0
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	0018      	movs	r0, r3
 80161ac:	f000 f8d8 	bl	8016360 <RTC_ExitInitMode>
 80161b0:	0003      	movs	r3, r0
 80161b2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80161b4:	2313      	movs	r3, #19
 80161b6:	18fb      	adds	r3, r7, r3
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d103      	bne.n	80161c6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2221      	movs	r2, #33	@ 0x21
 80161c2:	2101      	movs	r1, #1
 80161c4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	22ff      	movs	r2, #255	@ 0xff
 80161cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	2220      	movs	r2, #32
 80161d2:	2100      	movs	r1, #0
 80161d4:	5499      	strb	r1, [r3, r2]

  return status;
 80161d6:	2313      	movs	r3, #19
 80161d8:	18fb      	adds	r3, r7, r3
 80161da:	781b      	ldrb	r3, [r3, #0]
}
 80161dc:	0018      	movs	r0, r3
 80161de:	46bd      	mov	sp, r7
 80161e0:	b006      	add	sp, #24
 80161e2:	bdb0      	pop	{r4, r5, r7, pc}
 80161e4:	00ffff3f 	.word	0x00ffff3f

080161e8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b086      	sub	sp, #24
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80161f4:	2300      	movs	r3, #0
 80161f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	4a21      	ldr	r2, [pc, #132]	@ (8016284 <HAL_RTC_GetDate+0x9c>)
 8016200:	4013      	ands	r3, r2
 8016202:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	0c1b      	lsrs	r3, r3, #16
 8016208:	b2da      	uxtb	r2, r3
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	0a1b      	lsrs	r3, r3, #8
 8016212:	b2db      	uxtb	r3, r3
 8016214:	221f      	movs	r2, #31
 8016216:	4013      	ands	r3, r2
 8016218:	b2da      	uxtb	r2, r3
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	b2db      	uxtb	r3, r3
 8016222:	223f      	movs	r2, #63	@ 0x3f
 8016224:	4013      	ands	r3, r2
 8016226:	b2da      	uxtb	r2, r3
 8016228:	68bb      	ldr	r3, [r7, #8]
 801622a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	0b5b      	lsrs	r3, r3, #13
 8016230:	b2db      	uxtb	r3, r3
 8016232:	2207      	movs	r2, #7
 8016234:	4013      	ands	r3, r2
 8016236:	b2da      	uxtb	r2, r3
 8016238:	68bb      	ldr	r3, [r7, #8]
 801623a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d11a      	bne.n	8016278 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016242:	68bb      	ldr	r3, [r7, #8]
 8016244:	78db      	ldrb	r3, [r3, #3]
 8016246:	0018      	movs	r0, r3
 8016248:	f000 f8d5 	bl	80163f6 <RTC_Bcd2ToByte>
 801624c:	0003      	movs	r3, r0
 801624e:	001a      	movs	r2, r3
 8016250:	68bb      	ldr	r3, [r7, #8]
 8016252:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	785b      	ldrb	r3, [r3, #1]
 8016258:	0018      	movs	r0, r3
 801625a:	f000 f8cc 	bl	80163f6 <RTC_Bcd2ToByte>
 801625e:	0003      	movs	r3, r0
 8016260:	001a      	movs	r2, r3
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	789b      	ldrb	r3, [r3, #2]
 801626a:	0018      	movs	r0, r3
 801626c:	f000 f8c3 	bl	80163f6 <RTC_Bcd2ToByte>
 8016270:	0003      	movs	r3, r0
 8016272:	001a      	movs	r2, r3
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8016278:	2300      	movs	r3, #0
}
 801627a:	0018      	movs	r0, r3
 801627c:	46bd      	mov	sp, r7
 801627e:	b006      	add	sp, #24
 8016280:	bd80      	pop	{r7, pc}
 8016282:	46c0      	nop			@ (mov r8, r8)
 8016284:	00ffff3f 	.word	0x00ffff3f

08016288 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016290:	2300      	movs	r3, #0
 8016292:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	4a0e      	ldr	r2, [pc, #56]	@ (80162d4 <HAL_RTC_WaitForSynchro+0x4c>)
 801629a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801629c:	f7f8 fce8 	bl	800ec70 <HAL_GetTick>
 80162a0:	0003      	movs	r3, r0
 80162a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80162a4:	e00a      	b.n	80162bc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80162a6:	f7f8 fce3 	bl	800ec70 <HAL_GetTick>
 80162aa:	0002      	movs	r2, r0
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	1ad2      	subs	r2, r2, r3
 80162b0:	23fa      	movs	r3, #250	@ 0xfa
 80162b2:	009b      	lsls	r3, r3, #2
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d901      	bls.n	80162bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80162b8:	2303      	movs	r3, #3
 80162ba:	e006      	b.n	80162ca <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	2220      	movs	r2, #32
 80162c4:	4013      	ands	r3, r2
 80162c6:	d0ee      	beq.n	80162a6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	0018      	movs	r0, r3
 80162cc:	46bd      	mov	sp, r7
 80162ce:	b004      	add	sp, #16
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	46c0      	nop			@ (mov r8, r8)
 80162d4:	0001ff5f 	.word	0x0001ff5f

080162d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80162e0:	2300      	movs	r3, #0
 80162e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80162e4:	230f      	movs	r3, #15
 80162e6:	18fb      	adds	r3, r7, r3
 80162e8:	2200      	movs	r2, #0
 80162ea:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	68db      	ldr	r3, [r3, #12]
 80162f2:	2240      	movs	r2, #64	@ 0x40
 80162f4:	4013      	ands	r3, r2
 80162f6:	d12c      	bne.n	8016352 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	68da      	ldr	r2, [r3, #12]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2180      	movs	r1, #128	@ 0x80
 8016304:	430a      	orrs	r2, r1
 8016306:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016308:	f7f8 fcb2 	bl	800ec70 <HAL_GetTick>
 801630c:	0003      	movs	r3, r0
 801630e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016310:	e014      	b.n	801633c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016312:	f7f8 fcad 	bl	800ec70 <HAL_GetTick>
 8016316:	0002      	movs	r2, r0
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	1ad2      	subs	r2, r2, r3
 801631c:	200f      	movs	r0, #15
 801631e:	183b      	adds	r3, r7, r0
 8016320:	1839      	adds	r1, r7, r0
 8016322:	7809      	ldrb	r1, [r1, #0]
 8016324:	7019      	strb	r1, [r3, #0]
 8016326:	23fa      	movs	r3, #250	@ 0xfa
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	429a      	cmp	r2, r3
 801632c:	d906      	bls.n	801633c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2221      	movs	r2, #33	@ 0x21
 8016332:	2104      	movs	r1, #4
 8016334:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8016336:	183b      	adds	r3, r7, r0
 8016338:	2201      	movs	r2, #1
 801633a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	68db      	ldr	r3, [r3, #12]
 8016342:	2240      	movs	r2, #64	@ 0x40
 8016344:	4013      	ands	r3, r2
 8016346:	d104      	bne.n	8016352 <RTC_EnterInitMode+0x7a>
 8016348:	230f      	movs	r3, #15
 801634a:	18fb      	adds	r3, r7, r3
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	2b01      	cmp	r3, #1
 8016350:	d1df      	bne.n	8016312 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016352:	230f      	movs	r3, #15
 8016354:	18fb      	adds	r3, r7, r3
 8016356:	781b      	ldrb	r3, [r3, #0]
}
 8016358:	0018      	movs	r0, r3
 801635a:	46bd      	mov	sp, r7
 801635c:	b004      	add	sp, #16
 801635e:	bd80      	pop	{r7, pc}

08016360 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016360:	b590      	push	{r4, r7, lr}
 8016362:	b085      	sub	sp, #20
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016368:	240f      	movs	r4, #15
 801636a:	193b      	adds	r3, r7, r4
 801636c:	2200      	movs	r2, #0
 801636e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	68da      	ldr	r2, [r3, #12]
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	2180      	movs	r1, #128	@ 0x80
 801637c:	438a      	bics	r2, r1
 801637e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	689b      	ldr	r3, [r3, #8]
 8016386:	2220      	movs	r2, #32
 8016388:	4013      	ands	r3, r2
 801638a:	d10c      	bne.n	80163a6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	0018      	movs	r0, r3
 8016390:	f7ff ff7a 	bl	8016288 <HAL_RTC_WaitForSynchro>
 8016394:	1e03      	subs	r3, r0, #0
 8016396:	d006      	beq.n	80163a6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2221      	movs	r2, #33	@ 0x21
 801639c:	2104      	movs	r1, #4
 801639e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80163a0:	193b      	adds	r3, r7, r4
 80163a2:	2201      	movs	r2, #1
 80163a4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80163a6:	230f      	movs	r3, #15
 80163a8:	18fb      	adds	r3, r7, r3
 80163aa:	781b      	ldrb	r3, [r3, #0]
}
 80163ac:	0018      	movs	r0, r3
 80163ae:	46bd      	mov	sp, r7
 80163b0:	b005      	add	sp, #20
 80163b2:	bd90      	pop	{r4, r7, pc}

080163b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b084      	sub	sp, #16
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	0002      	movs	r2, r0
 80163bc:	1dfb      	adds	r3, r7, #7
 80163be:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80163c0:	2300      	movs	r3, #0
 80163c2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80163c4:	e007      	b.n	80163d6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	3301      	adds	r3, #1
 80163ca:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80163cc:	1dfb      	adds	r3, r7, #7
 80163ce:	1dfa      	adds	r2, r7, #7
 80163d0:	7812      	ldrb	r2, [r2, #0]
 80163d2:	3a0a      	subs	r2, #10
 80163d4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80163d6:	1dfb      	adds	r3, r7, #7
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2b09      	cmp	r3, #9
 80163dc:	d8f3      	bhi.n	80163c6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	011b      	lsls	r3, r3, #4
 80163e4:	b2da      	uxtb	r2, r3
 80163e6:	1dfb      	adds	r3, r7, #7
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	4313      	orrs	r3, r2
 80163ec:	b2db      	uxtb	r3, r3
}
 80163ee:	0018      	movs	r0, r3
 80163f0:	46bd      	mov	sp, r7
 80163f2:	b004      	add	sp, #16
 80163f4:	bd80      	pop	{r7, pc}

080163f6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80163f6:	b580      	push	{r7, lr}
 80163f8:	b084      	sub	sp, #16
 80163fa:	af00      	add	r7, sp, #0
 80163fc:	0002      	movs	r2, r0
 80163fe:	1dfb      	adds	r3, r7, #7
 8016400:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016402:	2300      	movs	r3, #0
 8016404:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8016406:	1dfb      	adds	r3, r7, #7
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	091b      	lsrs	r3, r3, #4
 801640c:	b2db      	uxtb	r3, r3
 801640e:	001a      	movs	r2, r3
 8016410:	0013      	movs	r3, r2
 8016412:	009b      	lsls	r3, r3, #2
 8016414:	189b      	adds	r3, r3, r2
 8016416:	005b      	lsls	r3, r3, #1
 8016418:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	b2da      	uxtb	r2, r3
 801641e:	1dfb      	adds	r3, r7, #7
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	210f      	movs	r1, #15
 8016424:	400b      	ands	r3, r1
 8016426:	b2db      	uxtb	r3, r3
 8016428:	18d3      	adds	r3, r2, r3
 801642a:	b2db      	uxtb	r3, r3
}
 801642c:	0018      	movs	r0, r3
 801642e:	46bd      	mov	sp, r7
 8016430:	b004      	add	sp, #16
 8016432:	bd80      	pop	{r7, pc}

08016434 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b086      	sub	sp, #24
 8016438:	af00      	add	r7, sp, #0
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016440:	4b64      	ldr	r3, [pc, #400]	@ (80165d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	22fa      	movs	r2, #250	@ 0xfa
 8016446:	01d1      	lsls	r1, r2, #7
 8016448:	0018      	movs	r0, r3
 801644a:	f7e9 feab 	bl	80001a4 <__udivsi3>
 801644e:	0003      	movs	r3, r0
 8016450:	001a      	movs	r2, r3
 8016452:	0013      	movs	r3, r2
 8016454:	015b      	lsls	r3, r3, #5
 8016456:	1a9b      	subs	r3, r3, r2
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	189b      	adds	r3, r3, r2
 801645c:	00db      	lsls	r3, r3, #3
 801645e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2220      	movs	r2, #32
 8016464:	5c9b      	ldrb	r3, [r3, r2]
 8016466:	2b01      	cmp	r3, #1
 8016468:	d101      	bne.n	801646e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801646a:	2302      	movs	r3, #2
 801646c:	e0ad      	b.n	80165ca <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	2220      	movs	r2, #32
 8016472:	2101      	movs	r1, #1
 8016474:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	2221      	movs	r2, #33	@ 0x21
 801647a:	2102      	movs	r1, #2
 801647c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	22ca      	movs	r2, #202	@ 0xca
 8016484:	625a      	str	r2, [r3, #36]	@ 0x24
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	2253      	movs	r2, #83	@ 0x53
 801648c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	689a      	ldr	r2, [r3, #8]
 8016494:	2380      	movs	r3, #128	@ 0x80
 8016496:	00db      	lsls	r3, r3, #3
 8016498:	4013      	ands	r3, r2
 801649a:	d019      	beq.n	80164d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	3b01      	subs	r3, #1
 80164a0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d10d      	bne.n	80164c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	22ff      	movs	r2, #255	@ 0xff
 80164ae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	2221      	movs	r2, #33	@ 0x21
 80164b4:	2103      	movs	r1, #3
 80164b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2220      	movs	r2, #32
 80164bc:	2100      	movs	r1, #0
 80164be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80164c0:	2303      	movs	r3, #3
 80164c2:	e082      	b.n	80165ca <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	68db      	ldr	r3, [r3, #12]
 80164ca:	2204      	movs	r2, #4
 80164cc:	4013      	ands	r3, r2
 80164ce:	d1e5      	bne.n	801649c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	689a      	ldr	r2, [r3, #8]
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	493f      	ldr	r1, [pc, #252]	@ (80165d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80164dc:	400a      	ands	r2, r1
 80164de:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	68db      	ldr	r3, [r3, #12]
 80164e6:	22ff      	movs	r2, #255	@ 0xff
 80164e8:	401a      	ands	r2, r3
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	493b      	ldr	r1, [pc, #236]	@ (80165dc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80164f0:	430a      	orrs	r2, r1
 80164f2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80164f4:	4b37      	ldr	r3, [pc, #220]	@ (80165d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	22fa      	movs	r2, #250	@ 0xfa
 80164fa:	01d1      	lsls	r1, r2, #7
 80164fc:	0018      	movs	r0, r3
 80164fe:	f7e9 fe51 	bl	80001a4 <__udivsi3>
 8016502:	0003      	movs	r3, r0
 8016504:	001a      	movs	r2, r3
 8016506:	0013      	movs	r3, r2
 8016508:	015b      	lsls	r3, r3, #5
 801650a:	1a9b      	subs	r3, r3, r2
 801650c:	009b      	lsls	r3, r3, #2
 801650e:	189b      	adds	r3, r3, r2
 8016510:	00db      	lsls	r3, r3, #3
 8016512:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016514:	697b      	ldr	r3, [r7, #20]
 8016516:	3b01      	subs	r3, #1
 8016518:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d10d      	bne.n	801653c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	22ff      	movs	r2, #255	@ 0xff
 8016526:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2221      	movs	r2, #33	@ 0x21
 801652c:	2103      	movs	r1, #3
 801652e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	2220      	movs	r2, #32
 8016534:	2100      	movs	r1, #0
 8016536:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016538:	2303      	movs	r3, #3
 801653a:	e046      	b.n	80165ca <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	68db      	ldr	r3, [r3, #12]
 8016542:	2204      	movs	r2, #4
 8016544:	4013      	ands	r3, r2
 8016546:	d0e5      	beq.n	8016514 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	689a      	ldr	r2, [r3, #8]
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	2107      	movs	r1, #7
 8016554:	438a      	bics	r2, r1
 8016556:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	6899      	ldr	r1, [r3, #8]
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	430a      	orrs	r2, r1
 8016566:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	68ba      	ldr	r2, [r7, #8]
 801656e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8016570:	4b1b      	ldr	r3, [pc, #108]	@ (80165e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016572:	681a      	ldr	r2, [r3, #0]
 8016574:	4b1a      	ldr	r3, [pc, #104]	@ (80165e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016576:	2180      	movs	r1, #128	@ 0x80
 8016578:	0349      	lsls	r1, r1, #13
 801657a:	430a      	orrs	r2, r1
 801657c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801657e:	4b18      	ldr	r3, [pc, #96]	@ (80165e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016580:	689a      	ldr	r2, [r3, #8]
 8016582:	4b17      	ldr	r3, [pc, #92]	@ (80165e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016584:	2180      	movs	r1, #128	@ 0x80
 8016586:	0349      	lsls	r1, r1, #13
 8016588:	430a      	orrs	r2, r1
 801658a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	689a      	ldr	r2, [r3, #8]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2180      	movs	r1, #128	@ 0x80
 8016598:	01c9      	lsls	r1, r1, #7
 801659a:	430a      	orrs	r2, r1
 801659c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	689a      	ldr	r2, [r3, #8]
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	2180      	movs	r1, #128	@ 0x80
 80165aa:	00c9      	lsls	r1, r1, #3
 80165ac:	430a      	orrs	r2, r1
 80165ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	22ff      	movs	r2, #255	@ 0xff
 80165b6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2221      	movs	r2, #33	@ 0x21
 80165bc:	2101      	movs	r1, #1
 80165be:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	2220      	movs	r2, #32
 80165c4:	2100      	movs	r1, #0
 80165c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80165c8:	2300      	movs	r3, #0
}
 80165ca:	0018      	movs	r0, r3
 80165cc:	46bd      	mov	sp, r7
 80165ce:	b006      	add	sp, #24
 80165d0:	bd80      	pop	{r7, pc}
 80165d2:	46c0      	nop			@ (mov r8, r8)
 80165d4:	200000c8 	.word	0x200000c8
 80165d8:	fffffbff 	.word	0xfffffbff
 80165dc:	fffffb7f 	.word	0xfffffb7f
 80165e0:	40010400 	.word	0x40010400

080165e4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80165ec:	2300      	movs	r3, #0
 80165ee:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2220      	movs	r2, #32
 80165f4:	5c9b      	ldrb	r3, [r3, r2]
 80165f6:	2b01      	cmp	r3, #1
 80165f8:	d101      	bne.n	80165fe <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80165fa:	2302      	movs	r3, #2
 80165fc:	e04e      	b.n	801669c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2220      	movs	r2, #32
 8016602:	2101      	movs	r1, #1
 8016604:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2221      	movs	r2, #33	@ 0x21
 801660a:	2102      	movs	r1, #2
 801660c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	22ca      	movs	r2, #202	@ 0xca
 8016614:	625a      	str	r2, [r3, #36]	@ 0x24
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	2253      	movs	r2, #83	@ 0x53
 801661c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	689a      	ldr	r2, [r3, #8]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	491e      	ldr	r1, [pc, #120]	@ (80166a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801662a:	400a      	ands	r2, r1
 801662c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	689a      	ldr	r2, [r3, #8]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	491b      	ldr	r1, [pc, #108]	@ (80166a8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801663a:	400a      	ands	r2, r1
 801663c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801663e:	f7f8 fb17 	bl	800ec70 <HAL_GetTick>
 8016642:	0003      	movs	r3, r0
 8016644:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016646:	e016      	b.n	8016676 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016648:	f7f8 fb12 	bl	800ec70 <HAL_GetTick>
 801664c:	0002      	movs	r2, r0
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	1ad2      	subs	r2, r2, r3
 8016652:	23fa      	movs	r3, #250	@ 0xfa
 8016654:	009b      	lsls	r3, r3, #2
 8016656:	429a      	cmp	r2, r3
 8016658:	d90d      	bls.n	8016676 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	22ff      	movs	r2, #255	@ 0xff
 8016660:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2221      	movs	r2, #33	@ 0x21
 8016666:	2103      	movs	r1, #3
 8016668:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	2220      	movs	r2, #32
 801666e:	2100      	movs	r1, #0
 8016670:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016672:	2303      	movs	r3, #3
 8016674:	e012      	b.n	801669c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	68db      	ldr	r3, [r3, #12]
 801667c:	2204      	movs	r2, #4
 801667e:	4013      	ands	r3, r2
 8016680:	d0e2      	beq.n	8016648 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	22ff      	movs	r2, #255	@ 0xff
 8016688:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2221      	movs	r2, #33	@ 0x21
 801668e:	2101      	movs	r1, #1
 8016690:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2220      	movs	r2, #32
 8016696:	2100      	movs	r1, #0
 8016698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801669a:	2300      	movs	r3, #0
}
 801669c:	0018      	movs	r0, r3
 801669e:	46bd      	mov	sp, r7
 80166a0:	b004      	add	sp, #16
 80166a2:	bd80      	pop	{r7, pc}
 80166a4:	fffffbff 	.word	0xfffffbff
 80166a8:	ffffbfff 	.word	0xffffbfff

080166ac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80166b4:	4b13      	ldr	r3, [pc, #76]	@ (8016704 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80166b6:	2280      	movs	r2, #128	@ 0x80
 80166b8:	0352      	lsls	r2, r2, #13
 80166ba:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	689a      	ldr	r2, [r3, #8]
 80166c2:	2380      	movs	r3, #128	@ 0x80
 80166c4:	01db      	lsls	r3, r3, #7
 80166c6:	4013      	ands	r3, r2
 80166c8:	d014      	beq.n	80166f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	68da      	ldr	r2, [r3, #12]
 80166d0:	2380      	movs	r3, #128	@ 0x80
 80166d2:	00db      	lsls	r3, r3, #3
 80166d4:	4013      	ands	r3, r2
 80166d6:	d00d      	beq.n	80166f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	68db      	ldr	r3, [r3, #12]
 80166de:	22ff      	movs	r2, #255	@ 0xff
 80166e0:	401a      	ands	r2, r3
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	4908      	ldr	r1, [pc, #32]	@ (8016708 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80166e8:	430a      	orrs	r2, r1
 80166ea:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	0018      	movs	r0, r3
 80166f0:	f000 f80c 	bl	801670c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2221      	movs	r2, #33	@ 0x21
 80166f8:	2101      	movs	r1, #1
 80166fa:	5499      	strb	r1, [r3, r2]
}
 80166fc:	46c0      	nop			@ (mov r8, r8)
 80166fe:	46bd      	mov	sp, r7
 8016700:	b002      	add	sp, #8
 8016702:	bd80      	pop	{r7, pc}
 8016704:	40010400 	.word	0x40010400
 8016708:	fffffb7f 	.word	0xfffffb7f

0801670c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016714:	46c0      	nop			@ (mov r8, r8)
 8016716:	46bd      	mov	sp, r7
 8016718:	b002      	add	sp, #8
 801671a:	bd80      	pop	{r7, pc}

0801671c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b086      	sub	sp, #24
 8016720:	af00      	add	r7, sp, #0
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016728:	2300      	movs	r3, #0
 801672a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	3350      	adds	r3, #80	@ 0x50
 8016732:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	009b      	lsls	r3, r3, #2
 8016738:	697a      	ldr	r2, [r7, #20]
 801673a:	18d3      	adds	r3, r2, r3
 801673c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801673e:	697b      	ldr	r3, [r7, #20]
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	601a      	str	r2, [r3, #0]
}
 8016744:	46c0      	nop			@ (mov r8, r8)
 8016746:	46bd      	mov	sp, r7
 8016748:	b006      	add	sp, #24
 801674a:	bd80      	pop	{r7, pc}

0801674c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b084      	sub	sp, #16
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
 8016754:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8016756:	2300      	movs	r3, #0
 8016758:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	3350      	adds	r3, #80	@ 0x50
 8016760:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	009b      	lsls	r3, r3, #2
 8016766:	68fa      	ldr	r2, [r7, #12]
 8016768:	18d3      	adds	r3, r2, r3
 801676a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	681b      	ldr	r3, [r3, #0]
}
 8016770:	0018      	movs	r0, r3
 8016772:	46bd      	mov	sp, r7
 8016774:	b004      	add	sp, #16
 8016776:	bd80      	pop	{r7, pc}

08016778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d101      	bne.n	801678a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016786:	2301      	movs	r3, #1
 8016788:	e032      	b.n	80167f0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2239      	movs	r2, #57	@ 0x39
 801678e:	5c9b      	ldrb	r3, [r3, r2]
 8016790:	b2db      	uxtb	r3, r3
 8016792:	2b00      	cmp	r3, #0
 8016794:	d107      	bne.n	80167a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2238      	movs	r2, #56	@ 0x38
 801679a:	2100      	movs	r1, #0
 801679c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	0018      	movs	r0, r3
 80167a2:	f7f7 fb77 	bl	800de94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2239      	movs	r2, #57	@ 0x39
 80167aa:	2102      	movs	r1, #2
 80167ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681a      	ldr	r2, [r3, #0]
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	3304      	adds	r3, #4
 80167b6:	0019      	movs	r1, r3
 80167b8:	0010      	movs	r0, r2
 80167ba:	f000 fa1d 	bl	8016bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	223e      	movs	r2, #62	@ 0x3e
 80167c2:	2101      	movs	r1, #1
 80167c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	223a      	movs	r2, #58	@ 0x3a
 80167ca:	2101      	movs	r1, #1
 80167cc:	5499      	strb	r1, [r3, r2]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	223b      	movs	r2, #59	@ 0x3b
 80167d2:	2101      	movs	r1, #1
 80167d4:	5499      	strb	r1, [r3, r2]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	223c      	movs	r2, #60	@ 0x3c
 80167da:	2101      	movs	r1, #1
 80167dc:	5499      	strb	r1, [r3, r2]
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	223d      	movs	r2, #61	@ 0x3d
 80167e2:	2101      	movs	r1, #1
 80167e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2239      	movs	r2, #57	@ 0x39
 80167ea:	2101      	movs	r1, #1
 80167ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80167ee:	2300      	movs	r3, #0
}
 80167f0:	0018      	movs	r0, r3
 80167f2:	46bd      	mov	sp, r7
 80167f4:	b002      	add	sp, #8
 80167f6:	bd80      	pop	{r7, pc}

080167f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b084      	sub	sp, #16
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2239      	movs	r2, #57	@ 0x39
 8016804:	5c9b      	ldrb	r3, [r3, r2]
 8016806:	b2db      	uxtb	r3, r3
 8016808:	2b01      	cmp	r3, #1
 801680a:	d001      	beq.n	8016810 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801680c:	2301      	movs	r3, #1
 801680e:	e033      	b.n	8016878 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2239      	movs	r2, #57	@ 0x39
 8016814:	2102      	movs	r1, #2
 8016816:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681a      	ldr	r2, [r3, #0]
 801681c:	2380      	movs	r3, #128	@ 0x80
 801681e:	05db      	lsls	r3, r3, #23
 8016820:	429a      	cmp	r2, r3
 8016822:	d00e      	beq.n	8016842 <HAL_TIM_Base_Start+0x4a>
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	4a15      	ldr	r2, [pc, #84]	@ (8016880 <HAL_TIM_Base_Start+0x88>)
 801682a:	4293      	cmp	r3, r2
 801682c:	d009      	beq.n	8016842 <HAL_TIM_Base_Start+0x4a>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	4a14      	ldr	r2, [pc, #80]	@ (8016884 <HAL_TIM_Base_Start+0x8c>)
 8016834:	4293      	cmp	r3, r2
 8016836:	d004      	beq.n	8016842 <HAL_TIM_Base_Start+0x4a>
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	4a12      	ldr	r2, [pc, #72]	@ (8016888 <HAL_TIM_Base_Start+0x90>)
 801683e:	4293      	cmp	r3, r2
 8016840:	d111      	bne.n	8016866 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	689b      	ldr	r3, [r3, #8]
 8016848:	2207      	movs	r2, #7
 801684a:	4013      	ands	r3, r2
 801684c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2b06      	cmp	r3, #6
 8016852:	d010      	beq.n	8016876 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	2101      	movs	r1, #1
 8016860:	430a      	orrs	r2, r1
 8016862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016864:	e007      	b.n	8016876 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2101      	movs	r1, #1
 8016872:	430a      	orrs	r2, r1
 8016874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016876:	2300      	movs	r3, #0
}
 8016878:	0018      	movs	r0, r3
 801687a:	46bd      	mov	sp, r7
 801687c:	b004      	add	sp, #16
 801687e:	bd80      	pop	{r7, pc}
 8016880:	40000400 	.word	0x40000400
 8016884:	40010800 	.word	0x40010800
 8016888:	40011400 	.word	0x40011400

0801688c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	6a1b      	ldr	r3, [r3, #32]
 801689a:	4a0a      	ldr	r2, [pc, #40]	@ (80168c4 <HAL_TIM_Base_Stop+0x38>)
 801689c:	4013      	ands	r3, r2
 801689e:	d107      	bne.n	80168b0 <HAL_TIM_Base_Stop+0x24>
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	2101      	movs	r1, #1
 80168ac:	438a      	bics	r2, r1
 80168ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2239      	movs	r2, #57	@ 0x39
 80168b4:	2101      	movs	r1, #1
 80168b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80168b8:	2300      	movs	r3, #0
}
 80168ba:	0018      	movs	r0, r3
 80168bc:	46bd      	mov	sp, r7
 80168be:	b002      	add	sp, #8
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	46c0      	nop			@ (mov r8, r8)
 80168c4:	00001111 	.word	0x00001111

080168c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d101      	bne.n	80168da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80168d6:	2301      	movs	r3, #1
 80168d8:	e032      	b.n	8016940 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2239      	movs	r2, #57	@ 0x39
 80168de:	5c9b      	ldrb	r3, [r3, r2]
 80168e0:	b2db      	uxtb	r3, r3
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d107      	bne.n	80168f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2238      	movs	r2, #56	@ 0x38
 80168ea:	2100      	movs	r1, #0
 80168ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	0018      	movs	r0, r3
 80168f2:	f7f7 faab 	bl	800de4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2239      	movs	r2, #57	@ 0x39
 80168fa:	2102      	movs	r1, #2
 80168fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681a      	ldr	r2, [r3, #0]
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	3304      	adds	r3, #4
 8016906:	0019      	movs	r1, r3
 8016908:	0010      	movs	r0, r2
 801690a:	f000 f975 	bl	8016bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	223e      	movs	r2, #62	@ 0x3e
 8016912:	2101      	movs	r1, #1
 8016914:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	223a      	movs	r2, #58	@ 0x3a
 801691a:	2101      	movs	r1, #1
 801691c:	5499      	strb	r1, [r3, r2]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	223b      	movs	r2, #59	@ 0x3b
 8016922:	2101      	movs	r1, #1
 8016924:	5499      	strb	r1, [r3, r2]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	223c      	movs	r2, #60	@ 0x3c
 801692a:	2101      	movs	r1, #1
 801692c:	5499      	strb	r1, [r3, r2]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	223d      	movs	r2, #61	@ 0x3d
 8016932:	2101      	movs	r1, #1
 8016934:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2239      	movs	r2, #57	@ 0x39
 801693a:	2101      	movs	r1, #1
 801693c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801693e:	2300      	movs	r3, #0
}
 8016940:	0018      	movs	r0, r3
 8016942:	46bd      	mov	sp, r7
 8016944:	b002      	add	sp, #8
 8016946:	bd80      	pop	{r7, pc}

08016948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d108      	bne.n	801696a <HAL_TIM_PWM_Start+0x22>
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	223a      	movs	r2, #58	@ 0x3a
 801695c:	5c9b      	ldrb	r3, [r3, r2]
 801695e:	b2db      	uxtb	r3, r3
 8016960:	3b01      	subs	r3, #1
 8016962:	1e5a      	subs	r2, r3, #1
 8016964:	4193      	sbcs	r3, r2
 8016966:	b2db      	uxtb	r3, r3
 8016968:	e01f      	b.n	80169aa <HAL_TIM_PWM_Start+0x62>
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	2b04      	cmp	r3, #4
 801696e:	d108      	bne.n	8016982 <HAL_TIM_PWM_Start+0x3a>
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	223b      	movs	r2, #59	@ 0x3b
 8016974:	5c9b      	ldrb	r3, [r3, r2]
 8016976:	b2db      	uxtb	r3, r3
 8016978:	3b01      	subs	r3, #1
 801697a:	1e5a      	subs	r2, r3, #1
 801697c:	4193      	sbcs	r3, r2
 801697e:	b2db      	uxtb	r3, r3
 8016980:	e013      	b.n	80169aa <HAL_TIM_PWM_Start+0x62>
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	2b08      	cmp	r3, #8
 8016986:	d108      	bne.n	801699a <HAL_TIM_PWM_Start+0x52>
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	223c      	movs	r2, #60	@ 0x3c
 801698c:	5c9b      	ldrb	r3, [r3, r2]
 801698e:	b2db      	uxtb	r3, r3
 8016990:	3b01      	subs	r3, #1
 8016992:	1e5a      	subs	r2, r3, #1
 8016994:	4193      	sbcs	r3, r2
 8016996:	b2db      	uxtb	r3, r3
 8016998:	e007      	b.n	80169aa <HAL_TIM_PWM_Start+0x62>
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	223d      	movs	r2, #61	@ 0x3d
 801699e:	5c9b      	ldrb	r3, [r3, r2]
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	3b01      	subs	r3, #1
 80169a4:	1e5a      	subs	r2, r3, #1
 80169a6:	4193      	sbcs	r3, r2
 80169a8:	b2db      	uxtb	r3, r3
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d001      	beq.n	80169b2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80169ae:	2301      	movs	r3, #1
 80169b0:	e052      	b.n	8016a58 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d104      	bne.n	80169c2 <HAL_TIM_PWM_Start+0x7a>
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	223a      	movs	r2, #58	@ 0x3a
 80169bc:	2102      	movs	r1, #2
 80169be:	5499      	strb	r1, [r3, r2]
 80169c0:	e013      	b.n	80169ea <HAL_TIM_PWM_Start+0xa2>
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	2b04      	cmp	r3, #4
 80169c6:	d104      	bne.n	80169d2 <HAL_TIM_PWM_Start+0x8a>
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	223b      	movs	r2, #59	@ 0x3b
 80169cc:	2102      	movs	r1, #2
 80169ce:	5499      	strb	r1, [r3, r2]
 80169d0:	e00b      	b.n	80169ea <HAL_TIM_PWM_Start+0xa2>
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	2b08      	cmp	r3, #8
 80169d6:	d104      	bne.n	80169e2 <HAL_TIM_PWM_Start+0x9a>
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	223c      	movs	r2, #60	@ 0x3c
 80169dc:	2102      	movs	r1, #2
 80169de:	5499      	strb	r1, [r3, r2]
 80169e0:	e003      	b.n	80169ea <HAL_TIM_PWM_Start+0xa2>
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	223d      	movs	r2, #61	@ 0x3d
 80169e6:	2102      	movs	r1, #2
 80169e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	6839      	ldr	r1, [r7, #0]
 80169f0:	2201      	movs	r2, #1
 80169f2:	0018      	movs	r0, r3
 80169f4:	f000 fa62 	bl	8016ebc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	2380      	movs	r3, #128	@ 0x80
 80169fe:	05db      	lsls	r3, r3, #23
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d00e      	beq.n	8016a22 <HAL_TIM_PWM_Start+0xda>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	4a15      	ldr	r2, [pc, #84]	@ (8016a60 <HAL_TIM_PWM_Start+0x118>)
 8016a0a:	4293      	cmp	r3, r2
 8016a0c:	d009      	beq.n	8016a22 <HAL_TIM_PWM_Start+0xda>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4a14      	ldr	r2, [pc, #80]	@ (8016a64 <HAL_TIM_PWM_Start+0x11c>)
 8016a14:	4293      	cmp	r3, r2
 8016a16:	d004      	beq.n	8016a22 <HAL_TIM_PWM_Start+0xda>
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	4a12      	ldr	r2, [pc, #72]	@ (8016a68 <HAL_TIM_PWM_Start+0x120>)
 8016a1e:	4293      	cmp	r3, r2
 8016a20:	d111      	bne.n	8016a46 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	689b      	ldr	r3, [r3, #8]
 8016a28:	2207      	movs	r2, #7
 8016a2a:	4013      	ands	r3, r2
 8016a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	2b06      	cmp	r3, #6
 8016a32:	d010      	beq.n	8016a56 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	681a      	ldr	r2, [r3, #0]
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2101      	movs	r1, #1
 8016a40:	430a      	orrs	r2, r1
 8016a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a44:	e007      	b.n	8016a56 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	2101      	movs	r1, #1
 8016a52:	430a      	orrs	r2, r1
 8016a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016a56:	2300      	movs	r3, #0
}
 8016a58:	0018      	movs	r0, r3
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	b004      	add	sp, #16
 8016a5e:	bd80      	pop	{r7, pc}
 8016a60:	40000400 	.word	0x40000400
 8016a64:	40010800 	.word	0x40010800
 8016a68:	40011400 	.word	0x40011400

08016a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b086      	sub	sp, #24
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	60f8      	str	r0, [r7, #12]
 8016a74:	60b9      	str	r1, [r7, #8]
 8016a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016a78:	2317      	movs	r3, #23
 8016a7a:	18fb      	adds	r3, r7, r3
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	2238      	movs	r2, #56	@ 0x38
 8016a84:	5c9b      	ldrb	r3, [r3, r2]
 8016a86:	2b01      	cmp	r3, #1
 8016a88:	d101      	bne.n	8016a8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8016a8a:	2302      	movs	r3, #2
 8016a8c:	e0ad      	b.n	8016bea <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	2238      	movs	r2, #56	@ 0x38
 8016a92:	2101      	movs	r1, #1
 8016a94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	2b0c      	cmp	r3, #12
 8016a9a:	d100      	bne.n	8016a9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8016a9c:	e076      	b.n	8016b8c <HAL_TIM_PWM_ConfigChannel+0x120>
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2b0c      	cmp	r3, #12
 8016aa2:	d900      	bls.n	8016aa6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016aa4:	e095      	b.n	8016bd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2b08      	cmp	r3, #8
 8016aaa:	d04e      	beq.n	8016b4a <HAL_TIM_PWM_ConfigChannel+0xde>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2b08      	cmp	r3, #8
 8016ab0:	d900      	bls.n	8016ab4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016ab2:	e08e      	b.n	8016bd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d003      	beq.n	8016ac2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2b04      	cmp	r3, #4
 8016abe:	d021      	beq.n	8016b04 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016ac0:	e087      	b.n	8016bd2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	68ba      	ldr	r2, [r7, #8]
 8016ac8:	0011      	movs	r1, r2
 8016aca:	0018      	movs	r0, r3
 8016acc:	f000 f8f2 	bl	8016cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	699a      	ldr	r2, [r3, #24]
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	2108      	movs	r1, #8
 8016adc:	430a      	orrs	r2, r1
 8016ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	699a      	ldr	r2, [r3, #24]
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	2104      	movs	r1, #4
 8016aec:	438a      	bics	r2, r1
 8016aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	6999      	ldr	r1, [r3, #24]
 8016af6:	68bb      	ldr	r3, [r7, #8]
 8016af8:	68da      	ldr	r2, [r3, #12]
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	430a      	orrs	r2, r1
 8016b00:	619a      	str	r2, [r3, #24]
      break;
 8016b02:	e06b      	b.n	8016bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	68ba      	ldr	r2, [r7, #8]
 8016b0a:	0011      	movs	r1, r2
 8016b0c:	0018      	movs	r0, r3
 8016b0e:	f000 f90d 	bl	8016d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	699a      	ldr	r2, [r3, #24]
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2180      	movs	r1, #128	@ 0x80
 8016b1e:	0109      	lsls	r1, r1, #4
 8016b20:	430a      	orrs	r2, r1
 8016b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	699a      	ldr	r2, [r3, #24]
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	4931      	ldr	r1, [pc, #196]	@ (8016bf4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016b30:	400a      	ands	r2, r1
 8016b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	6999      	ldr	r1, [r3, #24]
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	68db      	ldr	r3, [r3, #12]
 8016b3e:	021a      	lsls	r2, r3, #8
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	430a      	orrs	r2, r1
 8016b46:	619a      	str	r2, [r3, #24]
      break;
 8016b48:	e048      	b.n	8016bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	68ba      	ldr	r2, [r7, #8]
 8016b50:	0011      	movs	r1, r2
 8016b52:	0018      	movs	r0, r3
 8016b54:	f000 f92c 	bl	8016db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	69da      	ldr	r2, [r3, #28]
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	2108      	movs	r1, #8
 8016b64:	430a      	orrs	r2, r1
 8016b66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	69da      	ldr	r2, [r3, #28]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2104      	movs	r1, #4
 8016b74:	438a      	bics	r2, r1
 8016b76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	69d9      	ldr	r1, [r3, #28]
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	68da      	ldr	r2, [r3, #12]
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	430a      	orrs	r2, r1
 8016b88:	61da      	str	r2, [r3, #28]
      break;
 8016b8a:	e027      	b.n	8016bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	68ba      	ldr	r2, [r7, #8]
 8016b92:	0011      	movs	r1, r2
 8016b94:	0018      	movs	r0, r3
 8016b96:	f000 f94b 	bl	8016e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	69da      	ldr	r2, [r3, #28]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	2180      	movs	r1, #128	@ 0x80
 8016ba6:	0109      	lsls	r1, r1, #4
 8016ba8:	430a      	orrs	r2, r1
 8016baa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	69da      	ldr	r2, [r3, #28]
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	490f      	ldr	r1, [pc, #60]	@ (8016bf4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016bb8:	400a      	ands	r2, r1
 8016bba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	69d9      	ldr	r1, [r3, #28]
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	68db      	ldr	r3, [r3, #12]
 8016bc6:	021a      	lsls	r2, r3, #8
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	430a      	orrs	r2, r1
 8016bce:	61da      	str	r2, [r3, #28]
      break;
 8016bd0:	e004      	b.n	8016bdc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016bd2:	2317      	movs	r3, #23
 8016bd4:	18fb      	adds	r3, r7, r3
 8016bd6:	2201      	movs	r2, #1
 8016bd8:	701a      	strb	r2, [r3, #0]
      break;
 8016bda:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	2238      	movs	r2, #56	@ 0x38
 8016be0:	2100      	movs	r1, #0
 8016be2:	5499      	strb	r1, [r3, r2]

  return status;
 8016be4:	2317      	movs	r3, #23
 8016be6:	18fb      	adds	r3, r7, r3
 8016be8:	781b      	ldrb	r3, [r3, #0]
}
 8016bea:	0018      	movs	r0, r3
 8016bec:	46bd      	mov	sp, r7
 8016bee:	b006      	add	sp, #24
 8016bf0:	bd80      	pop	{r7, pc}
 8016bf2:	46c0      	nop			@ (mov r8, r8)
 8016bf4:	fffffbff 	.word	0xfffffbff

08016bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b084      	sub	sp, #16
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016c08:	687a      	ldr	r2, [r7, #4]
 8016c0a:	2380      	movs	r3, #128	@ 0x80
 8016c0c:	05db      	lsls	r3, r3, #23
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d00b      	beq.n	8016c2a <TIM_Base_SetConfig+0x32>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	4a23      	ldr	r2, [pc, #140]	@ (8016ca4 <TIM_Base_SetConfig+0xac>)
 8016c16:	4293      	cmp	r3, r2
 8016c18:	d007      	beq.n	8016c2a <TIM_Base_SetConfig+0x32>
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	4a22      	ldr	r2, [pc, #136]	@ (8016ca8 <TIM_Base_SetConfig+0xb0>)
 8016c1e:	4293      	cmp	r3, r2
 8016c20:	d003      	beq.n	8016c2a <TIM_Base_SetConfig+0x32>
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	4a21      	ldr	r2, [pc, #132]	@ (8016cac <TIM_Base_SetConfig+0xb4>)
 8016c26:	4293      	cmp	r3, r2
 8016c28:	d108      	bne.n	8016c3c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2270      	movs	r2, #112	@ 0x70
 8016c2e:	4393      	bics	r3, r2
 8016c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	685b      	ldr	r3, [r3, #4]
 8016c36:	68fa      	ldr	r2, [r7, #12]
 8016c38:	4313      	orrs	r3, r2
 8016c3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016c3c:	687a      	ldr	r2, [r7, #4]
 8016c3e:	2380      	movs	r3, #128	@ 0x80
 8016c40:	05db      	lsls	r3, r3, #23
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d00b      	beq.n	8016c5e <TIM_Base_SetConfig+0x66>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	4a16      	ldr	r2, [pc, #88]	@ (8016ca4 <TIM_Base_SetConfig+0xac>)
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d007      	beq.n	8016c5e <TIM_Base_SetConfig+0x66>
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	4a15      	ldr	r2, [pc, #84]	@ (8016ca8 <TIM_Base_SetConfig+0xb0>)
 8016c52:	4293      	cmp	r3, r2
 8016c54:	d003      	beq.n	8016c5e <TIM_Base_SetConfig+0x66>
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	4a14      	ldr	r2, [pc, #80]	@ (8016cac <TIM_Base_SetConfig+0xb4>)
 8016c5a:	4293      	cmp	r3, r2
 8016c5c:	d108      	bne.n	8016c70 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	4a13      	ldr	r2, [pc, #76]	@ (8016cb0 <TIM_Base_SetConfig+0xb8>)
 8016c62:	4013      	ands	r3, r2
 8016c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	68db      	ldr	r3, [r3, #12]
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	2280      	movs	r2, #128	@ 0x80
 8016c74:	4393      	bics	r3, r2
 8016c76:	001a      	movs	r2, r3
 8016c78:	683b      	ldr	r3, [r7, #0]
 8016c7a:	691b      	ldr	r3, [r3, #16]
 8016c7c:	4313      	orrs	r3, r2
 8016c7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	68fa      	ldr	r2, [r7, #12]
 8016c84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	689a      	ldr	r2, [r3, #8]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	681a      	ldr	r2, [r3, #0]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2201      	movs	r2, #1
 8016c9a:	615a      	str	r2, [r3, #20]
}
 8016c9c:	46c0      	nop			@ (mov r8, r8)
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	b004      	add	sp, #16
 8016ca2:	bd80      	pop	{r7, pc}
 8016ca4:	40000400 	.word	0x40000400
 8016ca8:	40010800 	.word	0x40010800
 8016cac:	40011400 	.word	0x40011400
 8016cb0:	fffffcff 	.word	0xfffffcff

08016cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b086      	sub	sp, #24
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
 8016cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6a1b      	ldr	r3, [r3, #32]
 8016cc2:	2201      	movs	r2, #1
 8016cc4:	4393      	bics	r3, r2
 8016cc6:	001a      	movs	r2, r3
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6a1b      	ldr	r3, [r3, #32]
 8016cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	685b      	ldr	r3, [r3, #4]
 8016cd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	699b      	ldr	r3, [r3, #24]
 8016cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	2270      	movs	r2, #112	@ 0x70
 8016ce2:	4393      	bics	r3, r2
 8016ce4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2203      	movs	r2, #3
 8016cea:	4393      	bics	r3, r2
 8016cec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016cee:	683b      	ldr	r3, [r7, #0]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	68fa      	ldr	r2, [r7, #12]
 8016cf4:	4313      	orrs	r3, r2
 8016cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	2202      	movs	r2, #2
 8016cfc:	4393      	bics	r3, r2
 8016cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	689b      	ldr	r3, [r3, #8]
 8016d04:	697a      	ldr	r2, [r7, #20]
 8016d06:	4313      	orrs	r3, r2
 8016d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	693a      	ldr	r2, [r7, #16]
 8016d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	68fa      	ldr	r2, [r7, #12]
 8016d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	685a      	ldr	r2, [r3, #4]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	697a      	ldr	r2, [r7, #20]
 8016d22:	621a      	str	r2, [r3, #32]
}
 8016d24:	46c0      	nop			@ (mov r8, r8)
 8016d26:	46bd      	mov	sp, r7
 8016d28:	b006      	add	sp, #24
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b086      	sub	sp, #24
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6a1b      	ldr	r3, [r3, #32]
 8016d3a:	2210      	movs	r2, #16
 8016d3c:	4393      	bics	r3, r2
 8016d3e:	001a      	movs	r2, r3
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6a1b      	ldr	r3, [r3, #32]
 8016d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	699b      	ldr	r3, [r3, #24]
 8016d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	4a13      	ldr	r2, [pc, #76]	@ (8016da8 <TIM_OC2_SetConfig+0x7c>)
 8016d5a:	4013      	ands	r3, r2
 8016d5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	4a12      	ldr	r2, [pc, #72]	@ (8016dac <TIM_OC2_SetConfig+0x80>)
 8016d62:	4013      	ands	r3, r2
 8016d64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016d66:	683b      	ldr	r3, [r7, #0]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	021b      	lsls	r3, r3, #8
 8016d6c:	68fa      	ldr	r2, [r7, #12]
 8016d6e:	4313      	orrs	r3, r2
 8016d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	2220      	movs	r2, #32
 8016d76:	4393      	bics	r3, r2
 8016d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	689b      	ldr	r3, [r3, #8]
 8016d7e:	011b      	lsls	r3, r3, #4
 8016d80:	697a      	ldr	r2, [r7, #20]
 8016d82:	4313      	orrs	r3, r2
 8016d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	693a      	ldr	r2, [r7, #16]
 8016d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	68fa      	ldr	r2, [r7, #12]
 8016d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	685a      	ldr	r2, [r3, #4]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	697a      	ldr	r2, [r7, #20]
 8016d9e:	621a      	str	r2, [r3, #32]
}
 8016da0:	46c0      	nop			@ (mov r8, r8)
 8016da2:	46bd      	mov	sp, r7
 8016da4:	b006      	add	sp, #24
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	ffff8fff 	.word	0xffff8fff
 8016dac:	fffffcff 	.word	0xfffffcff

08016db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b086      	sub	sp, #24
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	6a1b      	ldr	r3, [r3, #32]
 8016dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8016e28 <TIM_OC3_SetConfig+0x78>)
 8016dc0:	401a      	ands	r2, r3
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	6a1b      	ldr	r3, [r3, #32]
 8016dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	685b      	ldr	r3, [r3, #4]
 8016dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	69db      	ldr	r3, [r3, #28]
 8016dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2270      	movs	r2, #112	@ 0x70
 8016ddc:	4393      	bics	r3, r2
 8016dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	2203      	movs	r2, #3
 8016de4:	4393      	bics	r3, r2
 8016de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	68fa      	ldr	r2, [r7, #12]
 8016dee:	4313      	orrs	r3, r2
 8016df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	4a0d      	ldr	r2, [pc, #52]	@ (8016e2c <TIM_OC3_SetConfig+0x7c>)
 8016df6:	4013      	ands	r3, r2
 8016df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	689b      	ldr	r3, [r3, #8]
 8016dfe:	021b      	lsls	r3, r3, #8
 8016e00:	697a      	ldr	r2, [r7, #20]
 8016e02:	4313      	orrs	r3, r2
 8016e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	693a      	ldr	r2, [r7, #16]
 8016e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	68fa      	ldr	r2, [r7, #12]
 8016e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	685a      	ldr	r2, [r3, #4]
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	697a      	ldr	r2, [r7, #20]
 8016e1e:	621a      	str	r2, [r3, #32]
}
 8016e20:	46c0      	nop			@ (mov r8, r8)
 8016e22:	46bd      	mov	sp, r7
 8016e24:	b006      	add	sp, #24
 8016e26:	bd80      	pop	{r7, pc}
 8016e28:	fffffeff 	.word	0xfffffeff
 8016e2c:	fffffdff 	.word	0xfffffdff

08016e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b086      	sub	sp, #24
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6a1b      	ldr	r3, [r3, #32]
 8016e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8016eac <TIM_OC4_SetConfig+0x7c>)
 8016e40:	401a      	ands	r2, r3
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	6a1b      	ldr	r3, [r3, #32]
 8016e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	69db      	ldr	r3, [r3, #28]
 8016e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	4a15      	ldr	r2, [pc, #84]	@ (8016eb0 <TIM_OC4_SetConfig+0x80>)
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	4a14      	ldr	r2, [pc, #80]	@ (8016eb4 <TIM_OC4_SetConfig+0x84>)
 8016e64:	4013      	ands	r3, r2
 8016e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	021b      	lsls	r3, r3, #8
 8016e6e:	68fa      	ldr	r2, [r7, #12]
 8016e70:	4313      	orrs	r3, r2
 8016e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016e74:	697b      	ldr	r3, [r7, #20]
 8016e76:	4a10      	ldr	r2, [pc, #64]	@ (8016eb8 <TIM_OC4_SetConfig+0x88>)
 8016e78:	4013      	ands	r3, r2
 8016e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	689b      	ldr	r3, [r3, #8]
 8016e80:	031b      	lsls	r3, r3, #12
 8016e82:	697a      	ldr	r2, [r7, #20]
 8016e84:	4313      	orrs	r3, r2
 8016e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	693a      	ldr	r2, [r7, #16]
 8016e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	68fa      	ldr	r2, [r7, #12]
 8016e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	685a      	ldr	r2, [r3, #4]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	697a      	ldr	r2, [r7, #20]
 8016ea0:	621a      	str	r2, [r3, #32]
}
 8016ea2:	46c0      	nop			@ (mov r8, r8)
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	b006      	add	sp, #24
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	46c0      	nop			@ (mov r8, r8)
 8016eac:	ffffefff 	.word	0xffffefff
 8016eb0:	ffff8fff 	.word	0xffff8fff
 8016eb4:	fffffcff 	.word	0xfffffcff
 8016eb8:	ffffdfff 	.word	0xffffdfff

08016ebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b086      	sub	sp, #24
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	221f      	movs	r2, #31
 8016ecc:	4013      	ands	r3, r2
 8016ece:	2201      	movs	r2, #1
 8016ed0:	409a      	lsls	r2, r3
 8016ed2:	0013      	movs	r3, r2
 8016ed4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	6a1b      	ldr	r3, [r3, #32]
 8016eda:	697a      	ldr	r2, [r7, #20]
 8016edc:	43d2      	mvns	r2, r2
 8016ede:	401a      	ands	r2, r3
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	6a1a      	ldr	r2, [r3, #32]
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	211f      	movs	r1, #31
 8016eec:	400b      	ands	r3, r1
 8016eee:	6879      	ldr	r1, [r7, #4]
 8016ef0:	4099      	lsls	r1, r3
 8016ef2:	000b      	movs	r3, r1
 8016ef4:	431a      	orrs	r2, r3
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	621a      	str	r2, [r3, #32]
}
 8016efa:	46c0      	nop			@ (mov r8, r8)
 8016efc:	46bd      	mov	sp, r7
 8016efe:	b006      	add	sp, #24
 8016f00:	bd80      	pop	{r7, pc}
	...

08016f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b084      	sub	sp, #16
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
 8016f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	2238      	movs	r2, #56	@ 0x38
 8016f12:	5c9b      	ldrb	r3, [r3, r2]
 8016f14:	2b01      	cmp	r3, #1
 8016f16:	d101      	bne.n	8016f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016f18:	2302      	movs	r3, #2
 8016f1a:	e047      	b.n	8016fac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2238      	movs	r2, #56	@ 0x38
 8016f20:	2101      	movs	r1, #1
 8016f22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2239      	movs	r2, #57	@ 0x39
 8016f28:	2102      	movs	r1, #2
 8016f2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	689b      	ldr	r3, [r3, #8]
 8016f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	2270      	movs	r2, #112	@ 0x70
 8016f40:	4393      	bics	r3, r2
 8016f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	68fa      	ldr	r2, [r7, #12]
 8016f4a:	4313      	orrs	r3, r2
 8016f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	68fa      	ldr	r2, [r7, #12]
 8016f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681a      	ldr	r2, [r3, #0]
 8016f5a:	2380      	movs	r3, #128	@ 0x80
 8016f5c:	05db      	lsls	r3, r3, #23
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d00e      	beq.n	8016f80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	4a13      	ldr	r2, [pc, #76]	@ (8016fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016f68:	4293      	cmp	r3, r2
 8016f6a:	d009      	beq.n	8016f80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	4a11      	ldr	r2, [pc, #68]	@ (8016fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8016f72:	4293      	cmp	r3, r2
 8016f74:	d004      	beq.n	8016f80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	4a10      	ldr	r2, [pc, #64]	@ (8016fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8016f7c:	4293      	cmp	r3, r2
 8016f7e:	d10c      	bne.n	8016f9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016f80:	68bb      	ldr	r3, [r7, #8]
 8016f82:	2280      	movs	r2, #128	@ 0x80
 8016f84:	4393      	bics	r3, r2
 8016f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	68ba      	ldr	r2, [r7, #8]
 8016f8e:	4313      	orrs	r3, r2
 8016f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	68ba      	ldr	r2, [r7, #8]
 8016f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2239      	movs	r2, #57	@ 0x39
 8016f9e:	2101      	movs	r1, #1
 8016fa0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2238      	movs	r2, #56	@ 0x38
 8016fa6:	2100      	movs	r1, #0
 8016fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016faa:	2300      	movs	r3, #0
}
 8016fac:	0018      	movs	r0, r3
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	b004      	add	sp, #16
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	40000400 	.word	0x40000400
 8016fb8:	40010800 	.word	0x40010800
 8016fbc:	40011400 	.word	0x40011400

08016fc0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	2238      	movs	r2, #56	@ 0x38
 8016fce:	5c9b      	ldrb	r3, [r3, r2]
 8016fd0:	2b01      	cmp	r3, #1
 8016fd2:	d101      	bne.n	8016fd8 <HAL_TIMEx_RemapConfig+0x18>
 8016fd4:	2302      	movs	r3, #2
 8016fd6:	e00c      	b.n	8016ff2 <HAL_TIMEx_RemapConfig+0x32>
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2238      	movs	r2, #56	@ 0x38
 8016fdc:	2101      	movs	r1, #1
 8016fde:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	683a      	ldr	r2, [r7, #0]
 8016fe6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2238      	movs	r2, #56	@ 0x38
 8016fec:	2100      	movs	r1, #0
 8016fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016ff0:	2300      	movs	r3, #0
}
 8016ff2:	0018      	movs	r0, r3
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	b002      	add	sp, #8
 8016ff8:	bd80      	pop	{r7, pc}
	...

08016ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d101      	bne.n	801700e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801700a:	2301      	movs	r3, #1
 801700c:	e053      	b.n	80170b6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017012:	2b00      	cmp	r3, #0
 8017014:	d116      	bne.n	8017044 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	2278      	movs	r2, #120	@ 0x78
 801701a:	2100      	movs	r1, #0
 801701c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	0018      	movs	r0, r3
 8017022:	f000 fd65 	bl	8017af0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	22b0      	movs	r2, #176	@ 0xb0
 801702a:	589b      	ldr	r3, [r3, r2]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d103      	bne.n	8017038 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	21b0      	movs	r1, #176	@ 0xb0
 8017034:	4a22      	ldr	r2, [pc, #136]	@ (80170c0 <HAL_UART_Init+0xc4>)
 8017036:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	22b0      	movs	r2, #176	@ 0xb0
 801703c:	589b      	ldr	r3, [r3, r2]
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	0010      	movs	r0, r2
 8017042:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2224      	movs	r2, #36	@ 0x24
 8017048:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	681a      	ldr	r2, [r3, #0]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2101      	movs	r1, #1
 8017056:	438a      	bics	r2, r1
 8017058:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	0018      	movs	r0, r3
 801705e:	f000 fd8b 	bl	8017b78 <UART_SetConfig>
 8017062:	0003      	movs	r3, r0
 8017064:	2b01      	cmp	r3, #1
 8017066:	d101      	bne.n	801706c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8017068:	2301      	movs	r3, #1
 801706a:	e024      	b.n	80170b6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017070:	2b00      	cmp	r3, #0
 8017072:	d003      	beq.n	801707c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	0018      	movs	r0, r3
 8017078:	f001 f81c 	bl	80180b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	685a      	ldr	r2, [r3, #4]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	490f      	ldr	r1, [pc, #60]	@ (80170c4 <HAL_UART_Init+0xc8>)
 8017088:	400a      	ands	r2, r1
 801708a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	689a      	ldr	r2, [r3, #8]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	212a      	movs	r1, #42	@ 0x2a
 8017098:	438a      	bics	r2, r1
 801709a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	2101      	movs	r1, #1
 80170a8:	430a      	orrs	r2, r1
 80170aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	0018      	movs	r0, r3
 80170b0:	f001 f8b4 	bl	801821c <UART_CheckIdleState>
 80170b4:	0003      	movs	r3, r0
}
 80170b6:	0018      	movs	r0, r3
 80170b8:	46bd      	mov	sp, r7
 80170ba:	b002      	add	sp, #8
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	46c0      	nop			@ (mov r8, r8)
 80170c0:	0800e0c9 	.word	0x0800e0c9
 80170c4:	ffffb7ff 	.word	0xffffb7ff

080170c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b08a      	sub	sp, #40	@ 0x28
 80170cc:	af02      	add	r7, sp, #8
 80170ce:	60f8      	str	r0, [r7, #12]
 80170d0:	60b9      	str	r1, [r7, #8]
 80170d2:	603b      	str	r3, [r7, #0]
 80170d4:	1dbb      	adds	r3, r7, #6
 80170d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170dc:	2b20      	cmp	r3, #32
 80170de:	d000      	beq.n	80170e2 <HAL_UART_Transmit+0x1a>
 80170e0:	e08c      	b.n	80171fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d003      	beq.n	80170f0 <HAL_UART_Transmit+0x28>
 80170e8:	1dbb      	adds	r3, r7, #6
 80170ea:	881b      	ldrh	r3, [r3, #0]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d101      	bne.n	80170f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80170f0:	2301      	movs	r3, #1
 80170f2:	e084      	b.n	80171fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	689a      	ldr	r2, [r3, #8]
 80170f8:	2380      	movs	r3, #128	@ 0x80
 80170fa:	015b      	lsls	r3, r3, #5
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d109      	bne.n	8017114 <HAL_UART_Transmit+0x4c>
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	691b      	ldr	r3, [r3, #16]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d105      	bne.n	8017114 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	2201      	movs	r2, #1
 801710c:	4013      	ands	r3, r2
 801710e:	d001      	beq.n	8017114 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017110:	2301      	movs	r3, #1
 8017112:	e074      	b.n	80171fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2284      	movs	r2, #132	@ 0x84
 8017118:	2100      	movs	r1, #0
 801711a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	2221      	movs	r2, #33	@ 0x21
 8017120:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017122:	f7f7 fda5 	bl	800ec70 <HAL_GetTick>
 8017126:	0003      	movs	r3, r0
 8017128:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	1dba      	adds	r2, r7, #6
 801712e:	2150      	movs	r1, #80	@ 0x50
 8017130:	8812      	ldrh	r2, [r2, #0]
 8017132:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	1dba      	adds	r2, r7, #6
 8017138:	2152      	movs	r1, #82	@ 0x52
 801713a:	8812      	ldrh	r2, [r2, #0]
 801713c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	689a      	ldr	r2, [r3, #8]
 8017142:	2380      	movs	r3, #128	@ 0x80
 8017144:	015b      	lsls	r3, r3, #5
 8017146:	429a      	cmp	r2, r3
 8017148:	d108      	bne.n	801715c <HAL_UART_Transmit+0x94>
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	691b      	ldr	r3, [r3, #16]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d104      	bne.n	801715c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017152:	2300      	movs	r3, #0
 8017154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	61bb      	str	r3, [r7, #24]
 801715a:	e003      	b.n	8017164 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017160:	2300      	movs	r3, #0
 8017162:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017164:	e02f      	b.n	80171c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017166:	697a      	ldr	r2, [r7, #20]
 8017168:	68f8      	ldr	r0, [r7, #12]
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	9300      	str	r3, [sp, #0]
 801716e:	0013      	movs	r3, r2
 8017170:	2200      	movs	r2, #0
 8017172:	2180      	movs	r1, #128	@ 0x80
 8017174:	f001 f8fa 	bl	801836c <UART_WaitOnFlagUntilTimeout>
 8017178:	1e03      	subs	r3, r0, #0
 801717a:	d004      	beq.n	8017186 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2220      	movs	r2, #32
 8017180:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8017182:	2303      	movs	r3, #3
 8017184:	e03b      	b.n	80171fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8017186:	69fb      	ldr	r3, [r7, #28]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d10b      	bne.n	80171a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801718c:	69bb      	ldr	r3, [r7, #24]
 801718e:	881b      	ldrh	r3, [r3, #0]
 8017190:	001a      	movs	r2, r3
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	05d2      	lsls	r2, r2, #23
 8017198:	0dd2      	lsrs	r2, r2, #23
 801719a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801719c:	69bb      	ldr	r3, [r7, #24]
 801719e:	3302      	adds	r3, #2
 80171a0:	61bb      	str	r3, [r7, #24]
 80171a2:	e007      	b.n	80171b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80171a4:	69fb      	ldr	r3, [r7, #28]
 80171a6:	781a      	ldrb	r2, [r3, #0]
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80171ae:	69fb      	ldr	r3, [r7, #28]
 80171b0:	3301      	adds	r3, #1
 80171b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	2252      	movs	r2, #82	@ 0x52
 80171b8:	5a9b      	ldrh	r3, [r3, r2]
 80171ba:	b29b      	uxth	r3, r3
 80171bc:	3b01      	subs	r3, #1
 80171be:	b299      	uxth	r1, r3
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	2252      	movs	r2, #82	@ 0x52
 80171c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	2252      	movs	r2, #82	@ 0x52
 80171ca:	5a9b      	ldrh	r3, [r3, r2]
 80171cc:	b29b      	uxth	r3, r3
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d1c9      	bne.n	8017166 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80171d2:	697a      	ldr	r2, [r7, #20]
 80171d4:	68f8      	ldr	r0, [r7, #12]
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	9300      	str	r3, [sp, #0]
 80171da:	0013      	movs	r3, r2
 80171dc:	2200      	movs	r2, #0
 80171de:	2140      	movs	r1, #64	@ 0x40
 80171e0:	f001 f8c4 	bl	801836c <UART_WaitOnFlagUntilTimeout>
 80171e4:	1e03      	subs	r3, r0, #0
 80171e6:	d004      	beq.n	80171f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2220      	movs	r2, #32
 80171ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80171ee:	2303      	movs	r3, #3
 80171f0:	e005      	b.n	80171fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	2220      	movs	r2, #32
 80171f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80171f8:	2300      	movs	r3, #0
 80171fa:	e000      	b.n	80171fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80171fc:	2302      	movs	r3, #2
  }
}
 80171fe:	0018      	movs	r0, r3
 8017200:	46bd      	mov	sp, r7
 8017202:	b008      	add	sp, #32
 8017204:	bd80      	pop	{r7, pc}
	...

08017208 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b088      	sub	sp, #32
 801720c:	af00      	add	r7, sp, #0
 801720e:	60f8      	str	r0, [r7, #12]
 8017210:	60b9      	str	r1, [r7, #8]
 8017212:	1dbb      	adds	r3, r7, #6
 8017214:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	2280      	movs	r2, #128	@ 0x80
 801721a:	589b      	ldr	r3, [r3, r2]
 801721c:	2b20      	cmp	r3, #32
 801721e:	d14a      	bne.n	80172b6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d003      	beq.n	801722e <HAL_UART_Receive_IT+0x26>
 8017226:	1dbb      	adds	r3, r7, #6
 8017228:	881b      	ldrh	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d101      	bne.n	8017232 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801722e:	2301      	movs	r3, #1
 8017230:	e042      	b.n	80172b8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	689a      	ldr	r2, [r3, #8]
 8017236:	2380      	movs	r3, #128	@ 0x80
 8017238:	015b      	lsls	r3, r3, #5
 801723a:	429a      	cmp	r2, r3
 801723c:	d109      	bne.n	8017252 <HAL_UART_Receive_IT+0x4a>
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	691b      	ldr	r3, [r3, #16]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d105      	bne.n	8017252 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	2201      	movs	r2, #1
 801724a:	4013      	ands	r3, r2
 801724c:	d001      	beq.n	8017252 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801724e:	2301      	movs	r3, #1
 8017250:	e032      	b.n	80172b8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2200      	movs	r2, #0
 8017256:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	4a18      	ldr	r2, [pc, #96]	@ (80172c0 <HAL_UART_Receive_IT+0xb8>)
 801725e:	4293      	cmp	r3, r2
 8017260:	d020      	beq.n	80172a4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	685a      	ldr	r2, [r3, #4]
 8017268:	2380      	movs	r3, #128	@ 0x80
 801726a:	041b      	lsls	r3, r3, #16
 801726c:	4013      	ands	r3, r2
 801726e:	d019      	beq.n	80172a4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017270:	f3ef 8310 	mrs	r3, PRIMASK
 8017274:	613b      	str	r3, [r7, #16]
  return(result);
 8017276:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017278:	61fb      	str	r3, [r7, #28]
 801727a:	2301      	movs	r3, #1
 801727c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	f383 8810 	msr	PRIMASK, r3
}
 8017284:	46c0      	nop			@ (mov r8, r8)
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	681a      	ldr	r2, [r3, #0]
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	2180      	movs	r1, #128	@ 0x80
 8017292:	04c9      	lsls	r1, r1, #19
 8017294:	430a      	orrs	r2, r1
 8017296:	601a      	str	r2, [r3, #0]
 8017298:	69fb      	ldr	r3, [r7, #28]
 801729a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801729c:	69bb      	ldr	r3, [r7, #24]
 801729e:	f383 8810 	msr	PRIMASK, r3
}
 80172a2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80172a4:	1dbb      	adds	r3, r7, #6
 80172a6:	881a      	ldrh	r2, [r3, #0]
 80172a8:	68b9      	ldr	r1, [r7, #8]
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	0018      	movs	r0, r3
 80172ae:	f001 f8c7 	bl	8018440 <UART_Start_Receive_IT>
 80172b2:	0003      	movs	r3, r0
 80172b4:	e000      	b.n	80172b8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80172b6:	2302      	movs	r3, #2
  }
}
 80172b8:	0018      	movs	r0, r3
 80172ba:	46bd      	mov	sp, r7
 80172bc:	b008      	add	sp, #32
 80172be:	bd80      	pop	{r7, pc}
 80172c0:	40004800 	.word	0x40004800

080172c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b088      	sub	sp, #32
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	60b9      	str	r1, [r7, #8]
 80172ce:	1dbb      	adds	r3, r7, #6
 80172d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80172d6:	2b20      	cmp	r3, #32
 80172d8:	d000      	beq.n	80172dc <HAL_UART_Transmit_DMA+0x18>
 80172da:	e077      	b.n	80173cc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80172dc:	68bb      	ldr	r3, [r7, #8]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d003      	beq.n	80172ea <HAL_UART_Transmit_DMA+0x26>
 80172e2:	1dbb      	adds	r3, r7, #6
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d101      	bne.n	80172ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80172ea:	2301      	movs	r3, #1
 80172ec:	e06f      	b.n	80173ce <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	689a      	ldr	r2, [r3, #8]
 80172f2:	2380      	movs	r3, #128	@ 0x80
 80172f4:	015b      	lsls	r3, r3, #5
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d109      	bne.n	801730e <HAL_UART_Transmit_DMA+0x4a>
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	691b      	ldr	r3, [r3, #16]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d105      	bne.n	801730e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	2201      	movs	r2, #1
 8017306:	4013      	ands	r3, r2
 8017308:	d001      	beq.n	801730e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801730a:	2301      	movs	r3, #1
 801730c:	e05f      	b.n	80173ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	68ba      	ldr	r2, [r7, #8]
 8017312:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	1dba      	adds	r2, r7, #6
 8017318:	2150      	movs	r1, #80	@ 0x50
 801731a:	8812      	ldrh	r2, [r2, #0]
 801731c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	1dba      	adds	r2, r7, #6
 8017322:	2152      	movs	r1, #82	@ 0x52
 8017324:	8812      	ldrh	r2, [r2, #0]
 8017326:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2284      	movs	r2, #132	@ 0x84
 801732c:	2100      	movs	r1, #0
 801732e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	2221      	movs	r2, #33	@ 0x21
 8017334:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801733a:	2b00      	cmp	r3, #0
 801733c:	d027      	beq.n	801738e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017342:	4a25      	ldr	r2, [pc, #148]	@ (80173d8 <HAL_UART_Transmit_DMA+0x114>)
 8017344:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801734a:	4a24      	ldr	r2, [pc, #144]	@ (80173dc <HAL_UART_Transmit_DMA+0x118>)
 801734c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017352:	4a23      	ldr	r2, [pc, #140]	@ (80173e0 <HAL_UART_Transmit_DMA+0x11c>)
 8017354:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801735a:	2200      	movs	r2, #0
 801735c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017366:	0019      	movs	r1, r3
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	3328      	adds	r3, #40	@ 0x28
 801736e:	001a      	movs	r2, r3
 8017370:	1dbb      	adds	r3, r7, #6
 8017372:	881b      	ldrh	r3, [r3, #0]
 8017374:	f7f8 f9ce 	bl	800f714 <HAL_DMA_Start_IT>
 8017378:	1e03      	subs	r3, r0, #0
 801737a:	d008      	beq.n	801738e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	2284      	movs	r2, #132	@ 0x84
 8017380:	2110      	movs	r1, #16
 8017382:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	2220      	movs	r2, #32
 8017388:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801738a:	2301      	movs	r3, #1
 801738c:	e01f      	b.n	80173ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	2240      	movs	r2, #64	@ 0x40
 8017394:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017396:	f3ef 8310 	mrs	r3, PRIMASK
 801739a:	613b      	str	r3, [r7, #16]
  return(result);
 801739c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801739e:	61fb      	str	r3, [r7, #28]
 80173a0:	2301      	movs	r3, #1
 80173a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	f383 8810 	msr	PRIMASK, r3
}
 80173aa:	46c0      	nop			@ (mov r8, r8)
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	689a      	ldr	r2, [r3, #8]
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	2180      	movs	r1, #128	@ 0x80
 80173b8:	430a      	orrs	r2, r1
 80173ba:	609a      	str	r2, [r3, #8]
 80173bc:	69fb      	ldr	r3, [r7, #28]
 80173be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173c0:	69bb      	ldr	r3, [r7, #24]
 80173c2:	f383 8810 	msr	PRIMASK, r3
}
 80173c6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80173c8:	2300      	movs	r3, #0
 80173ca:	e000      	b.n	80173ce <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80173cc:	2302      	movs	r3, #2
  }
}
 80173ce:	0018      	movs	r0, r3
 80173d0:	46bd      	mov	sp, r7
 80173d2:	b008      	add	sp, #32
 80173d4:	bd80      	pop	{r7, pc}
 80173d6:	46c0      	nop			@ (mov r8, r8)
 80173d8:	08018825 	.word	0x08018825
 80173dc:	080188c1 	.word	0x080188c1
 80173e0:	08018a61 	.word	0x08018a61

080173e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b088      	sub	sp, #32
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	60f8      	str	r0, [r7, #12]
 80173ec:	60b9      	str	r1, [r7, #8]
 80173ee:	1dbb      	adds	r3, r7, #6
 80173f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	2280      	movs	r2, #128	@ 0x80
 80173f6:	589b      	ldr	r3, [r3, r2]
 80173f8:	2b20      	cmp	r3, #32
 80173fa:	d14a      	bne.n	8017492 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d003      	beq.n	801740a <HAL_UART_Receive_DMA+0x26>
 8017402:	1dbb      	adds	r3, r7, #6
 8017404:	881b      	ldrh	r3, [r3, #0]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d101      	bne.n	801740e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801740a:	2301      	movs	r3, #1
 801740c:	e042      	b.n	8017494 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	689a      	ldr	r2, [r3, #8]
 8017412:	2380      	movs	r3, #128	@ 0x80
 8017414:	015b      	lsls	r3, r3, #5
 8017416:	429a      	cmp	r2, r3
 8017418:	d109      	bne.n	801742e <HAL_UART_Receive_DMA+0x4a>
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	691b      	ldr	r3, [r3, #16]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d105      	bne.n	801742e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	2201      	movs	r2, #1
 8017426:	4013      	ands	r3, r2
 8017428:	d001      	beq.n	801742e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801742a:	2301      	movs	r3, #1
 801742c:	e032      	b.n	8017494 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	2200      	movs	r2, #0
 8017432:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	4a18      	ldr	r2, [pc, #96]	@ (801749c <HAL_UART_Receive_DMA+0xb8>)
 801743a:	4293      	cmp	r3, r2
 801743c:	d020      	beq.n	8017480 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	685a      	ldr	r2, [r3, #4]
 8017444:	2380      	movs	r3, #128	@ 0x80
 8017446:	041b      	lsls	r3, r3, #16
 8017448:	4013      	ands	r3, r2
 801744a:	d019      	beq.n	8017480 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801744c:	f3ef 8310 	mrs	r3, PRIMASK
 8017450:	613b      	str	r3, [r7, #16]
  return(result);
 8017452:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017454:	61fb      	str	r3, [r7, #28]
 8017456:	2301      	movs	r3, #1
 8017458:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801745a:	697b      	ldr	r3, [r7, #20]
 801745c:	f383 8810 	msr	PRIMASK, r3
}
 8017460:	46c0      	nop			@ (mov r8, r8)
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	681a      	ldr	r2, [r3, #0]
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	2180      	movs	r1, #128	@ 0x80
 801746e:	04c9      	lsls	r1, r1, #19
 8017470:	430a      	orrs	r2, r1
 8017472:	601a      	str	r2, [r3, #0]
 8017474:	69fb      	ldr	r3, [r7, #28]
 8017476:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017478:	69bb      	ldr	r3, [r7, #24]
 801747a:	f383 8810 	msr	PRIMASK, r3
}
 801747e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017480:	1dbb      	adds	r3, r7, #6
 8017482:	881a      	ldrh	r2, [r3, #0]
 8017484:	68b9      	ldr	r1, [r7, #8]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	0018      	movs	r0, r3
 801748a:	f001 f8a3 	bl	80185d4 <UART_Start_Receive_DMA>
 801748e:	0003      	movs	r3, r0
 8017490:	e000      	b.n	8017494 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017492:	2302      	movs	r3, #2
  }
}
 8017494:	0018      	movs	r0, r3
 8017496:	46bd      	mov	sp, r7
 8017498:	b008      	add	sp, #32
 801749a:	bd80      	pop	{r7, pc}
 801749c:	40004800 	.word	0x40004800

080174a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80174a0:	b590      	push	{r4, r7, lr}
 80174a2:	b0ab      	sub	sp, #172	@ 0xac
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	69db      	ldr	r3, [r3, #28]
 80174ae:	22a4      	movs	r2, #164	@ 0xa4
 80174b0:	18b9      	adds	r1, r7, r2
 80174b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	20a0      	movs	r0, #160	@ 0xa0
 80174bc:	1839      	adds	r1, r7, r0
 80174be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	689b      	ldr	r3, [r3, #8]
 80174c6:	219c      	movs	r1, #156	@ 0x9c
 80174c8:	1879      	adds	r1, r7, r1
 80174ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80174cc:	0011      	movs	r1, r2
 80174ce:	18bb      	adds	r3, r7, r2
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	4a9c      	ldr	r2, [pc, #624]	@ (8017744 <HAL_UART_IRQHandler+0x2a4>)
 80174d4:	4013      	ands	r3, r2
 80174d6:	2298      	movs	r2, #152	@ 0x98
 80174d8:	18bc      	adds	r4, r7, r2
 80174da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80174dc:	18bb      	adds	r3, r7, r2
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d114      	bne.n	801750e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80174e4:	187b      	adds	r3, r7, r1
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	2220      	movs	r2, #32
 80174ea:	4013      	ands	r3, r2
 80174ec:	d00f      	beq.n	801750e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80174ee:	183b      	adds	r3, r7, r0
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	2220      	movs	r2, #32
 80174f4:	4013      	ands	r3, r2
 80174f6:	d00a      	beq.n	801750e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d100      	bne.n	8017502 <HAL_UART_IRQHandler+0x62>
 8017500:	e2aa      	b.n	8017a58 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017506:	687a      	ldr	r2, [r7, #4]
 8017508:	0010      	movs	r0, r2
 801750a:	4798      	blx	r3
      }
      return;
 801750c:	e2a4      	b.n	8017a58 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801750e:	2398      	movs	r3, #152	@ 0x98
 8017510:	18fb      	adds	r3, r7, r3
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d100      	bne.n	801751a <HAL_UART_IRQHandler+0x7a>
 8017518:	e11a      	b.n	8017750 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801751a:	239c      	movs	r3, #156	@ 0x9c
 801751c:	18fb      	adds	r3, r7, r3
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	2201      	movs	r2, #1
 8017522:	4013      	ands	r3, r2
 8017524:	d106      	bne.n	8017534 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017526:	23a0      	movs	r3, #160	@ 0xa0
 8017528:	18fb      	adds	r3, r7, r3
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	4a86      	ldr	r2, [pc, #536]	@ (8017748 <HAL_UART_IRQHandler+0x2a8>)
 801752e:	4013      	ands	r3, r2
 8017530:	d100      	bne.n	8017534 <HAL_UART_IRQHandler+0x94>
 8017532:	e10d      	b.n	8017750 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017534:	23a4      	movs	r3, #164	@ 0xa4
 8017536:	18fb      	adds	r3, r7, r3
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	2201      	movs	r2, #1
 801753c:	4013      	ands	r3, r2
 801753e:	d012      	beq.n	8017566 <HAL_UART_IRQHandler+0xc6>
 8017540:	23a0      	movs	r3, #160	@ 0xa0
 8017542:	18fb      	adds	r3, r7, r3
 8017544:	681a      	ldr	r2, [r3, #0]
 8017546:	2380      	movs	r3, #128	@ 0x80
 8017548:	005b      	lsls	r3, r3, #1
 801754a:	4013      	ands	r3, r2
 801754c:	d00b      	beq.n	8017566 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	2201      	movs	r2, #1
 8017554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2284      	movs	r2, #132	@ 0x84
 801755a:	589b      	ldr	r3, [r3, r2]
 801755c:	2201      	movs	r2, #1
 801755e:	431a      	orrs	r2, r3
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2184      	movs	r1, #132	@ 0x84
 8017564:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017566:	23a4      	movs	r3, #164	@ 0xa4
 8017568:	18fb      	adds	r3, r7, r3
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	2202      	movs	r2, #2
 801756e:	4013      	ands	r3, r2
 8017570:	d011      	beq.n	8017596 <HAL_UART_IRQHandler+0xf6>
 8017572:	239c      	movs	r3, #156	@ 0x9c
 8017574:	18fb      	adds	r3, r7, r3
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	2201      	movs	r2, #1
 801757a:	4013      	ands	r3, r2
 801757c:	d00b      	beq.n	8017596 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2202      	movs	r2, #2
 8017584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	2284      	movs	r2, #132	@ 0x84
 801758a:	589b      	ldr	r3, [r3, r2]
 801758c:	2204      	movs	r2, #4
 801758e:	431a      	orrs	r2, r3
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	2184      	movs	r1, #132	@ 0x84
 8017594:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017596:	23a4      	movs	r3, #164	@ 0xa4
 8017598:	18fb      	adds	r3, r7, r3
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	2204      	movs	r2, #4
 801759e:	4013      	ands	r3, r2
 80175a0:	d011      	beq.n	80175c6 <HAL_UART_IRQHandler+0x126>
 80175a2:	239c      	movs	r3, #156	@ 0x9c
 80175a4:	18fb      	adds	r3, r7, r3
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	2201      	movs	r2, #1
 80175aa:	4013      	ands	r3, r2
 80175ac:	d00b      	beq.n	80175c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	2204      	movs	r2, #4
 80175b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	2284      	movs	r2, #132	@ 0x84
 80175ba:	589b      	ldr	r3, [r3, r2]
 80175bc:	2202      	movs	r2, #2
 80175be:	431a      	orrs	r2, r3
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2184      	movs	r1, #132	@ 0x84
 80175c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80175c6:	23a4      	movs	r3, #164	@ 0xa4
 80175c8:	18fb      	adds	r3, r7, r3
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	2208      	movs	r2, #8
 80175ce:	4013      	ands	r3, r2
 80175d0:	d017      	beq.n	8017602 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80175d2:	23a0      	movs	r3, #160	@ 0xa0
 80175d4:	18fb      	adds	r3, r7, r3
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2220      	movs	r2, #32
 80175da:	4013      	ands	r3, r2
 80175dc:	d105      	bne.n	80175ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80175de:	239c      	movs	r3, #156	@ 0x9c
 80175e0:	18fb      	adds	r3, r7, r3
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	2201      	movs	r2, #1
 80175e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80175e8:	d00b      	beq.n	8017602 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	2208      	movs	r2, #8
 80175f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	2284      	movs	r2, #132	@ 0x84
 80175f6:	589b      	ldr	r3, [r3, r2]
 80175f8:	2208      	movs	r2, #8
 80175fa:	431a      	orrs	r2, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2184      	movs	r1, #132	@ 0x84
 8017600:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017602:	23a4      	movs	r3, #164	@ 0xa4
 8017604:	18fb      	adds	r3, r7, r3
 8017606:	681a      	ldr	r2, [r3, #0]
 8017608:	2380      	movs	r3, #128	@ 0x80
 801760a:	011b      	lsls	r3, r3, #4
 801760c:	4013      	ands	r3, r2
 801760e:	d013      	beq.n	8017638 <HAL_UART_IRQHandler+0x198>
 8017610:	23a0      	movs	r3, #160	@ 0xa0
 8017612:	18fb      	adds	r3, r7, r3
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	2380      	movs	r3, #128	@ 0x80
 8017618:	04db      	lsls	r3, r3, #19
 801761a:	4013      	ands	r3, r2
 801761c:	d00c      	beq.n	8017638 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	2280      	movs	r2, #128	@ 0x80
 8017624:	0112      	lsls	r2, r2, #4
 8017626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	2284      	movs	r2, #132	@ 0x84
 801762c:	589b      	ldr	r3, [r3, r2]
 801762e:	2220      	movs	r2, #32
 8017630:	431a      	orrs	r2, r3
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	2184      	movs	r1, #132	@ 0x84
 8017636:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2284      	movs	r2, #132	@ 0x84
 801763c:	589b      	ldr	r3, [r3, r2]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d100      	bne.n	8017644 <HAL_UART_IRQHandler+0x1a4>
 8017642:	e20b      	b.n	8017a5c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017644:	23a4      	movs	r3, #164	@ 0xa4
 8017646:	18fb      	adds	r3, r7, r3
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	2220      	movs	r2, #32
 801764c:	4013      	ands	r3, r2
 801764e:	d00e      	beq.n	801766e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017650:	23a0      	movs	r3, #160	@ 0xa0
 8017652:	18fb      	adds	r3, r7, r3
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	2220      	movs	r2, #32
 8017658:	4013      	ands	r3, r2
 801765a:	d008      	beq.n	801766e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017660:	2b00      	cmp	r3, #0
 8017662:	d004      	beq.n	801766e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017668:	687a      	ldr	r2, [r7, #4]
 801766a:	0010      	movs	r0, r2
 801766c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	2284      	movs	r2, #132	@ 0x84
 8017672:	589b      	ldr	r3, [r3, r2]
 8017674:	2194      	movs	r1, #148	@ 0x94
 8017676:	187a      	adds	r2, r7, r1
 8017678:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	689b      	ldr	r3, [r3, #8]
 8017680:	2240      	movs	r2, #64	@ 0x40
 8017682:	4013      	ands	r3, r2
 8017684:	2b40      	cmp	r3, #64	@ 0x40
 8017686:	d004      	beq.n	8017692 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017688:	187b      	adds	r3, r7, r1
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	2228      	movs	r2, #40	@ 0x28
 801768e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017690:	d04b      	beq.n	801772a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	0018      	movs	r0, r3
 8017696:	f001 f861 	bl	801875c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	689b      	ldr	r3, [r3, #8]
 80176a0:	2240      	movs	r2, #64	@ 0x40
 80176a2:	4013      	ands	r3, r2
 80176a4:	2b40      	cmp	r3, #64	@ 0x40
 80176a6:	d139      	bne.n	801771c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176a8:	f3ef 8310 	mrs	r3, PRIMASK
 80176ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80176ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80176b0:	2090      	movs	r0, #144	@ 0x90
 80176b2:	183a      	adds	r2, r7, r0
 80176b4:	6013      	str	r3, [r2, #0]
 80176b6:	2301      	movs	r3, #1
 80176b8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80176bc:	f383 8810 	msr	PRIMASK, r3
}
 80176c0:	46c0      	nop			@ (mov r8, r8)
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	689a      	ldr	r2, [r3, #8]
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	2140      	movs	r1, #64	@ 0x40
 80176ce:	438a      	bics	r2, r1
 80176d0:	609a      	str	r2, [r3, #8]
 80176d2:	183b      	adds	r3, r7, r0
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80176da:	f383 8810 	msr	PRIMASK, r3
}
 80176de:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d012      	beq.n	801770e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80176ec:	4a17      	ldr	r2, [pc, #92]	@ (801774c <HAL_UART_IRQHandler+0x2ac>)
 80176ee:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80176f4:	0018      	movs	r0, r3
 80176f6:	f7f8 f8b3 	bl	800f860 <HAL_DMA_Abort_IT>
 80176fa:	1e03      	subs	r3, r0, #0
 80176fc:	d020      	beq.n	8017740 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017708:	0018      	movs	r0, r3
 801770a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801770c:	e018      	b.n	8017740 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2298      	movs	r2, #152	@ 0x98
 8017712:	589b      	ldr	r3, [r3, r2]
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	0010      	movs	r0, r2
 8017718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801771a:	e011      	b.n	8017740 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2298      	movs	r2, #152	@ 0x98
 8017720:	589b      	ldr	r3, [r3, r2]
 8017722:	687a      	ldr	r2, [r7, #4]
 8017724:	0010      	movs	r0, r2
 8017726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017728:	e00a      	b.n	8017740 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2298      	movs	r2, #152	@ 0x98
 801772e:	589b      	ldr	r3, [r3, r2]
 8017730:	687a      	ldr	r2, [r7, #4]
 8017732:	0010      	movs	r0, r2
 8017734:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2284      	movs	r2, #132	@ 0x84
 801773a:	2100      	movs	r1, #0
 801773c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801773e:	e18d      	b.n	8017a5c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017740:	46c0      	nop			@ (mov r8, r8)
    return;
 8017742:	e18b      	b.n	8017a5c <HAL_UART_IRQHandler+0x5bc>
 8017744:	0000080f 	.word	0x0000080f
 8017748:	04000120 	.word	0x04000120
 801774c:	08018ae9 	.word	0x08018ae9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017754:	2b01      	cmp	r3, #1
 8017756:	d000      	beq.n	801775a <HAL_UART_IRQHandler+0x2ba>
 8017758:	e13d      	b.n	80179d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801775a:	23a4      	movs	r3, #164	@ 0xa4
 801775c:	18fb      	adds	r3, r7, r3
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	2210      	movs	r2, #16
 8017762:	4013      	ands	r3, r2
 8017764:	d100      	bne.n	8017768 <HAL_UART_IRQHandler+0x2c8>
 8017766:	e136      	b.n	80179d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017768:	23a0      	movs	r3, #160	@ 0xa0
 801776a:	18fb      	adds	r3, r7, r3
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	2210      	movs	r2, #16
 8017770:	4013      	ands	r3, r2
 8017772:	d100      	bne.n	8017776 <HAL_UART_IRQHandler+0x2d6>
 8017774:	e12f      	b.n	80179d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	2210      	movs	r2, #16
 801777c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	2240      	movs	r2, #64	@ 0x40
 8017786:	4013      	ands	r3, r2
 8017788:	2b40      	cmp	r3, #64	@ 0x40
 801778a:	d000      	beq.n	801778e <HAL_UART_IRQHandler+0x2ee>
 801778c:	e0a2      	b.n	80178d4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	685a      	ldr	r2, [r3, #4]
 8017796:	217e      	movs	r1, #126	@ 0x7e
 8017798:	187b      	adds	r3, r7, r1
 801779a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801779c:	187b      	adds	r3, r7, r1
 801779e:	881b      	ldrh	r3, [r3, #0]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d100      	bne.n	80177a6 <HAL_UART_IRQHandler+0x306>
 80177a4:	e15c      	b.n	8017a60 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2258      	movs	r2, #88	@ 0x58
 80177aa:	5a9b      	ldrh	r3, [r3, r2]
 80177ac:	187a      	adds	r2, r7, r1
 80177ae:	8812      	ldrh	r2, [r2, #0]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d300      	bcc.n	80177b6 <HAL_UART_IRQHandler+0x316>
 80177b4:	e154      	b.n	8017a60 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	187a      	adds	r2, r7, r1
 80177ba:	215a      	movs	r1, #90	@ 0x5a
 80177bc:	8812      	ldrh	r2, [r2, #0]
 80177be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	2220      	movs	r2, #32
 80177ca:	4013      	ands	r3, r2
 80177cc:	d16f      	bne.n	80178ae <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177ce:	f3ef 8310 	mrs	r3, PRIMASK
 80177d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80177d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80177d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80177d8:	2301      	movs	r3, #1
 80177da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177de:	f383 8810 	msr	PRIMASK, r3
}
 80177e2:	46c0      	nop			@ (mov r8, r8)
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	681a      	ldr	r2, [r3, #0]
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	49a0      	ldr	r1, [pc, #640]	@ (8017a70 <HAL_UART_IRQHandler+0x5d0>)
 80177f0:	400a      	ands	r2, r1
 80177f2:	601a      	str	r2, [r3, #0]
 80177f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80177f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177fa:	f383 8810 	msr	PRIMASK, r3
}
 80177fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017800:	f3ef 8310 	mrs	r3, PRIMASK
 8017804:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017808:	677b      	str	r3, [r7, #116]	@ 0x74
 801780a:	2301      	movs	r3, #1
 801780c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801780e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017810:	f383 8810 	msr	PRIMASK, r3
}
 8017814:	46c0      	nop			@ (mov r8, r8)
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	689a      	ldr	r2, [r3, #8]
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	2101      	movs	r1, #1
 8017822:	438a      	bics	r2, r1
 8017824:	609a      	str	r2, [r3, #8]
 8017826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017828:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801782a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801782c:	f383 8810 	msr	PRIMASK, r3
}
 8017830:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017832:	f3ef 8310 	mrs	r3, PRIMASK
 8017836:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801783a:	673b      	str	r3, [r7, #112]	@ 0x70
 801783c:	2301      	movs	r3, #1
 801783e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017842:	f383 8810 	msr	PRIMASK, r3
}
 8017846:	46c0      	nop			@ (mov r8, r8)
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	689a      	ldr	r2, [r3, #8]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	2140      	movs	r1, #64	@ 0x40
 8017854:	438a      	bics	r2, r1
 8017856:	609a      	str	r2, [r3, #8]
 8017858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801785a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801785c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801785e:	f383 8810 	msr	PRIMASK, r3
}
 8017862:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2280      	movs	r2, #128	@ 0x80
 8017868:	2120      	movs	r1, #32
 801786a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	2200      	movs	r2, #0
 8017870:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017872:	f3ef 8310 	mrs	r3, PRIMASK
 8017876:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801787a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801787c:	2301      	movs	r3, #1
 801787e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017882:	f383 8810 	msr	PRIMASK, r3
}
 8017886:	46c0      	nop			@ (mov r8, r8)
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	681a      	ldr	r2, [r3, #0]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	2110      	movs	r1, #16
 8017894:	438a      	bics	r2, r1
 8017896:	601a      	str	r2, [r3, #0]
 8017898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801789a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801789c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801789e:	f383 8810 	msr	PRIMASK, r3
}
 80178a2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178a8:	0018      	movs	r0, r3
 80178aa:	f7f7 ff99 	bl	800f7e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	2202      	movs	r2, #2
 80178b2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	22ac      	movs	r2, #172	@ 0xac
 80178b8:	589b      	ldr	r3, [r3, r2]
 80178ba:	687a      	ldr	r2, [r7, #4]
 80178bc:	2158      	movs	r1, #88	@ 0x58
 80178be:	5a51      	ldrh	r1, [r2, r1]
 80178c0:	687a      	ldr	r2, [r7, #4]
 80178c2:	205a      	movs	r0, #90	@ 0x5a
 80178c4:	5a12      	ldrh	r2, [r2, r0]
 80178c6:	b292      	uxth	r2, r2
 80178c8:	1a8a      	subs	r2, r1, r2
 80178ca:	b291      	uxth	r1, r2
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	0010      	movs	r0, r2
 80178d0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80178d2:	e0c5      	b.n	8017a60 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2258      	movs	r2, #88	@ 0x58
 80178d8:	5a99      	ldrh	r1, [r3, r2]
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	225a      	movs	r2, #90	@ 0x5a
 80178de:	5a9b      	ldrh	r3, [r3, r2]
 80178e0:	b29a      	uxth	r2, r3
 80178e2:	208e      	movs	r0, #142	@ 0x8e
 80178e4:	183b      	adds	r3, r7, r0
 80178e6:	1a8a      	subs	r2, r1, r2
 80178e8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	225a      	movs	r2, #90	@ 0x5a
 80178ee:	5a9b      	ldrh	r3, [r3, r2]
 80178f0:	b29b      	uxth	r3, r3
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d100      	bne.n	80178f8 <HAL_UART_IRQHandler+0x458>
 80178f6:	e0b5      	b.n	8017a64 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80178f8:	183b      	adds	r3, r7, r0
 80178fa:	881b      	ldrh	r3, [r3, #0]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d100      	bne.n	8017902 <HAL_UART_IRQHandler+0x462>
 8017900:	e0b0      	b.n	8017a64 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017902:	f3ef 8310 	mrs	r3, PRIMASK
 8017906:	60fb      	str	r3, [r7, #12]
  return(result);
 8017908:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801790a:	2488      	movs	r4, #136	@ 0x88
 801790c:	193a      	adds	r2, r7, r4
 801790e:	6013      	str	r3, [r2, #0]
 8017910:	2301      	movs	r3, #1
 8017912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017914:	693b      	ldr	r3, [r7, #16]
 8017916:	f383 8810 	msr	PRIMASK, r3
}
 801791a:	46c0      	nop			@ (mov r8, r8)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	4953      	ldr	r1, [pc, #332]	@ (8017a74 <HAL_UART_IRQHandler+0x5d4>)
 8017928:	400a      	ands	r2, r1
 801792a:	601a      	str	r2, [r3, #0]
 801792c:	193b      	adds	r3, r7, r4
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017932:	697b      	ldr	r3, [r7, #20]
 8017934:	f383 8810 	msr	PRIMASK, r3
}
 8017938:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801793a:	f3ef 8310 	mrs	r3, PRIMASK
 801793e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017940:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017942:	2484      	movs	r4, #132	@ 0x84
 8017944:	193a      	adds	r2, r7, r4
 8017946:	6013      	str	r3, [r2, #0]
 8017948:	2301      	movs	r3, #1
 801794a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801794c:	69fb      	ldr	r3, [r7, #28]
 801794e:	f383 8810 	msr	PRIMASK, r3
}
 8017952:	46c0      	nop			@ (mov r8, r8)
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	689a      	ldr	r2, [r3, #8]
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2101      	movs	r1, #1
 8017960:	438a      	bics	r2, r1
 8017962:	609a      	str	r2, [r3, #8]
 8017964:	193b      	adds	r3, r7, r4
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801796a:	6a3b      	ldr	r3, [r7, #32]
 801796c:	f383 8810 	msr	PRIMASK, r3
}
 8017970:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2280      	movs	r2, #128	@ 0x80
 8017976:	2120      	movs	r1, #32
 8017978:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	2200      	movs	r2, #0
 801797e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2200      	movs	r2, #0
 8017984:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017986:	f3ef 8310 	mrs	r3, PRIMASK
 801798a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801798e:	2480      	movs	r4, #128	@ 0x80
 8017990:	193a      	adds	r2, r7, r4
 8017992:	6013      	str	r3, [r2, #0]
 8017994:	2301      	movs	r3, #1
 8017996:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801799a:	f383 8810 	msr	PRIMASK, r3
}
 801799e:	46c0      	nop			@ (mov r8, r8)
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	681a      	ldr	r2, [r3, #0]
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	2110      	movs	r1, #16
 80179ac:	438a      	bics	r2, r1
 80179ae:	601a      	str	r2, [r3, #0]
 80179b0:	193b      	adds	r3, r7, r4
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179b8:	f383 8810 	msr	PRIMASK, r3
}
 80179bc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2202      	movs	r2, #2
 80179c2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	22ac      	movs	r2, #172	@ 0xac
 80179c8:	589b      	ldr	r3, [r3, r2]
 80179ca:	183a      	adds	r2, r7, r0
 80179cc:	8811      	ldrh	r1, [r2, #0]
 80179ce:	687a      	ldr	r2, [r7, #4]
 80179d0:	0010      	movs	r0, r2
 80179d2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80179d4:	e046      	b.n	8017a64 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80179d6:	23a4      	movs	r3, #164	@ 0xa4
 80179d8:	18fb      	adds	r3, r7, r3
 80179da:	681a      	ldr	r2, [r3, #0]
 80179dc:	2380      	movs	r3, #128	@ 0x80
 80179de:	035b      	lsls	r3, r3, #13
 80179e0:	4013      	ands	r3, r2
 80179e2:	d012      	beq.n	8017a0a <HAL_UART_IRQHandler+0x56a>
 80179e4:	239c      	movs	r3, #156	@ 0x9c
 80179e6:	18fb      	adds	r3, r7, r3
 80179e8:	681a      	ldr	r2, [r3, #0]
 80179ea:	2380      	movs	r3, #128	@ 0x80
 80179ec:	03db      	lsls	r3, r3, #15
 80179ee:	4013      	ands	r3, r2
 80179f0:	d00b      	beq.n	8017a0a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	2280      	movs	r2, #128	@ 0x80
 80179f8:	0352      	lsls	r2, r2, #13
 80179fa:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	22a8      	movs	r2, #168	@ 0xa8
 8017a00:	589b      	ldr	r3, [r3, r2]
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	0010      	movs	r0, r2
 8017a06:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017a08:	e02f      	b.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017a0a:	23a4      	movs	r3, #164	@ 0xa4
 8017a0c:	18fb      	adds	r3, r7, r3
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	2280      	movs	r2, #128	@ 0x80
 8017a12:	4013      	ands	r3, r2
 8017a14:	d00f      	beq.n	8017a36 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017a16:	23a0      	movs	r3, #160	@ 0xa0
 8017a18:	18fb      	adds	r3, r7, r3
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	2280      	movs	r2, #128	@ 0x80
 8017a1e:	4013      	ands	r3, r2
 8017a20:	d009      	beq.n	8017a36 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d01e      	beq.n	8017a68 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a2e:	687a      	ldr	r2, [r7, #4]
 8017a30:	0010      	movs	r0, r2
 8017a32:	4798      	blx	r3
    }
    return;
 8017a34:	e018      	b.n	8017a68 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017a36:	23a4      	movs	r3, #164	@ 0xa4
 8017a38:	18fb      	adds	r3, r7, r3
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	2240      	movs	r2, #64	@ 0x40
 8017a3e:	4013      	ands	r3, r2
 8017a40:	d013      	beq.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
 8017a42:	23a0      	movs	r3, #160	@ 0xa0
 8017a44:	18fb      	adds	r3, r7, r3
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	2240      	movs	r2, #64	@ 0x40
 8017a4a:	4013      	ands	r3, r2
 8017a4c:	d00d      	beq.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	0018      	movs	r0, r3
 8017a52:	f001 f862 	bl	8018b1a <UART_EndTransmit_IT>
    return;
 8017a56:	e008      	b.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017a58:	46c0      	nop			@ (mov r8, r8)
 8017a5a:	e006      	b.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
    return;
 8017a5c:	46c0      	nop			@ (mov r8, r8)
 8017a5e:	e004      	b.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017a60:	46c0      	nop			@ (mov r8, r8)
 8017a62:	e002      	b.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
      return;
 8017a64:	46c0      	nop			@ (mov r8, r8)
 8017a66:	e000      	b.n	8017a6a <HAL_UART_IRQHandler+0x5ca>
    return;
 8017a68:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	b02b      	add	sp, #172	@ 0xac
 8017a6e:	bd90      	pop	{r4, r7, pc}
 8017a70:	fffffeff 	.word	0xfffffeff
 8017a74:	fffffedf 	.word	0xfffffedf

08017a78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017a80:	46c0      	nop			@ (mov r8, r8)
 8017a82:	46bd      	mov	sp, r7
 8017a84:	b002      	add	sp, #8
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b082      	sub	sp, #8
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017a90:	46c0      	nop			@ (mov r8, r8)
 8017a92:	46bd      	mov	sp, r7
 8017a94:	b002      	add	sp, #8
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017aa0:	46c0      	nop			@ (mov r8, r8)
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	b002      	add	sp, #8
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017ab0:	46c0      	nop			@ (mov r8, r8)
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	b002      	add	sp, #8
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b082      	sub	sp, #8
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017ac0:	46c0      	nop			@ (mov r8, r8)
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	b002      	add	sp, #8
 8017ac6:	bd80      	pop	{r7, pc}

08017ac8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017ad0:	46c0      	nop			@ (mov r8, r8)
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	b002      	add	sp, #8
 8017ad6:	bd80      	pop	{r7, pc}

08017ad8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	000a      	movs	r2, r1
 8017ae2:	1cbb      	adds	r3, r7, #2
 8017ae4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017ae6:	46c0      	nop			@ (mov r8, r8)
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	b002      	add	sp, #8
 8017aec:	bd80      	pop	{r7, pc}
	...

08017af0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b082      	sub	sp, #8
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	2188      	movs	r1, #136	@ 0x88
 8017afc:	4a14      	ldr	r2, [pc, #80]	@ (8017b50 <UART_InitCallbacksToDefault+0x60>)
 8017afe:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	218c      	movs	r1, #140	@ 0x8c
 8017b04:	4a13      	ldr	r2, [pc, #76]	@ (8017b54 <UART_InitCallbacksToDefault+0x64>)
 8017b06:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2190      	movs	r1, #144	@ 0x90
 8017b0c:	4a12      	ldr	r2, [pc, #72]	@ (8017b58 <UART_InitCallbacksToDefault+0x68>)
 8017b0e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	2194      	movs	r1, #148	@ 0x94
 8017b14:	4a11      	ldr	r2, [pc, #68]	@ (8017b5c <UART_InitCallbacksToDefault+0x6c>)
 8017b16:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	2198      	movs	r1, #152	@ 0x98
 8017b1c:	4a10      	ldr	r2, [pc, #64]	@ (8017b60 <UART_InitCallbacksToDefault+0x70>)
 8017b1e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	219c      	movs	r1, #156	@ 0x9c
 8017b24:	4a0f      	ldr	r2, [pc, #60]	@ (8017b64 <UART_InitCallbacksToDefault+0x74>)
 8017b26:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	21a0      	movs	r1, #160	@ 0xa0
 8017b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8017b68 <UART_InitCallbacksToDefault+0x78>)
 8017b2e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	21a4      	movs	r1, #164	@ 0xa4
 8017b34:	4a0d      	ldr	r2, [pc, #52]	@ (8017b6c <UART_InitCallbacksToDefault+0x7c>)
 8017b36:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	21a8      	movs	r1, #168	@ 0xa8
 8017b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8017b70 <UART_InitCallbacksToDefault+0x80>)
 8017b3e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	21ac      	movs	r1, #172	@ 0xac
 8017b44:	4a0b      	ldr	r2, [pc, #44]	@ (8017b74 <UART_InitCallbacksToDefault+0x84>)
 8017b46:	505a      	str	r2, [r3, r1]

}
 8017b48:	46c0      	nop			@ (mov r8, r8)
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	b002      	add	sp, #8
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	08017a89 	.word	0x08017a89
 8017b54:	08017a79 	.word	0x08017a79
 8017b58:	08017a99 	.word	0x08017a99
 8017b5c:	08008245 	.word	0x08008245
 8017b60:	08003d19 	.word	0x08003d19
 8017b64:	08017aa9 	.word	0x08017aa9
 8017b68:	08017ab9 	.word	0x08017ab9
 8017b6c:	08017ac9 	.word	0x08017ac9
 8017b70:	08018f0d 	.word	0x08018f0d
 8017b74:	08017ad9 	.word	0x08017ad9

08017b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017b78:	b5b0      	push	{r4, r5, r7, lr}
 8017b7a:	b08e      	sub	sp, #56	@ 0x38
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017b80:	231a      	movs	r3, #26
 8017b82:	2218      	movs	r2, #24
 8017b84:	189b      	adds	r3, r3, r2
 8017b86:	19db      	adds	r3, r3, r7
 8017b88:	2200      	movs	r2, #0
 8017b8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017b8c:	69fb      	ldr	r3, [r7, #28]
 8017b8e:	689a      	ldr	r2, [r3, #8]
 8017b90:	69fb      	ldr	r3, [r7, #28]
 8017b92:	691b      	ldr	r3, [r3, #16]
 8017b94:	431a      	orrs	r2, r3
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	695b      	ldr	r3, [r3, #20]
 8017b9a:	431a      	orrs	r2, r3
 8017b9c:	69fb      	ldr	r3, [r7, #28]
 8017b9e:	69db      	ldr	r3, [r3, #28]
 8017ba0:	4313      	orrs	r3, r2
 8017ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017ba4:	69fb      	ldr	r3, [r7, #28]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	4ac3      	ldr	r2, [pc, #780]	@ (8017eb8 <UART_SetConfig+0x340>)
 8017bac:	4013      	ands	r3, r2
 8017bae:	0019      	movs	r1, r3
 8017bb0:	69fb      	ldr	r3, [r7, #28]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017bb6:	430a      	orrs	r2, r1
 8017bb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017bba:	69fb      	ldr	r3, [r7, #28]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	4abe      	ldr	r2, [pc, #760]	@ (8017ebc <UART_SetConfig+0x344>)
 8017bc2:	4013      	ands	r3, r2
 8017bc4:	0019      	movs	r1, r3
 8017bc6:	69fb      	ldr	r3, [r7, #28]
 8017bc8:	68da      	ldr	r2, [r3, #12]
 8017bca:	69fb      	ldr	r3, [r7, #28]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	430a      	orrs	r2, r1
 8017bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	699b      	ldr	r3, [r3, #24]
 8017bd6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017bd8:	69fb      	ldr	r3, [r7, #28]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	4ab8      	ldr	r2, [pc, #736]	@ (8017ec0 <UART_SetConfig+0x348>)
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d004      	beq.n	8017bec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017be2:	69fb      	ldr	r3, [r7, #28]
 8017be4:	6a1b      	ldr	r3, [r3, #32]
 8017be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017be8:	4313      	orrs	r3, r2
 8017bea:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017bec:	69fb      	ldr	r3, [r7, #28]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	689b      	ldr	r3, [r3, #8]
 8017bf2:	4ab4      	ldr	r2, [pc, #720]	@ (8017ec4 <UART_SetConfig+0x34c>)
 8017bf4:	4013      	ands	r3, r2
 8017bf6:	0019      	movs	r1, r3
 8017bf8:	69fb      	ldr	r3, [r7, #28]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017bfe:	430a      	orrs	r2, r1
 8017c00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017c02:	69fb      	ldr	r3, [r7, #28]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	4ab0      	ldr	r2, [pc, #704]	@ (8017ec8 <UART_SetConfig+0x350>)
 8017c08:	4293      	cmp	r3, r2
 8017c0a:	d131      	bne.n	8017c70 <UART_SetConfig+0xf8>
 8017c0c:	4baf      	ldr	r3, [pc, #700]	@ (8017ecc <UART_SetConfig+0x354>)
 8017c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c10:	2203      	movs	r2, #3
 8017c12:	4013      	ands	r3, r2
 8017c14:	2b03      	cmp	r3, #3
 8017c16:	d01d      	beq.n	8017c54 <UART_SetConfig+0xdc>
 8017c18:	d823      	bhi.n	8017c62 <UART_SetConfig+0xea>
 8017c1a:	2b02      	cmp	r3, #2
 8017c1c:	d00c      	beq.n	8017c38 <UART_SetConfig+0xc0>
 8017c1e:	d820      	bhi.n	8017c62 <UART_SetConfig+0xea>
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d002      	beq.n	8017c2a <UART_SetConfig+0xb2>
 8017c24:	2b01      	cmp	r3, #1
 8017c26:	d00e      	beq.n	8017c46 <UART_SetConfig+0xce>
 8017c28:	e01b      	b.n	8017c62 <UART_SetConfig+0xea>
 8017c2a:	231b      	movs	r3, #27
 8017c2c:	2218      	movs	r2, #24
 8017c2e:	189b      	adds	r3, r3, r2
 8017c30:	19db      	adds	r3, r3, r7
 8017c32:	2201      	movs	r2, #1
 8017c34:	701a      	strb	r2, [r3, #0]
 8017c36:	e0b4      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017c38:	231b      	movs	r3, #27
 8017c3a:	2218      	movs	r2, #24
 8017c3c:	189b      	adds	r3, r3, r2
 8017c3e:	19db      	adds	r3, r3, r7
 8017c40:	2202      	movs	r2, #2
 8017c42:	701a      	strb	r2, [r3, #0]
 8017c44:	e0ad      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017c46:	231b      	movs	r3, #27
 8017c48:	2218      	movs	r2, #24
 8017c4a:	189b      	adds	r3, r3, r2
 8017c4c:	19db      	adds	r3, r3, r7
 8017c4e:	2204      	movs	r2, #4
 8017c50:	701a      	strb	r2, [r3, #0]
 8017c52:	e0a6      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017c54:	231b      	movs	r3, #27
 8017c56:	2218      	movs	r2, #24
 8017c58:	189b      	adds	r3, r3, r2
 8017c5a:	19db      	adds	r3, r3, r7
 8017c5c:	2208      	movs	r2, #8
 8017c5e:	701a      	strb	r2, [r3, #0]
 8017c60:	e09f      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017c62:	231b      	movs	r3, #27
 8017c64:	2218      	movs	r2, #24
 8017c66:	189b      	adds	r3, r3, r2
 8017c68:	19db      	adds	r3, r3, r7
 8017c6a:	2210      	movs	r2, #16
 8017c6c:	701a      	strb	r2, [r3, #0]
 8017c6e:	e098      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017c70:	69fb      	ldr	r3, [r7, #28]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	4a96      	ldr	r2, [pc, #600]	@ (8017ed0 <UART_SetConfig+0x358>)
 8017c76:	4293      	cmp	r3, r2
 8017c78:	d131      	bne.n	8017cde <UART_SetConfig+0x166>
 8017c7a:	4b94      	ldr	r3, [pc, #592]	@ (8017ecc <UART_SetConfig+0x354>)
 8017c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c7e:	220c      	movs	r2, #12
 8017c80:	4013      	ands	r3, r2
 8017c82:	2b0c      	cmp	r3, #12
 8017c84:	d01d      	beq.n	8017cc2 <UART_SetConfig+0x14a>
 8017c86:	d823      	bhi.n	8017cd0 <UART_SetConfig+0x158>
 8017c88:	2b08      	cmp	r3, #8
 8017c8a:	d00c      	beq.n	8017ca6 <UART_SetConfig+0x12e>
 8017c8c:	d820      	bhi.n	8017cd0 <UART_SetConfig+0x158>
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d002      	beq.n	8017c98 <UART_SetConfig+0x120>
 8017c92:	2b04      	cmp	r3, #4
 8017c94:	d00e      	beq.n	8017cb4 <UART_SetConfig+0x13c>
 8017c96:	e01b      	b.n	8017cd0 <UART_SetConfig+0x158>
 8017c98:	231b      	movs	r3, #27
 8017c9a:	2218      	movs	r2, #24
 8017c9c:	189b      	adds	r3, r3, r2
 8017c9e:	19db      	adds	r3, r3, r7
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	701a      	strb	r2, [r3, #0]
 8017ca4:	e07d      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017ca6:	231b      	movs	r3, #27
 8017ca8:	2218      	movs	r2, #24
 8017caa:	189b      	adds	r3, r3, r2
 8017cac:	19db      	adds	r3, r3, r7
 8017cae:	2202      	movs	r2, #2
 8017cb0:	701a      	strb	r2, [r3, #0]
 8017cb2:	e076      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017cb4:	231b      	movs	r3, #27
 8017cb6:	2218      	movs	r2, #24
 8017cb8:	189b      	adds	r3, r3, r2
 8017cba:	19db      	adds	r3, r3, r7
 8017cbc:	2204      	movs	r2, #4
 8017cbe:	701a      	strb	r2, [r3, #0]
 8017cc0:	e06f      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017cc2:	231b      	movs	r3, #27
 8017cc4:	2218      	movs	r2, #24
 8017cc6:	189b      	adds	r3, r3, r2
 8017cc8:	19db      	adds	r3, r3, r7
 8017cca:	2208      	movs	r2, #8
 8017ccc:	701a      	strb	r2, [r3, #0]
 8017cce:	e068      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017cd0:	231b      	movs	r3, #27
 8017cd2:	2218      	movs	r2, #24
 8017cd4:	189b      	adds	r3, r3, r2
 8017cd6:	19db      	adds	r3, r3, r7
 8017cd8:	2210      	movs	r2, #16
 8017cda:	701a      	strb	r2, [r3, #0]
 8017cdc:	e061      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017cde:	69fb      	ldr	r3, [r7, #28]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8017ed4 <UART_SetConfig+0x35c>)
 8017ce4:	4293      	cmp	r3, r2
 8017ce6:	d106      	bne.n	8017cf6 <UART_SetConfig+0x17e>
 8017ce8:	231b      	movs	r3, #27
 8017cea:	2218      	movs	r2, #24
 8017cec:	189b      	adds	r3, r3, r2
 8017cee:	19db      	adds	r3, r3, r7
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	701a      	strb	r2, [r3, #0]
 8017cf4:	e055      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017cf6:	69fb      	ldr	r3, [r7, #28]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	4a77      	ldr	r2, [pc, #476]	@ (8017ed8 <UART_SetConfig+0x360>)
 8017cfc:	4293      	cmp	r3, r2
 8017cfe:	d106      	bne.n	8017d0e <UART_SetConfig+0x196>
 8017d00:	231b      	movs	r3, #27
 8017d02:	2218      	movs	r2, #24
 8017d04:	189b      	adds	r3, r3, r2
 8017d06:	19db      	adds	r3, r3, r7
 8017d08:	2200      	movs	r2, #0
 8017d0a:	701a      	strb	r2, [r3, #0]
 8017d0c:	e049      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017d0e:	69fb      	ldr	r3, [r7, #28]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	4a6b      	ldr	r2, [pc, #428]	@ (8017ec0 <UART_SetConfig+0x348>)
 8017d14:	4293      	cmp	r3, r2
 8017d16:	d13e      	bne.n	8017d96 <UART_SetConfig+0x21e>
 8017d18:	4b6c      	ldr	r3, [pc, #432]	@ (8017ecc <UART_SetConfig+0x354>)
 8017d1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017d1c:	23c0      	movs	r3, #192	@ 0xc0
 8017d1e:	011b      	lsls	r3, r3, #4
 8017d20:	4013      	ands	r3, r2
 8017d22:	22c0      	movs	r2, #192	@ 0xc0
 8017d24:	0112      	lsls	r2, r2, #4
 8017d26:	4293      	cmp	r3, r2
 8017d28:	d027      	beq.n	8017d7a <UART_SetConfig+0x202>
 8017d2a:	22c0      	movs	r2, #192	@ 0xc0
 8017d2c:	0112      	lsls	r2, r2, #4
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d82a      	bhi.n	8017d88 <UART_SetConfig+0x210>
 8017d32:	2280      	movs	r2, #128	@ 0x80
 8017d34:	0112      	lsls	r2, r2, #4
 8017d36:	4293      	cmp	r3, r2
 8017d38:	d011      	beq.n	8017d5e <UART_SetConfig+0x1e6>
 8017d3a:	2280      	movs	r2, #128	@ 0x80
 8017d3c:	0112      	lsls	r2, r2, #4
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	d822      	bhi.n	8017d88 <UART_SetConfig+0x210>
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d004      	beq.n	8017d50 <UART_SetConfig+0x1d8>
 8017d46:	2280      	movs	r2, #128	@ 0x80
 8017d48:	00d2      	lsls	r2, r2, #3
 8017d4a:	4293      	cmp	r3, r2
 8017d4c:	d00e      	beq.n	8017d6c <UART_SetConfig+0x1f4>
 8017d4e:	e01b      	b.n	8017d88 <UART_SetConfig+0x210>
 8017d50:	231b      	movs	r3, #27
 8017d52:	2218      	movs	r2, #24
 8017d54:	189b      	adds	r3, r3, r2
 8017d56:	19db      	adds	r3, r3, r7
 8017d58:	2200      	movs	r2, #0
 8017d5a:	701a      	strb	r2, [r3, #0]
 8017d5c:	e021      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017d5e:	231b      	movs	r3, #27
 8017d60:	2218      	movs	r2, #24
 8017d62:	189b      	adds	r3, r3, r2
 8017d64:	19db      	adds	r3, r3, r7
 8017d66:	2202      	movs	r2, #2
 8017d68:	701a      	strb	r2, [r3, #0]
 8017d6a:	e01a      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017d6c:	231b      	movs	r3, #27
 8017d6e:	2218      	movs	r2, #24
 8017d70:	189b      	adds	r3, r3, r2
 8017d72:	19db      	adds	r3, r3, r7
 8017d74:	2204      	movs	r2, #4
 8017d76:	701a      	strb	r2, [r3, #0]
 8017d78:	e013      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017d7a:	231b      	movs	r3, #27
 8017d7c:	2218      	movs	r2, #24
 8017d7e:	189b      	adds	r3, r3, r2
 8017d80:	19db      	adds	r3, r3, r7
 8017d82:	2208      	movs	r2, #8
 8017d84:	701a      	strb	r2, [r3, #0]
 8017d86:	e00c      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017d88:	231b      	movs	r3, #27
 8017d8a:	2218      	movs	r2, #24
 8017d8c:	189b      	adds	r3, r3, r2
 8017d8e:	19db      	adds	r3, r3, r7
 8017d90:	2210      	movs	r2, #16
 8017d92:	701a      	strb	r2, [r3, #0]
 8017d94:	e005      	b.n	8017da2 <UART_SetConfig+0x22a>
 8017d96:	231b      	movs	r3, #27
 8017d98:	2218      	movs	r2, #24
 8017d9a:	189b      	adds	r3, r3, r2
 8017d9c:	19db      	adds	r3, r3, r7
 8017d9e:	2210      	movs	r2, #16
 8017da0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017da2:	69fb      	ldr	r3, [r7, #28]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	4a46      	ldr	r2, [pc, #280]	@ (8017ec0 <UART_SetConfig+0x348>)
 8017da8:	4293      	cmp	r3, r2
 8017daa:	d000      	beq.n	8017dae <UART_SetConfig+0x236>
 8017dac:	e09a      	b.n	8017ee4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017dae:	231b      	movs	r3, #27
 8017db0:	2218      	movs	r2, #24
 8017db2:	189b      	adds	r3, r3, r2
 8017db4:	19db      	adds	r3, r3, r7
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	2b08      	cmp	r3, #8
 8017dba:	d01d      	beq.n	8017df8 <UART_SetConfig+0x280>
 8017dbc:	dc20      	bgt.n	8017e00 <UART_SetConfig+0x288>
 8017dbe:	2b04      	cmp	r3, #4
 8017dc0:	d015      	beq.n	8017dee <UART_SetConfig+0x276>
 8017dc2:	dc1d      	bgt.n	8017e00 <UART_SetConfig+0x288>
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d002      	beq.n	8017dce <UART_SetConfig+0x256>
 8017dc8:	2b02      	cmp	r3, #2
 8017dca:	d005      	beq.n	8017dd8 <UART_SetConfig+0x260>
 8017dcc:	e018      	b.n	8017e00 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017dce:	f7fd fe4b 	bl	8015a68 <HAL_RCC_GetPCLK1Freq>
 8017dd2:	0003      	movs	r3, r0
 8017dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017dd6:	e01c      	b.n	8017e12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8017ecc <UART_SetConfig+0x354>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	2210      	movs	r2, #16
 8017dde:	4013      	ands	r3, r2
 8017de0:	d002      	beq.n	8017de8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017de2:	4b3e      	ldr	r3, [pc, #248]	@ (8017edc <UART_SetConfig+0x364>)
 8017de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017de6:	e014      	b.n	8017e12 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017de8:	4b3d      	ldr	r3, [pc, #244]	@ (8017ee0 <UART_SetConfig+0x368>)
 8017dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017dec:	e011      	b.n	8017e12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017dee:	f7fd fd8b 	bl	8015908 <HAL_RCC_GetSysClockFreq>
 8017df2:	0003      	movs	r3, r0
 8017df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017df6:	e00c      	b.n	8017e12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017df8:	2380      	movs	r3, #128	@ 0x80
 8017dfa:	021b      	lsls	r3, r3, #8
 8017dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017dfe:	e008      	b.n	8017e12 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017e00:	2300      	movs	r3, #0
 8017e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017e04:	231a      	movs	r3, #26
 8017e06:	2218      	movs	r2, #24
 8017e08:	189b      	adds	r3, r3, r2
 8017e0a:	19db      	adds	r3, r3, r7
 8017e0c:	2201      	movs	r2, #1
 8017e0e:	701a      	strb	r2, [r3, #0]
        break;
 8017e10:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d100      	bne.n	8017e1a <UART_SetConfig+0x2a2>
 8017e18:	e133      	b.n	8018082 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017e1a:	69fb      	ldr	r3, [r7, #28]
 8017e1c:	685a      	ldr	r2, [r3, #4]
 8017e1e:	0013      	movs	r3, r2
 8017e20:	005b      	lsls	r3, r3, #1
 8017e22:	189b      	adds	r3, r3, r2
 8017e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e26:	429a      	cmp	r2, r3
 8017e28:	d305      	bcc.n	8017e36 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017e2a:	69fb      	ldr	r3, [r7, #28]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d906      	bls.n	8017e44 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017e36:	231a      	movs	r3, #26
 8017e38:	2218      	movs	r2, #24
 8017e3a:	189b      	adds	r3, r3, r2
 8017e3c:	19db      	adds	r3, r3, r7
 8017e3e:	2201      	movs	r2, #1
 8017e40:	701a      	strb	r2, [r3, #0]
 8017e42:	e11e      	b.n	8018082 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e46:	613b      	str	r3, [r7, #16]
 8017e48:	2300      	movs	r3, #0
 8017e4a:	617b      	str	r3, [r7, #20]
 8017e4c:	6939      	ldr	r1, [r7, #16]
 8017e4e:	697a      	ldr	r2, [r7, #20]
 8017e50:	000b      	movs	r3, r1
 8017e52:	0e1b      	lsrs	r3, r3, #24
 8017e54:	0010      	movs	r0, r2
 8017e56:	0205      	lsls	r5, r0, #8
 8017e58:	431d      	orrs	r5, r3
 8017e5a:	000b      	movs	r3, r1
 8017e5c:	021c      	lsls	r4, r3, #8
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	685b      	ldr	r3, [r3, #4]
 8017e62:	085b      	lsrs	r3, r3, #1
 8017e64:	60bb      	str	r3, [r7, #8]
 8017e66:	2300      	movs	r3, #0
 8017e68:	60fb      	str	r3, [r7, #12]
 8017e6a:	68b8      	ldr	r0, [r7, #8]
 8017e6c:	68f9      	ldr	r1, [r7, #12]
 8017e6e:	1900      	adds	r0, r0, r4
 8017e70:	4169      	adcs	r1, r5
 8017e72:	69fb      	ldr	r3, [r7, #28]
 8017e74:	685b      	ldr	r3, [r3, #4]
 8017e76:	603b      	str	r3, [r7, #0]
 8017e78:	2300      	movs	r3, #0
 8017e7a:	607b      	str	r3, [r7, #4]
 8017e7c:	683a      	ldr	r2, [r7, #0]
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f7e8 fb7e 	bl	8000580 <__aeabi_uldivmod>
 8017e84:	0002      	movs	r2, r0
 8017e86:	000b      	movs	r3, r1
 8017e88:	0013      	movs	r3, r2
 8017e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e8e:	23c0      	movs	r3, #192	@ 0xc0
 8017e90:	009b      	lsls	r3, r3, #2
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d309      	bcc.n	8017eaa <UART_SetConfig+0x332>
 8017e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e98:	2380      	movs	r3, #128	@ 0x80
 8017e9a:	035b      	lsls	r3, r3, #13
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d204      	bcs.n	8017eaa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ea6:	60da      	str	r2, [r3, #12]
 8017ea8:	e0eb      	b.n	8018082 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017eaa:	231a      	movs	r3, #26
 8017eac:	2218      	movs	r2, #24
 8017eae:	189b      	adds	r3, r3, r2
 8017eb0:	19db      	adds	r3, r3, r7
 8017eb2:	2201      	movs	r2, #1
 8017eb4:	701a      	strb	r2, [r3, #0]
 8017eb6:	e0e4      	b.n	8018082 <UART_SetConfig+0x50a>
 8017eb8:	efff69f3 	.word	0xefff69f3
 8017ebc:	ffffcfff 	.word	0xffffcfff
 8017ec0:	40004800 	.word	0x40004800
 8017ec4:	fffff4ff 	.word	0xfffff4ff
 8017ec8:	40013800 	.word	0x40013800
 8017ecc:	40021000 	.word	0x40021000
 8017ed0:	40004400 	.word	0x40004400
 8017ed4:	40004c00 	.word	0x40004c00
 8017ed8:	40005000 	.word	0x40005000
 8017edc:	003d0900 	.word	0x003d0900
 8017ee0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017ee4:	69fb      	ldr	r3, [r7, #28]
 8017ee6:	69da      	ldr	r2, [r3, #28]
 8017ee8:	2380      	movs	r3, #128	@ 0x80
 8017eea:	021b      	lsls	r3, r3, #8
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d000      	beq.n	8017ef2 <UART_SetConfig+0x37a>
 8017ef0:	e070      	b.n	8017fd4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017ef2:	231b      	movs	r3, #27
 8017ef4:	2218      	movs	r2, #24
 8017ef6:	189b      	adds	r3, r3, r2
 8017ef8:	19db      	adds	r3, r3, r7
 8017efa:	781b      	ldrb	r3, [r3, #0]
 8017efc:	2b08      	cmp	r3, #8
 8017efe:	d822      	bhi.n	8017f46 <UART_SetConfig+0x3ce>
 8017f00:	009a      	lsls	r2, r3, #2
 8017f02:	4b67      	ldr	r3, [pc, #412]	@ (80180a0 <UART_SetConfig+0x528>)
 8017f04:	18d3      	adds	r3, r2, r3
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017f0a:	f7fd fdad 	bl	8015a68 <HAL_RCC_GetPCLK1Freq>
 8017f0e:	0003      	movs	r3, r0
 8017f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f12:	e021      	b.n	8017f58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017f14:	f7fd fdbe 	bl	8015a94 <HAL_RCC_GetPCLK2Freq>
 8017f18:	0003      	movs	r3, r0
 8017f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f1c:	e01c      	b.n	8017f58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017f1e:	4b61      	ldr	r3, [pc, #388]	@ (80180a4 <UART_SetConfig+0x52c>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	2210      	movs	r2, #16
 8017f24:	4013      	ands	r3, r2
 8017f26:	d002      	beq.n	8017f2e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017f28:	4b5f      	ldr	r3, [pc, #380]	@ (80180a8 <UART_SetConfig+0x530>)
 8017f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017f2c:	e014      	b.n	8017f58 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8017f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80180ac <UART_SetConfig+0x534>)
 8017f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f32:	e011      	b.n	8017f58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017f34:	f7fd fce8 	bl	8015908 <HAL_RCC_GetSysClockFreq>
 8017f38:	0003      	movs	r3, r0
 8017f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f3c:	e00c      	b.n	8017f58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017f3e:	2380      	movs	r3, #128	@ 0x80
 8017f40:	021b      	lsls	r3, r3, #8
 8017f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f44:	e008      	b.n	8017f58 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8017f46:	2300      	movs	r3, #0
 8017f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017f4a:	231a      	movs	r3, #26
 8017f4c:	2218      	movs	r2, #24
 8017f4e:	189b      	adds	r3, r3, r2
 8017f50:	19db      	adds	r3, r3, r7
 8017f52:	2201      	movs	r2, #1
 8017f54:	701a      	strb	r2, [r3, #0]
        break;
 8017f56:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d100      	bne.n	8017f60 <UART_SetConfig+0x3e8>
 8017f5e:	e090      	b.n	8018082 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f62:	005a      	lsls	r2, r3, #1
 8017f64:	69fb      	ldr	r3, [r7, #28]
 8017f66:	685b      	ldr	r3, [r3, #4]
 8017f68:	085b      	lsrs	r3, r3, #1
 8017f6a:	18d2      	adds	r2, r2, r3
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	0019      	movs	r1, r3
 8017f72:	0010      	movs	r0, r2
 8017f74:	f7e8 f916 	bl	80001a4 <__udivsi3>
 8017f78:	0003      	movs	r3, r0
 8017f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f7e:	2b0f      	cmp	r3, #15
 8017f80:	d921      	bls.n	8017fc6 <UART_SetConfig+0x44e>
 8017f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f84:	2380      	movs	r3, #128	@ 0x80
 8017f86:	025b      	lsls	r3, r3, #9
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	d21c      	bcs.n	8017fc6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f8e:	b29a      	uxth	r2, r3
 8017f90:	200e      	movs	r0, #14
 8017f92:	2418      	movs	r4, #24
 8017f94:	1903      	adds	r3, r0, r4
 8017f96:	19db      	adds	r3, r3, r7
 8017f98:	210f      	movs	r1, #15
 8017f9a:	438a      	bics	r2, r1
 8017f9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fa0:	085b      	lsrs	r3, r3, #1
 8017fa2:	b29b      	uxth	r3, r3
 8017fa4:	2207      	movs	r2, #7
 8017fa6:	4013      	ands	r3, r2
 8017fa8:	b299      	uxth	r1, r3
 8017faa:	1903      	adds	r3, r0, r4
 8017fac:	19db      	adds	r3, r3, r7
 8017fae:	1902      	adds	r2, r0, r4
 8017fb0:	19d2      	adds	r2, r2, r7
 8017fb2:	8812      	ldrh	r2, [r2, #0]
 8017fb4:	430a      	orrs	r2, r1
 8017fb6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8017fb8:	69fb      	ldr	r3, [r7, #28]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	1902      	adds	r2, r0, r4
 8017fbe:	19d2      	adds	r2, r2, r7
 8017fc0:	8812      	ldrh	r2, [r2, #0]
 8017fc2:	60da      	str	r2, [r3, #12]
 8017fc4:	e05d      	b.n	8018082 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017fc6:	231a      	movs	r3, #26
 8017fc8:	2218      	movs	r2, #24
 8017fca:	189b      	adds	r3, r3, r2
 8017fcc:	19db      	adds	r3, r3, r7
 8017fce:	2201      	movs	r2, #1
 8017fd0:	701a      	strb	r2, [r3, #0]
 8017fd2:	e056      	b.n	8018082 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8017fd4:	231b      	movs	r3, #27
 8017fd6:	2218      	movs	r2, #24
 8017fd8:	189b      	adds	r3, r3, r2
 8017fda:	19db      	adds	r3, r3, r7
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	2b08      	cmp	r3, #8
 8017fe0:	d822      	bhi.n	8018028 <UART_SetConfig+0x4b0>
 8017fe2:	009a      	lsls	r2, r3, #2
 8017fe4:	4b32      	ldr	r3, [pc, #200]	@ (80180b0 <UART_SetConfig+0x538>)
 8017fe6:	18d3      	adds	r3, r2, r3
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017fec:	f7fd fd3c 	bl	8015a68 <HAL_RCC_GetPCLK1Freq>
 8017ff0:	0003      	movs	r3, r0
 8017ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ff4:	e021      	b.n	801803a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017ff6:	f7fd fd4d 	bl	8015a94 <HAL_RCC_GetPCLK2Freq>
 8017ffa:	0003      	movs	r3, r0
 8017ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ffe:	e01c      	b.n	801803a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018000:	4b28      	ldr	r3, [pc, #160]	@ (80180a4 <UART_SetConfig+0x52c>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	2210      	movs	r2, #16
 8018006:	4013      	ands	r3, r2
 8018008:	d002      	beq.n	8018010 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801800a:	4b27      	ldr	r3, [pc, #156]	@ (80180a8 <UART_SetConfig+0x530>)
 801800c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801800e:	e014      	b.n	801803a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018010:	4b26      	ldr	r3, [pc, #152]	@ (80180ac <UART_SetConfig+0x534>)
 8018012:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018014:	e011      	b.n	801803a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018016:	f7fd fc77 	bl	8015908 <HAL_RCC_GetSysClockFreq>
 801801a:	0003      	movs	r3, r0
 801801c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801801e:	e00c      	b.n	801803a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018020:	2380      	movs	r3, #128	@ 0x80
 8018022:	021b      	lsls	r3, r3, #8
 8018024:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018026:	e008      	b.n	801803a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018028:	2300      	movs	r3, #0
 801802a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801802c:	231a      	movs	r3, #26
 801802e:	2218      	movs	r2, #24
 8018030:	189b      	adds	r3, r3, r2
 8018032:	19db      	adds	r3, r3, r7
 8018034:	2201      	movs	r2, #1
 8018036:	701a      	strb	r2, [r3, #0]
        break;
 8018038:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801803a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801803c:	2b00      	cmp	r3, #0
 801803e:	d020      	beq.n	8018082 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	085a      	lsrs	r2, r3, #1
 8018046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018048:	18d2      	adds	r2, r2, r3
 801804a:	69fb      	ldr	r3, [r7, #28]
 801804c:	685b      	ldr	r3, [r3, #4]
 801804e:	0019      	movs	r1, r3
 8018050:	0010      	movs	r0, r2
 8018052:	f7e8 f8a7 	bl	80001a4 <__udivsi3>
 8018056:	0003      	movs	r3, r0
 8018058:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801805a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801805c:	2b0f      	cmp	r3, #15
 801805e:	d90a      	bls.n	8018076 <UART_SetConfig+0x4fe>
 8018060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018062:	2380      	movs	r3, #128	@ 0x80
 8018064:	025b      	lsls	r3, r3, #9
 8018066:	429a      	cmp	r2, r3
 8018068:	d205      	bcs.n	8018076 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801806a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801806c:	b29a      	uxth	r2, r3
 801806e:	69fb      	ldr	r3, [r7, #28]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	60da      	str	r2, [r3, #12]
 8018074:	e005      	b.n	8018082 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8018076:	231a      	movs	r3, #26
 8018078:	2218      	movs	r2, #24
 801807a:	189b      	adds	r3, r3, r2
 801807c:	19db      	adds	r3, r3, r7
 801807e:	2201      	movs	r2, #1
 8018080:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018082:	69fb      	ldr	r3, [r7, #28]
 8018084:	2200      	movs	r2, #0
 8018086:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	2200      	movs	r2, #0
 801808c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801808e:	231a      	movs	r3, #26
 8018090:	2218      	movs	r2, #24
 8018092:	189b      	adds	r3, r3, r2
 8018094:	19db      	adds	r3, r3, r7
 8018096:	781b      	ldrb	r3, [r3, #0]
}
 8018098:	0018      	movs	r0, r3
 801809a:	46bd      	mov	sp, r7
 801809c:	b00e      	add	sp, #56	@ 0x38
 801809e:	bdb0      	pop	{r4, r5, r7, pc}
 80180a0:	080255a8 	.word	0x080255a8
 80180a4:	40021000 	.word	0x40021000
 80180a8:	003d0900 	.word	0x003d0900
 80180ac:	00f42400 	.word	0x00f42400
 80180b0:	080255cc 	.word	0x080255cc

080180b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180c0:	2201      	movs	r2, #1
 80180c2:	4013      	ands	r3, r2
 80180c4:	d00b      	beq.n	80180de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	4a4a      	ldr	r2, [pc, #296]	@ (80181f8 <UART_AdvFeatureConfig+0x144>)
 80180ce:	4013      	ands	r3, r2
 80180d0:	0019      	movs	r1, r3
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	430a      	orrs	r2, r1
 80180dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180e2:	2202      	movs	r2, #2
 80180e4:	4013      	ands	r3, r2
 80180e6:	d00b      	beq.n	8018100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	4a43      	ldr	r2, [pc, #268]	@ (80181fc <UART_AdvFeatureConfig+0x148>)
 80180f0:	4013      	ands	r3, r2
 80180f2:	0019      	movs	r1, r3
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	430a      	orrs	r2, r1
 80180fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018104:	2204      	movs	r2, #4
 8018106:	4013      	ands	r3, r2
 8018108:	d00b      	beq.n	8018122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	685b      	ldr	r3, [r3, #4]
 8018110:	4a3b      	ldr	r2, [pc, #236]	@ (8018200 <UART_AdvFeatureConfig+0x14c>)
 8018112:	4013      	ands	r3, r2
 8018114:	0019      	movs	r1, r3
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	430a      	orrs	r2, r1
 8018120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018126:	2208      	movs	r2, #8
 8018128:	4013      	ands	r3, r2
 801812a:	d00b      	beq.n	8018144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	685b      	ldr	r3, [r3, #4]
 8018132:	4a34      	ldr	r2, [pc, #208]	@ (8018204 <UART_AdvFeatureConfig+0x150>)
 8018134:	4013      	ands	r3, r2
 8018136:	0019      	movs	r1, r3
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	430a      	orrs	r2, r1
 8018142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018148:	2210      	movs	r2, #16
 801814a:	4013      	ands	r3, r2
 801814c:	d00b      	beq.n	8018166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	689b      	ldr	r3, [r3, #8]
 8018154:	4a2c      	ldr	r2, [pc, #176]	@ (8018208 <UART_AdvFeatureConfig+0x154>)
 8018156:	4013      	ands	r3, r2
 8018158:	0019      	movs	r1, r3
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	430a      	orrs	r2, r1
 8018164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801816a:	2220      	movs	r2, #32
 801816c:	4013      	ands	r3, r2
 801816e:	d00b      	beq.n	8018188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	689b      	ldr	r3, [r3, #8]
 8018176:	4a25      	ldr	r2, [pc, #148]	@ (801820c <UART_AdvFeatureConfig+0x158>)
 8018178:	4013      	ands	r3, r2
 801817a:	0019      	movs	r1, r3
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	430a      	orrs	r2, r1
 8018186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801818c:	2240      	movs	r2, #64	@ 0x40
 801818e:	4013      	ands	r3, r2
 8018190:	d01d      	beq.n	80181ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	4a1d      	ldr	r2, [pc, #116]	@ (8018210 <UART_AdvFeatureConfig+0x15c>)
 801819a:	4013      	ands	r3, r2
 801819c:	0019      	movs	r1, r3
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	430a      	orrs	r2, r1
 80181a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80181ae:	2380      	movs	r3, #128	@ 0x80
 80181b0:	035b      	lsls	r3, r3, #13
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d10b      	bne.n	80181ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	685b      	ldr	r3, [r3, #4]
 80181bc:	4a15      	ldr	r2, [pc, #84]	@ (8018214 <UART_AdvFeatureConfig+0x160>)
 80181be:	4013      	ands	r3, r2
 80181c0:	0019      	movs	r1, r3
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	430a      	orrs	r2, r1
 80181cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181d2:	2280      	movs	r2, #128	@ 0x80
 80181d4:	4013      	ands	r3, r2
 80181d6:	d00b      	beq.n	80181f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	4a0e      	ldr	r2, [pc, #56]	@ (8018218 <UART_AdvFeatureConfig+0x164>)
 80181e0:	4013      	ands	r3, r2
 80181e2:	0019      	movs	r1, r3
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	430a      	orrs	r2, r1
 80181ee:	605a      	str	r2, [r3, #4]
  }
}
 80181f0:	46c0      	nop			@ (mov r8, r8)
 80181f2:	46bd      	mov	sp, r7
 80181f4:	b002      	add	sp, #8
 80181f6:	bd80      	pop	{r7, pc}
 80181f8:	fffdffff 	.word	0xfffdffff
 80181fc:	fffeffff 	.word	0xfffeffff
 8018200:	fffbffff 	.word	0xfffbffff
 8018204:	ffff7fff 	.word	0xffff7fff
 8018208:	ffffefff 	.word	0xffffefff
 801820c:	ffffdfff 	.word	0xffffdfff
 8018210:	ffefffff 	.word	0xffefffff
 8018214:	ff9fffff 	.word	0xff9fffff
 8018218:	fff7ffff 	.word	0xfff7ffff

0801821c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b092      	sub	sp, #72	@ 0x48
 8018220:	af02      	add	r7, sp, #8
 8018222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	2284      	movs	r2, #132	@ 0x84
 8018228:	2100      	movs	r1, #0
 801822a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801822c:	f7f6 fd20 	bl	800ec70 <HAL_GetTick>
 8018230:	0003      	movs	r3, r0
 8018232:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	2208      	movs	r2, #8
 801823c:	4013      	ands	r3, r2
 801823e:	2b08      	cmp	r3, #8
 8018240:	d12c      	bne.n	801829c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018244:	2280      	movs	r2, #128	@ 0x80
 8018246:	0391      	lsls	r1, r2, #14
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	4a46      	ldr	r2, [pc, #280]	@ (8018364 <UART_CheckIdleState+0x148>)
 801824c:	9200      	str	r2, [sp, #0]
 801824e:	2200      	movs	r2, #0
 8018250:	f000 f88c 	bl	801836c <UART_WaitOnFlagUntilTimeout>
 8018254:	1e03      	subs	r3, r0, #0
 8018256:	d021      	beq.n	801829c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018258:	f3ef 8310 	mrs	r3, PRIMASK
 801825c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018262:	2301      	movs	r3, #1
 8018264:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018268:	f383 8810 	msr	PRIMASK, r3
}
 801826c:	46c0      	nop			@ (mov r8, r8)
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	681a      	ldr	r2, [r3, #0]
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	2180      	movs	r1, #128	@ 0x80
 801827a:	438a      	bics	r2, r1
 801827c:	601a      	str	r2, [r3, #0]
 801827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018284:	f383 8810 	msr	PRIMASK, r3
}
 8018288:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2220      	movs	r2, #32
 801828e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	2278      	movs	r2, #120	@ 0x78
 8018294:	2100      	movs	r1, #0
 8018296:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018298:	2303      	movs	r3, #3
 801829a:	e05f      	b.n	801835c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	2204      	movs	r2, #4
 80182a4:	4013      	ands	r3, r2
 80182a6:	2b04      	cmp	r3, #4
 80182a8:	d146      	bne.n	8018338 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80182aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182ac:	2280      	movs	r2, #128	@ 0x80
 80182ae:	03d1      	lsls	r1, r2, #15
 80182b0:	6878      	ldr	r0, [r7, #4]
 80182b2:	4a2c      	ldr	r2, [pc, #176]	@ (8018364 <UART_CheckIdleState+0x148>)
 80182b4:	9200      	str	r2, [sp, #0]
 80182b6:	2200      	movs	r2, #0
 80182b8:	f000 f858 	bl	801836c <UART_WaitOnFlagUntilTimeout>
 80182bc:	1e03      	subs	r3, r0, #0
 80182be:	d03b      	beq.n	8018338 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182c0:	f3ef 8310 	mrs	r3, PRIMASK
 80182c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80182c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80182c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80182ca:	2301      	movs	r3, #1
 80182cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182ce:	693b      	ldr	r3, [r7, #16]
 80182d0:	f383 8810 	msr	PRIMASK, r3
}
 80182d4:	46c0      	nop			@ (mov r8, r8)
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	681a      	ldr	r2, [r3, #0]
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4921      	ldr	r1, [pc, #132]	@ (8018368 <UART_CheckIdleState+0x14c>)
 80182e2:	400a      	ands	r2, r1
 80182e4:	601a      	str	r2, [r3, #0]
 80182e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182ea:	697b      	ldr	r3, [r7, #20]
 80182ec:	f383 8810 	msr	PRIMASK, r3
}
 80182f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182f2:	f3ef 8310 	mrs	r3, PRIMASK
 80182f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80182f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80182fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80182fc:	2301      	movs	r3, #1
 80182fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018300:	69fb      	ldr	r3, [r7, #28]
 8018302:	f383 8810 	msr	PRIMASK, r3
}
 8018306:	46c0      	nop			@ (mov r8, r8)
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	689a      	ldr	r2, [r3, #8]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	2101      	movs	r1, #1
 8018314:	438a      	bics	r2, r1
 8018316:	609a      	str	r2, [r3, #8]
 8018318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801831a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801831c:	6a3b      	ldr	r3, [r7, #32]
 801831e:	f383 8810 	msr	PRIMASK, r3
}
 8018322:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2280      	movs	r2, #128	@ 0x80
 8018328:	2120      	movs	r1, #32
 801832a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2278      	movs	r2, #120	@ 0x78
 8018330:	2100      	movs	r1, #0
 8018332:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018334:	2303      	movs	r3, #3
 8018336:	e011      	b.n	801835c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	2220      	movs	r2, #32
 801833c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	2280      	movs	r2, #128	@ 0x80
 8018342:	2120      	movs	r1, #32
 8018344:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	2200      	movs	r2, #0
 801834a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2200      	movs	r2, #0
 8018350:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2278      	movs	r2, #120	@ 0x78
 8018356:	2100      	movs	r1, #0
 8018358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801835a:	2300      	movs	r3, #0
}
 801835c:	0018      	movs	r0, r3
 801835e:	46bd      	mov	sp, r7
 8018360:	b010      	add	sp, #64	@ 0x40
 8018362:	bd80      	pop	{r7, pc}
 8018364:	01ffffff 	.word	0x01ffffff
 8018368:	fffffedf 	.word	0xfffffedf

0801836c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	60f8      	str	r0, [r7, #12]
 8018374:	60b9      	str	r1, [r7, #8]
 8018376:	603b      	str	r3, [r7, #0]
 8018378:	1dfb      	adds	r3, r7, #7
 801837a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801837c:	e04b      	b.n	8018416 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801837e:	69bb      	ldr	r3, [r7, #24]
 8018380:	3301      	adds	r3, #1
 8018382:	d048      	beq.n	8018416 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018384:	f7f6 fc74 	bl	800ec70 <HAL_GetTick>
 8018388:	0002      	movs	r2, r0
 801838a:	683b      	ldr	r3, [r7, #0]
 801838c:	1ad3      	subs	r3, r2, r3
 801838e:	69ba      	ldr	r2, [r7, #24]
 8018390:	429a      	cmp	r2, r3
 8018392:	d302      	bcc.n	801839a <UART_WaitOnFlagUntilTimeout+0x2e>
 8018394:	69bb      	ldr	r3, [r7, #24]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d101      	bne.n	801839e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801839a:	2303      	movs	r3, #3
 801839c:	e04b      	b.n	8018436 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	2204      	movs	r2, #4
 80183a6:	4013      	ands	r3, r2
 80183a8:	d035      	beq.n	8018416 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	69db      	ldr	r3, [r3, #28]
 80183b0:	2208      	movs	r2, #8
 80183b2:	4013      	ands	r3, r2
 80183b4:	2b08      	cmp	r3, #8
 80183b6:	d111      	bne.n	80183dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	2208      	movs	r2, #8
 80183be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	0018      	movs	r0, r3
 80183c4:	f000 f9ca 	bl	801875c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	2284      	movs	r2, #132	@ 0x84
 80183cc:	2108      	movs	r1, #8
 80183ce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	2278      	movs	r2, #120	@ 0x78
 80183d4:	2100      	movs	r1, #0
 80183d6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80183d8:	2301      	movs	r3, #1
 80183da:	e02c      	b.n	8018436 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	69da      	ldr	r2, [r3, #28]
 80183e2:	2380      	movs	r3, #128	@ 0x80
 80183e4:	011b      	lsls	r3, r3, #4
 80183e6:	401a      	ands	r2, r3
 80183e8:	2380      	movs	r3, #128	@ 0x80
 80183ea:	011b      	lsls	r3, r3, #4
 80183ec:	429a      	cmp	r2, r3
 80183ee:	d112      	bne.n	8018416 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	2280      	movs	r2, #128	@ 0x80
 80183f6:	0112      	lsls	r2, r2, #4
 80183f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	0018      	movs	r0, r3
 80183fe:	f000 f9ad 	bl	801875c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	2284      	movs	r2, #132	@ 0x84
 8018406:	2120      	movs	r1, #32
 8018408:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	2278      	movs	r2, #120	@ 0x78
 801840e:	2100      	movs	r1, #0
 8018410:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018412:	2303      	movs	r3, #3
 8018414:	e00f      	b.n	8018436 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	69db      	ldr	r3, [r3, #28]
 801841c:	68ba      	ldr	r2, [r7, #8]
 801841e:	4013      	ands	r3, r2
 8018420:	68ba      	ldr	r2, [r7, #8]
 8018422:	1ad3      	subs	r3, r2, r3
 8018424:	425a      	negs	r2, r3
 8018426:	4153      	adcs	r3, r2
 8018428:	b2db      	uxtb	r3, r3
 801842a:	001a      	movs	r2, r3
 801842c:	1dfb      	adds	r3, r7, #7
 801842e:	781b      	ldrb	r3, [r3, #0]
 8018430:	429a      	cmp	r2, r3
 8018432:	d0a4      	beq.n	801837e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018434:	2300      	movs	r3, #0
}
 8018436:	0018      	movs	r0, r3
 8018438:	46bd      	mov	sp, r7
 801843a:	b004      	add	sp, #16
 801843c:	bd80      	pop	{r7, pc}
	...

08018440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b090      	sub	sp, #64	@ 0x40
 8018444:	af00      	add	r7, sp, #0
 8018446:	60f8      	str	r0, [r7, #12]
 8018448:	60b9      	str	r1, [r7, #8]
 801844a:	1dbb      	adds	r3, r7, #6
 801844c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	68ba      	ldr	r2, [r7, #8]
 8018452:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	1dba      	adds	r2, r7, #6
 8018458:	2158      	movs	r1, #88	@ 0x58
 801845a:	8812      	ldrh	r2, [r2, #0]
 801845c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	1dba      	adds	r2, r7, #6
 8018462:	215a      	movs	r1, #90	@ 0x5a
 8018464:	8812      	ldrh	r2, [r2, #0]
 8018466:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	2200      	movs	r2, #0
 801846c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	689a      	ldr	r2, [r3, #8]
 8018472:	2380      	movs	r3, #128	@ 0x80
 8018474:	015b      	lsls	r3, r3, #5
 8018476:	429a      	cmp	r2, r3
 8018478:	d10d      	bne.n	8018496 <UART_Start_Receive_IT+0x56>
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	691b      	ldr	r3, [r3, #16]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d104      	bne.n	801848c <UART_Start_Receive_IT+0x4c>
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	225c      	movs	r2, #92	@ 0x5c
 8018486:	4950      	ldr	r1, [pc, #320]	@ (80185c8 <UART_Start_Receive_IT+0x188>)
 8018488:	5299      	strh	r1, [r3, r2]
 801848a:	e02e      	b.n	80184ea <UART_Start_Receive_IT+0xaa>
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	225c      	movs	r2, #92	@ 0x5c
 8018490:	21ff      	movs	r1, #255	@ 0xff
 8018492:	5299      	strh	r1, [r3, r2]
 8018494:	e029      	b.n	80184ea <UART_Start_Receive_IT+0xaa>
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	689b      	ldr	r3, [r3, #8]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d10d      	bne.n	80184ba <UART_Start_Receive_IT+0x7a>
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	691b      	ldr	r3, [r3, #16]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d104      	bne.n	80184b0 <UART_Start_Receive_IT+0x70>
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	225c      	movs	r2, #92	@ 0x5c
 80184aa:	21ff      	movs	r1, #255	@ 0xff
 80184ac:	5299      	strh	r1, [r3, r2]
 80184ae:	e01c      	b.n	80184ea <UART_Start_Receive_IT+0xaa>
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	225c      	movs	r2, #92	@ 0x5c
 80184b4:	217f      	movs	r1, #127	@ 0x7f
 80184b6:	5299      	strh	r1, [r3, r2]
 80184b8:	e017      	b.n	80184ea <UART_Start_Receive_IT+0xaa>
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	689a      	ldr	r2, [r3, #8]
 80184be:	2380      	movs	r3, #128	@ 0x80
 80184c0:	055b      	lsls	r3, r3, #21
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d10d      	bne.n	80184e2 <UART_Start_Receive_IT+0xa2>
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	691b      	ldr	r3, [r3, #16]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d104      	bne.n	80184d8 <UART_Start_Receive_IT+0x98>
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	225c      	movs	r2, #92	@ 0x5c
 80184d2:	217f      	movs	r1, #127	@ 0x7f
 80184d4:	5299      	strh	r1, [r3, r2]
 80184d6:	e008      	b.n	80184ea <UART_Start_Receive_IT+0xaa>
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	225c      	movs	r2, #92	@ 0x5c
 80184dc:	213f      	movs	r1, #63	@ 0x3f
 80184de:	5299      	strh	r1, [r3, r2]
 80184e0:	e003      	b.n	80184ea <UART_Start_Receive_IT+0xaa>
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	225c      	movs	r2, #92	@ 0x5c
 80184e6:	2100      	movs	r1, #0
 80184e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	2284      	movs	r2, #132	@ 0x84
 80184ee:	2100      	movs	r1, #0
 80184f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	2280      	movs	r2, #128	@ 0x80
 80184f6:	2122      	movs	r1, #34	@ 0x22
 80184f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184fa:	f3ef 8310 	mrs	r3, PRIMASK
 80184fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018500:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018504:	2301      	movs	r3, #1
 8018506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801850a:	f383 8810 	msr	PRIMASK, r3
}
 801850e:	46c0      	nop			@ (mov r8, r8)
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	689a      	ldr	r2, [r3, #8]
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	2101      	movs	r1, #1
 801851c:	430a      	orrs	r2, r1
 801851e:	609a      	str	r2, [r3, #8]
 8018520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018522:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018526:	f383 8810 	msr	PRIMASK, r3
}
 801852a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	689a      	ldr	r2, [r3, #8]
 8018530:	2380      	movs	r3, #128	@ 0x80
 8018532:	015b      	lsls	r3, r3, #5
 8018534:	429a      	cmp	r2, r3
 8018536:	d107      	bne.n	8018548 <UART_Start_Receive_IT+0x108>
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	691b      	ldr	r3, [r3, #16]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d103      	bne.n	8018548 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	4a22      	ldr	r2, [pc, #136]	@ (80185cc <UART_Start_Receive_IT+0x18c>)
 8018544:	669a      	str	r2, [r3, #104]	@ 0x68
 8018546:	e002      	b.n	801854e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	4a21      	ldr	r2, [pc, #132]	@ (80185d0 <UART_Start_Receive_IT+0x190>)
 801854c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	691b      	ldr	r3, [r3, #16]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d019      	beq.n	801858a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018556:	f3ef 8310 	mrs	r3, PRIMASK
 801855a:	61fb      	str	r3, [r7, #28]
  return(result);
 801855c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801855e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018560:	2301      	movs	r3, #1
 8018562:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018564:	6a3b      	ldr	r3, [r7, #32]
 8018566:	f383 8810 	msr	PRIMASK, r3
}
 801856a:	46c0      	nop			@ (mov r8, r8)
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	681a      	ldr	r2, [r3, #0]
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	2190      	movs	r1, #144	@ 0x90
 8018578:	0049      	lsls	r1, r1, #1
 801857a:	430a      	orrs	r2, r1
 801857c:	601a      	str	r2, [r3, #0]
 801857e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018580:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018584:	f383 8810 	msr	PRIMASK, r3
}
 8018588:	e018      	b.n	80185bc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801858a:	f3ef 8310 	mrs	r3, PRIMASK
 801858e:	613b      	str	r3, [r7, #16]
  return(result);
 8018590:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018594:	2301      	movs	r3, #1
 8018596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018598:	697b      	ldr	r3, [r7, #20]
 801859a:	f383 8810 	msr	PRIMASK, r3
}
 801859e:	46c0      	nop			@ (mov r8, r8)
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	681a      	ldr	r2, [r3, #0]
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2120      	movs	r1, #32
 80185ac:	430a      	orrs	r2, r1
 80185ae:	601a      	str	r2, [r3, #0]
 80185b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185b4:	69bb      	ldr	r3, [r7, #24]
 80185b6:	f383 8810 	msr	PRIMASK, r3
}
 80185ba:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80185bc:	2300      	movs	r3, #0
}
 80185be:	0018      	movs	r0, r3
 80185c0:	46bd      	mov	sp, r7
 80185c2:	b010      	add	sp, #64	@ 0x40
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	46c0      	nop			@ (mov r8, r8)
 80185c8:	000001ff 	.word	0x000001ff
 80185cc:	08018d41 	.word	0x08018d41
 80185d0:	08018b75 	.word	0x08018b75

080185d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b090      	sub	sp, #64	@ 0x40
 80185d8:	af00      	add	r7, sp, #0
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	1dbb      	adds	r3, r7, #6
 80185e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	68ba      	ldr	r2, [r7, #8]
 80185e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	1dba      	adds	r2, r7, #6
 80185ec:	2158      	movs	r1, #88	@ 0x58
 80185ee:	8812      	ldrh	r2, [r2, #0]
 80185f0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	2284      	movs	r2, #132	@ 0x84
 80185f6:	2100      	movs	r1, #0
 80185f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	2280      	movs	r2, #128	@ 0x80
 80185fe:	2122      	movs	r1, #34	@ 0x22
 8018600:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018606:	2b00      	cmp	r3, #0
 8018608:	d028      	beq.n	801865c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801860e:	4a3e      	ldr	r2, [pc, #248]	@ (8018708 <UART_Start_Receive_DMA+0x134>)
 8018610:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018616:	4a3d      	ldr	r2, [pc, #244]	@ (801870c <UART_Start_Receive_DMA+0x138>)
 8018618:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801861e:	4a3c      	ldr	r2, [pc, #240]	@ (8018710 <UART_Start_Receive_DMA+0x13c>)
 8018620:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018626:	2200      	movs	r2, #0
 8018628:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	3324      	adds	r3, #36	@ 0x24
 8018634:	0019      	movs	r1, r3
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801863a:	001a      	movs	r2, r3
 801863c:	1dbb      	adds	r3, r7, #6
 801863e:	881b      	ldrh	r3, [r3, #0]
 8018640:	f7f7 f868 	bl	800f714 <HAL_DMA_Start_IT>
 8018644:	1e03      	subs	r3, r0, #0
 8018646:	d009      	beq.n	801865c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	2284      	movs	r2, #132	@ 0x84
 801864c:	2110      	movs	r1, #16
 801864e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	2280      	movs	r2, #128	@ 0x80
 8018654:	2120      	movs	r1, #32
 8018656:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8018658:	2301      	movs	r3, #1
 801865a:	e050      	b.n	80186fe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	691b      	ldr	r3, [r3, #16]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d019      	beq.n	8018698 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018664:	f3ef 8310 	mrs	r3, PRIMASK
 8018668:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801866e:	2301      	movs	r3, #1
 8018670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018674:	f383 8810 	msr	PRIMASK, r3
}
 8018678:	46c0      	nop			@ (mov r8, r8)
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	681a      	ldr	r2, [r3, #0]
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2180      	movs	r1, #128	@ 0x80
 8018686:	0049      	lsls	r1, r1, #1
 8018688:	430a      	orrs	r2, r1
 801868a:	601a      	str	r2, [r3, #0]
 801868c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801868e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018692:	f383 8810 	msr	PRIMASK, r3
}
 8018696:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018698:	f3ef 8310 	mrs	r3, PRIMASK
 801869c:	613b      	str	r3, [r7, #16]
  return(result);
 801869e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80186a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80186a2:	2301      	movs	r3, #1
 80186a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186a6:	697b      	ldr	r3, [r7, #20]
 80186a8:	f383 8810 	msr	PRIMASK, r3
}
 80186ac:	46c0      	nop			@ (mov r8, r8)
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	689a      	ldr	r2, [r3, #8]
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2101      	movs	r1, #1
 80186ba:	430a      	orrs	r2, r1
 80186bc:	609a      	str	r2, [r3, #8]
 80186be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186c2:	69bb      	ldr	r3, [r7, #24]
 80186c4:	f383 8810 	msr	PRIMASK, r3
}
 80186c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186ca:	f3ef 8310 	mrs	r3, PRIMASK
 80186ce:	61fb      	str	r3, [r7, #28]
  return(result);
 80186d0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80186d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80186d4:	2301      	movs	r3, #1
 80186d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186d8:	6a3b      	ldr	r3, [r7, #32]
 80186da:	f383 8810 	msr	PRIMASK, r3
}
 80186de:	46c0      	nop			@ (mov r8, r8)
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	689a      	ldr	r2, [r3, #8]
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	2140      	movs	r1, #64	@ 0x40
 80186ec:	430a      	orrs	r2, r1
 80186ee:	609a      	str	r2, [r3, #8]
 80186f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f6:	f383 8810 	msr	PRIMASK, r3
}
 80186fa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80186fc:	2300      	movs	r3, #0
}
 80186fe:	0018      	movs	r0, r3
 8018700:	46bd      	mov	sp, r7
 8018702:	b010      	add	sp, #64	@ 0x40
 8018704:	bd80      	pop	{r7, pc}
 8018706:	46c0      	nop			@ (mov r8, r8)
 8018708:	080188e5 	.word	0x080188e5
 801870c:	08018a19 	.word	0x08018a19
 8018710:	08018a61 	.word	0x08018a61

08018714 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b086      	sub	sp, #24
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801871c:	f3ef 8310 	mrs	r3, PRIMASK
 8018720:	60bb      	str	r3, [r7, #8]
  return(result);
 8018722:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018724:	617b      	str	r3, [r7, #20]
 8018726:	2301      	movs	r3, #1
 8018728:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	f383 8810 	msr	PRIMASK, r3
}
 8018730:	46c0      	nop			@ (mov r8, r8)
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	681a      	ldr	r2, [r3, #0]
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	21c0      	movs	r1, #192	@ 0xc0
 801873e:	438a      	bics	r2, r1
 8018740:	601a      	str	r2, [r3, #0]
 8018742:	697b      	ldr	r3, [r7, #20]
 8018744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	f383 8810 	msr	PRIMASK, r3
}
 801874c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	2220      	movs	r2, #32
 8018752:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018754:	46c0      	nop			@ (mov r8, r8)
 8018756:	46bd      	mov	sp, r7
 8018758:	b006      	add	sp, #24
 801875a:	bd80      	pop	{r7, pc}

0801875c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b08e      	sub	sp, #56	@ 0x38
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018764:	f3ef 8310 	mrs	r3, PRIMASK
 8018768:	617b      	str	r3, [r7, #20]
  return(result);
 801876a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801876c:	637b      	str	r3, [r7, #52]	@ 0x34
 801876e:	2301      	movs	r3, #1
 8018770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018772:	69bb      	ldr	r3, [r7, #24]
 8018774:	f383 8810 	msr	PRIMASK, r3
}
 8018778:	46c0      	nop			@ (mov r8, r8)
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	4926      	ldr	r1, [pc, #152]	@ (8018820 <UART_EndRxTransfer+0xc4>)
 8018786:	400a      	ands	r2, r1
 8018788:	601a      	str	r2, [r3, #0]
 801878a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801878c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801878e:	69fb      	ldr	r3, [r7, #28]
 8018790:	f383 8810 	msr	PRIMASK, r3
}
 8018794:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018796:	f3ef 8310 	mrs	r3, PRIMASK
 801879a:	623b      	str	r3, [r7, #32]
  return(result);
 801879c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801879e:	633b      	str	r3, [r7, #48]	@ 0x30
 80187a0:	2301      	movs	r3, #1
 80187a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a6:	f383 8810 	msr	PRIMASK, r3
}
 80187aa:	46c0      	nop			@ (mov r8, r8)
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	689a      	ldr	r2, [r3, #8]
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	2101      	movs	r1, #1
 80187b8:	438a      	bics	r2, r1
 80187ba:	609a      	str	r2, [r3, #8]
 80187bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187c2:	f383 8810 	msr	PRIMASK, r3
}
 80187c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80187cc:	2b01      	cmp	r3, #1
 80187ce:	d118      	bne.n	8018802 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187d0:	f3ef 8310 	mrs	r3, PRIMASK
 80187d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80187d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80187d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80187da:	2301      	movs	r3, #1
 80187dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	f383 8810 	msr	PRIMASK, r3
}
 80187e4:	46c0      	nop			@ (mov r8, r8)
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	681a      	ldr	r2, [r3, #0]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	2110      	movs	r1, #16
 80187f2:	438a      	bics	r2, r1
 80187f4:	601a      	str	r2, [r3, #0]
 80187f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	f383 8810 	msr	PRIMASK, r3
}
 8018800:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2280      	movs	r2, #128	@ 0x80
 8018806:	2120      	movs	r1, #32
 8018808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2200      	movs	r2, #0
 801880e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	2200      	movs	r2, #0
 8018814:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018816:	46c0      	nop			@ (mov r8, r8)
 8018818:	46bd      	mov	sp, r7
 801881a:	b00e      	add	sp, #56	@ 0x38
 801881c:	bd80      	pop	{r7, pc}
 801881e:	46c0      	nop			@ (mov r8, r8)
 8018820:	fffffedf 	.word	0xfffffedf

08018824 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b08c      	sub	sp, #48	@ 0x30
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018830:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	2220      	movs	r2, #32
 801883a:	4013      	ands	r3, r2
 801883c:	d135      	bne.n	80188aa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801883e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018840:	2252      	movs	r2, #82	@ 0x52
 8018842:	2100      	movs	r1, #0
 8018844:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018846:	f3ef 8310 	mrs	r3, PRIMASK
 801884a:	60fb      	str	r3, [r7, #12]
  return(result);
 801884c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801884e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018850:	2301      	movs	r3, #1
 8018852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	f383 8810 	msr	PRIMASK, r3
}
 801885a:	46c0      	nop			@ (mov r8, r8)
 801885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	689a      	ldr	r2, [r3, #8]
 8018862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	2180      	movs	r1, #128	@ 0x80
 8018868:	438a      	bics	r2, r1
 801886a:	609a      	str	r2, [r3, #8]
 801886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801886e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018870:	697b      	ldr	r3, [r7, #20]
 8018872:	f383 8810 	msr	PRIMASK, r3
}
 8018876:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018878:	f3ef 8310 	mrs	r3, PRIMASK
 801887c:	61bb      	str	r3, [r7, #24]
  return(result);
 801887e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018880:	627b      	str	r3, [r7, #36]	@ 0x24
 8018882:	2301      	movs	r3, #1
 8018884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018886:	69fb      	ldr	r3, [r7, #28]
 8018888:	f383 8810 	msr	PRIMASK, r3
}
 801888c:	46c0      	nop			@ (mov r8, r8)
 801888e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	681a      	ldr	r2, [r3, #0]
 8018894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	2140      	movs	r1, #64	@ 0x40
 801889a:	430a      	orrs	r2, r1
 801889c:	601a      	str	r2, [r3, #0]
 801889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188a2:	6a3b      	ldr	r3, [r7, #32]
 80188a4:	f383 8810 	msr	PRIMASK, r3
}
 80188a8:	e006      	b.n	80188b8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80188aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188ac:	228c      	movs	r2, #140	@ 0x8c
 80188ae:	589b      	ldr	r3, [r3, r2]
 80188b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80188b2:	0010      	movs	r0, r2
 80188b4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80188b6:	46c0      	nop			@ (mov r8, r8)
 80188b8:	46c0      	nop			@ (mov r8, r8)
 80188ba:	46bd      	mov	sp, r7
 80188bc:	b00c      	add	sp, #48	@ 0x30
 80188be:	bd80      	pop	{r7, pc}

080188c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b084      	sub	sp, #16
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	2288      	movs	r2, #136	@ 0x88
 80188d2:	589b      	ldr	r3, [r3, r2]
 80188d4:	68fa      	ldr	r2, [r7, #12]
 80188d6:	0010      	movs	r0, r2
 80188d8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80188da:	46c0      	nop			@ (mov r8, r8)
 80188dc:	46bd      	mov	sp, r7
 80188de:	b004      	add	sp, #16
 80188e0:	bd80      	pop	{r7, pc}
	...

080188e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b094      	sub	sp, #80	@ 0x50
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2220      	movs	r2, #32
 80188fa:	4013      	ands	r3, r2
 80188fc:	d16f      	bne.n	80189de <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80188fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018900:	225a      	movs	r2, #90	@ 0x5a
 8018902:	2100      	movs	r1, #0
 8018904:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018906:	f3ef 8310 	mrs	r3, PRIMASK
 801890a:	61bb      	str	r3, [r7, #24]
  return(result);
 801890c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801890e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018910:	2301      	movs	r3, #1
 8018912:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018914:	69fb      	ldr	r3, [r7, #28]
 8018916:	f383 8810 	msr	PRIMASK, r3
}
 801891a:	46c0      	nop			@ (mov r8, r8)
 801891c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	681a      	ldr	r2, [r3, #0]
 8018922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	493b      	ldr	r1, [pc, #236]	@ (8018a14 <UART_DMAReceiveCplt+0x130>)
 8018928:	400a      	ands	r2, r1
 801892a:	601a      	str	r2, [r3, #0]
 801892c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801892e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018930:	6a3b      	ldr	r3, [r7, #32]
 8018932:	f383 8810 	msr	PRIMASK, r3
}
 8018936:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018938:	f3ef 8310 	mrs	r3, PRIMASK
 801893c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018940:	647b      	str	r3, [r7, #68]	@ 0x44
 8018942:	2301      	movs	r3, #1
 8018944:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018948:	f383 8810 	msr	PRIMASK, r3
}
 801894c:	46c0      	nop			@ (mov r8, r8)
 801894e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	689a      	ldr	r2, [r3, #8]
 8018954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2101      	movs	r1, #1
 801895a:	438a      	bics	r2, r1
 801895c:	609a      	str	r2, [r3, #8]
 801895e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018964:	f383 8810 	msr	PRIMASK, r3
}
 8018968:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801896a:	f3ef 8310 	mrs	r3, PRIMASK
 801896e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018972:	643b      	str	r3, [r7, #64]	@ 0x40
 8018974:	2301      	movs	r3, #1
 8018976:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801897a:	f383 8810 	msr	PRIMASK, r3
}
 801897e:	46c0      	nop			@ (mov r8, r8)
 8018980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	689a      	ldr	r2, [r3, #8]
 8018986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2140      	movs	r1, #64	@ 0x40
 801898c:	438a      	bics	r2, r1
 801898e:	609a      	str	r2, [r3, #8]
 8018990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018992:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018996:	f383 8810 	msr	PRIMASK, r3
}
 801899a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801899c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801899e:	2280      	movs	r2, #128	@ 0x80
 80189a0:	2120      	movs	r1, #32
 80189a2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80189a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80189a8:	2b01      	cmp	r3, #1
 80189aa:	d118      	bne.n	80189de <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189ac:	f3ef 8310 	mrs	r3, PRIMASK
 80189b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80189b2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80189b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80189b6:	2301      	movs	r3, #1
 80189b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ba:	693b      	ldr	r3, [r7, #16]
 80189bc:	f383 8810 	msr	PRIMASK, r3
}
 80189c0:	46c0      	nop			@ (mov r8, r8)
 80189c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	681a      	ldr	r2, [r3, #0]
 80189c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	2110      	movs	r1, #16
 80189ce:	438a      	bics	r2, r1
 80189d0:	601a      	str	r2, [r3, #0]
 80189d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80189d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189d6:	697b      	ldr	r3, [r7, #20]
 80189d8:	f383 8810 	msr	PRIMASK, r3
}
 80189dc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80189de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189e0:	2200      	movs	r2, #0
 80189e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80189e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80189e8:	2b01      	cmp	r3, #1
 80189ea:	d109      	bne.n	8018a00 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80189ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189ee:	22ac      	movs	r2, #172	@ 0xac
 80189f0:	589b      	ldr	r3, [r3, r2]
 80189f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80189f4:	2158      	movs	r1, #88	@ 0x58
 80189f6:	5a51      	ldrh	r1, [r2, r1]
 80189f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80189fa:	0010      	movs	r0, r2
 80189fc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80189fe:	e005      	b.n	8018a0c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a02:	2294      	movs	r2, #148	@ 0x94
 8018a04:	589b      	ldr	r3, [r3, r2]
 8018a06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a08:	0010      	movs	r0, r2
 8018a0a:	4798      	blx	r3
}
 8018a0c:	46c0      	nop			@ (mov r8, r8)
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	b014      	add	sp, #80	@ 0x50
 8018a12:	bd80      	pop	{r7, pc}
 8018a14:	fffffeff 	.word	0xfffffeff

08018a18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b084      	sub	sp, #16
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	2201      	movs	r2, #1
 8018a2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	d10b      	bne.n	8018a4c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	22ac      	movs	r2, #172	@ 0xac
 8018a38:	589b      	ldr	r3, [r3, r2]
 8018a3a:	68fa      	ldr	r2, [r7, #12]
 8018a3c:	2158      	movs	r1, #88	@ 0x58
 8018a3e:	5a52      	ldrh	r2, [r2, r1]
 8018a40:	0852      	lsrs	r2, r2, #1
 8018a42:	b291      	uxth	r1, r2
 8018a44:	68fa      	ldr	r2, [r7, #12]
 8018a46:	0010      	movs	r0, r2
 8018a48:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018a4a:	e005      	b.n	8018a58 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	2290      	movs	r2, #144	@ 0x90
 8018a50:	589b      	ldr	r3, [r3, r2]
 8018a52:	68fa      	ldr	r2, [r7, #12]
 8018a54:	0010      	movs	r0, r2
 8018a56:	4798      	blx	r3
}
 8018a58:	46c0      	nop			@ (mov r8, r8)
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	b004      	add	sp, #16
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b086      	sub	sp, #24
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018a72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018a74:	697b      	ldr	r3, [r7, #20]
 8018a76:	2280      	movs	r2, #128	@ 0x80
 8018a78:	589b      	ldr	r3, [r3, r2]
 8018a7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	689b      	ldr	r3, [r3, #8]
 8018a82:	2280      	movs	r2, #128	@ 0x80
 8018a84:	4013      	ands	r3, r2
 8018a86:	2b80      	cmp	r3, #128	@ 0x80
 8018a88:	d10a      	bne.n	8018aa0 <UART_DMAError+0x40>
 8018a8a:	693b      	ldr	r3, [r7, #16]
 8018a8c:	2b21      	cmp	r3, #33	@ 0x21
 8018a8e:	d107      	bne.n	8018aa0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	2252      	movs	r2, #82	@ 0x52
 8018a94:	2100      	movs	r1, #0
 8018a96:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	0018      	movs	r0, r3
 8018a9c:	f7ff fe3a 	bl	8018714 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	689b      	ldr	r3, [r3, #8]
 8018aa6:	2240      	movs	r2, #64	@ 0x40
 8018aa8:	4013      	ands	r3, r2
 8018aaa:	2b40      	cmp	r3, #64	@ 0x40
 8018aac:	d10a      	bne.n	8018ac4 <UART_DMAError+0x64>
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	2b22      	cmp	r3, #34	@ 0x22
 8018ab2:	d107      	bne.n	8018ac4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018ab4:	697b      	ldr	r3, [r7, #20]
 8018ab6:	225a      	movs	r2, #90	@ 0x5a
 8018ab8:	2100      	movs	r1, #0
 8018aba:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	0018      	movs	r0, r3
 8018ac0:	f7ff fe4c 	bl	801875c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018ac4:	697b      	ldr	r3, [r7, #20]
 8018ac6:	2284      	movs	r2, #132	@ 0x84
 8018ac8:	589b      	ldr	r3, [r3, r2]
 8018aca:	2210      	movs	r2, #16
 8018acc:	431a      	orrs	r2, r3
 8018ace:	697b      	ldr	r3, [r7, #20]
 8018ad0:	2184      	movs	r1, #132	@ 0x84
 8018ad2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	2298      	movs	r2, #152	@ 0x98
 8018ad8:	589b      	ldr	r3, [r3, r2]
 8018ada:	697a      	ldr	r2, [r7, #20]
 8018adc:	0010      	movs	r0, r2
 8018ade:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018ae0:	46c0      	nop			@ (mov r8, r8)
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	b006      	add	sp, #24
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b084      	sub	sp, #16
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018af4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	225a      	movs	r2, #90	@ 0x5a
 8018afa:	2100      	movs	r1, #0
 8018afc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2252      	movs	r2, #82	@ 0x52
 8018b02:	2100      	movs	r1, #0
 8018b04:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	2298      	movs	r2, #152	@ 0x98
 8018b0a:	589b      	ldr	r3, [r3, r2]
 8018b0c:	68fa      	ldr	r2, [r7, #12]
 8018b0e:	0010      	movs	r0, r2
 8018b10:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b12:	46c0      	nop			@ (mov r8, r8)
 8018b14:	46bd      	mov	sp, r7
 8018b16:	b004      	add	sp, #16
 8018b18:	bd80      	pop	{r7, pc}

08018b1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018b1a:	b580      	push	{r7, lr}
 8018b1c:	b086      	sub	sp, #24
 8018b1e:	af00      	add	r7, sp, #0
 8018b20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b22:	f3ef 8310 	mrs	r3, PRIMASK
 8018b26:	60bb      	str	r3, [r7, #8]
  return(result);
 8018b28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018b2a:	617b      	str	r3, [r7, #20]
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	f383 8810 	msr	PRIMASK, r3
}
 8018b36:	46c0      	nop			@ (mov r8, r8)
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	681a      	ldr	r2, [r3, #0]
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	2140      	movs	r1, #64	@ 0x40
 8018b44:	438a      	bics	r2, r1
 8018b46:	601a      	str	r2, [r3, #0]
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b4c:	693b      	ldr	r3, [r7, #16]
 8018b4e:	f383 8810 	msr	PRIMASK, r3
}
 8018b52:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	2220      	movs	r2, #32
 8018b58:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	228c      	movs	r2, #140	@ 0x8c
 8018b64:	589b      	ldr	r3, [r3, r2]
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	0010      	movs	r0, r2
 8018b6a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b6c:	46c0      	nop			@ (mov r8, r8)
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	b006      	add	sp, #24
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b094      	sub	sp, #80	@ 0x50
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018b7c:	204e      	movs	r0, #78	@ 0x4e
 8018b7e:	183b      	adds	r3, r7, r0
 8018b80:	687a      	ldr	r2, [r7, #4]
 8018b82:	215c      	movs	r1, #92	@ 0x5c
 8018b84:	5a52      	ldrh	r2, [r2, r1]
 8018b86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2280      	movs	r2, #128	@ 0x80
 8018b8c:	589b      	ldr	r3, [r3, r2]
 8018b8e:	2b22      	cmp	r3, #34	@ 0x22
 8018b90:	d000      	beq.n	8018b94 <UART_RxISR_8BIT+0x20>
 8018b92:	e0c2      	b.n	8018d1a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b9a:	214c      	movs	r1, #76	@ 0x4c
 8018b9c:	187b      	adds	r3, r7, r1
 8018b9e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018ba0:	187b      	adds	r3, r7, r1
 8018ba2:	881b      	ldrh	r3, [r3, #0]
 8018ba4:	b2da      	uxtb	r2, r3
 8018ba6:	183b      	adds	r3, r7, r0
 8018ba8:	881b      	ldrh	r3, [r3, #0]
 8018baa:	b2d9      	uxtb	r1, r3
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bb0:	400a      	ands	r2, r1
 8018bb2:	b2d2      	uxtb	r2, r2
 8018bb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bba:	1c5a      	adds	r2, r3, #1
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	225a      	movs	r2, #90	@ 0x5a
 8018bc4:	5a9b      	ldrh	r3, [r3, r2]
 8018bc6:	b29b      	uxth	r3, r3
 8018bc8:	3b01      	subs	r3, #1
 8018bca:	b299      	uxth	r1, r3
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	225a      	movs	r2, #90	@ 0x5a
 8018bd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	225a      	movs	r2, #90	@ 0x5a
 8018bd6:	5a9b      	ldrh	r3, [r3, r2]
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d000      	beq.n	8018be0 <UART_RxISR_8BIT+0x6c>
 8018bde:	e0a4      	b.n	8018d2a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018be0:	f3ef 8310 	mrs	r3, PRIMASK
 8018be4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018bea:	2301      	movs	r3, #1
 8018bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bf0:	f383 8810 	msr	PRIMASK, r3
}
 8018bf4:	46c0      	nop			@ (mov r8, r8)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	494c      	ldr	r1, [pc, #304]	@ (8018d34 <UART_RxISR_8BIT+0x1c0>)
 8018c02:	400a      	ands	r2, r1
 8018c04:	601a      	str	r2, [r3, #0]
 8018c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c0c:	f383 8810 	msr	PRIMASK, r3
}
 8018c10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c12:	f3ef 8310 	mrs	r3, PRIMASK
 8018c16:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8018c1c:	2301      	movs	r3, #1
 8018c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c22:	f383 8810 	msr	PRIMASK, r3
}
 8018c26:	46c0      	nop			@ (mov r8, r8)
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	689a      	ldr	r2, [r3, #8]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	2101      	movs	r1, #1
 8018c34:	438a      	bics	r2, r1
 8018c36:	609a      	str	r2, [r3, #8]
 8018c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c3e:	f383 8810 	msr	PRIMASK, r3
}
 8018c42:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2280      	movs	r2, #128	@ 0x80
 8018c48:	2120      	movs	r1, #32
 8018c4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	2200      	movs	r2, #0
 8018c50:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2200      	movs	r2, #0
 8018c56:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	4a36      	ldr	r2, [pc, #216]	@ (8018d38 <UART_RxISR_8BIT+0x1c4>)
 8018c5e:	4293      	cmp	r3, r2
 8018c60:	d01f      	beq.n	8018ca2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	685a      	ldr	r2, [r3, #4]
 8018c68:	2380      	movs	r3, #128	@ 0x80
 8018c6a:	041b      	lsls	r3, r3, #16
 8018c6c:	4013      	ands	r3, r2
 8018c6e:	d018      	beq.n	8018ca2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c70:	f3ef 8310 	mrs	r3, PRIMASK
 8018c74:	61bb      	str	r3, [r7, #24]
  return(result);
 8018c76:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c7e:	69fb      	ldr	r3, [r7, #28]
 8018c80:	f383 8810 	msr	PRIMASK, r3
}
 8018c84:	46c0      	nop			@ (mov r8, r8)
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	681a      	ldr	r2, [r3, #0]
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	492a      	ldr	r1, [pc, #168]	@ (8018d3c <UART_RxISR_8BIT+0x1c8>)
 8018c92:	400a      	ands	r2, r1
 8018c94:	601a      	str	r2, [r3, #0]
 8018c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018c98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c9a:	6a3b      	ldr	r3, [r7, #32]
 8018c9c:	f383 8810 	msr	PRIMASK, r3
}
 8018ca0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ca6:	2b01      	cmp	r3, #1
 8018ca8:	d130      	bne.n	8018d0c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	2200      	movs	r2, #0
 8018cae:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8018cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8018cb6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018cba:	2301      	movs	r3, #1
 8018cbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cbe:	693b      	ldr	r3, [r7, #16]
 8018cc0:	f383 8810 	msr	PRIMASK, r3
}
 8018cc4:	46c0      	nop			@ (mov r8, r8)
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	681a      	ldr	r2, [r3, #0]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	2110      	movs	r1, #16
 8018cd2:	438a      	bics	r2, r1
 8018cd4:	601a      	str	r2, [r3, #0]
 8018cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	f383 8810 	msr	PRIMASK, r3
}
 8018ce0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	69db      	ldr	r3, [r3, #28]
 8018ce8:	2210      	movs	r2, #16
 8018cea:	4013      	ands	r3, r2
 8018cec:	2b10      	cmp	r3, #16
 8018cee:	d103      	bne.n	8018cf8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	2210      	movs	r2, #16
 8018cf6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	22ac      	movs	r2, #172	@ 0xac
 8018cfc:	589b      	ldr	r3, [r3, r2]
 8018cfe:	687a      	ldr	r2, [r7, #4]
 8018d00:	2158      	movs	r1, #88	@ 0x58
 8018d02:	5a51      	ldrh	r1, [r2, r1]
 8018d04:	687a      	ldr	r2, [r7, #4]
 8018d06:	0010      	movs	r0, r2
 8018d08:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018d0a:	e00e      	b.n	8018d2a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2294      	movs	r2, #148	@ 0x94
 8018d10:	589b      	ldr	r3, [r3, r2]
 8018d12:	687a      	ldr	r2, [r7, #4]
 8018d14:	0010      	movs	r0, r2
 8018d16:	4798      	blx	r3
}
 8018d18:	e007      	b.n	8018d2a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	699a      	ldr	r2, [r3, #24]
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	2108      	movs	r1, #8
 8018d26:	430a      	orrs	r2, r1
 8018d28:	619a      	str	r2, [r3, #24]
}
 8018d2a:	46c0      	nop			@ (mov r8, r8)
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	b014      	add	sp, #80	@ 0x50
 8018d30:	bd80      	pop	{r7, pc}
 8018d32:	46c0      	nop			@ (mov r8, r8)
 8018d34:	fffffedf 	.word	0xfffffedf
 8018d38:	40004800 	.word	0x40004800
 8018d3c:	fbffffff 	.word	0xfbffffff

08018d40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b094      	sub	sp, #80	@ 0x50
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018d48:	204e      	movs	r0, #78	@ 0x4e
 8018d4a:	183b      	adds	r3, r7, r0
 8018d4c:	687a      	ldr	r2, [r7, #4]
 8018d4e:	215c      	movs	r1, #92	@ 0x5c
 8018d50:	5a52      	ldrh	r2, [r2, r1]
 8018d52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	2280      	movs	r2, #128	@ 0x80
 8018d58:	589b      	ldr	r3, [r3, r2]
 8018d5a:	2b22      	cmp	r3, #34	@ 0x22
 8018d5c:	d000      	beq.n	8018d60 <UART_RxISR_16BIT+0x20>
 8018d5e:	e0c2      	b.n	8018ee6 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018d66:	214c      	movs	r1, #76	@ 0x4c
 8018d68:	187b      	adds	r3, r7, r1
 8018d6a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d70:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018d72:	187b      	adds	r3, r7, r1
 8018d74:	183a      	adds	r2, r7, r0
 8018d76:	881b      	ldrh	r3, [r3, #0]
 8018d78:	8812      	ldrh	r2, [r2, #0]
 8018d7a:	4013      	ands	r3, r2
 8018d7c:	b29a      	uxth	r2, r3
 8018d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d86:	1c9a      	adds	r2, r3, #2
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	225a      	movs	r2, #90	@ 0x5a
 8018d90:	5a9b      	ldrh	r3, [r3, r2]
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	3b01      	subs	r3, #1
 8018d96:	b299      	uxth	r1, r3
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	225a      	movs	r2, #90	@ 0x5a
 8018d9c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	225a      	movs	r2, #90	@ 0x5a
 8018da2:	5a9b      	ldrh	r3, [r3, r2]
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d000      	beq.n	8018dac <UART_RxISR_16BIT+0x6c>
 8018daa:	e0a4      	b.n	8018ef6 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018dac:	f3ef 8310 	mrs	r3, PRIMASK
 8018db0:	623b      	str	r3, [r7, #32]
  return(result);
 8018db2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8018db6:	2301      	movs	r3, #1
 8018db8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dbc:	f383 8810 	msr	PRIMASK, r3
}
 8018dc0:	46c0      	nop			@ (mov r8, r8)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	681a      	ldr	r2, [r3, #0]
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	494c      	ldr	r1, [pc, #304]	@ (8018f00 <UART_RxISR_16BIT+0x1c0>)
 8018dce:	400a      	ands	r2, r1
 8018dd0:	601a      	str	r2, [r3, #0]
 8018dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018dd8:	f383 8810 	msr	PRIMASK, r3
}
 8018ddc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018dde:	f3ef 8310 	mrs	r3, PRIMASK
 8018de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8018de8:	2301      	movs	r3, #1
 8018dea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dee:	f383 8810 	msr	PRIMASK, r3
}
 8018df2:	46c0      	nop			@ (mov r8, r8)
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	689a      	ldr	r2, [r3, #8]
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	2101      	movs	r1, #1
 8018e00:	438a      	bics	r2, r1
 8018e02:	609a      	str	r2, [r3, #8]
 8018e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018e06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e0a:	f383 8810 	msr	PRIMASK, r3
}
 8018e0e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	2280      	movs	r2, #128	@ 0x80
 8018e14:	2120      	movs	r1, #32
 8018e16:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2200      	movs	r2, #0
 8018e22:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	4a36      	ldr	r2, [pc, #216]	@ (8018f04 <UART_RxISR_16BIT+0x1c4>)
 8018e2a:	4293      	cmp	r3, r2
 8018e2c:	d01f      	beq.n	8018e6e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	685a      	ldr	r2, [r3, #4]
 8018e34:	2380      	movs	r3, #128	@ 0x80
 8018e36:	041b      	lsls	r3, r3, #16
 8018e38:	4013      	ands	r3, r2
 8018e3a:	d018      	beq.n	8018e6e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8018e40:	617b      	str	r3, [r7, #20]
  return(result);
 8018e42:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e46:	2301      	movs	r3, #1
 8018e48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e4a:	69bb      	ldr	r3, [r7, #24]
 8018e4c:	f383 8810 	msr	PRIMASK, r3
}
 8018e50:	46c0      	nop			@ (mov r8, r8)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	681a      	ldr	r2, [r3, #0]
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	492a      	ldr	r1, [pc, #168]	@ (8018f08 <UART_RxISR_16BIT+0x1c8>)
 8018e5e:	400a      	ands	r2, r1
 8018e60:	601a      	str	r2, [r3, #0]
 8018e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e66:	69fb      	ldr	r3, [r7, #28]
 8018e68:	f383 8810 	msr	PRIMASK, r3
}
 8018e6c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	d130      	bne.n	8018ed8 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8018e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8018e82:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018e86:	2301      	movs	r3, #1
 8018e88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	f383 8810 	msr	PRIMASK, r3
}
 8018e90:	46c0      	nop			@ (mov r8, r8)
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	681a      	ldr	r2, [r3, #0]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	2110      	movs	r1, #16
 8018e9e:	438a      	bics	r2, r1
 8018ea0:	601a      	str	r2, [r3, #0]
 8018ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ea6:	693b      	ldr	r3, [r7, #16]
 8018ea8:	f383 8810 	msr	PRIMASK, r3
}
 8018eac:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	69db      	ldr	r3, [r3, #28]
 8018eb4:	2210      	movs	r2, #16
 8018eb6:	4013      	ands	r3, r2
 8018eb8:	2b10      	cmp	r3, #16
 8018eba:	d103      	bne.n	8018ec4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	2210      	movs	r2, #16
 8018ec2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	22ac      	movs	r2, #172	@ 0xac
 8018ec8:	589b      	ldr	r3, [r3, r2]
 8018eca:	687a      	ldr	r2, [r7, #4]
 8018ecc:	2158      	movs	r1, #88	@ 0x58
 8018ece:	5a51      	ldrh	r1, [r2, r1]
 8018ed0:	687a      	ldr	r2, [r7, #4]
 8018ed2:	0010      	movs	r0, r2
 8018ed4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018ed6:	e00e      	b.n	8018ef6 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	2294      	movs	r2, #148	@ 0x94
 8018edc:	589b      	ldr	r3, [r3, r2]
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	0010      	movs	r0, r2
 8018ee2:	4798      	blx	r3
}
 8018ee4:	e007      	b.n	8018ef6 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	699a      	ldr	r2, [r3, #24]
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	2108      	movs	r1, #8
 8018ef2:	430a      	orrs	r2, r1
 8018ef4:	619a      	str	r2, [r3, #24]
}
 8018ef6:	46c0      	nop			@ (mov r8, r8)
 8018ef8:	46bd      	mov	sp, r7
 8018efa:	b014      	add	sp, #80	@ 0x50
 8018efc:	bd80      	pop	{r7, pc}
 8018efe:	46c0      	nop			@ (mov r8, r8)
 8018f00:	fffffedf 	.word	0xfffffedf
 8018f04:	40004800 	.word	0x40004800
 8018f08:	fbffffff 	.word	0xfbffffff

08018f0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b082      	sub	sp, #8
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018f14:	46c0      	nop			@ (mov r8, r8)
 8018f16:	46bd      	mov	sp, r7
 8018f18:	b002      	add	sp, #8
 8018f1a:	bd80      	pop	{r7, pc}

08018f1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b084      	sub	sp, #16
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	2244      	movs	r2, #68	@ 0x44
 8018f28:	2100      	movs	r1, #0
 8018f2a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018f2c:	4b05      	ldr	r3, [pc, #20]	@ (8018f44 <USB_EnableGlobalInt+0x28>)
 8018f2e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	b299      	uxth	r1, r3
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	2240      	movs	r2, #64	@ 0x40
 8018f38:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018f3a:	2300      	movs	r3, #0
}
 8018f3c:	0018      	movs	r0, r3
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	b004      	add	sp, #16
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	0000bf80 	.word	0x0000bf80

08018f48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b084      	sub	sp, #16
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018f50:	4b09      	ldr	r3, [pc, #36]	@ (8018f78 <USB_DisableGlobalInt+0x30>)
 8018f52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	2240      	movs	r2, #64	@ 0x40
 8018f58:	5a9b      	ldrh	r3, [r3, r2]
 8018f5a:	b29b      	uxth	r3, r3
 8018f5c:	68fa      	ldr	r2, [r7, #12]
 8018f5e:	b292      	uxth	r2, r2
 8018f60:	43d2      	mvns	r2, r2
 8018f62:	b292      	uxth	r2, r2
 8018f64:	4013      	ands	r3, r2
 8018f66:	b299      	uxth	r1, r3
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2240      	movs	r2, #64	@ 0x40
 8018f6c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018f6e:	2300      	movs	r3, #0
}
 8018f70:	0018      	movs	r0, r3
 8018f72:	46bd      	mov	sp, r7
 8018f74:	b004      	add	sp, #16
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	0000bf80 	.word	0x0000bf80

08018f7c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018f7c:	b084      	sub	sp, #16
 8018f7e:	b590      	push	{r4, r7, lr}
 8018f80:	b083      	sub	sp, #12
 8018f82:	af00      	add	r7, sp, #0
 8018f84:	6078      	str	r0, [r7, #4]
 8018f86:	2004      	movs	r0, #4
 8018f88:	2410      	movs	r4, #16
 8018f8a:	1900      	adds	r0, r0, r4
 8018f8c:	2408      	movs	r4, #8
 8018f8e:	46a4      	mov	ip, r4
 8018f90:	44bc      	add	ip, r7
 8018f92:	4460      	add	r0, ip
 8018f94:	6001      	str	r1, [r0, #0]
 8018f96:	6042      	str	r2, [r0, #4]
 8018f98:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	2240      	movs	r2, #64	@ 0x40
 8018f9e:	2101      	movs	r1, #1
 8018fa0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	2240      	movs	r2, #64	@ 0x40
 8018fa6:	2100      	movs	r1, #0
 8018fa8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	2244      	movs	r2, #68	@ 0x44
 8018fae:	2100      	movs	r1, #0
 8018fb0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2250      	movs	r2, #80	@ 0x50
 8018fb6:	2100      	movs	r1, #0
 8018fb8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018fba:	2300      	movs	r3, #0
}
 8018fbc:	0018      	movs	r0, r3
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	b003      	add	sp, #12
 8018fc2:	bc90      	pop	{r4, r7}
 8018fc4:	bc08      	pop	{r3}
 8018fc6:	b004      	add	sp, #16
 8018fc8:	4718      	bx	r3
	...

08018fcc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b09c      	sub	sp, #112	@ 0x70
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
 8018fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8018fd6:	236f      	movs	r3, #111	@ 0x6f
 8018fd8:	18fb      	adds	r3, r7, r3
 8018fda:	2200      	movs	r2, #0
 8018fdc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8018fde:	687a      	ldr	r2, [r7, #4]
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	781b      	ldrb	r3, [r3, #0]
 8018fe4:	009b      	lsls	r3, r3, #2
 8018fe6:	18d3      	adds	r3, r2, r3
 8018fe8:	881b      	ldrh	r3, [r3, #0]
 8018fea:	b29a      	uxth	r2, r3
 8018fec:	236c      	movs	r3, #108	@ 0x6c
 8018fee:	18fb      	adds	r3, r7, r3
 8018ff0:	49a3      	ldr	r1, [pc, #652]	@ (8019280 <USB_ActivateEndpoint+0x2b4>)
 8018ff2:	400a      	ands	r2, r1
 8018ff4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8018ff6:	683b      	ldr	r3, [r7, #0]
 8018ff8:	78db      	ldrb	r3, [r3, #3]
 8018ffa:	2b03      	cmp	r3, #3
 8018ffc:	d017      	beq.n	801902e <USB_ActivateEndpoint+0x62>
 8018ffe:	dc28      	bgt.n	8019052 <USB_ActivateEndpoint+0x86>
 8019000:	2b02      	cmp	r3, #2
 8019002:	d00e      	beq.n	8019022 <USB_ActivateEndpoint+0x56>
 8019004:	dc25      	bgt.n	8019052 <USB_ActivateEndpoint+0x86>
 8019006:	2b00      	cmp	r3, #0
 8019008:	d002      	beq.n	8019010 <USB_ActivateEndpoint+0x44>
 801900a:	2b01      	cmp	r3, #1
 801900c:	d018      	beq.n	8019040 <USB_ActivateEndpoint+0x74>
 801900e:	e020      	b.n	8019052 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019010:	226c      	movs	r2, #108	@ 0x6c
 8019012:	18bb      	adds	r3, r7, r2
 8019014:	18ba      	adds	r2, r7, r2
 8019016:	8812      	ldrh	r2, [r2, #0]
 8019018:	2180      	movs	r1, #128	@ 0x80
 801901a:	0089      	lsls	r1, r1, #2
 801901c:	430a      	orrs	r2, r1
 801901e:	801a      	strh	r2, [r3, #0]
      break;
 8019020:	e01c      	b.n	801905c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019022:	226c      	movs	r2, #108	@ 0x6c
 8019024:	18bb      	adds	r3, r7, r2
 8019026:	18ba      	adds	r2, r7, r2
 8019028:	8812      	ldrh	r2, [r2, #0]
 801902a:	801a      	strh	r2, [r3, #0]
      break;
 801902c:	e016      	b.n	801905c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801902e:	226c      	movs	r2, #108	@ 0x6c
 8019030:	18bb      	adds	r3, r7, r2
 8019032:	18ba      	adds	r2, r7, r2
 8019034:	8812      	ldrh	r2, [r2, #0]
 8019036:	21c0      	movs	r1, #192	@ 0xc0
 8019038:	00c9      	lsls	r1, r1, #3
 801903a:	430a      	orrs	r2, r1
 801903c:	801a      	strh	r2, [r3, #0]
      break;
 801903e:	e00d      	b.n	801905c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019040:	226c      	movs	r2, #108	@ 0x6c
 8019042:	18bb      	adds	r3, r7, r2
 8019044:	18ba      	adds	r2, r7, r2
 8019046:	8812      	ldrh	r2, [r2, #0]
 8019048:	2180      	movs	r1, #128	@ 0x80
 801904a:	00c9      	lsls	r1, r1, #3
 801904c:	430a      	orrs	r2, r1
 801904e:	801a      	strh	r2, [r3, #0]
      break;
 8019050:	e004      	b.n	801905c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019052:	236f      	movs	r3, #111	@ 0x6f
 8019054:	18fb      	adds	r3, r7, r3
 8019056:	2201      	movs	r2, #1
 8019058:	701a      	strb	r2, [r3, #0]
      break;
 801905a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801905c:	687a      	ldr	r2, [r7, #4]
 801905e:	683b      	ldr	r3, [r7, #0]
 8019060:	781b      	ldrb	r3, [r3, #0]
 8019062:	009b      	lsls	r3, r3, #2
 8019064:	18d3      	adds	r3, r2, r3
 8019066:	226c      	movs	r2, #108	@ 0x6c
 8019068:	18ba      	adds	r2, r7, r2
 801906a:	8812      	ldrh	r2, [r2, #0]
 801906c:	4985      	ldr	r1, [pc, #532]	@ (8019284 <USB_ActivateEndpoint+0x2b8>)
 801906e:	430a      	orrs	r2, r1
 8019070:	b292      	uxth	r2, r2
 8019072:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8019074:	687a      	ldr	r2, [r7, #4]
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	781b      	ldrb	r3, [r3, #0]
 801907a:	009b      	lsls	r3, r3, #2
 801907c:	18d3      	adds	r3, r2, r3
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	b29b      	uxth	r3, r3
 8019082:	b21b      	sxth	r3, r3
 8019084:	4a80      	ldr	r2, [pc, #512]	@ (8019288 <USB_ActivateEndpoint+0x2bc>)
 8019086:	4013      	ands	r3, r2
 8019088:	b21a      	sxth	r2, r3
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	781b      	ldrb	r3, [r3, #0]
 801908e:	b21b      	sxth	r3, r3
 8019090:	4313      	orrs	r3, r2
 8019092:	b21a      	sxth	r2, r3
 8019094:	2166      	movs	r1, #102	@ 0x66
 8019096:	187b      	adds	r3, r7, r1
 8019098:	801a      	strh	r2, [r3, #0]
 801909a:	687a      	ldr	r2, [r7, #4]
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	781b      	ldrb	r3, [r3, #0]
 80190a0:	009b      	lsls	r3, r3, #2
 80190a2:	18d3      	adds	r3, r2, r3
 80190a4:	187a      	adds	r2, r7, r1
 80190a6:	8812      	ldrh	r2, [r2, #0]
 80190a8:	4976      	ldr	r1, [pc, #472]	@ (8019284 <USB_ActivateEndpoint+0x2b8>)
 80190aa:	430a      	orrs	r2, r1
 80190ac:	b292      	uxth	r2, r2
 80190ae:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	7b1b      	ldrb	r3, [r3, #12]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d000      	beq.n	80190ba <USB_ActivateEndpoint+0xee>
 80190b8:	e178      	b.n	80193ac <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	785b      	ldrb	r3, [r3, #1]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d100      	bne.n	80190c4 <USB_ActivateEndpoint+0xf8>
 80190c2:	e07a      	b.n	80191ba <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	61bb      	str	r3, [r7, #24]
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	2250      	movs	r2, #80	@ 0x50
 80190cc:	5a9b      	ldrh	r3, [r3, r2]
 80190ce:	b29b      	uxth	r3, r3
 80190d0:	001a      	movs	r2, r3
 80190d2:	69bb      	ldr	r3, [r7, #24]
 80190d4:	189b      	adds	r3, r3, r2
 80190d6:	61bb      	str	r3, [r7, #24]
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	781b      	ldrb	r3, [r3, #0]
 80190dc:	00da      	lsls	r2, r3, #3
 80190de:	69bb      	ldr	r3, [r7, #24]
 80190e0:	18d3      	adds	r3, r2, r3
 80190e2:	2280      	movs	r2, #128	@ 0x80
 80190e4:	00d2      	lsls	r2, r2, #3
 80190e6:	4694      	mov	ip, r2
 80190e8:	4463      	add	r3, ip
 80190ea:	617b      	str	r3, [r7, #20]
 80190ec:	683b      	ldr	r3, [r7, #0]
 80190ee:	88db      	ldrh	r3, [r3, #6]
 80190f0:	085b      	lsrs	r3, r3, #1
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	18db      	adds	r3, r3, r3
 80190f6:	b29a      	uxth	r2, r3
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80190fc:	687a      	ldr	r2, [r7, #4]
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	781b      	ldrb	r3, [r3, #0]
 8019102:	009b      	lsls	r3, r3, #2
 8019104:	18d2      	adds	r2, r2, r3
 8019106:	2112      	movs	r1, #18
 8019108:	187b      	adds	r3, r7, r1
 801910a:	8812      	ldrh	r2, [r2, #0]
 801910c:	801a      	strh	r2, [r3, #0]
 801910e:	187b      	adds	r3, r7, r1
 8019110:	881b      	ldrh	r3, [r3, #0]
 8019112:	2240      	movs	r2, #64	@ 0x40
 8019114:	4013      	ands	r3, r2
 8019116:	d016      	beq.n	8019146 <USB_ActivateEndpoint+0x17a>
 8019118:	687a      	ldr	r2, [r7, #4]
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	781b      	ldrb	r3, [r3, #0]
 801911e:	009b      	lsls	r3, r3, #2
 8019120:	18d3      	adds	r3, r2, r3
 8019122:	881b      	ldrh	r3, [r3, #0]
 8019124:	b29a      	uxth	r2, r3
 8019126:	2010      	movs	r0, #16
 8019128:	183b      	adds	r3, r7, r0
 801912a:	4957      	ldr	r1, [pc, #348]	@ (8019288 <USB_ActivateEndpoint+0x2bc>)
 801912c:	400a      	ands	r2, r1
 801912e:	801a      	strh	r2, [r3, #0]
 8019130:	687a      	ldr	r2, [r7, #4]
 8019132:	683b      	ldr	r3, [r7, #0]
 8019134:	781b      	ldrb	r3, [r3, #0]
 8019136:	009b      	lsls	r3, r3, #2
 8019138:	18d3      	adds	r3, r2, r3
 801913a:	183a      	adds	r2, r7, r0
 801913c:	8812      	ldrh	r2, [r2, #0]
 801913e:	4953      	ldr	r1, [pc, #332]	@ (801928c <USB_ActivateEndpoint+0x2c0>)
 8019140:	430a      	orrs	r2, r1
 8019142:	b292      	uxth	r2, r2
 8019144:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019146:	683b      	ldr	r3, [r7, #0]
 8019148:	78db      	ldrb	r3, [r3, #3]
 801914a:	2b01      	cmp	r3, #1
 801914c:	d01d      	beq.n	801918a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801914e:	687a      	ldr	r2, [r7, #4]
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	009b      	lsls	r3, r3, #2
 8019156:	18d3      	adds	r3, r2, r3
 8019158:	881b      	ldrh	r3, [r3, #0]
 801915a:	b29a      	uxth	r2, r3
 801915c:	200c      	movs	r0, #12
 801915e:	183b      	adds	r3, r7, r0
 8019160:	494b      	ldr	r1, [pc, #300]	@ (8019290 <USB_ActivateEndpoint+0x2c4>)
 8019162:	400a      	ands	r2, r1
 8019164:	801a      	strh	r2, [r3, #0]
 8019166:	183b      	adds	r3, r7, r0
 8019168:	183a      	adds	r2, r7, r0
 801916a:	8812      	ldrh	r2, [r2, #0]
 801916c:	2120      	movs	r1, #32
 801916e:	404a      	eors	r2, r1
 8019170:	801a      	strh	r2, [r3, #0]
 8019172:	687a      	ldr	r2, [r7, #4]
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	781b      	ldrb	r3, [r3, #0]
 8019178:	009b      	lsls	r3, r3, #2
 801917a:	18d3      	adds	r3, r2, r3
 801917c:	183a      	adds	r2, r7, r0
 801917e:	8812      	ldrh	r2, [r2, #0]
 8019180:	4940      	ldr	r1, [pc, #256]	@ (8019284 <USB_ActivateEndpoint+0x2b8>)
 8019182:	430a      	orrs	r2, r1
 8019184:	b292      	uxth	r2, r2
 8019186:	801a      	strh	r2, [r3, #0]
 8019188:	e2b4      	b.n	80196f4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	683b      	ldr	r3, [r7, #0]
 801918e:	781b      	ldrb	r3, [r3, #0]
 8019190:	009b      	lsls	r3, r3, #2
 8019192:	18d3      	adds	r3, r2, r3
 8019194:	881b      	ldrh	r3, [r3, #0]
 8019196:	b29a      	uxth	r2, r3
 8019198:	200e      	movs	r0, #14
 801919a:	183b      	adds	r3, r7, r0
 801919c:	493c      	ldr	r1, [pc, #240]	@ (8019290 <USB_ActivateEndpoint+0x2c4>)
 801919e:	400a      	ands	r2, r1
 80191a0:	801a      	strh	r2, [r3, #0]
 80191a2:	687a      	ldr	r2, [r7, #4]
 80191a4:	683b      	ldr	r3, [r7, #0]
 80191a6:	781b      	ldrb	r3, [r3, #0]
 80191a8:	009b      	lsls	r3, r3, #2
 80191aa:	18d3      	adds	r3, r2, r3
 80191ac:	183a      	adds	r2, r7, r0
 80191ae:	8812      	ldrh	r2, [r2, #0]
 80191b0:	4934      	ldr	r1, [pc, #208]	@ (8019284 <USB_ActivateEndpoint+0x2b8>)
 80191b2:	430a      	orrs	r2, r1
 80191b4:	b292      	uxth	r2, r2
 80191b6:	801a      	strh	r2, [r3, #0]
 80191b8:	e29c      	b.n	80196f4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2250      	movs	r2, #80	@ 0x50
 80191c2:	5a9b      	ldrh	r3, [r3, r2]
 80191c4:	b29b      	uxth	r3, r3
 80191c6:	001a      	movs	r2, r3
 80191c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191ca:	189b      	adds	r3, r3, r2
 80191cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	781b      	ldrb	r3, [r3, #0]
 80191d2:	00da      	lsls	r2, r3, #3
 80191d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191d6:	18d3      	adds	r3, r2, r3
 80191d8:	4a2e      	ldr	r2, [pc, #184]	@ (8019294 <USB_ActivateEndpoint+0x2c8>)
 80191da:	4694      	mov	ip, r2
 80191dc:	4463      	add	r3, ip
 80191de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	88db      	ldrh	r3, [r3, #6]
 80191e4:	085b      	lsrs	r3, r3, #1
 80191e6:	b29b      	uxth	r3, r3
 80191e8:	18db      	adds	r3, r3, r3
 80191ea:	b29a      	uxth	r2, r3
 80191ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2250      	movs	r2, #80	@ 0x50
 80191f8:	5a9b      	ldrh	r3, [r3, r2]
 80191fa:	b29b      	uxth	r3, r3
 80191fc:	001a      	movs	r2, r3
 80191fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019200:	189b      	adds	r3, r3, r2
 8019202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	00da      	lsls	r2, r3, #3
 801920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801920c:	18d3      	adds	r3, r2, r3
 801920e:	4a22      	ldr	r2, [pc, #136]	@ (8019298 <USB_ActivateEndpoint+0x2cc>)
 8019210:	4694      	mov	ip, r2
 8019212:	4463      	add	r3, ip
 8019214:	627b      	str	r3, [r7, #36]	@ 0x24
 8019216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019218:	881b      	ldrh	r3, [r3, #0]
 801921a:	b29b      	uxth	r3, r3
 801921c:	059b      	lsls	r3, r3, #22
 801921e:	0d9b      	lsrs	r3, r3, #22
 8019220:	b29a      	uxth	r2, r3
 8019222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019224:	801a      	strh	r2, [r3, #0]
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	691b      	ldr	r3, [r3, #16]
 801922a:	2b3e      	cmp	r3, #62	@ 0x3e
 801922c:	d91a      	bls.n	8019264 <USB_ActivateEndpoint+0x298>
 801922e:	683b      	ldr	r3, [r7, #0]
 8019230:	691b      	ldr	r3, [r3, #16]
 8019232:	095b      	lsrs	r3, r3, #5
 8019234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	691b      	ldr	r3, [r3, #16]
 801923a:	221f      	movs	r2, #31
 801923c:	4013      	ands	r3, r2
 801923e:	d102      	bne.n	8019246 <USB_ActivateEndpoint+0x27a>
 8019240:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019242:	3b01      	subs	r3, #1
 8019244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019248:	881b      	ldrh	r3, [r3, #0]
 801924a:	b29a      	uxth	r2, r3
 801924c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801924e:	b29b      	uxth	r3, r3
 8019250:	029b      	lsls	r3, r3, #10
 8019252:	b29b      	uxth	r3, r3
 8019254:	4313      	orrs	r3, r2
 8019256:	b29b      	uxth	r3, r3
 8019258:	4a10      	ldr	r2, [pc, #64]	@ (801929c <USB_ActivateEndpoint+0x2d0>)
 801925a:	4313      	orrs	r3, r2
 801925c:	b29a      	uxth	r2, r3
 801925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019260:	801a      	strh	r2, [r3, #0]
 8019262:	e034      	b.n	80192ce <USB_ActivateEndpoint+0x302>
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	691b      	ldr	r3, [r3, #16]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d119      	bne.n	80192a0 <USB_ActivateEndpoint+0x2d4>
 801926c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801926e:	881b      	ldrh	r3, [r3, #0]
 8019270:	b29b      	uxth	r3, r3
 8019272:	4a0a      	ldr	r2, [pc, #40]	@ (801929c <USB_ActivateEndpoint+0x2d0>)
 8019274:	4313      	orrs	r3, r2
 8019276:	b29a      	uxth	r2, r3
 8019278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801927a:	801a      	strh	r2, [r3, #0]
 801927c:	e027      	b.n	80192ce <USB_ActivateEndpoint+0x302>
 801927e:	46c0      	nop			@ (mov r8, r8)
 8019280:	ffff898f 	.word	0xffff898f
 8019284:	ffff8080 	.word	0xffff8080
 8019288:	ffff8f8f 	.word	0xffff8f8f
 801928c:	ffff80c0 	.word	0xffff80c0
 8019290:	ffff8fbf 	.word	0xffff8fbf
 8019294:	00000404 	.word	0x00000404
 8019298:	00000406 	.word	0x00000406
 801929c:	ffff8000 	.word	0xffff8000
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	691b      	ldr	r3, [r3, #16]
 80192a4:	085b      	lsrs	r3, r3, #1
 80192a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	691b      	ldr	r3, [r3, #16]
 80192ac:	2201      	movs	r2, #1
 80192ae:	4013      	ands	r3, r2
 80192b0:	d002      	beq.n	80192b8 <USB_ActivateEndpoint+0x2ec>
 80192b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192b4:	3301      	adds	r3, #1
 80192b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80192b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ba:	881b      	ldrh	r3, [r3, #0]
 80192bc:	b29a      	uxth	r2, r3
 80192be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192c0:	b29b      	uxth	r3, r3
 80192c2:	029b      	lsls	r3, r3, #10
 80192c4:	b29b      	uxth	r3, r3
 80192c6:	4313      	orrs	r3, r2
 80192c8:	b29a      	uxth	r2, r3
 80192ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	009b      	lsls	r3, r3, #2
 80192d6:	18d2      	adds	r2, r2, r3
 80192d8:	2122      	movs	r1, #34	@ 0x22
 80192da:	187b      	adds	r3, r7, r1
 80192dc:	8812      	ldrh	r2, [r2, #0]
 80192de:	801a      	strh	r2, [r3, #0]
 80192e0:	187b      	adds	r3, r7, r1
 80192e2:	881a      	ldrh	r2, [r3, #0]
 80192e4:	2380      	movs	r3, #128	@ 0x80
 80192e6:	01db      	lsls	r3, r3, #7
 80192e8:	4013      	ands	r3, r2
 80192ea:	d016      	beq.n	801931a <USB_ActivateEndpoint+0x34e>
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	781b      	ldrb	r3, [r3, #0]
 80192f2:	009b      	lsls	r3, r3, #2
 80192f4:	18d3      	adds	r3, r2, r3
 80192f6:	881b      	ldrh	r3, [r3, #0]
 80192f8:	b29a      	uxth	r2, r3
 80192fa:	2020      	movs	r0, #32
 80192fc:	183b      	adds	r3, r7, r0
 80192fe:	49dd      	ldr	r1, [pc, #884]	@ (8019674 <USB_ActivateEndpoint+0x6a8>)
 8019300:	400a      	ands	r2, r1
 8019302:	801a      	strh	r2, [r3, #0]
 8019304:	687a      	ldr	r2, [r7, #4]
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	781b      	ldrb	r3, [r3, #0]
 801930a:	009b      	lsls	r3, r3, #2
 801930c:	18d3      	adds	r3, r2, r3
 801930e:	183a      	adds	r2, r7, r0
 8019310:	8812      	ldrh	r2, [r2, #0]
 8019312:	49d9      	ldr	r1, [pc, #868]	@ (8019678 <USB_ActivateEndpoint+0x6ac>)
 8019314:	430a      	orrs	r2, r1
 8019316:	b292      	uxth	r2, r2
 8019318:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801931a:	683b      	ldr	r3, [r7, #0]
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d125      	bne.n	801936e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	683b      	ldr	r3, [r7, #0]
 8019326:	781b      	ldrb	r3, [r3, #0]
 8019328:	009b      	lsls	r3, r3, #2
 801932a:	18d3      	adds	r3, r2, r3
 801932c:	881b      	ldrh	r3, [r3, #0]
 801932e:	b29a      	uxth	r2, r3
 8019330:	201c      	movs	r0, #28
 8019332:	183b      	adds	r3, r7, r0
 8019334:	49d1      	ldr	r1, [pc, #836]	@ (801967c <USB_ActivateEndpoint+0x6b0>)
 8019336:	400a      	ands	r2, r1
 8019338:	801a      	strh	r2, [r3, #0]
 801933a:	183b      	adds	r3, r7, r0
 801933c:	183a      	adds	r2, r7, r0
 801933e:	8812      	ldrh	r2, [r2, #0]
 8019340:	2180      	movs	r1, #128	@ 0x80
 8019342:	0149      	lsls	r1, r1, #5
 8019344:	404a      	eors	r2, r1
 8019346:	801a      	strh	r2, [r3, #0]
 8019348:	183b      	adds	r3, r7, r0
 801934a:	183a      	adds	r2, r7, r0
 801934c:	8812      	ldrh	r2, [r2, #0]
 801934e:	2180      	movs	r1, #128	@ 0x80
 8019350:	0189      	lsls	r1, r1, #6
 8019352:	404a      	eors	r2, r1
 8019354:	801a      	strh	r2, [r3, #0]
 8019356:	687a      	ldr	r2, [r7, #4]
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	009b      	lsls	r3, r3, #2
 801935e:	18d3      	adds	r3, r2, r3
 8019360:	183a      	adds	r2, r7, r0
 8019362:	8812      	ldrh	r2, [r2, #0]
 8019364:	49c6      	ldr	r1, [pc, #792]	@ (8019680 <USB_ActivateEndpoint+0x6b4>)
 8019366:	430a      	orrs	r2, r1
 8019368:	b292      	uxth	r2, r2
 801936a:	801a      	strh	r2, [r3, #0]
 801936c:	e1c2      	b.n	80196f4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801936e:	687a      	ldr	r2, [r7, #4]
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	781b      	ldrb	r3, [r3, #0]
 8019374:	009b      	lsls	r3, r3, #2
 8019376:	18d3      	adds	r3, r2, r3
 8019378:	881b      	ldrh	r3, [r3, #0]
 801937a:	b29a      	uxth	r2, r3
 801937c:	201e      	movs	r0, #30
 801937e:	183b      	adds	r3, r7, r0
 8019380:	49be      	ldr	r1, [pc, #760]	@ (801967c <USB_ActivateEndpoint+0x6b0>)
 8019382:	400a      	ands	r2, r1
 8019384:	801a      	strh	r2, [r3, #0]
 8019386:	183b      	adds	r3, r7, r0
 8019388:	183a      	adds	r2, r7, r0
 801938a:	8812      	ldrh	r2, [r2, #0]
 801938c:	2180      	movs	r1, #128	@ 0x80
 801938e:	0189      	lsls	r1, r1, #6
 8019390:	404a      	eors	r2, r1
 8019392:	801a      	strh	r2, [r3, #0]
 8019394:	687a      	ldr	r2, [r7, #4]
 8019396:	683b      	ldr	r3, [r7, #0]
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	18d3      	adds	r3, r2, r3
 801939e:	183a      	adds	r2, r7, r0
 80193a0:	8812      	ldrh	r2, [r2, #0]
 80193a2:	49b7      	ldr	r1, [pc, #732]	@ (8019680 <USB_ActivateEndpoint+0x6b4>)
 80193a4:	430a      	orrs	r2, r1
 80193a6:	b292      	uxth	r2, r2
 80193a8:	801a      	strh	r2, [r3, #0]
 80193aa:	e1a3      	b.n	80196f4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	78db      	ldrb	r3, [r3, #3]
 80193b0:	2b02      	cmp	r3, #2
 80193b2:	d117      	bne.n	80193e4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80193b4:	687a      	ldr	r2, [r7, #4]
 80193b6:	683b      	ldr	r3, [r7, #0]
 80193b8:	781b      	ldrb	r3, [r3, #0]
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	18d3      	adds	r3, r2, r3
 80193be:	881b      	ldrh	r3, [r3, #0]
 80193c0:	b29a      	uxth	r2, r3
 80193c2:	2062      	movs	r0, #98	@ 0x62
 80193c4:	183b      	adds	r3, r7, r0
 80193c6:	49ab      	ldr	r1, [pc, #684]	@ (8019674 <USB_ActivateEndpoint+0x6a8>)
 80193c8:	400a      	ands	r2, r1
 80193ca:	801a      	strh	r2, [r3, #0]
 80193cc:	687a      	ldr	r2, [r7, #4]
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	781b      	ldrb	r3, [r3, #0]
 80193d2:	009b      	lsls	r3, r3, #2
 80193d4:	18d3      	adds	r3, r2, r3
 80193d6:	183a      	adds	r2, r7, r0
 80193d8:	8812      	ldrh	r2, [r2, #0]
 80193da:	49aa      	ldr	r1, [pc, #680]	@ (8019684 <USB_ActivateEndpoint+0x6b8>)
 80193dc:	430a      	orrs	r2, r1
 80193de:	b292      	uxth	r2, r2
 80193e0:	801a      	strh	r2, [r3, #0]
 80193e2:	e016      	b.n	8019412 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80193e4:	687a      	ldr	r2, [r7, #4]
 80193e6:	683b      	ldr	r3, [r7, #0]
 80193e8:	781b      	ldrb	r3, [r3, #0]
 80193ea:	009b      	lsls	r3, r3, #2
 80193ec:	18d3      	adds	r3, r2, r3
 80193ee:	881b      	ldrh	r3, [r3, #0]
 80193f0:	b29a      	uxth	r2, r3
 80193f2:	2064      	movs	r0, #100	@ 0x64
 80193f4:	183b      	adds	r3, r7, r0
 80193f6:	49a4      	ldr	r1, [pc, #656]	@ (8019688 <USB_ActivateEndpoint+0x6bc>)
 80193f8:	400a      	ands	r2, r1
 80193fa:	801a      	strh	r2, [r3, #0]
 80193fc:	687a      	ldr	r2, [r7, #4]
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	009b      	lsls	r3, r3, #2
 8019404:	18d3      	adds	r3, r2, r3
 8019406:	183a      	adds	r2, r7, r0
 8019408:	8812      	ldrh	r2, [r2, #0]
 801940a:	499d      	ldr	r1, [pc, #628]	@ (8019680 <USB_ActivateEndpoint+0x6b4>)
 801940c:	430a      	orrs	r2, r1
 801940e:	b292      	uxth	r2, r2
 8019410:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	2250      	movs	r2, #80	@ 0x50
 801941a:	5a9b      	ldrh	r3, [r3, r2]
 801941c:	b29b      	uxth	r3, r3
 801941e:	001a      	movs	r2, r3
 8019420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019422:	189b      	adds	r3, r3, r2
 8019424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	781b      	ldrb	r3, [r3, #0]
 801942a:	00da      	lsls	r2, r3, #3
 801942c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801942e:	18d3      	adds	r3, r2, r3
 8019430:	2280      	movs	r2, #128	@ 0x80
 8019432:	00d2      	lsls	r2, r2, #3
 8019434:	4694      	mov	ip, r2
 8019436:	4463      	add	r3, ip
 8019438:	65bb      	str	r3, [r7, #88]	@ 0x58
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	891b      	ldrh	r3, [r3, #8]
 801943e:	085b      	lsrs	r3, r3, #1
 8019440:	b29b      	uxth	r3, r3
 8019442:	18db      	adds	r3, r3, r3
 8019444:	b29a      	uxth	r2, r3
 8019446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019448:	801a      	strh	r2, [r3, #0]
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	657b      	str	r3, [r7, #84]	@ 0x54
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2250      	movs	r2, #80	@ 0x50
 8019452:	5a9b      	ldrh	r3, [r3, r2]
 8019454:	b29b      	uxth	r3, r3
 8019456:	001a      	movs	r2, r3
 8019458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801945a:	189b      	adds	r3, r3, r2
 801945c:	657b      	str	r3, [r7, #84]	@ 0x54
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	00da      	lsls	r2, r3, #3
 8019464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019466:	18d3      	adds	r3, r2, r3
 8019468:	4a88      	ldr	r2, [pc, #544]	@ (801968c <USB_ActivateEndpoint+0x6c0>)
 801946a:	4694      	mov	ip, r2
 801946c:	4463      	add	r3, ip
 801946e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019470:	683b      	ldr	r3, [r7, #0]
 8019472:	895b      	ldrh	r3, [r3, #10]
 8019474:	085b      	lsrs	r3, r3, #1
 8019476:	b29b      	uxth	r3, r3
 8019478:	18db      	adds	r3, r3, r3
 801947a:	b29a      	uxth	r2, r3
 801947c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801947e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	785b      	ldrb	r3, [r3, #1]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d000      	beq.n	801948a <USB_ActivateEndpoint+0x4be>
 8019488:	e087      	b.n	801959a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801948a:	687a      	ldr	r2, [r7, #4]
 801948c:	683b      	ldr	r3, [r7, #0]
 801948e:	781b      	ldrb	r3, [r3, #0]
 8019490:	009b      	lsls	r3, r3, #2
 8019492:	18d2      	adds	r2, r2, r3
 8019494:	2140      	movs	r1, #64	@ 0x40
 8019496:	187b      	adds	r3, r7, r1
 8019498:	8812      	ldrh	r2, [r2, #0]
 801949a:	801a      	strh	r2, [r3, #0]
 801949c:	187b      	adds	r3, r7, r1
 801949e:	881a      	ldrh	r2, [r3, #0]
 80194a0:	2380      	movs	r3, #128	@ 0x80
 80194a2:	01db      	lsls	r3, r3, #7
 80194a4:	4013      	ands	r3, r2
 80194a6:	d016      	beq.n	80194d6 <USB_ActivateEndpoint+0x50a>
 80194a8:	687a      	ldr	r2, [r7, #4]
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	781b      	ldrb	r3, [r3, #0]
 80194ae:	009b      	lsls	r3, r3, #2
 80194b0:	18d3      	adds	r3, r2, r3
 80194b2:	881b      	ldrh	r3, [r3, #0]
 80194b4:	b29a      	uxth	r2, r3
 80194b6:	203e      	movs	r0, #62	@ 0x3e
 80194b8:	183b      	adds	r3, r7, r0
 80194ba:	496e      	ldr	r1, [pc, #440]	@ (8019674 <USB_ActivateEndpoint+0x6a8>)
 80194bc:	400a      	ands	r2, r1
 80194be:	801a      	strh	r2, [r3, #0]
 80194c0:	687a      	ldr	r2, [r7, #4]
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	781b      	ldrb	r3, [r3, #0]
 80194c6:	009b      	lsls	r3, r3, #2
 80194c8:	18d3      	adds	r3, r2, r3
 80194ca:	183a      	adds	r2, r7, r0
 80194cc:	8812      	ldrh	r2, [r2, #0]
 80194ce:	496a      	ldr	r1, [pc, #424]	@ (8019678 <USB_ActivateEndpoint+0x6ac>)
 80194d0:	430a      	orrs	r2, r1
 80194d2:	b292      	uxth	r2, r2
 80194d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80194d6:	687a      	ldr	r2, [r7, #4]
 80194d8:	683b      	ldr	r3, [r7, #0]
 80194da:	781b      	ldrb	r3, [r3, #0]
 80194dc:	009b      	lsls	r3, r3, #2
 80194de:	18d2      	adds	r2, r2, r3
 80194e0:	213c      	movs	r1, #60	@ 0x3c
 80194e2:	187b      	adds	r3, r7, r1
 80194e4:	8812      	ldrh	r2, [r2, #0]
 80194e6:	801a      	strh	r2, [r3, #0]
 80194e8:	187b      	adds	r3, r7, r1
 80194ea:	881b      	ldrh	r3, [r3, #0]
 80194ec:	2240      	movs	r2, #64	@ 0x40
 80194ee:	4013      	ands	r3, r2
 80194f0:	d016      	beq.n	8019520 <USB_ActivateEndpoint+0x554>
 80194f2:	687a      	ldr	r2, [r7, #4]
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	009b      	lsls	r3, r3, #2
 80194fa:	18d3      	adds	r3, r2, r3
 80194fc:	881b      	ldrh	r3, [r3, #0]
 80194fe:	b29a      	uxth	r2, r3
 8019500:	203a      	movs	r0, #58	@ 0x3a
 8019502:	183b      	adds	r3, r7, r0
 8019504:	495b      	ldr	r1, [pc, #364]	@ (8019674 <USB_ActivateEndpoint+0x6a8>)
 8019506:	400a      	ands	r2, r1
 8019508:	801a      	strh	r2, [r3, #0]
 801950a:	687a      	ldr	r2, [r7, #4]
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	009b      	lsls	r3, r3, #2
 8019512:	18d3      	adds	r3, r2, r3
 8019514:	183a      	adds	r2, r7, r0
 8019516:	8812      	ldrh	r2, [r2, #0]
 8019518:	495d      	ldr	r1, [pc, #372]	@ (8019690 <USB_ActivateEndpoint+0x6c4>)
 801951a:	430a      	orrs	r2, r1
 801951c:	b292      	uxth	r2, r2
 801951e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019520:	687a      	ldr	r2, [r7, #4]
 8019522:	683b      	ldr	r3, [r7, #0]
 8019524:	781b      	ldrb	r3, [r3, #0]
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	18d3      	adds	r3, r2, r3
 801952a:	881b      	ldrh	r3, [r3, #0]
 801952c:	b29a      	uxth	r2, r3
 801952e:	2038      	movs	r0, #56	@ 0x38
 8019530:	183b      	adds	r3, r7, r0
 8019532:	4952      	ldr	r1, [pc, #328]	@ (801967c <USB_ActivateEndpoint+0x6b0>)
 8019534:	400a      	ands	r2, r1
 8019536:	801a      	strh	r2, [r3, #0]
 8019538:	183b      	adds	r3, r7, r0
 801953a:	183a      	adds	r2, r7, r0
 801953c:	8812      	ldrh	r2, [r2, #0]
 801953e:	2180      	movs	r1, #128	@ 0x80
 8019540:	0149      	lsls	r1, r1, #5
 8019542:	404a      	eors	r2, r1
 8019544:	801a      	strh	r2, [r3, #0]
 8019546:	183b      	adds	r3, r7, r0
 8019548:	183a      	adds	r2, r7, r0
 801954a:	8812      	ldrh	r2, [r2, #0]
 801954c:	2180      	movs	r1, #128	@ 0x80
 801954e:	0189      	lsls	r1, r1, #6
 8019550:	404a      	eors	r2, r1
 8019552:	801a      	strh	r2, [r3, #0]
 8019554:	687a      	ldr	r2, [r7, #4]
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	781b      	ldrb	r3, [r3, #0]
 801955a:	009b      	lsls	r3, r3, #2
 801955c:	18d3      	adds	r3, r2, r3
 801955e:	183a      	adds	r2, r7, r0
 8019560:	8812      	ldrh	r2, [r2, #0]
 8019562:	4947      	ldr	r1, [pc, #284]	@ (8019680 <USB_ActivateEndpoint+0x6b4>)
 8019564:	430a      	orrs	r2, r1
 8019566:	b292      	uxth	r2, r2
 8019568:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801956a:	687a      	ldr	r2, [r7, #4]
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	781b      	ldrb	r3, [r3, #0]
 8019570:	009b      	lsls	r3, r3, #2
 8019572:	18d3      	adds	r3, r2, r3
 8019574:	881b      	ldrh	r3, [r3, #0]
 8019576:	b29a      	uxth	r2, r3
 8019578:	2036      	movs	r0, #54	@ 0x36
 801957a:	183b      	adds	r3, r7, r0
 801957c:	4945      	ldr	r1, [pc, #276]	@ (8019694 <USB_ActivateEndpoint+0x6c8>)
 801957e:	400a      	ands	r2, r1
 8019580:	801a      	strh	r2, [r3, #0]
 8019582:	687a      	ldr	r2, [r7, #4]
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	781b      	ldrb	r3, [r3, #0]
 8019588:	009b      	lsls	r3, r3, #2
 801958a:	18d3      	adds	r3, r2, r3
 801958c:	183a      	adds	r2, r7, r0
 801958e:	8812      	ldrh	r2, [r2, #0]
 8019590:	493b      	ldr	r1, [pc, #236]	@ (8019680 <USB_ActivateEndpoint+0x6b4>)
 8019592:	430a      	orrs	r2, r1
 8019594:	b292      	uxth	r2, r2
 8019596:	801a      	strh	r2, [r3, #0]
 8019598:	e0ac      	b.n	80196f4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801959a:	687a      	ldr	r2, [r7, #4]
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	781b      	ldrb	r3, [r3, #0]
 80195a0:	009b      	lsls	r3, r3, #2
 80195a2:	18d2      	adds	r2, r2, r3
 80195a4:	214e      	movs	r1, #78	@ 0x4e
 80195a6:	187b      	adds	r3, r7, r1
 80195a8:	8812      	ldrh	r2, [r2, #0]
 80195aa:	801a      	strh	r2, [r3, #0]
 80195ac:	187b      	adds	r3, r7, r1
 80195ae:	881a      	ldrh	r2, [r3, #0]
 80195b0:	2380      	movs	r3, #128	@ 0x80
 80195b2:	01db      	lsls	r3, r3, #7
 80195b4:	4013      	ands	r3, r2
 80195b6:	d016      	beq.n	80195e6 <USB_ActivateEndpoint+0x61a>
 80195b8:	687a      	ldr	r2, [r7, #4]
 80195ba:	683b      	ldr	r3, [r7, #0]
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	009b      	lsls	r3, r3, #2
 80195c0:	18d3      	adds	r3, r2, r3
 80195c2:	881b      	ldrh	r3, [r3, #0]
 80195c4:	b29a      	uxth	r2, r3
 80195c6:	204c      	movs	r0, #76	@ 0x4c
 80195c8:	183b      	adds	r3, r7, r0
 80195ca:	492a      	ldr	r1, [pc, #168]	@ (8019674 <USB_ActivateEndpoint+0x6a8>)
 80195cc:	400a      	ands	r2, r1
 80195ce:	801a      	strh	r2, [r3, #0]
 80195d0:	687a      	ldr	r2, [r7, #4]
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	781b      	ldrb	r3, [r3, #0]
 80195d6:	009b      	lsls	r3, r3, #2
 80195d8:	18d3      	adds	r3, r2, r3
 80195da:	183a      	adds	r2, r7, r0
 80195dc:	8812      	ldrh	r2, [r2, #0]
 80195de:	4926      	ldr	r1, [pc, #152]	@ (8019678 <USB_ActivateEndpoint+0x6ac>)
 80195e0:	430a      	orrs	r2, r1
 80195e2:	b292      	uxth	r2, r2
 80195e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80195e6:	687a      	ldr	r2, [r7, #4]
 80195e8:	683b      	ldr	r3, [r7, #0]
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	009b      	lsls	r3, r3, #2
 80195ee:	18d2      	adds	r2, r2, r3
 80195f0:	214a      	movs	r1, #74	@ 0x4a
 80195f2:	187b      	adds	r3, r7, r1
 80195f4:	8812      	ldrh	r2, [r2, #0]
 80195f6:	801a      	strh	r2, [r3, #0]
 80195f8:	187b      	adds	r3, r7, r1
 80195fa:	881b      	ldrh	r3, [r3, #0]
 80195fc:	2240      	movs	r2, #64	@ 0x40
 80195fe:	4013      	ands	r3, r2
 8019600:	d016      	beq.n	8019630 <USB_ActivateEndpoint+0x664>
 8019602:	687a      	ldr	r2, [r7, #4]
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	781b      	ldrb	r3, [r3, #0]
 8019608:	009b      	lsls	r3, r3, #2
 801960a:	18d3      	adds	r3, r2, r3
 801960c:	881b      	ldrh	r3, [r3, #0]
 801960e:	b29a      	uxth	r2, r3
 8019610:	2048      	movs	r0, #72	@ 0x48
 8019612:	183b      	adds	r3, r7, r0
 8019614:	4917      	ldr	r1, [pc, #92]	@ (8019674 <USB_ActivateEndpoint+0x6a8>)
 8019616:	400a      	ands	r2, r1
 8019618:	801a      	strh	r2, [r3, #0]
 801961a:	687a      	ldr	r2, [r7, #4]
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	781b      	ldrb	r3, [r3, #0]
 8019620:	009b      	lsls	r3, r3, #2
 8019622:	18d3      	adds	r3, r2, r3
 8019624:	183a      	adds	r2, r7, r0
 8019626:	8812      	ldrh	r2, [r2, #0]
 8019628:	4919      	ldr	r1, [pc, #100]	@ (8019690 <USB_ActivateEndpoint+0x6c4>)
 801962a:	430a      	orrs	r2, r1
 801962c:	b292      	uxth	r2, r2
 801962e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	78db      	ldrb	r3, [r3, #3]
 8019634:	2b01      	cmp	r3, #1
 8019636:	d02f      	beq.n	8019698 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019638:	687a      	ldr	r2, [r7, #4]
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	781b      	ldrb	r3, [r3, #0]
 801963e:	009b      	lsls	r3, r3, #2
 8019640:	18d3      	adds	r3, r2, r3
 8019642:	881b      	ldrh	r3, [r3, #0]
 8019644:	b29a      	uxth	r2, r3
 8019646:	2044      	movs	r0, #68	@ 0x44
 8019648:	183b      	adds	r3, r7, r0
 801964a:	4912      	ldr	r1, [pc, #72]	@ (8019694 <USB_ActivateEndpoint+0x6c8>)
 801964c:	400a      	ands	r2, r1
 801964e:	801a      	strh	r2, [r3, #0]
 8019650:	183b      	adds	r3, r7, r0
 8019652:	183a      	adds	r2, r7, r0
 8019654:	8812      	ldrh	r2, [r2, #0]
 8019656:	2120      	movs	r1, #32
 8019658:	404a      	eors	r2, r1
 801965a:	801a      	strh	r2, [r3, #0]
 801965c:	687a      	ldr	r2, [r7, #4]
 801965e:	683b      	ldr	r3, [r7, #0]
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	009b      	lsls	r3, r3, #2
 8019664:	18d3      	adds	r3, r2, r3
 8019666:	183a      	adds	r2, r7, r0
 8019668:	8812      	ldrh	r2, [r2, #0]
 801966a:	4905      	ldr	r1, [pc, #20]	@ (8019680 <USB_ActivateEndpoint+0x6b4>)
 801966c:	430a      	orrs	r2, r1
 801966e:	b292      	uxth	r2, r2
 8019670:	801a      	strh	r2, [r3, #0]
 8019672:	e028      	b.n	80196c6 <USB_ActivateEndpoint+0x6fa>
 8019674:	ffff8f8f 	.word	0xffff8f8f
 8019678:	ffffc080 	.word	0xffffc080
 801967c:	ffffbf8f 	.word	0xffffbf8f
 8019680:	ffff8080 	.word	0xffff8080
 8019684:	ffff8180 	.word	0xffff8180
 8019688:	ffff8e8f 	.word	0xffff8e8f
 801968c:	00000404 	.word	0x00000404
 8019690:	ffff80c0 	.word	0xffff80c0
 8019694:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019698:	687a      	ldr	r2, [r7, #4]
 801969a:	683b      	ldr	r3, [r7, #0]
 801969c:	781b      	ldrb	r3, [r3, #0]
 801969e:	009b      	lsls	r3, r3, #2
 80196a0:	18d3      	adds	r3, r2, r3
 80196a2:	881b      	ldrh	r3, [r3, #0]
 80196a4:	b29a      	uxth	r2, r3
 80196a6:	2046      	movs	r0, #70	@ 0x46
 80196a8:	183b      	adds	r3, r7, r0
 80196aa:	4916      	ldr	r1, [pc, #88]	@ (8019704 <USB_ActivateEndpoint+0x738>)
 80196ac:	400a      	ands	r2, r1
 80196ae:	801a      	strh	r2, [r3, #0]
 80196b0:	687a      	ldr	r2, [r7, #4]
 80196b2:	683b      	ldr	r3, [r7, #0]
 80196b4:	781b      	ldrb	r3, [r3, #0]
 80196b6:	009b      	lsls	r3, r3, #2
 80196b8:	18d3      	adds	r3, r2, r3
 80196ba:	183a      	adds	r2, r7, r0
 80196bc:	8812      	ldrh	r2, [r2, #0]
 80196be:	4912      	ldr	r1, [pc, #72]	@ (8019708 <USB_ActivateEndpoint+0x73c>)
 80196c0:	430a      	orrs	r2, r1
 80196c2:	b292      	uxth	r2, r2
 80196c4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80196c6:	687a      	ldr	r2, [r7, #4]
 80196c8:	683b      	ldr	r3, [r7, #0]
 80196ca:	781b      	ldrb	r3, [r3, #0]
 80196cc:	009b      	lsls	r3, r3, #2
 80196ce:	18d3      	adds	r3, r2, r3
 80196d0:	881b      	ldrh	r3, [r3, #0]
 80196d2:	b29a      	uxth	r2, r3
 80196d4:	2042      	movs	r0, #66	@ 0x42
 80196d6:	183b      	adds	r3, r7, r0
 80196d8:	490c      	ldr	r1, [pc, #48]	@ (801970c <USB_ActivateEndpoint+0x740>)
 80196da:	400a      	ands	r2, r1
 80196dc:	801a      	strh	r2, [r3, #0]
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	781b      	ldrb	r3, [r3, #0]
 80196e4:	009b      	lsls	r3, r3, #2
 80196e6:	18d3      	adds	r3, r2, r3
 80196e8:	183a      	adds	r2, r7, r0
 80196ea:	8812      	ldrh	r2, [r2, #0]
 80196ec:	4906      	ldr	r1, [pc, #24]	@ (8019708 <USB_ActivateEndpoint+0x73c>)
 80196ee:	430a      	orrs	r2, r1
 80196f0:	b292      	uxth	r2, r2
 80196f2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80196f4:	236f      	movs	r3, #111	@ 0x6f
 80196f6:	18fb      	adds	r3, r7, r3
 80196f8:	781b      	ldrb	r3, [r3, #0]
}
 80196fa:	0018      	movs	r0, r3
 80196fc:	46bd      	mov	sp, r7
 80196fe:	b01c      	add	sp, #112	@ 0x70
 8019700:	bd80      	pop	{r7, pc}
 8019702:	46c0      	nop			@ (mov r8, r8)
 8019704:	ffff8fbf 	.word	0xffff8fbf
 8019708:	ffff8080 	.word	0xffff8080
 801970c:	ffffbf8f 	.word	0xffffbf8f

08019710 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b08c      	sub	sp, #48	@ 0x30
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
 8019718:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801971a:	683b      	ldr	r3, [r7, #0]
 801971c:	7b1b      	ldrb	r3, [r3, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d000      	beq.n	8019724 <USB_DeactivateEndpoint+0x14>
 8019722:	e07e      	b.n	8019822 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	785b      	ldrb	r3, [r3, #1]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d03c      	beq.n	80197a6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801972c:	687a      	ldr	r2, [r7, #4]
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	781b      	ldrb	r3, [r3, #0]
 8019732:	009b      	lsls	r3, r3, #2
 8019734:	18d2      	adds	r2, r2, r3
 8019736:	210c      	movs	r1, #12
 8019738:	187b      	adds	r3, r7, r1
 801973a:	8812      	ldrh	r2, [r2, #0]
 801973c:	801a      	strh	r2, [r3, #0]
 801973e:	187b      	adds	r3, r7, r1
 8019740:	881b      	ldrh	r3, [r3, #0]
 8019742:	2240      	movs	r2, #64	@ 0x40
 8019744:	4013      	ands	r3, r2
 8019746:	d016      	beq.n	8019776 <USB_DeactivateEndpoint+0x66>
 8019748:	687a      	ldr	r2, [r7, #4]
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	781b      	ldrb	r3, [r3, #0]
 801974e:	009b      	lsls	r3, r3, #2
 8019750:	18d3      	adds	r3, r2, r3
 8019752:	881b      	ldrh	r3, [r3, #0]
 8019754:	b29a      	uxth	r2, r3
 8019756:	200a      	movs	r0, #10
 8019758:	183b      	adds	r3, r7, r0
 801975a:	49c7      	ldr	r1, [pc, #796]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 801975c:	400a      	ands	r2, r1
 801975e:	801a      	strh	r2, [r3, #0]
 8019760:	687a      	ldr	r2, [r7, #4]
 8019762:	683b      	ldr	r3, [r7, #0]
 8019764:	781b      	ldrb	r3, [r3, #0]
 8019766:	009b      	lsls	r3, r3, #2
 8019768:	18d3      	adds	r3, r2, r3
 801976a:	183a      	adds	r2, r7, r0
 801976c:	8812      	ldrh	r2, [r2, #0]
 801976e:	49c3      	ldr	r1, [pc, #780]	@ (8019a7c <USB_DeactivateEndpoint+0x36c>)
 8019770:	430a      	orrs	r2, r1
 8019772:	b292      	uxth	r2, r2
 8019774:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019776:	687a      	ldr	r2, [r7, #4]
 8019778:	683b      	ldr	r3, [r7, #0]
 801977a:	781b      	ldrb	r3, [r3, #0]
 801977c:	009b      	lsls	r3, r3, #2
 801977e:	18d3      	adds	r3, r2, r3
 8019780:	881b      	ldrh	r3, [r3, #0]
 8019782:	b29a      	uxth	r2, r3
 8019784:	2008      	movs	r0, #8
 8019786:	183b      	adds	r3, r7, r0
 8019788:	49bd      	ldr	r1, [pc, #756]	@ (8019a80 <USB_DeactivateEndpoint+0x370>)
 801978a:	400a      	ands	r2, r1
 801978c:	801a      	strh	r2, [r3, #0]
 801978e:	687a      	ldr	r2, [r7, #4]
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	781b      	ldrb	r3, [r3, #0]
 8019794:	009b      	lsls	r3, r3, #2
 8019796:	18d3      	adds	r3, r2, r3
 8019798:	183a      	adds	r2, r7, r0
 801979a:	8812      	ldrh	r2, [r2, #0]
 801979c:	49b9      	ldr	r1, [pc, #740]	@ (8019a84 <USB_DeactivateEndpoint+0x374>)
 801979e:	430a      	orrs	r2, r1
 80197a0:	b292      	uxth	r2, r2
 80197a2:	801a      	strh	r2, [r3, #0]
 80197a4:	e163      	b.n	8019a6e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	781b      	ldrb	r3, [r3, #0]
 80197ac:	009b      	lsls	r3, r3, #2
 80197ae:	18d2      	adds	r2, r2, r3
 80197b0:	2112      	movs	r1, #18
 80197b2:	187b      	adds	r3, r7, r1
 80197b4:	8812      	ldrh	r2, [r2, #0]
 80197b6:	801a      	strh	r2, [r3, #0]
 80197b8:	187b      	adds	r3, r7, r1
 80197ba:	881a      	ldrh	r2, [r3, #0]
 80197bc:	2380      	movs	r3, #128	@ 0x80
 80197be:	01db      	lsls	r3, r3, #7
 80197c0:	4013      	ands	r3, r2
 80197c2:	d016      	beq.n	80197f2 <USB_DeactivateEndpoint+0xe2>
 80197c4:	687a      	ldr	r2, [r7, #4]
 80197c6:	683b      	ldr	r3, [r7, #0]
 80197c8:	781b      	ldrb	r3, [r3, #0]
 80197ca:	009b      	lsls	r3, r3, #2
 80197cc:	18d3      	adds	r3, r2, r3
 80197ce:	881b      	ldrh	r3, [r3, #0]
 80197d0:	b29a      	uxth	r2, r3
 80197d2:	2010      	movs	r0, #16
 80197d4:	183b      	adds	r3, r7, r0
 80197d6:	49a8      	ldr	r1, [pc, #672]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 80197d8:	400a      	ands	r2, r1
 80197da:	801a      	strh	r2, [r3, #0]
 80197dc:	687a      	ldr	r2, [r7, #4]
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	781b      	ldrb	r3, [r3, #0]
 80197e2:	009b      	lsls	r3, r3, #2
 80197e4:	18d3      	adds	r3, r2, r3
 80197e6:	183a      	adds	r2, r7, r0
 80197e8:	8812      	ldrh	r2, [r2, #0]
 80197ea:	49a7      	ldr	r1, [pc, #668]	@ (8019a88 <USB_DeactivateEndpoint+0x378>)
 80197ec:	430a      	orrs	r2, r1
 80197ee:	b292      	uxth	r2, r2
 80197f0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80197f2:	687a      	ldr	r2, [r7, #4]
 80197f4:	683b      	ldr	r3, [r7, #0]
 80197f6:	781b      	ldrb	r3, [r3, #0]
 80197f8:	009b      	lsls	r3, r3, #2
 80197fa:	18d3      	adds	r3, r2, r3
 80197fc:	881b      	ldrh	r3, [r3, #0]
 80197fe:	b29a      	uxth	r2, r3
 8019800:	200e      	movs	r0, #14
 8019802:	183b      	adds	r3, r7, r0
 8019804:	49a1      	ldr	r1, [pc, #644]	@ (8019a8c <USB_DeactivateEndpoint+0x37c>)
 8019806:	400a      	ands	r2, r1
 8019808:	801a      	strh	r2, [r3, #0]
 801980a:	687a      	ldr	r2, [r7, #4]
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	009b      	lsls	r3, r3, #2
 8019812:	18d3      	adds	r3, r2, r3
 8019814:	183a      	adds	r2, r7, r0
 8019816:	8812      	ldrh	r2, [r2, #0]
 8019818:	499a      	ldr	r1, [pc, #616]	@ (8019a84 <USB_DeactivateEndpoint+0x374>)
 801981a:	430a      	orrs	r2, r1
 801981c:	b292      	uxth	r2, r2
 801981e:	801a      	strh	r2, [r3, #0]
 8019820:	e125      	b.n	8019a6e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	785b      	ldrb	r3, [r3, #1]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d000      	beq.n	801982c <USB_DeactivateEndpoint+0x11c>
 801982a:	e090      	b.n	801994e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801982c:	687a      	ldr	r2, [r7, #4]
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	009b      	lsls	r3, r3, #2
 8019834:	18d2      	adds	r2, r2, r3
 8019836:	2120      	movs	r1, #32
 8019838:	187b      	adds	r3, r7, r1
 801983a:	8812      	ldrh	r2, [r2, #0]
 801983c:	801a      	strh	r2, [r3, #0]
 801983e:	187b      	adds	r3, r7, r1
 8019840:	881a      	ldrh	r2, [r3, #0]
 8019842:	2380      	movs	r3, #128	@ 0x80
 8019844:	01db      	lsls	r3, r3, #7
 8019846:	4013      	ands	r3, r2
 8019848:	d016      	beq.n	8019878 <USB_DeactivateEndpoint+0x168>
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	781b      	ldrb	r3, [r3, #0]
 8019850:	009b      	lsls	r3, r3, #2
 8019852:	18d3      	adds	r3, r2, r3
 8019854:	881b      	ldrh	r3, [r3, #0]
 8019856:	b29a      	uxth	r2, r3
 8019858:	201e      	movs	r0, #30
 801985a:	183b      	adds	r3, r7, r0
 801985c:	4986      	ldr	r1, [pc, #536]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 801985e:	400a      	ands	r2, r1
 8019860:	801a      	strh	r2, [r3, #0]
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	18d3      	adds	r3, r2, r3
 801986c:	183a      	adds	r2, r7, r0
 801986e:	8812      	ldrh	r2, [r2, #0]
 8019870:	4985      	ldr	r1, [pc, #532]	@ (8019a88 <USB_DeactivateEndpoint+0x378>)
 8019872:	430a      	orrs	r2, r1
 8019874:	b292      	uxth	r2, r2
 8019876:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019878:	687a      	ldr	r2, [r7, #4]
 801987a:	683b      	ldr	r3, [r7, #0]
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	009b      	lsls	r3, r3, #2
 8019880:	18d2      	adds	r2, r2, r3
 8019882:	211c      	movs	r1, #28
 8019884:	187b      	adds	r3, r7, r1
 8019886:	8812      	ldrh	r2, [r2, #0]
 8019888:	801a      	strh	r2, [r3, #0]
 801988a:	187b      	adds	r3, r7, r1
 801988c:	881b      	ldrh	r3, [r3, #0]
 801988e:	2240      	movs	r2, #64	@ 0x40
 8019890:	4013      	ands	r3, r2
 8019892:	d016      	beq.n	80198c2 <USB_DeactivateEndpoint+0x1b2>
 8019894:	687a      	ldr	r2, [r7, #4]
 8019896:	683b      	ldr	r3, [r7, #0]
 8019898:	781b      	ldrb	r3, [r3, #0]
 801989a:	009b      	lsls	r3, r3, #2
 801989c:	18d3      	adds	r3, r2, r3
 801989e:	881b      	ldrh	r3, [r3, #0]
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	201a      	movs	r0, #26
 80198a4:	183b      	adds	r3, r7, r0
 80198a6:	4974      	ldr	r1, [pc, #464]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 80198a8:	400a      	ands	r2, r1
 80198aa:	801a      	strh	r2, [r3, #0]
 80198ac:	687a      	ldr	r2, [r7, #4]
 80198ae:	683b      	ldr	r3, [r7, #0]
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	009b      	lsls	r3, r3, #2
 80198b4:	18d3      	adds	r3, r2, r3
 80198b6:	183a      	adds	r2, r7, r0
 80198b8:	8812      	ldrh	r2, [r2, #0]
 80198ba:	4970      	ldr	r1, [pc, #448]	@ (8019a7c <USB_DeactivateEndpoint+0x36c>)
 80198bc:	430a      	orrs	r2, r1
 80198be:	b292      	uxth	r2, r2
 80198c0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80198c2:	687a      	ldr	r2, [r7, #4]
 80198c4:	683b      	ldr	r3, [r7, #0]
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	009b      	lsls	r3, r3, #2
 80198ca:	18d3      	adds	r3, r2, r3
 80198cc:	881b      	ldrh	r3, [r3, #0]
 80198ce:	b29a      	uxth	r2, r3
 80198d0:	2018      	movs	r0, #24
 80198d2:	183b      	adds	r3, r7, r0
 80198d4:	4968      	ldr	r1, [pc, #416]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 80198d6:	400a      	ands	r2, r1
 80198d8:	801a      	strh	r2, [r3, #0]
 80198da:	687a      	ldr	r2, [r7, #4]
 80198dc:	683b      	ldr	r3, [r7, #0]
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	009b      	lsls	r3, r3, #2
 80198e2:	18d3      	adds	r3, r2, r3
 80198e4:	183a      	adds	r2, r7, r0
 80198e6:	8812      	ldrh	r2, [r2, #0]
 80198e8:	4964      	ldr	r1, [pc, #400]	@ (8019a7c <USB_DeactivateEndpoint+0x36c>)
 80198ea:	430a      	orrs	r2, r1
 80198ec:	b292      	uxth	r2, r2
 80198ee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80198f0:	687a      	ldr	r2, [r7, #4]
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	009b      	lsls	r3, r3, #2
 80198f8:	18d3      	adds	r3, r2, r3
 80198fa:	881b      	ldrh	r3, [r3, #0]
 80198fc:	b29a      	uxth	r2, r3
 80198fe:	2016      	movs	r0, #22
 8019900:	183b      	adds	r3, r7, r0
 8019902:	4962      	ldr	r1, [pc, #392]	@ (8019a8c <USB_DeactivateEndpoint+0x37c>)
 8019904:	400a      	ands	r2, r1
 8019906:	801a      	strh	r2, [r3, #0]
 8019908:	687a      	ldr	r2, [r7, #4]
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	009b      	lsls	r3, r3, #2
 8019910:	18d3      	adds	r3, r2, r3
 8019912:	183a      	adds	r2, r7, r0
 8019914:	8812      	ldrh	r2, [r2, #0]
 8019916:	495b      	ldr	r1, [pc, #364]	@ (8019a84 <USB_DeactivateEndpoint+0x374>)
 8019918:	430a      	orrs	r2, r1
 801991a:	b292      	uxth	r2, r2
 801991c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801991e:	687a      	ldr	r2, [r7, #4]
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	781b      	ldrb	r3, [r3, #0]
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	18d3      	adds	r3, r2, r3
 8019928:	881b      	ldrh	r3, [r3, #0]
 801992a:	b29a      	uxth	r2, r3
 801992c:	2014      	movs	r0, #20
 801992e:	183b      	adds	r3, r7, r0
 8019930:	4953      	ldr	r1, [pc, #332]	@ (8019a80 <USB_DeactivateEndpoint+0x370>)
 8019932:	400a      	ands	r2, r1
 8019934:	801a      	strh	r2, [r3, #0]
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	781b      	ldrb	r3, [r3, #0]
 801993c:	009b      	lsls	r3, r3, #2
 801993e:	18d3      	adds	r3, r2, r3
 8019940:	183a      	adds	r2, r7, r0
 8019942:	8812      	ldrh	r2, [r2, #0]
 8019944:	494f      	ldr	r1, [pc, #316]	@ (8019a84 <USB_DeactivateEndpoint+0x374>)
 8019946:	430a      	orrs	r2, r1
 8019948:	b292      	uxth	r2, r2
 801994a:	801a      	strh	r2, [r3, #0]
 801994c:	e08f      	b.n	8019a6e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801994e:	687a      	ldr	r2, [r7, #4]
 8019950:	683b      	ldr	r3, [r7, #0]
 8019952:	781b      	ldrb	r3, [r3, #0]
 8019954:	009b      	lsls	r3, r3, #2
 8019956:	18d2      	adds	r2, r2, r3
 8019958:	212e      	movs	r1, #46	@ 0x2e
 801995a:	187b      	adds	r3, r7, r1
 801995c:	8812      	ldrh	r2, [r2, #0]
 801995e:	801a      	strh	r2, [r3, #0]
 8019960:	187b      	adds	r3, r7, r1
 8019962:	881a      	ldrh	r2, [r3, #0]
 8019964:	2380      	movs	r3, #128	@ 0x80
 8019966:	01db      	lsls	r3, r3, #7
 8019968:	4013      	ands	r3, r2
 801996a:	d016      	beq.n	801999a <USB_DeactivateEndpoint+0x28a>
 801996c:	687a      	ldr	r2, [r7, #4]
 801996e:	683b      	ldr	r3, [r7, #0]
 8019970:	781b      	ldrb	r3, [r3, #0]
 8019972:	009b      	lsls	r3, r3, #2
 8019974:	18d3      	adds	r3, r2, r3
 8019976:	881b      	ldrh	r3, [r3, #0]
 8019978:	b29a      	uxth	r2, r3
 801997a:	202c      	movs	r0, #44	@ 0x2c
 801997c:	183b      	adds	r3, r7, r0
 801997e:	493e      	ldr	r1, [pc, #248]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 8019980:	400a      	ands	r2, r1
 8019982:	801a      	strh	r2, [r3, #0]
 8019984:	687a      	ldr	r2, [r7, #4]
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	781b      	ldrb	r3, [r3, #0]
 801998a:	009b      	lsls	r3, r3, #2
 801998c:	18d3      	adds	r3, r2, r3
 801998e:	183a      	adds	r2, r7, r0
 8019990:	8812      	ldrh	r2, [r2, #0]
 8019992:	493d      	ldr	r1, [pc, #244]	@ (8019a88 <USB_DeactivateEndpoint+0x378>)
 8019994:	430a      	orrs	r2, r1
 8019996:	b292      	uxth	r2, r2
 8019998:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801999a:	687a      	ldr	r2, [r7, #4]
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	781b      	ldrb	r3, [r3, #0]
 80199a0:	009b      	lsls	r3, r3, #2
 80199a2:	18d2      	adds	r2, r2, r3
 80199a4:	212a      	movs	r1, #42	@ 0x2a
 80199a6:	187b      	adds	r3, r7, r1
 80199a8:	8812      	ldrh	r2, [r2, #0]
 80199aa:	801a      	strh	r2, [r3, #0]
 80199ac:	187b      	adds	r3, r7, r1
 80199ae:	881b      	ldrh	r3, [r3, #0]
 80199b0:	2240      	movs	r2, #64	@ 0x40
 80199b2:	4013      	ands	r3, r2
 80199b4:	d016      	beq.n	80199e4 <USB_DeactivateEndpoint+0x2d4>
 80199b6:	687a      	ldr	r2, [r7, #4]
 80199b8:	683b      	ldr	r3, [r7, #0]
 80199ba:	781b      	ldrb	r3, [r3, #0]
 80199bc:	009b      	lsls	r3, r3, #2
 80199be:	18d3      	adds	r3, r2, r3
 80199c0:	881b      	ldrh	r3, [r3, #0]
 80199c2:	b29a      	uxth	r2, r3
 80199c4:	2028      	movs	r0, #40	@ 0x28
 80199c6:	183b      	adds	r3, r7, r0
 80199c8:	492b      	ldr	r1, [pc, #172]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 80199ca:	400a      	ands	r2, r1
 80199cc:	801a      	strh	r2, [r3, #0]
 80199ce:	687a      	ldr	r2, [r7, #4]
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	781b      	ldrb	r3, [r3, #0]
 80199d4:	009b      	lsls	r3, r3, #2
 80199d6:	18d3      	adds	r3, r2, r3
 80199d8:	183a      	adds	r2, r7, r0
 80199da:	8812      	ldrh	r2, [r2, #0]
 80199dc:	4927      	ldr	r1, [pc, #156]	@ (8019a7c <USB_DeactivateEndpoint+0x36c>)
 80199de:	430a      	orrs	r2, r1
 80199e0:	b292      	uxth	r2, r2
 80199e2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80199e4:	687a      	ldr	r2, [r7, #4]
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	781b      	ldrb	r3, [r3, #0]
 80199ea:	009b      	lsls	r3, r3, #2
 80199ec:	18d3      	adds	r3, r2, r3
 80199ee:	881b      	ldrh	r3, [r3, #0]
 80199f0:	b29a      	uxth	r2, r3
 80199f2:	2026      	movs	r0, #38	@ 0x26
 80199f4:	183b      	adds	r3, r7, r0
 80199f6:	4920      	ldr	r1, [pc, #128]	@ (8019a78 <USB_DeactivateEndpoint+0x368>)
 80199f8:	400a      	ands	r2, r1
 80199fa:	801a      	strh	r2, [r3, #0]
 80199fc:	687a      	ldr	r2, [r7, #4]
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	781b      	ldrb	r3, [r3, #0]
 8019a02:	009b      	lsls	r3, r3, #2
 8019a04:	18d3      	adds	r3, r2, r3
 8019a06:	183a      	adds	r2, r7, r0
 8019a08:	8812      	ldrh	r2, [r2, #0]
 8019a0a:	491f      	ldr	r1, [pc, #124]	@ (8019a88 <USB_DeactivateEndpoint+0x378>)
 8019a0c:	430a      	orrs	r2, r1
 8019a0e:	b292      	uxth	r2, r2
 8019a10:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019a12:	687a      	ldr	r2, [r7, #4]
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	781b      	ldrb	r3, [r3, #0]
 8019a18:	009b      	lsls	r3, r3, #2
 8019a1a:	18d3      	adds	r3, r2, r3
 8019a1c:	881b      	ldrh	r3, [r3, #0]
 8019a1e:	b29a      	uxth	r2, r3
 8019a20:	2024      	movs	r0, #36	@ 0x24
 8019a22:	183b      	adds	r3, r7, r0
 8019a24:	4916      	ldr	r1, [pc, #88]	@ (8019a80 <USB_DeactivateEndpoint+0x370>)
 8019a26:	400a      	ands	r2, r1
 8019a28:	801a      	strh	r2, [r3, #0]
 8019a2a:	687a      	ldr	r2, [r7, #4]
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	009b      	lsls	r3, r3, #2
 8019a32:	18d3      	adds	r3, r2, r3
 8019a34:	183a      	adds	r2, r7, r0
 8019a36:	8812      	ldrh	r2, [r2, #0]
 8019a38:	4912      	ldr	r1, [pc, #72]	@ (8019a84 <USB_DeactivateEndpoint+0x374>)
 8019a3a:	430a      	orrs	r2, r1
 8019a3c:	b292      	uxth	r2, r2
 8019a3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019a40:	687a      	ldr	r2, [r7, #4]
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	781b      	ldrb	r3, [r3, #0]
 8019a46:	009b      	lsls	r3, r3, #2
 8019a48:	18d3      	adds	r3, r2, r3
 8019a4a:	881b      	ldrh	r3, [r3, #0]
 8019a4c:	b29a      	uxth	r2, r3
 8019a4e:	2022      	movs	r0, #34	@ 0x22
 8019a50:	183b      	adds	r3, r7, r0
 8019a52:	490e      	ldr	r1, [pc, #56]	@ (8019a8c <USB_DeactivateEndpoint+0x37c>)
 8019a54:	400a      	ands	r2, r1
 8019a56:	801a      	strh	r2, [r3, #0]
 8019a58:	687a      	ldr	r2, [r7, #4]
 8019a5a:	683b      	ldr	r3, [r7, #0]
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	18d3      	adds	r3, r2, r3
 8019a62:	183a      	adds	r2, r7, r0
 8019a64:	8812      	ldrh	r2, [r2, #0]
 8019a66:	4907      	ldr	r1, [pc, #28]	@ (8019a84 <USB_DeactivateEndpoint+0x374>)
 8019a68:	430a      	orrs	r2, r1
 8019a6a:	b292      	uxth	r2, r2
 8019a6c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019a6e:	2300      	movs	r3, #0
}
 8019a70:	0018      	movs	r0, r3
 8019a72:	46bd      	mov	sp, r7
 8019a74:	b00c      	add	sp, #48	@ 0x30
 8019a76:	bd80      	pop	{r7, pc}
 8019a78:	ffff8f8f 	.word	0xffff8f8f
 8019a7c:	ffff80c0 	.word	0xffff80c0
 8019a80:	ffff8fbf 	.word	0xffff8fbf
 8019a84:	ffff8080 	.word	0xffff8080
 8019a88:	ffffc080 	.word	0xffffc080
 8019a8c:	ffffbf8f 	.word	0xffffbf8f

08019a90 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019a90:	b590      	push	{r4, r7, lr}
 8019a92:	b0c3      	sub	sp, #268	@ 0x10c
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
 8019a98:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	785b      	ldrb	r3, [r3, #1]
 8019a9e:	2b01      	cmp	r3, #1
 8019aa0:	d001      	beq.n	8019aa6 <USB_EPStartXfer+0x16>
 8019aa2:	f000 fd2d 	bl	801a500 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	699a      	ldr	r2, [r3, #24]
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	691b      	ldr	r3, [r3, #16]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d905      	bls.n	8019abe <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019ab2:	683b      	ldr	r3, [r7, #0]
 8019ab4:	691b      	ldr	r3, [r3, #16]
 8019ab6:	1d7a      	adds	r2, r7, #5
 8019ab8:	32ff      	adds	r2, #255	@ 0xff
 8019aba:	6013      	str	r3, [r2, #0]
 8019abc:	e004      	b.n	8019ac8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	699b      	ldr	r3, [r3, #24]
 8019ac2:	1d7a      	adds	r2, r7, #5
 8019ac4:	32ff      	adds	r2, #255	@ 0xff
 8019ac6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	7b1b      	ldrb	r3, [r3, #12]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d125      	bne.n	8019b1c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019ad0:	683b      	ldr	r3, [r7, #0]
 8019ad2:	6959      	ldr	r1, [r3, #20]
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	88da      	ldrh	r2, [r3, #6]
 8019ad8:	1d7b      	adds	r3, r7, #5
 8019ada:	33ff      	adds	r3, #255	@ 0xff
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	b29b      	uxth	r3, r3
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f001 fa47 	bl	801af74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	613b      	str	r3, [r7, #16]
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	2250      	movs	r2, #80	@ 0x50
 8019aee:	5a9b      	ldrh	r3, [r3, r2]
 8019af0:	b29b      	uxth	r3, r3
 8019af2:	001a      	movs	r2, r3
 8019af4:	693b      	ldr	r3, [r7, #16]
 8019af6:	189b      	adds	r3, r3, r2
 8019af8:	613b      	str	r3, [r7, #16]
 8019afa:	683b      	ldr	r3, [r7, #0]
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	00da      	lsls	r2, r3, #3
 8019b00:	693b      	ldr	r3, [r7, #16]
 8019b02:	18d3      	adds	r3, r2, r3
 8019b04:	4ad7      	ldr	r2, [pc, #860]	@ (8019e64 <USB_EPStartXfer+0x3d4>)
 8019b06:	4694      	mov	ip, r2
 8019b08:	4463      	add	r3, ip
 8019b0a:	60fb      	str	r3, [r7, #12]
 8019b0c:	1d7b      	adds	r3, r7, #5
 8019b0e:	33ff      	adds	r3, #255	@ 0xff
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	b29a      	uxth	r2, r3
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	801a      	strh	r2, [r3, #0]
 8019b18:	f000 fccd 	bl	801a4b6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	78db      	ldrb	r3, [r3, #3]
 8019b20:	2b02      	cmp	r3, #2
 8019b22:	d000      	beq.n	8019b26 <USB_EPStartXfer+0x96>
 8019b24:	e362      	b.n	801a1ec <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	6a1a      	ldr	r2, [r3, #32]
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	691b      	ldr	r3, [r3, #16]
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d800      	bhi.n	8019b34 <USB_EPStartXfer+0xa4>
 8019b32:	e309      	b.n	801a148 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019b34:	687a      	ldr	r2, [r7, #4]
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	781b      	ldrb	r3, [r3, #0]
 8019b3a:	009b      	lsls	r3, r3, #2
 8019b3c:	18d3      	adds	r3, r2, r3
 8019b3e:	881b      	ldrh	r3, [r3, #0]
 8019b40:	b29a      	uxth	r2, r3
 8019b42:	2056      	movs	r0, #86	@ 0x56
 8019b44:	183b      	adds	r3, r7, r0
 8019b46:	49c8      	ldr	r1, [pc, #800]	@ (8019e68 <USB_EPStartXfer+0x3d8>)
 8019b48:	400a      	ands	r2, r1
 8019b4a:	801a      	strh	r2, [r3, #0]
 8019b4c:	687a      	ldr	r2, [r7, #4]
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	781b      	ldrb	r3, [r3, #0]
 8019b52:	009b      	lsls	r3, r3, #2
 8019b54:	18d3      	adds	r3, r2, r3
 8019b56:	183a      	adds	r2, r7, r0
 8019b58:	8812      	ldrh	r2, [r2, #0]
 8019b5a:	49c4      	ldr	r1, [pc, #784]	@ (8019e6c <USB_EPStartXfer+0x3dc>)
 8019b5c:	430a      	orrs	r2, r1
 8019b5e:	b292      	uxth	r2, r2
 8019b60:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019b62:	683b      	ldr	r3, [r7, #0]
 8019b64:	6a1a      	ldr	r2, [r3, #32]
 8019b66:	1d7b      	adds	r3, r7, #5
 8019b68:	33ff      	adds	r3, #255	@ 0xff
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	1ad2      	subs	r2, r2, r3
 8019b6e:	683b      	ldr	r3, [r7, #0]
 8019b70:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019b72:	687a      	ldr	r2, [r7, #4]
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	009b      	lsls	r3, r3, #2
 8019b7a:	18d3      	adds	r3, r2, r3
 8019b7c:	881b      	ldrh	r3, [r3, #0]
 8019b7e:	b29b      	uxth	r3, r3
 8019b80:	001a      	movs	r2, r3
 8019b82:	2340      	movs	r3, #64	@ 0x40
 8019b84:	4013      	ands	r3, r2
 8019b86:	d100      	bne.n	8019b8a <USB_EPStartXfer+0xfa>
 8019b88:	e176      	b.n	8019e78 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	785b      	ldrb	r3, [r3, #1]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d000      	beq.n	8019b98 <USB_EPStartXfer+0x108>
 8019b96:	e074      	b.n	8019c82 <USB_EPStartXfer+0x1f2>
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2250      	movs	r2, #80	@ 0x50
 8019ba0:	5a9b      	ldrh	r3, [r3, r2]
 8019ba2:	b29b      	uxth	r3, r3
 8019ba4:	001a      	movs	r2, r3
 8019ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ba8:	189b      	adds	r3, r3, r2
 8019baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	781b      	ldrb	r3, [r3, #0]
 8019bb0:	00da      	lsls	r2, r3, #3
 8019bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bb4:	18d3      	adds	r3, r2, r3
 8019bb6:	4aae      	ldr	r2, [pc, #696]	@ (8019e70 <USB_EPStartXfer+0x3e0>)
 8019bb8:	4694      	mov	ip, r2
 8019bba:	4463      	add	r3, ip
 8019bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8019bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bc0:	881b      	ldrh	r3, [r3, #0]
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	059b      	lsls	r3, r3, #22
 8019bc6:	0d9b      	lsrs	r3, r3, #22
 8019bc8:	b29a      	uxth	r2, r3
 8019bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bcc:	801a      	strh	r2, [r3, #0]
 8019bce:	1d7b      	adds	r3, r7, #5
 8019bd0:	33ff      	adds	r3, #255	@ 0xff
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8019bd6:	d924      	bls.n	8019c22 <USB_EPStartXfer+0x192>
 8019bd8:	1d7b      	adds	r3, r7, #5
 8019bda:	33ff      	adds	r3, #255	@ 0xff
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	095b      	lsrs	r3, r3, #5
 8019be0:	1c7a      	adds	r2, r7, #1
 8019be2:	32ff      	adds	r2, #255	@ 0xff
 8019be4:	6013      	str	r3, [r2, #0]
 8019be6:	1d7b      	adds	r3, r7, #5
 8019be8:	33ff      	adds	r3, #255	@ 0xff
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	221f      	movs	r2, #31
 8019bee:	4013      	ands	r3, r2
 8019bf0:	d106      	bne.n	8019c00 <USB_EPStartXfer+0x170>
 8019bf2:	1c7b      	adds	r3, r7, #1
 8019bf4:	33ff      	adds	r3, #255	@ 0xff
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	3b01      	subs	r3, #1
 8019bfa:	1c7a      	adds	r2, r7, #1
 8019bfc:	32ff      	adds	r2, #255	@ 0xff
 8019bfe:	6013      	str	r3, [r2, #0]
 8019c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c02:	881b      	ldrh	r3, [r3, #0]
 8019c04:	b29a      	uxth	r2, r3
 8019c06:	1c7b      	adds	r3, r7, #1
 8019c08:	33ff      	adds	r3, #255	@ 0xff
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	b29b      	uxth	r3, r3
 8019c0e:	029b      	lsls	r3, r3, #10
 8019c10:	b29b      	uxth	r3, r3
 8019c12:	4313      	orrs	r3, r2
 8019c14:	b29b      	uxth	r3, r3
 8019c16:	4a97      	ldr	r2, [pc, #604]	@ (8019e74 <USB_EPStartXfer+0x3e4>)
 8019c18:	4313      	orrs	r3, r2
 8019c1a:	b29a      	uxth	r2, r3
 8019c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c1e:	801a      	strh	r2, [r3, #0]
 8019c20:	e04a      	b.n	8019cb8 <USB_EPStartXfer+0x228>
 8019c22:	1d7b      	adds	r3, r7, #5
 8019c24:	33ff      	adds	r3, #255	@ 0xff
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d108      	bne.n	8019c3e <USB_EPStartXfer+0x1ae>
 8019c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c2e:	881b      	ldrh	r3, [r3, #0]
 8019c30:	b29b      	uxth	r3, r3
 8019c32:	4a90      	ldr	r2, [pc, #576]	@ (8019e74 <USB_EPStartXfer+0x3e4>)
 8019c34:	4313      	orrs	r3, r2
 8019c36:	b29a      	uxth	r2, r3
 8019c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3a:	801a      	strh	r2, [r3, #0]
 8019c3c:	e03c      	b.n	8019cb8 <USB_EPStartXfer+0x228>
 8019c3e:	1d7b      	adds	r3, r7, #5
 8019c40:	33ff      	adds	r3, #255	@ 0xff
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	085b      	lsrs	r3, r3, #1
 8019c46:	1c7a      	adds	r2, r7, #1
 8019c48:	32ff      	adds	r2, #255	@ 0xff
 8019c4a:	6013      	str	r3, [r2, #0]
 8019c4c:	1d7b      	adds	r3, r7, #5
 8019c4e:	33ff      	adds	r3, #255	@ 0xff
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	2201      	movs	r2, #1
 8019c54:	4013      	ands	r3, r2
 8019c56:	d006      	beq.n	8019c66 <USB_EPStartXfer+0x1d6>
 8019c58:	1c7b      	adds	r3, r7, #1
 8019c5a:	33ff      	adds	r3, #255	@ 0xff
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	3301      	adds	r3, #1
 8019c60:	1c7a      	adds	r2, r7, #1
 8019c62:	32ff      	adds	r2, #255	@ 0xff
 8019c64:	6013      	str	r3, [r2, #0]
 8019c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c68:	881b      	ldrh	r3, [r3, #0]
 8019c6a:	b29a      	uxth	r2, r3
 8019c6c:	1c7b      	adds	r3, r7, #1
 8019c6e:	33ff      	adds	r3, #255	@ 0xff
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	b29b      	uxth	r3, r3
 8019c74:	029b      	lsls	r3, r3, #10
 8019c76:	b29b      	uxth	r3, r3
 8019c78:	4313      	orrs	r3, r2
 8019c7a:	b29a      	uxth	r2, r3
 8019c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c7e:	801a      	strh	r2, [r3, #0]
 8019c80:	e01a      	b.n	8019cb8 <USB_EPStartXfer+0x228>
 8019c82:	683b      	ldr	r3, [r7, #0]
 8019c84:	785b      	ldrb	r3, [r3, #1]
 8019c86:	2b01      	cmp	r3, #1
 8019c88:	d116      	bne.n	8019cb8 <USB_EPStartXfer+0x228>
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2250      	movs	r2, #80	@ 0x50
 8019c8e:	5a9b      	ldrh	r3, [r3, r2]
 8019c90:	b29b      	uxth	r3, r3
 8019c92:	001a      	movs	r2, r3
 8019c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c96:	189b      	adds	r3, r3, r2
 8019c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	781b      	ldrb	r3, [r3, #0]
 8019c9e:	00da      	lsls	r2, r3, #3
 8019ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ca2:	18d3      	adds	r3, r2, r3
 8019ca4:	4a72      	ldr	r2, [pc, #456]	@ (8019e70 <USB_EPStartXfer+0x3e0>)
 8019ca6:	4694      	mov	ip, r2
 8019ca8:	4463      	add	r3, ip
 8019caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019cac:	1d7b      	adds	r3, r7, #5
 8019cae:	33ff      	adds	r3, #255	@ 0xff
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	b29a      	uxth	r2, r3
 8019cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019cb8:	2076      	movs	r0, #118	@ 0x76
 8019cba:	183b      	adds	r3, r7, r0
 8019cbc:	683a      	ldr	r2, [r7, #0]
 8019cbe:	8952      	ldrh	r2, [r2, #10]
 8019cc0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019cc2:	683b      	ldr	r3, [r7, #0]
 8019cc4:	6959      	ldr	r1, [r3, #20]
 8019cc6:	1d7b      	adds	r3, r7, #5
 8019cc8:	33ff      	adds	r3, #255	@ 0xff
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	b29c      	uxth	r4, r3
 8019cce:	183b      	adds	r3, r7, r0
 8019cd0:	881a      	ldrh	r2, [r3, #0]
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	0023      	movs	r3, r4
 8019cd6:	f001 f94d 	bl	801af74 <USB_WritePMA>
            ep->xfer_buff += len;
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	695a      	ldr	r2, [r3, #20]
 8019cde:	1d7b      	adds	r3, r7, #5
 8019ce0:	33ff      	adds	r3, #255	@ 0xff
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	18d2      	adds	r2, r2, r3
 8019ce6:	683b      	ldr	r3, [r7, #0]
 8019ce8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	6a1a      	ldr	r2, [r3, #32]
 8019cee:	683b      	ldr	r3, [r7, #0]
 8019cf0:	691b      	ldr	r3, [r3, #16]
 8019cf2:	429a      	cmp	r2, r3
 8019cf4:	d908      	bls.n	8019d08 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	6a1a      	ldr	r2, [r3, #32]
 8019cfa:	1d7b      	adds	r3, r7, #5
 8019cfc:	33ff      	adds	r3, #255	@ 0xff
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	1ad2      	subs	r2, r2, r3
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	621a      	str	r2, [r3, #32]
 8019d06:	e007      	b.n	8019d18 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	6a1b      	ldr	r3, [r3, #32]
 8019d0c:	1d7a      	adds	r2, r7, #5
 8019d0e:	32ff      	adds	r2, #255	@ 0xff
 8019d10:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	2200      	movs	r2, #0
 8019d16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	785b      	ldrb	r3, [r3, #1]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d000      	beq.n	8019d22 <USB_EPStartXfer+0x292>
 8019d20:	e070      	b.n	8019e04 <USB_EPStartXfer+0x374>
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	61bb      	str	r3, [r7, #24]
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	2250      	movs	r2, #80	@ 0x50
 8019d2a:	5a9b      	ldrh	r3, [r3, r2]
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	001a      	movs	r2, r3
 8019d30:	69bb      	ldr	r3, [r7, #24]
 8019d32:	189b      	adds	r3, r3, r2
 8019d34:	61bb      	str	r3, [r7, #24]
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	781b      	ldrb	r3, [r3, #0]
 8019d3a:	00da      	lsls	r2, r3, #3
 8019d3c:	69bb      	ldr	r3, [r7, #24]
 8019d3e:	18d3      	adds	r3, r2, r3
 8019d40:	4a48      	ldr	r2, [pc, #288]	@ (8019e64 <USB_EPStartXfer+0x3d4>)
 8019d42:	4694      	mov	ip, r2
 8019d44:	4463      	add	r3, ip
 8019d46:	617b      	str	r3, [r7, #20]
 8019d48:	697b      	ldr	r3, [r7, #20]
 8019d4a:	881b      	ldrh	r3, [r3, #0]
 8019d4c:	b29b      	uxth	r3, r3
 8019d4e:	059b      	lsls	r3, r3, #22
 8019d50:	0d9b      	lsrs	r3, r3, #22
 8019d52:	b29a      	uxth	r2, r3
 8019d54:	697b      	ldr	r3, [r7, #20]
 8019d56:	801a      	strh	r2, [r3, #0]
 8019d58:	1d7b      	adds	r3, r7, #5
 8019d5a:	33ff      	adds	r3, #255	@ 0xff
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d60:	d922      	bls.n	8019da8 <USB_EPStartXfer+0x318>
 8019d62:	1d7b      	adds	r3, r7, #5
 8019d64:	33ff      	adds	r3, #255	@ 0xff
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	095b      	lsrs	r3, r3, #5
 8019d6a:	21fc      	movs	r1, #252	@ 0xfc
 8019d6c:	187a      	adds	r2, r7, r1
 8019d6e:	6013      	str	r3, [r2, #0]
 8019d70:	1d7b      	adds	r3, r7, #5
 8019d72:	33ff      	adds	r3, #255	@ 0xff
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	221f      	movs	r2, #31
 8019d78:	4013      	ands	r3, r2
 8019d7a:	d104      	bne.n	8019d86 <USB_EPStartXfer+0x2f6>
 8019d7c:	187b      	adds	r3, r7, r1
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	3b01      	subs	r3, #1
 8019d82:	187a      	adds	r2, r7, r1
 8019d84:	6013      	str	r3, [r2, #0]
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	881b      	ldrh	r3, [r3, #0]
 8019d8a:	b29a      	uxth	r2, r3
 8019d8c:	23fc      	movs	r3, #252	@ 0xfc
 8019d8e:	18fb      	adds	r3, r7, r3
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	029b      	lsls	r3, r3, #10
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	4313      	orrs	r3, r2
 8019d9a:	b29b      	uxth	r3, r3
 8019d9c:	4a35      	ldr	r2, [pc, #212]	@ (8019e74 <USB_EPStartXfer+0x3e4>)
 8019d9e:	4313      	orrs	r3, r2
 8019da0:	b29a      	uxth	r2, r3
 8019da2:	697b      	ldr	r3, [r7, #20]
 8019da4:	801a      	strh	r2, [r3, #0]
 8019da6:	e04a      	b.n	8019e3e <USB_EPStartXfer+0x3ae>
 8019da8:	1d7b      	adds	r3, r7, #5
 8019daa:	33ff      	adds	r3, #255	@ 0xff
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d108      	bne.n	8019dc4 <USB_EPStartXfer+0x334>
 8019db2:	697b      	ldr	r3, [r7, #20]
 8019db4:	881b      	ldrh	r3, [r3, #0]
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	4a2e      	ldr	r2, [pc, #184]	@ (8019e74 <USB_EPStartXfer+0x3e4>)
 8019dba:	4313      	orrs	r3, r2
 8019dbc:	b29a      	uxth	r2, r3
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	801a      	strh	r2, [r3, #0]
 8019dc2:	e03c      	b.n	8019e3e <USB_EPStartXfer+0x3ae>
 8019dc4:	1d7b      	adds	r3, r7, #5
 8019dc6:	33ff      	adds	r3, #255	@ 0xff
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	085b      	lsrs	r3, r3, #1
 8019dcc:	21fc      	movs	r1, #252	@ 0xfc
 8019dce:	187a      	adds	r2, r7, r1
 8019dd0:	6013      	str	r3, [r2, #0]
 8019dd2:	1d7b      	adds	r3, r7, #5
 8019dd4:	33ff      	adds	r3, #255	@ 0xff
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	2201      	movs	r2, #1
 8019dda:	4013      	ands	r3, r2
 8019ddc:	d004      	beq.n	8019de8 <USB_EPStartXfer+0x358>
 8019dde:	187b      	adds	r3, r7, r1
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	3301      	adds	r3, #1
 8019de4:	187a      	adds	r2, r7, r1
 8019de6:	6013      	str	r3, [r2, #0]
 8019de8:	697b      	ldr	r3, [r7, #20]
 8019dea:	881b      	ldrh	r3, [r3, #0]
 8019dec:	b29a      	uxth	r2, r3
 8019dee:	23fc      	movs	r3, #252	@ 0xfc
 8019df0:	18fb      	adds	r3, r7, r3
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	b29b      	uxth	r3, r3
 8019df6:	029b      	lsls	r3, r3, #10
 8019df8:	b29b      	uxth	r3, r3
 8019dfa:	4313      	orrs	r3, r2
 8019dfc:	b29a      	uxth	r2, r3
 8019dfe:	697b      	ldr	r3, [r7, #20]
 8019e00:	801a      	strh	r2, [r3, #0]
 8019e02:	e01c      	b.n	8019e3e <USB_EPStartXfer+0x3ae>
 8019e04:	683b      	ldr	r3, [r7, #0]
 8019e06:	785b      	ldrb	r3, [r3, #1]
 8019e08:	2b01      	cmp	r3, #1
 8019e0a:	d118      	bne.n	8019e3e <USB_EPStartXfer+0x3ae>
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	623b      	str	r3, [r7, #32]
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2250      	movs	r2, #80	@ 0x50
 8019e14:	5a9b      	ldrh	r3, [r3, r2]
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	001a      	movs	r2, r3
 8019e1a:	6a3b      	ldr	r3, [r7, #32]
 8019e1c:	189b      	adds	r3, r3, r2
 8019e1e:	623b      	str	r3, [r7, #32]
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	00da      	lsls	r2, r3, #3
 8019e26:	6a3b      	ldr	r3, [r7, #32]
 8019e28:	18d3      	adds	r3, r2, r3
 8019e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8019e64 <USB_EPStartXfer+0x3d4>)
 8019e2c:	4694      	mov	ip, r2
 8019e2e:	4463      	add	r3, ip
 8019e30:	61fb      	str	r3, [r7, #28]
 8019e32:	1d7b      	adds	r3, r7, #5
 8019e34:	33ff      	adds	r3, #255	@ 0xff
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	b29a      	uxth	r2, r3
 8019e3a:	69fb      	ldr	r3, [r7, #28]
 8019e3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019e3e:	2076      	movs	r0, #118	@ 0x76
 8019e40:	183b      	adds	r3, r7, r0
 8019e42:	683a      	ldr	r2, [r7, #0]
 8019e44:	8912      	ldrh	r2, [r2, #8]
 8019e46:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019e48:	683b      	ldr	r3, [r7, #0]
 8019e4a:	6959      	ldr	r1, [r3, #20]
 8019e4c:	1d7b      	adds	r3, r7, #5
 8019e4e:	33ff      	adds	r3, #255	@ 0xff
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	b29c      	uxth	r4, r3
 8019e54:	183b      	adds	r3, r7, r0
 8019e56:	881a      	ldrh	r2, [r3, #0]
 8019e58:	6878      	ldr	r0, [r7, #4]
 8019e5a:	0023      	movs	r3, r4
 8019e5c:	f001 f88a 	bl	801af74 <USB_WritePMA>
 8019e60:	e329      	b.n	801a4b6 <USB_EPStartXfer+0xa26>
 8019e62:	46c0      	nop			@ (mov r8, r8)
 8019e64:	00000402 	.word	0x00000402
 8019e68:	ffff8f8f 	.word	0xffff8f8f
 8019e6c:	ffff8180 	.word	0xffff8180
 8019e70:	00000406 	.word	0x00000406
 8019e74:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	785b      	ldrb	r3, [r3, #1]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d000      	beq.n	8019e82 <USB_EPStartXfer+0x3f2>
 8019e80:	e070      	b.n	8019f64 <USB_EPStartXfer+0x4d4>
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2250      	movs	r2, #80	@ 0x50
 8019e8a:	5a9b      	ldrh	r3, [r3, r2]
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	001a      	movs	r2, r3
 8019e90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e92:	189b      	adds	r3, r3, r2
 8019e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	781b      	ldrb	r3, [r3, #0]
 8019e9a:	00da      	lsls	r2, r3, #3
 8019e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e9e:	18d3      	adds	r3, r2, r3
 8019ea0:	4acd      	ldr	r2, [pc, #820]	@ (801a1d8 <USB_EPStartXfer+0x748>)
 8019ea2:	4694      	mov	ip, r2
 8019ea4:	4463      	add	r3, ip
 8019ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8019ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019eaa:	881b      	ldrh	r3, [r3, #0]
 8019eac:	b29b      	uxth	r3, r3
 8019eae:	059b      	lsls	r3, r3, #22
 8019eb0:	0d9b      	lsrs	r3, r3, #22
 8019eb2:	b29a      	uxth	r2, r3
 8019eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019eb6:	801a      	strh	r2, [r3, #0]
 8019eb8:	1d7b      	adds	r3, r7, #5
 8019eba:	33ff      	adds	r3, #255	@ 0xff
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	2b3e      	cmp	r3, #62	@ 0x3e
 8019ec0:	d922      	bls.n	8019f08 <USB_EPStartXfer+0x478>
 8019ec2:	1d7b      	adds	r3, r7, #5
 8019ec4:	33ff      	adds	r3, #255	@ 0xff
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	095b      	lsrs	r3, r3, #5
 8019eca:	21f8      	movs	r1, #248	@ 0xf8
 8019ecc:	187a      	adds	r2, r7, r1
 8019ece:	6013      	str	r3, [r2, #0]
 8019ed0:	1d7b      	adds	r3, r7, #5
 8019ed2:	33ff      	adds	r3, #255	@ 0xff
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	221f      	movs	r2, #31
 8019ed8:	4013      	ands	r3, r2
 8019eda:	d104      	bne.n	8019ee6 <USB_EPStartXfer+0x456>
 8019edc:	187b      	adds	r3, r7, r1
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	3b01      	subs	r3, #1
 8019ee2:	187a      	adds	r2, r7, r1
 8019ee4:	6013      	str	r3, [r2, #0]
 8019ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ee8:	881b      	ldrh	r3, [r3, #0]
 8019eea:	b29a      	uxth	r2, r3
 8019eec:	23f8      	movs	r3, #248	@ 0xf8
 8019eee:	18fb      	adds	r3, r7, r3
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	b29b      	uxth	r3, r3
 8019ef4:	029b      	lsls	r3, r3, #10
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	4313      	orrs	r3, r2
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	4ab7      	ldr	r2, [pc, #732]	@ (801a1dc <USB_EPStartXfer+0x74c>)
 8019efe:	4313      	orrs	r3, r2
 8019f00:	b29a      	uxth	r2, r3
 8019f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f04:	801a      	strh	r2, [r3, #0]
 8019f06:	e04a      	b.n	8019f9e <USB_EPStartXfer+0x50e>
 8019f08:	1d7b      	adds	r3, r7, #5
 8019f0a:	33ff      	adds	r3, #255	@ 0xff
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d108      	bne.n	8019f24 <USB_EPStartXfer+0x494>
 8019f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f14:	881b      	ldrh	r3, [r3, #0]
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	4ab0      	ldr	r2, [pc, #704]	@ (801a1dc <USB_EPStartXfer+0x74c>)
 8019f1a:	4313      	orrs	r3, r2
 8019f1c:	b29a      	uxth	r2, r3
 8019f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f20:	801a      	strh	r2, [r3, #0]
 8019f22:	e03c      	b.n	8019f9e <USB_EPStartXfer+0x50e>
 8019f24:	1d7b      	adds	r3, r7, #5
 8019f26:	33ff      	adds	r3, #255	@ 0xff
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	085b      	lsrs	r3, r3, #1
 8019f2c:	21f8      	movs	r1, #248	@ 0xf8
 8019f2e:	187a      	adds	r2, r7, r1
 8019f30:	6013      	str	r3, [r2, #0]
 8019f32:	1d7b      	adds	r3, r7, #5
 8019f34:	33ff      	adds	r3, #255	@ 0xff
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	2201      	movs	r2, #1
 8019f3a:	4013      	ands	r3, r2
 8019f3c:	d004      	beq.n	8019f48 <USB_EPStartXfer+0x4b8>
 8019f3e:	187b      	adds	r3, r7, r1
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	3301      	adds	r3, #1
 8019f44:	187a      	adds	r2, r7, r1
 8019f46:	6013      	str	r3, [r2, #0]
 8019f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f4a:	881b      	ldrh	r3, [r3, #0]
 8019f4c:	b29a      	uxth	r2, r3
 8019f4e:	23f8      	movs	r3, #248	@ 0xf8
 8019f50:	18fb      	adds	r3, r7, r3
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	b29b      	uxth	r3, r3
 8019f56:	029b      	lsls	r3, r3, #10
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	4313      	orrs	r3, r2
 8019f5c:	b29a      	uxth	r2, r3
 8019f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f60:	801a      	strh	r2, [r3, #0]
 8019f62:	e01c      	b.n	8019f9e <USB_EPStartXfer+0x50e>
 8019f64:	683b      	ldr	r3, [r7, #0]
 8019f66:	785b      	ldrb	r3, [r3, #1]
 8019f68:	2b01      	cmp	r3, #1
 8019f6a:	d118      	bne.n	8019f9e <USB_EPStartXfer+0x50e>
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	2250      	movs	r2, #80	@ 0x50
 8019f74:	5a9b      	ldrh	r3, [r3, r2]
 8019f76:	b29b      	uxth	r3, r3
 8019f78:	001a      	movs	r2, r3
 8019f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f7c:	189b      	adds	r3, r3, r2
 8019f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019f80:	683b      	ldr	r3, [r7, #0]
 8019f82:	781b      	ldrb	r3, [r3, #0]
 8019f84:	00da      	lsls	r2, r3, #3
 8019f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f88:	18d3      	adds	r3, r2, r3
 8019f8a:	4a93      	ldr	r2, [pc, #588]	@ (801a1d8 <USB_EPStartXfer+0x748>)
 8019f8c:	4694      	mov	ip, r2
 8019f8e:	4463      	add	r3, ip
 8019f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019f92:	1d7b      	adds	r3, r7, #5
 8019f94:	33ff      	adds	r3, #255	@ 0xff
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	b29a      	uxth	r2, r3
 8019f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019f9e:	2076      	movs	r0, #118	@ 0x76
 8019fa0:	183b      	adds	r3, r7, r0
 8019fa2:	683a      	ldr	r2, [r7, #0]
 8019fa4:	8912      	ldrh	r2, [r2, #8]
 8019fa6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019fa8:	683b      	ldr	r3, [r7, #0]
 8019faa:	6959      	ldr	r1, [r3, #20]
 8019fac:	1d7b      	adds	r3, r7, #5
 8019fae:	33ff      	adds	r3, #255	@ 0xff
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	b29c      	uxth	r4, r3
 8019fb4:	183b      	adds	r3, r7, r0
 8019fb6:	881a      	ldrh	r2, [r3, #0]
 8019fb8:	6878      	ldr	r0, [r7, #4]
 8019fba:	0023      	movs	r3, r4
 8019fbc:	f000 ffda 	bl	801af74 <USB_WritePMA>
            ep->xfer_buff += len;
 8019fc0:	683b      	ldr	r3, [r7, #0]
 8019fc2:	695a      	ldr	r2, [r3, #20]
 8019fc4:	1d7b      	adds	r3, r7, #5
 8019fc6:	33ff      	adds	r3, #255	@ 0xff
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	18d2      	adds	r2, r2, r3
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019fd0:	683b      	ldr	r3, [r7, #0]
 8019fd2:	6a1a      	ldr	r2, [r3, #32]
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	691b      	ldr	r3, [r3, #16]
 8019fd8:	429a      	cmp	r2, r3
 8019fda:	d908      	bls.n	8019fee <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	6a1a      	ldr	r2, [r3, #32]
 8019fe0:	1d7b      	adds	r3, r7, #5
 8019fe2:	33ff      	adds	r3, #255	@ 0xff
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	1ad2      	subs	r2, r2, r3
 8019fe8:	683b      	ldr	r3, [r7, #0]
 8019fea:	621a      	str	r2, [r3, #32]
 8019fec:	e007      	b.n	8019ffe <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	6a1b      	ldr	r3, [r3, #32]
 8019ff2:	1d7a      	adds	r2, r7, #5
 8019ff4:	32ff      	adds	r2, #255	@ 0xff
 8019ff6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019ff8:	683b      	ldr	r3, [r7, #0]
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	643b      	str	r3, [r7, #64]	@ 0x40
 801a002:	683b      	ldr	r3, [r7, #0]
 801a004:	785b      	ldrb	r3, [r3, #1]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d000      	beq.n	801a00c <USB_EPStartXfer+0x57c>
 801a00a:	e070      	b.n	801a0ee <USB_EPStartXfer+0x65e>
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2250      	movs	r2, #80	@ 0x50
 801a014:	5a9b      	ldrh	r3, [r3, r2]
 801a016:	b29b      	uxth	r3, r3
 801a018:	001a      	movs	r2, r3
 801a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a01c:	189b      	adds	r3, r3, r2
 801a01e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	781b      	ldrb	r3, [r3, #0]
 801a024:	00da      	lsls	r2, r3, #3
 801a026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a028:	18d3      	adds	r3, r2, r3
 801a02a:	4a6d      	ldr	r2, [pc, #436]	@ (801a1e0 <USB_EPStartXfer+0x750>)
 801a02c:	4694      	mov	ip, r2
 801a02e:	4463      	add	r3, ip
 801a030:	637b      	str	r3, [r7, #52]	@ 0x34
 801a032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a034:	881b      	ldrh	r3, [r3, #0]
 801a036:	b29b      	uxth	r3, r3
 801a038:	059b      	lsls	r3, r3, #22
 801a03a:	0d9b      	lsrs	r3, r3, #22
 801a03c:	b29a      	uxth	r2, r3
 801a03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a040:	801a      	strh	r2, [r3, #0]
 801a042:	1d7b      	adds	r3, r7, #5
 801a044:	33ff      	adds	r3, #255	@ 0xff
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	2b3e      	cmp	r3, #62	@ 0x3e
 801a04a:	d922      	bls.n	801a092 <USB_EPStartXfer+0x602>
 801a04c:	1d7b      	adds	r3, r7, #5
 801a04e:	33ff      	adds	r3, #255	@ 0xff
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	095b      	lsrs	r3, r3, #5
 801a054:	21f4      	movs	r1, #244	@ 0xf4
 801a056:	187a      	adds	r2, r7, r1
 801a058:	6013      	str	r3, [r2, #0]
 801a05a:	1d7b      	adds	r3, r7, #5
 801a05c:	33ff      	adds	r3, #255	@ 0xff
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	221f      	movs	r2, #31
 801a062:	4013      	ands	r3, r2
 801a064:	d104      	bne.n	801a070 <USB_EPStartXfer+0x5e0>
 801a066:	187b      	adds	r3, r7, r1
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	3b01      	subs	r3, #1
 801a06c:	187a      	adds	r2, r7, r1
 801a06e:	6013      	str	r3, [r2, #0]
 801a070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a072:	881b      	ldrh	r3, [r3, #0]
 801a074:	b29a      	uxth	r2, r3
 801a076:	23f4      	movs	r3, #244	@ 0xf4
 801a078:	18fb      	adds	r3, r7, r3
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	029b      	lsls	r3, r3, #10
 801a080:	b29b      	uxth	r3, r3
 801a082:	4313      	orrs	r3, r2
 801a084:	b29b      	uxth	r3, r3
 801a086:	4a55      	ldr	r2, [pc, #340]	@ (801a1dc <USB_EPStartXfer+0x74c>)
 801a088:	4313      	orrs	r3, r2
 801a08a:	b29a      	uxth	r2, r3
 801a08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a08e:	801a      	strh	r2, [r3, #0]
 801a090:	e048      	b.n	801a124 <USB_EPStartXfer+0x694>
 801a092:	1d7b      	adds	r3, r7, #5
 801a094:	33ff      	adds	r3, #255	@ 0xff
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d108      	bne.n	801a0ae <USB_EPStartXfer+0x61e>
 801a09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a09e:	881b      	ldrh	r3, [r3, #0]
 801a0a0:	b29b      	uxth	r3, r3
 801a0a2:	4a4e      	ldr	r2, [pc, #312]	@ (801a1dc <USB_EPStartXfer+0x74c>)
 801a0a4:	4313      	orrs	r3, r2
 801a0a6:	b29a      	uxth	r2, r3
 801a0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0aa:	801a      	strh	r2, [r3, #0]
 801a0ac:	e03a      	b.n	801a124 <USB_EPStartXfer+0x694>
 801a0ae:	1d7b      	adds	r3, r7, #5
 801a0b0:	33ff      	adds	r3, #255	@ 0xff
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	085b      	lsrs	r3, r3, #1
 801a0b6:	21f4      	movs	r1, #244	@ 0xf4
 801a0b8:	187a      	adds	r2, r7, r1
 801a0ba:	6013      	str	r3, [r2, #0]
 801a0bc:	1d7b      	adds	r3, r7, #5
 801a0be:	33ff      	adds	r3, #255	@ 0xff
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	2201      	movs	r2, #1
 801a0c4:	4013      	ands	r3, r2
 801a0c6:	d004      	beq.n	801a0d2 <USB_EPStartXfer+0x642>
 801a0c8:	187b      	adds	r3, r7, r1
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	3301      	adds	r3, #1
 801a0ce:	187a      	adds	r2, r7, r1
 801a0d0:	6013      	str	r3, [r2, #0]
 801a0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0d4:	881b      	ldrh	r3, [r3, #0]
 801a0d6:	b29a      	uxth	r2, r3
 801a0d8:	23f4      	movs	r3, #244	@ 0xf4
 801a0da:	18fb      	adds	r3, r7, r3
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	029b      	lsls	r3, r3, #10
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	4313      	orrs	r3, r2
 801a0e6:	b29a      	uxth	r2, r3
 801a0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0ea:	801a      	strh	r2, [r3, #0]
 801a0ec:	e01a      	b.n	801a124 <USB_EPStartXfer+0x694>
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	785b      	ldrb	r3, [r3, #1]
 801a0f2:	2b01      	cmp	r3, #1
 801a0f4:	d116      	bne.n	801a124 <USB_EPStartXfer+0x694>
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	2250      	movs	r2, #80	@ 0x50
 801a0fa:	5a9b      	ldrh	r3, [r3, r2]
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	001a      	movs	r2, r3
 801a100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a102:	189b      	adds	r3, r3, r2
 801a104:	643b      	str	r3, [r7, #64]	@ 0x40
 801a106:	683b      	ldr	r3, [r7, #0]
 801a108:	781b      	ldrb	r3, [r3, #0]
 801a10a:	00da      	lsls	r2, r3, #3
 801a10c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a10e:	18d3      	adds	r3, r2, r3
 801a110:	4a33      	ldr	r2, [pc, #204]	@ (801a1e0 <USB_EPStartXfer+0x750>)
 801a112:	4694      	mov	ip, r2
 801a114:	4463      	add	r3, ip
 801a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a118:	1d7b      	adds	r3, r7, #5
 801a11a:	33ff      	adds	r3, #255	@ 0xff
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	b29a      	uxth	r2, r3
 801a120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a122:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a124:	2076      	movs	r0, #118	@ 0x76
 801a126:	183b      	adds	r3, r7, r0
 801a128:	683a      	ldr	r2, [r7, #0]
 801a12a:	8952      	ldrh	r2, [r2, #10]
 801a12c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a12e:	683b      	ldr	r3, [r7, #0]
 801a130:	6959      	ldr	r1, [r3, #20]
 801a132:	1d7b      	adds	r3, r7, #5
 801a134:	33ff      	adds	r3, #255	@ 0xff
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	b29c      	uxth	r4, r3
 801a13a:	183b      	adds	r3, r7, r0
 801a13c:	881a      	ldrh	r2, [r3, #0]
 801a13e:	6878      	ldr	r0, [r7, #4]
 801a140:	0023      	movs	r3, r4
 801a142:	f000 ff17 	bl	801af74 <USB_WritePMA>
 801a146:	e1b6      	b.n	801a4b6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a148:	683b      	ldr	r3, [r7, #0]
 801a14a:	6a1b      	ldr	r3, [r3, #32]
 801a14c:	1d7a      	adds	r2, r7, #5
 801a14e:	32ff      	adds	r2, #255	@ 0xff
 801a150:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a152:	687a      	ldr	r2, [r7, #4]
 801a154:	683b      	ldr	r3, [r7, #0]
 801a156:	781b      	ldrb	r3, [r3, #0]
 801a158:	009b      	lsls	r3, r3, #2
 801a15a:	18d3      	adds	r3, r2, r3
 801a15c:	881b      	ldrh	r3, [r3, #0]
 801a15e:	b29a      	uxth	r2, r3
 801a160:	2062      	movs	r0, #98	@ 0x62
 801a162:	183b      	adds	r3, r7, r0
 801a164:	491f      	ldr	r1, [pc, #124]	@ (801a1e4 <USB_EPStartXfer+0x754>)
 801a166:	400a      	ands	r2, r1
 801a168:	801a      	strh	r2, [r3, #0]
 801a16a:	687a      	ldr	r2, [r7, #4]
 801a16c:	683b      	ldr	r3, [r7, #0]
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	009b      	lsls	r3, r3, #2
 801a172:	18d3      	adds	r3, r2, r3
 801a174:	183a      	adds	r2, r7, r0
 801a176:	8812      	ldrh	r2, [r2, #0]
 801a178:	491b      	ldr	r1, [pc, #108]	@ (801a1e8 <USB_EPStartXfer+0x758>)
 801a17a:	430a      	orrs	r2, r1
 801a17c:	b292      	uxth	r2, r2
 801a17e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2250      	movs	r2, #80	@ 0x50
 801a188:	5a9b      	ldrh	r3, [r3, r2]
 801a18a:	b29b      	uxth	r3, r3
 801a18c:	001a      	movs	r2, r3
 801a18e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a190:	189b      	adds	r3, r3, r2
 801a192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a194:	683b      	ldr	r3, [r7, #0]
 801a196:	781b      	ldrb	r3, [r3, #0]
 801a198:	00da      	lsls	r2, r3, #3
 801a19a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a19c:	18d3      	adds	r3, r2, r3
 801a19e:	4a0e      	ldr	r2, [pc, #56]	@ (801a1d8 <USB_EPStartXfer+0x748>)
 801a1a0:	4694      	mov	ip, r2
 801a1a2:	4463      	add	r3, ip
 801a1a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1a6:	1d7b      	adds	r3, r7, #5
 801a1a8:	33ff      	adds	r3, #255	@ 0xff
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	b29a      	uxth	r2, r3
 801a1ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a1b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a1b2:	2076      	movs	r0, #118	@ 0x76
 801a1b4:	183b      	adds	r3, r7, r0
 801a1b6:	683a      	ldr	r2, [r7, #0]
 801a1b8:	8912      	ldrh	r2, [r2, #8]
 801a1ba:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a1bc:	683b      	ldr	r3, [r7, #0]
 801a1be:	6959      	ldr	r1, [r3, #20]
 801a1c0:	1d7b      	adds	r3, r7, #5
 801a1c2:	33ff      	adds	r3, #255	@ 0xff
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	b29c      	uxth	r4, r3
 801a1c8:	183b      	adds	r3, r7, r0
 801a1ca:	881a      	ldrh	r2, [r3, #0]
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	0023      	movs	r3, r4
 801a1d0:	f000 fed0 	bl	801af74 <USB_WritePMA>
 801a1d4:	e16f      	b.n	801a4b6 <USB_EPStartXfer+0xa26>
 801a1d6:	46c0      	nop			@ (mov r8, r8)
 801a1d8:	00000402 	.word	0x00000402
 801a1dc:	ffff8000 	.word	0xffff8000
 801a1e0:	00000406 	.word	0x00000406
 801a1e4:	ffff8e8f 	.word	0xffff8e8f
 801a1e8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	6a1a      	ldr	r2, [r3, #32]
 801a1f0:	1d7b      	adds	r3, r7, #5
 801a1f2:	33ff      	adds	r3, #255	@ 0xff
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	1ad2      	subs	r2, r2, r3
 801a1f8:	683b      	ldr	r3, [r7, #0]
 801a1fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a1fc:	687a      	ldr	r2, [r7, #4]
 801a1fe:	683b      	ldr	r3, [r7, #0]
 801a200:	781b      	ldrb	r3, [r3, #0]
 801a202:	009b      	lsls	r3, r3, #2
 801a204:	18d3      	adds	r3, r2, r3
 801a206:	881b      	ldrh	r3, [r3, #0]
 801a208:	b29b      	uxth	r3, r3
 801a20a:	001a      	movs	r2, r3
 801a20c:	2340      	movs	r3, #64	@ 0x40
 801a20e:	4013      	ands	r3, r2
 801a210:	d100      	bne.n	801a214 <USB_EPStartXfer+0x784>
 801a212:	e0a4      	b.n	801a35e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	673b      	str	r3, [r7, #112]	@ 0x70
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	785b      	ldrb	r3, [r3, #1]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d000      	beq.n	801a222 <USB_EPStartXfer+0x792>
 801a220:	e070      	b.n	801a304 <USB_EPStartXfer+0x874>
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2250      	movs	r2, #80	@ 0x50
 801a22a:	5a9b      	ldrh	r3, [r3, r2]
 801a22c:	b29b      	uxth	r3, r3
 801a22e:	001a      	movs	r2, r3
 801a230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a232:	189b      	adds	r3, r3, r2
 801a234:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	781b      	ldrb	r3, [r3, #0]
 801a23a:	00da      	lsls	r2, r3, #3
 801a23c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a23e:	18d3      	adds	r3, r2, r3
 801a240:	4abc      	ldr	r2, [pc, #752]	@ (801a534 <USB_EPStartXfer+0xaa4>)
 801a242:	4694      	mov	ip, r2
 801a244:	4463      	add	r3, ip
 801a246:	667b      	str	r3, [r7, #100]	@ 0x64
 801a248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a24a:	881b      	ldrh	r3, [r3, #0]
 801a24c:	b29b      	uxth	r3, r3
 801a24e:	059b      	lsls	r3, r3, #22
 801a250:	0d9b      	lsrs	r3, r3, #22
 801a252:	b29a      	uxth	r2, r3
 801a254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a256:	801a      	strh	r2, [r3, #0]
 801a258:	1d7b      	adds	r3, r7, #5
 801a25a:	33ff      	adds	r3, #255	@ 0xff
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	2b3e      	cmp	r3, #62	@ 0x3e
 801a260:	d922      	bls.n	801a2a8 <USB_EPStartXfer+0x818>
 801a262:	1d7b      	adds	r3, r7, #5
 801a264:	33ff      	adds	r3, #255	@ 0xff
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	095b      	lsrs	r3, r3, #5
 801a26a:	21f0      	movs	r1, #240	@ 0xf0
 801a26c:	187a      	adds	r2, r7, r1
 801a26e:	6013      	str	r3, [r2, #0]
 801a270:	1d7b      	adds	r3, r7, #5
 801a272:	33ff      	adds	r3, #255	@ 0xff
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	221f      	movs	r2, #31
 801a278:	4013      	ands	r3, r2
 801a27a:	d104      	bne.n	801a286 <USB_EPStartXfer+0x7f6>
 801a27c:	187b      	adds	r3, r7, r1
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	3b01      	subs	r3, #1
 801a282:	187a      	adds	r2, r7, r1
 801a284:	6013      	str	r3, [r2, #0]
 801a286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a288:	881b      	ldrh	r3, [r3, #0]
 801a28a:	b29a      	uxth	r2, r3
 801a28c:	23f0      	movs	r3, #240	@ 0xf0
 801a28e:	18fb      	adds	r3, r7, r3
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	b29b      	uxth	r3, r3
 801a294:	029b      	lsls	r3, r3, #10
 801a296:	b29b      	uxth	r3, r3
 801a298:	4313      	orrs	r3, r2
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	4aa6      	ldr	r2, [pc, #664]	@ (801a538 <USB_EPStartXfer+0xaa8>)
 801a29e:	4313      	orrs	r3, r2
 801a2a0:	b29a      	uxth	r2, r3
 801a2a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2a4:	801a      	strh	r2, [r3, #0]
 801a2a6:	e048      	b.n	801a33a <USB_EPStartXfer+0x8aa>
 801a2a8:	1d7b      	adds	r3, r7, #5
 801a2aa:	33ff      	adds	r3, #255	@ 0xff
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d108      	bne.n	801a2c4 <USB_EPStartXfer+0x834>
 801a2b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2b4:	881b      	ldrh	r3, [r3, #0]
 801a2b6:	b29b      	uxth	r3, r3
 801a2b8:	4a9f      	ldr	r2, [pc, #636]	@ (801a538 <USB_EPStartXfer+0xaa8>)
 801a2ba:	4313      	orrs	r3, r2
 801a2bc:	b29a      	uxth	r2, r3
 801a2be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2c0:	801a      	strh	r2, [r3, #0]
 801a2c2:	e03a      	b.n	801a33a <USB_EPStartXfer+0x8aa>
 801a2c4:	1d7b      	adds	r3, r7, #5
 801a2c6:	33ff      	adds	r3, #255	@ 0xff
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	085b      	lsrs	r3, r3, #1
 801a2cc:	21f0      	movs	r1, #240	@ 0xf0
 801a2ce:	187a      	adds	r2, r7, r1
 801a2d0:	6013      	str	r3, [r2, #0]
 801a2d2:	1d7b      	adds	r3, r7, #5
 801a2d4:	33ff      	adds	r3, #255	@ 0xff
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	2201      	movs	r2, #1
 801a2da:	4013      	ands	r3, r2
 801a2dc:	d004      	beq.n	801a2e8 <USB_EPStartXfer+0x858>
 801a2de:	187b      	adds	r3, r7, r1
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	3301      	adds	r3, #1
 801a2e4:	187a      	adds	r2, r7, r1
 801a2e6:	6013      	str	r3, [r2, #0]
 801a2e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2ea:	881b      	ldrh	r3, [r3, #0]
 801a2ec:	b29a      	uxth	r2, r3
 801a2ee:	23f0      	movs	r3, #240	@ 0xf0
 801a2f0:	18fb      	adds	r3, r7, r3
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	029b      	lsls	r3, r3, #10
 801a2f8:	b29b      	uxth	r3, r3
 801a2fa:	4313      	orrs	r3, r2
 801a2fc:	b29a      	uxth	r2, r3
 801a2fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a300:	801a      	strh	r2, [r3, #0]
 801a302:	e01a      	b.n	801a33a <USB_EPStartXfer+0x8aa>
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	785b      	ldrb	r3, [r3, #1]
 801a308:	2b01      	cmp	r3, #1
 801a30a:	d116      	bne.n	801a33a <USB_EPStartXfer+0x8aa>
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	2250      	movs	r2, #80	@ 0x50
 801a310:	5a9b      	ldrh	r3, [r3, r2]
 801a312:	b29b      	uxth	r3, r3
 801a314:	001a      	movs	r2, r3
 801a316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a318:	189b      	adds	r3, r3, r2
 801a31a:	673b      	str	r3, [r7, #112]	@ 0x70
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	781b      	ldrb	r3, [r3, #0]
 801a320:	00da      	lsls	r2, r3, #3
 801a322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a324:	18d3      	adds	r3, r2, r3
 801a326:	4a83      	ldr	r2, [pc, #524]	@ (801a534 <USB_EPStartXfer+0xaa4>)
 801a328:	4694      	mov	ip, r2
 801a32a:	4463      	add	r3, ip
 801a32c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a32e:	1d7b      	adds	r3, r7, #5
 801a330:	33ff      	adds	r3, #255	@ 0xff
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	b29a      	uxth	r2, r3
 801a336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a338:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a33a:	2076      	movs	r0, #118	@ 0x76
 801a33c:	183b      	adds	r3, r7, r0
 801a33e:	683a      	ldr	r2, [r7, #0]
 801a340:	8952      	ldrh	r2, [r2, #10]
 801a342:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a344:	683b      	ldr	r3, [r7, #0]
 801a346:	6959      	ldr	r1, [r3, #20]
 801a348:	1d7b      	adds	r3, r7, #5
 801a34a:	33ff      	adds	r3, #255	@ 0xff
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	b29c      	uxth	r4, r3
 801a350:	183b      	adds	r3, r7, r0
 801a352:	881a      	ldrh	r2, [r3, #0]
 801a354:	6878      	ldr	r0, [r7, #4]
 801a356:	0023      	movs	r3, r4
 801a358:	f000 fe0c 	bl	801af74 <USB_WritePMA>
 801a35c:	e0ab      	b.n	801a4b6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	785b      	ldrb	r3, [r3, #1]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d000      	beq.n	801a368 <USB_EPStartXfer+0x8d8>
 801a366:	e070      	b.n	801a44a <USB_EPStartXfer+0x9ba>
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	2250      	movs	r2, #80	@ 0x50
 801a370:	5a9b      	ldrh	r3, [r3, r2]
 801a372:	b29b      	uxth	r3, r3
 801a374:	001a      	movs	r2, r3
 801a376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a378:	189b      	adds	r3, r3, r2
 801a37a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a37c:	683b      	ldr	r3, [r7, #0]
 801a37e:	781b      	ldrb	r3, [r3, #0]
 801a380:	00da      	lsls	r2, r3, #3
 801a382:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a384:	18d3      	adds	r3, r2, r3
 801a386:	4a6d      	ldr	r2, [pc, #436]	@ (801a53c <USB_EPStartXfer+0xaac>)
 801a388:	4694      	mov	ip, r2
 801a38a:	4463      	add	r3, ip
 801a38c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a38e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a390:	881b      	ldrh	r3, [r3, #0]
 801a392:	b29b      	uxth	r3, r3
 801a394:	059b      	lsls	r3, r3, #22
 801a396:	0d9b      	lsrs	r3, r3, #22
 801a398:	b29a      	uxth	r2, r3
 801a39a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a39c:	801a      	strh	r2, [r3, #0]
 801a39e:	1d7b      	adds	r3, r7, #5
 801a3a0:	33ff      	adds	r3, #255	@ 0xff
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2b3e      	cmp	r3, #62	@ 0x3e
 801a3a6:	d922      	bls.n	801a3ee <USB_EPStartXfer+0x95e>
 801a3a8:	1d7b      	adds	r3, r7, #5
 801a3aa:	33ff      	adds	r3, #255	@ 0xff
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	095b      	lsrs	r3, r3, #5
 801a3b0:	21ec      	movs	r1, #236	@ 0xec
 801a3b2:	187a      	adds	r2, r7, r1
 801a3b4:	6013      	str	r3, [r2, #0]
 801a3b6:	1d7b      	adds	r3, r7, #5
 801a3b8:	33ff      	adds	r3, #255	@ 0xff
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	221f      	movs	r2, #31
 801a3be:	4013      	ands	r3, r2
 801a3c0:	d104      	bne.n	801a3cc <USB_EPStartXfer+0x93c>
 801a3c2:	187b      	adds	r3, r7, r1
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	3b01      	subs	r3, #1
 801a3c8:	187a      	adds	r2, r7, r1
 801a3ca:	6013      	str	r3, [r2, #0]
 801a3cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a3ce:	881b      	ldrh	r3, [r3, #0]
 801a3d0:	b29a      	uxth	r2, r3
 801a3d2:	23ec      	movs	r3, #236	@ 0xec
 801a3d4:	18fb      	adds	r3, r7, r3
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	029b      	lsls	r3, r3, #10
 801a3dc:	b29b      	uxth	r3, r3
 801a3de:	4313      	orrs	r3, r2
 801a3e0:	b29b      	uxth	r3, r3
 801a3e2:	4a55      	ldr	r2, [pc, #340]	@ (801a538 <USB_EPStartXfer+0xaa8>)
 801a3e4:	4313      	orrs	r3, r2
 801a3e6:	b29a      	uxth	r2, r3
 801a3e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a3ea:	801a      	strh	r2, [r3, #0]
 801a3ec:	e052      	b.n	801a494 <USB_EPStartXfer+0xa04>
 801a3ee:	1d7b      	adds	r3, r7, #5
 801a3f0:	33ff      	adds	r3, #255	@ 0xff
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d108      	bne.n	801a40a <USB_EPStartXfer+0x97a>
 801a3f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a3fa:	881b      	ldrh	r3, [r3, #0]
 801a3fc:	b29b      	uxth	r3, r3
 801a3fe:	4a4e      	ldr	r2, [pc, #312]	@ (801a538 <USB_EPStartXfer+0xaa8>)
 801a400:	4313      	orrs	r3, r2
 801a402:	b29a      	uxth	r2, r3
 801a404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a406:	801a      	strh	r2, [r3, #0]
 801a408:	e044      	b.n	801a494 <USB_EPStartXfer+0xa04>
 801a40a:	1d7b      	adds	r3, r7, #5
 801a40c:	33ff      	adds	r3, #255	@ 0xff
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	085b      	lsrs	r3, r3, #1
 801a412:	21ec      	movs	r1, #236	@ 0xec
 801a414:	187a      	adds	r2, r7, r1
 801a416:	6013      	str	r3, [r2, #0]
 801a418:	1d7b      	adds	r3, r7, #5
 801a41a:	33ff      	adds	r3, #255	@ 0xff
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	2201      	movs	r2, #1
 801a420:	4013      	ands	r3, r2
 801a422:	d004      	beq.n	801a42e <USB_EPStartXfer+0x99e>
 801a424:	187b      	adds	r3, r7, r1
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	3301      	adds	r3, #1
 801a42a:	187a      	adds	r2, r7, r1
 801a42c:	6013      	str	r3, [r2, #0]
 801a42e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a430:	881b      	ldrh	r3, [r3, #0]
 801a432:	b29a      	uxth	r2, r3
 801a434:	23ec      	movs	r3, #236	@ 0xec
 801a436:	18fb      	adds	r3, r7, r3
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	b29b      	uxth	r3, r3
 801a43c:	029b      	lsls	r3, r3, #10
 801a43e:	b29b      	uxth	r3, r3
 801a440:	4313      	orrs	r3, r2
 801a442:	b29a      	uxth	r2, r3
 801a444:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a446:	801a      	strh	r2, [r3, #0]
 801a448:	e024      	b.n	801a494 <USB_EPStartXfer+0xa04>
 801a44a:	683b      	ldr	r3, [r7, #0]
 801a44c:	785b      	ldrb	r3, [r3, #1]
 801a44e:	2b01      	cmp	r3, #1
 801a450:	d120      	bne.n	801a494 <USB_EPStartXfer+0xa04>
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2184      	movs	r1, #132	@ 0x84
 801a456:	187a      	adds	r2, r7, r1
 801a458:	6013      	str	r3, [r2, #0]
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	2250      	movs	r2, #80	@ 0x50
 801a45e:	5a9b      	ldrh	r3, [r3, r2]
 801a460:	b29b      	uxth	r3, r3
 801a462:	001a      	movs	r2, r3
 801a464:	187b      	adds	r3, r7, r1
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	189b      	adds	r3, r3, r2
 801a46a:	187a      	adds	r2, r7, r1
 801a46c:	6013      	str	r3, [r2, #0]
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	781b      	ldrb	r3, [r3, #0]
 801a472:	00da      	lsls	r2, r3, #3
 801a474:	187b      	adds	r3, r7, r1
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	18d3      	adds	r3, r2, r3
 801a47a:	4a30      	ldr	r2, [pc, #192]	@ (801a53c <USB_EPStartXfer+0xaac>)
 801a47c:	4694      	mov	ip, r2
 801a47e:	4463      	add	r3, ip
 801a480:	2180      	movs	r1, #128	@ 0x80
 801a482:	187a      	adds	r2, r7, r1
 801a484:	6013      	str	r3, [r2, #0]
 801a486:	1d7b      	adds	r3, r7, #5
 801a488:	33ff      	adds	r3, #255	@ 0xff
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	b29a      	uxth	r2, r3
 801a48e:	187b      	adds	r3, r7, r1
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a494:	2076      	movs	r0, #118	@ 0x76
 801a496:	183b      	adds	r3, r7, r0
 801a498:	683a      	ldr	r2, [r7, #0]
 801a49a:	8912      	ldrh	r2, [r2, #8]
 801a49c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	6959      	ldr	r1, [r3, #20]
 801a4a2:	1d7b      	adds	r3, r7, #5
 801a4a4:	33ff      	adds	r3, #255	@ 0xff
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	b29c      	uxth	r4, r3
 801a4aa:	183b      	adds	r3, r7, r0
 801a4ac:	881a      	ldrh	r2, [r3, #0]
 801a4ae:	6878      	ldr	r0, [r7, #4]
 801a4b0:	0023      	movs	r3, r4
 801a4b2:	f000 fd5f 	bl	801af74 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a4b6:	687a      	ldr	r2, [r7, #4]
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	781b      	ldrb	r3, [r3, #0]
 801a4bc:	009b      	lsls	r3, r3, #2
 801a4be:	18d3      	adds	r3, r2, r3
 801a4c0:	881b      	ldrh	r3, [r3, #0]
 801a4c2:	b29a      	uxth	r2, r3
 801a4c4:	200a      	movs	r0, #10
 801a4c6:	183b      	adds	r3, r7, r0
 801a4c8:	491d      	ldr	r1, [pc, #116]	@ (801a540 <USB_EPStartXfer+0xab0>)
 801a4ca:	400a      	ands	r2, r1
 801a4cc:	801a      	strh	r2, [r3, #0]
 801a4ce:	183b      	adds	r3, r7, r0
 801a4d0:	183a      	adds	r2, r7, r0
 801a4d2:	8812      	ldrh	r2, [r2, #0]
 801a4d4:	2110      	movs	r1, #16
 801a4d6:	404a      	eors	r2, r1
 801a4d8:	801a      	strh	r2, [r3, #0]
 801a4da:	183b      	adds	r3, r7, r0
 801a4dc:	183a      	adds	r2, r7, r0
 801a4de:	8812      	ldrh	r2, [r2, #0]
 801a4e0:	2120      	movs	r1, #32
 801a4e2:	404a      	eors	r2, r1
 801a4e4:	801a      	strh	r2, [r3, #0]
 801a4e6:	687a      	ldr	r2, [r7, #4]
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	009b      	lsls	r3, r3, #2
 801a4ee:	18d3      	adds	r3, r2, r3
 801a4f0:	183a      	adds	r2, r7, r0
 801a4f2:	8812      	ldrh	r2, [r2, #0]
 801a4f4:	4913      	ldr	r1, [pc, #76]	@ (801a544 <USB_EPStartXfer+0xab4>)
 801a4f6:	430a      	orrs	r2, r1
 801a4f8:	b292      	uxth	r2, r2
 801a4fa:	801a      	strh	r2, [r3, #0]
 801a4fc:	f000 fbf4 	bl	801ace8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a500:	683b      	ldr	r3, [r7, #0]
 801a502:	7b1b      	ldrb	r3, [r3, #12]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d000      	beq.n	801a50a <USB_EPStartXfer+0xa7a>
 801a508:	e0a9      	b.n	801a65e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	699a      	ldr	r2, [r3, #24]
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	691b      	ldr	r3, [r3, #16]
 801a512:	429a      	cmp	r2, r3
 801a514:	d918      	bls.n	801a548 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a516:	683b      	ldr	r3, [r7, #0]
 801a518:	691b      	ldr	r3, [r3, #16]
 801a51a:	1d7a      	adds	r2, r7, #5
 801a51c:	32ff      	adds	r2, #255	@ 0xff
 801a51e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a520:	683b      	ldr	r3, [r7, #0]
 801a522:	699a      	ldr	r2, [r3, #24]
 801a524:	1d7b      	adds	r3, r7, #5
 801a526:	33ff      	adds	r3, #255	@ 0xff
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	1ad2      	subs	r2, r2, r3
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	619a      	str	r2, [r3, #24]
 801a530:	e012      	b.n	801a558 <USB_EPStartXfer+0xac8>
 801a532:	46c0      	nop			@ (mov r8, r8)
 801a534:	00000406 	.word	0x00000406
 801a538:	ffff8000 	.word	0xffff8000
 801a53c:	00000402 	.word	0x00000402
 801a540:	ffff8fbf 	.word	0xffff8fbf
 801a544:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	699b      	ldr	r3, [r3, #24]
 801a54c:	1d7a      	adds	r2, r7, #5
 801a54e:	32ff      	adds	r2, #255	@ 0xff
 801a550:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a552:	683b      	ldr	r3, [r7, #0]
 801a554:	2200      	movs	r2, #0
 801a556:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2190      	movs	r1, #144	@ 0x90
 801a55c:	187a      	adds	r2, r7, r1
 801a55e:	6013      	str	r3, [r2, #0]
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2250      	movs	r2, #80	@ 0x50
 801a564:	5a9b      	ldrh	r3, [r3, r2]
 801a566:	b29b      	uxth	r3, r3
 801a568:	001a      	movs	r2, r3
 801a56a:	187b      	adds	r3, r7, r1
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	189b      	adds	r3, r3, r2
 801a570:	187a      	adds	r2, r7, r1
 801a572:	6013      	str	r3, [r2, #0]
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	781b      	ldrb	r3, [r3, #0]
 801a578:	00da      	lsls	r2, r3, #3
 801a57a:	187b      	adds	r3, r7, r1
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	18d3      	adds	r3, r2, r3
 801a580:	4acf      	ldr	r2, [pc, #828]	@ (801a8c0 <USB_EPStartXfer+0xe30>)
 801a582:	4694      	mov	ip, r2
 801a584:	4463      	add	r3, ip
 801a586:	218c      	movs	r1, #140	@ 0x8c
 801a588:	187a      	adds	r2, r7, r1
 801a58a:	6013      	str	r3, [r2, #0]
 801a58c:	187b      	adds	r3, r7, r1
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	881b      	ldrh	r3, [r3, #0]
 801a592:	b29b      	uxth	r3, r3
 801a594:	059b      	lsls	r3, r3, #22
 801a596:	0d9b      	lsrs	r3, r3, #22
 801a598:	b29a      	uxth	r2, r3
 801a59a:	187b      	adds	r3, r7, r1
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	801a      	strh	r2, [r3, #0]
 801a5a0:	1d7b      	adds	r3, r7, #5
 801a5a2:	33ff      	adds	r3, #255	@ 0xff
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a5a8:	d925      	bls.n	801a5f6 <USB_EPStartXfer+0xb66>
 801a5aa:	1d7b      	adds	r3, r7, #5
 801a5ac:	33ff      	adds	r3, #255	@ 0xff
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	095b      	lsrs	r3, r3, #5
 801a5b2:	21e8      	movs	r1, #232	@ 0xe8
 801a5b4:	187a      	adds	r2, r7, r1
 801a5b6:	6013      	str	r3, [r2, #0]
 801a5b8:	1d7b      	adds	r3, r7, #5
 801a5ba:	33ff      	adds	r3, #255	@ 0xff
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	221f      	movs	r2, #31
 801a5c0:	4013      	ands	r3, r2
 801a5c2:	d104      	bne.n	801a5ce <USB_EPStartXfer+0xb3e>
 801a5c4:	187b      	adds	r3, r7, r1
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	3b01      	subs	r3, #1
 801a5ca:	187a      	adds	r2, r7, r1
 801a5cc:	6013      	str	r3, [r2, #0]
 801a5ce:	218c      	movs	r1, #140	@ 0x8c
 801a5d0:	187b      	adds	r3, r7, r1
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	881b      	ldrh	r3, [r3, #0]
 801a5d6:	b29a      	uxth	r2, r3
 801a5d8:	23e8      	movs	r3, #232	@ 0xe8
 801a5da:	18fb      	adds	r3, r7, r3
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	b29b      	uxth	r3, r3
 801a5e0:	029b      	lsls	r3, r3, #10
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	4313      	orrs	r3, r2
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	4ab6      	ldr	r2, [pc, #728]	@ (801a8c4 <USB_EPStartXfer+0xe34>)
 801a5ea:	4313      	orrs	r3, r2
 801a5ec:	b29a      	uxth	r2, r3
 801a5ee:	187b      	adds	r3, r7, r1
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	801a      	strh	r2, [r3, #0]
 801a5f4:	e353      	b.n	801ac9e <USB_EPStartXfer+0x120e>
 801a5f6:	1d7b      	adds	r3, r7, #5
 801a5f8:	33ff      	adds	r3, #255	@ 0xff
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d10b      	bne.n	801a618 <USB_EPStartXfer+0xb88>
 801a600:	218c      	movs	r1, #140	@ 0x8c
 801a602:	187b      	adds	r3, r7, r1
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	881b      	ldrh	r3, [r3, #0]
 801a608:	b29b      	uxth	r3, r3
 801a60a:	4aae      	ldr	r2, [pc, #696]	@ (801a8c4 <USB_EPStartXfer+0xe34>)
 801a60c:	4313      	orrs	r3, r2
 801a60e:	b29a      	uxth	r2, r3
 801a610:	187b      	adds	r3, r7, r1
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	801a      	strh	r2, [r3, #0]
 801a616:	e342      	b.n	801ac9e <USB_EPStartXfer+0x120e>
 801a618:	1d7b      	adds	r3, r7, #5
 801a61a:	33ff      	adds	r3, #255	@ 0xff
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	085b      	lsrs	r3, r3, #1
 801a620:	21e8      	movs	r1, #232	@ 0xe8
 801a622:	187a      	adds	r2, r7, r1
 801a624:	6013      	str	r3, [r2, #0]
 801a626:	1d7b      	adds	r3, r7, #5
 801a628:	33ff      	adds	r3, #255	@ 0xff
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	2201      	movs	r2, #1
 801a62e:	4013      	ands	r3, r2
 801a630:	d004      	beq.n	801a63c <USB_EPStartXfer+0xbac>
 801a632:	187b      	adds	r3, r7, r1
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	3301      	adds	r3, #1
 801a638:	187a      	adds	r2, r7, r1
 801a63a:	6013      	str	r3, [r2, #0]
 801a63c:	218c      	movs	r1, #140	@ 0x8c
 801a63e:	187b      	adds	r3, r7, r1
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	881b      	ldrh	r3, [r3, #0]
 801a644:	b29a      	uxth	r2, r3
 801a646:	23e8      	movs	r3, #232	@ 0xe8
 801a648:	18fb      	adds	r3, r7, r3
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	029b      	lsls	r3, r3, #10
 801a650:	b29b      	uxth	r3, r3
 801a652:	4313      	orrs	r3, r2
 801a654:	b29a      	uxth	r2, r3
 801a656:	187b      	adds	r3, r7, r1
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	801a      	strh	r2, [r3, #0]
 801a65c:	e31f      	b.n	801ac9e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a65e:	683b      	ldr	r3, [r7, #0]
 801a660:	78db      	ldrb	r3, [r3, #3]
 801a662:	2b02      	cmp	r3, #2
 801a664:	d000      	beq.n	801a668 <USB_EPStartXfer+0xbd8>
 801a666:	e191      	b.n	801a98c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	785b      	ldrb	r3, [r3, #1]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d000      	beq.n	801a672 <USB_EPStartXfer+0xbe2>
 801a670:	e07c      	b.n	801a76c <USB_EPStartXfer+0xcdc>
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	21ac      	movs	r1, #172	@ 0xac
 801a676:	187a      	adds	r2, r7, r1
 801a678:	6013      	str	r3, [r2, #0]
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	2250      	movs	r2, #80	@ 0x50
 801a67e:	5a9b      	ldrh	r3, [r3, r2]
 801a680:	b29b      	uxth	r3, r3
 801a682:	001a      	movs	r2, r3
 801a684:	187b      	adds	r3, r7, r1
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	189b      	adds	r3, r3, r2
 801a68a:	187a      	adds	r2, r7, r1
 801a68c:	6013      	str	r3, [r2, #0]
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	781b      	ldrb	r3, [r3, #0]
 801a692:	00da      	lsls	r2, r3, #3
 801a694:	187b      	adds	r3, r7, r1
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	18d3      	adds	r3, r2, r3
 801a69a:	4a8b      	ldr	r2, [pc, #556]	@ (801a8c8 <USB_EPStartXfer+0xe38>)
 801a69c:	4694      	mov	ip, r2
 801a69e:	4463      	add	r3, ip
 801a6a0:	21a8      	movs	r1, #168	@ 0xa8
 801a6a2:	187a      	adds	r2, r7, r1
 801a6a4:	6013      	str	r3, [r2, #0]
 801a6a6:	187b      	adds	r3, r7, r1
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	881b      	ldrh	r3, [r3, #0]
 801a6ac:	b29b      	uxth	r3, r3
 801a6ae:	059b      	lsls	r3, r3, #22
 801a6b0:	0d9b      	lsrs	r3, r3, #22
 801a6b2:	b29a      	uxth	r2, r3
 801a6b4:	187b      	adds	r3, r7, r1
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	801a      	strh	r2, [r3, #0]
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	691b      	ldr	r3, [r3, #16]
 801a6be:	2b3e      	cmp	r3, #62	@ 0x3e
 801a6c0:	d923      	bls.n	801a70a <USB_EPStartXfer+0xc7a>
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	691b      	ldr	r3, [r3, #16]
 801a6c6:	095b      	lsrs	r3, r3, #5
 801a6c8:	21e4      	movs	r1, #228	@ 0xe4
 801a6ca:	187a      	adds	r2, r7, r1
 801a6cc:	6013      	str	r3, [r2, #0]
 801a6ce:	683b      	ldr	r3, [r7, #0]
 801a6d0:	691b      	ldr	r3, [r3, #16]
 801a6d2:	221f      	movs	r2, #31
 801a6d4:	4013      	ands	r3, r2
 801a6d6:	d104      	bne.n	801a6e2 <USB_EPStartXfer+0xc52>
 801a6d8:	187b      	adds	r3, r7, r1
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	187a      	adds	r2, r7, r1
 801a6e0:	6013      	str	r3, [r2, #0]
 801a6e2:	21a8      	movs	r1, #168	@ 0xa8
 801a6e4:	187b      	adds	r3, r7, r1
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	881b      	ldrh	r3, [r3, #0]
 801a6ea:	b29a      	uxth	r2, r3
 801a6ec:	23e4      	movs	r3, #228	@ 0xe4
 801a6ee:	18fb      	adds	r3, r7, r3
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	b29b      	uxth	r3, r3
 801a6f4:	029b      	lsls	r3, r3, #10
 801a6f6:	b29b      	uxth	r3, r3
 801a6f8:	4313      	orrs	r3, r2
 801a6fa:	b29b      	uxth	r3, r3
 801a6fc:	4a71      	ldr	r2, [pc, #452]	@ (801a8c4 <USB_EPStartXfer+0xe34>)
 801a6fe:	4313      	orrs	r3, r2
 801a700:	b29a      	uxth	r2, r3
 801a702:	187b      	adds	r3, r7, r1
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	801a      	strh	r2, [r3, #0]
 801a708:	e054      	b.n	801a7b4 <USB_EPStartXfer+0xd24>
 801a70a:	683b      	ldr	r3, [r7, #0]
 801a70c:	691b      	ldr	r3, [r3, #16]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d10b      	bne.n	801a72a <USB_EPStartXfer+0xc9a>
 801a712:	21a8      	movs	r1, #168	@ 0xa8
 801a714:	187b      	adds	r3, r7, r1
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	881b      	ldrh	r3, [r3, #0]
 801a71a:	b29b      	uxth	r3, r3
 801a71c:	4a69      	ldr	r2, [pc, #420]	@ (801a8c4 <USB_EPStartXfer+0xe34>)
 801a71e:	4313      	orrs	r3, r2
 801a720:	b29a      	uxth	r2, r3
 801a722:	187b      	adds	r3, r7, r1
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	801a      	strh	r2, [r3, #0]
 801a728:	e044      	b.n	801a7b4 <USB_EPStartXfer+0xd24>
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	691b      	ldr	r3, [r3, #16]
 801a72e:	085b      	lsrs	r3, r3, #1
 801a730:	21e4      	movs	r1, #228	@ 0xe4
 801a732:	187a      	adds	r2, r7, r1
 801a734:	6013      	str	r3, [r2, #0]
 801a736:	683b      	ldr	r3, [r7, #0]
 801a738:	691b      	ldr	r3, [r3, #16]
 801a73a:	2201      	movs	r2, #1
 801a73c:	4013      	ands	r3, r2
 801a73e:	d004      	beq.n	801a74a <USB_EPStartXfer+0xcba>
 801a740:	187b      	adds	r3, r7, r1
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	3301      	adds	r3, #1
 801a746:	187a      	adds	r2, r7, r1
 801a748:	6013      	str	r3, [r2, #0]
 801a74a:	21a8      	movs	r1, #168	@ 0xa8
 801a74c:	187b      	adds	r3, r7, r1
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	b29a      	uxth	r2, r3
 801a754:	23e4      	movs	r3, #228	@ 0xe4
 801a756:	18fb      	adds	r3, r7, r3
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	029b      	lsls	r3, r3, #10
 801a75e:	b29b      	uxth	r3, r3
 801a760:	4313      	orrs	r3, r2
 801a762:	b29a      	uxth	r2, r3
 801a764:	187b      	adds	r3, r7, r1
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	801a      	strh	r2, [r3, #0]
 801a76a:	e023      	b.n	801a7b4 <USB_EPStartXfer+0xd24>
 801a76c:	683b      	ldr	r3, [r7, #0]
 801a76e:	785b      	ldrb	r3, [r3, #1]
 801a770:	2b01      	cmp	r3, #1
 801a772:	d11f      	bne.n	801a7b4 <USB_EPStartXfer+0xd24>
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	21b4      	movs	r1, #180	@ 0xb4
 801a778:	187a      	adds	r2, r7, r1
 801a77a:	6013      	str	r3, [r2, #0]
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	2250      	movs	r2, #80	@ 0x50
 801a780:	5a9b      	ldrh	r3, [r3, r2]
 801a782:	b29b      	uxth	r3, r3
 801a784:	001a      	movs	r2, r3
 801a786:	187b      	adds	r3, r7, r1
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	189b      	adds	r3, r3, r2
 801a78c:	187a      	adds	r2, r7, r1
 801a78e:	6013      	str	r3, [r2, #0]
 801a790:	683b      	ldr	r3, [r7, #0]
 801a792:	781b      	ldrb	r3, [r3, #0]
 801a794:	00da      	lsls	r2, r3, #3
 801a796:	187b      	adds	r3, r7, r1
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	18d3      	adds	r3, r2, r3
 801a79c:	4a4a      	ldr	r2, [pc, #296]	@ (801a8c8 <USB_EPStartXfer+0xe38>)
 801a79e:	4694      	mov	ip, r2
 801a7a0:	4463      	add	r3, ip
 801a7a2:	21b0      	movs	r1, #176	@ 0xb0
 801a7a4:	187a      	adds	r2, r7, r1
 801a7a6:	6013      	str	r3, [r2, #0]
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	691b      	ldr	r3, [r3, #16]
 801a7ac:	b29a      	uxth	r2, r3
 801a7ae:	187b      	adds	r3, r7, r1
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	801a      	strh	r2, [r3, #0]
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	22a4      	movs	r2, #164	@ 0xa4
 801a7b8:	18ba      	adds	r2, r7, r2
 801a7ba:	6013      	str	r3, [r2, #0]
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	785b      	ldrb	r3, [r3, #1]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d000      	beq.n	801a7c6 <USB_EPStartXfer+0xd36>
 801a7c4:	e082      	b.n	801a8cc <USB_EPStartXfer+0xe3c>
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	219c      	movs	r1, #156	@ 0x9c
 801a7ca:	187a      	adds	r2, r7, r1
 801a7cc:	6013      	str	r3, [r2, #0]
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	2250      	movs	r2, #80	@ 0x50
 801a7d2:	5a9b      	ldrh	r3, [r3, r2]
 801a7d4:	b29b      	uxth	r3, r3
 801a7d6:	001a      	movs	r2, r3
 801a7d8:	187b      	adds	r3, r7, r1
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	189b      	adds	r3, r3, r2
 801a7de:	187a      	adds	r2, r7, r1
 801a7e0:	6013      	str	r3, [r2, #0]
 801a7e2:	683b      	ldr	r3, [r7, #0]
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	00da      	lsls	r2, r3, #3
 801a7e8:	187b      	adds	r3, r7, r1
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	18d3      	adds	r3, r2, r3
 801a7ee:	4a34      	ldr	r2, [pc, #208]	@ (801a8c0 <USB_EPStartXfer+0xe30>)
 801a7f0:	4694      	mov	ip, r2
 801a7f2:	4463      	add	r3, ip
 801a7f4:	2198      	movs	r1, #152	@ 0x98
 801a7f6:	187a      	adds	r2, r7, r1
 801a7f8:	6013      	str	r3, [r2, #0]
 801a7fa:	187b      	adds	r3, r7, r1
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	881b      	ldrh	r3, [r3, #0]
 801a800:	b29b      	uxth	r3, r3
 801a802:	059b      	lsls	r3, r3, #22
 801a804:	0d9b      	lsrs	r3, r3, #22
 801a806:	b29a      	uxth	r2, r3
 801a808:	187b      	adds	r3, r7, r1
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	801a      	strh	r2, [r3, #0]
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	691b      	ldr	r3, [r3, #16]
 801a812:	2b3e      	cmp	r3, #62	@ 0x3e
 801a814:	d923      	bls.n	801a85e <USB_EPStartXfer+0xdce>
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	691b      	ldr	r3, [r3, #16]
 801a81a:	095b      	lsrs	r3, r3, #5
 801a81c:	21e0      	movs	r1, #224	@ 0xe0
 801a81e:	187a      	adds	r2, r7, r1
 801a820:	6013      	str	r3, [r2, #0]
 801a822:	683b      	ldr	r3, [r7, #0]
 801a824:	691b      	ldr	r3, [r3, #16]
 801a826:	221f      	movs	r2, #31
 801a828:	4013      	ands	r3, r2
 801a82a:	d104      	bne.n	801a836 <USB_EPStartXfer+0xda6>
 801a82c:	187b      	adds	r3, r7, r1
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	3b01      	subs	r3, #1
 801a832:	187a      	adds	r2, r7, r1
 801a834:	6013      	str	r3, [r2, #0]
 801a836:	2198      	movs	r1, #152	@ 0x98
 801a838:	187b      	adds	r3, r7, r1
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	881b      	ldrh	r3, [r3, #0]
 801a83e:	b29a      	uxth	r2, r3
 801a840:	23e0      	movs	r3, #224	@ 0xe0
 801a842:	18fb      	adds	r3, r7, r3
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	b29b      	uxth	r3, r3
 801a848:	029b      	lsls	r3, r3, #10
 801a84a:	b29b      	uxth	r3, r3
 801a84c:	4313      	orrs	r3, r2
 801a84e:	b29b      	uxth	r3, r3
 801a850:	4a1c      	ldr	r2, [pc, #112]	@ (801a8c4 <USB_EPStartXfer+0xe34>)
 801a852:	4313      	orrs	r3, r2
 801a854:	b29a      	uxth	r2, r3
 801a856:	187b      	adds	r3, r7, r1
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	801a      	strh	r2, [r3, #0]
 801a85c:	e057      	b.n	801a90e <USB_EPStartXfer+0xe7e>
 801a85e:	683b      	ldr	r3, [r7, #0]
 801a860:	691b      	ldr	r3, [r3, #16]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d10b      	bne.n	801a87e <USB_EPStartXfer+0xdee>
 801a866:	2198      	movs	r1, #152	@ 0x98
 801a868:	187b      	adds	r3, r7, r1
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	881b      	ldrh	r3, [r3, #0]
 801a86e:	b29b      	uxth	r3, r3
 801a870:	4a14      	ldr	r2, [pc, #80]	@ (801a8c4 <USB_EPStartXfer+0xe34>)
 801a872:	4313      	orrs	r3, r2
 801a874:	b29a      	uxth	r2, r3
 801a876:	187b      	adds	r3, r7, r1
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	801a      	strh	r2, [r3, #0]
 801a87c:	e047      	b.n	801a90e <USB_EPStartXfer+0xe7e>
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	691b      	ldr	r3, [r3, #16]
 801a882:	085b      	lsrs	r3, r3, #1
 801a884:	21e0      	movs	r1, #224	@ 0xe0
 801a886:	187a      	adds	r2, r7, r1
 801a888:	6013      	str	r3, [r2, #0]
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	691b      	ldr	r3, [r3, #16]
 801a88e:	2201      	movs	r2, #1
 801a890:	4013      	ands	r3, r2
 801a892:	d004      	beq.n	801a89e <USB_EPStartXfer+0xe0e>
 801a894:	187b      	adds	r3, r7, r1
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	3301      	adds	r3, #1
 801a89a:	187a      	adds	r2, r7, r1
 801a89c:	6013      	str	r3, [r2, #0]
 801a89e:	2198      	movs	r1, #152	@ 0x98
 801a8a0:	187b      	adds	r3, r7, r1
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	881b      	ldrh	r3, [r3, #0]
 801a8a6:	b29a      	uxth	r2, r3
 801a8a8:	23e0      	movs	r3, #224	@ 0xe0
 801a8aa:	18fb      	adds	r3, r7, r3
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	b29b      	uxth	r3, r3
 801a8b0:	029b      	lsls	r3, r3, #10
 801a8b2:	b29b      	uxth	r3, r3
 801a8b4:	4313      	orrs	r3, r2
 801a8b6:	b29a      	uxth	r2, r3
 801a8b8:	187b      	adds	r3, r7, r1
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	801a      	strh	r2, [r3, #0]
 801a8be:	e026      	b.n	801a90e <USB_EPStartXfer+0xe7e>
 801a8c0:	00000406 	.word	0x00000406
 801a8c4:	ffff8000 	.word	0xffff8000
 801a8c8:	00000402 	.word	0x00000402
 801a8cc:	683b      	ldr	r3, [r7, #0]
 801a8ce:	785b      	ldrb	r3, [r3, #1]
 801a8d0:	2b01      	cmp	r3, #1
 801a8d2:	d11c      	bne.n	801a90e <USB_EPStartXfer+0xe7e>
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2250      	movs	r2, #80	@ 0x50
 801a8d8:	5a9b      	ldrh	r3, [r3, r2]
 801a8da:	b29b      	uxth	r3, r3
 801a8dc:	001a      	movs	r2, r3
 801a8de:	21a4      	movs	r1, #164	@ 0xa4
 801a8e0:	187b      	adds	r3, r7, r1
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	189b      	adds	r3, r3, r2
 801a8e6:	187a      	adds	r2, r7, r1
 801a8e8:	6013      	str	r3, [r2, #0]
 801a8ea:	683b      	ldr	r3, [r7, #0]
 801a8ec:	781b      	ldrb	r3, [r3, #0]
 801a8ee:	00da      	lsls	r2, r3, #3
 801a8f0:	187b      	adds	r3, r7, r1
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	18d3      	adds	r3, r2, r3
 801a8f6:	4ad2      	ldr	r2, [pc, #840]	@ (801ac40 <USB_EPStartXfer+0x11b0>)
 801a8f8:	4694      	mov	ip, r2
 801a8fa:	4463      	add	r3, ip
 801a8fc:	21a0      	movs	r1, #160	@ 0xa0
 801a8fe:	187a      	adds	r2, r7, r1
 801a900:	6013      	str	r3, [r2, #0]
 801a902:	683b      	ldr	r3, [r7, #0]
 801a904:	691b      	ldr	r3, [r3, #16]
 801a906:	b29a      	uxth	r2, r3
 801a908:	187b      	adds	r3, r7, r1
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	69db      	ldr	r3, [r3, #28]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d100      	bne.n	801a918 <USB_EPStartXfer+0xe88>
 801a916:	e1c2      	b.n	801ac9e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a918:	687a      	ldr	r2, [r7, #4]
 801a91a:	683b      	ldr	r3, [r7, #0]
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	009b      	lsls	r3, r3, #2
 801a920:	18d2      	adds	r2, r2, r3
 801a922:	2196      	movs	r1, #150	@ 0x96
 801a924:	187b      	adds	r3, r7, r1
 801a926:	8812      	ldrh	r2, [r2, #0]
 801a928:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a92a:	187b      	adds	r3, r7, r1
 801a92c:	881a      	ldrh	r2, [r3, #0]
 801a92e:	2380      	movs	r3, #128	@ 0x80
 801a930:	01db      	lsls	r3, r3, #7
 801a932:	4013      	ands	r3, r2
 801a934:	d004      	beq.n	801a940 <USB_EPStartXfer+0xeb0>
 801a936:	187b      	adds	r3, r7, r1
 801a938:	881b      	ldrh	r3, [r3, #0]
 801a93a:	2240      	movs	r2, #64	@ 0x40
 801a93c:	4013      	ands	r3, r2
 801a93e:	d10d      	bne.n	801a95c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a940:	2196      	movs	r1, #150	@ 0x96
 801a942:	187b      	adds	r3, r7, r1
 801a944:	881a      	ldrh	r2, [r3, #0]
 801a946:	2380      	movs	r3, #128	@ 0x80
 801a948:	01db      	lsls	r3, r3, #7
 801a94a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a94c:	d000      	beq.n	801a950 <USB_EPStartXfer+0xec0>
 801a94e:	e1a6      	b.n	801ac9e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a950:	187b      	adds	r3, r7, r1
 801a952:	881b      	ldrh	r3, [r3, #0]
 801a954:	2240      	movs	r2, #64	@ 0x40
 801a956:	4013      	ands	r3, r2
 801a958:	d000      	beq.n	801a95c <USB_EPStartXfer+0xecc>
 801a95a:	e1a0      	b.n	801ac9e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801a95c:	687a      	ldr	r2, [r7, #4]
 801a95e:	683b      	ldr	r3, [r7, #0]
 801a960:	781b      	ldrb	r3, [r3, #0]
 801a962:	009b      	lsls	r3, r3, #2
 801a964:	18d3      	adds	r3, r2, r3
 801a966:	881b      	ldrh	r3, [r3, #0]
 801a968:	b29a      	uxth	r2, r3
 801a96a:	2094      	movs	r0, #148	@ 0x94
 801a96c:	183b      	adds	r3, r7, r0
 801a96e:	49b5      	ldr	r1, [pc, #724]	@ (801ac44 <USB_EPStartXfer+0x11b4>)
 801a970:	400a      	ands	r2, r1
 801a972:	801a      	strh	r2, [r3, #0]
 801a974:	687a      	ldr	r2, [r7, #4]
 801a976:	683b      	ldr	r3, [r7, #0]
 801a978:	781b      	ldrb	r3, [r3, #0]
 801a97a:	009b      	lsls	r3, r3, #2
 801a97c:	18d3      	adds	r3, r2, r3
 801a97e:	183a      	adds	r2, r7, r0
 801a980:	8812      	ldrh	r2, [r2, #0]
 801a982:	49b1      	ldr	r1, [pc, #708]	@ (801ac48 <USB_EPStartXfer+0x11b8>)
 801a984:	430a      	orrs	r2, r1
 801a986:	b292      	uxth	r2, r2
 801a988:	801a      	strh	r2, [r3, #0]
 801a98a:	e188      	b.n	801ac9e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a98c:	683b      	ldr	r3, [r7, #0]
 801a98e:	78db      	ldrb	r3, [r3, #3]
 801a990:	2b01      	cmp	r3, #1
 801a992:	d000      	beq.n	801a996 <USB_EPStartXfer+0xf06>
 801a994:	e181      	b.n	801ac9a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a996:	683b      	ldr	r3, [r7, #0]
 801a998:	699a      	ldr	r2, [r3, #24]
 801a99a:	683b      	ldr	r3, [r7, #0]
 801a99c:	691b      	ldr	r3, [r3, #16]
 801a99e:	429a      	cmp	r2, r3
 801a9a0:	d90d      	bls.n	801a9be <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a9a2:	683b      	ldr	r3, [r7, #0]
 801a9a4:	691b      	ldr	r3, [r3, #16]
 801a9a6:	1d7a      	adds	r2, r7, #5
 801a9a8:	32ff      	adds	r2, #255	@ 0xff
 801a9aa:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a9ac:	683b      	ldr	r3, [r7, #0]
 801a9ae:	699a      	ldr	r2, [r3, #24]
 801a9b0:	1d7b      	adds	r3, r7, #5
 801a9b2:	33ff      	adds	r3, #255	@ 0xff
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	1ad2      	subs	r2, r2, r3
 801a9b8:	683b      	ldr	r3, [r7, #0]
 801a9ba:	619a      	str	r2, [r3, #24]
 801a9bc:	e007      	b.n	801a9ce <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a9be:	683b      	ldr	r3, [r7, #0]
 801a9c0:	699b      	ldr	r3, [r3, #24]
 801a9c2:	1d7a      	adds	r2, r7, #5
 801a9c4:	32ff      	adds	r2, #255	@ 0xff
 801a9c6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a9c8:	683b      	ldr	r3, [r7, #0]
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	785b      	ldrb	r3, [r3, #1]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d000      	beq.n	801a9d8 <USB_EPStartXfer+0xf48>
 801a9d6:	e082      	b.n	801aade <USB_EPStartXfer+0x104e>
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	21cc      	movs	r1, #204	@ 0xcc
 801a9dc:	187a      	adds	r2, r7, r1
 801a9de:	6013      	str	r3, [r2, #0]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	2250      	movs	r2, #80	@ 0x50
 801a9e4:	5a9b      	ldrh	r3, [r3, r2]
 801a9e6:	b29b      	uxth	r3, r3
 801a9e8:	001a      	movs	r2, r3
 801a9ea:	187b      	adds	r3, r7, r1
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	189b      	adds	r3, r3, r2
 801a9f0:	187a      	adds	r2, r7, r1
 801a9f2:	6013      	str	r3, [r2, #0]
 801a9f4:	683b      	ldr	r3, [r7, #0]
 801a9f6:	781b      	ldrb	r3, [r3, #0]
 801a9f8:	00da      	lsls	r2, r3, #3
 801a9fa:	187b      	adds	r3, r7, r1
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	18d3      	adds	r3, r2, r3
 801aa00:	4a92      	ldr	r2, [pc, #584]	@ (801ac4c <USB_EPStartXfer+0x11bc>)
 801aa02:	4694      	mov	ip, r2
 801aa04:	4463      	add	r3, ip
 801aa06:	21c8      	movs	r1, #200	@ 0xc8
 801aa08:	187a      	adds	r2, r7, r1
 801aa0a:	6013      	str	r3, [r2, #0]
 801aa0c:	187b      	adds	r3, r7, r1
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	881b      	ldrh	r3, [r3, #0]
 801aa12:	b29b      	uxth	r3, r3
 801aa14:	059b      	lsls	r3, r3, #22
 801aa16:	0d9b      	lsrs	r3, r3, #22
 801aa18:	b29a      	uxth	r2, r3
 801aa1a:	187b      	adds	r3, r7, r1
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	801a      	strh	r2, [r3, #0]
 801aa20:	1d7b      	adds	r3, r7, #5
 801aa22:	33ff      	adds	r3, #255	@ 0xff
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa28:	d925      	bls.n	801aa76 <USB_EPStartXfer+0xfe6>
 801aa2a:	1d7b      	adds	r3, r7, #5
 801aa2c:	33ff      	adds	r3, #255	@ 0xff
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	095b      	lsrs	r3, r3, #5
 801aa32:	21dc      	movs	r1, #220	@ 0xdc
 801aa34:	187a      	adds	r2, r7, r1
 801aa36:	6013      	str	r3, [r2, #0]
 801aa38:	1d7b      	adds	r3, r7, #5
 801aa3a:	33ff      	adds	r3, #255	@ 0xff
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	221f      	movs	r2, #31
 801aa40:	4013      	ands	r3, r2
 801aa42:	d104      	bne.n	801aa4e <USB_EPStartXfer+0xfbe>
 801aa44:	187b      	adds	r3, r7, r1
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	3b01      	subs	r3, #1
 801aa4a:	187a      	adds	r2, r7, r1
 801aa4c:	6013      	str	r3, [r2, #0]
 801aa4e:	21c8      	movs	r1, #200	@ 0xc8
 801aa50:	187b      	adds	r3, r7, r1
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	881b      	ldrh	r3, [r3, #0]
 801aa56:	b29a      	uxth	r2, r3
 801aa58:	23dc      	movs	r3, #220	@ 0xdc
 801aa5a:	18fb      	adds	r3, r7, r3
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	b29b      	uxth	r3, r3
 801aa60:	029b      	lsls	r3, r3, #10
 801aa62:	b29b      	uxth	r3, r3
 801aa64:	4313      	orrs	r3, r2
 801aa66:	b29b      	uxth	r3, r3
 801aa68:	4a79      	ldr	r2, [pc, #484]	@ (801ac50 <USB_EPStartXfer+0x11c0>)
 801aa6a:	4313      	orrs	r3, r2
 801aa6c:	b29a      	uxth	r2, r3
 801aa6e:	187b      	adds	r3, r7, r1
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	801a      	strh	r2, [r3, #0]
 801aa74:	e058      	b.n	801ab28 <USB_EPStartXfer+0x1098>
 801aa76:	1d7b      	adds	r3, r7, #5
 801aa78:	33ff      	adds	r3, #255	@ 0xff
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d10b      	bne.n	801aa98 <USB_EPStartXfer+0x1008>
 801aa80:	21c8      	movs	r1, #200	@ 0xc8
 801aa82:	187b      	adds	r3, r7, r1
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	881b      	ldrh	r3, [r3, #0]
 801aa88:	b29b      	uxth	r3, r3
 801aa8a:	4a71      	ldr	r2, [pc, #452]	@ (801ac50 <USB_EPStartXfer+0x11c0>)
 801aa8c:	4313      	orrs	r3, r2
 801aa8e:	b29a      	uxth	r2, r3
 801aa90:	187b      	adds	r3, r7, r1
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	801a      	strh	r2, [r3, #0]
 801aa96:	e047      	b.n	801ab28 <USB_EPStartXfer+0x1098>
 801aa98:	1d7b      	adds	r3, r7, #5
 801aa9a:	33ff      	adds	r3, #255	@ 0xff
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	085b      	lsrs	r3, r3, #1
 801aaa0:	21dc      	movs	r1, #220	@ 0xdc
 801aaa2:	187a      	adds	r2, r7, r1
 801aaa4:	6013      	str	r3, [r2, #0]
 801aaa6:	1d7b      	adds	r3, r7, #5
 801aaa8:	33ff      	adds	r3, #255	@ 0xff
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2201      	movs	r2, #1
 801aaae:	4013      	ands	r3, r2
 801aab0:	d004      	beq.n	801aabc <USB_EPStartXfer+0x102c>
 801aab2:	187b      	adds	r3, r7, r1
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	3301      	adds	r3, #1
 801aab8:	187a      	adds	r2, r7, r1
 801aaba:	6013      	str	r3, [r2, #0]
 801aabc:	21c8      	movs	r1, #200	@ 0xc8
 801aabe:	187b      	adds	r3, r7, r1
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	881b      	ldrh	r3, [r3, #0]
 801aac4:	b29a      	uxth	r2, r3
 801aac6:	23dc      	movs	r3, #220	@ 0xdc
 801aac8:	18fb      	adds	r3, r7, r3
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	b29b      	uxth	r3, r3
 801aace:	029b      	lsls	r3, r3, #10
 801aad0:	b29b      	uxth	r3, r3
 801aad2:	4313      	orrs	r3, r2
 801aad4:	b29a      	uxth	r2, r3
 801aad6:	187b      	adds	r3, r7, r1
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	801a      	strh	r2, [r3, #0]
 801aadc:	e024      	b.n	801ab28 <USB_EPStartXfer+0x1098>
 801aade:	683b      	ldr	r3, [r7, #0]
 801aae0:	785b      	ldrb	r3, [r3, #1]
 801aae2:	2b01      	cmp	r3, #1
 801aae4:	d120      	bne.n	801ab28 <USB_EPStartXfer+0x1098>
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	21d4      	movs	r1, #212	@ 0xd4
 801aaea:	187a      	adds	r2, r7, r1
 801aaec:	6013      	str	r3, [r2, #0]
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	2250      	movs	r2, #80	@ 0x50
 801aaf2:	5a9b      	ldrh	r3, [r3, r2]
 801aaf4:	b29b      	uxth	r3, r3
 801aaf6:	001a      	movs	r2, r3
 801aaf8:	187b      	adds	r3, r7, r1
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	189b      	adds	r3, r3, r2
 801aafe:	187a      	adds	r2, r7, r1
 801ab00:	6013      	str	r3, [r2, #0]
 801ab02:	683b      	ldr	r3, [r7, #0]
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	00da      	lsls	r2, r3, #3
 801ab08:	187b      	adds	r3, r7, r1
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	18d3      	adds	r3, r2, r3
 801ab0e:	4a4f      	ldr	r2, [pc, #316]	@ (801ac4c <USB_EPStartXfer+0x11bc>)
 801ab10:	4694      	mov	ip, r2
 801ab12:	4463      	add	r3, ip
 801ab14:	21d0      	movs	r1, #208	@ 0xd0
 801ab16:	187a      	adds	r2, r7, r1
 801ab18:	6013      	str	r3, [r2, #0]
 801ab1a:	1d7b      	adds	r3, r7, #5
 801ab1c:	33ff      	adds	r3, #255	@ 0xff
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	b29a      	uxth	r2, r3
 801ab22:	187b      	adds	r3, r7, r1
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	801a      	strh	r2, [r3, #0]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	22c4      	movs	r2, #196	@ 0xc4
 801ab2c:	18ba      	adds	r2, r7, r2
 801ab2e:	6013      	str	r3, [r2, #0]
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	785b      	ldrb	r3, [r3, #1]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d000      	beq.n	801ab3a <USB_EPStartXfer+0x10aa>
 801ab38:	e08c      	b.n	801ac54 <USB_EPStartXfer+0x11c4>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	21bc      	movs	r1, #188	@ 0xbc
 801ab3e:	187a      	adds	r2, r7, r1
 801ab40:	6013      	str	r3, [r2, #0]
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	2250      	movs	r2, #80	@ 0x50
 801ab46:	5a9b      	ldrh	r3, [r3, r2]
 801ab48:	b29b      	uxth	r3, r3
 801ab4a:	001a      	movs	r2, r3
 801ab4c:	187b      	adds	r3, r7, r1
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	189b      	adds	r3, r3, r2
 801ab52:	187a      	adds	r2, r7, r1
 801ab54:	6013      	str	r3, [r2, #0]
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	781b      	ldrb	r3, [r3, #0]
 801ab5a:	00da      	lsls	r2, r3, #3
 801ab5c:	187b      	adds	r3, r7, r1
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	18d3      	adds	r3, r2, r3
 801ab62:	4a37      	ldr	r2, [pc, #220]	@ (801ac40 <USB_EPStartXfer+0x11b0>)
 801ab64:	4694      	mov	ip, r2
 801ab66:	4463      	add	r3, ip
 801ab68:	21b8      	movs	r1, #184	@ 0xb8
 801ab6a:	187a      	adds	r2, r7, r1
 801ab6c:	6013      	str	r3, [r2, #0]
 801ab6e:	187b      	adds	r3, r7, r1
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	881b      	ldrh	r3, [r3, #0]
 801ab74:	b29b      	uxth	r3, r3
 801ab76:	059b      	lsls	r3, r3, #22
 801ab78:	0d9b      	lsrs	r3, r3, #22
 801ab7a:	b29a      	uxth	r2, r3
 801ab7c:	187b      	adds	r3, r7, r1
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	801a      	strh	r2, [r3, #0]
 801ab82:	1d7b      	adds	r3, r7, #5
 801ab84:	33ff      	adds	r3, #255	@ 0xff
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	2b3e      	cmp	r3, #62	@ 0x3e
 801ab8a:	d925      	bls.n	801abd8 <USB_EPStartXfer+0x1148>
 801ab8c:	1d7b      	adds	r3, r7, #5
 801ab8e:	33ff      	adds	r3, #255	@ 0xff
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	095b      	lsrs	r3, r3, #5
 801ab94:	21d8      	movs	r1, #216	@ 0xd8
 801ab96:	187a      	adds	r2, r7, r1
 801ab98:	6013      	str	r3, [r2, #0]
 801ab9a:	1d7b      	adds	r3, r7, #5
 801ab9c:	33ff      	adds	r3, #255	@ 0xff
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	221f      	movs	r2, #31
 801aba2:	4013      	ands	r3, r2
 801aba4:	d104      	bne.n	801abb0 <USB_EPStartXfer+0x1120>
 801aba6:	187b      	adds	r3, r7, r1
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	3b01      	subs	r3, #1
 801abac:	187a      	adds	r2, r7, r1
 801abae:	6013      	str	r3, [r2, #0]
 801abb0:	21b8      	movs	r1, #184	@ 0xb8
 801abb2:	187b      	adds	r3, r7, r1
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	881b      	ldrh	r3, [r3, #0]
 801abb8:	b29a      	uxth	r2, r3
 801abba:	23d8      	movs	r3, #216	@ 0xd8
 801abbc:	18fb      	adds	r3, r7, r3
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	b29b      	uxth	r3, r3
 801abc2:	029b      	lsls	r3, r3, #10
 801abc4:	b29b      	uxth	r3, r3
 801abc6:	4313      	orrs	r3, r2
 801abc8:	b29b      	uxth	r3, r3
 801abca:	4a21      	ldr	r2, [pc, #132]	@ (801ac50 <USB_EPStartXfer+0x11c0>)
 801abcc:	4313      	orrs	r3, r2
 801abce:	b29a      	uxth	r2, r3
 801abd0:	187b      	adds	r3, r7, r1
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	801a      	strh	r2, [r3, #0]
 801abd6:	e062      	b.n	801ac9e <USB_EPStartXfer+0x120e>
 801abd8:	1d7b      	adds	r3, r7, #5
 801abda:	33ff      	adds	r3, #255	@ 0xff
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d10b      	bne.n	801abfa <USB_EPStartXfer+0x116a>
 801abe2:	21b8      	movs	r1, #184	@ 0xb8
 801abe4:	187b      	adds	r3, r7, r1
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	881b      	ldrh	r3, [r3, #0]
 801abea:	b29b      	uxth	r3, r3
 801abec:	4a18      	ldr	r2, [pc, #96]	@ (801ac50 <USB_EPStartXfer+0x11c0>)
 801abee:	4313      	orrs	r3, r2
 801abf0:	b29a      	uxth	r2, r3
 801abf2:	187b      	adds	r3, r7, r1
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	801a      	strh	r2, [r3, #0]
 801abf8:	e051      	b.n	801ac9e <USB_EPStartXfer+0x120e>
 801abfa:	1d7b      	adds	r3, r7, #5
 801abfc:	33ff      	adds	r3, #255	@ 0xff
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	085b      	lsrs	r3, r3, #1
 801ac02:	21d8      	movs	r1, #216	@ 0xd8
 801ac04:	187a      	adds	r2, r7, r1
 801ac06:	6013      	str	r3, [r2, #0]
 801ac08:	1d7b      	adds	r3, r7, #5
 801ac0a:	33ff      	adds	r3, #255	@ 0xff
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	2201      	movs	r2, #1
 801ac10:	4013      	ands	r3, r2
 801ac12:	d004      	beq.n	801ac1e <USB_EPStartXfer+0x118e>
 801ac14:	187b      	adds	r3, r7, r1
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	3301      	adds	r3, #1
 801ac1a:	187a      	adds	r2, r7, r1
 801ac1c:	6013      	str	r3, [r2, #0]
 801ac1e:	21b8      	movs	r1, #184	@ 0xb8
 801ac20:	187b      	adds	r3, r7, r1
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	881b      	ldrh	r3, [r3, #0]
 801ac26:	b29a      	uxth	r2, r3
 801ac28:	23d8      	movs	r3, #216	@ 0xd8
 801ac2a:	18fb      	adds	r3, r7, r3
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	b29b      	uxth	r3, r3
 801ac30:	029b      	lsls	r3, r3, #10
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	4313      	orrs	r3, r2
 801ac36:	b29a      	uxth	r2, r3
 801ac38:	187b      	adds	r3, r7, r1
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	801a      	strh	r2, [r3, #0]
 801ac3e:	e02e      	b.n	801ac9e <USB_EPStartXfer+0x120e>
 801ac40:	00000406 	.word	0x00000406
 801ac44:	ffff8f8f 	.word	0xffff8f8f
 801ac48:	ffff80c0 	.word	0xffff80c0
 801ac4c:	00000402 	.word	0x00000402
 801ac50:	ffff8000 	.word	0xffff8000
 801ac54:	683b      	ldr	r3, [r7, #0]
 801ac56:	785b      	ldrb	r3, [r3, #1]
 801ac58:	2b01      	cmp	r3, #1
 801ac5a:	d120      	bne.n	801ac9e <USB_EPStartXfer+0x120e>
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	2250      	movs	r2, #80	@ 0x50
 801ac60:	5a9b      	ldrh	r3, [r3, r2]
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	001a      	movs	r2, r3
 801ac66:	21c4      	movs	r1, #196	@ 0xc4
 801ac68:	187b      	adds	r3, r7, r1
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	189b      	adds	r3, r3, r2
 801ac6e:	187a      	adds	r2, r7, r1
 801ac70:	6013      	str	r3, [r2, #0]
 801ac72:	683b      	ldr	r3, [r7, #0]
 801ac74:	781b      	ldrb	r3, [r3, #0]
 801ac76:	00da      	lsls	r2, r3, #3
 801ac78:	187b      	adds	r3, r7, r1
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	18d3      	adds	r3, r2, r3
 801ac7e:	4a1d      	ldr	r2, [pc, #116]	@ (801acf4 <USB_EPStartXfer+0x1264>)
 801ac80:	4694      	mov	ip, r2
 801ac82:	4463      	add	r3, ip
 801ac84:	21c0      	movs	r1, #192	@ 0xc0
 801ac86:	187a      	adds	r2, r7, r1
 801ac88:	6013      	str	r3, [r2, #0]
 801ac8a:	1d7b      	adds	r3, r7, #5
 801ac8c:	33ff      	adds	r3, #255	@ 0xff
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	b29a      	uxth	r2, r3
 801ac92:	187b      	adds	r3, r7, r1
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	801a      	strh	r2, [r3, #0]
 801ac98:	e001      	b.n	801ac9e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801ac9a:	2301      	movs	r3, #1
 801ac9c:	e025      	b.n	801acea <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ac9e:	687a      	ldr	r2, [r7, #4]
 801aca0:	683b      	ldr	r3, [r7, #0]
 801aca2:	781b      	ldrb	r3, [r3, #0]
 801aca4:	009b      	lsls	r3, r3, #2
 801aca6:	18d3      	adds	r3, r2, r3
 801aca8:	881b      	ldrh	r3, [r3, #0]
 801acaa:	b29a      	uxth	r2, r3
 801acac:	208a      	movs	r0, #138	@ 0x8a
 801acae:	183b      	adds	r3, r7, r0
 801acb0:	4911      	ldr	r1, [pc, #68]	@ (801acf8 <USB_EPStartXfer+0x1268>)
 801acb2:	400a      	ands	r2, r1
 801acb4:	801a      	strh	r2, [r3, #0]
 801acb6:	183b      	adds	r3, r7, r0
 801acb8:	183a      	adds	r2, r7, r0
 801acba:	8812      	ldrh	r2, [r2, #0]
 801acbc:	2180      	movs	r1, #128	@ 0x80
 801acbe:	0149      	lsls	r1, r1, #5
 801acc0:	404a      	eors	r2, r1
 801acc2:	801a      	strh	r2, [r3, #0]
 801acc4:	183b      	adds	r3, r7, r0
 801acc6:	183a      	adds	r2, r7, r0
 801acc8:	8812      	ldrh	r2, [r2, #0]
 801acca:	2180      	movs	r1, #128	@ 0x80
 801accc:	0189      	lsls	r1, r1, #6
 801acce:	404a      	eors	r2, r1
 801acd0:	801a      	strh	r2, [r3, #0]
 801acd2:	687a      	ldr	r2, [r7, #4]
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	781b      	ldrb	r3, [r3, #0]
 801acd8:	009b      	lsls	r3, r3, #2
 801acda:	18d3      	adds	r3, r2, r3
 801acdc:	183a      	adds	r2, r7, r0
 801acde:	8812      	ldrh	r2, [r2, #0]
 801ace0:	4906      	ldr	r1, [pc, #24]	@ (801acfc <USB_EPStartXfer+0x126c>)
 801ace2:	430a      	orrs	r2, r1
 801ace4:	b292      	uxth	r2, r2
 801ace6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801ace8:	2300      	movs	r3, #0
}
 801acea:	0018      	movs	r0, r3
 801acec:	46bd      	mov	sp, r7
 801acee:	b043      	add	sp, #268	@ 0x10c
 801acf0:	bd90      	pop	{r4, r7, pc}
 801acf2:	46c0      	nop			@ (mov r8, r8)
 801acf4:	00000406 	.word	0x00000406
 801acf8:	ffffbf8f 	.word	0xffffbf8f
 801acfc:	ffff8080 	.word	0xffff8080

0801ad00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b084      	sub	sp, #16
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
 801ad08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	785b      	ldrb	r3, [r3, #1]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d01d      	beq.n	801ad4e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801ad12:	687a      	ldr	r2, [r7, #4]
 801ad14:	683b      	ldr	r3, [r7, #0]
 801ad16:	781b      	ldrb	r3, [r3, #0]
 801ad18:	009b      	lsls	r3, r3, #2
 801ad1a:	18d3      	adds	r3, r2, r3
 801ad1c:	881b      	ldrh	r3, [r3, #0]
 801ad1e:	b29a      	uxth	r2, r3
 801ad20:	200c      	movs	r0, #12
 801ad22:	183b      	adds	r3, r7, r0
 801ad24:	491b      	ldr	r1, [pc, #108]	@ (801ad94 <USB_EPSetStall+0x94>)
 801ad26:	400a      	ands	r2, r1
 801ad28:	801a      	strh	r2, [r3, #0]
 801ad2a:	183b      	adds	r3, r7, r0
 801ad2c:	183a      	adds	r2, r7, r0
 801ad2e:	8812      	ldrh	r2, [r2, #0]
 801ad30:	2110      	movs	r1, #16
 801ad32:	404a      	eors	r2, r1
 801ad34:	801a      	strh	r2, [r3, #0]
 801ad36:	687a      	ldr	r2, [r7, #4]
 801ad38:	683b      	ldr	r3, [r7, #0]
 801ad3a:	781b      	ldrb	r3, [r3, #0]
 801ad3c:	009b      	lsls	r3, r3, #2
 801ad3e:	18d3      	adds	r3, r2, r3
 801ad40:	183a      	adds	r2, r7, r0
 801ad42:	8812      	ldrh	r2, [r2, #0]
 801ad44:	4914      	ldr	r1, [pc, #80]	@ (801ad98 <USB_EPSetStall+0x98>)
 801ad46:	430a      	orrs	r2, r1
 801ad48:	b292      	uxth	r2, r2
 801ad4a:	801a      	strh	r2, [r3, #0]
 801ad4c:	e01d      	b.n	801ad8a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801ad4e:	687a      	ldr	r2, [r7, #4]
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	781b      	ldrb	r3, [r3, #0]
 801ad54:	009b      	lsls	r3, r3, #2
 801ad56:	18d3      	adds	r3, r2, r3
 801ad58:	881b      	ldrh	r3, [r3, #0]
 801ad5a:	b29a      	uxth	r2, r3
 801ad5c:	200e      	movs	r0, #14
 801ad5e:	183b      	adds	r3, r7, r0
 801ad60:	490e      	ldr	r1, [pc, #56]	@ (801ad9c <USB_EPSetStall+0x9c>)
 801ad62:	400a      	ands	r2, r1
 801ad64:	801a      	strh	r2, [r3, #0]
 801ad66:	183b      	adds	r3, r7, r0
 801ad68:	183a      	adds	r2, r7, r0
 801ad6a:	8812      	ldrh	r2, [r2, #0]
 801ad6c:	2180      	movs	r1, #128	@ 0x80
 801ad6e:	0149      	lsls	r1, r1, #5
 801ad70:	404a      	eors	r2, r1
 801ad72:	801a      	strh	r2, [r3, #0]
 801ad74:	687a      	ldr	r2, [r7, #4]
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	781b      	ldrb	r3, [r3, #0]
 801ad7a:	009b      	lsls	r3, r3, #2
 801ad7c:	18d3      	adds	r3, r2, r3
 801ad7e:	183a      	adds	r2, r7, r0
 801ad80:	8812      	ldrh	r2, [r2, #0]
 801ad82:	4905      	ldr	r1, [pc, #20]	@ (801ad98 <USB_EPSetStall+0x98>)
 801ad84:	430a      	orrs	r2, r1
 801ad86:	b292      	uxth	r2, r2
 801ad88:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801ad8a:	2300      	movs	r3, #0
}
 801ad8c:	0018      	movs	r0, r3
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	b004      	add	sp, #16
 801ad92:	bd80      	pop	{r7, pc}
 801ad94:	ffff8fbf 	.word	0xffff8fbf
 801ad98:	ffff8080 	.word	0xffff8080
 801ad9c:	ffffbf8f 	.word	0xffffbf8f

0801ada0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b086      	sub	sp, #24
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
 801ada8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	7b1b      	ldrb	r3, [r3, #12]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d000      	beq.n	801adb4 <USB_EPClearStall+0x14>
 801adb2:	e095      	b.n	801aee0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801adb4:	683b      	ldr	r3, [r7, #0]
 801adb6:	785b      	ldrb	r3, [r3, #1]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d046      	beq.n	801ae4a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801adbc:	687a      	ldr	r2, [r7, #4]
 801adbe:	683b      	ldr	r3, [r7, #0]
 801adc0:	781b      	ldrb	r3, [r3, #0]
 801adc2:	009b      	lsls	r3, r3, #2
 801adc4:	18d2      	adds	r2, r2, r3
 801adc6:	2110      	movs	r1, #16
 801adc8:	187b      	adds	r3, r7, r1
 801adca:	8812      	ldrh	r2, [r2, #0]
 801adcc:	801a      	strh	r2, [r3, #0]
 801adce:	187b      	adds	r3, r7, r1
 801add0:	881b      	ldrh	r3, [r3, #0]
 801add2:	2240      	movs	r2, #64	@ 0x40
 801add4:	4013      	ands	r3, r2
 801add6:	d016      	beq.n	801ae06 <USB_EPClearStall+0x66>
 801add8:	687a      	ldr	r2, [r7, #4]
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	781b      	ldrb	r3, [r3, #0]
 801adde:	009b      	lsls	r3, r3, #2
 801ade0:	18d3      	adds	r3, r2, r3
 801ade2:	881b      	ldrh	r3, [r3, #0]
 801ade4:	b29a      	uxth	r2, r3
 801ade6:	200e      	movs	r0, #14
 801ade8:	183b      	adds	r3, r7, r0
 801adea:	4940      	ldr	r1, [pc, #256]	@ (801aeec <USB_EPClearStall+0x14c>)
 801adec:	400a      	ands	r2, r1
 801adee:	801a      	strh	r2, [r3, #0]
 801adf0:	687a      	ldr	r2, [r7, #4]
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	781b      	ldrb	r3, [r3, #0]
 801adf6:	009b      	lsls	r3, r3, #2
 801adf8:	18d3      	adds	r3, r2, r3
 801adfa:	183a      	adds	r2, r7, r0
 801adfc:	8812      	ldrh	r2, [r2, #0]
 801adfe:	493c      	ldr	r1, [pc, #240]	@ (801aef0 <USB_EPClearStall+0x150>)
 801ae00:	430a      	orrs	r2, r1
 801ae02:	b292      	uxth	r2, r2
 801ae04:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	78db      	ldrb	r3, [r3, #3]
 801ae0a:	2b01      	cmp	r3, #1
 801ae0c:	d068      	beq.n	801aee0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	683b      	ldr	r3, [r7, #0]
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	009b      	lsls	r3, r3, #2
 801ae16:	18d3      	adds	r3, r2, r3
 801ae18:	881b      	ldrh	r3, [r3, #0]
 801ae1a:	b29a      	uxth	r2, r3
 801ae1c:	200c      	movs	r0, #12
 801ae1e:	183b      	adds	r3, r7, r0
 801ae20:	4934      	ldr	r1, [pc, #208]	@ (801aef4 <USB_EPClearStall+0x154>)
 801ae22:	400a      	ands	r2, r1
 801ae24:	801a      	strh	r2, [r3, #0]
 801ae26:	183b      	adds	r3, r7, r0
 801ae28:	183a      	adds	r2, r7, r0
 801ae2a:	8812      	ldrh	r2, [r2, #0]
 801ae2c:	2120      	movs	r1, #32
 801ae2e:	404a      	eors	r2, r1
 801ae30:	801a      	strh	r2, [r3, #0]
 801ae32:	687a      	ldr	r2, [r7, #4]
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	781b      	ldrb	r3, [r3, #0]
 801ae38:	009b      	lsls	r3, r3, #2
 801ae3a:	18d3      	adds	r3, r2, r3
 801ae3c:	183a      	adds	r2, r7, r0
 801ae3e:	8812      	ldrh	r2, [r2, #0]
 801ae40:	492d      	ldr	r1, [pc, #180]	@ (801aef8 <USB_EPClearStall+0x158>)
 801ae42:	430a      	orrs	r2, r1
 801ae44:	b292      	uxth	r2, r2
 801ae46:	801a      	strh	r2, [r3, #0]
 801ae48:	e04a      	b.n	801aee0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ae4a:	687a      	ldr	r2, [r7, #4]
 801ae4c:	683b      	ldr	r3, [r7, #0]
 801ae4e:	781b      	ldrb	r3, [r3, #0]
 801ae50:	009b      	lsls	r3, r3, #2
 801ae52:	18d2      	adds	r2, r2, r3
 801ae54:	2116      	movs	r1, #22
 801ae56:	187b      	adds	r3, r7, r1
 801ae58:	8812      	ldrh	r2, [r2, #0]
 801ae5a:	801a      	strh	r2, [r3, #0]
 801ae5c:	187b      	adds	r3, r7, r1
 801ae5e:	881a      	ldrh	r2, [r3, #0]
 801ae60:	2380      	movs	r3, #128	@ 0x80
 801ae62:	01db      	lsls	r3, r3, #7
 801ae64:	4013      	ands	r3, r2
 801ae66:	d016      	beq.n	801ae96 <USB_EPClearStall+0xf6>
 801ae68:	687a      	ldr	r2, [r7, #4]
 801ae6a:	683b      	ldr	r3, [r7, #0]
 801ae6c:	781b      	ldrb	r3, [r3, #0]
 801ae6e:	009b      	lsls	r3, r3, #2
 801ae70:	18d3      	adds	r3, r2, r3
 801ae72:	881b      	ldrh	r3, [r3, #0]
 801ae74:	b29a      	uxth	r2, r3
 801ae76:	2014      	movs	r0, #20
 801ae78:	183b      	adds	r3, r7, r0
 801ae7a:	491c      	ldr	r1, [pc, #112]	@ (801aeec <USB_EPClearStall+0x14c>)
 801ae7c:	400a      	ands	r2, r1
 801ae7e:	801a      	strh	r2, [r3, #0]
 801ae80:	687a      	ldr	r2, [r7, #4]
 801ae82:	683b      	ldr	r3, [r7, #0]
 801ae84:	781b      	ldrb	r3, [r3, #0]
 801ae86:	009b      	lsls	r3, r3, #2
 801ae88:	18d3      	adds	r3, r2, r3
 801ae8a:	183a      	adds	r2, r7, r0
 801ae8c:	8812      	ldrh	r2, [r2, #0]
 801ae8e:	491b      	ldr	r1, [pc, #108]	@ (801aefc <USB_EPClearStall+0x15c>)
 801ae90:	430a      	orrs	r2, r1
 801ae92:	b292      	uxth	r2, r2
 801ae94:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ae96:	687a      	ldr	r2, [r7, #4]
 801ae98:	683b      	ldr	r3, [r7, #0]
 801ae9a:	781b      	ldrb	r3, [r3, #0]
 801ae9c:	009b      	lsls	r3, r3, #2
 801ae9e:	18d3      	adds	r3, r2, r3
 801aea0:	881b      	ldrh	r3, [r3, #0]
 801aea2:	b29a      	uxth	r2, r3
 801aea4:	2012      	movs	r0, #18
 801aea6:	183b      	adds	r3, r7, r0
 801aea8:	4915      	ldr	r1, [pc, #84]	@ (801af00 <USB_EPClearStall+0x160>)
 801aeaa:	400a      	ands	r2, r1
 801aeac:	801a      	strh	r2, [r3, #0]
 801aeae:	183b      	adds	r3, r7, r0
 801aeb0:	183a      	adds	r2, r7, r0
 801aeb2:	8812      	ldrh	r2, [r2, #0]
 801aeb4:	2180      	movs	r1, #128	@ 0x80
 801aeb6:	0149      	lsls	r1, r1, #5
 801aeb8:	404a      	eors	r2, r1
 801aeba:	801a      	strh	r2, [r3, #0]
 801aebc:	183b      	adds	r3, r7, r0
 801aebe:	183a      	adds	r2, r7, r0
 801aec0:	8812      	ldrh	r2, [r2, #0]
 801aec2:	2180      	movs	r1, #128	@ 0x80
 801aec4:	0189      	lsls	r1, r1, #6
 801aec6:	404a      	eors	r2, r1
 801aec8:	801a      	strh	r2, [r3, #0]
 801aeca:	687a      	ldr	r2, [r7, #4]
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	009b      	lsls	r3, r3, #2
 801aed2:	18d3      	adds	r3, r2, r3
 801aed4:	183a      	adds	r2, r7, r0
 801aed6:	8812      	ldrh	r2, [r2, #0]
 801aed8:	4907      	ldr	r1, [pc, #28]	@ (801aef8 <USB_EPClearStall+0x158>)
 801aeda:	430a      	orrs	r2, r1
 801aedc:	b292      	uxth	r2, r2
 801aede:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801aee0:	2300      	movs	r3, #0
}
 801aee2:	0018      	movs	r0, r3
 801aee4:	46bd      	mov	sp, r7
 801aee6:	b006      	add	sp, #24
 801aee8:	bd80      	pop	{r7, pc}
 801aeea:	46c0      	nop			@ (mov r8, r8)
 801aeec:	ffff8f8f 	.word	0xffff8f8f
 801aef0:	ffff80c0 	.word	0xffff80c0
 801aef4:	ffff8fbf 	.word	0xffff8fbf
 801aef8:	ffff8080 	.word	0xffff8080
 801aefc:	ffffc080 	.word	0xffffc080
 801af00:	ffffbf8f 	.word	0xffffbf8f

0801af04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b082      	sub	sp, #8
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
 801af0c:	000a      	movs	r2, r1
 801af0e:	1cfb      	adds	r3, r7, #3
 801af10:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801af12:	1cfb      	adds	r3, r7, #3
 801af14:	781b      	ldrb	r3, [r3, #0]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d103      	bne.n	801af22 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	224c      	movs	r2, #76	@ 0x4c
 801af1e:	2180      	movs	r1, #128	@ 0x80
 801af20:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801af22:	2300      	movs	r3, #0
}
 801af24:	0018      	movs	r0, r3
 801af26:	46bd      	mov	sp, r7
 801af28:	b002      	add	sp, #8
 801af2a:	bd80      	pop	{r7, pc}

0801af2c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b082      	sub	sp, #8
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2258      	movs	r2, #88	@ 0x58
 801af38:	5a9b      	ldrh	r3, [r3, r2]
 801af3a:	b29b      	uxth	r3, r3
 801af3c:	4a05      	ldr	r2, [pc, #20]	@ (801af54 <USB_DevConnect+0x28>)
 801af3e:	4313      	orrs	r3, r2
 801af40:	b299      	uxth	r1, r3
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	2258      	movs	r2, #88	@ 0x58
 801af46:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801af48:	2300      	movs	r3, #0
}
 801af4a:	0018      	movs	r0, r3
 801af4c:	46bd      	mov	sp, r7
 801af4e:	b002      	add	sp, #8
 801af50:	bd80      	pop	{r7, pc}
 801af52:	46c0      	nop			@ (mov r8, r8)
 801af54:	ffff8000 	.word	0xffff8000

0801af58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b084      	sub	sp, #16
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	2244      	movs	r2, #68	@ 0x44
 801af64:	5a9b      	ldrh	r3, [r3, r2]
 801af66:	b29b      	uxth	r3, r3
 801af68:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801af6a:	68fb      	ldr	r3, [r7, #12]
}
 801af6c:	0018      	movs	r0, r3
 801af6e:	46bd      	mov	sp, r7
 801af70:	b004      	add	sp, #16
 801af72:	bd80      	pop	{r7, pc}

0801af74 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b08a      	sub	sp, #40	@ 0x28
 801af78:	af00      	add	r7, sp, #0
 801af7a:	60f8      	str	r0, [r7, #12]
 801af7c:	60b9      	str	r1, [r7, #8]
 801af7e:	0019      	movs	r1, r3
 801af80:	1dbb      	adds	r3, r7, #6
 801af82:	801a      	strh	r2, [r3, #0]
 801af84:	1d3b      	adds	r3, r7, #4
 801af86:	1c0a      	adds	r2, r1, #0
 801af88:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801af8a:	1d3b      	adds	r3, r7, #4
 801af8c:	881b      	ldrh	r3, [r3, #0]
 801af8e:	3301      	adds	r3, #1
 801af90:	085b      	lsrs	r3, r3, #1
 801af92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801af98:	68bb      	ldr	r3, [r7, #8]
 801af9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801af9c:	1dbb      	adds	r3, r7, #6
 801af9e:	881a      	ldrh	r2, [r3, #0]
 801afa0:	697b      	ldr	r3, [r7, #20]
 801afa2:	18d3      	adds	r3, r2, r3
 801afa4:	2280      	movs	r2, #128	@ 0x80
 801afa6:	00d2      	lsls	r2, r2, #3
 801afa8:	4694      	mov	ip, r2
 801afaa:	4463      	add	r3, ip
 801afac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801afae:	69bb      	ldr	r3, [r7, #24]
 801afb0:	627b      	str	r3, [r7, #36]	@ 0x24
 801afb2:	e020      	b.n	801aff6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801afb4:	69fb      	ldr	r3, [r7, #28]
 801afb6:	781a      	ldrb	r2, [r3, #0]
 801afb8:	2112      	movs	r1, #18
 801afba:	187b      	adds	r3, r7, r1
 801afbc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801afbe:	69fb      	ldr	r3, [r7, #28]
 801afc0:	3301      	adds	r3, #1
 801afc2:	781b      	ldrb	r3, [r3, #0]
 801afc4:	021b      	lsls	r3, r3, #8
 801afc6:	b21a      	sxth	r2, r3
 801afc8:	187b      	adds	r3, r7, r1
 801afca:	2000      	movs	r0, #0
 801afcc:	5e1b      	ldrsh	r3, [r3, r0]
 801afce:	4313      	orrs	r3, r2
 801afd0:	b21a      	sxth	r2, r3
 801afd2:	187b      	adds	r3, r7, r1
 801afd4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801afd6:	6a3b      	ldr	r3, [r7, #32]
 801afd8:	187a      	adds	r2, r7, r1
 801afda:	8812      	ldrh	r2, [r2, #0]
 801afdc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801afde:	6a3b      	ldr	r3, [r7, #32]
 801afe0:	3302      	adds	r3, #2
 801afe2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	3301      	adds	r3, #1
 801afe8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801afea:	69fb      	ldr	r3, [r7, #28]
 801afec:	3301      	adds	r3, #1
 801afee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aff2:	3b01      	subs	r3, #1
 801aff4:	627b      	str	r3, [r7, #36]	@ 0x24
 801aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d1db      	bne.n	801afb4 <USB_WritePMA+0x40>
  }
}
 801affc:	46c0      	nop			@ (mov r8, r8)
 801affe:	46c0      	nop			@ (mov r8, r8)
 801b000:	46bd      	mov	sp, r7
 801b002:	b00a      	add	sp, #40	@ 0x28
 801b004:	bd80      	pop	{r7, pc}

0801b006 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b006:	b580      	push	{r7, lr}
 801b008:	b08a      	sub	sp, #40	@ 0x28
 801b00a:	af00      	add	r7, sp, #0
 801b00c:	60f8      	str	r0, [r7, #12]
 801b00e:	60b9      	str	r1, [r7, #8]
 801b010:	0019      	movs	r1, r3
 801b012:	1dbb      	adds	r3, r7, #6
 801b014:	801a      	strh	r2, [r3, #0]
 801b016:	1d3b      	adds	r3, r7, #4
 801b018:	1c0a      	adds	r2, r1, #0
 801b01a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b01c:	1d3b      	adds	r3, r7, #4
 801b01e:	881b      	ldrh	r3, [r3, #0]
 801b020:	085b      	lsrs	r3, r3, #1
 801b022:	b29b      	uxth	r3, r3
 801b024:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b02a:	68bb      	ldr	r3, [r7, #8]
 801b02c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b02e:	1dbb      	adds	r3, r7, #6
 801b030:	881a      	ldrh	r2, [r3, #0]
 801b032:	697b      	ldr	r3, [r7, #20]
 801b034:	18d3      	adds	r3, r2, r3
 801b036:	2280      	movs	r2, #128	@ 0x80
 801b038:	00d2      	lsls	r2, r2, #3
 801b03a:	4694      	mov	ip, r2
 801b03c:	4463      	add	r3, ip
 801b03e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b040:	69bb      	ldr	r3, [r7, #24]
 801b042:	627b      	str	r3, [r7, #36]	@ 0x24
 801b044:	e018      	b.n	801b078 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b046:	6a3b      	ldr	r3, [r7, #32]
 801b048:	881b      	ldrh	r3, [r3, #0]
 801b04a:	b29b      	uxth	r3, r3
 801b04c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b04e:	6a3b      	ldr	r3, [r7, #32]
 801b050:	3302      	adds	r3, #2
 801b052:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b054:	693b      	ldr	r3, [r7, #16]
 801b056:	b2da      	uxtb	r2, r3
 801b058:	69fb      	ldr	r3, [r7, #28]
 801b05a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b05c:	69fb      	ldr	r3, [r7, #28]
 801b05e:	3301      	adds	r3, #1
 801b060:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b062:	693b      	ldr	r3, [r7, #16]
 801b064:	0a1b      	lsrs	r3, r3, #8
 801b066:	b2da      	uxtb	r2, r3
 801b068:	69fb      	ldr	r3, [r7, #28]
 801b06a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b06c:	69fb      	ldr	r3, [r7, #28]
 801b06e:	3301      	adds	r3, #1
 801b070:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b074:	3b01      	subs	r3, #1
 801b076:	627b      	str	r3, [r7, #36]	@ 0x24
 801b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d1e3      	bne.n	801b046 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b07e:	1d3b      	adds	r3, r7, #4
 801b080:	881b      	ldrh	r3, [r3, #0]
 801b082:	2201      	movs	r2, #1
 801b084:	4013      	ands	r3, r2
 801b086:	b29b      	uxth	r3, r3
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d007      	beq.n	801b09c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b08c:	6a3b      	ldr	r3, [r7, #32]
 801b08e:	881b      	ldrh	r3, [r3, #0]
 801b090:	b29b      	uxth	r3, r3
 801b092:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b094:	693b      	ldr	r3, [r7, #16]
 801b096:	b2da      	uxtb	r2, r3
 801b098:	69fb      	ldr	r3, [r7, #28]
 801b09a:	701a      	strb	r2, [r3, #0]
  }
}
 801b09c:	46c0      	nop			@ (mov r8, r8)
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	b00a      	add	sp, #40	@ 0x28
 801b0a2:	bd80      	pop	{r7, pc}

0801b0a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b084      	sub	sp, #16
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	6078      	str	r0, [r7, #4]
 801b0ac:	000a      	movs	r2, r1
 801b0ae:	1cfb      	adds	r3, r7, #3
 801b0b0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b0b2:	230f      	movs	r3, #15
 801b0b4:	18fb      	adds	r3, r7, r3
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	7c1b      	ldrb	r3, [r3, #16]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d116      	bne.n	801b0f0 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b0c2:	2380      	movs	r3, #128	@ 0x80
 801b0c4:	009b      	lsls	r3, r3, #2
 801b0c6:	6878      	ldr	r0, [r7, #4]
 801b0c8:	2202      	movs	r2, #2
 801b0ca:	2181      	movs	r1, #129	@ 0x81
 801b0cc:	f002 f8eb 	bl	801d2a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2201      	movs	r2, #1
 801b0d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b0d6:	2380      	movs	r3, #128	@ 0x80
 801b0d8:	009b      	lsls	r3, r3, #2
 801b0da:	6878      	ldr	r0, [r7, #4]
 801b0dc:	2202      	movs	r2, #2
 801b0de:	2101      	movs	r1, #1
 801b0e0:	f002 f8e1 	bl	801d2a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b0e4:	687a      	ldr	r2, [r7, #4]
 801b0e6:	23b6      	movs	r3, #182	@ 0xb6
 801b0e8:	005b      	lsls	r3, r3, #1
 801b0ea:	2101      	movs	r1, #1
 801b0ec:	50d1      	str	r1, [r2, r3]
 801b0ee:	e013      	b.n	801b118 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b0f0:	6878      	ldr	r0, [r7, #4]
 801b0f2:	2340      	movs	r3, #64	@ 0x40
 801b0f4:	2202      	movs	r2, #2
 801b0f6:	2181      	movs	r1, #129	@ 0x81
 801b0f8:	f002 f8d5 	bl	801d2a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	2201      	movs	r2, #1
 801b100:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b102:	6878      	ldr	r0, [r7, #4]
 801b104:	2340      	movs	r3, #64	@ 0x40
 801b106:	2202      	movs	r2, #2
 801b108:	2101      	movs	r1, #1
 801b10a:	f002 f8cc 	bl	801d2a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b10e:	687a      	ldr	r2, [r7, #4]
 801b110:	23b6      	movs	r3, #182	@ 0xb6
 801b112:	005b      	lsls	r3, r3, #1
 801b114:	2101      	movs	r1, #1
 801b116:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b118:	6878      	ldr	r0, [r7, #4]
 801b11a:	2308      	movs	r3, #8
 801b11c:	2203      	movs	r2, #3
 801b11e:	2182      	movs	r1, #130	@ 0x82
 801b120:	f002 f8c1 	bl	801d2a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	2201      	movs	r2, #1
 801b128:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b12a:	2387      	movs	r3, #135	@ 0x87
 801b12c:	009b      	lsls	r3, r3, #2
 801b12e:	0018      	movs	r0, r3
 801b130:	f002 fa52 	bl	801d5d8 <USBD_static_malloc>
 801b134:	0001      	movs	r1, r0
 801b136:	687a      	ldr	r2, [r7, #4]
 801b138:	23ae      	movs	r3, #174	@ 0xae
 801b13a:	009b      	lsls	r3, r3, #2
 801b13c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b13e:	687a      	ldr	r2, [r7, #4]
 801b140:	23ae      	movs	r3, #174	@ 0xae
 801b142:	009b      	lsls	r3, r3, #2
 801b144:	58d3      	ldr	r3, [r2, r3]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d104      	bne.n	801b154 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b14a:	230f      	movs	r3, #15
 801b14c:	18fb      	adds	r3, r7, r3
 801b14e:	2201      	movs	r2, #1
 801b150:	701a      	strb	r2, [r3, #0]
 801b152:	e02c      	b.n	801b1ae <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b154:	687a      	ldr	r2, [r7, #4]
 801b156:	23ae      	movs	r3, #174	@ 0xae
 801b158:	009b      	lsls	r3, r3, #2
 801b15a:	58d3      	ldr	r3, [r2, r3]
 801b15c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b15e:	687a      	ldr	r2, [r7, #4]
 801b160:	23af      	movs	r3, #175	@ 0xaf
 801b162:	009b      	lsls	r3, r3, #2
 801b164:	58d3      	ldr	r3, [r2, r3]
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b16a:	68ba      	ldr	r2, [r7, #8]
 801b16c:	2385      	movs	r3, #133	@ 0x85
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	2100      	movs	r1, #0
 801b172:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b174:	68ba      	ldr	r2, [r7, #8]
 801b176:	2386      	movs	r3, #134	@ 0x86
 801b178:	009b      	lsls	r3, r3, #2
 801b17a:	2100      	movs	r1, #0
 801b17c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	7c1b      	ldrb	r3, [r3, #16]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d10a      	bne.n	801b19c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b186:	68ba      	ldr	r2, [r7, #8]
 801b188:	2381      	movs	r3, #129	@ 0x81
 801b18a:	009b      	lsls	r3, r3, #2
 801b18c:	58d2      	ldr	r2, [r2, r3]
 801b18e:	2380      	movs	r3, #128	@ 0x80
 801b190:	009b      	lsls	r3, r3, #2
 801b192:	6878      	ldr	r0, [r7, #4]
 801b194:	2101      	movs	r1, #1
 801b196:	f002 f9d1 	bl	801d53c <USBD_LL_PrepareReceive>
 801b19a:	e008      	b.n	801b1ae <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b19c:	68ba      	ldr	r2, [r7, #8]
 801b19e:	2381      	movs	r3, #129	@ 0x81
 801b1a0:	009b      	lsls	r3, r3, #2
 801b1a2:	58d2      	ldr	r2, [r2, r3]
 801b1a4:	6878      	ldr	r0, [r7, #4]
 801b1a6:	2340      	movs	r3, #64	@ 0x40
 801b1a8:	2101      	movs	r1, #1
 801b1aa:	f002 f9c7 	bl	801d53c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b1ae:	230f      	movs	r3, #15
 801b1b0:	18fb      	adds	r3, r7, r3
 801b1b2:	781b      	ldrb	r3, [r3, #0]
}
 801b1b4:	0018      	movs	r0, r3
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	b004      	add	sp, #16
 801b1ba:	bd80      	pop	{r7, pc}

0801b1bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b1bc:	b580      	push	{r7, lr}
 801b1be:	b084      	sub	sp, #16
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	6078      	str	r0, [r7, #4]
 801b1c4:	000a      	movs	r2, r1
 801b1c6:	1cfb      	adds	r3, r7, #3
 801b1c8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b1ca:	230f      	movs	r3, #15
 801b1cc:	18fb      	adds	r3, r7, r3
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	2181      	movs	r1, #129	@ 0x81
 801b1d6:	0018      	movs	r0, r3
 801b1d8:	f002 f89c 	bl	801d314 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	2200      	movs	r2, #0
 801b1e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	2101      	movs	r1, #1
 801b1e6:	0018      	movs	r0, r3
 801b1e8:	f002 f894 	bl	801d314 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b1ec:	687a      	ldr	r2, [r7, #4]
 801b1ee:	23b6      	movs	r3, #182	@ 0xb6
 801b1f0:	005b      	lsls	r3, r3, #1
 801b1f2:	2100      	movs	r1, #0
 801b1f4:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	2182      	movs	r1, #130	@ 0x82
 801b1fa:	0018      	movs	r0, r3
 801b1fc:	f002 f88a 	bl	801d314 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	2200      	movs	r2, #0
 801b204:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b206:	687a      	ldr	r2, [r7, #4]
 801b208:	23ae      	movs	r3, #174	@ 0xae
 801b20a:	009b      	lsls	r3, r3, #2
 801b20c:	58d3      	ldr	r3, [r2, r3]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d011      	beq.n	801b236 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b212:	687a      	ldr	r2, [r7, #4]
 801b214:	23af      	movs	r3, #175	@ 0xaf
 801b216:	009b      	lsls	r3, r3, #2
 801b218:	58d3      	ldr	r3, [r2, r3]
 801b21a:	685b      	ldr	r3, [r3, #4]
 801b21c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b21e:	687a      	ldr	r2, [r7, #4]
 801b220:	23ae      	movs	r3, #174	@ 0xae
 801b222:	009b      	lsls	r3, r3, #2
 801b224:	58d3      	ldr	r3, [r2, r3]
 801b226:	0018      	movs	r0, r3
 801b228:	f002 f9e2 	bl	801d5f0 <USBD_static_free>
    pdev->pClassData = NULL;
 801b22c:	687a      	ldr	r2, [r7, #4]
 801b22e:	23ae      	movs	r3, #174	@ 0xae
 801b230:	009b      	lsls	r3, r3, #2
 801b232:	2100      	movs	r1, #0
 801b234:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b236:	230f      	movs	r3, #15
 801b238:	18fb      	adds	r3, r7, r3
 801b23a:	781b      	ldrb	r3, [r3, #0]
}
 801b23c:	0018      	movs	r0, r3
 801b23e:	46bd      	mov	sp, r7
 801b240:	b004      	add	sp, #16
 801b242:	bd80      	pop	{r7, pc}

0801b244 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b244:	b580      	push	{r7, lr}
 801b246:	b086      	sub	sp, #24
 801b248:	af00      	add	r7, sp, #0
 801b24a:	6078      	str	r0, [r7, #4]
 801b24c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b24e:	687a      	ldr	r2, [r7, #4]
 801b250:	23ae      	movs	r3, #174	@ 0xae
 801b252:	009b      	lsls	r3, r3, #2
 801b254:	58d3      	ldr	r3, [r2, r3]
 801b256:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b258:	230f      	movs	r3, #15
 801b25a:	18fb      	adds	r3, r7, r3
 801b25c:	2200      	movs	r2, #0
 801b25e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b260:	230c      	movs	r3, #12
 801b262:	18fb      	adds	r3, r7, r3
 801b264:	2200      	movs	r2, #0
 801b266:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b268:	2317      	movs	r3, #23
 801b26a:	18fb      	adds	r3, r7, r3
 801b26c:	2200      	movs	r2, #0
 801b26e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b270:	683b      	ldr	r3, [r7, #0]
 801b272:	781b      	ldrb	r3, [r3, #0]
 801b274:	001a      	movs	r2, r3
 801b276:	2360      	movs	r3, #96	@ 0x60
 801b278:	4013      	ands	r3, r2
 801b27a:	d03d      	beq.n	801b2f8 <USBD_CDC_Setup+0xb4>
 801b27c:	2b20      	cmp	r3, #32
 801b27e:	d000      	beq.n	801b282 <USBD_CDC_Setup+0x3e>
 801b280:	e094      	b.n	801b3ac <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b282:	683b      	ldr	r3, [r7, #0]
 801b284:	88db      	ldrh	r3, [r3, #6]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d02b      	beq.n	801b2e2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b28a:	683b      	ldr	r3, [r7, #0]
 801b28c:	781b      	ldrb	r3, [r3, #0]
 801b28e:	b25b      	sxtb	r3, r3
 801b290:	2b00      	cmp	r3, #0
 801b292:	da12      	bge.n	801b2ba <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b294:	687a      	ldr	r2, [r7, #4]
 801b296:	23af      	movs	r3, #175	@ 0xaf
 801b298:	009b      	lsls	r3, r3, #2
 801b29a:	58d3      	ldr	r3, [r2, r3]
 801b29c:	689b      	ldr	r3, [r3, #8]
 801b29e:	683a      	ldr	r2, [r7, #0]
 801b2a0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b2a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b2a4:	683a      	ldr	r2, [r7, #0]
 801b2a6:	88d2      	ldrh	r2, [r2, #6]
 801b2a8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b2aa:	6939      	ldr	r1, [r7, #16]
 801b2ac:	683b      	ldr	r3, [r7, #0]
 801b2ae:	88da      	ldrh	r2, [r3, #6]
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	0018      	movs	r0, r3
 801b2b4:	f001 fbaf 	bl	801ca16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b2b8:	e083      	b.n	801b3c2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b2ba:	683b      	ldr	r3, [r7, #0]
 801b2bc:	7859      	ldrb	r1, [r3, #1]
 801b2be:	693a      	ldr	r2, [r7, #16]
 801b2c0:	2380      	movs	r3, #128	@ 0x80
 801b2c2:	009b      	lsls	r3, r3, #2
 801b2c4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b2c6:	683b      	ldr	r3, [r7, #0]
 801b2c8:	88db      	ldrh	r3, [r3, #6]
 801b2ca:	b2d9      	uxtb	r1, r3
 801b2cc:	693b      	ldr	r3, [r7, #16]
 801b2ce:	4a40      	ldr	r2, [pc, #256]	@ (801b3d0 <USBD_CDC_Setup+0x18c>)
 801b2d0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b2d2:	6939      	ldr	r1, [r7, #16]
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	88da      	ldrh	r2, [r3, #6]
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	0018      	movs	r0, r3
 801b2dc:	f001 fbce 	bl	801ca7c <USBD_CtlPrepareRx>
      break;
 801b2e0:	e06f      	b.n	801b3c2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b2e2:	687a      	ldr	r2, [r7, #4]
 801b2e4:	23af      	movs	r3, #175	@ 0xaf
 801b2e6:	009b      	lsls	r3, r3, #2
 801b2e8:	58d3      	ldr	r3, [r2, r3]
 801b2ea:	689b      	ldr	r3, [r3, #8]
 801b2ec:	683a      	ldr	r2, [r7, #0]
 801b2ee:	7850      	ldrb	r0, [r2, #1]
 801b2f0:	6839      	ldr	r1, [r7, #0]
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	4798      	blx	r3
      break;
 801b2f6:	e064      	b.n	801b3c2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	785b      	ldrb	r3, [r3, #1]
 801b2fc:	2b0b      	cmp	r3, #11
 801b2fe:	d037      	beq.n	801b370 <USBD_CDC_Setup+0x12c>
 801b300:	dc47      	bgt.n	801b392 <USBD_CDC_Setup+0x14e>
 801b302:	2b00      	cmp	r3, #0
 801b304:	d002      	beq.n	801b30c <USBD_CDC_Setup+0xc8>
 801b306:	2b0a      	cmp	r3, #10
 801b308:	d019      	beq.n	801b33e <USBD_CDC_Setup+0xfa>
 801b30a:	e042      	b.n	801b392 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b30c:	687a      	ldr	r2, [r7, #4]
 801b30e:	23a7      	movs	r3, #167	@ 0xa7
 801b310:	009b      	lsls	r3, r3, #2
 801b312:	5cd3      	ldrb	r3, [r2, r3]
 801b314:	2b03      	cmp	r3, #3
 801b316:	d107      	bne.n	801b328 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b318:	230c      	movs	r3, #12
 801b31a:	18f9      	adds	r1, r7, r3
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	2202      	movs	r2, #2
 801b320:	0018      	movs	r0, r3
 801b322:	f001 fb78 	bl	801ca16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b326:	e040      	b.n	801b3aa <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b328:	683a      	ldr	r2, [r7, #0]
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	0011      	movs	r1, r2
 801b32e:	0018      	movs	r0, r3
 801b330:	f001 faf3 	bl	801c91a <USBD_CtlError>
            ret = USBD_FAIL;
 801b334:	2317      	movs	r3, #23
 801b336:	18fb      	adds	r3, r7, r3
 801b338:	2202      	movs	r2, #2
 801b33a:	701a      	strb	r2, [r3, #0]
          break;
 801b33c:	e035      	b.n	801b3aa <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b33e:	687a      	ldr	r2, [r7, #4]
 801b340:	23a7      	movs	r3, #167	@ 0xa7
 801b342:	009b      	lsls	r3, r3, #2
 801b344:	5cd3      	ldrb	r3, [r2, r3]
 801b346:	2b03      	cmp	r3, #3
 801b348:	d107      	bne.n	801b35a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b34a:	230f      	movs	r3, #15
 801b34c:	18f9      	adds	r1, r7, r3
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	2201      	movs	r2, #1
 801b352:	0018      	movs	r0, r3
 801b354:	f001 fb5f 	bl	801ca16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b358:	e027      	b.n	801b3aa <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b35a:	683a      	ldr	r2, [r7, #0]
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	0011      	movs	r1, r2
 801b360:	0018      	movs	r0, r3
 801b362:	f001 fada 	bl	801c91a <USBD_CtlError>
            ret = USBD_FAIL;
 801b366:	2317      	movs	r3, #23
 801b368:	18fb      	adds	r3, r7, r3
 801b36a:	2202      	movs	r2, #2
 801b36c:	701a      	strb	r2, [r3, #0]
          break;
 801b36e:	e01c      	b.n	801b3aa <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b370:	687a      	ldr	r2, [r7, #4]
 801b372:	23a7      	movs	r3, #167	@ 0xa7
 801b374:	009b      	lsls	r3, r3, #2
 801b376:	5cd3      	ldrb	r3, [r2, r3]
 801b378:	2b03      	cmp	r3, #3
 801b37a:	d015      	beq.n	801b3a8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b37c:	683a      	ldr	r2, [r7, #0]
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	0011      	movs	r1, r2
 801b382:	0018      	movs	r0, r3
 801b384:	f001 fac9 	bl	801c91a <USBD_CtlError>
            ret = USBD_FAIL;
 801b388:	2317      	movs	r3, #23
 801b38a:	18fb      	adds	r3, r7, r3
 801b38c:	2202      	movs	r2, #2
 801b38e:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b390:	e00a      	b.n	801b3a8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b392:	683a      	ldr	r2, [r7, #0]
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	0011      	movs	r1, r2
 801b398:	0018      	movs	r0, r3
 801b39a:	f001 fabe 	bl	801c91a <USBD_CtlError>
          ret = USBD_FAIL;
 801b39e:	2317      	movs	r3, #23
 801b3a0:	18fb      	adds	r3, r7, r3
 801b3a2:	2202      	movs	r2, #2
 801b3a4:	701a      	strb	r2, [r3, #0]
          break;
 801b3a6:	e000      	b.n	801b3aa <USBD_CDC_Setup+0x166>
          break;
 801b3a8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b3aa:	e00a      	b.n	801b3c2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b3ac:	683a      	ldr	r2, [r7, #0]
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	0011      	movs	r1, r2
 801b3b2:	0018      	movs	r0, r3
 801b3b4:	f001 fab1 	bl	801c91a <USBD_CtlError>
      ret = USBD_FAIL;
 801b3b8:	2317      	movs	r3, #23
 801b3ba:	18fb      	adds	r3, r7, r3
 801b3bc:	2202      	movs	r2, #2
 801b3be:	701a      	strb	r2, [r3, #0]
      break;
 801b3c0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b3c2:	2317      	movs	r3, #23
 801b3c4:	18fb      	adds	r3, r7, r3
 801b3c6:	781b      	ldrb	r3, [r3, #0]
}
 801b3c8:	0018      	movs	r0, r3
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	b006      	add	sp, #24
 801b3ce:	bd80      	pop	{r7, pc}
 801b3d0:	00000201 	.word	0x00000201

0801b3d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b084      	sub	sp, #16
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
 801b3dc:	000a      	movs	r2, r1
 801b3de:	1cfb      	adds	r3, r7, #3
 801b3e0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b3e2:	687a      	ldr	r2, [r7, #4]
 801b3e4:	23ae      	movs	r3, #174	@ 0xae
 801b3e6:	009b      	lsls	r3, r3, #2
 801b3e8:	58d3      	ldr	r3, [r2, r3]
 801b3ea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b3ec:	687a      	ldr	r2, [r7, #4]
 801b3ee:	23b0      	movs	r3, #176	@ 0xb0
 801b3f0:	009b      	lsls	r3, r3, #2
 801b3f2:	58d3      	ldr	r3, [r2, r3]
 801b3f4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b3f6:	687a      	ldr	r2, [r7, #4]
 801b3f8:	23ae      	movs	r3, #174	@ 0xae
 801b3fa:	009b      	lsls	r3, r3, #2
 801b3fc:	58d3      	ldr	r3, [r2, r3]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d03e      	beq.n	801b480 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b402:	1cfb      	adds	r3, r7, #3
 801b404:	781a      	ldrb	r2, [r3, #0]
 801b406:	6879      	ldr	r1, [r7, #4]
 801b408:	0013      	movs	r3, r2
 801b40a:	009b      	lsls	r3, r3, #2
 801b40c:	189b      	adds	r3, r3, r2
 801b40e:	009b      	lsls	r3, r3, #2
 801b410:	18cb      	adds	r3, r1, r3
 801b412:	331c      	adds	r3, #28
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d02b      	beq.n	801b472 <USBD_CDC_DataIn+0x9e>
 801b41a:	1cfb      	adds	r3, r7, #3
 801b41c:	781a      	ldrb	r2, [r3, #0]
 801b41e:	6879      	ldr	r1, [r7, #4]
 801b420:	0013      	movs	r3, r2
 801b422:	009b      	lsls	r3, r3, #2
 801b424:	189b      	adds	r3, r3, r2
 801b426:	009b      	lsls	r3, r3, #2
 801b428:	18cb      	adds	r3, r1, r3
 801b42a:	331c      	adds	r3, #28
 801b42c:	6818      	ldr	r0, [r3, #0]
 801b42e:	1cfb      	adds	r3, r7, #3
 801b430:	781a      	ldrb	r2, [r3, #0]
 801b432:	68b9      	ldr	r1, [r7, #8]
 801b434:	0013      	movs	r3, r2
 801b436:	009b      	lsls	r3, r3, #2
 801b438:	189b      	adds	r3, r3, r2
 801b43a:	00db      	lsls	r3, r3, #3
 801b43c:	18cb      	adds	r3, r1, r3
 801b43e:	3338      	adds	r3, #56	@ 0x38
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	0019      	movs	r1, r3
 801b444:	f7e4 ff34 	bl	80002b0 <__aeabi_uidivmod>
 801b448:	1e0b      	subs	r3, r1, #0
 801b44a:	d112      	bne.n	801b472 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b44c:	1cfb      	adds	r3, r7, #3
 801b44e:	781a      	ldrb	r2, [r3, #0]
 801b450:	6879      	ldr	r1, [r7, #4]
 801b452:	0013      	movs	r3, r2
 801b454:	009b      	lsls	r3, r3, #2
 801b456:	189b      	adds	r3, r3, r2
 801b458:	009b      	lsls	r3, r3, #2
 801b45a:	18cb      	adds	r3, r1, r3
 801b45c:	331c      	adds	r3, #28
 801b45e:	2200      	movs	r2, #0
 801b460:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b462:	1cfb      	adds	r3, r7, #3
 801b464:	7819      	ldrb	r1, [r3, #0]
 801b466:	6878      	ldr	r0, [r7, #4]
 801b468:	2300      	movs	r3, #0
 801b46a:	2200      	movs	r2, #0
 801b46c:	f002 f82f 	bl	801d4ce <USBD_LL_Transmit>
 801b470:	e004      	b.n	801b47c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b472:	68fa      	ldr	r2, [r7, #12]
 801b474:	2385      	movs	r3, #133	@ 0x85
 801b476:	009b      	lsls	r3, r3, #2
 801b478:	2100      	movs	r1, #0
 801b47a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b47c:	2300      	movs	r3, #0
 801b47e:	e000      	b.n	801b482 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b480:	2302      	movs	r3, #2
  }
}
 801b482:	0018      	movs	r0, r3
 801b484:	46bd      	mov	sp, r7
 801b486:	b004      	add	sp, #16
 801b488:	bd80      	pop	{r7, pc}

0801b48a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b48a:	b580      	push	{r7, lr}
 801b48c:	b084      	sub	sp, #16
 801b48e:	af00      	add	r7, sp, #0
 801b490:	6078      	str	r0, [r7, #4]
 801b492:	000a      	movs	r2, r1
 801b494:	1cfb      	adds	r3, r7, #3
 801b496:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b498:	687a      	ldr	r2, [r7, #4]
 801b49a:	23ae      	movs	r3, #174	@ 0xae
 801b49c:	009b      	lsls	r3, r3, #2
 801b49e:	58d3      	ldr	r3, [r2, r3]
 801b4a0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b4a2:	1cfb      	adds	r3, r7, #3
 801b4a4:	781a      	ldrb	r2, [r3, #0]
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	0011      	movs	r1, r2
 801b4aa:	0018      	movs	r0, r3
 801b4ac:	f002 f87d 	bl	801d5aa <USBD_LL_GetRxDataSize>
 801b4b0:	0001      	movs	r1, r0
 801b4b2:	68fa      	ldr	r2, [r7, #12]
 801b4b4:	2383      	movs	r3, #131	@ 0x83
 801b4b6:	009b      	lsls	r3, r3, #2
 801b4b8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b4ba:	687a      	ldr	r2, [r7, #4]
 801b4bc:	23ae      	movs	r3, #174	@ 0xae
 801b4be:	009b      	lsls	r3, r3, #2
 801b4c0:	58d3      	ldr	r3, [r2, r3]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d011      	beq.n	801b4ea <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b4c6:	687a      	ldr	r2, [r7, #4]
 801b4c8:	23af      	movs	r3, #175	@ 0xaf
 801b4ca:	009b      	lsls	r3, r3, #2
 801b4cc:	58d3      	ldr	r3, [r2, r3]
 801b4ce:	68da      	ldr	r2, [r3, #12]
 801b4d0:	68f9      	ldr	r1, [r7, #12]
 801b4d2:	2381      	movs	r3, #129	@ 0x81
 801b4d4:	009b      	lsls	r3, r3, #2
 801b4d6:	58c8      	ldr	r0, [r1, r3]
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	2183      	movs	r1, #131	@ 0x83
 801b4dc:	0089      	lsls	r1, r1, #2
 801b4de:	468c      	mov	ip, r1
 801b4e0:	4463      	add	r3, ip
 801b4e2:	0019      	movs	r1, r3
 801b4e4:	4790      	blx	r2

    return USBD_OK;
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	e000      	b.n	801b4ec <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b4ea:	2302      	movs	r3, #2
  }
}
 801b4ec:	0018      	movs	r0, r3
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	b004      	add	sp, #16
 801b4f2:	bd80      	pop	{r7, pc}

0801b4f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b4f4:	b590      	push	{r4, r7, lr}
 801b4f6:	b085      	sub	sp, #20
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b4fc:	687a      	ldr	r2, [r7, #4]
 801b4fe:	23ae      	movs	r3, #174	@ 0xae
 801b500:	009b      	lsls	r3, r3, #2
 801b502:	58d3      	ldr	r3, [r2, r3]
 801b504:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b506:	687a      	ldr	r2, [r7, #4]
 801b508:	23af      	movs	r3, #175	@ 0xaf
 801b50a:	009b      	lsls	r3, r3, #2
 801b50c:	58d3      	ldr	r3, [r2, r3]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d018      	beq.n	801b544 <USBD_CDC_EP0_RxReady+0x50>
 801b512:	68fa      	ldr	r2, [r7, #12]
 801b514:	2380      	movs	r3, #128	@ 0x80
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	5cd3      	ldrb	r3, [r2, r3]
 801b51a:	2bff      	cmp	r3, #255	@ 0xff
 801b51c:	d012      	beq.n	801b544 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b51e:	687a      	ldr	r2, [r7, #4]
 801b520:	23af      	movs	r3, #175	@ 0xaf
 801b522:	009b      	lsls	r3, r3, #2
 801b524:	58d3      	ldr	r3, [r2, r3]
 801b526:	689b      	ldr	r3, [r3, #8]
 801b528:	68f9      	ldr	r1, [r7, #12]
 801b52a:	2280      	movs	r2, #128	@ 0x80
 801b52c:	0092      	lsls	r2, r2, #2
 801b52e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b530:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b532:	68fa      	ldr	r2, [r7, #12]
 801b534:	4c06      	ldr	r4, [pc, #24]	@ (801b550 <USBD_CDC_EP0_RxReady+0x5c>)
 801b536:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b538:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b53a:	68fa      	ldr	r2, [r7, #12]
 801b53c:	2380      	movs	r3, #128	@ 0x80
 801b53e:	009b      	lsls	r3, r3, #2
 801b540:	21ff      	movs	r1, #255	@ 0xff
 801b542:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b544:	2300      	movs	r3, #0
}
 801b546:	0018      	movs	r0, r3
 801b548:	46bd      	mov	sp, r7
 801b54a:	b005      	add	sp, #20
 801b54c:	bd90      	pop	{r4, r7, pc}
 801b54e:	46c0      	nop			@ (mov r8, r8)
 801b550:	00000201 	.word	0x00000201

0801b554 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b082      	sub	sp, #8
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	2243      	movs	r2, #67	@ 0x43
 801b560:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b562:	4b02      	ldr	r3, [pc, #8]	@ (801b56c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b564:	0018      	movs	r0, r3
 801b566:	46bd      	mov	sp, r7
 801b568:	b002      	add	sp, #8
 801b56a:	bd80      	pop	{r7, pc}
 801b56c:	20000168 	.word	0x20000168

0801b570 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b082      	sub	sp, #8
 801b574:	af00      	add	r7, sp, #0
 801b576:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	2243      	movs	r2, #67	@ 0x43
 801b57c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b57e:	4b02      	ldr	r3, [pc, #8]	@ (801b588 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b580:	0018      	movs	r0, r3
 801b582:	46bd      	mov	sp, r7
 801b584:	b002      	add	sp, #8
 801b586:	bd80      	pop	{r7, pc}
 801b588:	20000124 	.word	0x20000124

0801b58c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	b082      	sub	sp, #8
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	2243      	movs	r2, #67	@ 0x43
 801b598:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b59a:	4b02      	ldr	r3, [pc, #8]	@ (801b5a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b59c:	0018      	movs	r0, r3
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	b002      	add	sp, #8
 801b5a2:	bd80      	pop	{r7, pc}
 801b5a4:	200001ac 	.word	0x200001ac

0801b5a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b5a8:	b580      	push	{r7, lr}
 801b5aa:	b082      	sub	sp, #8
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	220a      	movs	r2, #10
 801b5b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b5b6:	4b02      	ldr	r3, [pc, #8]	@ (801b5c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b5b8:	0018      	movs	r0, r3
 801b5ba:	46bd      	mov	sp, r7
 801b5bc:	b002      	add	sp, #8
 801b5be:	bd80      	pop	{r7, pc}
 801b5c0:	200000e0 	.word	0x200000e0

0801b5c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b5c4:	b580      	push	{r7, lr}
 801b5c6:	b084      	sub	sp, #16
 801b5c8:	af00      	add	r7, sp, #0
 801b5ca:	6078      	str	r0, [r7, #4]
 801b5cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b5ce:	200f      	movs	r0, #15
 801b5d0:	183b      	adds	r3, r7, r0
 801b5d2:	2202      	movs	r2, #2
 801b5d4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b5d6:	683b      	ldr	r3, [r7, #0]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d007      	beq.n	801b5ec <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b5dc:	687a      	ldr	r2, [r7, #4]
 801b5de:	23af      	movs	r3, #175	@ 0xaf
 801b5e0:	009b      	lsls	r3, r3, #2
 801b5e2:	6839      	ldr	r1, [r7, #0]
 801b5e4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b5e6:	183b      	adds	r3, r7, r0
 801b5e8:	2200      	movs	r2, #0
 801b5ea:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b5ec:	230f      	movs	r3, #15
 801b5ee:	18fb      	adds	r3, r7, r3
 801b5f0:	781b      	ldrb	r3, [r3, #0]
}
 801b5f2:	0018      	movs	r0, r3
 801b5f4:	46bd      	mov	sp, r7
 801b5f6:	b004      	add	sp, #16
 801b5f8:	bd80      	pop	{r7, pc}

0801b5fa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b5fa:	b580      	push	{r7, lr}
 801b5fc:	b086      	sub	sp, #24
 801b5fe:	af00      	add	r7, sp, #0
 801b600:	60f8      	str	r0, [r7, #12]
 801b602:	60b9      	str	r1, [r7, #8]
 801b604:	1dbb      	adds	r3, r7, #6
 801b606:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b608:	68fa      	ldr	r2, [r7, #12]
 801b60a:	23ae      	movs	r3, #174	@ 0xae
 801b60c:	009b      	lsls	r3, r3, #2
 801b60e:	58d3      	ldr	r3, [r2, r3]
 801b610:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b612:	697a      	ldr	r2, [r7, #20]
 801b614:	2382      	movs	r3, #130	@ 0x82
 801b616:	009b      	lsls	r3, r3, #2
 801b618:	68b9      	ldr	r1, [r7, #8]
 801b61a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b61c:	1dbb      	adds	r3, r7, #6
 801b61e:	8819      	ldrh	r1, [r3, #0]
 801b620:	697a      	ldr	r2, [r7, #20]
 801b622:	2384      	movs	r3, #132	@ 0x84
 801b624:	009b      	lsls	r3, r3, #2
 801b626:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b628:	2300      	movs	r3, #0
}
 801b62a:	0018      	movs	r0, r3
 801b62c:	46bd      	mov	sp, r7
 801b62e:	b006      	add	sp, #24
 801b630:	bd80      	pop	{r7, pc}

0801b632 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b632:	b580      	push	{r7, lr}
 801b634:	b084      	sub	sp, #16
 801b636:	af00      	add	r7, sp, #0
 801b638:	6078      	str	r0, [r7, #4]
 801b63a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b63c:	687a      	ldr	r2, [r7, #4]
 801b63e:	23ae      	movs	r3, #174	@ 0xae
 801b640:	009b      	lsls	r3, r3, #2
 801b642:	58d3      	ldr	r3, [r2, r3]
 801b644:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b646:	68fa      	ldr	r2, [r7, #12]
 801b648:	2381      	movs	r3, #129	@ 0x81
 801b64a:	009b      	lsls	r3, r3, #2
 801b64c:	6839      	ldr	r1, [r7, #0]
 801b64e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b650:	2300      	movs	r3, #0
}
 801b652:	0018      	movs	r0, r3
 801b654:	46bd      	mov	sp, r7
 801b656:	b004      	add	sp, #16
 801b658:	bd80      	pop	{r7, pc}

0801b65a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b65a:	b580      	push	{r7, lr}
 801b65c:	b084      	sub	sp, #16
 801b65e:	af00      	add	r7, sp, #0
 801b660:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b662:	687a      	ldr	r2, [r7, #4]
 801b664:	23ae      	movs	r3, #174	@ 0xae
 801b666:	009b      	lsls	r3, r3, #2
 801b668:	58d3      	ldr	r3, [r2, r3]
 801b66a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b66c:	687a      	ldr	r2, [r7, #4]
 801b66e:	23ae      	movs	r3, #174	@ 0xae
 801b670:	009b      	lsls	r3, r3, #2
 801b672:	58d3      	ldr	r3, [r2, r3]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d022      	beq.n	801b6be <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b678:	68fa      	ldr	r2, [r7, #12]
 801b67a:	2385      	movs	r3, #133	@ 0x85
 801b67c:	009b      	lsls	r3, r3, #2
 801b67e:	58d3      	ldr	r3, [r2, r3]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d11a      	bne.n	801b6ba <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b684:	68fa      	ldr	r2, [r7, #12]
 801b686:	2385      	movs	r3, #133	@ 0x85
 801b688:	009b      	lsls	r3, r3, #2
 801b68a:	2101      	movs	r1, #1
 801b68c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b68e:	68fa      	ldr	r2, [r7, #12]
 801b690:	2384      	movs	r3, #132	@ 0x84
 801b692:	009b      	lsls	r3, r3, #2
 801b694:	58d2      	ldr	r2, [r2, r3]
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b69a:	68fa      	ldr	r2, [r7, #12]
 801b69c:	2382      	movs	r3, #130	@ 0x82
 801b69e:	009b      	lsls	r3, r3, #2
 801b6a0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b6a2:	68fa      	ldr	r2, [r7, #12]
 801b6a4:	2384      	movs	r3, #132	@ 0x84
 801b6a6:	009b      	lsls	r3, r3, #2
 801b6a8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b6aa:	b29b      	uxth	r3, r3
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	000a      	movs	r2, r1
 801b6b0:	2181      	movs	r1, #129	@ 0x81
 801b6b2:	f001 ff0c 	bl	801d4ce <USBD_LL_Transmit>

      return USBD_OK;
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	e002      	b.n	801b6c0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b6ba:	2301      	movs	r3, #1
 801b6bc:	e000      	b.n	801b6c0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b6be:	2302      	movs	r3, #2
  }
}
 801b6c0:	0018      	movs	r0, r3
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	b004      	add	sp, #16
 801b6c6:	bd80      	pop	{r7, pc}

0801b6c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b084      	sub	sp, #16
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b6d0:	687a      	ldr	r2, [r7, #4]
 801b6d2:	23ae      	movs	r3, #174	@ 0xae
 801b6d4:	009b      	lsls	r3, r3, #2
 801b6d6:	58d3      	ldr	r3, [r2, r3]
 801b6d8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b6da:	687a      	ldr	r2, [r7, #4]
 801b6dc:	23ae      	movs	r3, #174	@ 0xae
 801b6de:	009b      	lsls	r3, r3, #2
 801b6e0:	58d3      	ldr	r3, [r2, r3]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d019      	beq.n	801b71a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	7c1b      	ldrb	r3, [r3, #16]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d10a      	bne.n	801b704 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b6ee:	68fa      	ldr	r2, [r7, #12]
 801b6f0:	2381      	movs	r3, #129	@ 0x81
 801b6f2:	009b      	lsls	r3, r3, #2
 801b6f4:	58d2      	ldr	r2, [r2, r3]
 801b6f6:	2380      	movs	r3, #128	@ 0x80
 801b6f8:	009b      	lsls	r3, r3, #2
 801b6fa:	6878      	ldr	r0, [r7, #4]
 801b6fc:	2101      	movs	r1, #1
 801b6fe:	f001 ff1d 	bl	801d53c <USBD_LL_PrepareReceive>
 801b702:	e008      	b.n	801b716 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b704:	68fa      	ldr	r2, [r7, #12]
 801b706:	2381      	movs	r3, #129	@ 0x81
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	58d2      	ldr	r2, [r2, r3]
 801b70c:	6878      	ldr	r0, [r7, #4]
 801b70e:	2340      	movs	r3, #64	@ 0x40
 801b710:	2101      	movs	r1, #1
 801b712:	f001 ff13 	bl	801d53c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b716:	2300      	movs	r3, #0
 801b718:	e000      	b.n	801b71c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b71a:	2302      	movs	r3, #2
  }
}
 801b71c:	0018      	movs	r0, r3
 801b71e:	46bd      	mov	sp, r7
 801b720:	b004      	add	sp, #16
 801b722:	bd80      	pop	{r7, pc}

0801b724 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b724:	b580      	push	{r7, lr}
 801b726:	b084      	sub	sp, #16
 801b728:	af00      	add	r7, sp, #0
 801b72a:	60f8      	str	r0, [r7, #12]
 801b72c:	60b9      	str	r1, [r7, #8]
 801b72e:	1dfb      	adds	r3, r7, #7
 801b730:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d101      	bne.n	801b73c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b738:	2302      	movs	r3, #2
 801b73a:	e020      	b.n	801b77e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b73c:	68fa      	ldr	r2, [r7, #12]
 801b73e:	23ad      	movs	r3, #173	@ 0xad
 801b740:	009b      	lsls	r3, r3, #2
 801b742:	58d3      	ldr	r3, [r2, r3]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d004      	beq.n	801b752 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b748:	68fa      	ldr	r2, [r7, #12]
 801b74a:	23ad      	movs	r3, #173	@ 0xad
 801b74c:	009b      	lsls	r3, r3, #2
 801b74e:	2100      	movs	r1, #0
 801b750:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b752:	68bb      	ldr	r3, [r7, #8]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d004      	beq.n	801b762 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b758:	68fa      	ldr	r2, [r7, #12]
 801b75a:	23ac      	movs	r3, #172	@ 0xac
 801b75c:	009b      	lsls	r3, r3, #2
 801b75e:	68b9      	ldr	r1, [r7, #8]
 801b760:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b762:	68fa      	ldr	r2, [r7, #12]
 801b764:	23a7      	movs	r3, #167	@ 0xa7
 801b766:	009b      	lsls	r3, r3, #2
 801b768:	2101      	movs	r1, #1
 801b76a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	1dfa      	adds	r2, r7, #7
 801b770:	7812      	ldrb	r2, [r2, #0]
 801b772:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	0018      	movs	r0, r3
 801b778:	f001 fd0c 	bl	801d194 <USBD_LL_Init>

  return USBD_OK;
 801b77c:	2300      	movs	r3, #0
}
 801b77e:	0018      	movs	r0, r3
 801b780:	46bd      	mov	sp, r7
 801b782:	b004      	add	sp, #16
 801b784:	bd80      	pop	{r7, pc}

0801b786 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b786:	b580      	push	{r7, lr}
 801b788:	b084      	sub	sp, #16
 801b78a:	af00      	add	r7, sp, #0
 801b78c:	6078      	str	r0, [r7, #4]
 801b78e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b790:	200f      	movs	r0, #15
 801b792:	183b      	adds	r3, r7, r0
 801b794:	2200      	movs	r2, #0
 801b796:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d008      	beq.n	801b7b0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b79e:	687a      	ldr	r2, [r7, #4]
 801b7a0:	23ad      	movs	r3, #173	@ 0xad
 801b7a2:	009b      	lsls	r3, r3, #2
 801b7a4:	6839      	ldr	r1, [r7, #0]
 801b7a6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b7a8:	183b      	adds	r3, r7, r0
 801b7aa:	2200      	movs	r2, #0
 801b7ac:	701a      	strb	r2, [r3, #0]
 801b7ae:	e003      	b.n	801b7b8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b7b0:	230f      	movs	r3, #15
 801b7b2:	18fb      	adds	r3, r7, r3
 801b7b4:	2202      	movs	r2, #2
 801b7b6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b7b8:	230f      	movs	r3, #15
 801b7ba:	18fb      	adds	r3, r7, r3
 801b7bc:	781b      	ldrb	r3, [r3, #0]
}
 801b7be:	0018      	movs	r0, r3
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	b004      	add	sp, #16
 801b7c4:	bd80      	pop	{r7, pc}

0801b7c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b7c6:	b580      	push	{r7, lr}
 801b7c8:	b082      	sub	sp, #8
 801b7ca:	af00      	add	r7, sp, #0
 801b7cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	0018      	movs	r0, r3
 801b7d2:	f001 fd43 	bl	801d25c <USBD_LL_Start>

  return USBD_OK;
 801b7d6:	2300      	movs	r3, #0
}
 801b7d8:	0018      	movs	r0, r3
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	b002      	add	sp, #8
 801b7de:	bd80      	pop	{r7, pc}

0801b7e0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	b082      	sub	sp, #8
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b7e8:	2300      	movs	r3, #0
}
 801b7ea:	0018      	movs	r0, r3
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	b002      	add	sp, #8
 801b7f0:	bd80      	pop	{r7, pc}

0801b7f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b7f2:	b590      	push	{r4, r7, lr}
 801b7f4:	b085      	sub	sp, #20
 801b7f6:	af00      	add	r7, sp, #0
 801b7f8:	6078      	str	r0, [r7, #4]
 801b7fa:	000a      	movs	r2, r1
 801b7fc:	1cfb      	adds	r3, r7, #3
 801b7fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801b800:	240f      	movs	r4, #15
 801b802:	193b      	adds	r3, r7, r4
 801b804:	2202      	movs	r2, #2
 801b806:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801b808:	687a      	ldr	r2, [r7, #4]
 801b80a:	23ad      	movs	r3, #173	@ 0xad
 801b80c:	009b      	lsls	r3, r3, #2
 801b80e:	58d3      	ldr	r3, [r2, r3]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d00e      	beq.n	801b832 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801b814:	687a      	ldr	r2, [r7, #4]
 801b816:	23ad      	movs	r3, #173	@ 0xad
 801b818:	009b      	lsls	r3, r3, #2
 801b81a:	58d3      	ldr	r3, [r2, r3]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	1cfa      	adds	r2, r7, #3
 801b820:	7811      	ldrb	r1, [r2, #0]
 801b822:	687a      	ldr	r2, [r7, #4]
 801b824:	0010      	movs	r0, r2
 801b826:	4798      	blx	r3
 801b828:	1e03      	subs	r3, r0, #0
 801b82a:	d102      	bne.n	801b832 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801b82c:	193b      	adds	r3, r7, r4
 801b82e:	2200      	movs	r2, #0
 801b830:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801b832:	230f      	movs	r3, #15
 801b834:	18fb      	adds	r3, r7, r3
 801b836:	781b      	ldrb	r3, [r3, #0]
}
 801b838:	0018      	movs	r0, r3
 801b83a:	46bd      	mov	sp, r7
 801b83c:	b005      	add	sp, #20
 801b83e:	bd90      	pop	{r4, r7, pc}

0801b840 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b840:	b580      	push	{r7, lr}
 801b842:	b082      	sub	sp, #8
 801b844:	af00      	add	r7, sp, #0
 801b846:	6078      	str	r0, [r7, #4]
 801b848:	000a      	movs	r2, r1
 801b84a:	1cfb      	adds	r3, r7, #3
 801b84c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b84e:	687a      	ldr	r2, [r7, #4]
 801b850:	23ad      	movs	r3, #173	@ 0xad
 801b852:	009b      	lsls	r3, r3, #2
 801b854:	58d3      	ldr	r3, [r2, r3]
 801b856:	685b      	ldr	r3, [r3, #4]
 801b858:	1cfa      	adds	r2, r7, #3
 801b85a:	7811      	ldrb	r1, [r2, #0]
 801b85c:	687a      	ldr	r2, [r7, #4]
 801b85e:	0010      	movs	r0, r2
 801b860:	4798      	blx	r3

  return USBD_OK;
 801b862:	2300      	movs	r3, #0
}
 801b864:	0018      	movs	r0, r3
 801b866:	46bd      	mov	sp, r7
 801b868:	b002      	add	sp, #8
 801b86a:	bd80      	pop	{r7, pc}

0801b86c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b86c:	b580      	push	{r7, lr}
 801b86e:	b082      	sub	sp, #8
 801b870:	af00      	add	r7, sp, #0
 801b872:	6078      	str	r0, [r7, #4]
 801b874:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	22aa      	movs	r2, #170	@ 0xaa
 801b87a:	0092      	lsls	r2, r2, #2
 801b87c:	4694      	mov	ip, r2
 801b87e:	4463      	add	r3, ip
 801b880:	683a      	ldr	r2, [r7, #0]
 801b882:	0011      	movs	r1, r2
 801b884:	0018      	movs	r0, r3
 801b886:	f001 f810 	bl	801c8aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b88a:	687a      	ldr	r2, [r7, #4]
 801b88c:	23a5      	movs	r3, #165	@ 0xa5
 801b88e:	009b      	lsls	r3, r3, #2
 801b890:	2101      	movs	r1, #1
 801b892:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	4a23      	ldr	r2, [pc, #140]	@ (801b924 <USBD_LL_SetupStage+0xb8>)
 801b898:	5a9b      	ldrh	r3, [r3, r2]
 801b89a:	0019      	movs	r1, r3
 801b89c:	687a      	ldr	r2, [r7, #4]
 801b89e:	23a6      	movs	r3, #166	@ 0xa6
 801b8a0:	009b      	lsls	r3, r3, #2
 801b8a2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b8a4:	687a      	ldr	r2, [r7, #4]
 801b8a6:	23aa      	movs	r3, #170	@ 0xaa
 801b8a8:	009b      	lsls	r3, r3, #2
 801b8aa:	5cd3      	ldrb	r3, [r2, r3]
 801b8ac:	001a      	movs	r2, r3
 801b8ae:	231f      	movs	r3, #31
 801b8b0:	4013      	ands	r3, r2
 801b8b2:	2b02      	cmp	r3, #2
 801b8b4:	d019      	beq.n	801b8ea <USBD_LL_SetupStage+0x7e>
 801b8b6:	d822      	bhi.n	801b8fe <USBD_LL_SetupStage+0x92>
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d002      	beq.n	801b8c2 <USBD_LL_SetupStage+0x56>
 801b8bc:	2b01      	cmp	r3, #1
 801b8be:	d00a      	beq.n	801b8d6 <USBD_LL_SetupStage+0x6a>
 801b8c0:	e01d      	b.n	801b8fe <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	22aa      	movs	r2, #170	@ 0xaa
 801b8c6:	0092      	lsls	r2, r2, #2
 801b8c8:	189a      	adds	r2, r3, r2
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	0011      	movs	r1, r2
 801b8ce:	0018      	movs	r0, r3
 801b8d0:	f000 fa10 	bl	801bcf4 <USBD_StdDevReq>
      break;
 801b8d4:	e020      	b.n	801b918 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	22aa      	movs	r2, #170	@ 0xaa
 801b8da:	0092      	lsls	r2, r2, #2
 801b8dc:	189a      	adds	r2, r3, r2
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	0011      	movs	r1, r2
 801b8e2:	0018      	movs	r0, r3
 801b8e4:	f000 fa78 	bl	801bdd8 <USBD_StdItfReq>
      break;
 801b8e8:	e016      	b.n	801b918 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	22aa      	movs	r2, #170	@ 0xaa
 801b8ee:	0092      	lsls	r2, r2, #2
 801b8f0:	189a      	adds	r2, r3, r2
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	0011      	movs	r1, r2
 801b8f6:	0018      	movs	r0, r3
 801b8f8:	f000 fac5 	bl	801be86 <USBD_StdEPReq>
      break;
 801b8fc:	e00c      	b.n	801b918 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b8fe:	687a      	ldr	r2, [r7, #4]
 801b900:	23aa      	movs	r3, #170	@ 0xaa
 801b902:	009b      	lsls	r3, r3, #2
 801b904:	5cd3      	ldrb	r3, [r2, r3]
 801b906:	227f      	movs	r2, #127	@ 0x7f
 801b908:	4393      	bics	r3, r2
 801b90a:	b2da      	uxtb	r2, r3
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	0011      	movs	r1, r2
 801b910:	0018      	movs	r0, r3
 801b912:	f001 fd2a 	bl	801d36a <USBD_LL_StallEP>
      break;
 801b916:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b918:	2300      	movs	r3, #0
}
 801b91a:	0018      	movs	r0, r3
 801b91c:	46bd      	mov	sp, r7
 801b91e:	b002      	add	sp, #8
 801b920:	bd80      	pop	{r7, pc}
 801b922:	46c0      	nop			@ (mov r8, r8)
 801b924:	000002ae 	.word	0x000002ae

0801b928 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b086      	sub	sp, #24
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	60f8      	str	r0, [r7, #12]
 801b930:	607a      	str	r2, [r7, #4]
 801b932:	200b      	movs	r0, #11
 801b934:	183b      	adds	r3, r7, r0
 801b936:	1c0a      	adds	r2, r1, #0
 801b938:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b93a:	183b      	adds	r3, r7, r0
 801b93c:	781b      	ldrb	r3, [r3, #0]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d154      	bne.n	801b9ec <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	3355      	adds	r3, #85	@ 0x55
 801b946:	33ff      	adds	r3, #255	@ 0xff
 801b948:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b94a:	68fa      	ldr	r2, [r7, #12]
 801b94c:	23a5      	movs	r3, #165	@ 0xa5
 801b94e:	009b      	lsls	r3, r3, #2
 801b950:	58d3      	ldr	r3, [r2, r3]
 801b952:	2b03      	cmp	r3, #3
 801b954:	d139      	bne.n	801b9ca <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801b956:	697b      	ldr	r3, [r7, #20]
 801b958:	68da      	ldr	r2, [r3, #12]
 801b95a:	697b      	ldr	r3, [r7, #20]
 801b95c:	691b      	ldr	r3, [r3, #16]
 801b95e:	429a      	cmp	r2, r3
 801b960:	d919      	bls.n	801b996 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801b962:	697b      	ldr	r3, [r7, #20]
 801b964:	68da      	ldr	r2, [r3, #12]
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	691b      	ldr	r3, [r3, #16]
 801b96a:	1ad2      	subs	r2, r2, r3
 801b96c:	697b      	ldr	r3, [r7, #20]
 801b96e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b970:	697b      	ldr	r3, [r7, #20]
 801b972:	68da      	ldr	r2, [r3, #12]
 801b974:	697b      	ldr	r3, [r7, #20]
 801b976:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b978:	429a      	cmp	r2, r3
 801b97a:	d203      	bcs.n	801b984 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b97c:	697b      	ldr	r3, [r7, #20]
 801b97e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801b980:	b29b      	uxth	r3, r3
 801b982:	e002      	b.n	801b98a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b984:	697b      	ldr	r3, [r7, #20]
 801b986:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b988:	b29b      	uxth	r3, r3
 801b98a:	6879      	ldr	r1, [r7, #4]
 801b98c:	68f8      	ldr	r0, [r7, #12]
 801b98e:	001a      	movs	r2, r3
 801b990:	f001 f898 	bl	801cac4 <USBD_CtlContinueRx>
 801b994:	e045      	b.n	801ba22 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b996:	68fa      	ldr	r2, [r7, #12]
 801b998:	23ad      	movs	r3, #173	@ 0xad
 801b99a:	009b      	lsls	r3, r3, #2
 801b99c:	58d3      	ldr	r3, [r2, r3]
 801b99e:	691b      	ldr	r3, [r3, #16]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d00d      	beq.n	801b9c0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b9a4:	68fa      	ldr	r2, [r7, #12]
 801b9a6:	23a7      	movs	r3, #167	@ 0xa7
 801b9a8:	009b      	lsls	r3, r3, #2
 801b9aa:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b9ac:	2b03      	cmp	r3, #3
 801b9ae:	d107      	bne.n	801b9c0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b9b0:	68fa      	ldr	r2, [r7, #12]
 801b9b2:	23ad      	movs	r3, #173	@ 0xad
 801b9b4:	009b      	lsls	r3, r3, #2
 801b9b6:	58d3      	ldr	r3, [r2, r3]
 801b9b8:	691b      	ldr	r3, [r3, #16]
 801b9ba:	68fa      	ldr	r2, [r7, #12]
 801b9bc:	0010      	movs	r0, r2
 801b9be:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	0018      	movs	r0, r3
 801b9c4:	f001 f891 	bl	801caea <USBD_CtlSendStatus>
 801b9c8:	e02b      	b.n	801ba22 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b9ca:	68fa      	ldr	r2, [r7, #12]
 801b9cc:	23a5      	movs	r3, #165	@ 0xa5
 801b9ce:	009b      	lsls	r3, r3, #2
 801b9d0:	58d3      	ldr	r3, [r2, r3]
 801b9d2:	2b05      	cmp	r3, #5
 801b9d4:	d125      	bne.n	801ba22 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801b9d6:	68fa      	ldr	r2, [r7, #12]
 801b9d8:	23a5      	movs	r3, #165	@ 0xa5
 801b9da:	009b      	lsls	r3, r3, #2
 801b9dc:	2100      	movs	r1, #0
 801b9de:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	2100      	movs	r1, #0
 801b9e4:	0018      	movs	r0, r3
 801b9e6:	f001 fcc0 	bl	801d36a <USBD_LL_StallEP>
 801b9ea:	e01a      	b.n	801ba22 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801b9ec:	68fa      	ldr	r2, [r7, #12]
 801b9ee:	23ad      	movs	r3, #173	@ 0xad
 801b9f0:	009b      	lsls	r3, r3, #2
 801b9f2:	58d3      	ldr	r3, [r2, r3]
 801b9f4:	699b      	ldr	r3, [r3, #24]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d011      	beq.n	801ba1e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b9fa:	68fa      	ldr	r2, [r7, #12]
 801b9fc:	23a7      	movs	r3, #167	@ 0xa7
 801b9fe:	009b      	lsls	r3, r3, #2
 801ba00:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801ba02:	2b03      	cmp	r3, #3
 801ba04:	d10b      	bne.n	801ba1e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801ba06:	68fa      	ldr	r2, [r7, #12]
 801ba08:	23ad      	movs	r3, #173	@ 0xad
 801ba0a:	009b      	lsls	r3, r3, #2
 801ba0c:	58d3      	ldr	r3, [r2, r3]
 801ba0e:	699b      	ldr	r3, [r3, #24]
 801ba10:	220b      	movs	r2, #11
 801ba12:	18ba      	adds	r2, r7, r2
 801ba14:	7811      	ldrb	r1, [r2, #0]
 801ba16:	68fa      	ldr	r2, [r7, #12]
 801ba18:	0010      	movs	r0, r2
 801ba1a:	4798      	blx	r3
 801ba1c:	e001      	b.n	801ba22 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ba1e:	2302      	movs	r3, #2
 801ba20:	e000      	b.n	801ba24 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801ba22:	2300      	movs	r3, #0
}
 801ba24:	0018      	movs	r0, r3
 801ba26:	46bd      	mov	sp, r7
 801ba28:	b006      	add	sp, #24
 801ba2a:	bd80      	pop	{r7, pc}

0801ba2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b086      	sub	sp, #24
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	607a      	str	r2, [r7, #4]
 801ba36:	200b      	movs	r0, #11
 801ba38:	183b      	adds	r3, r7, r0
 801ba3a:	1c0a      	adds	r2, r1, #0
 801ba3c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ba3e:	183b      	adds	r3, r7, r0
 801ba40:	781b      	ldrb	r3, [r3, #0]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d000      	beq.n	801ba48 <USBD_LL_DataInStage+0x1c>
 801ba46:	e08e      	b.n	801bb66 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	3314      	adds	r3, #20
 801ba4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801ba4e:	68fa      	ldr	r2, [r7, #12]
 801ba50:	23a5      	movs	r3, #165	@ 0xa5
 801ba52:	009b      	lsls	r3, r3, #2
 801ba54:	58d3      	ldr	r3, [r2, r3]
 801ba56:	2b02      	cmp	r3, #2
 801ba58:	d164      	bne.n	801bb24 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801ba5a:	697b      	ldr	r3, [r7, #20]
 801ba5c:	68da      	ldr	r2, [r3, #12]
 801ba5e:	697b      	ldr	r3, [r7, #20]
 801ba60:	691b      	ldr	r3, [r3, #16]
 801ba62:	429a      	cmp	r2, r3
 801ba64:	d915      	bls.n	801ba92 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801ba66:	697b      	ldr	r3, [r7, #20]
 801ba68:	68da      	ldr	r2, [r3, #12]
 801ba6a:	697b      	ldr	r3, [r7, #20]
 801ba6c:	691b      	ldr	r3, [r3, #16]
 801ba6e:	1ad2      	subs	r2, r2, r3
 801ba70:	697b      	ldr	r3, [r7, #20]
 801ba72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801ba74:	697b      	ldr	r3, [r7, #20]
 801ba76:	68db      	ldr	r3, [r3, #12]
 801ba78:	b29a      	uxth	r2, r3
 801ba7a:	6879      	ldr	r1, [r7, #4]
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	0018      	movs	r0, r3
 801ba80:	f000 ffe9 	bl	801ca56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ba84:	68f8      	ldr	r0, [r7, #12]
 801ba86:	2300      	movs	r3, #0
 801ba88:	2200      	movs	r2, #0
 801ba8a:	2100      	movs	r1, #0
 801ba8c:	f001 fd56 	bl	801d53c <USBD_LL_PrepareReceive>
 801ba90:	e059      	b.n	801bb46 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801ba92:	697b      	ldr	r3, [r7, #20]
 801ba94:	689a      	ldr	r2, [r3, #8]
 801ba96:	697b      	ldr	r3, [r7, #20]
 801ba98:	691b      	ldr	r3, [r3, #16]
 801ba9a:	0019      	movs	r1, r3
 801ba9c:	0010      	movs	r0, r2
 801ba9e:	f7e4 fc07 	bl	80002b0 <__aeabi_uidivmod>
 801baa2:	1e0b      	subs	r3, r1, #0
 801baa4:	d11f      	bne.n	801bae6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801baa6:	697b      	ldr	r3, [r7, #20]
 801baa8:	689a      	ldr	r2, [r3, #8]
 801baaa:	697b      	ldr	r3, [r7, #20]
 801baac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801baae:	429a      	cmp	r2, r3
 801bab0:	d319      	bcc.n	801bae6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bab2:	697b      	ldr	r3, [r7, #20]
 801bab4:	689a      	ldr	r2, [r3, #8]
 801bab6:	68f9      	ldr	r1, [r7, #12]
 801bab8:	23a6      	movs	r3, #166	@ 0xa6
 801baba:	009b      	lsls	r3, r3, #2
 801babc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801babe:	429a      	cmp	r2, r3
 801bac0:	d211      	bcs.n	801bae6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	2200      	movs	r2, #0
 801bac6:	2100      	movs	r1, #0
 801bac8:	0018      	movs	r0, r3
 801baca:	f000 ffc4 	bl	801ca56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bace:	68fa      	ldr	r2, [r7, #12]
 801bad0:	23a6      	movs	r3, #166	@ 0xa6
 801bad2:	009b      	lsls	r3, r3, #2
 801bad4:	2100      	movs	r1, #0
 801bad6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bad8:	68f8      	ldr	r0, [r7, #12]
 801bada:	2300      	movs	r3, #0
 801badc:	2200      	movs	r2, #0
 801bade:	2100      	movs	r1, #0
 801bae0:	f001 fd2c 	bl	801d53c <USBD_LL_PrepareReceive>
 801bae4:	e02f      	b.n	801bb46 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bae6:	68fa      	ldr	r2, [r7, #12]
 801bae8:	23ad      	movs	r3, #173	@ 0xad
 801baea:	009b      	lsls	r3, r3, #2
 801baec:	58d3      	ldr	r3, [r2, r3]
 801baee:	68db      	ldr	r3, [r3, #12]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d00d      	beq.n	801bb10 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801baf4:	68fa      	ldr	r2, [r7, #12]
 801baf6:	23a7      	movs	r3, #167	@ 0xa7
 801baf8:	009b      	lsls	r3, r3, #2
 801bafa:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bafc:	2b03      	cmp	r3, #3
 801bafe:	d107      	bne.n	801bb10 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bb00:	68fa      	ldr	r2, [r7, #12]
 801bb02:	23ad      	movs	r3, #173	@ 0xad
 801bb04:	009b      	lsls	r3, r3, #2
 801bb06:	58d3      	ldr	r3, [r2, r3]
 801bb08:	68db      	ldr	r3, [r3, #12]
 801bb0a:	68fa      	ldr	r2, [r7, #12]
 801bb0c:	0010      	movs	r0, r2
 801bb0e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	2180      	movs	r1, #128	@ 0x80
 801bb14:	0018      	movs	r0, r3
 801bb16:	f001 fc28 	bl	801d36a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	0018      	movs	r0, r3
 801bb1e:	f000 fff8 	bl	801cb12 <USBD_CtlReceiveStatus>
 801bb22:	e010      	b.n	801bb46 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bb24:	68fa      	ldr	r2, [r7, #12]
 801bb26:	23a5      	movs	r3, #165	@ 0xa5
 801bb28:	009b      	lsls	r3, r3, #2
 801bb2a:	58d3      	ldr	r3, [r2, r3]
 801bb2c:	2b04      	cmp	r3, #4
 801bb2e:	d005      	beq.n	801bb3c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bb30:	68fa      	ldr	r2, [r7, #12]
 801bb32:	23a5      	movs	r3, #165	@ 0xa5
 801bb34:	009b      	lsls	r3, r3, #2
 801bb36:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d104      	bne.n	801bb46 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	2180      	movs	r1, #128	@ 0x80
 801bb40:	0018      	movs	r0, r3
 801bb42:	f001 fc12 	bl	801d36a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bb46:	68fa      	ldr	r2, [r7, #12]
 801bb48:	23a8      	movs	r3, #168	@ 0xa8
 801bb4a:	009b      	lsls	r3, r3, #2
 801bb4c:	5cd3      	ldrb	r3, [r2, r3]
 801bb4e:	2b01      	cmp	r3, #1
 801bb50:	d124      	bne.n	801bb9c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	0018      	movs	r0, r3
 801bb56:	f7ff fe43 	bl	801b7e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bb5a:	68fa      	ldr	r2, [r7, #12]
 801bb5c:	23a8      	movs	r3, #168	@ 0xa8
 801bb5e:	009b      	lsls	r3, r3, #2
 801bb60:	2100      	movs	r1, #0
 801bb62:	54d1      	strb	r1, [r2, r3]
 801bb64:	e01a      	b.n	801bb9c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bb66:	68fa      	ldr	r2, [r7, #12]
 801bb68:	23ad      	movs	r3, #173	@ 0xad
 801bb6a:	009b      	lsls	r3, r3, #2
 801bb6c:	58d3      	ldr	r3, [r2, r3]
 801bb6e:	695b      	ldr	r3, [r3, #20]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d011      	beq.n	801bb98 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bb74:	68fa      	ldr	r2, [r7, #12]
 801bb76:	23a7      	movs	r3, #167	@ 0xa7
 801bb78:	009b      	lsls	r3, r3, #2
 801bb7a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bb7c:	2b03      	cmp	r3, #3
 801bb7e:	d10b      	bne.n	801bb98 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bb80:	68fa      	ldr	r2, [r7, #12]
 801bb82:	23ad      	movs	r3, #173	@ 0xad
 801bb84:	009b      	lsls	r3, r3, #2
 801bb86:	58d3      	ldr	r3, [r2, r3]
 801bb88:	695b      	ldr	r3, [r3, #20]
 801bb8a:	220b      	movs	r2, #11
 801bb8c:	18ba      	adds	r2, r7, r2
 801bb8e:	7811      	ldrb	r1, [r2, #0]
 801bb90:	68fa      	ldr	r2, [r7, #12]
 801bb92:	0010      	movs	r0, r2
 801bb94:	4798      	blx	r3
 801bb96:	e001      	b.n	801bb9c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bb98:	2302      	movs	r3, #2
 801bb9a:	e000      	b.n	801bb9e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bb9c:	2300      	movs	r3, #0
}
 801bb9e:	0018      	movs	r0, r3
 801bba0:	46bd      	mov	sp, r7
 801bba2:	b006      	add	sp, #24
 801bba4:	bd80      	pop	{r7, pc}

0801bba6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bba6:	b580      	push	{r7, lr}
 801bba8:	b082      	sub	sp, #8
 801bbaa:	af00      	add	r7, sp, #0
 801bbac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bbae:	6878      	ldr	r0, [r7, #4]
 801bbb0:	2340      	movs	r3, #64	@ 0x40
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	2100      	movs	r1, #0
 801bbb6:	f001 fb76 	bl	801d2a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bbba:	687a      	ldr	r2, [r7, #4]
 801bbbc:	23ac      	movs	r3, #172	@ 0xac
 801bbbe:	005b      	lsls	r3, r3, #1
 801bbc0:	2101      	movs	r1, #1
 801bbc2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bbc4:	687a      	ldr	r2, [r7, #4]
 801bbc6:	23b2      	movs	r3, #178	@ 0xb2
 801bbc8:	005b      	lsls	r3, r3, #1
 801bbca:	2140      	movs	r1, #64	@ 0x40
 801bbcc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bbce:	6878      	ldr	r0, [r7, #4]
 801bbd0:	2340      	movs	r3, #64	@ 0x40
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	2180      	movs	r1, #128	@ 0x80
 801bbd6:	f001 fb66 	bl	801d2a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	2201      	movs	r2, #1
 801bbde:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	2240      	movs	r2, #64	@ 0x40
 801bbe4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bbe6:	687a      	ldr	r2, [r7, #4]
 801bbe8:	23a7      	movs	r3, #167	@ 0xa7
 801bbea:	009b      	lsls	r3, r3, #2
 801bbec:	2101      	movs	r1, #1
 801bbee:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801bbf0:	687a      	ldr	r2, [r7, #4]
 801bbf2:	23a5      	movs	r3, #165	@ 0xa5
 801bbf4:	009b      	lsls	r3, r3, #2
 801bbf6:	2100      	movs	r1, #0
 801bbf8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801bc00:	687a      	ldr	r2, [r7, #4]
 801bc02:	23a9      	movs	r3, #169	@ 0xa9
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	2100      	movs	r1, #0
 801bc08:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801bc0a:	687a      	ldr	r2, [r7, #4]
 801bc0c:	23ae      	movs	r3, #174	@ 0xae
 801bc0e:	009b      	lsls	r3, r3, #2
 801bc10:	58d3      	ldr	r3, [r2, r3]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d00a      	beq.n	801bc2c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801bc16:	687a      	ldr	r2, [r7, #4]
 801bc18:	23ad      	movs	r3, #173	@ 0xad
 801bc1a:	009b      	lsls	r3, r3, #2
 801bc1c:	58d3      	ldr	r3, [r2, r3]
 801bc1e:	685a      	ldr	r2, [r3, #4]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	685b      	ldr	r3, [r3, #4]
 801bc24:	b2d9      	uxtb	r1, r3
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	0018      	movs	r0, r3
 801bc2a:	4790      	blx	r2
  }

  return USBD_OK;
 801bc2c:	2300      	movs	r3, #0
}
 801bc2e:	0018      	movs	r0, r3
 801bc30:	46bd      	mov	sp, r7
 801bc32:	b002      	add	sp, #8
 801bc34:	bd80      	pop	{r7, pc}

0801bc36 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801bc36:	b580      	push	{r7, lr}
 801bc38:	b082      	sub	sp, #8
 801bc3a:	af00      	add	r7, sp, #0
 801bc3c:	6078      	str	r0, [r7, #4]
 801bc3e:	000a      	movs	r2, r1
 801bc40:	1cfb      	adds	r3, r7, #3
 801bc42:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	1cfa      	adds	r2, r7, #3
 801bc48:	7812      	ldrb	r2, [r2, #0]
 801bc4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801bc4c:	2300      	movs	r3, #0
}
 801bc4e:	0018      	movs	r0, r3
 801bc50:	46bd      	mov	sp, r7
 801bc52:	b002      	add	sp, #8
 801bc54:	bd80      	pop	{r7, pc}
	...

0801bc58 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b082      	sub	sp, #8
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801bc60:	687a      	ldr	r2, [r7, #4]
 801bc62:	23a7      	movs	r3, #167	@ 0xa7
 801bc64:	009b      	lsls	r3, r3, #2
 801bc66:	5cd1      	ldrb	r1, [r2, r3]
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	4a06      	ldr	r2, [pc, #24]	@ (801bc84 <USBD_LL_Suspend+0x2c>)
 801bc6c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801bc6e:	687a      	ldr	r2, [r7, #4]
 801bc70:	23a7      	movs	r3, #167	@ 0xa7
 801bc72:	009b      	lsls	r3, r3, #2
 801bc74:	2104      	movs	r1, #4
 801bc76:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bc78:	2300      	movs	r3, #0
}
 801bc7a:	0018      	movs	r0, r3
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	b002      	add	sp, #8
 801bc80:	bd80      	pop	{r7, pc}
 801bc82:	46c0      	nop			@ (mov r8, r8)
 801bc84:	0000029d 	.word	0x0000029d

0801bc88 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801bc88:	b580      	push	{r7, lr}
 801bc8a:	b082      	sub	sp, #8
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bc90:	687a      	ldr	r2, [r7, #4]
 801bc92:	23a7      	movs	r3, #167	@ 0xa7
 801bc94:	009b      	lsls	r3, r3, #2
 801bc96:	5cd3      	ldrb	r3, [r2, r3]
 801bc98:	2b04      	cmp	r3, #4
 801bc9a:	d106      	bne.n	801bcaa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	4a05      	ldr	r2, [pc, #20]	@ (801bcb4 <USBD_LL_Resume+0x2c>)
 801bca0:	5c99      	ldrb	r1, [r3, r2]
 801bca2:	687a      	ldr	r2, [r7, #4]
 801bca4:	23a7      	movs	r3, #167	@ 0xa7
 801bca6:	009b      	lsls	r3, r3, #2
 801bca8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bcaa:	2300      	movs	r3, #0
}
 801bcac:	0018      	movs	r0, r3
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	b002      	add	sp, #8
 801bcb2:	bd80      	pop	{r7, pc}
 801bcb4:	0000029d 	.word	0x0000029d

0801bcb8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b082      	sub	sp, #8
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bcc0:	687a      	ldr	r2, [r7, #4]
 801bcc2:	23a7      	movs	r3, #167	@ 0xa7
 801bcc4:	009b      	lsls	r3, r3, #2
 801bcc6:	5cd3      	ldrb	r3, [r2, r3]
 801bcc8:	2b03      	cmp	r3, #3
 801bcca:	d10e      	bne.n	801bcea <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bccc:	687a      	ldr	r2, [r7, #4]
 801bcce:	23ad      	movs	r3, #173	@ 0xad
 801bcd0:	009b      	lsls	r3, r3, #2
 801bcd2:	58d3      	ldr	r3, [r2, r3]
 801bcd4:	69db      	ldr	r3, [r3, #28]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d007      	beq.n	801bcea <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bcda:	687a      	ldr	r2, [r7, #4]
 801bcdc:	23ad      	movs	r3, #173	@ 0xad
 801bcde:	009b      	lsls	r3, r3, #2
 801bce0:	58d3      	ldr	r3, [r2, r3]
 801bce2:	69db      	ldr	r3, [r3, #28]
 801bce4:	687a      	ldr	r2, [r7, #4]
 801bce6:	0010      	movs	r0, r2
 801bce8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bcea:	2300      	movs	r3, #0
}
 801bcec:	0018      	movs	r0, r3
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	b002      	add	sp, #8
 801bcf2:	bd80      	pop	{r7, pc}

0801bcf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bcf4:	b580      	push	{r7, lr}
 801bcf6:	b084      	sub	sp, #16
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	6078      	str	r0, [r7, #4]
 801bcfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bcfe:	230f      	movs	r3, #15
 801bd00:	18fb      	adds	r3, r7, r3
 801bd02:	2200      	movs	r2, #0
 801bd04:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bd06:	683b      	ldr	r3, [r7, #0]
 801bd08:	781b      	ldrb	r3, [r3, #0]
 801bd0a:	001a      	movs	r2, r3
 801bd0c:	2360      	movs	r3, #96	@ 0x60
 801bd0e:	4013      	ands	r3, r2
 801bd10:	2b40      	cmp	r3, #64	@ 0x40
 801bd12:	d004      	beq.n	801bd1e <USBD_StdDevReq+0x2a>
 801bd14:	d84f      	bhi.n	801bdb6 <USBD_StdDevReq+0xc2>
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d00b      	beq.n	801bd32 <USBD_StdDevReq+0x3e>
 801bd1a:	2b20      	cmp	r3, #32
 801bd1c:	d14b      	bne.n	801bdb6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bd1e:	687a      	ldr	r2, [r7, #4]
 801bd20:	23ad      	movs	r3, #173	@ 0xad
 801bd22:	009b      	lsls	r3, r3, #2
 801bd24:	58d3      	ldr	r3, [r2, r3]
 801bd26:	689b      	ldr	r3, [r3, #8]
 801bd28:	6839      	ldr	r1, [r7, #0]
 801bd2a:	687a      	ldr	r2, [r7, #4]
 801bd2c:	0010      	movs	r0, r2
 801bd2e:	4798      	blx	r3
      break;
 801bd30:	e048      	b.n	801bdc4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bd32:	683b      	ldr	r3, [r7, #0]
 801bd34:	785b      	ldrb	r3, [r3, #1]
 801bd36:	2b09      	cmp	r3, #9
 801bd38:	d835      	bhi.n	801bda6 <USBD_StdDevReq+0xb2>
 801bd3a:	009a      	lsls	r2, r3, #2
 801bd3c:	4b25      	ldr	r3, [pc, #148]	@ (801bdd4 <USBD_StdDevReq+0xe0>)
 801bd3e:	18d3      	adds	r3, r2, r3
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801bd44:	683a      	ldr	r2, [r7, #0]
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	0011      	movs	r1, r2
 801bd4a:	0018      	movs	r0, r3
 801bd4c:	f000 fa52 	bl	801c1f4 <USBD_GetDescriptor>
          break;
 801bd50:	e030      	b.n	801bdb4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801bd52:	683a      	ldr	r2, [r7, #0]
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	0011      	movs	r1, r2
 801bd58:	0018      	movs	r0, r3
 801bd5a:	f000 fbfd 	bl	801c558 <USBD_SetAddress>
          break;
 801bd5e:	e029      	b.n	801bdb4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801bd60:	683a      	ldr	r2, [r7, #0]
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	0011      	movs	r1, r2
 801bd66:	0018      	movs	r0, r3
 801bd68:	f000 fc4a 	bl	801c600 <USBD_SetConfig>
          break;
 801bd6c:	e022      	b.n	801bdb4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801bd6e:	683a      	ldr	r2, [r7, #0]
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	0011      	movs	r1, r2
 801bd74:	0018      	movs	r0, r3
 801bd76:	f000 fce7 	bl	801c748 <USBD_GetConfig>
          break;
 801bd7a:	e01b      	b.n	801bdb4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801bd7c:	683a      	ldr	r2, [r7, #0]
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	0011      	movs	r1, r2
 801bd82:	0018      	movs	r0, r3
 801bd84:	f000 fd1b 	bl	801c7be <USBD_GetStatus>
          break;
 801bd88:	e014      	b.n	801bdb4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801bd8a:	683a      	ldr	r2, [r7, #0]
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	0011      	movs	r1, r2
 801bd90:	0018      	movs	r0, r3
 801bd92:	f000 fd4e 	bl	801c832 <USBD_SetFeature>
          break;
 801bd96:	e00d      	b.n	801bdb4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801bd98:	683a      	ldr	r2, [r7, #0]
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	0011      	movs	r1, r2
 801bd9e:	0018      	movs	r0, r3
 801bda0:	f000 fd5d 	bl	801c85e <USBD_ClrFeature>
          break;
 801bda4:	e006      	b.n	801bdb4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801bda6:	683a      	ldr	r2, [r7, #0]
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	0011      	movs	r1, r2
 801bdac:	0018      	movs	r0, r3
 801bdae:	f000 fdb4 	bl	801c91a <USBD_CtlError>
          break;
 801bdb2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bdb4:	e006      	b.n	801bdc4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801bdb6:	683a      	ldr	r2, [r7, #0]
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	0011      	movs	r1, r2
 801bdbc:	0018      	movs	r0, r3
 801bdbe:	f000 fdac 	bl	801c91a <USBD_CtlError>
      break;
 801bdc2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bdc4:	230f      	movs	r3, #15
 801bdc6:	18fb      	adds	r3, r7, r3
 801bdc8:	781b      	ldrb	r3, [r3, #0]
}
 801bdca:	0018      	movs	r0, r3
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	b004      	add	sp, #16
 801bdd0:	bd80      	pop	{r7, pc}
 801bdd2:	46c0      	nop			@ (mov r8, r8)
 801bdd4:	080255f0 	.word	0x080255f0

0801bdd8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801bdd8:	b5b0      	push	{r4, r5, r7, lr}
 801bdda:	b084      	sub	sp, #16
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
 801bde0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bde2:	230f      	movs	r3, #15
 801bde4:	18fb      	adds	r3, r7, r3
 801bde6:	2200      	movs	r2, #0
 801bde8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bdea:	683b      	ldr	r3, [r7, #0]
 801bdec:	781b      	ldrb	r3, [r3, #0]
 801bdee:	001a      	movs	r2, r3
 801bdf0:	2360      	movs	r3, #96	@ 0x60
 801bdf2:	4013      	ands	r3, r2
 801bdf4:	2b40      	cmp	r3, #64	@ 0x40
 801bdf6:	d004      	beq.n	801be02 <USBD_StdItfReq+0x2a>
 801bdf8:	d839      	bhi.n	801be6e <USBD_StdItfReq+0x96>
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d001      	beq.n	801be02 <USBD_StdItfReq+0x2a>
 801bdfe:	2b20      	cmp	r3, #32
 801be00:	d135      	bne.n	801be6e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	23a7      	movs	r3, #167	@ 0xa7
 801be06:	009b      	lsls	r3, r3, #2
 801be08:	5cd3      	ldrb	r3, [r2, r3]
 801be0a:	3b01      	subs	r3, #1
 801be0c:	2b02      	cmp	r3, #2
 801be0e:	d825      	bhi.n	801be5c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801be10:	683b      	ldr	r3, [r7, #0]
 801be12:	889b      	ldrh	r3, [r3, #4]
 801be14:	b2db      	uxtb	r3, r3
 801be16:	2b01      	cmp	r3, #1
 801be18:	d819      	bhi.n	801be4e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801be1a:	687a      	ldr	r2, [r7, #4]
 801be1c:	23ad      	movs	r3, #173	@ 0xad
 801be1e:	009b      	lsls	r3, r3, #2
 801be20:	58d3      	ldr	r3, [r2, r3]
 801be22:	689b      	ldr	r3, [r3, #8]
 801be24:	250f      	movs	r5, #15
 801be26:	197c      	adds	r4, r7, r5
 801be28:	6839      	ldr	r1, [r7, #0]
 801be2a:	687a      	ldr	r2, [r7, #4]
 801be2c:	0010      	movs	r0, r2
 801be2e:	4798      	blx	r3
 801be30:	0003      	movs	r3, r0
 801be32:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801be34:	683b      	ldr	r3, [r7, #0]
 801be36:	88db      	ldrh	r3, [r3, #6]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d116      	bne.n	801be6a <USBD_StdItfReq+0x92>
 801be3c:	197b      	adds	r3, r7, r5
 801be3e:	781b      	ldrb	r3, [r3, #0]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d112      	bne.n	801be6a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	0018      	movs	r0, r3
 801be48:	f000 fe4f 	bl	801caea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801be4c:	e00d      	b.n	801be6a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801be4e:	683a      	ldr	r2, [r7, #0]
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	0011      	movs	r1, r2
 801be54:	0018      	movs	r0, r3
 801be56:	f000 fd60 	bl	801c91a <USBD_CtlError>
          break;
 801be5a:	e006      	b.n	801be6a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801be5c:	683a      	ldr	r2, [r7, #0]
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	0011      	movs	r1, r2
 801be62:	0018      	movs	r0, r3
 801be64:	f000 fd59 	bl	801c91a <USBD_CtlError>
          break;
 801be68:	e000      	b.n	801be6c <USBD_StdItfReq+0x94>
          break;
 801be6a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801be6c:	e006      	b.n	801be7c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801be6e:	683a      	ldr	r2, [r7, #0]
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	0011      	movs	r1, r2
 801be74:	0018      	movs	r0, r3
 801be76:	f000 fd50 	bl	801c91a <USBD_CtlError>
      break;
 801be7a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801be7c:	2300      	movs	r3, #0
}
 801be7e:	0018      	movs	r0, r3
 801be80:	46bd      	mov	sp, r7
 801be82:	b004      	add	sp, #16
 801be84:	bdb0      	pop	{r4, r5, r7, pc}

0801be86 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801be86:	b5b0      	push	{r4, r5, r7, lr}
 801be88:	b084      	sub	sp, #16
 801be8a:	af00      	add	r7, sp, #0
 801be8c:	6078      	str	r0, [r7, #4]
 801be8e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801be90:	230f      	movs	r3, #15
 801be92:	18fb      	adds	r3, r7, r3
 801be94:	2200      	movs	r2, #0
 801be96:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801be98:	683b      	ldr	r3, [r7, #0]
 801be9a:	889a      	ldrh	r2, [r3, #4]
 801be9c:	230e      	movs	r3, #14
 801be9e:	18fb      	adds	r3, r7, r3
 801bea0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	781b      	ldrb	r3, [r3, #0]
 801bea6:	001a      	movs	r2, r3
 801bea8:	2360      	movs	r3, #96	@ 0x60
 801beaa:	4013      	ands	r3, r2
 801beac:	2b40      	cmp	r3, #64	@ 0x40
 801beae:	d006      	beq.n	801bebe <USBD_StdEPReq+0x38>
 801beb0:	d900      	bls.n	801beb4 <USBD_StdEPReq+0x2e>
 801beb2:	e190      	b.n	801c1d6 <USBD_StdEPReq+0x350>
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d00c      	beq.n	801bed2 <USBD_StdEPReq+0x4c>
 801beb8:	2b20      	cmp	r3, #32
 801beba:	d000      	beq.n	801bebe <USBD_StdEPReq+0x38>
 801bebc:	e18b      	b.n	801c1d6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bebe:	687a      	ldr	r2, [r7, #4]
 801bec0:	23ad      	movs	r3, #173	@ 0xad
 801bec2:	009b      	lsls	r3, r3, #2
 801bec4:	58d3      	ldr	r3, [r2, r3]
 801bec6:	689b      	ldr	r3, [r3, #8]
 801bec8:	6839      	ldr	r1, [r7, #0]
 801beca:	687a      	ldr	r2, [r7, #4]
 801becc:	0010      	movs	r0, r2
 801bece:	4798      	blx	r3
      break;
 801bed0:	e188      	b.n	801c1e4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801bed2:	683b      	ldr	r3, [r7, #0]
 801bed4:	781b      	ldrb	r3, [r3, #0]
 801bed6:	001a      	movs	r2, r3
 801bed8:	2360      	movs	r3, #96	@ 0x60
 801beda:	4013      	ands	r3, r2
 801bedc:	2b20      	cmp	r3, #32
 801bede:	d10f      	bne.n	801bf00 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801bee0:	687a      	ldr	r2, [r7, #4]
 801bee2:	23ad      	movs	r3, #173	@ 0xad
 801bee4:	009b      	lsls	r3, r3, #2
 801bee6:	58d3      	ldr	r3, [r2, r3]
 801bee8:	689b      	ldr	r3, [r3, #8]
 801beea:	250f      	movs	r5, #15
 801beec:	197c      	adds	r4, r7, r5
 801beee:	6839      	ldr	r1, [r7, #0]
 801bef0:	687a      	ldr	r2, [r7, #4]
 801bef2:	0010      	movs	r0, r2
 801bef4:	4798      	blx	r3
 801bef6:	0003      	movs	r3, r0
 801bef8:	7023      	strb	r3, [r4, #0]

        return ret;
 801befa:	197b      	adds	r3, r7, r5
 801befc:	781b      	ldrb	r3, [r3, #0]
 801befe:	e174      	b.n	801c1ea <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801bf00:	683b      	ldr	r3, [r7, #0]
 801bf02:	785b      	ldrb	r3, [r3, #1]
 801bf04:	2b03      	cmp	r3, #3
 801bf06:	d007      	beq.n	801bf18 <USBD_StdEPReq+0x92>
 801bf08:	dd00      	ble.n	801bf0c <USBD_StdEPReq+0x86>
 801bf0a:	e15c      	b.n	801c1c6 <USBD_StdEPReq+0x340>
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d100      	bne.n	801bf12 <USBD_StdEPReq+0x8c>
 801bf10:	e092      	b.n	801c038 <USBD_StdEPReq+0x1b2>
 801bf12:	2b01      	cmp	r3, #1
 801bf14:	d04b      	beq.n	801bfae <USBD_StdEPReq+0x128>
 801bf16:	e156      	b.n	801c1c6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801bf18:	687a      	ldr	r2, [r7, #4]
 801bf1a:	23a7      	movs	r3, #167	@ 0xa7
 801bf1c:	009b      	lsls	r3, r3, #2
 801bf1e:	5cd3      	ldrb	r3, [r2, r3]
 801bf20:	2b02      	cmp	r3, #2
 801bf22:	d002      	beq.n	801bf2a <USBD_StdEPReq+0xa4>
 801bf24:	2b03      	cmp	r3, #3
 801bf26:	d01d      	beq.n	801bf64 <USBD_StdEPReq+0xde>
 801bf28:	e039      	b.n	801bf9e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bf2a:	220e      	movs	r2, #14
 801bf2c:	18bb      	adds	r3, r7, r2
 801bf2e:	781b      	ldrb	r3, [r3, #0]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d010      	beq.n	801bf56 <USBD_StdEPReq+0xd0>
 801bf34:	18bb      	adds	r3, r7, r2
 801bf36:	781b      	ldrb	r3, [r3, #0]
 801bf38:	2b80      	cmp	r3, #128	@ 0x80
 801bf3a:	d00c      	beq.n	801bf56 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801bf3c:	18bb      	adds	r3, r7, r2
 801bf3e:	781a      	ldrb	r2, [r3, #0]
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	0011      	movs	r1, r2
 801bf44:	0018      	movs	r0, r3
 801bf46:	f001 fa10 	bl	801d36a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	2180      	movs	r1, #128	@ 0x80
 801bf4e:	0018      	movs	r0, r3
 801bf50:	f001 fa0b 	bl	801d36a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801bf54:	e02a      	b.n	801bfac <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801bf56:	683a      	ldr	r2, [r7, #0]
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	0011      	movs	r1, r2
 801bf5c:	0018      	movs	r0, r3
 801bf5e:	f000 fcdc 	bl	801c91a <USBD_CtlError>
              break;
 801bf62:	e023      	b.n	801bfac <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801bf64:	683b      	ldr	r3, [r7, #0]
 801bf66:	885b      	ldrh	r3, [r3, #2]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d113      	bne.n	801bf94 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801bf6c:	220e      	movs	r2, #14
 801bf6e:	18bb      	adds	r3, r7, r2
 801bf70:	781b      	ldrb	r3, [r3, #0]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d00e      	beq.n	801bf94 <USBD_StdEPReq+0x10e>
 801bf76:	18bb      	adds	r3, r7, r2
 801bf78:	781b      	ldrb	r3, [r3, #0]
 801bf7a:	2b80      	cmp	r3, #128	@ 0x80
 801bf7c:	d00a      	beq.n	801bf94 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801bf7e:	683b      	ldr	r3, [r7, #0]
 801bf80:	88db      	ldrh	r3, [r3, #6]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d106      	bne.n	801bf94 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801bf86:	18bb      	adds	r3, r7, r2
 801bf88:	781a      	ldrb	r2, [r3, #0]
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	0011      	movs	r1, r2
 801bf8e:	0018      	movs	r0, r3
 801bf90:	f001 f9eb 	bl	801d36a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	0018      	movs	r0, r3
 801bf98:	f000 fda7 	bl	801caea <USBD_CtlSendStatus>

              break;
 801bf9c:	e006      	b.n	801bfac <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801bf9e:	683a      	ldr	r2, [r7, #0]
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	0011      	movs	r1, r2
 801bfa4:	0018      	movs	r0, r3
 801bfa6:	f000 fcb8 	bl	801c91a <USBD_CtlError>
              break;
 801bfaa:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801bfac:	e112      	b.n	801c1d4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801bfae:	687a      	ldr	r2, [r7, #4]
 801bfb0:	23a7      	movs	r3, #167	@ 0xa7
 801bfb2:	009b      	lsls	r3, r3, #2
 801bfb4:	5cd3      	ldrb	r3, [r2, r3]
 801bfb6:	2b02      	cmp	r3, #2
 801bfb8:	d002      	beq.n	801bfc0 <USBD_StdEPReq+0x13a>
 801bfba:	2b03      	cmp	r3, #3
 801bfbc:	d01d      	beq.n	801bffa <USBD_StdEPReq+0x174>
 801bfbe:	e032      	b.n	801c026 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bfc0:	220e      	movs	r2, #14
 801bfc2:	18bb      	adds	r3, r7, r2
 801bfc4:	781b      	ldrb	r3, [r3, #0]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d010      	beq.n	801bfec <USBD_StdEPReq+0x166>
 801bfca:	18bb      	adds	r3, r7, r2
 801bfcc:	781b      	ldrb	r3, [r3, #0]
 801bfce:	2b80      	cmp	r3, #128	@ 0x80
 801bfd0:	d00c      	beq.n	801bfec <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801bfd2:	18bb      	adds	r3, r7, r2
 801bfd4:	781a      	ldrb	r2, [r3, #0]
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	0011      	movs	r1, r2
 801bfda:	0018      	movs	r0, r3
 801bfdc:	f001 f9c5 	bl	801d36a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	2180      	movs	r1, #128	@ 0x80
 801bfe4:	0018      	movs	r0, r3
 801bfe6:	f001 f9c0 	bl	801d36a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801bfea:	e024      	b.n	801c036 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801bfec:	683a      	ldr	r2, [r7, #0]
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	0011      	movs	r1, r2
 801bff2:	0018      	movs	r0, r3
 801bff4:	f000 fc91 	bl	801c91a <USBD_CtlError>
              break;
 801bff8:	e01d      	b.n	801c036 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801bffa:	683b      	ldr	r3, [r7, #0]
 801bffc:	885b      	ldrh	r3, [r3, #2]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d118      	bne.n	801c034 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c002:	210e      	movs	r1, #14
 801c004:	187b      	adds	r3, r7, r1
 801c006:	781b      	ldrb	r3, [r3, #0]
 801c008:	227f      	movs	r2, #127	@ 0x7f
 801c00a:	4013      	ands	r3, r2
 801c00c:	d006      	beq.n	801c01c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c00e:	187b      	adds	r3, r7, r1
 801c010:	781a      	ldrb	r2, [r3, #0]
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	0011      	movs	r1, r2
 801c016:	0018      	movs	r0, r3
 801c018:	f001 f9d2 	bl	801d3c0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	0018      	movs	r0, r3
 801c020:	f000 fd63 	bl	801caea <USBD_CtlSendStatus>
              }
              break;
 801c024:	e006      	b.n	801c034 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c026:	683a      	ldr	r2, [r7, #0]
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	0011      	movs	r1, r2
 801c02c:	0018      	movs	r0, r3
 801c02e:	f000 fc74 	bl	801c91a <USBD_CtlError>
              break;
 801c032:	e000      	b.n	801c036 <USBD_StdEPReq+0x1b0>
              break;
 801c034:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c036:	e0cd      	b.n	801c1d4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c038:	687a      	ldr	r2, [r7, #4]
 801c03a:	23a7      	movs	r3, #167	@ 0xa7
 801c03c:	009b      	lsls	r3, r3, #2
 801c03e:	5cd3      	ldrb	r3, [r2, r3]
 801c040:	2b02      	cmp	r3, #2
 801c042:	d002      	beq.n	801c04a <USBD_StdEPReq+0x1c4>
 801c044:	2b03      	cmp	r3, #3
 801c046:	d03c      	beq.n	801c0c2 <USBD_StdEPReq+0x23c>
 801c048:	e0b5      	b.n	801c1b6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c04a:	220e      	movs	r2, #14
 801c04c:	18bb      	adds	r3, r7, r2
 801c04e:	781b      	ldrb	r3, [r3, #0]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d00a      	beq.n	801c06a <USBD_StdEPReq+0x1e4>
 801c054:	18bb      	adds	r3, r7, r2
 801c056:	781b      	ldrb	r3, [r3, #0]
 801c058:	2b80      	cmp	r3, #128	@ 0x80
 801c05a:	d006      	beq.n	801c06a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c05c:	683a      	ldr	r2, [r7, #0]
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	0011      	movs	r1, r2
 801c062:	0018      	movs	r0, r3
 801c064:	f000 fc59 	bl	801c91a <USBD_CtlError>
                break;
 801c068:	e0ac      	b.n	801c1c4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c06a:	220e      	movs	r2, #14
 801c06c:	18bb      	adds	r3, r7, r2
 801c06e:	781b      	ldrb	r3, [r3, #0]
 801c070:	b25b      	sxtb	r3, r3
 801c072:	2b00      	cmp	r3, #0
 801c074:	da0c      	bge.n	801c090 <USBD_StdEPReq+0x20a>
 801c076:	18bb      	adds	r3, r7, r2
 801c078:	781b      	ldrb	r3, [r3, #0]
 801c07a:	227f      	movs	r2, #127	@ 0x7f
 801c07c:	401a      	ands	r2, r3
 801c07e:	0013      	movs	r3, r2
 801c080:	009b      	lsls	r3, r3, #2
 801c082:	189b      	adds	r3, r3, r2
 801c084:	009b      	lsls	r3, r3, #2
 801c086:	3310      	adds	r3, #16
 801c088:	687a      	ldr	r2, [r7, #4]
 801c08a:	18d3      	adds	r3, r2, r3
 801c08c:	3304      	adds	r3, #4
 801c08e:	e00d      	b.n	801c0ac <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c090:	230e      	movs	r3, #14
 801c092:	18fb      	adds	r3, r7, r3
 801c094:	781b      	ldrb	r3, [r3, #0]
 801c096:	227f      	movs	r2, #127	@ 0x7f
 801c098:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c09a:	0013      	movs	r3, r2
 801c09c:	009b      	lsls	r3, r3, #2
 801c09e:	189b      	adds	r3, r3, r2
 801c0a0:	009b      	lsls	r3, r3, #2
 801c0a2:	3351      	adds	r3, #81	@ 0x51
 801c0a4:	33ff      	adds	r3, #255	@ 0xff
 801c0a6:	687a      	ldr	r2, [r7, #4]
 801c0a8:	18d3      	adds	r3, r2, r3
 801c0aa:	3304      	adds	r3, #4
 801c0ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c0ae:	68bb      	ldr	r3, [r7, #8]
 801c0b0:	2200      	movs	r2, #0
 801c0b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c0b4:	68b9      	ldr	r1, [r7, #8]
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	2202      	movs	r2, #2
 801c0ba:	0018      	movs	r0, r3
 801c0bc:	f000 fcab 	bl	801ca16 <USBD_CtlSendData>
              break;
 801c0c0:	e080      	b.n	801c1c4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c0c2:	220e      	movs	r2, #14
 801c0c4:	18bb      	adds	r3, r7, r2
 801c0c6:	781b      	ldrb	r3, [r3, #0]
 801c0c8:	b25b      	sxtb	r3, r3
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	da14      	bge.n	801c0f8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c0ce:	18bb      	adds	r3, r7, r2
 801c0d0:	781b      	ldrb	r3, [r3, #0]
 801c0d2:	220f      	movs	r2, #15
 801c0d4:	401a      	ands	r2, r3
 801c0d6:	6879      	ldr	r1, [r7, #4]
 801c0d8:	0013      	movs	r3, r2
 801c0da:	009b      	lsls	r3, r3, #2
 801c0dc:	189b      	adds	r3, r3, r2
 801c0de:	009b      	lsls	r3, r3, #2
 801c0e0:	18cb      	adds	r3, r1, r3
 801c0e2:	3318      	adds	r3, #24
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d11e      	bne.n	801c128 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c0ea:	683a      	ldr	r2, [r7, #0]
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	0011      	movs	r1, r2
 801c0f0:	0018      	movs	r0, r3
 801c0f2:	f000 fc12 	bl	801c91a <USBD_CtlError>
                  break;
 801c0f6:	e065      	b.n	801c1c4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c0f8:	230e      	movs	r3, #14
 801c0fa:	18fb      	adds	r3, r7, r3
 801c0fc:	781b      	ldrb	r3, [r3, #0]
 801c0fe:	220f      	movs	r2, #15
 801c100:	401a      	ands	r2, r3
 801c102:	6878      	ldr	r0, [r7, #4]
 801c104:	23ac      	movs	r3, #172	@ 0xac
 801c106:	0059      	lsls	r1, r3, #1
 801c108:	0013      	movs	r3, r2
 801c10a:	009b      	lsls	r3, r3, #2
 801c10c:	189b      	adds	r3, r3, r2
 801c10e:	009b      	lsls	r3, r3, #2
 801c110:	18c3      	adds	r3, r0, r3
 801c112:	185b      	adds	r3, r3, r1
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d106      	bne.n	801c128 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c11a:	683a      	ldr	r2, [r7, #0]
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	0011      	movs	r1, r2
 801c120:	0018      	movs	r0, r3
 801c122:	f000 fbfa 	bl	801c91a <USBD_CtlError>
                  break;
 801c126:	e04d      	b.n	801c1c4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c128:	220e      	movs	r2, #14
 801c12a:	18bb      	adds	r3, r7, r2
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	b25b      	sxtb	r3, r3
 801c130:	2b00      	cmp	r3, #0
 801c132:	da0c      	bge.n	801c14e <USBD_StdEPReq+0x2c8>
 801c134:	18bb      	adds	r3, r7, r2
 801c136:	781b      	ldrb	r3, [r3, #0]
 801c138:	227f      	movs	r2, #127	@ 0x7f
 801c13a:	401a      	ands	r2, r3
 801c13c:	0013      	movs	r3, r2
 801c13e:	009b      	lsls	r3, r3, #2
 801c140:	189b      	adds	r3, r3, r2
 801c142:	009b      	lsls	r3, r3, #2
 801c144:	3310      	adds	r3, #16
 801c146:	687a      	ldr	r2, [r7, #4]
 801c148:	18d3      	adds	r3, r2, r3
 801c14a:	3304      	adds	r3, #4
 801c14c:	e00d      	b.n	801c16a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c14e:	230e      	movs	r3, #14
 801c150:	18fb      	adds	r3, r7, r3
 801c152:	781b      	ldrb	r3, [r3, #0]
 801c154:	227f      	movs	r2, #127	@ 0x7f
 801c156:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c158:	0013      	movs	r3, r2
 801c15a:	009b      	lsls	r3, r3, #2
 801c15c:	189b      	adds	r3, r3, r2
 801c15e:	009b      	lsls	r3, r3, #2
 801c160:	3351      	adds	r3, #81	@ 0x51
 801c162:	33ff      	adds	r3, #255	@ 0xff
 801c164:	687a      	ldr	r2, [r7, #4]
 801c166:	18d3      	adds	r3, r2, r3
 801c168:	3304      	adds	r3, #4
 801c16a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c16c:	220e      	movs	r2, #14
 801c16e:	18bb      	adds	r3, r7, r2
 801c170:	781b      	ldrb	r3, [r3, #0]
 801c172:	2b00      	cmp	r3, #0
 801c174:	d003      	beq.n	801c17e <USBD_StdEPReq+0x2f8>
 801c176:	18bb      	adds	r3, r7, r2
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	2b80      	cmp	r3, #128	@ 0x80
 801c17c:	d103      	bne.n	801c186 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c17e:	68bb      	ldr	r3, [r7, #8]
 801c180:	2200      	movs	r2, #0
 801c182:	601a      	str	r2, [r3, #0]
 801c184:	e010      	b.n	801c1a8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c186:	230e      	movs	r3, #14
 801c188:	18fb      	adds	r3, r7, r3
 801c18a:	781a      	ldrb	r2, [r3, #0]
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	0011      	movs	r1, r2
 801c190:	0018      	movs	r0, r3
 801c192:	f001 f940 	bl	801d416 <USBD_LL_IsStallEP>
 801c196:	1e03      	subs	r3, r0, #0
 801c198:	d003      	beq.n	801c1a2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c19a:	68bb      	ldr	r3, [r7, #8]
 801c19c:	2201      	movs	r2, #1
 801c19e:	601a      	str	r2, [r3, #0]
 801c1a0:	e002      	b.n	801c1a8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c1a2:	68bb      	ldr	r3, [r7, #8]
 801c1a4:	2200      	movs	r2, #0
 801c1a6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c1a8:	68b9      	ldr	r1, [r7, #8]
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	2202      	movs	r2, #2
 801c1ae:	0018      	movs	r0, r3
 801c1b0:	f000 fc31 	bl	801ca16 <USBD_CtlSendData>
              break;
 801c1b4:	e006      	b.n	801c1c4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c1b6:	683a      	ldr	r2, [r7, #0]
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	0011      	movs	r1, r2
 801c1bc:	0018      	movs	r0, r3
 801c1be:	f000 fbac 	bl	801c91a <USBD_CtlError>
              break;
 801c1c2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c1c4:	e006      	b.n	801c1d4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c1c6:	683a      	ldr	r2, [r7, #0]
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	0011      	movs	r1, r2
 801c1cc:	0018      	movs	r0, r3
 801c1ce:	f000 fba4 	bl	801c91a <USBD_CtlError>
          break;
 801c1d2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c1d4:	e006      	b.n	801c1e4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c1d6:	683a      	ldr	r2, [r7, #0]
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	0011      	movs	r1, r2
 801c1dc:	0018      	movs	r0, r3
 801c1de:	f000 fb9c 	bl	801c91a <USBD_CtlError>
      break;
 801c1e2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c1e4:	230f      	movs	r3, #15
 801c1e6:	18fb      	adds	r3, r7, r3
 801c1e8:	781b      	ldrb	r3, [r3, #0]
}
 801c1ea:	0018      	movs	r0, r3
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	b004      	add	sp, #16
 801c1f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c1f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b084      	sub	sp, #16
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	6078      	str	r0, [r7, #4]
 801c1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c1fe:	2308      	movs	r3, #8
 801c200:	18fb      	adds	r3, r7, r3
 801c202:	2200      	movs	r2, #0
 801c204:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c206:	2300      	movs	r3, #0
 801c208:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c20a:	230b      	movs	r3, #11
 801c20c:	18fb      	adds	r3, r7, r3
 801c20e:	2200      	movs	r2, #0
 801c210:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c212:	683b      	ldr	r3, [r7, #0]
 801c214:	885b      	ldrh	r3, [r3, #2]
 801c216:	0a1b      	lsrs	r3, r3, #8
 801c218:	b29b      	uxth	r3, r3
 801c21a:	2b07      	cmp	r3, #7
 801c21c:	d900      	bls.n	801c220 <USBD_GetDescriptor+0x2c>
 801c21e:	e159      	b.n	801c4d4 <USBD_GetDescriptor+0x2e0>
 801c220:	009a      	lsls	r2, r3, #2
 801c222:	4bcb      	ldr	r3, [pc, #812]	@ (801c550 <USBD_GetDescriptor+0x35c>)
 801c224:	18d3      	adds	r3, r2, r3
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	23ac      	movs	r3, #172	@ 0xac
 801c22e:	009b      	lsls	r3, r3, #2
 801c230:	58d3      	ldr	r3, [r2, r3]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	687a      	ldr	r2, [r7, #4]
 801c236:	7c12      	ldrb	r2, [r2, #16]
 801c238:	2108      	movs	r1, #8
 801c23a:	1879      	adds	r1, r7, r1
 801c23c:	0010      	movs	r0, r2
 801c23e:	4798      	blx	r3
 801c240:	0003      	movs	r3, r0
 801c242:	60fb      	str	r3, [r7, #12]
      break;
 801c244:	e153      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	7c1b      	ldrb	r3, [r3, #16]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d10f      	bne.n	801c26e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c24e:	687a      	ldr	r2, [r7, #4]
 801c250:	23ad      	movs	r3, #173	@ 0xad
 801c252:	009b      	lsls	r3, r3, #2
 801c254:	58d3      	ldr	r3, [r2, r3]
 801c256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c258:	2208      	movs	r2, #8
 801c25a:	18ba      	adds	r2, r7, r2
 801c25c:	0010      	movs	r0, r2
 801c25e:	4798      	blx	r3
 801c260:	0003      	movs	r3, r0
 801c262:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	3301      	adds	r3, #1
 801c268:	2202      	movs	r2, #2
 801c26a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c26c:	e13f      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c26e:	687a      	ldr	r2, [r7, #4]
 801c270:	23ad      	movs	r3, #173	@ 0xad
 801c272:	009b      	lsls	r3, r3, #2
 801c274:	58d3      	ldr	r3, [r2, r3]
 801c276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c278:	2208      	movs	r2, #8
 801c27a:	18ba      	adds	r2, r7, r2
 801c27c:	0010      	movs	r0, r2
 801c27e:	4798      	blx	r3
 801c280:	0003      	movs	r3, r0
 801c282:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	3301      	adds	r3, #1
 801c288:	2202      	movs	r2, #2
 801c28a:	701a      	strb	r2, [r3, #0]
      break;
 801c28c:	e12f      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c28e:	683b      	ldr	r3, [r7, #0]
 801c290:	885b      	ldrh	r3, [r3, #2]
 801c292:	b2db      	uxtb	r3, r3
 801c294:	2b05      	cmp	r3, #5
 801c296:	d900      	bls.n	801c29a <USBD_GetDescriptor+0xa6>
 801c298:	e0d0      	b.n	801c43c <USBD_GetDescriptor+0x248>
 801c29a:	009a      	lsls	r2, r3, #2
 801c29c:	4bad      	ldr	r3, [pc, #692]	@ (801c554 <USBD_GetDescriptor+0x360>)
 801c29e:	18d3      	adds	r3, r2, r3
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c2a4:	687a      	ldr	r2, [r7, #4]
 801c2a6:	23ac      	movs	r3, #172	@ 0xac
 801c2a8:	009b      	lsls	r3, r3, #2
 801c2aa:	58d3      	ldr	r3, [r2, r3]
 801c2ac:	685b      	ldr	r3, [r3, #4]
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d00d      	beq.n	801c2ce <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c2b2:	687a      	ldr	r2, [r7, #4]
 801c2b4:	23ac      	movs	r3, #172	@ 0xac
 801c2b6:	009b      	lsls	r3, r3, #2
 801c2b8:	58d3      	ldr	r3, [r2, r3]
 801c2ba:	685b      	ldr	r3, [r3, #4]
 801c2bc:	687a      	ldr	r2, [r7, #4]
 801c2be:	7c12      	ldrb	r2, [r2, #16]
 801c2c0:	2108      	movs	r1, #8
 801c2c2:	1879      	adds	r1, r7, r1
 801c2c4:	0010      	movs	r0, r2
 801c2c6:	4798      	blx	r3
 801c2c8:	0003      	movs	r3, r0
 801c2ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c2cc:	e0c3      	b.n	801c456 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c2ce:	683a      	ldr	r2, [r7, #0]
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	0011      	movs	r1, r2
 801c2d4:	0018      	movs	r0, r3
 801c2d6:	f000 fb20 	bl	801c91a <USBD_CtlError>
            err++;
 801c2da:	210b      	movs	r1, #11
 801c2dc:	187b      	adds	r3, r7, r1
 801c2de:	781a      	ldrb	r2, [r3, #0]
 801c2e0:	187b      	adds	r3, r7, r1
 801c2e2:	3201      	adds	r2, #1
 801c2e4:	701a      	strb	r2, [r3, #0]
          break;
 801c2e6:	e0b6      	b.n	801c456 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c2e8:	687a      	ldr	r2, [r7, #4]
 801c2ea:	23ac      	movs	r3, #172	@ 0xac
 801c2ec:	009b      	lsls	r3, r3, #2
 801c2ee:	58d3      	ldr	r3, [r2, r3]
 801c2f0:	689b      	ldr	r3, [r3, #8]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d00d      	beq.n	801c312 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c2f6:	687a      	ldr	r2, [r7, #4]
 801c2f8:	23ac      	movs	r3, #172	@ 0xac
 801c2fa:	009b      	lsls	r3, r3, #2
 801c2fc:	58d3      	ldr	r3, [r2, r3]
 801c2fe:	689b      	ldr	r3, [r3, #8]
 801c300:	687a      	ldr	r2, [r7, #4]
 801c302:	7c12      	ldrb	r2, [r2, #16]
 801c304:	2108      	movs	r1, #8
 801c306:	1879      	adds	r1, r7, r1
 801c308:	0010      	movs	r0, r2
 801c30a:	4798      	blx	r3
 801c30c:	0003      	movs	r3, r0
 801c30e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c310:	e0a1      	b.n	801c456 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c312:	683a      	ldr	r2, [r7, #0]
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	0011      	movs	r1, r2
 801c318:	0018      	movs	r0, r3
 801c31a:	f000 fafe 	bl	801c91a <USBD_CtlError>
            err++;
 801c31e:	210b      	movs	r1, #11
 801c320:	187b      	adds	r3, r7, r1
 801c322:	781a      	ldrb	r2, [r3, #0]
 801c324:	187b      	adds	r3, r7, r1
 801c326:	3201      	adds	r2, #1
 801c328:	701a      	strb	r2, [r3, #0]
          break;
 801c32a:	e094      	b.n	801c456 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c32c:	687a      	ldr	r2, [r7, #4]
 801c32e:	23ac      	movs	r3, #172	@ 0xac
 801c330:	009b      	lsls	r3, r3, #2
 801c332:	58d3      	ldr	r3, [r2, r3]
 801c334:	68db      	ldr	r3, [r3, #12]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d00d      	beq.n	801c356 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c33a:	687a      	ldr	r2, [r7, #4]
 801c33c:	23ac      	movs	r3, #172	@ 0xac
 801c33e:	009b      	lsls	r3, r3, #2
 801c340:	58d3      	ldr	r3, [r2, r3]
 801c342:	68db      	ldr	r3, [r3, #12]
 801c344:	687a      	ldr	r2, [r7, #4]
 801c346:	7c12      	ldrb	r2, [r2, #16]
 801c348:	2108      	movs	r1, #8
 801c34a:	1879      	adds	r1, r7, r1
 801c34c:	0010      	movs	r0, r2
 801c34e:	4798      	blx	r3
 801c350:	0003      	movs	r3, r0
 801c352:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c354:	e07f      	b.n	801c456 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c356:	683a      	ldr	r2, [r7, #0]
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	0011      	movs	r1, r2
 801c35c:	0018      	movs	r0, r3
 801c35e:	f000 fadc 	bl	801c91a <USBD_CtlError>
            err++;
 801c362:	210b      	movs	r1, #11
 801c364:	187b      	adds	r3, r7, r1
 801c366:	781a      	ldrb	r2, [r3, #0]
 801c368:	187b      	adds	r3, r7, r1
 801c36a:	3201      	adds	r2, #1
 801c36c:	701a      	strb	r2, [r3, #0]
          break;
 801c36e:	e072      	b.n	801c456 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c370:	687a      	ldr	r2, [r7, #4]
 801c372:	23ac      	movs	r3, #172	@ 0xac
 801c374:	009b      	lsls	r3, r3, #2
 801c376:	58d3      	ldr	r3, [r2, r3]
 801c378:	691b      	ldr	r3, [r3, #16]
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d00d      	beq.n	801c39a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c37e:	687a      	ldr	r2, [r7, #4]
 801c380:	23ac      	movs	r3, #172	@ 0xac
 801c382:	009b      	lsls	r3, r3, #2
 801c384:	58d3      	ldr	r3, [r2, r3]
 801c386:	691b      	ldr	r3, [r3, #16]
 801c388:	687a      	ldr	r2, [r7, #4]
 801c38a:	7c12      	ldrb	r2, [r2, #16]
 801c38c:	2108      	movs	r1, #8
 801c38e:	1879      	adds	r1, r7, r1
 801c390:	0010      	movs	r0, r2
 801c392:	4798      	blx	r3
 801c394:	0003      	movs	r3, r0
 801c396:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c398:	e05d      	b.n	801c456 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c39a:	683a      	ldr	r2, [r7, #0]
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	0011      	movs	r1, r2
 801c3a0:	0018      	movs	r0, r3
 801c3a2:	f000 faba 	bl	801c91a <USBD_CtlError>
            err++;
 801c3a6:	210b      	movs	r1, #11
 801c3a8:	187b      	adds	r3, r7, r1
 801c3aa:	781a      	ldrb	r2, [r3, #0]
 801c3ac:	187b      	adds	r3, r7, r1
 801c3ae:	3201      	adds	r2, #1
 801c3b0:	701a      	strb	r2, [r3, #0]
          break;
 801c3b2:	e050      	b.n	801c456 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c3b4:	687a      	ldr	r2, [r7, #4]
 801c3b6:	23ac      	movs	r3, #172	@ 0xac
 801c3b8:	009b      	lsls	r3, r3, #2
 801c3ba:	58d3      	ldr	r3, [r2, r3]
 801c3bc:	695b      	ldr	r3, [r3, #20]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d00d      	beq.n	801c3de <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c3c2:	687a      	ldr	r2, [r7, #4]
 801c3c4:	23ac      	movs	r3, #172	@ 0xac
 801c3c6:	009b      	lsls	r3, r3, #2
 801c3c8:	58d3      	ldr	r3, [r2, r3]
 801c3ca:	695b      	ldr	r3, [r3, #20]
 801c3cc:	687a      	ldr	r2, [r7, #4]
 801c3ce:	7c12      	ldrb	r2, [r2, #16]
 801c3d0:	2108      	movs	r1, #8
 801c3d2:	1879      	adds	r1, r7, r1
 801c3d4:	0010      	movs	r0, r2
 801c3d6:	4798      	blx	r3
 801c3d8:	0003      	movs	r3, r0
 801c3da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c3dc:	e03b      	b.n	801c456 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c3de:	683a      	ldr	r2, [r7, #0]
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	0011      	movs	r1, r2
 801c3e4:	0018      	movs	r0, r3
 801c3e6:	f000 fa98 	bl	801c91a <USBD_CtlError>
            err++;
 801c3ea:	210b      	movs	r1, #11
 801c3ec:	187b      	adds	r3, r7, r1
 801c3ee:	781a      	ldrb	r2, [r3, #0]
 801c3f0:	187b      	adds	r3, r7, r1
 801c3f2:	3201      	adds	r2, #1
 801c3f4:	701a      	strb	r2, [r3, #0]
          break;
 801c3f6:	e02e      	b.n	801c456 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c3f8:	687a      	ldr	r2, [r7, #4]
 801c3fa:	23ac      	movs	r3, #172	@ 0xac
 801c3fc:	009b      	lsls	r3, r3, #2
 801c3fe:	58d3      	ldr	r3, [r2, r3]
 801c400:	699b      	ldr	r3, [r3, #24]
 801c402:	2b00      	cmp	r3, #0
 801c404:	d00d      	beq.n	801c422 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c406:	687a      	ldr	r2, [r7, #4]
 801c408:	23ac      	movs	r3, #172	@ 0xac
 801c40a:	009b      	lsls	r3, r3, #2
 801c40c:	58d3      	ldr	r3, [r2, r3]
 801c40e:	699b      	ldr	r3, [r3, #24]
 801c410:	687a      	ldr	r2, [r7, #4]
 801c412:	7c12      	ldrb	r2, [r2, #16]
 801c414:	2108      	movs	r1, #8
 801c416:	1879      	adds	r1, r7, r1
 801c418:	0010      	movs	r0, r2
 801c41a:	4798      	blx	r3
 801c41c:	0003      	movs	r3, r0
 801c41e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c420:	e019      	b.n	801c456 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c422:	683a      	ldr	r2, [r7, #0]
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	0011      	movs	r1, r2
 801c428:	0018      	movs	r0, r3
 801c42a:	f000 fa76 	bl	801c91a <USBD_CtlError>
            err++;
 801c42e:	210b      	movs	r1, #11
 801c430:	187b      	adds	r3, r7, r1
 801c432:	781a      	ldrb	r2, [r3, #0]
 801c434:	187b      	adds	r3, r7, r1
 801c436:	3201      	adds	r2, #1
 801c438:	701a      	strb	r2, [r3, #0]
          break;
 801c43a:	e00c      	b.n	801c456 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c43c:	683a      	ldr	r2, [r7, #0]
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	0011      	movs	r1, r2
 801c442:	0018      	movs	r0, r3
 801c444:	f000 fa69 	bl	801c91a <USBD_CtlError>
          err++;
 801c448:	210b      	movs	r1, #11
 801c44a:	187b      	adds	r3, r7, r1
 801c44c:	781a      	ldrb	r2, [r3, #0]
 801c44e:	187b      	adds	r3, r7, r1
 801c450:	3201      	adds	r2, #1
 801c452:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c454:	e04b      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>
 801c456:	e04a      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	7c1b      	ldrb	r3, [r3, #16]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d10b      	bne.n	801c478 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c460:	687a      	ldr	r2, [r7, #4]
 801c462:	23ad      	movs	r3, #173	@ 0xad
 801c464:	009b      	lsls	r3, r3, #2
 801c466:	58d3      	ldr	r3, [r2, r3]
 801c468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c46a:	2208      	movs	r2, #8
 801c46c:	18ba      	adds	r2, r7, r2
 801c46e:	0010      	movs	r0, r2
 801c470:	4798      	blx	r3
 801c472:	0003      	movs	r3, r0
 801c474:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c476:	e03a      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c478:	683a      	ldr	r2, [r7, #0]
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	0011      	movs	r1, r2
 801c47e:	0018      	movs	r0, r3
 801c480:	f000 fa4b 	bl	801c91a <USBD_CtlError>
        err++;
 801c484:	210b      	movs	r1, #11
 801c486:	187b      	adds	r3, r7, r1
 801c488:	781a      	ldrb	r2, [r3, #0]
 801c48a:	187b      	adds	r3, r7, r1
 801c48c:	3201      	adds	r2, #1
 801c48e:	701a      	strb	r2, [r3, #0]
      break;
 801c490:	e02d      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	7c1b      	ldrb	r3, [r3, #16]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d10f      	bne.n	801c4ba <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c49a:	687a      	ldr	r2, [r7, #4]
 801c49c:	23ad      	movs	r3, #173	@ 0xad
 801c49e:	009b      	lsls	r3, r3, #2
 801c4a0:	58d3      	ldr	r3, [r2, r3]
 801c4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4a4:	2208      	movs	r2, #8
 801c4a6:	18ba      	adds	r2, r7, r2
 801c4a8:	0010      	movs	r0, r2
 801c4aa:	4798      	blx	r3
 801c4ac:	0003      	movs	r3, r0
 801c4ae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	3301      	adds	r3, #1
 801c4b4:	2207      	movs	r2, #7
 801c4b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c4b8:	e019      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c4ba:	683a      	ldr	r2, [r7, #0]
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	0011      	movs	r1, r2
 801c4c0:	0018      	movs	r0, r3
 801c4c2:	f000 fa2a 	bl	801c91a <USBD_CtlError>
        err++;
 801c4c6:	210b      	movs	r1, #11
 801c4c8:	187b      	adds	r3, r7, r1
 801c4ca:	781a      	ldrb	r2, [r3, #0]
 801c4cc:	187b      	adds	r3, r7, r1
 801c4ce:	3201      	adds	r2, #1
 801c4d0:	701a      	strb	r2, [r3, #0]
      break;
 801c4d2:	e00c      	b.n	801c4ee <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c4d4:	683a      	ldr	r2, [r7, #0]
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	0011      	movs	r1, r2
 801c4da:	0018      	movs	r0, r3
 801c4dc:	f000 fa1d 	bl	801c91a <USBD_CtlError>
      err++;
 801c4e0:	210b      	movs	r1, #11
 801c4e2:	187b      	adds	r3, r7, r1
 801c4e4:	781a      	ldrb	r2, [r3, #0]
 801c4e6:	187b      	adds	r3, r7, r1
 801c4e8:	3201      	adds	r2, #1
 801c4ea:	701a      	strb	r2, [r3, #0]
      break;
 801c4ec:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c4ee:	230b      	movs	r3, #11
 801c4f0:	18fb      	adds	r3, r7, r3
 801c4f2:	781b      	ldrb	r3, [r3, #0]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d127      	bne.n	801c548 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c4f8:	2108      	movs	r1, #8
 801c4fa:	187b      	adds	r3, r7, r1
 801c4fc:	881b      	ldrh	r3, [r3, #0]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d019      	beq.n	801c536 <USBD_GetDescriptor+0x342>
 801c502:	683b      	ldr	r3, [r7, #0]
 801c504:	88db      	ldrh	r3, [r3, #6]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d015      	beq.n	801c536 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c50a:	683b      	ldr	r3, [r7, #0]
 801c50c:	88da      	ldrh	r2, [r3, #6]
 801c50e:	187b      	adds	r3, r7, r1
 801c510:	881b      	ldrh	r3, [r3, #0]
 801c512:	1c18      	adds	r0, r3, #0
 801c514:	1c11      	adds	r1, r2, #0
 801c516:	b28a      	uxth	r2, r1
 801c518:	b283      	uxth	r3, r0
 801c51a:	429a      	cmp	r2, r3
 801c51c:	d900      	bls.n	801c520 <USBD_GetDescriptor+0x32c>
 801c51e:	1c01      	adds	r1, r0, #0
 801c520:	b28a      	uxth	r2, r1
 801c522:	2108      	movs	r1, #8
 801c524:	187b      	adds	r3, r7, r1
 801c526:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c528:	187b      	adds	r3, r7, r1
 801c52a:	881a      	ldrh	r2, [r3, #0]
 801c52c:	68f9      	ldr	r1, [r7, #12]
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	0018      	movs	r0, r3
 801c532:	f000 fa70 	bl	801ca16 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c536:	683b      	ldr	r3, [r7, #0]
 801c538:	88db      	ldrh	r3, [r3, #6]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d105      	bne.n	801c54a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	0018      	movs	r0, r3
 801c542:	f000 fad2 	bl	801caea <USBD_CtlSendStatus>
 801c546:	e000      	b.n	801c54a <USBD_GetDescriptor+0x356>
    return;
 801c548:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c54a:	46bd      	mov	sp, r7
 801c54c:	b004      	add	sp, #16
 801c54e:	bd80      	pop	{r7, pc}
 801c550:	08025618 	.word	0x08025618
 801c554:	08025638 	.word	0x08025638

0801c558 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c558:	b590      	push	{r4, r7, lr}
 801c55a:	b085      	sub	sp, #20
 801c55c:	af00      	add	r7, sp, #0
 801c55e:	6078      	str	r0, [r7, #4]
 801c560:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c562:	683b      	ldr	r3, [r7, #0]
 801c564:	889b      	ldrh	r3, [r3, #4]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d13d      	bne.n	801c5e6 <USBD_SetAddress+0x8e>
 801c56a:	683b      	ldr	r3, [r7, #0]
 801c56c:	88db      	ldrh	r3, [r3, #6]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d139      	bne.n	801c5e6 <USBD_SetAddress+0x8e>
 801c572:	683b      	ldr	r3, [r7, #0]
 801c574:	885b      	ldrh	r3, [r3, #2]
 801c576:	2b7f      	cmp	r3, #127	@ 0x7f
 801c578:	d835      	bhi.n	801c5e6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c57a:	683b      	ldr	r3, [r7, #0]
 801c57c:	885b      	ldrh	r3, [r3, #2]
 801c57e:	b2da      	uxtb	r2, r3
 801c580:	230f      	movs	r3, #15
 801c582:	18fb      	adds	r3, r7, r3
 801c584:	217f      	movs	r1, #127	@ 0x7f
 801c586:	400a      	ands	r2, r1
 801c588:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c58a:	687a      	ldr	r2, [r7, #4]
 801c58c:	23a7      	movs	r3, #167	@ 0xa7
 801c58e:	009b      	lsls	r3, r3, #2
 801c590:	5cd3      	ldrb	r3, [r2, r3]
 801c592:	2b03      	cmp	r3, #3
 801c594:	d106      	bne.n	801c5a4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c596:	683a      	ldr	r2, [r7, #0]
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	0011      	movs	r1, r2
 801c59c:	0018      	movs	r0, r3
 801c59e:	f000 f9bc 	bl	801c91a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c5a2:	e027      	b.n	801c5f4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	240f      	movs	r4, #15
 801c5a8:	193a      	adds	r2, r7, r4
 801c5aa:	4914      	ldr	r1, [pc, #80]	@ (801c5fc <USBD_SetAddress+0xa4>)
 801c5ac:	7812      	ldrb	r2, [r2, #0]
 801c5ae:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c5b0:	193b      	adds	r3, r7, r4
 801c5b2:	781a      	ldrb	r2, [r3, #0]
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	0011      	movs	r1, r2
 801c5b8:	0018      	movs	r0, r3
 801c5ba:	f000 ff5d 	bl	801d478 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	0018      	movs	r0, r3
 801c5c2:	f000 fa92 	bl	801caea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c5c6:	193b      	adds	r3, r7, r4
 801c5c8:	781b      	ldrb	r3, [r3, #0]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d005      	beq.n	801c5da <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c5ce:	687a      	ldr	r2, [r7, #4]
 801c5d0:	23a7      	movs	r3, #167	@ 0xa7
 801c5d2:	009b      	lsls	r3, r3, #2
 801c5d4:	2102      	movs	r1, #2
 801c5d6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c5d8:	e00c      	b.n	801c5f4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c5da:	687a      	ldr	r2, [r7, #4]
 801c5dc:	23a7      	movs	r3, #167	@ 0xa7
 801c5de:	009b      	lsls	r3, r3, #2
 801c5e0:	2101      	movs	r1, #1
 801c5e2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c5e4:	e006      	b.n	801c5f4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c5e6:	683a      	ldr	r2, [r7, #0]
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	0011      	movs	r1, r2
 801c5ec:	0018      	movs	r0, r3
 801c5ee:	f000 f994 	bl	801c91a <USBD_CtlError>
  }
}
 801c5f2:	46c0      	nop			@ (mov r8, r8)
 801c5f4:	46c0      	nop			@ (mov r8, r8)
 801c5f6:	46bd      	mov	sp, r7
 801c5f8:	b005      	add	sp, #20
 801c5fa:	bd90      	pop	{r4, r7, pc}
 801c5fc:	0000029e 	.word	0x0000029e

0801c600 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b082      	sub	sp, #8
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
 801c608:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c60a:	683b      	ldr	r3, [r7, #0]
 801c60c:	885b      	ldrh	r3, [r3, #2]
 801c60e:	b2da      	uxtb	r2, r3
 801c610:	4b4c      	ldr	r3, [pc, #304]	@ (801c744 <USBD_SetConfig+0x144>)
 801c612:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c614:	4b4b      	ldr	r3, [pc, #300]	@ (801c744 <USBD_SetConfig+0x144>)
 801c616:	781b      	ldrb	r3, [r3, #0]
 801c618:	2b01      	cmp	r3, #1
 801c61a:	d906      	bls.n	801c62a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c61c:	683a      	ldr	r2, [r7, #0]
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	0011      	movs	r1, r2
 801c622:	0018      	movs	r0, r3
 801c624:	f000 f979 	bl	801c91a <USBD_CtlError>
 801c628:	e088      	b.n	801c73c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c62a:	687a      	ldr	r2, [r7, #4]
 801c62c:	23a7      	movs	r3, #167	@ 0xa7
 801c62e:	009b      	lsls	r3, r3, #2
 801c630:	5cd3      	ldrb	r3, [r2, r3]
 801c632:	2b02      	cmp	r3, #2
 801c634:	d002      	beq.n	801c63c <USBD_SetConfig+0x3c>
 801c636:	2b03      	cmp	r3, #3
 801c638:	d029      	beq.n	801c68e <USBD_SetConfig+0x8e>
 801c63a:	e071      	b.n	801c720 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c63c:	4b41      	ldr	r3, [pc, #260]	@ (801c744 <USBD_SetConfig+0x144>)
 801c63e:	781b      	ldrb	r3, [r3, #0]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d01f      	beq.n	801c684 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c644:	4b3f      	ldr	r3, [pc, #252]	@ (801c744 <USBD_SetConfig+0x144>)
 801c646:	781b      	ldrb	r3, [r3, #0]
 801c648:	001a      	movs	r2, r3
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c64e:	687a      	ldr	r2, [r7, #4]
 801c650:	23a7      	movs	r3, #167	@ 0xa7
 801c652:	009b      	lsls	r3, r3, #2
 801c654:	2103      	movs	r1, #3
 801c656:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c658:	4b3a      	ldr	r3, [pc, #232]	@ (801c744 <USBD_SetConfig+0x144>)
 801c65a:	781a      	ldrb	r2, [r3, #0]
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	0011      	movs	r1, r2
 801c660:	0018      	movs	r0, r3
 801c662:	f7ff f8c6 	bl	801b7f2 <USBD_SetClassConfig>
 801c666:	0003      	movs	r3, r0
 801c668:	2b02      	cmp	r3, #2
 801c66a:	d106      	bne.n	801c67a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c66c:	683a      	ldr	r2, [r7, #0]
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	0011      	movs	r1, r2
 801c672:	0018      	movs	r0, r3
 801c674:	f000 f951 	bl	801c91a <USBD_CtlError>
            return;
 801c678:	e060      	b.n	801c73c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	0018      	movs	r0, r3
 801c67e:	f000 fa34 	bl	801caea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c682:	e05b      	b.n	801c73c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	0018      	movs	r0, r3
 801c688:	f000 fa2f 	bl	801caea <USBD_CtlSendStatus>
        break;
 801c68c:	e056      	b.n	801c73c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c68e:	4b2d      	ldr	r3, [pc, #180]	@ (801c744 <USBD_SetConfig+0x144>)
 801c690:	781b      	ldrb	r3, [r3, #0]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d115      	bne.n	801c6c2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	23a7      	movs	r3, #167	@ 0xa7
 801c69a:	009b      	lsls	r3, r3, #2
 801c69c:	2102      	movs	r1, #2
 801c69e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c6a0:	4b28      	ldr	r3, [pc, #160]	@ (801c744 <USBD_SetConfig+0x144>)
 801c6a2:	781b      	ldrb	r3, [r3, #0]
 801c6a4:	001a      	movs	r2, r3
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c6aa:	4b26      	ldr	r3, [pc, #152]	@ (801c744 <USBD_SetConfig+0x144>)
 801c6ac:	781a      	ldrb	r2, [r3, #0]
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	0011      	movs	r1, r2
 801c6b2:	0018      	movs	r0, r3
 801c6b4:	f7ff f8c4 	bl	801b840 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	0018      	movs	r0, r3
 801c6bc:	f000 fa15 	bl	801caea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c6c0:	e03c      	b.n	801c73c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c6c2:	4b20      	ldr	r3, [pc, #128]	@ (801c744 <USBD_SetConfig+0x144>)
 801c6c4:	781b      	ldrb	r3, [r3, #0]
 801c6c6:	001a      	movs	r2, r3
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	685b      	ldr	r3, [r3, #4]
 801c6cc:	429a      	cmp	r2, r3
 801c6ce:	d022      	beq.n	801c716 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	685b      	ldr	r3, [r3, #4]
 801c6d4:	b2da      	uxtb	r2, r3
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	0011      	movs	r1, r2
 801c6da:	0018      	movs	r0, r3
 801c6dc:	f7ff f8b0 	bl	801b840 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c6e0:	4b18      	ldr	r3, [pc, #96]	@ (801c744 <USBD_SetConfig+0x144>)
 801c6e2:	781b      	ldrb	r3, [r3, #0]
 801c6e4:	001a      	movs	r2, r3
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c6ea:	4b16      	ldr	r3, [pc, #88]	@ (801c744 <USBD_SetConfig+0x144>)
 801c6ec:	781a      	ldrb	r2, [r3, #0]
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	0011      	movs	r1, r2
 801c6f2:	0018      	movs	r0, r3
 801c6f4:	f7ff f87d 	bl	801b7f2 <USBD_SetClassConfig>
 801c6f8:	0003      	movs	r3, r0
 801c6fa:	2b02      	cmp	r3, #2
 801c6fc:	d106      	bne.n	801c70c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c6fe:	683a      	ldr	r2, [r7, #0]
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	0011      	movs	r1, r2
 801c704:	0018      	movs	r0, r3
 801c706:	f000 f908 	bl	801c91a <USBD_CtlError>
            return;
 801c70a:	e017      	b.n	801c73c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	0018      	movs	r0, r3
 801c710:	f000 f9eb 	bl	801caea <USBD_CtlSendStatus>
        break;
 801c714:	e012      	b.n	801c73c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	0018      	movs	r0, r3
 801c71a:	f000 f9e6 	bl	801caea <USBD_CtlSendStatus>
        break;
 801c71e:	e00d      	b.n	801c73c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c720:	683a      	ldr	r2, [r7, #0]
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	0011      	movs	r1, r2
 801c726:	0018      	movs	r0, r3
 801c728:	f000 f8f7 	bl	801c91a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c72c:	4b05      	ldr	r3, [pc, #20]	@ (801c744 <USBD_SetConfig+0x144>)
 801c72e:	781a      	ldrb	r2, [r3, #0]
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	0011      	movs	r1, r2
 801c734:	0018      	movs	r0, r3
 801c736:	f7ff f883 	bl	801b840 <USBD_ClrClassConfig>
        break;
 801c73a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c73c:	46bd      	mov	sp, r7
 801c73e:	b002      	add	sp, #8
 801c740:	bd80      	pop	{r7, pc}
 801c742:	46c0      	nop			@ (mov r8, r8)
 801c744:	200023c4 	.word	0x200023c4

0801c748 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c748:	b580      	push	{r7, lr}
 801c74a:	b082      	sub	sp, #8
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	6078      	str	r0, [r7, #4]
 801c750:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c752:	683b      	ldr	r3, [r7, #0]
 801c754:	88db      	ldrh	r3, [r3, #6]
 801c756:	2b01      	cmp	r3, #1
 801c758:	d006      	beq.n	801c768 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c75a:	683a      	ldr	r2, [r7, #0]
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	0011      	movs	r1, r2
 801c760:	0018      	movs	r0, r3
 801c762:	f000 f8da 	bl	801c91a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c766:	e026      	b.n	801c7b6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c768:	687a      	ldr	r2, [r7, #4]
 801c76a:	23a7      	movs	r3, #167	@ 0xa7
 801c76c:	009b      	lsls	r3, r3, #2
 801c76e:	5cd3      	ldrb	r3, [r2, r3]
 801c770:	2b02      	cmp	r3, #2
 801c772:	dc02      	bgt.n	801c77a <USBD_GetConfig+0x32>
 801c774:	2b00      	cmp	r3, #0
 801c776:	dc03      	bgt.n	801c780 <USBD_GetConfig+0x38>
 801c778:	e016      	b.n	801c7a8 <USBD_GetConfig+0x60>
 801c77a:	2b03      	cmp	r3, #3
 801c77c:	d00c      	beq.n	801c798 <USBD_GetConfig+0x50>
 801c77e:	e013      	b.n	801c7a8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	2200      	movs	r2, #0
 801c784:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	3308      	adds	r3, #8
 801c78a:	0019      	movs	r1, r3
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	2201      	movs	r2, #1
 801c790:	0018      	movs	r0, r3
 801c792:	f000 f940 	bl	801ca16 <USBD_CtlSendData>
        break;
 801c796:	e00e      	b.n	801c7b6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	1d19      	adds	r1, r3, #4
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	2201      	movs	r2, #1
 801c7a0:	0018      	movs	r0, r3
 801c7a2:	f000 f938 	bl	801ca16 <USBD_CtlSendData>
        break;
 801c7a6:	e006      	b.n	801c7b6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c7a8:	683a      	ldr	r2, [r7, #0]
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	0011      	movs	r1, r2
 801c7ae:	0018      	movs	r0, r3
 801c7b0:	f000 f8b3 	bl	801c91a <USBD_CtlError>
        break;
 801c7b4:	46c0      	nop			@ (mov r8, r8)
}
 801c7b6:	46c0      	nop			@ (mov r8, r8)
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	b002      	add	sp, #8
 801c7bc:	bd80      	pop	{r7, pc}

0801c7be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c7be:	b580      	push	{r7, lr}
 801c7c0:	b082      	sub	sp, #8
 801c7c2:	af00      	add	r7, sp, #0
 801c7c4:	6078      	str	r0, [r7, #4]
 801c7c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c7c8:	687a      	ldr	r2, [r7, #4]
 801c7ca:	23a7      	movs	r3, #167	@ 0xa7
 801c7cc:	009b      	lsls	r3, r3, #2
 801c7ce:	5cd3      	ldrb	r3, [r2, r3]
 801c7d0:	3b01      	subs	r3, #1
 801c7d2:	2b02      	cmp	r3, #2
 801c7d4:	d822      	bhi.n	801c81c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c7d6:	683b      	ldr	r3, [r7, #0]
 801c7d8:	88db      	ldrh	r3, [r3, #6]
 801c7da:	2b02      	cmp	r3, #2
 801c7dc:	d006      	beq.n	801c7ec <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801c7de:	683a      	ldr	r2, [r7, #0]
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	0011      	movs	r1, r2
 801c7e4:	0018      	movs	r0, r3
 801c7e6:	f000 f898 	bl	801c91a <USBD_CtlError>
        break;
 801c7ea:	e01e      	b.n	801c82a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	2201      	movs	r2, #1
 801c7f0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801c7f2:	687a      	ldr	r2, [r7, #4]
 801c7f4:	23a9      	movs	r3, #169	@ 0xa9
 801c7f6:	009b      	lsls	r3, r3, #2
 801c7f8:	58d3      	ldr	r3, [r2, r3]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d005      	beq.n	801c80a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	68db      	ldr	r3, [r3, #12]
 801c802:	2202      	movs	r2, #2
 801c804:	431a      	orrs	r2, r3
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	330c      	adds	r3, #12
 801c80e:	0019      	movs	r1, r3
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	2202      	movs	r2, #2
 801c814:	0018      	movs	r0, r3
 801c816:	f000 f8fe 	bl	801ca16 <USBD_CtlSendData>
      break;
 801c81a:	e006      	b.n	801c82a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801c81c:	683a      	ldr	r2, [r7, #0]
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	0011      	movs	r1, r2
 801c822:	0018      	movs	r0, r3
 801c824:	f000 f879 	bl	801c91a <USBD_CtlError>
      break;
 801c828:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c82a:	46c0      	nop			@ (mov r8, r8)
 801c82c:	46bd      	mov	sp, r7
 801c82e:	b002      	add	sp, #8
 801c830:	bd80      	pop	{r7, pc}

0801c832 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c832:	b580      	push	{r7, lr}
 801c834:	b082      	sub	sp, #8
 801c836:	af00      	add	r7, sp, #0
 801c838:	6078      	str	r0, [r7, #4]
 801c83a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	885b      	ldrh	r3, [r3, #2]
 801c840:	2b01      	cmp	r3, #1
 801c842:	d108      	bne.n	801c856 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c844:	687a      	ldr	r2, [r7, #4]
 801c846:	23a9      	movs	r3, #169	@ 0xa9
 801c848:	009b      	lsls	r3, r3, #2
 801c84a:	2101      	movs	r1, #1
 801c84c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	0018      	movs	r0, r3
 801c852:	f000 f94a 	bl	801caea <USBD_CtlSendStatus>
  }
}
 801c856:	46c0      	nop			@ (mov r8, r8)
 801c858:	46bd      	mov	sp, r7
 801c85a:	b002      	add	sp, #8
 801c85c:	bd80      	pop	{r7, pc}

0801c85e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c85e:	b580      	push	{r7, lr}
 801c860:	b082      	sub	sp, #8
 801c862:	af00      	add	r7, sp, #0
 801c864:	6078      	str	r0, [r7, #4]
 801c866:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c868:	687a      	ldr	r2, [r7, #4]
 801c86a:	23a7      	movs	r3, #167	@ 0xa7
 801c86c:	009b      	lsls	r3, r3, #2
 801c86e:	5cd3      	ldrb	r3, [r2, r3]
 801c870:	3b01      	subs	r3, #1
 801c872:	2b02      	cmp	r3, #2
 801c874:	d80d      	bhi.n	801c892 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c876:	683b      	ldr	r3, [r7, #0]
 801c878:	885b      	ldrh	r3, [r3, #2]
 801c87a:	2b01      	cmp	r3, #1
 801c87c:	d110      	bne.n	801c8a0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c87e:	687a      	ldr	r2, [r7, #4]
 801c880:	23a9      	movs	r3, #169	@ 0xa9
 801c882:	009b      	lsls	r3, r3, #2
 801c884:	2100      	movs	r1, #0
 801c886:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	0018      	movs	r0, r3
 801c88c:	f000 f92d 	bl	801caea <USBD_CtlSendStatus>
      }
      break;
 801c890:	e006      	b.n	801c8a0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c892:	683a      	ldr	r2, [r7, #0]
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	0011      	movs	r1, r2
 801c898:	0018      	movs	r0, r3
 801c89a:	f000 f83e 	bl	801c91a <USBD_CtlError>
      break;
 801c89e:	e000      	b.n	801c8a2 <USBD_ClrFeature+0x44>
      break;
 801c8a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c8a2:	46c0      	nop			@ (mov r8, r8)
 801c8a4:	46bd      	mov	sp, r7
 801c8a6:	b002      	add	sp, #8
 801c8a8:	bd80      	pop	{r7, pc}

0801c8aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c8aa:	b580      	push	{r7, lr}
 801c8ac:	b082      	sub	sp, #8
 801c8ae:	af00      	add	r7, sp, #0
 801c8b0:	6078      	str	r0, [r7, #4]
 801c8b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c8b4:	683b      	ldr	r3, [r7, #0]
 801c8b6:	781a      	ldrb	r2, [r3, #0]
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c8bc:	683b      	ldr	r3, [r7, #0]
 801c8be:	785a      	ldrb	r2, [r3, #1]
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c8c4:	683b      	ldr	r3, [r7, #0]
 801c8c6:	3302      	adds	r3, #2
 801c8c8:	781b      	ldrb	r3, [r3, #0]
 801c8ca:	001a      	movs	r2, r3
 801c8cc:	683b      	ldr	r3, [r7, #0]
 801c8ce:	3303      	adds	r3, #3
 801c8d0:	781b      	ldrb	r3, [r3, #0]
 801c8d2:	021b      	lsls	r3, r3, #8
 801c8d4:	b29b      	uxth	r3, r3
 801c8d6:	18d3      	adds	r3, r2, r3
 801c8d8:	b29a      	uxth	r2, r3
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	3304      	adds	r3, #4
 801c8e2:	781b      	ldrb	r3, [r3, #0]
 801c8e4:	001a      	movs	r2, r3
 801c8e6:	683b      	ldr	r3, [r7, #0]
 801c8e8:	3305      	adds	r3, #5
 801c8ea:	781b      	ldrb	r3, [r3, #0]
 801c8ec:	021b      	lsls	r3, r3, #8
 801c8ee:	b29b      	uxth	r3, r3
 801c8f0:	18d3      	adds	r3, r2, r3
 801c8f2:	b29a      	uxth	r2, r3
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	3306      	adds	r3, #6
 801c8fc:	781b      	ldrb	r3, [r3, #0]
 801c8fe:	001a      	movs	r2, r3
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	3307      	adds	r3, #7
 801c904:	781b      	ldrb	r3, [r3, #0]
 801c906:	021b      	lsls	r3, r3, #8
 801c908:	b29b      	uxth	r3, r3
 801c90a:	18d3      	adds	r3, r2, r3
 801c90c:	b29a      	uxth	r2, r3
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	80da      	strh	r2, [r3, #6]

}
 801c912:	46c0      	nop			@ (mov r8, r8)
 801c914:	46bd      	mov	sp, r7
 801c916:	b002      	add	sp, #8
 801c918:	bd80      	pop	{r7, pc}

0801c91a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c91a:	b580      	push	{r7, lr}
 801c91c:	b082      	sub	sp, #8
 801c91e:	af00      	add	r7, sp, #0
 801c920:	6078      	str	r0, [r7, #4]
 801c922:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	2180      	movs	r1, #128	@ 0x80
 801c928:	0018      	movs	r0, r3
 801c92a:	f000 fd1e 	bl	801d36a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	2100      	movs	r1, #0
 801c932:	0018      	movs	r0, r3
 801c934:	f000 fd19 	bl	801d36a <USBD_LL_StallEP>
}
 801c938:	46c0      	nop			@ (mov r8, r8)
 801c93a:	46bd      	mov	sp, r7
 801c93c:	b002      	add	sp, #8
 801c93e:	bd80      	pop	{r7, pc}

0801c940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c940:	b590      	push	{r4, r7, lr}
 801c942:	b087      	sub	sp, #28
 801c944:	af00      	add	r7, sp, #0
 801c946:	60f8      	str	r0, [r7, #12]
 801c948:	60b9      	str	r1, [r7, #8]
 801c94a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c94c:	2417      	movs	r4, #23
 801c94e:	193b      	adds	r3, r7, r4
 801c950:	2200      	movs	r2, #0
 801c952:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	2b00      	cmp	r3, #0
 801c958:	d03c      	beq.n	801c9d4 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	0018      	movs	r0, r3
 801c95e:	f000 f83d 	bl	801c9dc <USBD_GetLen>
 801c962:	0003      	movs	r3, r0
 801c964:	3301      	adds	r3, #1
 801c966:	b29b      	uxth	r3, r3
 801c968:	18db      	adds	r3, r3, r3
 801c96a:	b29a      	uxth	r2, r3
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801c970:	193b      	adds	r3, r7, r4
 801c972:	781b      	ldrb	r3, [r3, #0]
 801c974:	193a      	adds	r2, r7, r4
 801c976:	1c59      	adds	r1, r3, #1
 801c978:	7011      	strb	r1, [r2, #0]
 801c97a:	001a      	movs	r2, r3
 801c97c:	68bb      	ldr	r3, [r7, #8]
 801c97e:	189b      	adds	r3, r3, r2
 801c980:	687a      	ldr	r2, [r7, #4]
 801c982:	7812      	ldrb	r2, [r2, #0]
 801c984:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c986:	193b      	adds	r3, r7, r4
 801c988:	781b      	ldrb	r3, [r3, #0]
 801c98a:	193a      	adds	r2, r7, r4
 801c98c:	1c59      	adds	r1, r3, #1
 801c98e:	7011      	strb	r1, [r2, #0]
 801c990:	001a      	movs	r2, r3
 801c992:	68bb      	ldr	r3, [r7, #8]
 801c994:	189b      	adds	r3, r3, r2
 801c996:	2203      	movs	r2, #3
 801c998:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c99a:	e017      	b.n	801c9cc <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	1c5a      	adds	r2, r3, #1
 801c9a0:	60fa      	str	r2, [r7, #12]
 801c9a2:	2417      	movs	r4, #23
 801c9a4:	193a      	adds	r2, r7, r4
 801c9a6:	7812      	ldrb	r2, [r2, #0]
 801c9a8:	1939      	adds	r1, r7, r4
 801c9aa:	1c50      	adds	r0, r2, #1
 801c9ac:	7008      	strb	r0, [r1, #0]
 801c9ae:	0011      	movs	r1, r2
 801c9b0:	68ba      	ldr	r2, [r7, #8]
 801c9b2:	1852      	adds	r2, r2, r1
 801c9b4:	781b      	ldrb	r3, [r3, #0]
 801c9b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c9b8:	193b      	adds	r3, r7, r4
 801c9ba:	781b      	ldrb	r3, [r3, #0]
 801c9bc:	193a      	adds	r2, r7, r4
 801c9be:	1c59      	adds	r1, r3, #1
 801c9c0:	7011      	strb	r1, [r2, #0]
 801c9c2:	001a      	movs	r2, r3
 801c9c4:	68bb      	ldr	r3, [r7, #8]
 801c9c6:	189b      	adds	r3, r3, r2
 801c9c8:	2200      	movs	r2, #0
 801c9ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	781b      	ldrb	r3, [r3, #0]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d1e3      	bne.n	801c99c <USBD_GetString+0x5c>
    }
  }
}
 801c9d4:	46c0      	nop			@ (mov r8, r8)
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	b007      	add	sp, #28
 801c9da:	bd90      	pop	{r4, r7, pc}

0801c9dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b084      	sub	sp, #16
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c9e4:	230f      	movs	r3, #15
 801c9e6:	18fb      	adds	r3, r7, r3
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801c9ec:	e008      	b.n	801ca00 <USBD_GetLen+0x24>
  {
    len++;
 801c9ee:	210f      	movs	r1, #15
 801c9f0:	187b      	adds	r3, r7, r1
 801c9f2:	781a      	ldrb	r2, [r3, #0]
 801c9f4:	187b      	adds	r3, r7, r1
 801c9f6:	3201      	adds	r2, #1
 801c9f8:	701a      	strb	r2, [r3, #0]
    buf++;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	3301      	adds	r3, #1
 801c9fe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	781b      	ldrb	r3, [r3, #0]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d1f2      	bne.n	801c9ee <USBD_GetLen+0x12>
  }

  return len;
 801ca08:	230f      	movs	r3, #15
 801ca0a:	18fb      	adds	r3, r7, r3
 801ca0c:	781b      	ldrb	r3, [r3, #0]
}
 801ca0e:	0018      	movs	r0, r3
 801ca10:	46bd      	mov	sp, r7
 801ca12:	b004      	add	sp, #16
 801ca14:	bd80      	pop	{r7, pc}

0801ca16 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801ca16:	b580      	push	{r7, lr}
 801ca18:	b084      	sub	sp, #16
 801ca1a:	af00      	add	r7, sp, #0
 801ca1c:	60f8      	str	r0, [r7, #12]
 801ca1e:	60b9      	str	r1, [r7, #8]
 801ca20:	1dbb      	adds	r3, r7, #6
 801ca22:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801ca24:	68fa      	ldr	r2, [r7, #12]
 801ca26:	23a5      	movs	r3, #165	@ 0xa5
 801ca28:	009b      	lsls	r3, r3, #2
 801ca2a:	2102      	movs	r1, #2
 801ca2c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801ca2e:	1dbb      	adds	r3, r7, #6
 801ca30:	881a      	ldrh	r2, [r3, #0]
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801ca36:	1dbb      	adds	r3, r7, #6
 801ca38:	881a      	ldrh	r2, [r3, #0]
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ca3e:	1dbb      	adds	r3, r7, #6
 801ca40:	881b      	ldrh	r3, [r3, #0]
 801ca42:	68ba      	ldr	r2, [r7, #8]
 801ca44:	68f8      	ldr	r0, [r7, #12]
 801ca46:	2100      	movs	r1, #0
 801ca48:	f000 fd41 	bl	801d4ce <USBD_LL_Transmit>

  return USBD_OK;
 801ca4c:	2300      	movs	r3, #0
}
 801ca4e:	0018      	movs	r0, r3
 801ca50:	46bd      	mov	sp, r7
 801ca52:	b004      	add	sp, #16
 801ca54:	bd80      	pop	{r7, pc}

0801ca56 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801ca56:	b580      	push	{r7, lr}
 801ca58:	b084      	sub	sp, #16
 801ca5a:	af00      	add	r7, sp, #0
 801ca5c:	60f8      	str	r0, [r7, #12]
 801ca5e:	60b9      	str	r1, [r7, #8]
 801ca60:	1dbb      	adds	r3, r7, #6
 801ca62:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ca64:	1dbb      	adds	r3, r7, #6
 801ca66:	881b      	ldrh	r3, [r3, #0]
 801ca68:	68ba      	ldr	r2, [r7, #8]
 801ca6a:	68f8      	ldr	r0, [r7, #12]
 801ca6c:	2100      	movs	r1, #0
 801ca6e:	f000 fd2e 	bl	801d4ce <USBD_LL_Transmit>

  return USBD_OK;
 801ca72:	2300      	movs	r3, #0
}
 801ca74:	0018      	movs	r0, r3
 801ca76:	46bd      	mov	sp, r7
 801ca78:	b004      	add	sp, #16
 801ca7a:	bd80      	pop	{r7, pc}

0801ca7c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b084      	sub	sp, #16
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	60f8      	str	r0, [r7, #12]
 801ca84:	60b9      	str	r1, [r7, #8]
 801ca86:	1dbb      	adds	r3, r7, #6
 801ca88:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ca8a:	68fa      	ldr	r2, [r7, #12]
 801ca8c:	23a5      	movs	r3, #165	@ 0xa5
 801ca8e:	009b      	lsls	r3, r3, #2
 801ca90:	2103      	movs	r1, #3
 801ca92:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801ca94:	1dbb      	adds	r3, r7, #6
 801ca96:	8819      	ldrh	r1, [r3, #0]
 801ca98:	68fa      	ldr	r2, [r7, #12]
 801ca9a:	23ae      	movs	r3, #174	@ 0xae
 801ca9c:	005b      	lsls	r3, r3, #1
 801ca9e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801caa0:	1dbb      	adds	r3, r7, #6
 801caa2:	8819      	ldrh	r1, [r3, #0]
 801caa4:	68fa      	ldr	r2, [r7, #12]
 801caa6:	23b0      	movs	r3, #176	@ 0xb0
 801caa8:	005b      	lsls	r3, r3, #1
 801caaa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801caac:	1dbb      	adds	r3, r7, #6
 801caae:	881b      	ldrh	r3, [r3, #0]
 801cab0:	68ba      	ldr	r2, [r7, #8]
 801cab2:	68f8      	ldr	r0, [r7, #12]
 801cab4:	2100      	movs	r1, #0
 801cab6:	f000 fd41 	bl	801d53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801caba:	2300      	movs	r3, #0
}
 801cabc:	0018      	movs	r0, r3
 801cabe:	46bd      	mov	sp, r7
 801cac0:	b004      	add	sp, #16
 801cac2:	bd80      	pop	{r7, pc}

0801cac4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b084      	sub	sp, #16
 801cac8:	af00      	add	r7, sp, #0
 801caca:	60f8      	str	r0, [r7, #12]
 801cacc:	60b9      	str	r1, [r7, #8]
 801cace:	1dbb      	adds	r3, r7, #6
 801cad0:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cad2:	1dbb      	adds	r3, r7, #6
 801cad4:	881b      	ldrh	r3, [r3, #0]
 801cad6:	68ba      	ldr	r2, [r7, #8]
 801cad8:	68f8      	ldr	r0, [r7, #12]
 801cada:	2100      	movs	r1, #0
 801cadc:	f000 fd2e 	bl	801d53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cae0:	2300      	movs	r3, #0
}
 801cae2:	0018      	movs	r0, r3
 801cae4:	46bd      	mov	sp, r7
 801cae6:	b004      	add	sp, #16
 801cae8:	bd80      	pop	{r7, pc}

0801caea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801caea:	b580      	push	{r7, lr}
 801caec:	b082      	sub	sp, #8
 801caee:	af00      	add	r7, sp, #0
 801caf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801caf2:	687a      	ldr	r2, [r7, #4]
 801caf4:	23a5      	movs	r3, #165	@ 0xa5
 801caf6:	009b      	lsls	r3, r3, #2
 801caf8:	2104      	movs	r1, #4
 801cafa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cafc:	6878      	ldr	r0, [r7, #4]
 801cafe:	2300      	movs	r3, #0
 801cb00:	2200      	movs	r2, #0
 801cb02:	2100      	movs	r1, #0
 801cb04:	f000 fce3 	bl	801d4ce <USBD_LL_Transmit>

  return USBD_OK;
 801cb08:	2300      	movs	r3, #0
}
 801cb0a:	0018      	movs	r0, r3
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	b002      	add	sp, #8
 801cb10:	bd80      	pop	{r7, pc}

0801cb12 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cb12:	b580      	push	{r7, lr}
 801cb14:	b082      	sub	sp, #8
 801cb16:	af00      	add	r7, sp, #0
 801cb18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cb1a:	687a      	ldr	r2, [r7, #4]
 801cb1c:	23a5      	movs	r3, #165	@ 0xa5
 801cb1e:	009b      	lsls	r3, r3, #2
 801cb20:	2105      	movs	r1, #5
 801cb22:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cb24:	6878      	ldr	r0, [r7, #4]
 801cb26:	2300      	movs	r3, #0
 801cb28:	2200      	movs	r2, #0
 801cb2a:	2100      	movs	r1, #0
 801cb2c:	f000 fd06 	bl	801d53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cb30:	2300      	movs	r3, #0
}
 801cb32:	0018      	movs	r0, r3
 801cb34:	46bd      	mov	sp, r7
 801cb36:	b002      	add	sp, #8
 801cb38:	bd80      	pop	{r7, pc}
	...

0801cb3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cb3c:	b580      	push	{r7, lr}
 801cb3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cb40:	4914      	ldr	r1, [pc, #80]	@ (801cb94 <MX_USB_DEVICE_Init+0x58>)
 801cb42:	4b15      	ldr	r3, [pc, #84]	@ (801cb98 <MX_USB_DEVICE_Init+0x5c>)
 801cb44:	2200      	movs	r2, #0
 801cb46:	0018      	movs	r0, r3
 801cb48:	f7fe fdec 	bl	801b724 <USBD_Init>
 801cb4c:	1e03      	subs	r3, r0, #0
 801cb4e:	d001      	beq.n	801cb54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cb50:	f7eb fbb0 	bl	80082b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cb54:	4a11      	ldr	r2, [pc, #68]	@ (801cb9c <MX_USB_DEVICE_Init+0x60>)
 801cb56:	4b10      	ldr	r3, [pc, #64]	@ (801cb98 <MX_USB_DEVICE_Init+0x5c>)
 801cb58:	0011      	movs	r1, r2
 801cb5a:	0018      	movs	r0, r3
 801cb5c:	f7fe fe13 	bl	801b786 <USBD_RegisterClass>
 801cb60:	1e03      	subs	r3, r0, #0
 801cb62:	d001      	beq.n	801cb68 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cb64:	f7eb fba6 	bl	80082b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cb68:	4a0d      	ldr	r2, [pc, #52]	@ (801cba0 <MX_USB_DEVICE_Init+0x64>)
 801cb6a:	4b0b      	ldr	r3, [pc, #44]	@ (801cb98 <MX_USB_DEVICE_Init+0x5c>)
 801cb6c:	0011      	movs	r1, r2
 801cb6e:	0018      	movs	r0, r3
 801cb70:	f7fe fd28 	bl	801b5c4 <USBD_CDC_RegisterInterface>
 801cb74:	1e03      	subs	r3, r0, #0
 801cb76:	d001      	beq.n	801cb7c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cb78:	f7eb fb9c 	bl	80082b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cb7c:	4b06      	ldr	r3, [pc, #24]	@ (801cb98 <MX_USB_DEVICE_Init+0x5c>)
 801cb7e:	0018      	movs	r0, r3
 801cb80:	f7fe fe21 	bl	801b7c6 <USBD_Start>
 801cb84:	1e03      	subs	r3, r0, #0
 801cb86:	d001      	beq.n	801cb8c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cb88:	f7eb fb94 	bl	80082b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cb8c:	46c0      	nop			@ (mov r8, r8)
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	bd80      	pop	{r7, pc}
 801cb92:	46c0      	nop			@ (mov r8, r8)
 801cb94:	20000200 	.word	0x20000200
 801cb98:	200023c8 	.word	0x200023c8
 801cb9c:	200000ec 	.word	0x200000ec
 801cba0:	200001f0 	.word	0x200001f0

0801cba4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cba4:	b580      	push	{r7, lr}
 801cba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cba8:	4907      	ldr	r1, [pc, #28]	@ (801cbc8 <CDC_Init_FS+0x24>)
 801cbaa:	4b08      	ldr	r3, [pc, #32]	@ (801cbcc <CDC_Init_FS+0x28>)
 801cbac:	2200      	movs	r2, #0
 801cbae:	0018      	movs	r0, r3
 801cbb0:	f7fe fd23 	bl	801b5fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cbb4:	4a06      	ldr	r2, [pc, #24]	@ (801cbd0 <CDC_Init_FS+0x2c>)
 801cbb6:	4b05      	ldr	r3, [pc, #20]	@ (801cbcc <CDC_Init_FS+0x28>)
 801cbb8:	0011      	movs	r1, r2
 801cbba:	0018      	movs	r0, r3
 801cbbc:	f7fe fd39 	bl	801b632 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cbc0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cbc2:	0018      	movs	r0, r3
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bd80      	pop	{r7, pc}
 801cbc8:	20002b4c 	.word	0x20002b4c
 801cbcc:	200023c8 	.word	0x200023c8
 801cbd0:	2000274c 	.word	0x2000274c

0801cbd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801cbd4:	b580      	push	{r7, lr}
 801cbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801cbd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cbda:	0018      	movs	r0, r3
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}

0801cbe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b082      	sub	sp, #8
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6039      	str	r1, [r7, #0]
 801cbe8:	0011      	movs	r1, r2
 801cbea:	1dfb      	adds	r3, r7, #7
 801cbec:	1c02      	adds	r2, r0, #0
 801cbee:	701a      	strb	r2, [r3, #0]
 801cbf0:	1d3b      	adds	r3, r7, #4
 801cbf2:	1c0a      	adds	r2, r1, #0
 801cbf4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801cbf6:	1dfb      	adds	r3, r7, #7
 801cbf8:	781b      	ldrb	r3, [r3, #0]
 801cbfa:	2b23      	cmp	r3, #35	@ 0x23
 801cbfc:	d804      	bhi.n	801cc08 <CDC_Control_FS+0x28>
 801cbfe:	009a      	lsls	r2, r3, #2
 801cc00:	4b04      	ldr	r3, [pc, #16]	@ (801cc14 <CDC_Control_FS+0x34>)
 801cc02:	18d3      	adds	r3, r2, r3
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801cc08:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801cc0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cc0c:	0018      	movs	r0, r3
 801cc0e:	46bd      	mov	sp, r7
 801cc10:	b002      	add	sp, #8
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	08025650 	.word	0x08025650

0801cc18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b082      	sub	sp, #8
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
 801cc20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801cc22:	4b12      	ldr	r3, [pc, #72]	@ (801cc6c <CDC_Receive_FS+0x54>)
 801cc24:	781b      	ldrb	r3, [r3, #0]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d013      	beq.n	801cc52 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801cc2a:	683b      	ldr	r3, [r7, #0]
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	b29a      	uxth	r2, r3
 801cc30:	2301      	movs	r3, #1
 801cc32:	425b      	negs	r3, r3
 801cc34:	6879      	ldr	r1, [r7, #4]
 801cc36:	480e      	ldr	r0, [pc, #56]	@ (801cc70 <CDC_Receive_FS+0x58>)
 801cc38:	f7fa fa46 	bl	80170c8 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cc3c:	687a      	ldr	r2, [r7, #4]
 801cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (801cc74 <CDC_Receive_FS+0x5c>)
 801cc40:	0011      	movs	r1, r2
 801cc42:	0018      	movs	r0, r3
 801cc44:	f7fe fcf5 	bl	801b632 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cc48:	4b0a      	ldr	r3, [pc, #40]	@ (801cc74 <CDC_Receive_FS+0x5c>)
 801cc4a:	0018      	movs	r0, r3
 801cc4c:	f7fe fd3c 	bl	801b6c8 <USBD_CDC_ReceivePacket>
 801cc50:	e006      	b.n	801cc60 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801cc52:	683b      	ldr	r3, [r7, #0]
 801cc54:	681a      	ldr	r2, [r3, #0]
 801cc56:	4b08      	ldr	r3, [pc, #32]	@ (801cc78 <CDC_Receive_FS+0x60>)
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	18d2      	adds	r2, r2, r3
 801cc5c:	4b06      	ldr	r3, [pc, #24]	@ (801cc78 <CDC_Receive_FS+0x60>)
 801cc5e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801cc60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cc62:	0018      	movs	r0, r3
 801cc64:	46bd      	mov	sp, r7
 801cc66:	b002      	add	sp, #8
 801cc68:	bd80      	pop	{r7, pc}
 801cc6a:	46c0      	nop			@ (mov r8, r8)
 801cc6c:	2000268c 	.word	0x2000268c
 801cc70:	20002690 	.word	0x20002690
 801cc74:	200023c8 	.word	0x200023c8
 801cc78:	20002748 	.word	0x20002748

0801cc7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801cc7c:	b5b0      	push	{r4, r5, r7, lr}
 801cc7e:	b084      	sub	sp, #16
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
 801cc84:	000a      	movs	r2, r1
 801cc86:	1cbb      	adds	r3, r7, #2
 801cc88:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801cc8a:	230f      	movs	r3, #15
 801cc8c:	18fb      	adds	r3, r7, r3
 801cc8e:	2200      	movs	r2, #0
 801cc90:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cc92:	4a11      	ldr	r2, [pc, #68]	@ (801ccd8 <CDC_Transmit_FS+0x5c>)
 801cc94:	23ae      	movs	r3, #174	@ 0xae
 801cc96:	009b      	lsls	r3, r3, #2
 801cc98:	58d3      	ldr	r3, [r2, r3]
 801cc9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cc9c:	68ba      	ldr	r2, [r7, #8]
 801cc9e:	2385      	movs	r3, #133	@ 0x85
 801cca0:	009b      	lsls	r3, r3, #2
 801cca2:	58d3      	ldr	r3, [r2, r3]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d001      	beq.n	801ccac <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801cca8:	2301      	movs	r3, #1
 801ccaa:	e010      	b.n	801ccce <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801ccac:	1cbb      	adds	r3, r7, #2
 801ccae:	881a      	ldrh	r2, [r3, #0]
 801ccb0:	6879      	ldr	r1, [r7, #4]
 801ccb2:	4b09      	ldr	r3, [pc, #36]	@ (801ccd8 <CDC_Transmit_FS+0x5c>)
 801ccb4:	0018      	movs	r0, r3
 801ccb6:	f7fe fca0 	bl	801b5fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801ccba:	250f      	movs	r5, #15
 801ccbc:	197c      	adds	r4, r7, r5
 801ccbe:	4b06      	ldr	r3, [pc, #24]	@ (801ccd8 <CDC_Transmit_FS+0x5c>)
 801ccc0:	0018      	movs	r0, r3
 801ccc2:	f7fe fcca 	bl	801b65a <USBD_CDC_TransmitPacket>
 801ccc6:	0003      	movs	r3, r0
 801ccc8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801ccca:	197b      	adds	r3, r7, r5
 801cccc:	781b      	ldrb	r3, [r3, #0]
}
 801ccce:	0018      	movs	r0, r3
 801ccd0:	46bd      	mov	sp, r7
 801ccd2:	b004      	add	sp, #16
 801ccd4:	bdb0      	pop	{r4, r5, r7, pc}
 801ccd6:	46c0      	nop			@ (mov r8, r8)
 801ccd8:	200023c8 	.word	0x200023c8

0801ccdc <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cce0:	4b02      	ldr	r3, [pc, #8]	@ (801ccec <EnableESPProg+0x10>)
 801cce2:	2201      	movs	r2, #1
 801cce4:	701a      	strb	r2, [r3, #0]
}
 801cce6:	46c0      	nop			@ (mov r8, r8)
 801cce8:	46bd      	mov	sp, r7
 801ccea:	bd80      	pop	{r7, pc}
 801ccec:	2000268c 	.word	0x2000268c

0801ccf0 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801ccf4:	4b01      	ldr	r3, [pc, #4]	@ (801ccfc <GetUsbRxPointer+0xc>)
}
 801ccf6:	0018      	movs	r0, r3
 801ccf8:	46bd      	mov	sp, r7
 801ccfa:	bd80      	pop	{r7, pc}
 801ccfc:	2000274c 	.word	0x2000274c

0801cd00 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cd00:	b580      	push	{r7, lr}
 801cd02:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cd04:	4b07      	ldr	r3, [pc, #28]	@ (801cd24 <ResetUsbRxDataSize+0x24>)
 801cd06:	2200      	movs	r2, #0
 801cd08:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cd0a:	4a07      	ldr	r2, [pc, #28]	@ (801cd28 <ResetUsbRxDataSize+0x28>)
 801cd0c:	4b07      	ldr	r3, [pc, #28]	@ (801cd2c <ResetUsbRxDataSize+0x2c>)
 801cd0e:	0011      	movs	r1, r2
 801cd10:	0018      	movs	r0, r3
 801cd12:	f7fe fc8e 	bl	801b632 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cd16:	4b05      	ldr	r3, [pc, #20]	@ (801cd2c <ResetUsbRxDataSize+0x2c>)
 801cd18:	0018      	movs	r0, r3
 801cd1a:	f7fe fcd5 	bl	801b6c8 <USBD_CDC_ReceivePacket>
}
 801cd1e:	46c0      	nop			@ (mov r8, r8)
 801cd20:	46bd      	mov	sp, r7
 801cd22:	bd80      	pop	{r7, pc}
 801cd24:	20002748 	.word	0x20002748
 801cd28:	2000274c 	.word	0x2000274c
 801cd2c:	200023c8 	.word	0x200023c8

0801cd30 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801cd30:	b580      	push	{r7, lr}
 801cd32:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801cd34:	4b02      	ldr	r3, [pc, #8]	@ (801cd40 <GetUsbRxDataSize+0x10>)
 801cd36:	681b      	ldr	r3, [r3, #0]
}
 801cd38:	0018      	movs	r0, r3
 801cd3a:	46bd      	mov	sp, r7
 801cd3c:	bd80      	pop	{r7, pc}
 801cd3e:	46c0      	nop			@ (mov r8, r8)
 801cd40:	20002748 	.word	0x20002748

0801cd44 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801cd44:	b580      	push	{r7, lr}
 801cd46:	b082      	sub	sp, #8
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801cd4c:	687a      	ldr	r2, [r7, #4]
 801cd4e:	4b07      	ldr	r3, [pc, #28]	@ (801cd6c <GetUsbRxNextChunk+0x28>)
 801cd50:	18d2      	adds	r2, r2, r3
 801cd52:	4b07      	ldr	r3, [pc, #28]	@ (801cd70 <GetUsbRxNextChunk+0x2c>)
 801cd54:	0011      	movs	r1, r2
 801cd56:	0018      	movs	r0, r3
 801cd58:	f7fe fc6b 	bl	801b632 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cd5c:	4b04      	ldr	r3, [pc, #16]	@ (801cd70 <GetUsbRxNextChunk+0x2c>)
 801cd5e:	0018      	movs	r0, r3
 801cd60:	f7fe fcb2 	bl	801b6c8 <USBD_CDC_ReceivePacket>
}
 801cd64:	46c0      	nop			@ (mov r8, r8)
 801cd66:	46bd      	mov	sp, r7
 801cd68:	b002      	add	sp, #8
 801cd6a:	bd80      	pop	{r7, pc}
 801cd6c:	2000274c 	.word	0x2000274c
 801cd70:	200023c8 	.word	0x200023c8

0801cd74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd74:	b580      	push	{r7, lr}
 801cd76:	b082      	sub	sp, #8
 801cd78:	af00      	add	r7, sp, #0
 801cd7a:	0002      	movs	r2, r0
 801cd7c:	6039      	str	r1, [r7, #0]
 801cd7e:	1dfb      	adds	r3, r7, #7
 801cd80:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cd82:	683b      	ldr	r3, [r7, #0]
 801cd84:	2212      	movs	r2, #18
 801cd86:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cd88:	4b02      	ldr	r3, [pc, #8]	@ (801cd94 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	b002      	add	sp, #8
 801cd90:	bd80      	pop	{r7, pc}
 801cd92:	46c0      	nop			@ (mov r8, r8)
 801cd94:	2000021c 	.word	0x2000021c

0801cd98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b082      	sub	sp, #8
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	0002      	movs	r2, r0
 801cda0:	6039      	str	r1, [r7, #0]
 801cda2:	1dfb      	adds	r3, r7, #7
 801cda4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cda6:	683b      	ldr	r3, [r7, #0]
 801cda8:	2204      	movs	r2, #4
 801cdaa:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cdac:	4b02      	ldr	r3, [pc, #8]	@ (801cdb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cdae:	0018      	movs	r0, r3
 801cdb0:	46bd      	mov	sp, r7
 801cdb2:	b002      	add	sp, #8
 801cdb4:	bd80      	pop	{r7, pc}
 801cdb6:	46c0      	nop			@ (mov r8, r8)
 801cdb8:	20000230 	.word	0x20000230

0801cdbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	b082      	sub	sp, #8
 801cdc0:	af00      	add	r7, sp, #0
 801cdc2:	0002      	movs	r2, r0
 801cdc4:	6039      	str	r1, [r7, #0]
 801cdc6:	1dfb      	adds	r3, r7, #7
 801cdc8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cdca:	1dfb      	adds	r3, r7, #7
 801cdcc:	781b      	ldrb	r3, [r3, #0]
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d106      	bne.n	801cde0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cdd2:	683a      	ldr	r2, [r7, #0]
 801cdd4:	4908      	ldr	r1, [pc, #32]	@ (801cdf8 <USBD_FS_ProductStrDescriptor+0x3c>)
 801cdd6:	4b09      	ldr	r3, [pc, #36]	@ (801cdfc <USBD_FS_ProductStrDescriptor+0x40>)
 801cdd8:	0018      	movs	r0, r3
 801cdda:	f7ff fdb1 	bl	801c940 <USBD_GetString>
 801cdde:	e005      	b.n	801cdec <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cde0:	683a      	ldr	r2, [r7, #0]
 801cde2:	4905      	ldr	r1, [pc, #20]	@ (801cdf8 <USBD_FS_ProductStrDescriptor+0x3c>)
 801cde4:	4b05      	ldr	r3, [pc, #20]	@ (801cdfc <USBD_FS_ProductStrDescriptor+0x40>)
 801cde6:	0018      	movs	r0, r3
 801cde8:	f7ff fdaa 	bl	801c940 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cdec:	4b02      	ldr	r3, [pc, #8]	@ (801cdf8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801cdee:	0018      	movs	r0, r3
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	b002      	add	sp, #8
 801cdf4:	bd80      	pop	{r7, pc}
 801cdf6:	46c0      	nop			@ (mov r8, r8)
 801cdf8:	20002f4c 	.word	0x20002f4c
 801cdfc:	080250dc 	.word	0x080250dc

0801ce00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce00:	b580      	push	{r7, lr}
 801ce02:	b082      	sub	sp, #8
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	0002      	movs	r2, r0
 801ce08:	6039      	str	r1, [r7, #0]
 801ce0a:	1dfb      	adds	r3, r7, #7
 801ce0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ce0e:	683a      	ldr	r2, [r7, #0]
 801ce10:	4904      	ldr	r1, [pc, #16]	@ (801ce24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ce12:	4b05      	ldr	r3, [pc, #20]	@ (801ce28 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801ce14:	0018      	movs	r0, r3
 801ce16:	f7ff fd93 	bl	801c940 <USBD_GetString>
  return USBD_StrDesc;
 801ce1a:	4b02      	ldr	r3, [pc, #8]	@ (801ce24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801ce1c:	0018      	movs	r0, r3
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	b002      	add	sp, #8
 801ce22:	bd80      	pop	{r7, pc}
 801ce24:	20002f4c 	.word	0x20002f4c
 801ce28:	080250f4 	.word	0x080250f4

0801ce2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce2c:	b580      	push	{r7, lr}
 801ce2e:	b082      	sub	sp, #8
 801ce30:	af00      	add	r7, sp, #0
 801ce32:	0002      	movs	r2, r0
 801ce34:	6039      	str	r1, [r7, #0]
 801ce36:	1dfb      	adds	r3, r7, #7
 801ce38:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	221a      	movs	r2, #26
 801ce3e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ce40:	f000 f84c 	bl	801cedc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ce44:	4b02      	ldr	r3, [pc, #8]	@ (801ce50 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801ce46:	0018      	movs	r0, r3
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	b002      	add	sp, #8
 801ce4c:	bd80      	pop	{r7, pc}
 801ce4e:	46c0      	nop			@ (mov r8, r8)
 801ce50:	20000234 	.word	0x20000234

0801ce54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	0002      	movs	r2, r0
 801ce5c:	6039      	str	r1, [r7, #0]
 801ce5e:	1dfb      	adds	r3, r7, #7
 801ce60:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801ce62:	1dfb      	adds	r3, r7, #7
 801ce64:	781b      	ldrb	r3, [r3, #0]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d106      	bne.n	801ce78 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ce6a:	683a      	ldr	r2, [r7, #0]
 801ce6c:	4908      	ldr	r1, [pc, #32]	@ (801ce90 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801ce6e:	4b09      	ldr	r3, [pc, #36]	@ (801ce94 <USBD_FS_ConfigStrDescriptor+0x40>)
 801ce70:	0018      	movs	r0, r3
 801ce72:	f7ff fd65 	bl	801c940 <USBD_GetString>
 801ce76:	e005      	b.n	801ce84 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ce78:	683a      	ldr	r2, [r7, #0]
 801ce7a:	4905      	ldr	r1, [pc, #20]	@ (801ce90 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801ce7c:	4b05      	ldr	r3, [pc, #20]	@ (801ce94 <USBD_FS_ConfigStrDescriptor+0x40>)
 801ce7e:	0018      	movs	r0, r3
 801ce80:	f7ff fd5e 	bl	801c940 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ce84:	4b02      	ldr	r3, [pc, #8]	@ (801ce90 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801ce86:	0018      	movs	r0, r3
 801ce88:	46bd      	mov	sp, r7
 801ce8a:	b002      	add	sp, #8
 801ce8c:	bd80      	pop	{r7, pc}
 801ce8e:	46c0      	nop			@ (mov r8, r8)
 801ce90:	20002f4c 	.word	0x20002f4c
 801ce94:	08025108 	.word	0x08025108

0801ce98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce98:	b580      	push	{r7, lr}
 801ce9a:	b082      	sub	sp, #8
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	0002      	movs	r2, r0
 801cea0:	6039      	str	r1, [r7, #0]
 801cea2:	1dfb      	adds	r3, r7, #7
 801cea4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cea6:	1dfb      	adds	r3, r7, #7
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d106      	bne.n	801cebc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ceae:	683a      	ldr	r2, [r7, #0]
 801ceb0:	4908      	ldr	r1, [pc, #32]	@ (801ced4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801ceb2:	4b09      	ldr	r3, [pc, #36]	@ (801ced8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801ceb4:	0018      	movs	r0, r3
 801ceb6:	f7ff fd43 	bl	801c940 <USBD_GetString>
 801ceba:	e005      	b.n	801cec8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cebc:	683a      	ldr	r2, [r7, #0]
 801cebe:	4905      	ldr	r1, [pc, #20]	@ (801ced4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cec0:	4b05      	ldr	r3, [pc, #20]	@ (801ced8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cec2:	0018      	movs	r0, r3
 801cec4:	f7ff fd3c 	bl	801c940 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cec8:	4b02      	ldr	r3, [pc, #8]	@ (801ced4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801ceca:	0018      	movs	r0, r3
 801cecc:	46bd      	mov	sp, r7
 801cece:	b002      	add	sp, #8
 801ced0:	bd80      	pop	{r7, pc}
 801ced2:	46c0      	nop			@ (mov r8, r8)
 801ced4:	20002f4c 	.word	0x20002f4c
 801ced8:	08025114 	.word	0x08025114

0801cedc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cedc:	b580      	push	{r7, lr}
 801cede:	b084      	sub	sp, #16
 801cee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cee2:	4b10      	ldr	r3, [pc, #64]	@ (801cf24 <Get_SerialNum+0x48>)
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cee8:	4b0f      	ldr	r3, [pc, #60]	@ (801cf28 <Get_SerialNum+0x4c>)
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ceee:	4b0f      	ldr	r3, [pc, #60]	@ (801cf2c <Get_SerialNum+0x50>)
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cef4:	68fa      	ldr	r2, [r7, #12]
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	18d3      	adds	r3, r2, r3
 801cefa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d00b      	beq.n	801cf1a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cf02:	490b      	ldr	r1, [pc, #44]	@ (801cf30 <Get_SerialNum+0x54>)
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	2208      	movs	r2, #8
 801cf08:	0018      	movs	r0, r3
 801cf0a:	f000 f815 	bl	801cf38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cf0e:	4909      	ldr	r1, [pc, #36]	@ (801cf34 <Get_SerialNum+0x58>)
 801cf10:	68bb      	ldr	r3, [r7, #8]
 801cf12:	2204      	movs	r2, #4
 801cf14:	0018      	movs	r0, r3
 801cf16:	f000 f80f 	bl	801cf38 <IntToUnicode>
  }
}
 801cf1a:	46c0      	nop			@ (mov r8, r8)
 801cf1c:	46bd      	mov	sp, r7
 801cf1e:	b004      	add	sp, #16
 801cf20:	bd80      	pop	{r7, pc}
 801cf22:	46c0      	nop			@ (mov r8, r8)
 801cf24:	1ff80050 	.word	0x1ff80050
 801cf28:	1ff80054 	.word	0x1ff80054
 801cf2c:	1ff80058 	.word	0x1ff80058
 801cf30:	20000236 	.word	0x20000236
 801cf34:	20000246 	.word	0x20000246

0801cf38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cf38:	b580      	push	{r7, lr}
 801cf3a:	b086      	sub	sp, #24
 801cf3c:	af00      	add	r7, sp, #0
 801cf3e:	60f8      	str	r0, [r7, #12]
 801cf40:	60b9      	str	r1, [r7, #8]
 801cf42:	1dfb      	adds	r3, r7, #7
 801cf44:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801cf46:	2117      	movs	r1, #23
 801cf48:	187b      	adds	r3, r7, r1
 801cf4a:	2200      	movs	r2, #0
 801cf4c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801cf4e:	187b      	adds	r3, r7, r1
 801cf50:	2200      	movs	r2, #0
 801cf52:	701a      	strb	r2, [r3, #0]
 801cf54:	e02f      	b.n	801cfb6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	0f1b      	lsrs	r3, r3, #28
 801cf5a:	2b09      	cmp	r3, #9
 801cf5c:	d80d      	bhi.n	801cf7a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	0f1b      	lsrs	r3, r3, #28
 801cf62:	b2da      	uxtb	r2, r3
 801cf64:	2317      	movs	r3, #23
 801cf66:	18fb      	adds	r3, r7, r3
 801cf68:	781b      	ldrb	r3, [r3, #0]
 801cf6a:	005b      	lsls	r3, r3, #1
 801cf6c:	0019      	movs	r1, r3
 801cf6e:	68bb      	ldr	r3, [r7, #8]
 801cf70:	185b      	adds	r3, r3, r1
 801cf72:	3230      	adds	r2, #48	@ 0x30
 801cf74:	b2d2      	uxtb	r2, r2
 801cf76:	701a      	strb	r2, [r3, #0]
 801cf78:	e00c      	b.n	801cf94 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	0f1b      	lsrs	r3, r3, #28
 801cf7e:	b2da      	uxtb	r2, r3
 801cf80:	2317      	movs	r3, #23
 801cf82:	18fb      	adds	r3, r7, r3
 801cf84:	781b      	ldrb	r3, [r3, #0]
 801cf86:	005b      	lsls	r3, r3, #1
 801cf88:	0019      	movs	r1, r3
 801cf8a:	68bb      	ldr	r3, [r7, #8]
 801cf8c:	185b      	adds	r3, r3, r1
 801cf8e:	3237      	adds	r2, #55	@ 0x37
 801cf90:	b2d2      	uxtb	r2, r2
 801cf92:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	011b      	lsls	r3, r3, #4
 801cf98:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cf9a:	2117      	movs	r1, #23
 801cf9c:	187b      	adds	r3, r7, r1
 801cf9e:	781b      	ldrb	r3, [r3, #0]
 801cfa0:	005b      	lsls	r3, r3, #1
 801cfa2:	3301      	adds	r3, #1
 801cfa4:	68ba      	ldr	r2, [r7, #8]
 801cfa6:	18d3      	adds	r3, r2, r3
 801cfa8:	2200      	movs	r2, #0
 801cfaa:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cfac:	187b      	adds	r3, r7, r1
 801cfae:	781a      	ldrb	r2, [r3, #0]
 801cfb0:	187b      	adds	r3, r7, r1
 801cfb2:	3201      	adds	r2, #1
 801cfb4:	701a      	strb	r2, [r3, #0]
 801cfb6:	2317      	movs	r3, #23
 801cfb8:	18fa      	adds	r2, r7, r3
 801cfba:	1dfb      	adds	r3, r7, #7
 801cfbc:	7812      	ldrb	r2, [r2, #0]
 801cfbe:	781b      	ldrb	r3, [r3, #0]
 801cfc0:	429a      	cmp	r2, r3
 801cfc2:	d3c8      	bcc.n	801cf56 <IntToUnicode+0x1e>
  }
}
 801cfc4:	46c0      	nop			@ (mov r8, r8)
 801cfc6:	46c0      	nop			@ (mov r8, r8)
 801cfc8:	46bd      	mov	sp, r7
 801cfca:	b006      	add	sp, #24
 801cfcc:	bd80      	pop	{r7, pc}
	...

0801cfd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b082      	sub	sp, #8
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	4a0a      	ldr	r2, [pc, #40]	@ (801d008 <HAL_PCD_MspInit+0x38>)
 801cfde:	4293      	cmp	r3, r2
 801cfe0:	d10e      	bne.n	801d000 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801cfe2:	4b0a      	ldr	r3, [pc, #40]	@ (801d00c <HAL_PCD_MspInit+0x3c>)
 801cfe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cfe6:	4b09      	ldr	r3, [pc, #36]	@ (801d00c <HAL_PCD_MspInit+0x3c>)
 801cfe8:	2180      	movs	r1, #128	@ 0x80
 801cfea:	0409      	lsls	r1, r1, #16
 801cfec:	430a      	orrs	r2, r1
 801cfee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801cff0:	2200      	movs	r2, #0
 801cff2:	2100      	movs	r1, #0
 801cff4:	201f      	movs	r0, #31
 801cff6:	f7f2 fadf 	bl	800f5b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801cffa:	201f      	movs	r0, #31
 801cffc:	f7f2 faf1 	bl	800f5e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d000:	46c0      	nop			@ (mov r8, r8)
 801d002:	46bd      	mov	sp, r7
 801d004:	b002      	add	sp, #8
 801d006:	bd80      	pop	{r7, pc}
 801d008:	40005c00 	.word	0x40005c00
 801d00c:	40021000 	.word	0x40021000

0801d010 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b082      	sub	sp, #8
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d018:	687a      	ldr	r2, [r7, #4]
 801d01a:	23bc      	movs	r3, #188	@ 0xbc
 801d01c:	009b      	lsls	r3, r3, #2
 801d01e:	58d2      	ldr	r2, [r2, r3]
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	21ac      	movs	r1, #172	@ 0xac
 801d024:	0089      	lsls	r1, r1, #2
 801d026:	468c      	mov	ip, r1
 801d028:	4463      	add	r3, ip
 801d02a:	0019      	movs	r1, r3
 801d02c:	0010      	movs	r0, r2
 801d02e:	f7fe fc1d 	bl	801b86c <USBD_LL_SetupStage>
}
 801d032:	46c0      	nop			@ (mov r8, r8)
 801d034:	46bd      	mov	sp, r7
 801d036:	b002      	add	sp, #8
 801d038:	bd80      	pop	{r7, pc}

0801d03a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d03a:	b590      	push	{r4, r7, lr}
 801d03c:	b083      	sub	sp, #12
 801d03e:	af00      	add	r7, sp, #0
 801d040:	6078      	str	r0, [r7, #4]
 801d042:	000a      	movs	r2, r1
 801d044:	1cfb      	adds	r3, r7, #3
 801d046:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d048:	687a      	ldr	r2, [r7, #4]
 801d04a:	23bc      	movs	r3, #188	@ 0xbc
 801d04c:	009b      	lsls	r3, r3, #2
 801d04e:	58d4      	ldr	r4, [r2, r3]
 801d050:	1cfb      	adds	r3, r7, #3
 801d052:	781a      	ldrb	r2, [r3, #0]
 801d054:	6878      	ldr	r0, [r7, #4]
 801d056:	23be      	movs	r3, #190	@ 0xbe
 801d058:	0059      	lsls	r1, r3, #1
 801d05a:	0013      	movs	r3, r2
 801d05c:	009b      	lsls	r3, r3, #2
 801d05e:	189b      	adds	r3, r3, r2
 801d060:	00db      	lsls	r3, r3, #3
 801d062:	18c3      	adds	r3, r0, r3
 801d064:	185b      	adds	r3, r3, r1
 801d066:	681a      	ldr	r2, [r3, #0]
 801d068:	1cfb      	adds	r3, r7, #3
 801d06a:	781b      	ldrb	r3, [r3, #0]
 801d06c:	0019      	movs	r1, r3
 801d06e:	0020      	movs	r0, r4
 801d070:	f7fe fc5a 	bl	801b928 <USBD_LL_DataOutStage>
}
 801d074:	46c0      	nop			@ (mov r8, r8)
 801d076:	46bd      	mov	sp, r7
 801d078:	b003      	add	sp, #12
 801d07a:	bd90      	pop	{r4, r7, pc}

0801d07c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d07c:	b580      	push	{r7, lr}
 801d07e:	b082      	sub	sp, #8
 801d080:	af00      	add	r7, sp, #0
 801d082:	6078      	str	r0, [r7, #4]
 801d084:	000a      	movs	r2, r1
 801d086:	1cfb      	adds	r3, r7, #3
 801d088:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d08a:	687a      	ldr	r2, [r7, #4]
 801d08c:	23bc      	movs	r3, #188	@ 0xbc
 801d08e:	009b      	lsls	r3, r3, #2
 801d090:	58d0      	ldr	r0, [r2, r3]
 801d092:	1cfb      	adds	r3, r7, #3
 801d094:	781a      	ldrb	r2, [r3, #0]
 801d096:	6879      	ldr	r1, [r7, #4]
 801d098:	0013      	movs	r3, r2
 801d09a:	009b      	lsls	r3, r3, #2
 801d09c:	189b      	adds	r3, r3, r2
 801d09e:	00db      	lsls	r3, r3, #3
 801d0a0:	18cb      	adds	r3, r1, r3
 801d0a2:	333c      	adds	r3, #60	@ 0x3c
 801d0a4:	681a      	ldr	r2, [r3, #0]
 801d0a6:	1cfb      	adds	r3, r7, #3
 801d0a8:	781b      	ldrb	r3, [r3, #0]
 801d0aa:	0019      	movs	r1, r3
 801d0ac:	f7fe fcbe 	bl	801ba2c <USBD_LL_DataInStage>
}
 801d0b0:	46c0      	nop			@ (mov r8, r8)
 801d0b2:	46bd      	mov	sp, r7
 801d0b4:	b002      	add	sp, #8
 801d0b6:	bd80      	pop	{r7, pc}

0801d0b8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0b8:	b580      	push	{r7, lr}
 801d0ba:	b082      	sub	sp, #8
 801d0bc:	af00      	add	r7, sp, #0
 801d0be:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d0c0:	687a      	ldr	r2, [r7, #4]
 801d0c2:	23bc      	movs	r3, #188	@ 0xbc
 801d0c4:	009b      	lsls	r3, r3, #2
 801d0c6:	58d3      	ldr	r3, [r2, r3]
 801d0c8:	0018      	movs	r0, r3
 801d0ca:	f7fe fdf5 	bl	801bcb8 <USBD_LL_SOF>
}
 801d0ce:	46c0      	nop			@ (mov r8, r8)
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	b002      	add	sp, #8
 801d0d4:	bd80      	pop	{r7, pc}

0801d0d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0d6:	b580      	push	{r7, lr}
 801d0d8:	b084      	sub	sp, #16
 801d0da:	af00      	add	r7, sp, #0
 801d0dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d0de:	230f      	movs	r3, #15
 801d0e0:	18fb      	adds	r3, r7, r3
 801d0e2:	2201      	movs	r2, #1
 801d0e4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	689b      	ldr	r3, [r3, #8]
 801d0ea:	2b02      	cmp	r3, #2
 801d0ec:	d001      	beq.n	801d0f2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d0ee:	f7eb f8e1 	bl	80082b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d0f2:	687a      	ldr	r2, [r7, #4]
 801d0f4:	23bc      	movs	r3, #188	@ 0xbc
 801d0f6:	009b      	lsls	r3, r3, #2
 801d0f8:	58d2      	ldr	r2, [r2, r3]
 801d0fa:	230f      	movs	r3, #15
 801d0fc:	18fb      	adds	r3, r7, r3
 801d0fe:	781b      	ldrb	r3, [r3, #0]
 801d100:	0019      	movs	r1, r3
 801d102:	0010      	movs	r0, r2
 801d104:	f7fe fd97 	bl	801bc36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d108:	687a      	ldr	r2, [r7, #4]
 801d10a:	23bc      	movs	r3, #188	@ 0xbc
 801d10c:	009b      	lsls	r3, r3, #2
 801d10e:	58d3      	ldr	r3, [r2, r3]
 801d110:	0018      	movs	r0, r3
 801d112:	f7fe fd48 	bl	801bba6 <USBD_LL_Reset>
}
 801d116:	46c0      	nop			@ (mov r8, r8)
 801d118:	46bd      	mov	sp, r7
 801d11a:	b004      	add	sp, #16
 801d11c:	bd80      	pop	{r7, pc}
	...

0801d120 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b082      	sub	sp, #8
 801d124:	af00      	add	r7, sp, #0
 801d126:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d128:	687a      	ldr	r2, [r7, #4]
 801d12a:	23bc      	movs	r3, #188	@ 0xbc
 801d12c:	009b      	lsls	r3, r3, #2
 801d12e:	58d3      	ldr	r3, [r2, r3]
 801d130:	0018      	movs	r0, r3
 801d132:	f7fe fd91 	bl	801bc58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	699b      	ldr	r3, [r3, #24]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d005      	beq.n	801d14a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d13e:	4b05      	ldr	r3, [pc, #20]	@ (801d154 <HAL_PCD_SuspendCallback+0x34>)
 801d140:	691a      	ldr	r2, [r3, #16]
 801d142:	4b04      	ldr	r3, [pc, #16]	@ (801d154 <HAL_PCD_SuspendCallback+0x34>)
 801d144:	2106      	movs	r1, #6
 801d146:	430a      	orrs	r2, r1
 801d148:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d14a:	46c0      	nop			@ (mov r8, r8)
 801d14c:	46bd      	mov	sp, r7
 801d14e:	b002      	add	sp, #8
 801d150:	bd80      	pop	{r7, pc}
 801d152:	46c0      	nop			@ (mov r8, r8)
 801d154:	e000ed00 	.word	0xe000ed00

0801d158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d158:	b580      	push	{r7, lr}
 801d15a:	b082      	sub	sp, #8
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	699b      	ldr	r3, [r3, #24]
 801d164:	2b00      	cmp	r3, #0
 801d166:	d007      	beq.n	801d178 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d168:	4b09      	ldr	r3, [pc, #36]	@ (801d190 <HAL_PCD_ResumeCallback+0x38>)
 801d16a:	691a      	ldr	r2, [r3, #16]
 801d16c:	4b08      	ldr	r3, [pc, #32]	@ (801d190 <HAL_PCD_ResumeCallback+0x38>)
 801d16e:	2106      	movs	r1, #6
 801d170:	438a      	bics	r2, r1
 801d172:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d174:	f000 fa44 	bl	801d600 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d178:	687a      	ldr	r2, [r7, #4]
 801d17a:	23bc      	movs	r3, #188	@ 0xbc
 801d17c:	009b      	lsls	r3, r3, #2
 801d17e:	58d3      	ldr	r3, [r2, r3]
 801d180:	0018      	movs	r0, r3
 801d182:	f7fe fd81 	bl	801bc88 <USBD_LL_Resume>
}
 801d186:	46c0      	nop			@ (mov r8, r8)
 801d188:	46bd      	mov	sp, r7
 801d18a:	b002      	add	sp, #8
 801d18c:	bd80      	pop	{r7, pc}
 801d18e:	46c0      	nop			@ (mov r8, r8)
 801d190:	e000ed00 	.word	0xe000ed00

0801d194 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b082      	sub	sp, #8
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d19c:	4a2d      	ldr	r2, [pc, #180]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d19e:	23bc      	movs	r3, #188	@ 0xbc
 801d1a0:	009b      	lsls	r3, r3, #2
 801d1a2:	6879      	ldr	r1, [r7, #4]
 801d1a4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d1a6:	687a      	ldr	r2, [r7, #4]
 801d1a8:	23b0      	movs	r3, #176	@ 0xb0
 801d1aa:	009b      	lsls	r3, r3, #2
 801d1ac:	4929      	ldr	r1, [pc, #164]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1ae:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d1b0:	4b28      	ldr	r3, [pc, #160]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1b2:	4a29      	ldr	r2, [pc, #164]	@ (801d258 <USBD_LL_Init+0xc4>)
 801d1b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d1b6:	4b27      	ldr	r3, [pc, #156]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1b8:	2208      	movs	r2, #8
 801d1ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d1bc:	4b25      	ldr	r3, [pc, #148]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1be:	2202      	movs	r2, #2
 801d1c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d1c2:	4b24      	ldr	r3, [pc, #144]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1c4:	2202      	movs	r2, #2
 801d1c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d1c8:	4b22      	ldr	r3, [pc, #136]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1ca:	2200      	movs	r2, #0
 801d1cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d1ce:	4b21      	ldr	r3, [pc, #132]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d1d4:	4b1f      	ldr	r3, [pc, #124]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1d6:	2200      	movs	r2, #0
 801d1d8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d1da:	4b1e      	ldr	r3, [pc, #120]	@ (801d254 <USBD_LL_Init+0xc0>)
 801d1dc:	0018      	movs	r0, r3
 801d1de:	f7f5 ff95 	bl	801310c <HAL_PCD_Init>
 801d1e2:	1e03      	subs	r3, r0, #0
 801d1e4:	d001      	beq.n	801d1ea <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d1e6:	f7eb f865 	bl	80082b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d1ea:	687a      	ldr	r2, [r7, #4]
 801d1ec:	23b0      	movs	r3, #176	@ 0xb0
 801d1ee:	009b      	lsls	r3, r3, #2
 801d1f0:	58d0      	ldr	r0, [r2, r3]
 801d1f2:	2318      	movs	r3, #24
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	2100      	movs	r1, #0
 801d1f8:	f7f7 fd56 	bl	8014ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d1fc:	687a      	ldr	r2, [r7, #4]
 801d1fe:	23b0      	movs	r3, #176	@ 0xb0
 801d200:	009b      	lsls	r3, r3, #2
 801d202:	58d0      	ldr	r0, [r2, r3]
 801d204:	2358      	movs	r3, #88	@ 0x58
 801d206:	2200      	movs	r2, #0
 801d208:	2180      	movs	r1, #128	@ 0x80
 801d20a:	f7f7 fd4d 	bl	8014ca8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d20e:	687a      	ldr	r2, [r7, #4]
 801d210:	23b0      	movs	r3, #176	@ 0xb0
 801d212:	009b      	lsls	r3, r3, #2
 801d214:	58d0      	ldr	r0, [r2, r3]
 801d216:	23c0      	movs	r3, #192	@ 0xc0
 801d218:	2200      	movs	r2, #0
 801d21a:	2181      	movs	r1, #129	@ 0x81
 801d21c:	f7f7 fd44 	bl	8014ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d220:	687a      	ldr	r2, [r7, #4]
 801d222:	23b0      	movs	r3, #176	@ 0xb0
 801d224:	009b      	lsls	r3, r3, #2
 801d226:	58d0      	ldr	r0, [r2, r3]
 801d228:	2388      	movs	r3, #136	@ 0x88
 801d22a:	005b      	lsls	r3, r3, #1
 801d22c:	2200      	movs	r2, #0
 801d22e:	2101      	movs	r1, #1
 801d230:	f7f7 fd3a 	bl	8014ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d234:	687a      	ldr	r2, [r7, #4]
 801d236:	23b0      	movs	r3, #176	@ 0xb0
 801d238:	009b      	lsls	r3, r3, #2
 801d23a:	58d0      	ldr	r0, [r2, r3]
 801d23c:	2380      	movs	r3, #128	@ 0x80
 801d23e:	005b      	lsls	r3, r3, #1
 801d240:	2200      	movs	r2, #0
 801d242:	2182      	movs	r1, #130	@ 0x82
 801d244:	f7f7 fd30 	bl	8014ca8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d248:	2300      	movs	r3, #0
}
 801d24a:	0018      	movs	r0, r3
 801d24c:	46bd      	mov	sp, r7
 801d24e:	b002      	add	sp, #8
 801d250:	bd80      	pop	{r7, pc}
 801d252:	46c0      	nop			@ (mov r8, r8)
 801d254:	2000314c 	.word	0x2000314c
 801d258:	40005c00 	.word	0x40005c00

0801d25c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d25e:	b085      	sub	sp, #20
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d264:	210f      	movs	r1, #15
 801d266:	187b      	adds	r3, r7, r1
 801d268:	2200      	movs	r2, #0
 801d26a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d26c:	260e      	movs	r6, #14
 801d26e:	19bb      	adds	r3, r7, r6
 801d270:	2200      	movs	r2, #0
 801d272:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d274:	687a      	ldr	r2, [r7, #4]
 801d276:	23b0      	movs	r3, #176	@ 0xb0
 801d278:	009b      	lsls	r3, r3, #2
 801d27a:	58d3      	ldr	r3, [r2, r3]
 801d27c:	000d      	movs	r5, r1
 801d27e:	187c      	adds	r4, r7, r1
 801d280:	0018      	movs	r0, r3
 801d282:	f7f6 f843 	bl	801330c <HAL_PCD_Start>
 801d286:	0003      	movs	r3, r0
 801d288:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d28a:	19bc      	adds	r4, r7, r6
 801d28c:	197b      	adds	r3, r7, r5
 801d28e:	781b      	ldrb	r3, [r3, #0]
 801d290:	0018      	movs	r0, r3
 801d292:	f000 f9bc 	bl	801d60e <USBD_Get_USB_Status>
 801d296:	0003      	movs	r3, r0
 801d298:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d29a:	19bb      	adds	r3, r7, r6
 801d29c:	781b      	ldrb	r3, [r3, #0]
}
 801d29e:	0018      	movs	r0, r3
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	b005      	add	sp, #20
 801d2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d2a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d2a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2a8:	b085      	sub	sp, #20
 801d2aa:	af00      	add	r7, sp, #0
 801d2ac:	6078      	str	r0, [r7, #4]
 801d2ae:	000c      	movs	r4, r1
 801d2b0:	0010      	movs	r0, r2
 801d2b2:	0019      	movs	r1, r3
 801d2b4:	1cfb      	adds	r3, r7, #3
 801d2b6:	1c22      	adds	r2, r4, #0
 801d2b8:	701a      	strb	r2, [r3, #0]
 801d2ba:	1cbb      	adds	r3, r7, #2
 801d2bc:	1c02      	adds	r2, r0, #0
 801d2be:	701a      	strb	r2, [r3, #0]
 801d2c0:	003b      	movs	r3, r7
 801d2c2:	1c0a      	adds	r2, r1, #0
 801d2c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d2c6:	260f      	movs	r6, #15
 801d2c8:	19bb      	adds	r3, r7, r6
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d2ce:	250e      	movs	r5, #14
 801d2d0:	197b      	adds	r3, r7, r5
 801d2d2:	2200      	movs	r2, #0
 801d2d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d2d6:	687a      	ldr	r2, [r7, #4]
 801d2d8:	23b0      	movs	r3, #176	@ 0xb0
 801d2da:	009b      	lsls	r3, r3, #2
 801d2dc:	58d0      	ldr	r0, [r2, r3]
 801d2de:	19bc      	adds	r4, r7, r6
 801d2e0:	1cbb      	adds	r3, r7, #2
 801d2e2:	781d      	ldrb	r5, [r3, #0]
 801d2e4:	003b      	movs	r3, r7
 801d2e6:	881a      	ldrh	r2, [r3, #0]
 801d2e8:	1cfb      	adds	r3, r7, #3
 801d2ea:	7819      	ldrb	r1, [r3, #0]
 801d2ec:	002b      	movs	r3, r5
 801d2ee:	f7f6 f9a2 	bl	8013636 <HAL_PCD_EP_Open>
 801d2f2:	0003      	movs	r3, r0
 801d2f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d2f6:	250e      	movs	r5, #14
 801d2f8:	197c      	adds	r4, r7, r5
 801d2fa:	19bb      	adds	r3, r7, r6
 801d2fc:	781b      	ldrb	r3, [r3, #0]
 801d2fe:	0018      	movs	r0, r3
 801d300:	f000 f985 	bl	801d60e <USBD_Get_USB_Status>
 801d304:	0003      	movs	r3, r0
 801d306:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d308:	197b      	adds	r3, r7, r5
 801d30a:	781b      	ldrb	r3, [r3, #0]
}
 801d30c:	0018      	movs	r0, r3
 801d30e:	46bd      	mov	sp, r7
 801d310:	b005      	add	sp, #20
 801d312:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d314 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d316:	b085      	sub	sp, #20
 801d318:	af00      	add	r7, sp, #0
 801d31a:	6078      	str	r0, [r7, #4]
 801d31c:	000a      	movs	r2, r1
 801d31e:	1cfb      	adds	r3, r7, #3
 801d320:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d322:	210f      	movs	r1, #15
 801d324:	187b      	adds	r3, r7, r1
 801d326:	2200      	movs	r2, #0
 801d328:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d32a:	260e      	movs	r6, #14
 801d32c:	19bb      	adds	r3, r7, r6
 801d32e:	2200      	movs	r2, #0
 801d330:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d332:	687a      	ldr	r2, [r7, #4]
 801d334:	23b0      	movs	r3, #176	@ 0xb0
 801d336:	009b      	lsls	r3, r3, #2
 801d338:	58d2      	ldr	r2, [r2, r3]
 801d33a:	000d      	movs	r5, r1
 801d33c:	187c      	adds	r4, r7, r1
 801d33e:	1cfb      	adds	r3, r7, #3
 801d340:	781b      	ldrb	r3, [r3, #0]
 801d342:	0019      	movs	r1, r3
 801d344:	0010      	movs	r0, r2
 801d346:	f7f6 f9e5 	bl	8013714 <HAL_PCD_EP_Close>
 801d34a:	0003      	movs	r3, r0
 801d34c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d34e:	19bc      	adds	r4, r7, r6
 801d350:	197b      	adds	r3, r7, r5
 801d352:	781b      	ldrb	r3, [r3, #0]
 801d354:	0018      	movs	r0, r3
 801d356:	f000 f95a 	bl	801d60e <USBD_Get_USB_Status>
 801d35a:	0003      	movs	r3, r0
 801d35c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d35e:	19bb      	adds	r3, r7, r6
 801d360:	781b      	ldrb	r3, [r3, #0]
}
 801d362:	0018      	movs	r0, r3
 801d364:	46bd      	mov	sp, r7
 801d366:	b005      	add	sp, #20
 801d368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d36a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d36a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d36c:	b085      	sub	sp, #20
 801d36e:	af00      	add	r7, sp, #0
 801d370:	6078      	str	r0, [r7, #4]
 801d372:	000a      	movs	r2, r1
 801d374:	1cfb      	adds	r3, r7, #3
 801d376:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d378:	210f      	movs	r1, #15
 801d37a:	187b      	adds	r3, r7, r1
 801d37c:	2200      	movs	r2, #0
 801d37e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d380:	260e      	movs	r6, #14
 801d382:	19bb      	adds	r3, r7, r6
 801d384:	2200      	movs	r2, #0
 801d386:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d388:	687a      	ldr	r2, [r7, #4]
 801d38a:	23b0      	movs	r3, #176	@ 0xb0
 801d38c:	009b      	lsls	r3, r3, #2
 801d38e:	58d2      	ldr	r2, [r2, r3]
 801d390:	000d      	movs	r5, r1
 801d392:	187c      	adds	r4, r7, r1
 801d394:	1cfb      	adds	r3, r7, #3
 801d396:	781b      	ldrb	r3, [r3, #0]
 801d398:	0019      	movs	r1, r3
 801d39a:	0010      	movs	r0, r2
 801d39c:	f7f6 fa97 	bl	80138ce <HAL_PCD_EP_SetStall>
 801d3a0:	0003      	movs	r3, r0
 801d3a2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3a4:	19bc      	adds	r4, r7, r6
 801d3a6:	197b      	adds	r3, r7, r5
 801d3a8:	781b      	ldrb	r3, [r3, #0]
 801d3aa:	0018      	movs	r0, r3
 801d3ac:	f000 f92f 	bl	801d60e <USBD_Get_USB_Status>
 801d3b0:	0003      	movs	r3, r0
 801d3b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d3b4:	19bb      	adds	r3, r7, r6
 801d3b6:	781b      	ldrb	r3, [r3, #0]
}
 801d3b8:	0018      	movs	r0, r3
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	b005      	add	sp, #20
 801d3be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d3c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3c2:	b085      	sub	sp, #20
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
 801d3c8:	000a      	movs	r2, r1
 801d3ca:	1cfb      	adds	r3, r7, #3
 801d3cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3ce:	210f      	movs	r1, #15
 801d3d0:	187b      	adds	r3, r7, r1
 801d3d2:	2200      	movs	r2, #0
 801d3d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3d6:	260e      	movs	r6, #14
 801d3d8:	19bb      	adds	r3, r7, r6
 801d3da:	2200      	movs	r2, #0
 801d3dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d3de:	687a      	ldr	r2, [r7, #4]
 801d3e0:	23b0      	movs	r3, #176	@ 0xb0
 801d3e2:	009b      	lsls	r3, r3, #2
 801d3e4:	58d2      	ldr	r2, [r2, r3]
 801d3e6:	000d      	movs	r5, r1
 801d3e8:	187c      	adds	r4, r7, r1
 801d3ea:	1cfb      	adds	r3, r7, #3
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	0019      	movs	r1, r3
 801d3f0:	0010      	movs	r0, r2
 801d3f2:	f7f6 fac8 	bl	8013986 <HAL_PCD_EP_ClrStall>
 801d3f6:	0003      	movs	r3, r0
 801d3f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3fa:	19bc      	adds	r4, r7, r6
 801d3fc:	197b      	adds	r3, r7, r5
 801d3fe:	781b      	ldrb	r3, [r3, #0]
 801d400:	0018      	movs	r0, r3
 801d402:	f000 f904 	bl	801d60e <USBD_Get_USB_Status>
 801d406:	0003      	movs	r3, r0
 801d408:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d40a:	19bb      	adds	r3, r7, r6
 801d40c:	781b      	ldrb	r3, [r3, #0]
}
 801d40e:	0018      	movs	r0, r3
 801d410:	46bd      	mov	sp, r7
 801d412:	b005      	add	sp, #20
 801d414:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d416 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d416:	b580      	push	{r7, lr}
 801d418:	b084      	sub	sp, #16
 801d41a:	af00      	add	r7, sp, #0
 801d41c:	6078      	str	r0, [r7, #4]
 801d41e:	000a      	movs	r2, r1
 801d420:	1cfb      	adds	r3, r7, #3
 801d422:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d424:	687a      	ldr	r2, [r7, #4]
 801d426:	23b0      	movs	r3, #176	@ 0xb0
 801d428:	009b      	lsls	r3, r3, #2
 801d42a:	58d3      	ldr	r3, [r2, r3]
 801d42c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d42e:	1cfb      	adds	r3, r7, #3
 801d430:	781b      	ldrb	r3, [r3, #0]
 801d432:	b25b      	sxtb	r3, r3
 801d434:	2b00      	cmp	r3, #0
 801d436:	da0d      	bge.n	801d454 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d438:	1cfb      	adds	r3, r7, #3
 801d43a:	781b      	ldrb	r3, [r3, #0]
 801d43c:	227f      	movs	r2, #127	@ 0x7f
 801d43e:	4013      	ands	r3, r2
 801d440:	68f9      	ldr	r1, [r7, #12]
 801d442:	1c5a      	adds	r2, r3, #1
 801d444:	0013      	movs	r3, r2
 801d446:	009b      	lsls	r3, r3, #2
 801d448:	189b      	adds	r3, r3, r2
 801d44a:	00db      	lsls	r3, r3, #3
 801d44c:	18cb      	adds	r3, r1, r3
 801d44e:	3302      	adds	r3, #2
 801d450:	781b      	ldrb	r3, [r3, #0]
 801d452:	e00d      	b.n	801d470 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d454:	1cfb      	adds	r3, r7, #3
 801d456:	781b      	ldrb	r3, [r3, #0]
 801d458:	227f      	movs	r2, #127	@ 0x7f
 801d45a:	401a      	ands	r2, r3
 801d45c:	68f8      	ldr	r0, [r7, #12]
 801d45e:	23b5      	movs	r3, #181	@ 0xb5
 801d460:	0059      	lsls	r1, r3, #1
 801d462:	0013      	movs	r3, r2
 801d464:	009b      	lsls	r3, r3, #2
 801d466:	189b      	adds	r3, r3, r2
 801d468:	00db      	lsls	r3, r3, #3
 801d46a:	18c3      	adds	r3, r0, r3
 801d46c:	185b      	adds	r3, r3, r1
 801d46e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d470:	0018      	movs	r0, r3
 801d472:	46bd      	mov	sp, r7
 801d474:	b004      	add	sp, #16
 801d476:	bd80      	pop	{r7, pc}

0801d478 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d47a:	b085      	sub	sp, #20
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
 801d480:	000a      	movs	r2, r1
 801d482:	1cfb      	adds	r3, r7, #3
 801d484:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d486:	210f      	movs	r1, #15
 801d488:	187b      	adds	r3, r7, r1
 801d48a:	2200      	movs	r2, #0
 801d48c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d48e:	260e      	movs	r6, #14
 801d490:	19bb      	adds	r3, r7, r6
 801d492:	2200      	movs	r2, #0
 801d494:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d496:	687a      	ldr	r2, [r7, #4]
 801d498:	23b0      	movs	r3, #176	@ 0xb0
 801d49a:	009b      	lsls	r3, r3, #2
 801d49c:	58d2      	ldr	r2, [r2, r3]
 801d49e:	000d      	movs	r5, r1
 801d4a0:	187c      	adds	r4, r7, r1
 801d4a2:	1cfb      	adds	r3, r7, #3
 801d4a4:	781b      	ldrb	r3, [r3, #0]
 801d4a6:	0019      	movs	r1, r3
 801d4a8:	0010      	movs	r0, r2
 801d4aa:	f7f6 f899 	bl	80135e0 <HAL_PCD_SetAddress>
 801d4ae:	0003      	movs	r3, r0
 801d4b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4b2:	19bc      	adds	r4, r7, r6
 801d4b4:	197b      	adds	r3, r7, r5
 801d4b6:	781b      	ldrb	r3, [r3, #0]
 801d4b8:	0018      	movs	r0, r3
 801d4ba:	f000 f8a8 	bl	801d60e <USBD_Get_USB_Status>
 801d4be:	0003      	movs	r3, r0
 801d4c0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d4c2:	19bb      	adds	r3, r7, r6
 801d4c4:	781b      	ldrb	r3, [r3, #0]
}
 801d4c6:	0018      	movs	r0, r3
 801d4c8:	46bd      	mov	sp, r7
 801d4ca:	b005      	add	sp, #20
 801d4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4d0:	b087      	sub	sp, #28
 801d4d2:	af00      	add	r7, sp, #0
 801d4d4:	60f8      	str	r0, [r7, #12]
 801d4d6:	0008      	movs	r0, r1
 801d4d8:	607a      	str	r2, [r7, #4]
 801d4da:	0019      	movs	r1, r3
 801d4dc:	230b      	movs	r3, #11
 801d4de:	18fb      	adds	r3, r7, r3
 801d4e0:	1c02      	adds	r2, r0, #0
 801d4e2:	701a      	strb	r2, [r3, #0]
 801d4e4:	2408      	movs	r4, #8
 801d4e6:	193b      	adds	r3, r7, r4
 801d4e8:	1c0a      	adds	r2, r1, #0
 801d4ea:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4ec:	2117      	movs	r1, #23
 801d4ee:	187b      	adds	r3, r7, r1
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4f4:	2516      	movs	r5, #22
 801d4f6:	197b      	adds	r3, r7, r5
 801d4f8:	2200      	movs	r2, #0
 801d4fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d4fc:	68fa      	ldr	r2, [r7, #12]
 801d4fe:	23b0      	movs	r3, #176	@ 0xb0
 801d500:	009b      	lsls	r3, r3, #2
 801d502:	58d0      	ldr	r0, [r2, r3]
 801d504:	193b      	adds	r3, r7, r4
 801d506:	881d      	ldrh	r5, [r3, #0]
 801d508:	000e      	movs	r6, r1
 801d50a:	187c      	adds	r4, r7, r1
 801d50c:	687a      	ldr	r2, [r7, #4]
 801d50e:	230b      	movs	r3, #11
 801d510:	18fb      	adds	r3, r7, r3
 801d512:	7819      	ldrb	r1, [r3, #0]
 801d514:	002b      	movs	r3, r5
 801d516:	f7f6 f99e 	bl	8013856 <HAL_PCD_EP_Transmit>
 801d51a:	0003      	movs	r3, r0
 801d51c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d51e:	2516      	movs	r5, #22
 801d520:	197c      	adds	r4, r7, r5
 801d522:	19bb      	adds	r3, r7, r6
 801d524:	781b      	ldrb	r3, [r3, #0]
 801d526:	0018      	movs	r0, r3
 801d528:	f000 f871 	bl	801d60e <USBD_Get_USB_Status>
 801d52c:	0003      	movs	r3, r0
 801d52e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d530:	197b      	adds	r3, r7, r5
 801d532:	781b      	ldrb	r3, [r3, #0]
}
 801d534:	0018      	movs	r0, r3
 801d536:	46bd      	mov	sp, r7
 801d538:	b007      	add	sp, #28
 801d53a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d53c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d53e:	b087      	sub	sp, #28
 801d540:	af00      	add	r7, sp, #0
 801d542:	60f8      	str	r0, [r7, #12]
 801d544:	0008      	movs	r0, r1
 801d546:	607a      	str	r2, [r7, #4]
 801d548:	0019      	movs	r1, r3
 801d54a:	230b      	movs	r3, #11
 801d54c:	18fb      	adds	r3, r7, r3
 801d54e:	1c02      	adds	r2, r0, #0
 801d550:	701a      	strb	r2, [r3, #0]
 801d552:	2408      	movs	r4, #8
 801d554:	193b      	adds	r3, r7, r4
 801d556:	1c0a      	adds	r2, r1, #0
 801d558:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d55a:	2117      	movs	r1, #23
 801d55c:	187b      	adds	r3, r7, r1
 801d55e:	2200      	movs	r2, #0
 801d560:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d562:	2516      	movs	r5, #22
 801d564:	197b      	adds	r3, r7, r5
 801d566:	2200      	movs	r2, #0
 801d568:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d56a:	68fa      	ldr	r2, [r7, #12]
 801d56c:	23b0      	movs	r3, #176	@ 0xb0
 801d56e:	009b      	lsls	r3, r3, #2
 801d570:	58d0      	ldr	r0, [r2, r3]
 801d572:	193b      	adds	r3, r7, r4
 801d574:	881d      	ldrh	r5, [r3, #0]
 801d576:	000e      	movs	r6, r1
 801d578:	187c      	adds	r4, r7, r1
 801d57a:	687a      	ldr	r2, [r7, #4]
 801d57c:	230b      	movs	r3, #11
 801d57e:	18fb      	adds	r3, r7, r3
 801d580:	7819      	ldrb	r1, [r3, #0]
 801d582:	002b      	movs	r3, r5
 801d584:	f7f6 f917 	bl	80137b6 <HAL_PCD_EP_Receive>
 801d588:	0003      	movs	r3, r0
 801d58a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d58c:	2516      	movs	r5, #22
 801d58e:	197c      	adds	r4, r7, r5
 801d590:	19bb      	adds	r3, r7, r6
 801d592:	781b      	ldrb	r3, [r3, #0]
 801d594:	0018      	movs	r0, r3
 801d596:	f000 f83a 	bl	801d60e <USBD_Get_USB_Status>
 801d59a:	0003      	movs	r3, r0
 801d59c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d59e:	197b      	adds	r3, r7, r5
 801d5a0:	781b      	ldrb	r3, [r3, #0]
}
 801d5a2:	0018      	movs	r0, r3
 801d5a4:	46bd      	mov	sp, r7
 801d5a6:	b007      	add	sp, #28
 801d5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5aa:	b580      	push	{r7, lr}
 801d5ac:	b082      	sub	sp, #8
 801d5ae:	af00      	add	r7, sp, #0
 801d5b0:	6078      	str	r0, [r7, #4]
 801d5b2:	000a      	movs	r2, r1
 801d5b4:	1cfb      	adds	r3, r7, #3
 801d5b6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d5b8:	687a      	ldr	r2, [r7, #4]
 801d5ba:	23b0      	movs	r3, #176	@ 0xb0
 801d5bc:	009b      	lsls	r3, r3, #2
 801d5be:	58d2      	ldr	r2, [r2, r3]
 801d5c0:	1cfb      	adds	r3, r7, #3
 801d5c2:	781b      	ldrb	r3, [r3, #0]
 801d5c4:	0019      	movs	r1, r3
 801d5c6:	0010      	movs	r0, r2
 801d5c8:	f7f6 f92c 	bl	8013824 <HAL_PCD_EP_GetRxCount>
 801d5cc:	0003      	movs	r3, r0
}
 801d5ce:	0018      	movs	r0, r3
 801d5d0:	46bd      	mov	sp, r7
 801d5d2:	b002      	add	sp, #8
 801d5d4:	bd80      	pop	{r7, pc}
	...

0801d5d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d5d8:	b580      	push	{r7, lr}
 801d5da:	b082      	sub	sp, #8
 801d5dc:	af00      	add	r7, sp, #0
 801d5de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d5e0:	4b02      	ldr	r3, [pc, #8]	@ (801d5ec <USBD_static_malloc+0x14>)
}
 801d5e2:	0018      	movs	r0, r3
 801d5e4:	46bd      	mov	sp, r7
 801d5e6:	b002      	add	sp, #8
 801d5e8:	bd80      	pop	{r7, pc}
 801d5ea:	46c0      	nop			@ (mov r8, r8)
 801d5ec:	20003440 	.word	0x20003440

0801d5f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b082      	sub	sp, #8
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	6078      	str	r0, [r7, #4]

}
 801d5f8:	46c0      	nop			@ (mov r8, r8)
 801d5fa:	46bd      	mov	sp, r7
 801d5fc:	b002      	add	sp, #8
 801d5fe:	bd80      	pop	{r7, pc}

0801d600 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d600:	b580      	push	{r7, lr}
 801d602:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d604:	f7ea fd10 	bl	8008028 <SystemClock_Config>
}
 801d608:	46c0      	nop			@ (mov r8, r8)
 801d60a:	46bd      	mov	sp, r7
 801d60c:	bd80      	pop	{r7, pc}

0801d60e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d60e:	b580      	push	{r7, lr}
 801d610:	b084      	sub	sp, #16
 801d612:	af00      	add	r7, sp, #0
 801d614:	0002      	movs	r2, r0
 801d616:	1dfb      	adds	r3, r7, #7
 801d618:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d61a:	230f      	movs	r3, #15
 801d61c:	18fb      	adds	r3, r7, r3
 801d61e:	2200      	movs	r2, #0
 801d620:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d622:	1dfb      	adds	r3, r7, #7
 801d624:	781b      	ldrb	r3, [r3, #0]
 801d626:	2b03      	cmp	r3, #3
 801d628:	d017      	beq.n	801d65a <USBD_Get_USB_Status+0x4c>
 801d62a:	dc1b      	bgt.n	801d664 <USBD_Get_USB_Status+0x56>
 801d62c:	2b02      	cmp	r3, #2
 801d62e:	d00f      	beq.n	801d650 <USBD_Get_USB_Status+0x42>
 801d630:	dc18      	bgt.n	801d664 <USBD_Get_USB_Status+0x56>
 801d632:	2b00      	cmp	r3, #0
 801d634:	d002      	beq.n	801d63c <USBD_Get_USB_Status+0x2e>
 801d636:	2b01      	cmp	r3, #1
 801d638:	d005      	beq.n	801d646 <USBD_Get_USB_Status+0x38>
 801d63a:	e013      	b.n	801d664 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d63c:	230f      	movs	r3, #15
 801d63e:	18fb      	adds	r3, r7, r3
 801d640:	2200      	movs	r2, #0
 801d642:	701a      	strb	r2, [r3, #0]
    break;
 801d644:	e013      	b.n	801d66e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d646:	230f      	movs	r3, #15
 801d648:	18fb      	adds	r3, r7, r3
 801d64a:	2202      	movs	r2, #2
 801d64c:	701a      	strb	r2, [r3, #0]
    break;
 801d64e:	e00e      	b.n	801d66e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d650:	230f      	movs	r3, #15
 801d652:	18fb      	adds	r3, r7, r3
 801d654:	2201      	movs	r2, #1
 801d656:	701a      	strb	r2, [r3, #0]
    break;
 801d658:	e009      	b.n	801d66e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d65a:	230f      	movs	r3, #15
 801d65c:	18fb      	adds	r3, r7, r3
 801d65e:	2202      	movs	r2, #2
 801d660:	701a      	strb	r2, [r3, #0]
    break;
 801d662:	e004      	b.n	801d66e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d664:	230f      	movs	r3, #15
 801d666:	18fb      	adds	r3, r7, r3
 801d668:	2202      	movs	r2, #2
 801d66a:	701a      	strb	r2, [r3, #0]
    break;
 801d66c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d66e:	230f      	movs	r3, #15
 801d670:	18fb      	adds	r3, r7, r3
 801d672:	781b      	ldrb	r3, [r3, #0]
}
 801d674:	0018      	movs	r0, r3
 801d676:	46bd      	mov	sp, r7
 801d678:	b004      	add	sp, #16
 801d67a:	bd80      	pop	{r7, pc}

0801d67c <arm_cfft_radix4by2_q31>:
 801d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d67e:	465f      	mov	r7, fp
 801d680:	4656      	mov	r6, sl
 801d682:	464d      	mov	r5, r9
 801d684:	4644      	mov	r4, r8
 801d686:	000b      	movs	r3, r1
 801d688:	b4f0      	push	{r4, r5, r6, r7}
 801d68a:	085b      	lsrs	r3, r3, #1
 801d68c:	b08f      	sub	sp, #60	@ 0x3c
 801d68e:	910a      	str	r1, [sp, #40]	@ 0x28
 801d690:	0007      	movs	r7, r0
 801d692:	9009      	str	r0, [sp, #36]	@ 0x24
 801d694:	0011      	movs	r1, r2
 801d696:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d698:	930c      	str	r3, [sp, #48]	@ 0x30
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d100      	bne.n	801d6a0 <arm_cfft_radix4by2_q31+0x24>
 801d69e:	e0a0      	b.n	801d7e2 <arm_cfft_radix4by2_q31+0x166>
 801d6a0:	0002      	movs	r2, r0
 801d6a2:	00db      	lsls	r3, r3, #3
 801d6a4:	3204      	adds	r2, #4
 801d6a6:	4691      	mov	r9, r2
 801d6a8:	4698      	mov	r8, r3
 801d6aa:	000a      	movs	r2, r1
 801d6ac:	464e      	mov	r6, r9
 801d6ae:	4442      	add	r2, r8
 801d6b0:	4699      	mov	r9, r3
 801d6b2:	4688      	mov	r8, r1
 801d6b4:	9208      	str	r2, [sp, #32]
 801d6b6:	900d      	str	r0, [sp, #52]	@ 0x34
 801d6b8:	4643      	mov	r3, r8
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	469b      	mov	fp, r3
 801d6be:	4643      	mov	r3, r8
 801d6c0:	685b      	ldr	r3, [r3, #4]
 801d6c2:	469a      	mov	sl, r3
 801d6c4:	683b      	ldr	r3, [r7, #0]
 801d6c6:	109c      	asrs	r4, r3, #2
 801d6c8:	464b      	mov	r3, r9
 801d6ca:	58fb      	ldr	r3, [r7, r3]
 801d6cc:	109a      	asrs	r2, r3, #2
 801d6ce:	18a3      	adds	r3, r4, r2
 801d6d0:	603b      	str	r3, [r7, #0]
 801d6d2:	6833      	ldr	r3, [r6, #0]
 801d6d4:	1aa4      	subs	r4, r4, r2
 801d6d6:	109d      	asrs	r5, r3, #2
 801d6d8:	464b      	mov	r3, r9
 801d6da:	58f3      	ldr	r3, [r6, r3]
 801d6dc:	17e2      	asrs	r2, r4, #31
 801d6de:	109b      	asrs	r3, r3, #2
 801d6e0:	18e9      	adds	r1, r5, r3
 801d6e2:	6031      	str	r1, [r6, #0]
 801d6e4:	0011      	movs	r1, r2
 801d6e6:	465a      	mov	r2, fp
 801d6e8:	17d2      	asrs	r2, r2, #31
 801d6ea:	0010      	movs	r0, r2
 801d6ec:	4652      	mov	r2, sl
 801d6ee:	1aed      	subs	r5, r5, r3
 801d6f0:	17eb      	asrs	r3, r5, #31
 801d6f2:	17d2      	asrs	r2, r2, #31
 801d6f4:	9307      	str	r3, [sp, #28]
 801d6f6:	9204      	str	r2, [sp, #16]
 801d6f8:	0003      	movs	r3, r0
 801d6fa:	465a      	mov	r2, fp
 801d6fc:	9006      	str	r0, [sp, #24]
 801d6fe:	0020      	movs	r0, r4
 801d700:	9105      	str	r1, [sp, #20]
 801d702:	f7e2 ff5d 	bl	80005c0 <__aeabi_lmul>
 801d706:	2280      	movs	r2, #128	@ 0x80
 801d708:	2300      	movs	r3, #0
 801d70a:	0612      	lsls	r2, r2, #24
 801d70c:	1880      	adds	r0, r0, r2
 801d70e:	4159      	adcs	r1, r3
 801d710:	2300      	movs	r3, #0
 801d712:	9101      	str	r1, [sp, #4]
 801d714:	9300      	str	r3, [sp, #0]
 801d716:	4652      	mov	r2, sl
 801d718:	9b04      	ldr	r3, [sp, #16]
 801d71a:	0028      	movs	r0, r5
 801d71c:	17e9      	asrs	r1, r5, #31
 801d71e:	f7e2 ff4f 	bl	80005c0 <__aeabi_lmul>
 801d722:	9a00      	ldr	r2, [sp, #0]
 801d724:	9b01      	ldr	r3, [sp, #4]
 801d726:	1880      	adds	r0, r0, r2
 801d728:	4159      	adcs	r1, r3
 801d72a:	2280      	movs	r2, #128	@ 0x80
 801d72c:	2300      	movs	r3, #0
 801d72e:	0612      	lsls	r2, r2, #24
 801d730:	1880      	adds	r0, r0, r2
 801d732:	4159      	adcs	r1, r3
 801d734:	464a      	mov	r2, r9
 801d736:	004b      	lsls	r3, r1, #1
 801d738:	50bb      	str	r3, [r7, r2]
 801d73a:	4658      	mov	r0, fp
 801d73c:	002a      	movs	r2, r5
 801d73e:	9b07      	ldr	r3, [sp, #28]
 801d740:	9906      	ldr	r1, [sp, #24]
 801d742:	f7e2 ff3d 	bl	80005c0 <__aeabi_lmul>
 801d746:	2280      	movs	r2, #128	@ 0x80
 801d748:	2300      	movs	r3, #0
 801d74a:	0612      	lsls	r2, r2, #24
 801d74c:	1880      	adds	r0, r0, r2
 801d74e:	4159      	adcs	r1, r3
 801d750:	2000      	movs	r0, #0
 801d752:	9103      	str	r1, [sp, #12]
 801d754:	9002      	str	r0, [sp, #8]
 801d756:	4652      	mov	r2, sl
 801d758:	9b04      	ldr	r3, [sp, #16]
 801d75a:	0020      	movs	r0, r4
 801d75c:	9905      	ldr	r1, [sp, #20]
 801d75e:	f7e2 ff2f 	bl	80005c0 <__aeabi_lmul>
 801d762:	9a02      	ldr	r2, [sp, #8]
 801d764:	9b03      	ldr	r3, [sp, #12]
 801d766:	1a12      	subs	r2, r2, r0
 801d768:	418b      	sbcs	r3, r1
 801d76a:	2080      	movs	r0, #128	@ 0x80
 801d76c:	2100      	movs	r1, #0
 801d76e:	0600      	lsls	r0, r0, #24
 801d770:	1812      	adds	r2, r2, r0
 801d772:	414b      	adcs	r3, r1
 801d774:	464a      	mov	r2, r9
 801d776:	005b      	lsls	r3, r3, #1
 801d778:	50b3      	str	r3, [r6, r2]
 801d77a:	2308      	movs	r3, #8
 801d77c:	469c      	mov	ip, r3
 801d77e:	9b08      	ldr	r3, [sp, #32]
 801d780:	44e0      	add	r8, ip
 801d782:	3708      	adds	r7, #8
 801d784:	3608      	adds	r6, #8
 801d786:	4598      	cmp	r8, r3
 801d788:	d196      	bne.n	801d6b8 <arm_cfft_radix4by2_q31+0x3c>
 801d78a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d78c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d78e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d790:	2302      	movs	r3, #2
 801d792:	003a      	movs	r2, r7
 801d794:	0029      	movs	r1, r5
 801d796:	0020      	movs	r0, r4
 801d798:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d79a:	f000 f957 	bl	801da4c <arm_radix4_butterfly_q31>
 801d79e:	46a4      	mov	ip, r4
 801d7a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d7a2:	2302      	movs	r3, #2
 801d7a4:	0088      	lsls	r0, r1, #2
 801d7a6:	4460      	add	r0, ip
 801d7a8:	003a      	movs	r2, r7
 801d7aa:	0029      	movs	r1, r5
 801d7ac:	f000 f94e 	bl	801da4c <arm_radix4_butterfly_q31>
 801d7b0:	46a4      	mov	ip, r4
 801d7b2:	0128      	lsls	r0, r5, #4
 801d7b4:	4460      	add	r0, ip
 801d7b6:	6833      	ldr	r3, [r6, #0]
 801d7b8:	005b      	lsls	r3, r3, #1
 801d7ba:	6033      	str	r3, [r6, #0]
 801d7bc:	6873      	ldr	r3, [r6, #4]
 801d7be:	005b      	lsls	r3, r3, #1
 801d7c0:	6073      	str	r3, [r6, #4]
 801d7c2:	68b3      	ldr	r3, [r6, #8]
 801d7c4:	005b      	lsls	r3, r3, #1
 801d7c6:	60b3      	str	r3, [r6, #8]
 801d7c8:	68f3      	ldr	r3, [r6, #12]
 801d7ca:	005b      	lsls	r3, r3, #1
 801d7cc:	60f3      	str	r3, [r6, #12]
 801d7ce:	3610      	adds	r6, #16
 801d7d0:	42b0      	cmp	r0, r6
 801d7d2:	d1f0      	bne.n	801d7b6 <arm_cfft_radix4by2_q31+0x13a>
 801d7d4:	b00f      	add	sp, #60	@ 0x3c
 801d7d6:	bc3c      	pop	{r2, r3, r4, r5}
 801d7d8:	4690      	mov	r8, r2
 801d7da:	4699      	mov	r9, r3
 801d7dc:	46a2      	mov	sl, r4
 801d7de:	46ab      	mov	fp, r5
 801d7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7e2:	2302      	movs	r3, #2
 801d7e4:	2100      	movs	r1, #0
 801d7e6:	0015      	movs	r5, r2
 801d7e8:	f000 f930 	bl	801da4c <arm_radix4_butterfly_q31>
 801d7ec:	46bc      	mov	ip, r7
 801d7ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d7f0:	002a      	movs	r2, r5
 801d7f2:	0098      	lsls	r0, r3, #2
 801d7f4:	4460      	add	r0, ip
 801d7f6:	2302      	movs	r3, #2
 801d7f8:	2100      	movs	r1, #0
 801d7fa:	f000 f927 	bl	801da4c <arm_radix4_butterfly_q31>
 801d7fe:	e7e9      	b.n	801d7d4 <arm_cfft_radix4by2_q31+0x158>

0801d800 <arm_cfft_radix4by2_inverse_q31>:
 801d800:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d802:	465f      	mov	r7, fp
 801d804:	4656      	mov	r6, sl
 801d806:	464d      	mov	r5, r9
 801d808:	4644      	mov	r4, r8
 801d80a:	000b      	movs	r3, r1
 801d80c:	b4f0      	push	{r4, r5, r6, r7}
 801d80e:	085b      	lsrs	r3, r3, #1
 801d810:	b08f      	sub	sp, #60	@ 0x3c
 801d812:	910a      	str	r1, [sp, #40]	@ 0x28
 801d814:	0007      	movs	r7, r0
 801d816:	9009      	str	r0, [sp, #36]	@ 0x24
 801d818:	0011      	movs	r1, r2
 801d81a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d81c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d81e:	2b00      	cmp	r3, #0
 801d820:	d100      	bne.n	801d824 <arm_cfft_radix4by2_inverse_q31+0x24>
 801d822:	e0a0      	b.n	801d966 <arm_cfft_radix4by2_inverse_q31+0x166>
 801d824:	0002      	movs	r2, r0
 801d826:	00db      	lsls	r3, r3, #3
 801d828:	3204      	adds	r2, #4
 801d82a:	4691      	mov	r9, r2
 801d82c:	4698      	mov	r8, r3
 801d82e:	000a      	movs	r2, r1
 801d830:	464e      	mov	r6, r9
 801d832:	4442      	add	r2, r8
 801d834:	4699      	mov	r9, r3
 801d836:	4688      	mov	r8, r1
 801d838:	9208      	str	r2, [sp, #32]
 801d83a:	900d      	str	r0, [sp, #52]	@ 0x34
 801d83c:	4643      	mov	r3, r8
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	469b      	mov	fp, r3
 801d842:	4643      	mov	r3, r8
 801d844:	685b      	ldr	r3, [r3, #4]
 801d846:	469a      	mov	sl, r3
 801d848:	683b      	ldr	r3, [r7, #0]
 801d84a:	109c      	asrs	r4, r3, #2
 801d84c:	464b      	mov	r3, r9
 801d84e:	58fb      	ldr	r3, [r7, r3]
 801d850:	109a      	asrs	r2, r3, #2
 801d852:	18a3      	adds	r3, r4, r2
 801d854:	603b      	str	r3, [r7, #0]
 801d856:	6833      	ldr	r3, [r6, #0]
 801d858:	1aa4      	subs	r4, r4, r2
 801d85a:	109d      	asrs	r5, r3, #2
 801d85c:	464b      	mov	r3, r9
 801d85e:	58f3      	ldr	r3, [r6, r3]
 801d860:	17e2      	asrs	r2, r4, #31
 801d862:	109b      	asrs	r3, r3, #2
 801d864:	18e9      	adds	r1, r5, r3
 801d866:	6031      	str	r1, [r6, #0]
 801d868:	0011      	movs	r1, r2
 801d86a:	465a      	mov	r2, fp
 801d86c:	17d2      	asrs	r2, r2, #31
 801d86e:	0010      	movs	r0, r2
 801d870:	4652      	mov	r2, sl
 801d872:	1aed      	subs	r5, r5, r3
 801d874:	17eb      	asrs	r3, r5, #31
 801d876:	17d2      	asrs	r2, r2, #31
 801d878:	9307      	str	r3, [sp, #28]
 801d87a:	9204      	str	r2, [sp, #16]
 801d87c:	0003      	movs	r3, r0
 801d87e:	465a      	mov	r2, fp
 801d880:	9006      	str	r0, [sp, #24]
 801d882:	0020      	movs	r0, r4
 801d884:	9105      	str	r1, [sp, #20]
 801d886:	f7e2 fe9b 	bl	80005c0 <__aeabi_lmul>
 801d88a:	2280      	movs	r2, #128	@ 0x80
 801d88c:	2300      	movs	r3, #0
 801d88e:	0612      	lsls	r2, r2, #24
 801d890:	1880      	adds	r0, r0, r2
 801d892:	4159      	adcs	r1, r3
 801d894:	2300      	movs	r3, #0
 801d896:	9101      	str	r1, [sp, #4]
 801d898:	9300      	str	r3, [sp, #0]
 801d89a:	4652      	mov	r2, sl
 801d89c:	9b04      	ldr	r3, [sp, #16]
 801d89e:	0028      	movs	r0, r5
 801d8a0:	17e9      	asrs	r1, r5, #31
 801d8a2:	f7e2 fe8d 	bl	80005c0 <__aeabi_lmul>
 801d8a6:	9a00      	ldr	r2, [sp, #0]
 801d8a8:	9b01      	ldr	r3, [sp, #4]
 801d8aa:	1a12      	subs	r2, r2, r0
 801d8ac:	418b      	sbcs	r3, r1
 801d8ae:	2080      	movs	r0, #128	@ 0x80
 801d8b0:	2100      	movs	r1, #0
 801d8b2:	0600      	lsls	r0, r0, #24
 801d8b4:	1812      	adds	r2, r2, r0
 801d8b6:	414b      	adcs	r3, r1
 801d8b8:	464a      	mov	r2, r9
 801d8ba:	005b      	lsls	r3, r3, #1
 801d8bc:	50bb      	str	r3, [r7, r2]
 801d8be:	4658      	mov	r0, fp
 801d8c0:	002a      	movs	r2, r5
 801d8c2:	9b07      	ldr	r3, [sp, #28]
 801d8c4:	9906      	ldr	r1, [sp, #24]
 801d8c6:	f7e2 fe7b 	bl	80005c0 <__aeabi_lmul>
 801d8ca:	2280      	movs	r2, #128	@ 0x80
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	0612      	lsls	r2, r2, #24
 801d8d0:	1880      	adds	r0, r0, r2
 801d8d2:	4159      	adcs	r1, r3
 801d8d4:	2000      	movs	r0, #0
 801d8d6:	9103      	str	r1, [sp, #12]
 801d8d8:	9002      	str	r0, [sp, #8]
 801d8da:	4652      	mov	r2, sl
 801d8dc:	9b04      	ldr	r3, [sp, #16]
 801d8de:	0020      	movs	r0, r4
 801d8e0:	9905      	ldr	r1, [sp, #20]
 801d8e2:	f7e2 fe6d 	bl	80005c0 <__aeabi_lmul>
 801d8e6:	9b02      	ldr	r3, [sp, #8]
 801d8e8:	9c03      	ldr	r4, [sp, #12]
 801d8ea:	18c0      	adds	r0, r0, r3
 801d8ec:	4161      	adcs	r1, r4
 801d8ee:	2380      	movs	r3, #128	@ 0x80
 801d8f0:	2400      	movs	r4, #0
 801d8f2:	061b      	lsls	r3, r3, #24
 801d8f4:	18c0      	adds	r0, r0, r3
 801d8f6:	4161      	adcs	r1, r4
 801d8f8:	464a      	mov	r2, r9
 801d8fa:	004b      	lsls	r3, r1, #1
 801d8fc:	50b3      	str	r3, [r6, r2]
 801d8fe:	2308      	movs	r3, #8
 801d900:	469c      	mov	ip, r3
 801d902:	9b08      	ldr	r3, [sp, #32]
 801d904:	44e0      	add	r8, ip
 801d906:	3708      	adds	r7, #8
 801d908:	3608      	adds	r6, #8
 801d90a:	4598      	cmp	r8, r3
 801d90c:	d196      	bne.n	801d83c <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d90e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d910:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d912:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d914:	2302      	movs	r3, #2
 801d916:	003a      	movs	r2, r7
 801d918:	0029      	movs	r1, r5
 801d91a:	0020      	movs	r0, r4
 801d91c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d91e:	f000 fb3b 	bl	801df98 <arm_radix4_butterfly_inverse_q31>
 801d922:	46a4      	mov	ip, r4
 801d924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d926:	2302      	movs	r3, #2
 801d928:	0088      	lsls	r0, r1, #2
 801d92a:	4460      	add	r0, ip
 801d92c:	003a      	movs	r2, r7
 801d92e:	0029      	movs	r1, r5
 801d930:	f000 fb32 	bl	801df98 <arm_radix4_butterfly_inverse_q31>
 801d934:	46a4      	mov	ip, r4
 801d936:	0128      	lsls	r0, r5, #4
 801d938:	4460      	add	r0, ip
 801d93a:	6833      	ldr	r3, [r6, #0]
 801d93c:	005b      	lsls	r3, r3, #1
 801d93e:	6033      	str	r3, [r6, #0]
 801d940:	6873      	ldr	r3, [r6, #4]
 801d942:	005b      	lsls	r3, r3, #1
 801d944:	6073      	str	r3, [r6, #4]
 801d946:	68b3      	ldr	r3, [r6, #8]
 801d948:	005b      	lsls	r3, r3, #1
 801d94a:	60b3      	str	r3, [r6, #8]
 801d94c:	68f3      	ldr	r3, [r6, #12]
 801d94e:	005b      	lsls	r3, r3, #1
 801d950:	60f3      	str	r3, [r6, #12]
 801d952:	3610      	adds	r6, #16
 801d954:	42b0      	cmp	r0, r6
 801d956:	d1f0      	bne.n	801d93a <arm_cfft_radix4by2_inverse_q31+0x13a>
 801d958:	b00f      	add	sp, #60	@ 0x3c
 801d95a:	bc3c      	pop	{r2, r3, r4, r5}
 801d95c:	4690      	mov	r8, r2
 801d95e:	4699      	mov	r9, r3
 801d960:	46a2      	mov	sl, r4
 801d962:	46ab      	mov	fp, r5
 801d964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d966:	2302      	movs	r3, #2
 801d968:	2100      	movs	r1, #0
 801d96a:	0015      	movs	r5, r2
 801d96c:	f000 fb14 	bl	801df98 <arm_radix4_butterfly_inverse_q31>
 801d970:	46bc      	mov	ip, r7
 801d972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d974:	002a      	movs	r2, r5
 801d976:	0098      	lsls	r0, r3, #2
 801d978:	4460      	add	r0, ip
 801d97a:	2302      	movs	r3, #2
 801d97c:	2100      	movs	r1, #0
 801d97e:	f000 fb0b 	bl	801df98 <arm_radix4_butterfly_inverse_q31>
 801d982:	e7e9      	b.n	801d958 <arm_cfft_radix4by2_inverse_q31+0x158>

0801d984 <arm_cfft_q31>:
 801d984:	b570      	push	{r4, r5, r6, lr}
 801d986:	001e      	movs	r6, r3
 801d988:	2380      	movs	r3, #128	@ 0x80
 801d98a:	000d      	movs	r5, r1
 801d98c:	0004      	movs	r4, r0
 801d98e:	8801      	ldrh	r1, [r0, #0]
 801d990:	005b      	lsls	r3, r3, #1
 801d992:	2a01      	cmp	r2, #1
 801d994:	d028      	beq.n	801d9e8 <arm_cfft_q31+0x64>
 801d996:	4299      	cmp	r1, r3
 801d998:	d020      	beq.n	801d9dc <arm_cfft_q31+0x58>
 801d99a:	d812      	bhi.n	801d9c2 <arm_cfft_q31+0x3e>
 801d99c:	2920      	cmp	r1, #32
 801d99e:	d004      	beq.n	801d9aa <arm_cfft_q31+0x26>
 801d9a0:	d949      	bls.n	801da36 <arm_cfft_q31+0xb2>
 801d9a2:	2940      	cmp	r1, #64	@ 0x40
 801d9a4:	d01a      	beq.n	801d9dc <arm_cfft_q31+0x58>
 801d9a6:	2980      	cmp	r1, #128	@ 0x80
 801d9a8:	d103      	bne.n	801d9b2 <arm_cfft_q31+0x2e>
 801d9aa:	6862      	ldr	r2, [r4, #4]
 801d9ac:	0028      	movs	r0, r5
 801d9ae:	f7ff fe65 	bl	801d67c <arm_cfft_radix4by2_q31>
 801d9b2:	2e00      	cmp	r6, #0
 801d9b4:	d004      	beq.n	801d9c0 <arm_cfft_q31+0x3c>
 801d9b6:	68a2      	ldr	r2, [r4, #8]
 801d9b8:	89a1      	ldrh	r1, [r4, #12]
 801d9ba:	0028      	movs	r0, r5
 801d9bc:	f7e2 fba4 	bl	8000108 <arm_bitreversal_32>
 801d9c0:	bd70      	pop	{r4, r5, r6, pc}
 801d9c2:	2380      	movs	r3, #128	@ 0x80
 801d9c4:	00db      	lsls	r3, r3, #3
 801d9c6:	4299      	cmp	r1, r3
 801d9c8:	d008      	beq.n	801d9dc <arm_cfft_q31+0x58>
 801d9ca:	d92f      	bls.n	801da2c <arm_cfft_q31+0xa8>
 801d9cc:	2380      	movs	r3, #128	@ 0x80
 801d9ce:	011b      	lsls	r3, r3, #4
 801d9d0:	4299      	cmp	r1, r3
 801d9d2:	d0ea      	beq.n	801d9aa <arm_cfft_q31+0x26>
 801d9d4:	2380      	movs	r3, #128	@ 0x80
 801d9d6:	015b      	lsls	r3, r3, #5
 801d9d8:	4299      	cmp	r1, r3
 801d9da:	d1ea      	bne.n	801d9b2 <arm_cfft_q31+0x2e>
 801d9dc:	2301      	movs	r3, #1
 801d9de:	6862      	ldr	r2, [r4, #4]
 801d9e0:	0028      	movs	r0, r5
 801d9e2:	f000 f833 	bl	801da4c <arm_radix4_butterfly_q31>
 801d9e6:	e7e4      	b.n	801d9b2 <arm_cfft_q31+0x2e>
 801d9e8:	4299      	cmp	r1, r3
 801d9ea:	d019      	beq.n	801da20 <arm_cfft_q31+0x9c>
 801d9ec:	d80b      	bhi.n	801da06 <arm_cfft_q31+0x82>
 801d9ee:	2920      	cmp	r1, #32
 801d9f0:	d004      	beq.n	801d9fc <arm_cfft_q31+0x78>
 801d9f2:	d928      	bls.n	801da46 <arm_cfft_q31+0xc2>
 801d9f4:	2940      	cmp	r1, #64	@ 0x40
 801d9f6:	d013      	beq.n	801da20 <arm_cfft_q31+0x9c>
 801d9f8:	2980      	cmp	r1, #128	@ 0x80
 801d9fa:	d1da      	bne.n	801d9b2 <arm_cfft_q31+0x2e>
 801d9fc:	6862      	ldr	r2, [r4, #4]
 801d9fe:	0028      	movs	r0, r5
 801da00:	f7ff fefe 	bl	801d800 <arm_cfft_radix4by2_inverse_q31>
 801da04:	e7d5      	b.n	801d9b2 <arm_cfft_q31+0x2e>
 801da06:	2380      	movs	r3, #128	@ 0x80
 801da08:	00db      	lsls	r3, r3, #3
 801da0a:	4299      	cmp	r1, r3
 801da0c:	d008      	beq.n	801da20 <arm_cfft_q31+0x9c>
 801da0e:	d915      	bls.n	801da3c <arm_cfft_q31+0xb8>
 801da10:	2380      	movs	r3, #128	@ 0x80
 801da12:	011b      	lsls	r3, r3, #4
 801da14:	4299      	cmp	r1, r3
 801da16:	d0f1      	beq.n	801d9fc <arm_cfft_q31+0x78>
 801da18:	2380      	movs	r3, #128	@ 0x80
 801da1a:	015b      	lsls	r3, r3, #5
 801da1c:	4299      	cmp	r1, r3
 801da1e:	d1c8      	bne.n	801d9b2 <arm_cfft_q31+0x2e>
 801da20:	2301      	movs	r3, #1
 801da22:	6862      	ldr	r2, [r4, #4]
 801da24:	0028      	movs	r0, r5
 801da26:	f000 fab7 	bl	801df98 <arm_radix4_butterfly_inverse_q31>
 801da2a:	e7c2      	b.n	801d9b2 <arm_cfft_q31+0x2e>
 801da2c:	2380      	movs	r3, #128	@ 0x80
 801da2e:	009b      	lsls	r3, r3, #2
 801da30:	4299      	cmp	r1, r3
 801da32:	d0ba      	beq.n	801d9aa <arm_cfft_q31+0x26>
 801da34:	e7bd      	b.n	801d9b2 <arm_cfft_q31+0x2e>
 801da36:	2910      	cmp	r1, #16
 801da38:	d1bb      	bne.n	801d9b2 <arm_cfft_q31+0x2e>
 801da3a:	e7cf      	b.n	801d9dc <arm_cfft_q31+0x58>
 801da3c:	2380      	movs	r3, #128	@ 0x80
 801da3e:	009b      	lsls	r3, r3, #2
 801da40:	4299      	cmp	r1, r3
 801da42:	d0db      	beq.n	801d9fc <arm_cfft_q31+0x78>
 801da44:	e7b5      	b.n	801d9b2 <arm_cfft_q31+0x2e>
 801da46:	2910      	cmp	r1, #16
 801da48:	d1b3      	bne.n	801d9b2 <arm_cfft_q31+0x2e>
 801da4a:	e7e9      	b.n	801da20 <arm_cfft_q31+0x9c>

0801da4c <arm_radix4_butterfly_q31>:
 801da4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da4e:	464d      	mov	r5, r9
 801da50:	4644      	mov	r4, r8
 801da52:	465f      	mov	r7, fp
 801da54:	4656      	mov	r6, sl
 801da56:	469c      	mov	ip, r3
 801da58:	b4f0      	push	{r4, r5, r6, r7}
 801da5a:	b0a7      	sub	sp, #156	@ 0x9c
 801da5c:	9114      	str	r1, [sp, #80]	@ 0x50
 801da5e:	0889      	lsrs	r1, r1, #2
 801da60:	9310      	str	r3, [sp, #64]	@ 0x40
 801da62:	00cb      	lsls	r3, r1, #3
 801da64:	0015      	movs	r5, r2
 801da66:	9223      	str	r2, [sp, #140]	@ 0x8c
 801da68:	18c2      	adds	r2, r0, r3
 801da6a:	000c      	movs	r4, r1
 801da6c:	469a      	mov	sl, r3
 801da6e:	9124      	str	r1, [sp, #144]	@ 0x90
 801da70:	18d1      	adds	r1, r2, r3
 801da72:	4663      	mov	r3, ip
 801da74:	468b      	mov	fp, r1
 801da76:	0119      	lsls	r1, r3, #4
 801da78:	910d      	str	r1, [sp, #52]	@ 0x34
 801da7a:	00d9      	lsls	r1, r3, #3
 801da7c:	005b      	lsls	r3, r3, #1
 801da7e:	4463      	add	r3, ip
 801da80:	910e      	str	r1, [sp, #56]	@ 0x38
 801da82:	00d9      	lsls	r1, r3, #3
 801da84:	465b      	mov	r3, fp
 801da86:	44da      	add	sl, fp
 801da88:	4690      	mov	r8, r2
 801da8a:	4683      	mov	fp, r0
 801da8c:	4699      	mov	r9, r3
 801da8e:	9022      	str	r0, [sp, #136]	@ 0x88
 801da90:	9025      	str	r0, [sp, #148]	@ 0x94
 801da92:	910f      	str	r1, [sp, #60]	@ 0x3c
 801da94:	9502      	str	r5, [sp, #8]
 801da96:	9500      	str	r5, [sp, #0]
 801da98:	9501      	str	r5, [sp, #4]
 801da9a:	9407      	str	r4, [sp, #28]
 801da9c:	465b      	mov	r3, fp
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	4642      	mov	r2, r8
 801daa2:	111c      	asrs	r4, r3, #4
 801daa4:	464b      	mov	r3, r9
 801daa6:	4658      	mov	r0, fp
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	6812      	ldr	r2, [r2, #0]
 801daac:	111b      	asrs	r3, r3, #4
 801daae:	18e7      	adds	r7, r4, r3
 801dab0:	1ae3      	subs	r3, r4, r3
 801dab2:	1114      	asrs	r4, r2, #4
 801dab4:	4652      	mov	r2, sl
 801dab6:	6840      	ldr	r0, [r0, #4]
 801dab8:	6812      	ldr	r2, [r2, #0]
 801daba:	1105      	asrs	r5, r0, #4
 801dabc:	4648      	mov	r0, r9
 801dabe:	9303      	str	r3, [sp, #12]
 801dac0:	1113      	asrs	r3, r2, #4
 801dac2:	18e2      	adds	r2, r4, r3
 801dac4:	465c      	mov	r4, fp
 801dac6:	6840      	ldr	r0, [r0, #4]
 801dac8:	1103      	asrs	r3, r0, #4
 801daca:	18ee      	adds	r6, r5, r3
 801dacc:	1ae8      	subs	r0, r5, r3
 801dace:	18bb      	adds	r3, r7, r2
 801dad0:	6023      	str	r3, [r4, #0]
 801dad2:	4644      	mov	r4, r8
 801dad4:	6864      	ldr	r4, [r4, #4]
 801dad6:	9004      	str	r0, [sp, #16]
 801dad8:	1125      	asrs	r5, r4, #4
 801dada:	4654      	mov	r4, sl
 801dadc:	6864      	ldr	r4, [r4, #4]
 801dade:	1123      	asrs	r3, r4, #4
 801dae0:	465c      	mov	r4, fp
 801dae2:	18eb      	adds	r3, r5, r3
 801dae4:	18f1      	adds	r1, r6, r3
 801dae6:	6061      	str	r1, [r4, #4]
 801dae8:	4655      	mov	r5, sl
 801daea:	4644      	mov	r4, r8
 801daec:	686d      	ldr	r5, [r5, #4]
 801daee:	6864      	ldr	r4, [r4, #4]
 801daf0:	1129      	asrs	r1, r5, #4
 801daf2:	1124      	asrs	r4, r4, #4
 801daf4:	1a64      	subs	r4, r4, r1
 801daf6:	4641      	mov	r1, r8
 801daf8:	6809      	ldr	r1, [r1, #0]
 801dafa:	9405      	str	r4, [sp, #20]
 801dafc:	1108      	asrs	r0, r1, #4
 801dafe:	4651      	mov	r1, sl
 801db00:	6809      	ldr	r1, [r1, #0]
 801db02:	1abc      	subs	r4, r7, r2
 801db04:	1109      	asrs	r1, r1, #4
 801db06:	1a41      	subs	r1, r0, r1
 801db08:	17e2      	asrs	r2, r4, #31
 801db0a:	9106      	str	r1, [sp, #24]
 801db0c:	0011      	movs	r1, r2
 801db0e:	9a01      	ldr	r2, [sp, #4]
 801db10:	9108      	str	r1, [sp, #32]
 801db12:	6817      	ldr	r7, [r2, #0]
 801db14:	17fd      	asrs	r5, r7, #31
 801db16:	0028      	movs	r0, r5
 801db18:	1af5      	subs	r5, r6, r3
 801db1a:	17ee      	asrs	r6, r5, #31
 801db1c:	960a      	str	r6, [sp, #40]	@ 0x28
 801db1e:	6856      	ldr	r6, [r2, #4]
 801db20:	9009      	str	r0, [sp, #36]	@ 0x24
 801db22:	17f3      	asrs	r3, r6, #31
 801db24:	003a      	movs	r2, r7
 801db26:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db28:	0003      	movs	r3, r0
 801db2a:	0020      	movs	r0, r4
 801db2c:	f7e2 fd48 	bl	80005c0 <__aeabi_lmul>
 801db30:	0032      	movs	r2, r6
 801db32:	17f3      	asrs	r3, r6, #31
 801db34:	910c      	str	r1, [sp, #48]	@ 0x30
 801db36:	0028      	movs	r0, r5
 801db38:	17e9      	asrs	r1, r5, #31
 801db3a:	f7e2 fd41 	bl	80005c0 <__aeabi_lmul>
 801db3e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801db40:	002a      	movs	r2, r5
 801db42:	4684      	mov	ip, r0
 801db44:	4640      	mov	r0, r8
 801db46:	4461      	add	r1, ip
 801db48:	0049      	lsls	r1, r1, #1
 801db4a:	6001      	str	r1, [r0, #0]
 801db4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801db4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801db50:	0038      	movs	r0, r7
 801db52:	f7e2 fd35 	bl	80005c0 <__aeabi_lmul>
 801db56:	0032      	movs	r2, r6
 801db58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db5a:	000d      	movs	r5, r1
 801db5c:	0020      	movs	r0, r4
 801db5e:	9908      	ldr	r1, [sp, #32]
 801db60:	f7e2 fd2e 	bl	80005c0 <__aeabi_lmul>
 801db64:	4646      	mov	r6, r8
 801db66:	1a6d      	subs	r5, r5, r1
 801db68:	006d      	lsls	r5, r5, #1
 801db6a:	6075      	str	r5, [r6, #4]
 801db6c:	9903      	ldr	r1, [sp, #12]
 801db6e:	9d05      	ldr	r5, [sp, #20]
 801db70:	000c      	movs	r4, r1
 801db72:	46ac      	mov	ip, r5
 801db74:	4464      	add	r4, ip
 801db76:	17e6      	asrs	r6, r4, #31
 801db78:	0031      	movs	r1, r6
 801db7a:	9b00      	ldr	r3, [sp, #0]
 801db7c:	9804      	ldr	r0, [sp, #16]
 801db7e:	681e      	ldr	r6, [r3, #0]
 801db80:	17f7      	asrs	r7, r6, #31
 801db82:	9709      	str	r7, [sp, #36]	@ 0x24
 801db84:	9f06      	ldr	r7, [sp, #24]
 801db86:	0032      	movs	r2, r6
 801db88:	1bc7      	subs	r7, r0, r7
 801db8a:	17fd      	asrs	r5, r7, #31
 801db8c:	950a      	str	r5, [sp, #40]	@ 0x28
 801db8e:	685d      	ldr	r5, [r3, #4]
 801db90:	17f3      	asrs	r3, r6, #31
 801db92:	17e8      	asrs	r0, r5, #31
 801db94:	900b      	str	r0, [sp, #44]	@ 0x2c
 801db96:	0020      	movs	r0, r4
 801db98:	9108      	str	r1, [sp, #32]
 801db9a:	f7e2 fd11 	bl	80005c0 <__aeabi_lmul>
 801db9e:	002a      	movs	r2, r5
 801dba0:	17eb      	asrs	r3, r5, #31
 801dba2:	910c      	str	r1, [sp, #48]	@ 0x30
 801dba4:	0038      	movs	r0, r7
 801dba6:	17f9      	asrs	r1, r7, #31
 801dba8:	f7e2 fd0a 	bl	80005c0 <__aeabi_lmul>
 801dbac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dbae:	003a      	movs	r2, r7
 801dbb0:	4684      	mov	ip, r0
 801dbb2:	4648      	mov	r0, r9
 801dbb4:	4461      	add	r1, ip
 801dbb6:	0049      	lsls	r1, r1, #1
 801dbb8:	6001      	str	r1, [r0, #0]
 801dbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbbc:	0030      	movs	r0, r6
 801dbbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dbc0:	f7e2 fcfe 	bl	80005c0 <__aeabi_lmul>
 801dbc4:	002a      	movs	r2, r5
 801dbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dbc8:	000e      	movs	r6, r1
 801dbca:	0020      	movs	r0, r4
 801dbcc:	9908      	ldr	r1, [sp, #32]
 801dbce:	f7e2 fcf7 	bl	80005c0 <__aeabi_lmul>
 801dbd2:	464c      	mov	r4, r9
 801dbd4:	9d05      	ldr	r5, [sp, #20]
 801dbd6:	1a76      	subs	r6, r6, r1
 801dbd8:	9903      	ldr	r1, [sp, #12]
 801dbda:	0076      	lsls	r6, r6, #1
 801dbdc:	6066      	str	r6, [r4, #4]
 801dbde:	1b4c      	subs	r4, r1, r5
 801dbe0:	9e06      	ldr	r6, [sp, #24]
 801dbe2:	17e1      	asrs	r1, r4, #31
 801dbe4:	9103      	str	r1, [sp, #12]
 801dbe6:	9902      	ldr	r1, [sp, #8]
 801dbe8:	46b4      	mov	ip, r6
 801dbea:	680f      	ldr	r7, [r1, #0]
 801dbec:	9804      	ldr	r0, [sp, #16]
 801dbee:	17fd      	asrs	r5, r7, #31
 801dbf0:	002b      	movs	r3, r5
 801dbf2:	684e      	ldr	r6, [r1, #4]
 801dbf4:	4460      	add	r0, ip
 801dbf6:	0005      	movs	r5, r0
 801dbf8:	17c0      	asrs	r0, r0, #31
 801dbfa:	9005      	str	r0, [sp, #20]
 801dbfc:	17f0      	asrs	r0, r6, #31
 801dbfe:	9006      	str	r0, [sp, #24]
 801dc00:	003a      	movs	r2, r7
 801dc02:	0020      	movs	r0, r4
 801dc04:	17e1      	asrs	r1, r4, #31
 801dc06:	9304      	str	r3, [sp, #16]
 801dc08:	f7e2 fcda 	bl	80005c0 <__aeabi_lmul>
 801dc0c:	0032      	movs	r2, r6
 801dc0e:	9108      	str	r1, [sp, #32]
 801dc10:	17f3      	asrs	r3, r6, #31
 801dc12:	0028      	movs	r0, r5
 801dc14:	17e9      	asrs	r1, r5, #31
 801dc16:	f7e2 fcd3 	bl	80005c0 <__aeabi_lmul>
 801dc1a:	9808      	ldr	r0, [sp, #32]
 801dc1c:	002a      	movs	r2, r5
 801dc1e:	4684      	mov	ip, r0
 801dc20:	4650      	mov	r0, sl
 801dc22:	4461      	add	r1, ip
 801dc24:	0049      	lsls	r1, r1, #1
 801dc26:	6001      	str	r1, [r0, #0]
 801dc28:	9b05      	ldr	r3, [sp, #20]
 801dc2a:	9904      	ldr	r1, [sp, #16]
 801dc2c:	0038      	movs	r0, r7
 801dc2e:	f7e2 fcc7 	bl	80005c0 <__aeabi_lmul>
 801dc32:	0020      	movs	r0, r4
 801dc34:	2408      	movs	r4, #8
 801dc36:	000d      	movs	r5, r1
 801dc38:	0032      	movs	r2, r6
 801dc3a:	9b06      	ldr	r3, [sp, #24]
 801dc3c:	9903      	ldr	r1, [sp, #12]
 801dc3e:	f7e2 fcbf 	bl	80005c0 <__aeabi_lmul>
 801dc42:	46a4      	mov	ip, r4
 801dc44:	4650      	mov	r0, sl
 801dc46:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dc48:	44e3      	add	fp, ip
 801dc4a:	44e0      	add	r8, ip
 801dc4c:	44e1      	add	r9, ip
 801dc4e:	44e2      	add	sl, ip
 801dc50:	46a4      	mov	ip, r4
 801dc52:	1a6d      	subs	r5, r5, r1
 801dc54:	006d      	lsls	r5, r5, #1
 801dc56:	9a01      	ldr	r2, [sp, #4]
 801dc58:	6045      	str	r5, [r0, #4]
 801dc5a:	9807      	ldr	r0, [sp, #28]
 801dc5c:	4462      	add	r2, ip
 801dc5e:	3801      	subs	r0, #1
 801dc60:	9201      	str	r2, [sp, #4]
 801dc62:	9007      	str	r0, [sp, #28]
 801dc64:	9b00      	ldr	r3, [sp, #0]
 801dc66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc68:	9902      	ldr	r1, [sp, #8]
 801dc6a:	4694      	mov	ip, r2
 801dc6c:	4463      	add	r3, ip
 801dc6e:	9300      	str	r3, [sp, #0]
 801dc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc72:	469c      	mov	ip, r3
 801dc74:	4461      	add	r1, ip
 801dc76:	9102      	str	r1, [sp, #8]
 801dc78:	2800      	cmp	r0, #0
 801dc7a:	d000      	beq.n	801dc7e <arm_radix4_butterfly_q31+0x232>
 801dc7c:	e70e      	b.n	801da9c <arm_radix4_butterfly_q31+0x50>
 801dc7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dc80:	009b      	lsls	r3, r3, #2
 801dc82:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dc84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dc86:	9320      	str	r3, [sp, #128]	@ 0x80
 801dc88:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dc8a:	2b04      	cmp	r3, #4
 801dc8c:	d800      	bhi.n	801dc90 <arm_radix4_butterfly_q31+0x244>
 801dc8e:	e180      	b.n	801df92 <arm_radix4_butterfly_q31+0x546>
 801dc90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dc92:	0893      	lsrs	r3, r2, #2
 801dc94:	1e59      	subs	r1, r3, #1
 801dc96:	9321      	str	r3, [sp, #132]	@ 0x84
 801dc98:	00db      	lsls	r3, r3, #3
 801dc9a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dc9c:	00d3      	lsls	r3, r2, #3
 801dc9e:	9300      	str	r3, [sp, #0]
 801dca0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dca2:	911a      	str	r1, [sp, #104]	@ 0x68
 801dca4:	00da      	lsls	r2, r3, #3
 801dca6:	921e      	str	r2, [sp, #120]	@ 0x78
 801dca8:	011a      	lsls	r2, r3, #4
 801dcaa:	921d      	str	r2, [sp, #116]	@ 0x74
 801dcac:	001a      	movs	r2, r3
 801dcae:	4694      	mov	ip, r2
 801dcb0:	005b      	lsls	r3, r3, #1
 801dcb2:	4463      	add	r3, ip
 801dcb4:	00db      	lsls	r3, r3, #3
 801dcb6:	931c      	str	r3, [sp, #112]	@ 0x70
 801dcb8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dcba:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dcbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dcbe:	9318      	str	r3, [sp, #96]	@ 0x60
 801dcc0:	9319      	str	r3, [sp, #100]	@ 0x64
 801dcc2:	9316      	str	r3, [sp, #88]	@ 0x58
 801dcc4:	2300      	movs	r3, #0
 801dcc6:	9315      	str	r3, [sp, #84]	@ 0x54
 801dcc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dcca:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dccc:	681a      	ldr	r2, [r3, #0]
 801dcce:	685b      	ldr	r3, [r3, #4]
 801dcd0:	9205      	str	r2, [sp, #20]
 801dcd2:	9306      	str	r3, [sp, #24]
 801dcd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dcd6:	468c      	mov	ip, r1
 801dcd8:	681a      	ldr	r2, [r3, #0]
 801dcda:	685b      	ldr	r3, [r3, #4]
 801dcdc:	9207      	str	r2, [sp, #28]
 801dcde:	9308      	str	r3, [sp, #32]
 801dce0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dce2:	681a      	ldr	r2, [r3, #0]
 801dce4:	685b      	ldr	r3, [r3, #4]
 801dce6:	9209      	str	r2, [sp, #36]	@ 0x24
 801dce8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dcea:	930a      	str	r3, [sp, #40]	@ 0x28
 801dcec:	0013      	movs	r3, r2
 801dcee:	4463      	add	r3, ip
 801dcf0:	4698      	mov	r8, r3
 801dcf2:	0013      	movs	r3, r2
 801dcf4:	4442      	add	r2, r8
 801dcf6:	4691      	mov	r9, r2
 801dcf8:	001a      	movs	r2, r3
 801dcfa:	444a      	add	r2, r9
 801dcfc:	4692      	mov	sl, r2
 801dcfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd00:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801dd02:	4293      	cmp	r3, r2
 801dd04:	d800      	bhi.n	801dd08 <arm_radix4_butterfly_q31+0x2bc>
 801dd06:	e0dd      	b.n	801dec4 <arm_radix4_butterfly_q31+0x478>
 801dd08:	4694      	mov	ip, r2
 801dd0a:	468b      	mov	fp, r1
 801dd0c:	4644      	mov	r4, r8
 801dd0e:	4655      	mov	r5, sl
 801dd10:	9b07      	ldr	r3, [sp, #28]
 801dd12:	17db      	asrs	r3, r3, #31
 801dd14:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd16:	9b08      	ldr	r3, [sp, #32]
 801dd18:	17db      	asrs	r3, r3, #31
 801dd1a:	930d      	str	r3, [sp, #52]	@ 0x34
 801dd1c:	9b05      	ldr	r3, [sp, #20]
 801dd1e:	17db      	asrs	r3, r3, #31
 801dd20:	930e      	str	r3, [sp, #56]	@ 0x38
 801dd22:	9b06      	ldr	r3, [sp, #24]
 801dd24:	17db      	asrs	r3, r3, #31
 801dd26:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dd28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd2a:	17db      	asrs	r3, r3, #31
 801dd2c:	9310      	str	r3, [sp, #64]	@ 0x40
 801dd2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd30:	17db      	asrs	r3, r3, #31
 801dd32:	9311      	str	r3, [sp, #68]	@ 0x44
 801dd34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd36:	4463      	add	r3, ip
 801dd38:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dd3a:	465b      	mov	r3, fp
 801dd3c:	4659      	mov	r1, fp
 801dd3e:	681a      	ldr	r2, [r3, #0]
 801dd40:	464b      	mov	r3, r9
 801dd42:	684f      	ldr	r7, [r1, #4]
 801dd44:	4649      	mov	r1, r9
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	18d6      	adds	r6, r2, r3
 801dd4a:	1ad3      	subs	r3, r2, r3
 801dd4c:	9301      	str	r3, [sp, #4]
 801dd4e:	684b      	ldr	r3, [r1, #4]
 801dd50:	18f8      	adds	r0, r7, r3
 801dd52:	1af9      	subs	r1, r7, r3
 801dd54:	6827      	ldr	r7, [r4, #0]
 801dd56:	9102      	str	r1, [sp, #8]
 801dd58:	003a      	movs	r2, r7
 801dd5a:	682f      	ldr	r7, [r5, #0]
 801dd5c:	46bc      	mov	ip, r7
 801dd5e:	465f      	mov	r7, fp
 801dd60:	4462      	add	r2, ip
 801dd62:	18b3      	adds	r3, r6, r2
 801dd64:	109b      	asrs	r3, r3, #2
 801dd66:	603b      	str	r3, [r7, #0]
 801dd68:	6867      	ldr	r7, [r4, #4]
 801dd6a:	1ab6      	subs	r6, r6, r2
 801dd6c:	46b8      	mov	r8, r7
 801dd6e:	686f      	ldr	r7, [r5, #4]
 801dd70:	17f2      	asrs	r2, r6, #31
 801dd72:	46bc      	mov	ip, r7
 801dd74:	44e0      	add	r8, ip
 801dd76:	4643      	mov	r3, r8
 801dd78:	465f      	mov	r7, fp
 801dd7a:	18c1      	adds	r1, r0, r3
 801dd7c:	1089      	asrs	r1, r1, #2
 801dd7e:	6079      	str	r1, [r7, #4]
 801dd80:	9900      	ldr	r1, [sp, #0]
 801dd82:	4690      	mov	r8, r2
 801dd84:	468c      	mov	ip, r1
 801dd86:	6867      	ldr	r7, [r4, #4]
 801dd88:	6869      	ldr	r1, [r5, #4]
 801dd8a:	44e3      	add	fp, ip
 801dd8c:	1a7f      	subs	r7, r7, r1
 801dd8e:	9703      	str	r7, [sp, #12]
 801dd90:	6829      	ldr	r1, [r5, #0]
 801dd92:	6827      	ldr	r7, [r4, #0]
 801dd94:	1a7f      	subs	r7, r7, r1
 801dd96:	9704      	str	r7, [sp, #16]
 801dd98:	1ac7      	subs	r7, r0, r3
 801dd9a:	17fa      	asrs	r2, r7, #31
 801dd9c:	4692      	mov	sl, r2
 801dd9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dda0:	9a07      	ldr	r2, [sp, #28]
 801dda2:	0030      	movs	r0, r6
 801dda4:	4641      	mov	r1, r8
 801dda6:	f7e2 fc0b 	bl	80005c0 <__aeabi_lmul>
 801ddaa:	9a08      	ldr	r2, [sp, #32]
 801ddac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddae:	9112      	str	r1, [sp, #72]	@ 0x48
 801ddb0:	0038      	movs	r0, r7
 801ddb2:	4651      	mov	r1, sl
 801ddb4:	f7e2 fc04 	bl	80005c0 <__aeabi_lmul>
 801ddb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ddba:	9a07      	ldr	r2, [sp, #28]
 801ddbc:	4684      	mov	ip, r0
 801ddbe:	4461      	add	r1, ip
 801ddc0:	1049      	asrs	r1, r1, #1
 801ddc2:	6021      	str	r1, [r4, #0]
 801ddc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ddc6:	0038      	movs	r0, r7
 801ddc8:	4651      	mov	r1, sl
 801ddca:	f7e2 fbf9 	bl	80005c0 <__aeabi_lmul>
 801ddce:	9a08      	ldr	r2, [sp, #32]
 801ddd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddd2:	000f      	movs	r7, r1
 801ddd4:	0030      	movs	r0, r6
 801ddd6:	4641      	mov	r1, r8
 801ddd8:	f7e2 fbf2 	bl	80005c0 <__aeabi_lmul>
 801dddc:	9b00      	ldr	r3, [sp, #0]
 801ddde:	9a01      	ldr	r2, [sp, #4]
 801dde0:	469c      	mov	ip, r3
 801dde2:	9803      	ldr	r0, [sp, #12]
 801dde4:	1a7f      	subs	r7, r7, r1
 801dde6:	107f      	asrs	r7, r7, #1
 801dde8:	6067      	str	r7, [r4, #4]
 801ddea:	0016      	movs	r6, r2
 801ddec:	4464      	add	r4, ip
 801ddee:	4684      	mov	ip, r0
 801ddf0:	4466      	add	r6, ip
 801ddf2:	17f2      	asrs	r2, r6, #31
 801ddf4:	4690      	mov	r8, r2
 801ddf6:	9902      	ldr	r1, [sp, #8]
 801ddf8:	9f04      	ldr	r7, [sp, #16]
 801ddfa:	0030      	movs	r0, r6
 801ddfc:	1bcf      	subs	r7, r1, r7
 801ddfe:	17fa      	asrs	r2, r7, #31
 801de00:	4692      	mov	sl, r2
 801de02:	4641      	mov	r1, r8
 801de04:	9a05      	ldr	r2, [sp, #20]
 801de06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de08:	f7e2 fbda 	bl	80005c0 <__aeabi_lmul>
 801de0c:	9a06      	ldr	r2, [sp, #24]
 801de0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de10:	9112      	str	r1, [sp, #72]	@ 0x48
 801de12:	0038      	movs	r0, r7
 801de14:	4651      	mov	r1, sl
 801de16:	f7e2 fbd3 	bl	80005c0 <__aeabi_lmul>
 801de1a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801de1c:	9a05      	ldr	r2, [sp, #20]
 801de1e:	4684      	mov	ip, r0
 801de20:	4648      	mov	r0, r9
 801de22:	4461      	add	r1, ip
 801de24:	1049      	asrs	r1, r1, #1
 801de26:	6001      	str	r1, [r0, #0]
 801de28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de2a:	0038      	movs	r0, r7
 801de2c:	4651      	mov	r1, sl
 801de2e:	f7e2 fbc7 	bl	80005c0 <__aeabi_lmul>
 801de32:	9a06      	ldr	r2, [sp, #24]
 801de34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de36:	000f      	movs	r7, r1
 801de38:	0030      	movs	r0, r6
 801de3a:	4641      	mov	r1, r8
 801de3c:	f7e2 fbc0 	bl	80005c0 <__aeabi_lmul>
 801de40:	464e      	mov	r6, r9
 801de42:	9a00      	ldr	r2, [sp, #0]
 801de44:	9b01      	ldr	r3, [sp, #4]
 801de46:	4694      	mov	ip, r2
 801de48:	9803      	ldr	r0, [sp, #12]
 801de4a:	1a7f      	subs	r7, r7, r1
 801de4c:	107f      	asrs	r7, r7, #1
 801de4e:	6077      	str	r7, [r6, #4]
 801de50:	1a1e      	subs	r6, r3, r0
 801de52:	9b04      	ldr	r3, [sp, #16]
 801de54:	44e1      	add	r9, ip
 801de56:	469c      	mov	ip, r3
 801de58:	17f0      	asrs	r0, r6, #31
 801de5a:	4680      	mov	r8, r0
 801de5c:	9902      	ldr	r1, [sp, #8]
 801de5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de60:	4461      	add	r1, ip
 801de62:	17cb      	asrs	r3, r1, #31
 801de64:	000f      	movs	r7, r1
 801de66:	469a      	mov	sl, r3
 801de68:	0030      	movs	r0, r6
 801de6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801de6c:	4641      	mov	r1, r8
 801de6e:	f7e2 fba7 	bl	80005c0 <__aeabi_lmul>
 801de72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801de76:	9101      	str	r1, [sp, #4]
 801de78:	0038      	movs	r0, r7
 801de7a:	4651      	mov	r1, sl
 801de7c:	f7e2 fba0 	bl	80005c0 <__aeabi_lmul>
 801de80:	9801      	ldr	r0, [sp, #4]
 801de82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de84:	4684      	mov	ip, r0
 801de86:	4461      	add	r1, ip
 801de88:	1049      	asrs	r1, r1, #1
 801de8a:	6029      	str	r1, [r5, #0]
 801de8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801de8e:	0038      	movs	r0, r7
 801de90:	4651      	mov	r1, sl
 801de92:	f7e2 fb95 	bl	80005c0 <__aeabi_lmul>
 801de96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801de98:	000f      	movs	r7, r1
 801de9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de9c:	0030      	movs	r0, r6
 801de9e:	4641      	mov	r1, r8
 801dea0:	f7e2 fb8e 	bl	80005c0 <__aeabi_lmul>
 801dea4:	1a7f      	subs	r7, r7, r1
 801dea6:	107f      	asrs	r7, r7, #1
 801dea8:	606f      	str	r7, [r5, #4]
 801deaa:	9a00      	ldr	r2, [sp, #0]
 801deac:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801deae:	4694      	mov	ip, r2
 801deb0:	4465      	add	r5, ip
 801deb2:	468c      	mov	ip, r1
 801deb4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801deb6:	0013      	movs	r3, r2
 801deb8:	4462      	add	r2, ip
 801deba:	920b      	str	r2, [sp, #44]	@ 0x2c
 801debc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801debe:	429a      	cmp	r2, r3
 801dec0:	d900      	bls.n	801dec4 <arm_radix4_butterfly_q31+0x478>
 801dec2:	e73a      	b.n	801dd3a <arm_radix4_butterfly_q31+0x2ee>
 801dec4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dec6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dec8:	468c      	mov	ip, r1
 801deca:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801decc:	4462      	add	r2, ip
 801dece:	468c      	mov	ip, r1
 801ded0:	9216      	str	r2, [sp, #88]	@ 0x58
 801ded2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801ded4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ded6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ded8:	4462      	add	r2, ip
 801deda:	468c      	mov	ip, r1
 801dedc:	9219      	str	r2, [sp, #100]	@ 0x64
 801dede:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801dee0:	3301      	adds	r3, #1
 801dee2:	4462      	add	r2, ip
 801dee4:	9218      	str	r2, [sp, #96]	@ 0x60
 801dee6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801dee8:	9315      	str	r3, [sp, #84]	@ 0x54
 801deea:	3208      	adds	r2, #8
 801deec:	9217      	str	r2, [sp, #92]	@ 0x5c
 801deee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801def0:	4293      	cmp	r3, r2
 801def2:	d800      	bhi.n	801def6 <arm_radix4_butterfly_q31+0x4aa>
 801def4:	e6e8      	b.n	801dcc8 <arm_radix4_butterfly_q31+0x27c>
 801def6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801def8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801defa:	009b      	lsls	r3, r3, #2
 801defc:	931f      	str	r3, [sp, #124]	@ 0x7c
 801defe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801df00:	9213      	str	r2, [sp, #76]	@ 0x4c
 801df02:	089b      	lsrs	r3, r3, #2
 801df04:	9320      	str	r3, [sp, #128]	@ 0x80
 801df06:	2b04      	cmp	r3, #4
 801df08:	d900      	bls.n	801df0c <arm_radix4_butterfly_q31+0x4c0>
 801df0a:	e6c1      	b.n	801dc90 <arm_radix4_butterfly_q31+0x244>
 801df0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801df0e:	469a      	mov	sl, r3
 801df10:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df12:	691c      	ldr	r4, [r3, #16]
 801df14:	685a      	ldr	r2, [r3, #4]
 801df16:	46a1      	mov	r9, r4
 801df18:	4690      	mov	r8, r2
 801df1a:	6819      	ldr	r1, [r3, #0]
 801df1c:	689a      	ldr	r2, [r3, #8]
 801df1e:	699f      	ldr	r7, [r3, #24]
 801df20:	188d      	adds	r5, r1, r2
 801df22:	444d      	add	r5, r9
 801df24:	19ed      	adds	r5, r5, r7
 801df26:	69de      	ldr	r6, [r3, #28]
 801df28:	601d      	str	r5, [r3, #0]
 801df2a:	4645      	mov	r5, r8
 801df2c:	46b4      	mov	ip, r6
 801df2e:	68d8      	ldr	r0, [r3, #12]
 801df30:	695c      	ldr	r4, [r3, #20]
 801df32:	182d      	adds	r5, r5, r0
 801df34:	192d      	adds	r5, r5, r4
 801df36:	4465      	add	r5, ip
 801df38:	605d      	str	r5, [r3, #4]
 801df3a:	1a8d      	subs	r5, r1, r2
 801df3c:	444d      	add	r5, r9
 801df3e:	1bed      	subs	r5, r5, r7
 801df40:	609d      	str	r5, [r3, #8]
 801df42:	4645      	mov	r5, r8
 801df44:	1a2d      	subs	r5, r5, r0
 801df46:	192d      	adds	r5, r5, r4
 801df48:	1bad      	subs	r5, r5, r6
 801df4a:	464e      	mov	r6, r9
 801df4c:	60dd      	str	r5, [r3, #12]
 801df4e:	180d      	adds	r5, r1, r0
 801df50:	1bad      	subs	r5, r5, r6
 801df52:	4666      	mov	r6, ip
 801df54:	1bad      	subs	r5, r5, r6
 801df56:	611d      	str	r5, [r3, #16]
 801df58:	4645      	mov	r5, r8
 801df5a:	1aad      	subs	r5, r5, r2
 801df5c:	4442      	add	r2, r8
 801df5e:	1b12      	subs	r2, r2, r4
 801df60:	1bd2      	subs	r2, r2, r7
 801df62:	1a08      	subs	r0, r1, r0
 801df64:	61da      	str	r2, [r3, #28]
 801df66:	4649      	mov	r1, r9
 801df68:	2201      	movs	r2, #1
 801df6a:	1a41      	subs	r1, r0, r1
 801df6c:	4252      	negs	r2, r2
 801df6e:	4461      	add	r1, ip
 801df70:	4694      	mov	ip, r2
 801df72:	44e2      	add	sl, ip
 801df74:	4652      	mov	r2, sl
 801df76:	1b2d      	subs	r5, r5, r4
 801df78:	19ed      	adds	r5, r5, r7
 801df7a:	615d      	str	r5, [r3, #20]
 801df7c:	6199      	str	r1, [r3, #24]
 801df7e:	3320      	adds	r3, #32
 801df80:	2a00      	cmp	r2, #0
 801df82:	d1c6      	bne.n	801df12 <arm_radix4_butterfly_q31+0x4c6>
 801df84:	b027      	add	sp, #156	@ 0x9c
 801df86:	bc3c      	pop	{r2, r3, r4, r5}
 801df88:	4690      	mov	r8, r2
 801df8a:	4699      	mov	r9, r3
 801df8c:	46a2      	mov	sl, r4
 801df8e:	46ab      	mov	fp, r5
 801df90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df92:	469a      	mov	sl, r3
 801df94:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df96:	e7bc      	b.n	801df12 <arm_radix4_butterfly_q31+0x4c6>

0801df98 <arm_radix4_butterfly_inverse_q31>:
 801df98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df9a:	464d      	mov	r5, r9
 801df9c:	4644      	mov	r4, r8
 801df9e:	465f      	mov	r7, fp
 801dfa0:	4656      	mov	r6, sl
 801dfa2:	b4f0      	push	{r4, r5, r6, r7}
 801dfa4:	b0a7      	sub	sp, #156	@ 0x9c
 801dfa6:	469c      	mov	ip, r3
 801dfa8:	9114      	str	r1, [sp, #80]	@ 0x50
 801dfaa:	0889      	lsrs	r1, r1, #2
 801dfac:	9310      	str	r3, [sp, #64]	@ 0x40
 801dfae:	00cb      	lsls	r3, r1, #3
 801dfb0:	0015      	movs	r5, r2
 801dfb2:	9223      	str	r2, [sp, #140]	@ 0x8c
 801dfb4:	18c2      	adds	r2, r0, r3
 801dfb6:	000c      	movs	r4, r1
 801dfb8:	9124      	str	r1, [sp, #144]	@ 0x90
 801dfba:	18d1      	adds	r1, r2, r3
 801dfbc:	468b      	mov	fp, r1
 801dfbe:	469a      	mov	sl, r3
 801dfc0:	4663      	mov	r3, ip
 801dfc2:	44da      	add	sl, fp
 801dfc4:	46d0      	mov	r8, sl
 801dfc6:	4681      	mov	r9, r0
 801dfc8:	4692      	mov	sl, r2
 801dfca:	0119      	lsls	r1, r3, #4
 801dfcc:	910d      	str	r1, [sp, #52]	@ 0x34
 801dfce:	00d9      	lsls	r1, r3, #3
 801dfd0:	005b      	lsls	r3, r3, #1
 801dfd2:	4463      	add	r3, ip
 801dfd4:	910e      	str	r1, [sp, #56]	@ 0x38
 801dfd6:	00d9      	lsls	r1, r3, #3
 801dfd8:	9022      	str	r0, [sp, #136]	@ 0x88
 801dfda:	9025      	str	r0, [sp, #148]	@ 0x94
 801dfdc:	910f      	str	r1, [sp, #60]	@ 0x3c
 801dfde:	9502      	str	r5, [sp, #8]
 801dfe0:	9500      	str	r5, [sp, #0]
 801dfe2:	9501      	str	r5, [sp, #4]
 801dfe4:	9409      	str	r4, [sp, #36]	@ 0x24
 801dfe6:	464b      	mov	r3, r9
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	4652      	mov	r2, sl
 801dfec:	111c      	asrs	r4, r3, #4
 801dfee:	465b      	mov	r3, fp
 801dff0:	4648      	mov	r0, r9
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	6812      	ldr	r2, [r2, #0]
 801dff6:	6840      	ldr	r0, [r0, #4]
 801dff8:	111b      	asrs	r3, r3, #4
 801dffa:	18e7      	adds	r7, r4, r3
 801dffc:	1ae3      	subs	r3, r4, r3
 801dffe:	1114      	asrs	r4, r2, #4
 801e000:	4642      	mov	r2, r8
 801e002:	1105      	asrs	r5, r0, #4
 801e004:	4658      	mov	r0, fp
 801e006:	6812      	ldr	r2, [r2, #0]
 801e008:	6840      	ldr	r0, [r0, #4]
 801e00a:	9303      	str	r3, [sp, #12]
 801e00c:	1113      	asrs	r3, r2, #4
 801e00e:	18e2      	adds	r2, r4, r3
 801e010:	1103      	asrs	r3, r0, #4
 801e012:	18ee      	adds	r6, r5, r3
 801e014:	1ae8      	subs	r0, r5, r3
 801e016:	464d      	mov	r5, r9
 801e018:	18bb      	adds	r3, r7, r2
 801e01a:	602b      	str	r3, [r5, #0]
 801e01c:	4641      	mov	r1, r8
 801e01e:	4655      	mov	r5, sl
 801e020:	6849      	ldr	r1, [r1, #4]
 801e022:	686d      	ldr	r5, [r5, #4]
 801e024:	110b      	asrs	r3, r1, #4
 801e026:	112d      	asrs	r5, r5, #4
 801e028:	18eb      	adds	r3, r5, r3
 801e02a:	464d      	mov	r5, r9
 801e02c:	18f1      	adds	r1, r6, r3
 801e02e:	6069      	str	r1, [r5, #4]
 801e030:	4655      	mov	r5, sl
 801e032:	686d      	ldr	r5, [r5, #4]
 801e034:	9004      	str	r0, [sp, #16]
 801e036:	112c      	asrs	r4, r5, #4
 801e038:	4645      	mov	r5, r8
 801e03a:	686d      	ldr	r5, [r5, #4]
 801e03c:	1129      	asrs	r1, r5, #4
 801e03e:	1a65      	subs	r5, r4, r1
 801e040:	4651      	mov	r1, sl
 801e042:	6809      	ldr	r1, [r1, #0]
 801e044:	1abc      	subs	r4, r7, r2
 801e046:	1108      	asrs	r0, r1, #4
 801e048:	4641      	mov	r1, r8
 801e04a:	17e2      	asrs	r2, r4, #31
 801e04c:	6809      	ldr	r1, [r1, #0]
 801e04e:	9207      	str	r2, [sp, #28]
 801e050:	9a01      	ldr	r2, [sp, #4]
 801e052:	1109      	asrs	r1, r1, #4
 801e054:	6817      	ldr	r7, [r2, #0]
 801e056:	1a41      	subs	r1, r0, r1
 801e058:	9106      	str	r1, [sp, #24]
 801e05a:	0039      	movs	r1, r7
 801e05c:	17ff      	asrs	r7, r7, #31
 801e05e:	0038      	movs	r0, r7
 801e060:	9505      	str	r5, [sp, #20]
 801e062:	1af5      	subs	r5, r6, r3
 801e064:	17ef      	asrs	r7, r5, #31
 801e066:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e068:	6857      	ldr	r7, [r2, #4]
 801e06a:	0003      	movs	r3, r0
 801e06c:	17fe      	asrs	r6, r7, #31
 801e06e:	000a      	movs	r2, r1
 801e070:	9108      	str	r1, [sp, #32]
 801e072:	900a      	str	r0, [sp, #40]	@ 0x28
 801e074:	17e1      	asrs	r1, r4, #31
 801e076:	0020      	movs	r0, r4
 801e078:	960c      	str	r6, [sp, #48]	@ 0x30
 801e07a:	f7e2 faa1 	bl	80005c0 <__aeabi_lmul>
 801e07e:	003a      	movs	r2, r7
 801e080:	17fb      	asrs	r3, r7, #31
 801e082:	000e      	movs	r6, r1
 801e084:	0028      	movs	r0, r5
 801e086:	17e9      	asrs	r1, r5, #31
 801e088:	f7e2 fa9a 	bl	80005c0 <__aeabi_lmul>
 801e08c:	4653      	mov	r3, sl
 801e08e:	1a76      	subs	r6, r6, r1
 801e090:	0076      	lsls	r6, r6, #1
 801e092:	601e      	str	r6, [r3, #0]
 801e094:	002a      	movs	r2, r5
 801e096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e098:	9808      	ldr	r0, [sp, #32]
 801e09a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e09c:	f7e2 fa90 	bl	80005c0 <__aeabi_lmul>
 801e0a0:	003a      	movs	r2, r7
 801e0a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0a4:	000d      	movs	r5, r1
 801e0a6:	0020      	movs	r0, r4
 801e0a8:	9907      	ldr	r1, [sp, #28]
 801e0aa:	f7e2 fa89 	bl	80005c0 <__aeabi_lmul>
 801e0ae:	4657      	mov	r7, sl
 801e0b0:	186d      	adds	r5, r5, r1
 801e0b2:	006d      	lsls	r5, r5, #1
 801e0b4:	607d      	str	r5, [r7, #4]
 801e0b6:	9b03      	ldr	r3, [sp, #12]
 801e0b8:	9e06      	ldr	r6, [sp, #24]
 801e0ba:	9d05      	ldr	r5, [sp, #20]
 801e0bc:	46b4      	mov	ip, r6
 801e0be:	1b5d      	subs	r5, r3, r5
 801e0c0:	9b00      	ldr	r3, [sp, #0]
 801e0c2:	17ef      	asrs	r7, r5, #31
 801e0c4:	0039      	movs	r1, r7
 801e0c6:	681f      	ldr	r7, [r3, #0]
 801e0c8:	17fc      	asrs	r4, r7, #31
 801e0ca:	0020      	movs	r0, r4
 801e0cc:	9c04      	ldr	r4, [sp, #16]
 801e0ce:	4464      	add	r4, ip
 801e0d0:	17e6      	asrs	r6, r4, #31
 801e0d2:	9407      	str	r4, [sp, #28]
 801e0d4:	9608      	str	r6, [sp, #32]
 801e0d6:	685e      	ldr	r6, [r3, #4]
 801e0d8:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e0da:	17f2      	asrs	r2, r6, #31
 801e0dc:	0003      	movs	r3, r0
 801e0de:	920c      	str	r2, [sp, #48]	@ 0x30
 801e0e0:	0028      	movs	r0, r5
 801e0e2:	003a      	movs	r2, r7
 801e0e4:	910a      	str	r1, [sp, #40]	@ 0x28
 801e0e6:	f7e2 fa6b 	bl	80005c0 <__aeabi_lmul>
 801e0ea:	0032      	movs	r2, r6
 801e0ec:	17f3      	asrs	r3, r6, #31
 801e0ee:	9807      	ldr	r0, [sp, #28]
 801e0f0:	000c      	movs	r4, r1
 801e0f2:	9908      	ldr	r1, [sp, #32]
 801e0f4:	f7e2 fa64 	bl	80005c0 <__aeabi_lmul>
 801e0f8:	4658      	mov	r0, fp
 801e0fa:	1a64      	subs	r4, r4, r1
 801e0fc:	0064      	lsls	r4, r4, #1
 801e0fe:	9a07      	ldr	r2, [sp, #28]
 801e100:	6004      	str	r4, [r0, #0]
 801e102:	9b08      	ldr	r3, [sp, #32]
 801e104:	0038      	movs	r0, r7
 801e106:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e108:	f7e2 fa5a 	bl	80005c0 <__aeabi_lmul>
 801e10c:	0032      	movs	r2, r6
 801e10e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e110:	000c      	movs	r4, r1
 801e112:	0028      	movs	r0, r5
 801e114:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e116:	f7e2 fa53 	bl	80005c0 <__aeabi_lmul>
 801e11a:	9d05      	ldr	r5, [sp, #20]
 801e11c:	465f      	mov	r7, fp
 801e11e:	46ac      	mov	ip, r5
 801e120:	1864      	adds	r4, r4, r1
 801e122:	9903      	ldr	r1, [sp, #12]
 801e124:	0064      	lsls	r4, r4, #1
 801e126:	4461      	add	r1, ip
 801e128:	607c      	str	r4, [r7, #4]
 801e12a:	000c      	movs	r4, r1
 801e12c:	17c9      	asrs	r1, r1, #31
 801e12e:	9105      	str	r1, [sp, #20]
 801e130:	9902      	ldr	r1, [sp, #8]
 801e132:	9804      	ldr	r0, [sp, #16]
 801e134:	680d      	ldr	r5, [r1, #0]
 801e136:	9e06      	ldr	r6, [sp, #24]
 801e138:	002b      	movs	r3, r5
 801e13a:	17ed      	asrs	r5, r5, #31
 801e13c:	684f      	ldr	r7, [r1, #4]
 801e13e:	9503      	str	r5, [sp, #12]
 801e140:	1b85      	subs	r5, r0, r6
 801e142:	17e8      	asrs	r0, r5, #31
 801e144:	001a      	movs	r2, r3
 801e146:	9006      	str	r0, [sp, #24]
 801e148:	17fe      	asrs	r6, r7, #31
 801e14a:	9304      	str	r3, [sp, #16]
 801e14c:	0020      	movs	r0, r4
 801e14e:	9b03      	ldr	r3, [sp, #12]
 801e150:	17e1      	asrs	r1, r4, #31
 801e152:	9607      	str	r6, [sp, #28]
 801e154:	f7e2 fa34 	bl	80005c0 <__aeabi_lmul>
 801e158:	003a      	movs	r2, r7
 801e15a:	000e      	movs	r6, r1
 801e15c:	17fb      	asrs	r3, r7, #31
 801e15e:	0028      	movs	r0, r5
 801e160:	17e9      	asrs	r1, r5, #31
 801e162:	f7e2 fa2d 	bl	80005c0 <__aeabi_lmul>
 801e166:	4640      	mov	r0, r8
 801e168:	1a76      	subs	r6, r6, r1
 801e16a:	0076      	lsls	r6, r6, #1
 801e16c:	002a      	movs	r2, r5
 801e16e:	9b06      	ldr	r3, [sp, #24]
 801e170:	6006      	str	r6, [r0, #0]
 801e172:	9903      	ldr	r1, [sp, #12]
 801e174:	9804      	ldr	r0, [sp, #16]
 801e176:	f7e2 fa23 	bl	80005c0 <__aeabi_lmul>
 801e17a:	0020      	movs	r0, r4
 801e17c:	2408      	movs	r4, #8
 801e17e:	9b07      	ldr	r3, [sp, #28]
 801e180:	000d      	movs	r5, r1
 801e182:	003a      	movs	r2, r7
 801e184:	9905      	ldr	r1, [sp, #20]
 801e186:	f7e2 fa1b 	bl	80005c0 <__aeabi_lmul>
 801e18a:	4640      	mov	r0, r8
 801e18c:	46a4      	mov	ip, r4
 801e18e:	186d      	adds	r5, r5, r1
 801e190:	006d      	lsls	r5, r5, #1
 801e192:	6045      	str	r5, [r0, #4]
 801e194:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e196:	44e1      	add	r9, ip
 801e198:	3801      	subs	r0, #1
 801e19a:	9009      	str	r0, [sp, #36]	@ 0x24
 801e19c:	9a01      	ldr	r2, [sp, #4]
 801e19e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e1a0:	44e2      	add	sl, ip
 801e1a2:	44e3      	add	fp, ip
 801e1a4:	44e0      	add	r8, ip
 801e1a6:	46a4      	mov	ip, r4
 801e1a8:	4462      	add	r2, ip
 801e1aa:	9201      	str	r2, [sp, #4]
 801e1ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1ae:	9b00      	ldr	r3, [sp, #0]
 801e1b0:	4694      	mov	ip, r2
 801e1b2:	4463      	add	r3, ip
 801e1b4:	9300      	str	r3, [sp, #0]
 801e1b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1b8:	9902      	ldr	r1, [sp, #8]
 801e1ba:	469c      	mov	ip, r3
 801e1bc:	4461      	add	r1, ip
 801e1be:	9102      	str	r1, [sp, #8]
 801e1c0:	2800      	cmp	r0, #0
 801e1c2:	d000      	beq.n	801e1c6 <arm_radix4_butterfly_inverse_q31+0x22e>
 801e1c4:	e70f      	b.n	801dfe6 <arm_radix4_butterfly_inverse_q31+0x4e>
 801e1c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e1c8:	009b      	lsls	r3, r3, #2
 801e1ca:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e1cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e1ce:	9320      	str	r3, [sp, #128]	@ 0x80
 801e1d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e1d2:	2b04      	cmp	r3, #4
 801e1d4:	d800      	bhi.n	801e1d8 <arm_radix4_butterfly_inverse_q31+0x240>
 801e1d6:	e17c      	b.n	801e4d2 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e1d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e1da:	0893      	lsrs	r3, r2, #2
 801e1dc:	1e59      	subs	r1, r3, #1
 801e1de:	9321      	str	r3, [sp, #132]	@ 0x84
 801e1e0:	00db      	lsls	r3, r3, #3
 801e1e2:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e1e4:	00d3      	lsls	r3, r2, #3
 801e1e6:	9300      	str	r3, [sp, #0]
 801e1e8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e1ea:	911a      	str	r1, [sp, #104]	@ 0x68
 801e1ec:	00da      	lsls	r2, r3, #3
 801e1ee:	921e      	str	r2, [sp, #120]	@ 0x78
 801e1f0:	011a      	lsls	r2, r3, #4
 801e1f2:	921d      	str	r2, [sp, #116]	@ 0x74
 801e1f4:	001a      	movs	r2, r3
 801e1f6:	4694      	mov	ip, r2
 801e1f8:	005b      	lsls	r3, r3, #1
 801e1fa:	4463      	add	r3, ip
 801e1fc:	00db      	lsls	r3, r3, #3
 801e1fe:	931c      	str	r3, [sp, #112]	@ 0x70
 801e200:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e202:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e206:	9318      	str	r3, [sp, #96]	@ 0x60
 801e208:	9319      	str	r3, [sp, #100]	@ 0x64
 801e20a:	9316      	str	r3, [sp, #88]	@ 0x58
 801e20c:	2300      	movs	r3, #0
 801e20e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e210:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e212:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e214:	681a      	ldr	r2, [r3, #0]
 801e216:	685b      	ldr	r3, [r3, #4]
 801e218:	9205      	str	r2, [sp, #20]
 801e21a:	9306      	str	r3, [sp, #24]
 801e21c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e21e:	468c      	mov	ip, r1
 801e220:	681a      	ldr	r2, [r3, #0]
 801e222:	685b      	ldr	r3, [r3, #4]
 801e224:	9207      	str	r2, [sp, #28]
 801e226:	9308      	str	r3, [sp, #32]
 801e228:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e22a:	681a      	ldr	r2, [r3, #0]
 801e22c:	685b      	ldr	r3, [r3, #4]
 801e22e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e230:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e232:	930a      	str	r3, [sp, #40]	@ 0x28
 801e234:	0013      	movs	r3, r2
 801e236:	4463      	add	r3, ip
 801e238:	4698      	mov	r8, r3
 801e23a:	0013      	movs	r3, r2
 801e23c:	4442      	add	r2, r8
 801e23e:	4691      	mov	r9, r2
 801e240:	001a      	movs	r2, r3
 801e242:	444a      	add	r2, r9
 801e244:	4692      	mov	sl, r2
 801e246:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e248:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e24a:	4293      	cmp	r3, r2
 801e24c:	d800      	bhi.n	801e250 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e24e:	e0d9      	b.n	801e404 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e250:	4694      	mov	ip, r2
 801e252:	4644      	mov	r4, r8
 801e254:	4655      	mov	r5, sl
 801e256:	4688      	mov	r8, r1
 801e258:	9b07      	ldr	r3, [sp, #28]
 801e25a:	17db      	asrs	r3, r3, #31
 801e25c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e25e:	9b08      	ldr	r3, [sp, #32]
 801e260:	17db      	asrs	r3, r3, #31
 801e262:	930d      	str	r3, [sp, #52]	@ 0x34
 801e264:	9b05      	ldr	r3, [sp, #20]
 801e266:	17db      	asrs	r3, r3, #31
 801e268:	930e      	str	r3, [sp, #56]	@ 0x38
 801e26a:	9b06      	ldr	r3, [sp, #24]
 801e26c:	17db      	asrs	r3, r3, #31
 801e26e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e272:	17db      	asrs	r3, r3, #31
 801e274:	9310      	str	r3, [sp, #64]	@ 0x40
 801e276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e278:	17db      	asrs	r3, r3, #31
 801e27a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e27c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e27e:	4463      	add	r3, ip
 801e280:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e282:	4643      	mov	r3, r8
 801e284:	4641      	mov	r1, r8
 801e286:	681a      	ldr	r2, [r3, #0]
 801e288:	464b      	mov	r3, r9
 801e28a:	684f      	ldr	r7, [r1, #4]
 801e28c:	4649      	mov	r1, r9
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	18d6      	adds	r6, r2, r3
 801e292:	1ad3      	subs	r3, r2, r3
 801e294:	9301      	str	r3, [sp, #4]
 801e296:	684b      	ldr	r3, [r1, #4]
 801e298:	1af9      	subs	r1, r7, r3
 801e29a:	9102      	str	r1, [sp, #8]
 801e29c:	6829      	ldr	r1, [r5, #0]
 801e29e:	18f8      	adds	r0, r7, r3
 801e2a0:	468c      	mov	ip, r1
 801e2a2:	6827      	ldr	r7, [r4, #0]
 801e2a4:	4467      	add	r7, ip
 801e2a6:	003a      	movs	r2, r7
 801e2a8:	19f3      	adds	r3, r6, r7
 801e2aa:	4647      	mov	r7, r8
 801e2ac:	109b      	asrs	r3, r3, #2
 801e2ae:	603b      	str	r3, [r7, #0]
 801e2b0:	6869      	ldr	r1, [r5, #4]
 801e2b2:	6867      	ldr	r7, [r4, #4]
 801e2b4:	468c      	mov	ip, r1
 801e2b6:	4467      	add	r7, ip
 801e2b8:	003b      	movs	r3, r7
 801e2ba:	19c1      	adds	r1, r0, r7
 801e2bc:	4647      	mov	r7, r8
 801e2be:	1ab6      	subs	r6, r6, r2
 801e2c0:	1089      	asrs	r1, r1, #2
 801e2c2:	6079      	str	r1, [r7, #4]
 801e2c4:	17f2      	asrs	r2, r6, #31
 801e2c6:	9900      	ldr	r1, [sp, #0]
 801e2c8:	4692      	mov	sl, r2
 801e2ca:	468c      	mov	ip, r1
 801e2cc:	6867      	ldr	r7, [r4, #4]
 801e2ce:	6869      	ldr	r1, [r5, #4]
 801e2d0:	44e0      	add	r8, ip
 801e2d2:	1a7f      	subs	r7, r7, r1
 801e2d4:	9703      	str	r7, [sp, #12]
 801e2d6:	6821      	ldr	r1, [r4, #0]
 801e2d8:	682f      	ldr	r7, [r5, #0]
 801e2da:	1bc9      	subs	r1, r1, r7
 801e2dc:	1ac7      	subs	r7, r0, r3
 801e2de:	17fa      	asrs	r2, r7, #31
 801e2e0:	4693      	mov	fp, r2
 801e2e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2e4:	9a07      	ldr	r2, [sp, #28]
 801e2e6:	9104      	str	r1, [sp, #16]
 801e2e8:	0030      	movs	r0, r6
 801e2ea:	4651      	mov	r1, sl
 801e2ec:	f7e2 f968 	bl	80005c0 <__aeabi_lmul>
 801e2f0:	9a08      	ldr	r2, [sp, #32]
 801e2f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2f4:	9112      	str	r1, [sp, #72]	@ 0x48
 801e2f6:	0038      	movs	r0, r7
 801e2f8:	4659      	mov	r1, fp
 801e2fa:	f7e2 f961 	bl	80005c0 <__aeabi_lmul>
 801e2fe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e300:	9a07      	ldr	r2, [sp, #28]
 801e302:	1a41      	subs	r1, r0, r1
 801e304:	1049      	asrs	r1, r1, #1
 801e306:	6021      	str	r1, [r4, #0]
 801e308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e30a:	0038      	movs	r0, r7
 801e30c:	4659      	mov	r1, fp
 801e30e:	f7e2 f957 	bl	80005c0 <__aeabi_lmul>
 801e312:	9a08      	ldr	r2, [sp, #32]
 801e314:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e316:	000f      	movs	r7, r1
 801e318:	0030      	movs	r0, r6
 801e31a:	4651      	mov	r1, sl
 801e31c:	f7e2 f950 	bl	80005c0 <__aeabi_lmul>
 801e320:	9b00      	ldr	r3, [sp, #0]
 801e322:	187f      	adds	r7, r7, r1
 801e324:	469c      	mov	ip, r3
 801e326:	107f      	asrs	r7, r7, #1
 801e328:	6067      	str	r7, [r4, #4]
 801e32a:	9a01      	ldr	r2, [sp, #4]
 801e32c:	9f03      	ldr	r7, [sp, #12]
 801e32e:	9802      	ldr	r0, [sp, #8]
 801e330:	1bd7      	subs	r7, r2, r7
 801e332:	17fe      	asrs	r6, r7, #31
 801e334:	0031      	movs	r1, r6
 801e336:	9e04      	ldr	r6, [sp, #16]
 801e338:	4682      	mov	sl, r0
 801e33a:	4464      	add	r4, ip
 801e33c:	46b4      	mov	ip, r6
 801e33e:	44e2      	add	sl, ip
 801e340:	4652      	mov	r2, sl
 801e342:	17d2      	asrs	r2, r2, #31
 801e344:	4693      	mov	fp, r2
 801e346:	0038      	movs	r0, r7
 801e348:	9a05      	ldr	r2, [sp, #20]
 801e34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e34c:	9112      	str	r1, [sp, #72]	@ 0x48
 801e34e:	f7e2 f937 	bl	80005c0 <__aeabi_lmul>
 801e352:	9a06      	ldr	r2, [sp, #24]
 801e354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e356:	000e      	movs	r6, r1
 801e358:	4650      	mov	r0, sl
 801e35a:	4659      	mov	r1, fp
 801e35c:	f7e2 f930 	bl	80005c0 <__aeabi_lmul>
 801e360:	4648      	mov	r0, r9
 801e362:	1a76      	subs	r6, r6, r1
 801e364:	1076      	asrs	r6, r6, #1
 801e366:	6006      	str	r6, [r0, #0]
 801e368:	9a05      	ldr	r2, [sp, #20]
 801e36a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e36c:	4650      	mov	r0, sl
 801e36e:	4659      	mov	r1, fp
 801e370:	f7e2 f926 	bl	80005c0 <__aeabi_lmul>
 801e374:	9a06      	ldr	r2, [sp, #24]
 801e376:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e378:	000e      	movs	r6, r1
 801e37a:	0038      	movs	r0, r7
 801e37c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e37e:	f7e2 f91f 	bl	80005c0 <__aeabi_lmul>
 801e382:	9a00      	ldr	r2, [sp, #0]
 801e384:	9f03      	ldr	r7, [sp, #12]
 801e386:	4694      	mov	ip, r2
 801e388:	1876      	adds	r6, r6, r1
 801e38a:	4649      	mov	r1, r9
 801e38c:	44e1      	add	r9, ip
 801e38e:	46bc      	mov	ip, r7
 801e390:	9b01      	ldr	r3, [sp, #4]
 801e392:	1076      	asrs	r6, r6, #1
 801e394:	4463      	add	r3, ip
 801e396:	17df      	asrs	r7, r3, #31
 801e398:	604e      	str	r6, [r1, #4]
 801e39a:	46ba      	mov	sl, r7
 801e39c:	001e      	movs	r6, r3
 801e39e:	9802      	ldr	r0, [sp, #8]
 801e3a0:	9b04      	ldr	r3, [sp, #16]
 801e3a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3a4:	1ac7      	subs	r7, r0, r3
 801e3a6:	17fb      	asrs	r3, r7, #31
 801e3a8:	469b      	mov	fp, r3
 801e3aa:	0030      	movs	r0, r6
 801e3ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3ae:	4651      	mov	r1, sl
 801e3b0:	f7e2 f906 	bl	80005c0 <__aeabi_lmul>
 801e3b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e3b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e3b8:	9101      	str	r1, [sp, #4]
 801e3ba:	0038      	movs	r0, r7
 801e3bc:	4659      	mov	r1, fp
 801e3be:	f7e2 f8ff 	bl	80005c0 <__aeabi_lmul>
 801e3c2:	9801      	ldr	r0, [sp, #4]
 801e3c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3c6:	1a41      	subs	r1, r0, r1
 801e3c8:	1049      	asrs	r1, r1, #1
 801e3ca:	6029      	str	r1, [r5, #0]
 801e3cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3ce:	0038      	movs	r0, r7
 801e3d0:	4659      	mov	r1, fp
 801e3d2:	f7e2 f8f5 	bl	80005c0 <__aeabi_lmul>
 801e3d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e3d8:	000f      	movs	r7, r1
 801e3da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e3dc:	0030      	movs	r0, r6
 801e3de:	4651      	mov	r1, sl
 801e3e0:	f7e2 f8ee 	bl	80005c0 <__aeabi_lmul>
 801e3e4:	187f      	adds	r7, r7, r1
 801e3e6:	107f      	asrs	r7, r7, #1
 801e3e8:	606f      	str	r7, [r5, #4]
 801e3ea:	9a00      	ldr	r2, [sp, #0]
 801e3ec:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e3ee:	4694      	mov	ip, r2
 801e3f0:	4465      	add	r5, ip
 801e3f2:	468c      	mov	ip, r1
 801e3f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e3f6:	0013      	movs	r3, r2
 801e3f8:	4462      	add	r2, ip
 801e3fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e3fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e3fe:	429a      	cmp	r2, r3
 801e400:	d900      	bls.n	801e404 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e402:	e73e      	b.n	801e282 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e404:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e406:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e408:	468c      	mov	ip, r1
 801e40a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e40c:	4462      	add	r2, ip
 801e40e:	468c      	mov	ip, r1
 801e410:	9216      	str	r2, [sp, #88]	@ 0x58
 801e412:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e414:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e416:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e418:	4462      	add	r2, ip
 801e41a:	468c      	mov	ip, r1
 801e41c:	9219      	str	r2, [sp, #100]	@ 0x64
 801e41e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e420:	3301      	adds	r3, #1
 801e422:	4462      	add	r2, ip
 801e424:	9218      	str	r2, [sp, #96]	@ 0x60
 801e426:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e428:	9315      	str	r3, [sp, #84]	@ 0x54
 801e42a:	3208      	adds	r2, #8
 801e42c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e42e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e430:	4293      	cmp	r3, r2
 801e432:	d800      	bhi.n	801e436 <arm_radix4_butterfly_inverse_q31+0x49e>
 801e434:	e6ec      	b.n	801e210 <arm_radix4_butterfly_inverse_q31+0x278>
 801e436:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e438:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e43a:	009b      	lsls	r3, r3, #2
 801e43c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e43e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e440:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e442:	089b      	lsrs	r3, r3, #2
 801e444:	9320      	str	r3, [sp, #128]	@ 0x80
 801e446:	2b04      	cmp	r3, #4
 801e448:	d900      	bls.n	801e44c <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e44a:	e6c5      	b.n	801e1d8 <arm_radix4_butterfly_inverse_q31+0x240>
 801e44c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e44e:	469a      	mov	sl, r3
 801e450:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e452:	681a      	ldr	r2, [r3, #0]
 801e454:	6918      	ldr	r0, [r3, #16]
 801e456:	4691      	mov	r9, r2
 801e458:	464c      	mov	r4, r9
 801e45a:	4680      	mov	r8, r0
 801e45c:	69de      	ldr	r6, [r3, #28]
 801e45e:	689d      	ldr	r5, [r3, #8]
 801e460:	46b4      	mov	ip, r6
 801e462:	6998      	ldr	r0, [r3, #24]
 801e464:	1964      	adds	r4, r4, r5
 801e466:	6859      	ldr	r1, [r3, #4]
 801e468:	68da      	ldr	r2, [r3, #12]
 801e46a:	4444      	add	r4, r8
 801e46c:	695f      	ldr	r7, [r3, #20]
 801e46e:	1824      	adds	r4, r4, r0
 801e470:	601c      	str	r4, [r3, #0]
 801e472:	188c      	adds	r4, r1, r2
 801e474:	19e4      	adds	r4, r4, r7
 801e476:	4464      	add	r4, ip
 801e478:	605c      	str	r4, [r3, #4]
 801e47a:	464c      	mov	r4, r9
 801e47c:	1b64      	subs	r4, r4, r5
 801e47e:	4444      	add	r4, r8
 801e480:	1a24      	subs	r4, r4, r0
 801e482:	609c      	str	r4, [r3, #8]
 801e484:	1a8c      	subs	r4, r1, r2
 801e486:	19e4      	adds	r4, r4, r7
 801e488:	1ba4      	subs	r4, r4, r6
 801e48a:	60dc      	str	r4, [r3, #12]
 801e48c:	464c      	mov	r4, r9
 801e48e:	4646      	mov	r6, r8
 801e490:	1aa4      	subs	r4, r4, r2
 801e492:	1ba4      	subs	r4, r4, r6
 801e494:	4464      	add	r4, ip
 801e496:	611c      	str	r4, [r3, #16]
 801e498:	194c      	adds	r4, r1, r5
 801e49a:	1be4      	subs	r4, r4, r7
 801e49c:	1a24      	subs	r4, r4, r0
 801e49e:	615c      	str	r4, [r3, #20]
 801e4a0:	4644      	mov	r4, r8
 801e4a2:	4666      	mov	r6, ip
 801e4a4:	444a      	add	r2, r9
 801e4a6:	1b12      	subs	r2, r2, r4
 801e4a8:	1b92      	subs	r2, r2, r6
 801e4aa:	619a      	str	r2, [r3, #24]
 801e4ac:	1b4a      	subs	r2, r1, r5
 801e4ae:	1bd1      	subs	r1, r2, r7
 801e4b0:	2201      	movs	r2, #1
 801e4b2:	4252      	negs	r2, r2
 801e4b4:	4694      	mov	ip, r2
 801e4b6:	44e2      	add	sl, ip
 801e4b8:	4652      	mov	r2, sl
 801e4ba:	1809      	adds	r1, r1, r0
 801e4bc:	61d9      	str	r1, [r3, #28]
 801e4be:	3320      	adds	r3, #32
 801e4c0:	2a00      	cmp	r2, #0
 801e4c2:	d1c6      	bne.n	801e452 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e4c4:	b027      	add	sp, #156	@ 0x9c
 801e4c6:	bc3c      	pop	{r2, r3, r4, r5}
 801e4c8:	4690      	mov	r8, r2
 801e4ca:	4699      	mov	r9, r3
 801e4cc:	46a2      	mov	sl, r4
 801e4ce:	46ab      	mov	fp, r5
 801e4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4d2:	469a      	mov	sl, r3
 801e4d4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e4d6:	e7bc      	b.n	801e452 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e4d8 <arm_cmplx_mag_squared_q31>:
 801e4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4da:	464f      	mov	r7, r9
 801e4dc:	4646      	mov	r6, r8
 801e4de:	0004      	movs	r4, r0
 801e4e0:	b4c0      	push	{r6, r7}
 801e4e2:	0016      	movs	r6, r2
 801e4e4:	000f      	movs	r7, r1
 801e4e6:	2a00      	cmp	r2, #0
 801e4e8:	d018      	beq.n	801e51c <arm_cmplx_mag_squared_q31+0x44>
 801e4ea:	6823      	ldr	r3, [r4, #0]
 801e4ec:	6822      	ldr	r2, [r4, #0]
 801e4ee:	17d9      	asrs	r1, r3, #31
 801e4f0:	6863      	ldr	r3, [r4, #4]
 801e4f2:	0010      	movs	r0, r2
 801e4f4:	4698      	mov	r8, r3
 801e4f6:	17db      	asrs	r3, r3, #31
 801e4f8:	4699      	mov	r9, r3
 801e4fa:	000b      	movs	r3, r1
 801e4fc:	f7e2 f860 	bl	80005c0 <__aeabi_lmul>
 801e500:	4642      	mov	r2, r8
 801e502:	104d      	asrs	r5, r1, #1
 801e504:	464b      	mov	r3, r9
 801e506:	4640      	mov	r0, r8
 801e508:	4649      	mov	r1, r9
 801e50a:	f7e2 f859 	bl	80005c0 <__aeabi_lmul>
 801e50e:	1049      	asrs	r1, r1, #1
 801e510:	1869      	adds	r1, r5, r1
 801e512:	3e01      	subs	r6, #1
 801e514:	c702      	stmia	r7!, {r1}
 801e516:	3408      	adds	r4, #8
 801e518:	2e00      	cmp	r6, #0
 801e51a:	d1e6      	bne.n	801e4ea <arm_cmplx_mag_squared_q31+0x12>
 801e51c:	bc0c      	pop	{r2, r3}
 801e51e:	4690      	mov	r8, r2
 801e520:	4699      	mov	r9, r3
 801e522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e524 <arm_mult_q31>:
 801e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e526:	4646      	mov	r6, r8
 801e528:	464f      	mov	r7, r9
 801e52a:	4690      	mov	r8, r2
 801e52c:	b4c0      	push	{r6, r7}
 801e52e:	001d      	movs	r5, r3
 801e530:	0006      	movs	r6, r0
 801e532:	000f      	movs	r7, r1
 801e534:	2400      	movs	r4, #0
 801e536:	2b00      	cmp	r3, #0
 801e538:	d020      	beq.n	801e57c <arm_mult_q31+0x58>
 801e53a:	4b12      	ldr	r3, [pc, #72]	@ (801e584 <arm_mult_q31+0x60>)
 801e53c:	4699      	mov	r9, r3
 801e53e:	e007      	b.n	801e550 <arm_mult_q31+0x2c>
 801e540:	464b      	mov	r3, r9
 801e542:	4059      	eors	r1, r3
 801e544:	4643      	mov	r3, r8
 801e546:	3d01      	subs	r5, #1
 801e548:	5119      	str	r1, [r3, r4]
 801e54a:	3404      	adds	r4, #4
 801e54c:	2d00      	cmp	r5, #0
 801e54e:	d015      	beq.n	801e57c <arm_mult_q31+0x58>
 801e550:	5933      	ldr	r3, [r6, r4]
 801e552:	593a      	ldr	r2, [r7, r4]
 801e554:	17d9      	asrs	r1, r3, #31
 801e556:	593b      	ldr	r3, [r7, r4]
 801e558:	5930      	ldr	r0, [r6, r4]
 801e55a:	17db      	asrs	r3, r3, #31
 801e55c:	f7e2 f830 	bl	80005c0 <__aeabi_lmul>
 801e560:	004b      	lsls	r3, r1, #1
 801e562:	0fc0      	lsrs	r0, r0, #31
 801e564:	4318      	orrs	r0, r3
 801e566:	17c9      	asrs	r1, r1, #31
 801e568:	17c3      	asrs	r3, r0, #31
 801e56a:	428b      	cmp	r3, r1
 801e56c:	d1e8      	bne.n	801e540 <arm_mult_q31+0x1c>
 801e56e:	0001      	movs	r1, r0
 801e570:	4643      	mov	r3, r8
 801e572:	3d01      	subs	r5, #1
 801e574:	5119      	str	r1, [r3, r4]
 801e576:	3404      	adds	r4, #4
 801e578:	2d00      	cmp	r5, #0
 801e57a:	d1e9      	bne.n	801e550 <arm_mult_q31+0x2c>
 801e57c:	bc0c      	pop	{r2, r3}
 801e57e:	4690      	mov	r8, r2
 801e580:	4699      	mov	r9, r3
 801e582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e584:	7fffffff 	.word	0x7fffffff

0801e588 <arm_add_q31>:
 801e588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e58a:	465f      	mov	r7, fp
 801e58c:	4656      	mov	r6, sl
 801e58e:	464d      	mov	r5, r9
 801e590:	4644      	mov	r4, r8
 801e592:	b4f0      	push	{r4, r5, r6, r7}
 801e594:	4693      	mov	fp, r2
 801e596:	b083      	sub	sp, #12
 801e598:	4681      	mov	r9, r0
 801e59a:	468a      	mov	sl, r1
 801e59c:	4698      	mov	r8, r3
 801e59e:	2200      	movs	r2, #0
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d020      	beq.n	801e5e6 <arm_add_q31+0x5e>
 801e5a4:	4649      	mov	r1, r9
 801e5a6:	4653      	mov	r3, sl
 801e5a8:	588e      	ldr	r6, [r1, r2]
 801e5aa:	589b      	ldr	r3, [r3, r2]
 801e5ac:	17f7      	asrs	r7, r6, #31
 801e5ae:	001c      	movs	r4, r3
 801e5b0:	0030      	movs	r0, r6
 801e5b2:	0039      	movs	r1, r7
 801e5b4:	17dd      	asrs	r5, r3, #31
 801e5b6:	46b4      	mov	ip, r6
 801e5b8:	1900      	adds	r0, r0, r4
 801e5ba:	4169      	adcs	r1, r5
 801e5bc:	4463      	add	r3, ip
 801e5be:	9000      	str	r0, [sp, #0]
 801e5c0:	9101      	str	r1, [sp, #4]
 801e5c2:	17d9      	asrs	r1, r3, #31
 801e5c4:	468c      	mov	ip, r1
 801e5c6:	9901      	ldr	r1, [sp, #4]
 801e5c8:	458c      	cmp	ip, r1
 801e5ca:	d002      	beq.n	801e5d2 <arm_add_q31+0x4a>
 801e5cc:	17cb      	asrs	r3, r1, #31
 801e5ce:	4909      	ldr	r1, [pc, #36]	@ (801e5f4 <arm_add_q31+0x6c>)
 801e5d0:	404b      	eors	r3, r1
 801e5d2:	4659      	mov	r1, fp
 801e5d4:	508b      	str	r3, [r1, r2]
 801e5d6:	2301      	movs	r3, #1
 801e5d8:	425b      	negs	r3, r3
 801e5da:	469c      	mov	ip, r3
 801e5dc:	44e0      	add	r8, ip
 801e5de:	4643      	mov	r3, r8
 801e5e0:	3204      	adds	r2, #4
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d1de      	bne.n	801e5a4 <arm_add_q31+0x1c>
 801e5e6:	b003      	add	sp, #12
 801e5e8:	bc3c      	pop	{r2, r3, r4, r5}
 801e5ea:	4690      	mov	r8, r2
 801e5ec:	4699      	mov	r9, r3
 801e5ee:	46a2      	mov	sl, r4
 801e5f0:	46ab      	mov	fp, r5
 801e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5f4:	7fffffff 	.word	0x7fffffff

0801e5f8 <atof>:
 801e5f8:	b510      	push	{r4, lr}
 801e5fa:	2100      	movs	r1, #0
 801e5fc:	f000 fe12 	bl	801f224 <strtod>
 801e600:	bd10      	pop	{r4, pc}

0801e602 <atoi>:
 801e602:	b510      	push	{r4, lr}
 801e604:	220a      	movs	r2, #10
 801e606:	2100      	movs	r1, #0
 801e608:	f000 fea4 	bl	801f354 <strtol>
 801e60c:	bd10      	pop	{r4, pc}
	...

0801e610 <sulp>:
 801e610:	b570      	push	{r4, r5, r6, lr}
 801e612:	0016      	movs	r6, r2
 801e614:	000d      	movs	r5, r1
 801e616:	f003 fcf3 	bl	8022000 <__ulp>
 801e61a:	2e00      	cmp	r6, #0
 801e61c:	d00d      	beq.n	801e63a <sulp+0x2a>
 801e61e:	236b      	movs	r3, #107	@ 0x6b
 801e620:	006a      	lsls	r2, r5, #1
 801e622:	0d52      	lsrs	r2, r2, #21
 801e624:	1a9b      	subs	r3, r3, r2
 801e626:	2b00      	cmp	r3, #0
 801e628:	dd07      	ble.n	801e63a <sulp+0x2a>
 801e62a:	2400      	movs	r4, #0
 801e62c:	4a03      	ldr	r2, [pc, #12]	@ (801e63c <sulp+0x2c>)
 801e62e:	051b      	lsls	r3, r3, #20
 801e630:	189d      	adds	r5, r3, r2
 801e632:	002b      	movs	r3, r5
 801e634:	0022      	movs	r2, r4
 801e636:	f7e4 f801 	bl	800263c <__aeabi_dmul>
 801e63a:	bd70      	pop	{r4, r5, r6, pc}
 801e63c:	3ff00000 	.word	0x3ff00000

0801e640 <_strtod_l>:
 801e640:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e642:	b0a3      	sub	sp, #140	@ 0x8c
 801e644:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e646:	2200      	movs	r2, #0
 801e648:	2600      	movs	r6, #0
 801e64a:	2700      	movs	r7, #0
 801e64c:	9005      	str	r0, [sp, #20]
 801e64e:	9109      	str	r1, [sp, #36]	@ 0x24
 801e650:	921e      	str	r2, [sp, #120]	@ 0x78
 801e652:	911d      	str	r1, [sp, #116]	@ 0x74
 801e654:	780a      	ldrb	r2, [r1, #0]
 801e656:	2a2b      	cmp	r2, #43	@ 0x2b
 801e658:	d053      	beq.n	801e702 <_strtod_l+0xc2>
 801e65a:	d83f      	bhi.n	801e6dc <_strtod_l+0x9c>
 801e65c:	2a0d      	cmp	r2, #13
 801e65e:	d839      	bhi.n	801e6d4 <_strtod_l+0x94>
 801e660:	2a08      	cmp	r2, #8
 801e662:	d839      	bhi.n	801e6d8 <_strtod_l+0x98>
 801e664:	2a00      	cmp	r2, #0
 801e666:	d042      	beq.n	801e6ee <_strtod_l+0xae>
 801e668:	2200      	movs	r2, #0
 801e66a:	9212      	str	r2, [sp, #72]	@ 0x48
 801e66c:	2100      	movs	r1, #0
 801e66e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e670:	910c      	str	r1, [sp, #48]	@ 0x30
 801e672:	782a      	ldrb	r2, [r5, #0]
 801e674:	2a30      	cmp	r2, #48	@ 0x30
 801e676:	d000      	beq.n	801e67a <_strtod_l+0x3a>
 801e678:	e083      	b.n	801e782 <_strtod_l+0x142>
 801e67a:	786a      	ldrb	r2, [r5, #1]
 801e67c:	3120      	adds	r1, #32
 801e67e:	438a      	bics	r2, r1
 801e680:	2a58      	cmp	r2, #88	@ 0x58
 801e682:	d000      	beq.n	801e686 <_strtod_l+0x46>
 801e684:	e073      	b.n	801e76e <_strtod_l+0x12e>
 801e686:	9302      	str	r3, [sp, #8]
 801e688:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e68a:	4a95      	ldr	r2, [pc, #596]	@ (801e8e0 <_strtod_l+0x2a0>)
 801e68c:	9301      	str	r3, [sp, #4]
 801e68e:	ab1e      	add	r3, sp, #120	@ 0x78
 801e690:	9300      	str	r3, [sp, #0]
 801e692:	9805      	ldr	r0, [sp, #20]
 801e694:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e696:	a91d      	add	r1, sp, #116	@ 0x74
 801e698:	f002 fd62 	bl	8021160 <__gethex>
 801e69c:	230f      	movs	r3, #15
 801e69e:	0002      	movs	r2, r0
 801e6a0:	401a      	ands	r2, r3
 801e6a2:	0004      	movs	r4, r0
 801e6a4:	9206      	str	r2, [sp, #24]
 801e6a6:	4218      	tst	r0, r3
 801e6a8:	d005      	beq.n	801e6b6 <_strtod_l+0x76>
 801e6aa:	2a06      	cmp	r2, #6
 801e6ac:	d12b      	bne.n	801e706 <_strtod_l+0xc6>
 801e6ae:	2300      	movs	r3, #0
 801e6b0:	3501      	adds	r5, #1
 801e6b2:	951d      	str	r5, [sp, #116]	@ 0x74
 801e6b4:	9312      	str	r3, [sp, #72]	@ 0x48
 801e6b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d002      	beq.n	801e6c2 <_strtod_l+0x82>
 801e6bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e6be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e6c0:	6013      	str	r3, [r2, #0]
 801e6c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d019      	beq.n	801e6fc <_strtod_l+0xbc>
 801e6c8:	2380      	movs	r3, #128	@ 0x80
 801e6ca:	0030      	movs	r0, r6
 801e6cc:	061b      	lsls	r3, r3, #24
 801e6ce:	18f9      	adds	r1, r7, r3
 801e6d0:	b023      	add	sp, #140	@ 0x8c
 801e6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6d4:	2a20      	cmp	r2, #32
 801e6d6:	d1c7      	bne.n	801e668 <_strtod_l+0x28>
 801e6d8:	3101      	adds	r1, #1
 801e6da:	e7ba      	b.n	801e652 <_strtod_l+0x12>
 801e6dc:	2a2d      	cmp	r2, #45	@ 0x2d
 801e6de:	d1c3      	bne.n	801e668 <_strtod_l+0x28>
 801e6e0:	3a2c      	subs	r2, #44	@ 0x2c
 801e6e2:	9212      	str	r2, [sp, #72]	@ 0x48
 801e6e4:	1c4a      	adds	r2, r1, #1
 801e6e6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e6e8:	784a      	ldrb	r2, [r1, #1]
 801e6ea:	2a00      	cmp	r2, #0
 801e6ec:	d1be      	bne.n	801e66c <_strtod_l+0x2c>
 801e6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6f0:	931d      	str	r3, [sp, #116]	@ 0x74
 801e6f2:	2300      	movs	r3, #0
 801e6f4:	9312      	str	r3, [sp, #72]	@ 0x48
 801e6f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d1df      	bne.n	801e6bc <_strtod_l+0x7c>
 801e6fc:	0030      	movs	r0, r6
 801e6fe:	0039      	movs	r1, r7
 801e700:	e7e6      	b.n	801e6d0 <_strtod_l+0x90>
 801e702:	2200      	movs	r2, #0
 801e704:	e7ed      	b.n	801e6e2 <_strtod_l+0xa2>
 801e706:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e708:	2a00      	cmp	r2, #0
 801e70a:	d007      	beq.n	801e71c <_strtod_l+0xdc>
 801e70c:	2135      	movs	r1, #53	@ 0x35
 801e70e:	a820      	add	r0, sp, #128	@ 0x80
 801e710:	f003 fd6c 	bl	80221ec <__copybits>
 801e714:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e716:	9805      	ldr	r0, [sp, #20]
 801e718:	f003 f926 	bl	8021968 <_Bfree>
 801e71c:	9806      	ldr	r0, [sp, #24]
 801e71e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e720:	3801      	subs	r0, #1
 801e722:	2804      	cmp	r0, #4
 801e724:	d806      	bhi.n	801e734 <_strtod_l+0xf4>
 801e726:	f7e1 fd29 	bl	800017c <__gnu_thumb1_case_uqi>
 801e72a:	0312      	.short	0x0312
 801e72c:	1e1c      	.short	0x1e1c
 801e72e:	12          	.byte	0x12
 801e72f:	00          	.byte	0x00
 801e730:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e732:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e734:	05e4      	lsls	r4, r4, #23
 801e736:	d502      	bpl.n	801e73e <_strtod_l+0xfe>
 801e738:	2380      	movs	r3, #128	@ 0x80
 801e73a:	061b      	lsls	r3, r3, #24
 801e73c:	431f      	orrs	r7, r3
 801e73e:	4b69      	ldr	r3, [pc, #420]	@ (801e8e4 <_strtod_l+0x2a4>)
 801e740:	423b      	tst	r3, r7
 801e742:	d1b8      	bne.n	801e6b6 <_strtod_l+0x76>
 801e744:	f001 fd90 	bl	8020268 <__errno>
 801e748:	2322      	movs	r3, #34	@ 0x22
 801e74a:	6003      	str	r3, [r0, #0]
 801e74c:	e7b3      	b.n	801e6b6 <_strtod_l+0x76>
 801e74e:	4966      	ldr	r1, [pc, #408]	@ (801e8e8 <_strtod_l+0x2a8>)
 801e750:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e752:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e754:	400a      	ands	r2, r1
 801e756:	4965      	ldr	r1, [pc, #404]	@ (801e8ec <_strtod_l+0x2ac>)
 801e758:	185b      	adds	r3, r3, r1
 801e75a:	051b      	lsls	r3, r3, #20
 801e75c:	431a      	orrs	r2, r3
 801e75e:	0017      	movs	r7, r2
 801e760:	e7e8      	b.n	801e734 <_strtod_l+0xf4>
 801e762:	4f60      	ldr	r7, [pc, #384]	@ (801e8e4 <_strtod_l+0x2a4>)
 801e764:	e7e6      	b.n	801e734 <_strtod_l+0xf4>
 801e766:	2601      	movs	r6, #1
 801e768:	4f61      	ldr	r7, [pc, #388]	@ (801e8f0 <_strtod_l+0x2b0>)
 801e76a:	4276      	negs	r6, r6
 801e76c:	e7e2      	b.n	801e734 <_strtod_l+0xf4>
 801e76e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e770:	1c5a      	adds	r2, r3, #1
 801e772:	921d      	str	r2, [sp, #116]	@ 0x74
 801e774:	785b      	ldrb	r3, [r3, #1]
 801e776:	2b30      	cmp	r3, #48	@ 0x30
 801e778:	d0f9      	beq.n	801e76e <_strtod_l+0x12e>
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d09b      	beq.n	801e6b6 <_strtod_l+0x76>
 801e77e:	2301      	movs	r3, #1
 801e780:	930c      	str	r3, [sp, #48]	@ 0x30
 801e782:	2500      	movs	r5, #0
 801e784:	220a      	movs	r2, #10
 801e786:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e788:	950d      	str	r5, [sp, #52]	@ 0x34
 801e78a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e78c:	9508      	str	r5, [sp, #32]
 801e78e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e790:	7804      	ldrb	r4, [r0, #0]
 801e792:	0023      	movs	r3, r4
 801e794:	3b30      	subs	r3, #48	@ 0x30
 801e796:	b2d9      	uxtb	r1, r3
 801e798:	2909      	cmp	r1, #9
 801e79a:	d927      	bls.n	801e7ec <_strtod_l+0x1ac>
 801e79c:	2201      	movs	r2, #1
 801e79e:	4955      	ldr	r1, [pc, #340]	@ (801e8f4 <_strtod_l+0x2b4>)
 801e7a0:	f001 fcd4 	bl	802014c <strncmp>
 801e7a4:	2800      	cmp	r0, #0
 801e7a6:	d031      	beq.n	801e80c <_strtod_l+0x1cc>
 801e7a8:	2000      	movs	r0, #0
 801e7aa:	0023      	movs	r3, r4
 801e7ac:	4684      	mov	ip, r0
 801e7ae:	9a08      	ldr	r2, [sp, #32]
 801e7b0:	900e      	str	r0, [sp, #56]	@ 0x38
 801e7b2:	9206      	str	r2, [sp, #24]
 801e7b4:	2220      	movs	r2, #32
 801e7b6:	0019      	movs	r1, r3
 801e7b8:	4391      	bics	r1, r2
 801e7ba:	000a      	movs	r2, r1
 801e7bc:	2100      	movs	r1, #0
 801e7be:	9107      	str	r1, [sp, #28]
 801e7c0:	2a45      	cmp	r2, #69	@ 0x45
 801e7c2:	d000      	beq.n	801e7c6 <_strtod_l+0x186>
 801e7c4:	e0c0      	b.n	801e948 <_strtod_l+0x308>
 801e7c6:	9b06      	ldr	r3, [sp, #24]
 801e7c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e7ca:	4303      	orrs	r3, r0
 801e7cc:	4313      	orrs	r3, r2
 801e7ce:	428b      	cmp	r3, r1
 801e7d0:	d08d      	beq.n	801e6ee <_strtod_l+0xae>
 801e7d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e7d6:	3301      	adds	r3, #1
 801e7d8:	931d      	str	r3, [sp, #116]	@ 0x74
 801e7da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7dc:	785b      	ldrb	r3, [r3, #1]
 801e7de:	2b2b      	cmp	r3, #43	@ 0x2b
 801e7e0:	d070      	beq.n	801e8c4 <_strtod_l+0x284>
 801e7e2:	000c      	movs	r4, r1
 801e7e4:	2b2d      	cmp	r3, #45	@ 0x2d
 801e7e6:	d173      	bne.n	801e8d0 <_strtod_l+0x290>
 801e7e8:	2401      	movs	r4, #1
 801e7ea:	e06c      	b.n	801e8c6 <_strtod_l+0x286>
 801e7ec:	9908      	ldr	r1, [sp, #32]
 801e7ee:	2908      	cmp	r1, #8
 801e7f0:	dc09      	bgt.n	801e806 <_strtod_l+0x1c6>
 801e7f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e7f4:	4351      	muls	r1, r2
 801e7f6:	185b      	adds	r3, r3, r1
 801e7f8:	930d      	str	r3, [sp, #52]	@ 0x34
 801e7fa:	9b08      	ldr	r3, [sp, #32]
 801e7fc:	3001      	adds	r0, #1
 801e7fe:	3301      	adds	r3, #1
 801e800:	9308      	str	r3, [sp, #32]
 801e802:	901d      	str	r0, [sp, #116]	@ 0x74
 801e804:	e7c3      	b.n	801e78e <_strtod_l+0x14e>
 801e806:	4355      	muls	r5, r2
 801e808:	195d      	adds	r5, r3, r5
 801e80a:	e7f6      	b.n	801e7fa <_strtod_l+0x1ba>
 801e80c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e80e:	1c5a      	adds	r2, r3, #1
 801e810:	921d      	str	r2, [sp, #116]	@ 0x74
 801e812:	9a08      	ldr	r2, [sp, #32]
 801e814:	785b      	ldrb	r3, [r3, #1]
 801e816:	2a00      	cmp	r2, #0
 801e818:	d03a      	beq.n	801e890 <_strtod_l+0x250>
 801e81a:	900e      	str	r0, [sp, #56]	@ 0x38
 801e81c:	9206      	str	r2, [sp, #24]
 801e81e:	001a      	movs	r2, r3
 801e820:	3a30      	subs	r2, #48	@ 0x30
 801e822:	2a09      	cmp	r2, #9
 801e824:	d912      	bls.n	801e84c <_strtod_l+0x20c>
 801e826:	2201      	movs	r2, #1
 801e828:	4694      	mov	ip, r2
 801e82a:	e7c3      	b.n	801e7b4 <_strtod_l+0x174>
 801e82c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e82e:	3001      	adds	r0, #1
 801e830:	1c5a      	adds	r2, r3, #1
 801e832:	921d      	str	r2, [sp, #116]	@ 0x74
 801e834:	785b      	ldrb	r3, [r3, #1]
 801e836:	2b30      	cmp	r3, #48	@ 0x30
 801e838:	d0f8      	beq.n	801e82c <_strtod_l+0x1ec>
 801e83a:	001a      	movs	r2, r3
 801e83c:	3a31      	subs	r2, #49	@ 0x31
 801e83e:	2a08      	cmp	r2, #8
 801e840:	d83b      	bhi.n	801e8ba <_strtod_l+0x27a>
 801e842:	900e      	str	r0, [sp, #56]	@ 0x38
 801e844:	2000      	movs	r0, #0
 801e846:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e848:	9006      	str	r0, [sp, #24]
 801e84a:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e84c:	001a      	movs	r2, r3
 801e84e:	1c41      	adds	r1, r0, #1
 801e850:	3a30      	subs	r2, #48	@ 0x30
 801e852:	2b30      	cmp	r3, #48	@ 0x30
 801e854:	d016      	beq.n	801e884 <_strtod_l+0x244>
 801e856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e858:	185b      	adds	r3, r3, r1
 801e85a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e85c:	9b06      	ldr	r3, [sp, #24]
 801e85e:	210a      	movs	r1, #10
 801e860:	469c      	mov	ip, r3
 801e862:	4484      	add	ip, r0
 801e864:	459c      	cmp	ip, r3
 801e866:	d115      	bne.n	801e894 <_strtod_l+0x254>
 801e868:	9906      	ldr	r1, [sp, #24]
 801e86a:	9b06      	ldr	r3, [sp, #24]
 801e86c:	3101      	adds	r1, #1
 801e86e:	1809      	adds	r1, r1, r0
 801e870:	181b      	adds	r3, r3, r0
 801e872:	9106      	str	r1, [sp, #24]
 801e874:	2b08      	cmp	r3, #8
 801e876:	dc19      	bgt.n	801e8ac <_strtod_l+0x26c>
 801e878:	230a      	movs	r3, #10
 801e87a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e87c:	434b      	muls	r3, r1
 801e87e:	2100      	movs	r1, #0
 801e880:	18d3      	adds	r3, r2, r3
 801e882:	930d      	str	r3, [sp, #52]	@ 0x34
 801e884:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e886:	0008      	movs	r0, r1
 801e888:	1c5a      	adds	r2, r3, #1
 801e88a:	921d      	str	r2, [sp, #116]	@ 0x74
 801e88c:	785b      	ldrb	r3, [r3, #1]
 801e88e:	e7c6      	b.n	801e81e <_strtod_l+0x1de>
 801e890:	9808      	ldr	r0, [sp, #32]
 801e892:	e7d0      	b.n	801e836 <_strtod_l+0x1f6>
 801e894:	1c5c      	adds	r4, r3, #1
 801e896:	2b08      	cmp	r3, #8
 801e898:	dc04      	bgt.n	801e8a4 <_strtod_l+0x264>
 801e89a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e89c:	434b      	muls	r3, r1
 801e89e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8a0:	0023      	movs	r3, r4
 801e8a2:	e7df      	b.n	801e864 <_strtod_l+0x224>
 801e8a4:	2c10      	cmp	r4, #16
 801e8a6:	dcfb      	bgt.n	801e8a0 <_strtod_l+0x260>
 801e8a8:	434d      	muls	r5, r1
 801e8aa:	e7f9      	b.n	801e8a0 <_strtod_l+0x260>
 801e8ac:	2100      	movs	r1, #0
 801e8ae:	2b0f      	cmp	r3, #15
 801e8b0:	dce8      	bgt.n	801e884 <_strtod_l+0x244>
 801e8b2:	230a      	movs	r3, #10
 801e8b4:	435d      	muls	r5, r3
 801e8b6:	1955      	adds	r5, r2, r5
 801e8b8:	e7e4      	b.n	801e884 <_strtod_l+0x244>
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	920e      	str	r2, [sp, #56]	@ 0x38
 801e8be:	9206      	str	r2, [sp, #24]
 801e8c0:	3201      	adds	r2, #1
 801e8c2:	e7b1      	b.n	801e828 <_strtod_l+0x1e8>
 801e8c4:	2400      	movs	r4, #0
 801e8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8c8:	3302      	adds	r3, #2
 801e8ca:	931d      	str	r3, [sp, #116]	@ 0x74
 801e8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8ce:	789b      	ldrb	r3, [r3, #2]
 801e8d0:	001a      	movs	r2, r3
 801e8d2:	3a30      	subs	r2, #48	@ 0x30
 801e8d4:	2a09      	cmp	r2, #9
 801e8d6:	d913      	bls.n	801e900 <_strtod_l+0x2c0>
 801e8d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8da:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8dc:	2200      	movs	r2, #0
 801e8de:	e032      	b.n	801e946 <_strtod_l+0x306>
 801e8e0:	08025ae8 	.word	0x08025ae8
 801e8e4:	7ff00000 	.word	0x7ff00000
 801e8e8:	ffefffff 	.word	0xffefffff
 801e8ec:	00000433 	.word	0x00000433
 801e8f0:	7fffffff 	.word	0x7fffffff
 801e8f4:	08025ad0 	.word	0x08025ad0
 801e8f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8fa:	1c5a      	adds	r2, r3, #1
 801e8fc:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8fe:	785b      	ldrb	r3, [r3, #1]
 801e900:	2b30      	cmp	r3, #48	@ 0x30
 801e902:	d0f9      	beq.n	801e8f8 <_strtod_l+0x2b8>
 801e904:	2200      	movs	r2, #0
 801e906:	9207      	str	r2, [sp, #28]
 801e908:	001a      	movs	r2, r3
 801e90a:	3a31      	subs	r2, #49	@ 0x31
 801e90c:	2a08      	cmp	r2, #8
 801e90e:	d81b      	bhi.n	801e948 <_strtod_l+0x308>
 801e910:	3b30      	subs	r3, #48	@ 0x30
 801e912:	9310      	str	r3, [sp, #64]	@ 0x40
 801e914:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e916:	9307      	str	r3, [sp, #28]
 801e918:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e91a:	1c59      	adds	r1, r3, #1
 801e91c:	911d      	str	r1, [sp, #116]	@ 0x74
 801e91e:	785b      	ldrb	r3, [r3, #1]
 801e920:	001a      	movs	r2, r3
 801e922:	3a30      	subs	r2, #48	@ 0x30
 801e924:	2a09      	cmp	r2, #9
 801e926:	d93a      	bls.n	801e99e <_strtod_l+0x35e>
 801e928:	9a07      	ldr	r2, [sp, #28]
 801e92a:	1a8a      	subs	r2, r1, r2
 801e92c:	49b4      	ldr	r1, [pc, #720]	@ (801ec00 <_strtod_l+0x5c0>)
 801e92e:	9107      	str	r1, [sp, #28]
 801e930:	2a08      	cmp	r2, #8
 801e932:	dc04      	bgt.n	801e93e <_strtod_l+0x2fe>
 801e934:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e936:	9207      	str	r2, [sp, #28]
 801e938:	428a      	cmp	r2, r1
 801e93a:	dd00      	ble.n	801e93e <_strtod_l+0x2fe>
 801e93c:	9107      	str	r1, [sp, #28]
 801e93e:	2c00      	cmp	r4, #0
 801e940:	d002      	beq.n	801e948 <_strtod_l+0x308>
 801e942:	9a07      	ldr	r2, [sp, #28]
 801e944:	4252      	negs	r2, r2
 801e946:	9207      	str	r2, [sp, #28]
 801e948:	9a06      	ldr	r2, [sp, #24]
 801e94a:	2a00      	cmp	r2, #0
 801e94c:	d14d      	bne.n	801e9ea <_strtod_l+0x3aa>
 801e94e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e950:	4310      	orrs	r0, r2
 801e952:	d000      	beq.n	801e956 <_strtod_l+0x316>
 801e954:	e6af      	b.n	801e6b6 <_strtod_l+0x76>
 801e956:	4662      	mov	r2, ip
 801e958:	2a00      	cmp	r2, #0
 801e95a:	d000      	beq.n	801e95e <_strtod_l+0x31e>
 801e95c:	e6c7      	b.n	801e6ee <_strtod_l+0xae>
 801e95e:	2b69      	cmp	r3, #105	@ 0x69
 801e960:	d027      	beq.n	801e9b2 <_strtod_l+0x372>
 801e962:	dc23      	bgt.n	801e9ac <_strtod_l+0x36c>
 801e964:	2b49      	cmp	r3, #73	@ 0x49
 801e966:	d024      	beq.n	801e9b2 <_strtod_l+0x372>
 801e968:	2b4e      	cmp	r3, #78	@ 0x4e
 801e96a:	d000      	beq.n	801e96e <_strtod_l+0x32e>
 801e96c:	e6bf      	b.n	801e6ee <_strtod_l+0xae>
 801e96e:	49a5      	ldr	r1, [pc, #660]	@ (801ec04 <_strtod_l+0x5c4>)
 801e970:	a81d      	add	r0, sp, #116	@ 0x74
 801e972:	f002 fe2b 	bl	80215cc <__match>
 801e976:	2800      	cmp	r0, #0
 801e978:	d100      	bne.n	801e97c <_strtod_l+0x33c>
 801e97a:	e6b8      	b.n	801e6ee <_strtod_l+0xae>
 801e97c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e97e:	781b      	ldrb	r3, [r3, #0]
 801e980:	2b28      	cmp	r3, #40	@ 0x28
 801e982:	d12c      	bne.n	801e9de <_strtod_l+0x39e>
 801e984:	49a0      	ldr	r1, [pc, #640]	@ (801ec08 <_strtod_l+0x5c8>)
 801e986:	aa20      	add	r2, sp, #128	@ 0x80
 801e988:	a81d      	add	r0, sp, #116	@ 0x74
 801e98a:	f002 fe33 	bl	80215f4 <__hexnan>
 801e98e:	2805      	cmp	r0, #5
 801e990:	d125      	bne.n	801e9de <_strtod_l+0x39e>
 801e992:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e994:	4a9d      	ldr	r2, [pc, #628]	@ (801ec0c <_strtod_l+0x5cc>)
 801e996:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e998:	431a      	orrs	r2, r3
 801e99a:	0017      	movs	r7, r2
 801e99c:	e68b      	b.n	801e6b6 <_strtod_l+0x76>
 801e99e:	220a      	movs	r2, #10
 801e9a0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e9a2:	434a      	muls	r2, r1
 801e9a4:	18d2      	adds	r2, r2, r3
 801e9a6:	3a30      	subs	r2, #48	@ 0x30
 801e9a8:	9210      	str	r2, [sp, #64]	@ 0x40
 801e9aa:	e7b5      	b.n	801e918 <_strtod_l+0x2d8>
 801e9ac:	2b6e      	cmp	r3, #110	@ 0x6e
 801e9ae:	d0de      	beq.n	801e96e <_strtod_l+0x32e>
 801e9b0:	e69d      	b.n	801e6ee <_strtod_l+0xae>
 801e9b2:	4997      	ldr	r1, [pc, #604]	@ (801ec10 <_strtod_l+0x5d0>)
 801e9b4:	a81d      	add	r0, sp, #116	@ 0x74
 801e9b6:	f002 fe09 	bl	80215cc <__match>
 801e9ba:	2800      	cmp	r0, #0
 801e9bc:	d100      	bne.n	801e9c0 <_strtod_l+0x380>
 801e9be:	e696      	b.n	801e6ee <_strtod_l+0xae>
 801e9c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9c2:	4994      	ldr	r1, [pc, #592]	@ (801ec14 <_strtod_l+0x5d4>)
 801e9c4:	3b01      	subs	r3, #1
 801e9c6:	a81d      	add	r0, sp, #116	@ 0x74
 801e9c8:	931d      	str	r3, [sp, #116]	@ 0x74
 801e9ca:	f002 fdff 	bl	80215cc <__match>
 801e9ce:	2800      	cmp	r0, #0
 801e9d0:	d102      	bne.n	801e9d8 <_strtod_l+0x398>
 801e9d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9d4:	3301      	adds	r3, #1
 801e9d6:	931d      	str	r3, [sp, #116]	@ 0x74
 801e9d8:	2600      	movs	r6, #0
 801e9da:	4f8c      	ldr	r7, [pc, #560]	@ (801ec0c <_strtod_l+0x5cc>)
 801e9dc:	e66b      	b.n	801e6b6 <_strtod_l+0x76>
 801e9de:	488e      	ldr	r0, [pc, #568]	@ (801ec18 <_strtod_l+0x5d8>)
 801e9e0:	f001 fc84 	bl	80202ec <nan>
 801e9e4:	0006      	movs	r6, r0
 801e9e6:	000f      	movs	r7, r1
 801e9e8:	e665      	b.n	801e6b6 <_strtod_l+0x76>
 801e9ea:	9b07      	ldr	r3, [sp, #28]
 801e9ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e9ee:	1a9b      	subs	r3, r3, r2
 801e9f0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e9f2:	9b08      	ldr	r3, [sp, #32]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d101      	bne.n	801e9fc <_strtod_l+0x3bc>
 801e9f8:	9b06      	ldr	r3, [sp, #24]
 801e9fa:	9308      	str	r3, [sp, #32]
 801e9fc:	9c06      	ldr	r4, [sp, #24]
 801e9fe:	2c10      	cmp	r4, #16
 801ea00:	dd00      	ble.n	801ea04 <_strtod_l+0x3c4>
 801ea02:	2410      	movs	r4, #16
 801ea04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ea06:	f7e4 fd09 	bl	800341c <__aeabi_ui2d>
 801ea0a:	9b06      	ldr	r3, [sp, #24]
 801ea0c:	0006      	movs	r6, r0
 801ea0e:	000f      	movs	r7, r1
 801ea10:	2b09      	cmp	r3, #9
 801ea12:	dc13      	bgt.n	801ea3c <_strtod_l+0x3fc>
 801ea14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d100      	bne.n	801ea1c <_strtod_l+0x3dc>
 801ea1a:	e64c      	b.n	801e6b6 <_strtod_l+0x76>
 801ea1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	dc00      	bgt.n	801ea24 <_strtod_l+0x3e4>
 801ea22:	e07e      	b.n	801eb22 <_strtod_l+0x4e2>
 801ea24:	2b16      	cmp	r3, #22
 801ea26:	dc63      	bgt.n	801eaf0 <_strtod_l+0x4b0>
 801ea28:	497c      	ldr	r1, [pc, #496]	@ (801ec1c <_strtod_l+0x5dc>)
 801ea2a:	00db      	lsls	r3, r3, #3
 801ea2c:	18c9      	adds	r1, r1, r3
 801ea2e:	0032      	movs	r2, r6
 801ea30:	6808      	ldr	r0, [r1, #0]
 801ea32:	6849      	ldr	r1, [r1, #4]
 801ea34:	003b      	movs	r3, r7
 801ea36:	f7e3 fe01 	bl	800263c <__aeabi_dmul>
 801ea3a:	e7d3      	b.n	801e9e4 <_strtod_l+0x3a4>
 801ea3c:	0022      	movs	r2, r4
 801ea3e:	4b77      	ldr	r3, [pc, #476]	@ (801ec1c <_strtod_l+0x5dc>)
 801ea40:	3a09      	subs	r2, #9
 801ea42:	00d2      	lsls	r2, r2, #3
 801ea44:	189b      	adds	r3, r3, r2
 801ea46:	681a      	ldr	r2, [r3, #0]
 801ea48:	685b      	ldr	r3, [r3, #4]
 801ea4a:	f7e3 fdf7 	bl	800263c <__aeabi_dmul>
 801ea4e:	0006      	movs	r6, r0
 801ea50:	0028      	movs	r0, r5
 801ea52:	000f      	movs	r7, r1
 801ea54:	f7e4 fce2 	bl	800341c <__aeabi_ui2d>
 801ea58:	000b      	movs	r3, r1
 801ea5a:	0002      	movs	r2, r0
 801ea5c:	0039      	movs	r1, r7
 801ea5e:	0030      	movs	r0, r6
 801ea60:	f7e2 fe44 	bl	80016ec <__aeabi_dadd>
 801ea64:	9b06      	ldr	r3, [sp, #24]
 801ea66:	0006      	movs	r6, r0
 801ea68:	000f      	movs	r7, r1
 801ea6a:	2b0f      	cmp	r3, #15
 801ea6c:	ddd2      	ble.n	801ea14 <_strtod_l+0x3d4>
 801ea6e:	9b06      	ldr	r3, [sp, #24]
 801ea70:	1b1c      	subs	r4, r3, r4
 801ea72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea74:	18e4      	adds	r4, r4, r3
 801ea76:	2c00      	cmp	r4, #0
 801ea78:	dc00      	bgt.n	801ea7c <_strtod_l+0x43c>
 801ea7a:	e09b      	b.n	801ebb4 <_strtod_l+0x574>
 801ea7c:	220f      	movs	r2, #15
 801ea7e:	0023      	movs	r3, r4
 801ea80:	4013      	ands	r3, r2
 801ea82:	4214      	tst	r4, r2
 801ea84:	d00a      	beq.n	801ea9c <_strtod_l+0x45c>
 801ea86:	4965      	ldr	r1, [pc, #404]	@ (801ec1c <_strtod_l+0x5dc>)
 801ea88:	00db      	lsls	r3, r3, #3
 801ea8a:	18c9      	adds	r1, r1, r3
 801ea8c:	0032      	movs	r2, r6
 801ea8e:	6808      	ldr	r0, [r1, #0]
 801ea90:	6849      	ldr	r1, [r1, #4]
 801ea92:	003b      	movs	r3, r7
 801ea94:	f7e3 fdd2 	bl	800263c <__aeabi_dmul>
 801ea98:	0006      	movs	r6, r0
 801ea9a:	000f      	movs	r7, r1
 801ea9c:	230f      	movs	r3, #15
 801ea9e:	439c      	bics	r4, r3
 801eaa0:	d073      	beq.n	801eb8a <_strtod_l+0x54a>
 801eaa2:	3326      	adds	r3, #38	@ 0x26
 801eaa4:	33ff      	adds	r3, #255	@ 0xff
 801eaa6:	429c      	cmp	r4, r3
 801eaa8:	dd4b      	ble.n	801eb42 <_strtod_l+0x502>
 801eaaa:	2300      	movs	r3, #0
 801eaac:	9306      	str	r3, [sp, #24]
 801eaae:	9307      	str	r3, [sp, #28]
 801eab0:	930d      	str	r3, [sp, #52]	@ 0x34
 801eab2:	9308      	str	r3, [sp, #32]
 801eab4:	2322      	movs	r3, #34	@ 0x22
 801eab6:	2600      	movs	r6, #0
 801eab8:	9a05      	ldr	r2, [sp, #20]
 801eaba:	4f54      	ldr	r7, [pc, #336]	@ (801ec0c <_strtod_l+0x5cc>)
 801eabc:	6013      	str	r3, [r2, #0]
 801eabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eac0:	42b3      	cmp	r3, r6
 801eac2:	d100      	bne.n	801eac6 <_strtod_l+0x486>
 801eac4:	e5f7      	b.n	801e6b6 <_strtod_l+0x76>
 801eac6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eac8:	9805      	ldr	r0, [sp, #20]
 801eaca:	f002 ff4d 	bl	8021968 <_Bfree>
 801eace:	9908      	ldr	r1, [sp, #32]
 801ead0:	9805      	ldr	r0, [sp, #20]
 801ead2:	f002 ff49 	bl	8021968 <_Bfree>
 801ead6:	9907      	ldr	r1, [sp, #28]
 801ead8:	9805      	ldr	r0, [sp, #20]
 801eada:	f002 ff45 	bl	8021968 <_Bfree>
 801eade:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801eae0:	9805      	ldr	r0, [sp, #20]
 801eae2:	f002 ff41 	bl	8021968 <_Bfree>
 801eae6:	9906      	ldr	r1, [sp, #24]
 801eae8:	9805      	ldr	r0, [sp, #20]
 801eaea:	f002 ff3d 	bl	8021968 <_Bfree>
 801eaee:	e5e2      	b.n	801e6b6 <_strtod_l+0x76>
 801eaf0:	2325      	movs	r3, #37	@ 0x25
 801eaf2:	9a06      	ldr	r2, [sp, #24]
 801eaf4:	1a9b      	subs	r3, r3, r2
 801eaf6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eaf8:	4293      	cmp	r3, r2
 801eafa:	dbb8      	blt.n	801ea6e <_strtod_l+0x42e>
 801eafc:	240f      	movs	r4, #15
 801eafe:	9b06      	ldr	r3, [sp, #24]
 801eb00:	4d46      	ldr	r5, [pc, #280]	@ (801ec1c <_strtod_l+0x5dc>)
 801eb02:	1ae4      	subs	r4, r4, r3
 801eb04:	00e1      	lsls	r1, r4, #3
 801eb06:	1869      	adds	r1, r5, r1
 801eb08:	0032      	movs	r2, r6
 801eb0a:	6808      	ldr	r0, [r1, #0]
 801eb0c:	6849      	ldr	r1, [r1, #4]
 801eb0e:	003b      	movs	r3, r7
 801eb10:	f7e3 fd94 	bl	800263c <__aeabi_dmul>
 801eb14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb16:	1b1c      	subs	r4, r3, r4
 801eb18:	00e4      	lsls	r4, r4, #3
 801eb1a:	192d      	adds	r5, r5, r4
 801eb1c:	682a      	ldr	r2, [r5, #0]
 801eb1e:	686b      	ldr	r3, [r5, #4]
 801eb20:	e789      	b.n	801ea36 <_strtod_l+0x3f6>
 801eb22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb24:	3316      	adds	r3, #22
 801eb26:	dba2      	blt.n	801ea6e <_strtod_l+0x42e>
 801eb28:	9907      	ldr	r1, [sp, #28]
 801eb2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eb2c:	4b3b      	ldr	r3, [pc, #236]	@ (801ec1c <_strtod_l+0x5dc>)
 801eb2e:	1a52      	subs	r2, r2, r1
 801eb30:	00d2      	lsls	r2, r2, #3
 801eb32:	189b      	adds	r3, r3, r2
 801eb34:	0030      	movs	r0, r6
 801eb36:	681a      	ldr	r2, [r3, #0]
 801eb38:	685b      	ldr	r3, [r3, #4]
 801eb3a:	0039      	movs	r1, r7
 801eb3c:	f7e3 f93a 	bl	8001db4 <__aeabi_ddiv>
 801eb40:	e750      	b.n	801e9e4 <_strtod_l+0x3a4>
 801eb42:	2300      	movs	r3, #0
 801eb44:	0030      	movs	r0, r6
 801eb46:	0039      	movs	r1, r7
 801eb48:	4d35      	ldr	r5, [pc, #212]	@ (801ec20 <_strtod_l+0x5e0>)
 801eb4a:	1124      	asrs	r4, r4, #4
 801eb4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb4e:	2c01      	cmp	r4, #1
 801eb50:	dc1e      	bgt.n	801eb90 <_strtod_l+0x550>
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d001      	beq.n	801eb5a <_strtod_l+0x51a>
 801eb56:	0006      	movs	r6, r0
 801eb58:	000f      	movs	r7, r1
 801eb5a:	4b32      	ldr	r3, [pc, #200]	@ (801ec24 <_strtod_l+0x5e4>)
 801eb5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eb5e:	18ff      	adds	r7, r7, r3
 801eb60:	4b2f      	ldr	r3, [pc, #188]	@ (801ec20 <_strtod_l+0x5e0>)
 801eb62:	00d5      	lsls	r5, r2, #3
 801eb64:	195d      	adds	r5, r3, r5
 801eb66:	0032      	movs	r2, r6
 801eb68:	6828      	ldr	r0, [r5, #0]
 801eb6a:	6869      	ldr	r1, [r5, #4]
 801eb6c:	003b      	movs	r3, r7
 801eb6e:	f7e3 fd65 	bl	800263c <__aeabi_dmul>
 801eb72:	4b26      	ldr	r3, [pc, #152]	@ (801ec0c <_strtod_l+0x5cc>)
 801eb74:	4a2c      	ldr	r2, [pc, #176]	@ (801ec28 <_strtod_l+0x5e8>)
 801eb76:	0006      	movs	r6, r0
 801eb78:	400b      	ands	r3, r1
 801eb7a:	4293      	cmp	r3, r2
 801eb7c:	d895      	bhi.n	801eaaa <_strtod_l+0x46a>
 801eb7e:	4a2b      	ldr	r2, [pc, #172]	@ (801ec2c <_strtod_l+0x5ec>)
 801eb80:	4293      	cmp	r3, r2
 801eb82:	d913      	bls.n	801ebac <_strtod_l+0x56c>
 801eb84:	2601      	movs	r6, #1
 801eb86:	4f2a      	ldr	r7, [pc, #168]	@ (801ec30 <_strtod_l+0x5f0>)
 801eb88:	4276      	negs	r6, r6
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb8e:	e086      	b.n	801ec9e <_strtod_l+0x65e>
 801eb90:	2201      	movs	r2, #1
 801eb92:	4214      	tst	r4, r2
 801eb94:	d004      	beq.n	801eba0 <_strtod_l+0x560>
 801eb96:	682a      	ldr	r2, [r5, #0]
 801eb98:	686b      	ldr	r3, [r5, #4]
 801eb9a:	f7e3 fd4f 	bl	800263c <__aeabi_dmul>
 801eb9e:	2301      	movs	r3, #1
 801eba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eba2:	1064      	asrs	r4, r4, #1
 801eba4:	3201      	adds	r2, #1
 801eba6:	9209      	str	r2, [sp, #36]	@ 0x24
 801eba8:	3508      	adds	r5, #8
 801ebaa:	e7d0      	b.n	801eb4e <_strtod_l+0x50e>
 801ebac:	23d4      	movs	r3, #212	@ 0xd4
 801ebae:	049b      	lsls	r3, r3, #18
 801ebb0:	18cf      	adds	r7, r1, r3
 801ebb2:	e7ea      	b.n	801eb8a <_strtod_l+0x54a>
 801ebb4:	2c00      	cmp	r4, #0
 801ebb6:	d0e8      	beq.n	801eb8a <_strtod_l+0x54a>
 801ebb8:	4264      	negs	r4, r4
 801ebba:	230f      	movs	r3, #15
 801ebbc:	0022      	movs	r2, r4
 801ebbe:	401a      	ands	r2, r3
 801ebc0:	421c      	tst	r4, r3
 801ebc2:	d00a      	beq.n	801ebda <_strtod_l+0x59a>
 801ebc4:	4b15      	ldr	r3, [pc, #84]	@ (801ec1c <_strtod_l+0x5dc>)
 801ebc6:	00d2      	lsls	r2, r2, #3
 801ebc8:	189b      	adds	r3, r3, r2
 801ebca:	0030      	movs	r0, r6
 801ebcc:	681a      	ldr	r2, [r3, #0]
 801ebce:	685b      	ldr	r3, [r3, #4]
 801ebd0:	0039      	movs	r1, r7
 801ebd2:	f7e3 f8ef 	bl	8001db4 <__aeabi_ddiv>
 801ebd6:	0006      	movs	r6, r0
 801ebd8:	000f      	movs	r7, r1
 801ebda:	1124      	asrs	r4, r4, #4
 801ebdc:	d0d5      	beq.n	801eb8a <_strtod_l+0x54a>
 801ebde:	2c1f      	cmp	r4, #31
 801ebe0:	dd28      	ble.n	801ec34 <_strtod_l+0x5f4>
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	9306      	str	r3, [sp, #24]
 801ebe6:	9307      	str	r3, [sp, #28]
 801ebe8:	930d      	str	r3, [sp, #52]	@ 0x34
 801ebea:	9308      	str	r3, [sp, #32]
 801ebec:	2322      	movs	r3, #34	@ 0x22
 801ebee:	9a05      	ldr	r2, [sp, #20]
 801ebf0:	2600      	movs	r6, #0
 801ebf2:	6013      	str	r3, [r2, #0]
 801ebf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ebf6:	2700      	movs	r7, #0
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	d000      	beq.n	801ebfe <_strtod_l+0x5be>
 801ebfc:	e763      	b.n	801eac6 <_strtod_l+0x486>
 801ebfe:	e55a      	b.n	801e6b6 <_strtod_l+0x76>
 801ec00:	00004e1f 	.word	0x00004e1f
 801ec04:	08025c36 	.word	0x08025c36
 801ec08:	08025ad4 	.word	0x08025ad4
 801ec0c:	7ff00000 	.word	0x7ff00000
 801ec10:	08025c2e 	.word	0x08025c2e
 801ec14:	08025c68 	.word	0x08025c68
 801ec18:	08025ef4 	.word	0x08025ef4
 801ec1c:	08025de0 	.word	0x08025de0
 801ec20:	08025db8 	.word	0x08025db8
 801ec24:	fcb00000 	.word	0xfcb00000
 801ec28:	7ca00000 	.word	0x7ca00000
 801ec2c:	7c900000 	.word	0x7c900000
 801ec30:	7fefffff 	.word	0x7fefffff
 801ec34:	2310      	movs	r3, #16
 801ec36:	0022      	movs	r2, r4
 801ec38:	401a      	ands	r2, r3
 801ec3a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec3c:	421c      	tst	r4, r3
 801ec3e:	d001      	beq.n	801ec44 <_strtod_l+0x604>
 801ec40:	335a      	adds	r3, #90	@ 0x5a
 801ec42:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec44:	0030      	movs	r0, r6
 801ec46:	0039      	movs	r1, r7
 801ec48:	2300      	movs	r3, #0
 801ec4a:	4dbf      	ldr	r5, [pc, #764]	@ (801ef48 <_strtod_l+0x908>)
 801ec4c:	2201      	movs	r2, #1
 801ec4e:	4214      	tst	r4, r2
 801ec50:	d004      	beq.n	801ec5c <_strtod_l+0x61c>
 801ec52:	682a      	ldr	r2, [r5, #0]
 801ec54:	686b      	ldr	r3, [r5, #4]
 801ec56:	f7e3 fcf1 	bl	800263c <__aeabi_dmul>
 801ec5a:	2301      	movs	r3, #1
 801ec5c:	1064      	asrs	r4, r4, #1
 801ec5e:	3508      	adds	r5, #8
 801ec60:	2c00      	cmp	r4, #0
 801ec62:	d1f3      	bne.n	801ec4c <_strtod_l+0x60c>
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d001      	beq.n	801ec6c <_strtod_l+0x62c>
 801ec68:	0006      	movs	r6, r0
 801ec6a:	000f      	movs	r7, r1
 801ec6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec6e:	2b00      	cmp	r3, #0
 801ec70:	d00d      	beq.n	801ec8e <_strtod_l+0x64e>
 801ec72:	236b      	movs	r3, #107	@ 0x6b
 801ec74:	007a      	lsls	r2, r7, #1
 801ec76:	0d52      	lsrs	r2, r2, #21
 801ec78:	0039      	movs	r1, r7
 801ec7a:	1a9b      	subs	r3, r3, r2
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	dd06      	ble.n	801ec8e <_strtod_l+0x64e>
 801ec80:	2b1f      	cmp	r3, #31
 801ec82:	dd5a      	ble.n	801ed3a <_strtod_l+0x6fa>
 801ec84:	2600      	movs	r6, #0
 801ec86:	2b34      	cmp	r3, #52	@ 0x34
 801ec88:	dd50      	ble.n	801ed2c <_strtod_l+0x6ec>
 801ec8a:	27dc      	movs	r7, #220	@ 0xdc
 801ec8c:	04bf      	lsls	r7, r7, #18
 801ec8e:	2200      	movs	r2, #0
 801ec90:	2300      	movs	r3, #0
 801ec92:	0030      	movs	r0, r6
 801ec94:	0039      	movs	r1, r7
 801ec96:	f7e1 fc0b 	bl	80004b0 <__aeabi_dcmpeq>
 801ec9a:	2800      	cmp	r0, #0
 801ec9c:	d1a1      	bne.n	801ebe2 <_strtod_l+0x5a2>
 801ec9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eca0:	9a08      	ldr	r2, [sp, #32]
 801eca2:	9300      	str	r3, [sp, #0]
 801eca4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eca6:	9b06      	ldr	r3, [sp, #24]
 801eca8:	9805      	ldr	r0, [sp, #20]
 801ecaa:	f002 fec5 	bl	8021a38 <__s2b>
 801ecae:	900d      	str	r0, [sp, #52]	@ 0x34
 801ecb0:	2800      	cmp	r0, #0
 801ecb2:	d100      	bne.n	801ecb6 <_strtod_l+0x676>
 801ecb4:	e6f9      	b.n	801eaaa <_strtod_l+0x46a>
 801ecb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecb8:	9907      	ldr	r1, [sp, #28]
 801ecba:	17da      	asrs	r2, r3, #31
 801ecbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ecbe:	1a5b      	subs	r3, r3, r1
 801ecc0:	401a      	ands	r2, r3
 801ecc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecc4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ecc6:	43db      	mvns	r3, r3
 801ecc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ecca:	17db      	asrs	r3, r3, #31
 801eccc:	401a      	ands	r2, r3
 801ecce:	2300      	movs	r3, #0
 801ecd0:	921a      	str	r2, [sp, #104]	@ 0x68
 801ecd2:	9306      	str	r3, [sp, #24]
 801ecd4:	9307      	str	r3, [sp, #28]
 801ecd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecd8:	9805      	ldr	r0, [sp, #20]
 801ecda:	6859      	ldr	r1, [r3, #4]
 801ecdc:	f002 fe00 	bl	80218e0 <_Balloc>
 801ece0:	9008      	str	r0, [sp, #32]
 801ece2:	2800      	cmp	r0, #0
 801ece4:	d100      	bne.n	801ece8 <_strtod_l+0x6a8>
 801ece6:	e6e5      	b.n	801eab4 <_strtod_l+0x474>
 801ece8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecea:	300c      	adds	r0, #12
 801ecec:	0019      	movs	r1, r3
 801ecee:	691a      	ldr	r2, [r3, #16]
 801ecf0:	310c      	adds	r1, #12
 801ecf2:	3202      	adds	r2, #2
 801ecf4:	0092      	lsls	r2, r2, #2
 801ecf6:	f001 faef 	bl	80202d8 <memcpy>
 801ecfa:	ab20      	add	r3, sp, #128	@ 0x80
 801ecfc:	9301      	str	r3, [sp, #4]
 801ecfe:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ed00:	9300      	str	r3, [sp, #0]
 801ed02:	0032      	movs	r2, r6
 801ed04:	003b      	movs	r3, r7
 801ed06:	9805      	ldr	r0, [sp, #20]
 801ed08:	9610      	str	r6, [sp, #64]	@ 0x40
 801ed0a:	9711      	str	r7, [sp, #68]	@ 0x44
 801ed0c:	f003 f9e4 	bl	80220d8 <__d2b>
 801ed10:	901e      	str	r0, [sp, #120]	@ 0x78
 801ed12:	2800      	cmp	r0, #0
 801ed14:	d100      	bne.n	801ed18 <_strtod_l+0x6d8>
 801ed16:	e6cd      	b.n	801eab4 <_strtod_l+0x474>
 801ed18:	2101      	movs	r1, #1
 801ed1a:	9805      	ldr	r0, [sp, #20]
 801ed1c:	f002 ff28 	bl	8021b70 <__i2b>
 801ed20:	9007      	str	r0, [sp, #28]
 801ed22:	2800      	cmp	r0, #0
 801ed24:	d10e      	bne.n	801ed44 <_strtod_l+0x704>
 801ed26:	2300      	movs	r3, #0
 801ed28:	9307      	str	r3, [sp, #28]
 801ed2a:	e6c3      	b.n	801eab4 <_strtod_l+0x474>
 801ed2c:	234b      	movs	r3, #75	@ 0x4b
 801ed2e:	1a9a      	subs	r2, r3, r2
 801ed30:	3b4c      	subs	r3, #76	@ 0x4c
 801ed32:	4093      	lsls	r3, r2
 801ed34:	4019      	ands	r1, r3
 801ed36:	000f      	movs	r7, r1
 801ed38:	e7a9      	b.n	801ec8e <_strtod_l+0x64e>
 801ed3a:	2201      	movs	r2, #1
 801ed3c:	4252      	negs	r2, r2
 801ed3e:	409a      	lsls	r2, r3
 801ed40:	4016      	ands	r6, r2
 801ed42:	e7a4      	b.n	801ec8e <_strtod_l+0x64e>
 801ed44:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ed46:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ed48:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ed4a:	1ad4      	subs	r4, r2, r3
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	db01      	blt.n	801ed54 <_strtod_l+0x714>
 801ed50:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ed52:	195d      	adds	r5, r3, r5
 801ed54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ed56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ed58:	1a5b      	subs	r3, r3, r1
 801ed5a:	2136      	movs	r1, #54	@ 0x36
 801ed5c:	189b      	adds	r3, r3, r2
 801ed5e:	1a8a      	subs	r2, r1, r2
 801ed60:	497a      	ldr	r1, [pc, #488]	@ (801ef4c <_strtod_l+0x90c>)
 801ed62:	2001      	movs	r0, #1
 801ed64:	468c      	mov	ip, r1
 801ed66:	2100      	movs	r1, #0
 801ed68:	3b01      	subs	r3, #1
 801ed6a:	9116      	str	r1, [sp, #88]	@ 0x58
 801ed6c:	9014      	str	r0, [sp, #80]	@ 0x50
 801ed6e:	4563      	cmp	r3, ip
 801ed70:	da06      	bge.n	801ed80 <_strtod_l+0x740>
 801ed72:	4661      	mov	r1, ip
 801ed74:	1ac9      	subs	r1, r1, r3
 801ed76:	1a52      	subs	r2, r2, r1
 801ed78:	291f      	cmp	r1, #31
 801ed7a:	dc3f      	bgt.n	801edfc <_strtod_l+0x7bc>
 801ed7c:	4088      	lsls	r0, r1
 801ed7e:	9014      	str	r0, [sp, #80]	@ 0x50
 801ed80:	18ab      	adds	r3, r5, r2
 801ed82:	930e      	str	r3, [sp, #56]	@ 0x38
 801ed84:	18a4      	adds	r4, r4, r2
 801ed86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed8a:	191c      	adds	r4, r3, r4
 801ed8c:	002b      	movs	r3, r5
 801ed8e:	4295      	cmp	r5, r2
 801ed90:	dd00      	ble.n	801ed94 <_strtod_l+0x754>
 801ed92:	0013      	movs	r3, r2
 801ed94:	42a3      	cmp	r3, r4
 801ed96:	dd00      	ble.n	801ed9a <_strtod_l+0x75a>
 801ed98:	0023      	movs	r3, r4
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	dd04      	ble.n	801eda8 <_strtod_l+0x768>
 801ed9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eda0:	1ae4      	subs	r4, r4, r3
 801eda2:	1ad2      	subs	r2, r2, r3
 801eda4:	920e      	str	r2, [sp, #56]	@ 0x38
 801eda6:	1aed      	subs	r5, r5, r3
 801eda8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801edaa:	2b00      	cmp	r3, #0
 801edac:	dd16      	ble.n	801eddc <_strtod_l+0x79c>
 801edae:	001a      	movs	r2, r3
 801edb0:	9907      	ldr	r1, [sp, #28]
 801edb2:	9805      	ldr	r0, [sp, #20]
 801edb4:	f002 ffa6 	bl	8021d04 <__pow5mult>
 801edb8:	9007      	str	r0, [sp, #28]
 801edba:	2800      	cmp	r0, #0
 801edbc:	d0b3      	beq.n	801ed26 <_strtod_l+0x6e6>
 801edbe:	0001      	movs	r1, r0
 801edc0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801edc2:	9805      	ldr	r0, [sp, #20]
 801edc4:	f002 feec 	bl	8021ba0 <__multiply>
 801edc8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801edca:	2800      	cmp	r0, #0
 801edcc:	d100      	bne.n	801edd0 <_strtod_l+0x790>
 801edce:	e671      	b.n	801eab4 <_strtod_l+0x474>
 801edd0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801edd2:	9805      	ldr	r0, [sp, #20]
 801edd4:	f002 fdc8 	bl	8021968 <_Bfree>
 801edd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801edda:	931e      	str	r3, [sp, #120]	@ 0x78
 801eddc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801edde:	2b00      	cmp	r3, #0
 801ede0:	dc12      	bgt.n	801ee08 <_strtod_l+0x7c8>
 801ede2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ede4:	2b00      	cmp	r3, #0
 801ede6:	dd18      	ble.n	801ee1a <_strtod_l+0x7da>
 801ede8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801edea:	9908      	ldr	r1, [sp, #32]
 801edec:	9805      	ldr	r0, [sp, #20]
 801edee:	f002 ff89 	bl	8021d04 <__pow5mult>
 801edf2:	9008      	str	r0, [sp, #32]
 801edf4:	2800      	cmp	r0, #0
 801edf6:	d110      	bne.n	801ee1a <_strtod_l+0x7da>
 801edf8:	2300      	movs	r3, #0
 801edfa:	e65a      	b.n	801eab2 <_strtod_l+0x472>
 801edfc:	4954      	ldr	r1, [pc, #336]	@ (801ef50 <_strtod_l+0x910>)
 801edfe:	1acb      	subs	r3, r1, r3
 801ee00:	0001      	movs	r1, r0
 801ee02:	4099      	lsls	r1, r3
 801ee04:	9116      	str	r1, [sp, #88]	@ 0x58
 801ee06:	e7ba      	b.n	801ed7e <_strtod_l+0x73e>
 801ee08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee0a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ee0c:	9805      	ldr	r0, [sp, #20]
 801ee0e:	f002 ffd5 	bl	8021dbc <__lshift>
 801ee12:	901e      	str	r0, [sp, #120]	@ 0x78
 801ee14:	2800      	cmp	r0, #0
 801ee16:	d1e4      	bne.n	801ede2 <_strtod_l+0x7a2>
 801ee18:	e64c      	b.n	801eab4 <_strtod_l+0x474>
 801ee1a:	2c00      	cmp	r4, #0
 801ee1c:	dd07      	ble.n	801ee2e <_strtod_l+0x7ee>
 801ee1e:	0022      	movs	r2, r4
 801ee20:	9908      	ldr	r1, [sp, #32]
 801ee22:	9805      	ldr	r0, [sp, #20]
 801ee24:	f002 ffca 	bl	8021dbc <__lshift>
 801ee28:	9008      	str	r0, [sp, #32]
 801ee2a:	2800      	cmp	r0, #0
 801ee2c:	d0e4      	beq.n	801edf8 <_strtod_l+0x7b8>
 801ee2e:	2d00      	cmp	r5, #0
 801ee30:	dd08      	ble.n	801ee44 <_strtod_l+0x804>
 801ee32:	002a      	movs	r2, r5
 801ee34:	9907      	ldr	r1, [sp, #28]
 801ee36:	9805      	ldr	r0, [sp, #20]
 801ee38:	f002 ffc0 	bl	8021dbc <__lshift>
 801ee3c:	9007      	str	r0, [sp, #28]
 801ee3e:	2800      	cmp	r0, #0
 801ee40:	d100      	bne.n	801ee44 <_strtod_l+0x804>
 801ee42:	e637      	b.n	801eab4 <_strtod_l+0x474>
 801ee44:	9a08      	ldr	r2, [sp, #32]
 801ee46:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ee48:	9805      	ldr	r0, [sp, #20]
 801ee4a:	f003 f83f 	bl	8021ecc <__mdiff>
 801ee4e:	9006      	str	r0, [sp, #24]
 801ee50:	2800      	cmp	r0, #0
 801ee52:	d100      	bne.n	801ee56 <_strtod_l+0x816>
 801ee54:	e62e      	b.n	801eab4 <_strtod_l+0x474>
 801ee56:	68c3      	ldr	r3, [r0, #12]
 801ee58:	9907      	ldr	r1, [sp, #28]
 801ee5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ee5c:	2300      	movs	r3, #0
 801ee5e:	60c3      	str	r3, [r0, #12]
 801ee60:	f003 f818 	bl	8021e94 <__mcmp>
 801ee64:	2800      	cmp	r0, #0
 801ee66:	da3b      	bge.n	801eee0 <_strtod_l+0x8a0>
 801ee68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee6a:	4333      	orrs	r3, r6
 801ee6c:	d167      	bne.n	801ef3e <_strtod_l+0x8fe>
 801ee6e:	033b      	lsls	r3, r7, #12
 801ee70:	d165      	bne.n	801ef3e <_strtod_l+0x8fe>
 801ee72:	22d6      	movs	r2, #214	@ 0xd6
 801ee74:	4b37      	ldr	r3, [pc, #220]	@ (801ef54 <_strtod_l+0x914>)
 801ee76:	04d2      	lsls	r2, r2, #19
 801ee78:	403b      	ands	r3, r7
 801ee7a:	4293      	cmp	r3, r2
 801ee7c:	d95f      	bls.n	801ef3e <_strtod_l+0x8fe>
 801ee7e:	9b06      	ldr	r3, [sp, #24]
 801ee80:	695b      	ldr	r3, [r3, #20]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d103      	bne.n	801ee8e <_strtod_l+0x84e>
 801ee86:	9b06      	ldr	r3, [sp, #24]
 801ee88:	691b      	ldr	r3, [r3, #16]
 801ee8a:	2b01      	cmp	r3, #1
 801ee8c:	dd57      	ble.n	801ef3e <_strtod_l+0x8fe>
 801ee8e:	9906      	ldr	r1, [sp, #24]
 801ee90:	2201      	movs	r2, #1
 801ee92:	9805      	ldr	r0, [sp, #20]
 801ee94:	f002 ff92 	bl	8021dbc <__lshift>
 801ee98:	9907      	ldr	r1, [sp, #28]
 801ee9a:	9006      	str	r0, [sp, #24]
 801ee9c:	f002 fffa 	bl	8021e94 <__mcmp>
 801eea0:	2800      	cmp	r0, #0
 801eea2:	dd4c      	ble.n	801ef3e <_strtod_l+0x8fe>
 801eea4:	4b2b      	ldr	r3, [pc, #172]	@ (801ef54 <_strtod_l+0x914>)
 801eea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eea8:	403b      	ands	r3, r7
 801eeaa:	2a00      	cmp	r2, #0
 801eeac:	d074      	beq.n	801ef98 <_strtod_l+0x958>
 801eeae:	22d6      	movs	r2, #214	@ 0xd6
 801eeb0:	04d2      	lsls	r2, r2, #19
 801eeb2:	4293      	cmp	r3, r2
 801eeb4:	d870      	bhi.n	801ef98 <_strtod_l+0x958>
 801eeb6:	22dc      	movs	r2, #220	@ 0xdc
 801eeb8:	0492      	lsls	r2, r2, #18
 801eeba:	4293      	cmp	r3, r2
 801eebc:	d800      	bhi.n	801eec0 <_strtod_l+0x880>
 801eebe:	e695      	b.n	801ebec <_strtod_l+0x5ac>
 801eec0:	0030      	movs	r0, r6
 801eec2:	0039      	movs	r1, r7
 801eec4:	4b24      	ldr	r3, [pc, #144]	@ (801ef58 <_strtod_l+0x918>)
 801eec6:	2200      	movs	r2, #0
 801eec8:	f7e3 fbb8 	bl	800263c <__aeabi_dmul>
 801eecc:	4b21      	ldr	r3, [pc, #132]	@ (801ef54 <_strtod_l+0x914>)
 801eece:	0006      	movs	r6, r0
 801eed0:	000f      	movs	r7, r1
 801eed2:	420b      	tst	r3, r1
 801eed4:	d000      	beq.n	801eed8 <_strtod_l+0x898>
 801eed6:	e5f6      	b.n	801eac6 <_strtod_l+0x486>
 801eed8:	2322      	movs	r3, #34	@ 0x22
 801eeda:	9a05      	ldr	r2, [sp, #20]
 801eedc:	6013      	str	r3, [r2, #0]
 801eede:	e5f2      	b.n	801eac6 <_strtod_l+0x486>
 801eee0:	970e      	str	r7, [sp, #56]	@ 0x38
 801eee2:	2800      	cmp	r0, #0
 801eee4:	d175      	bne.n	801efd2 <_strtod_l+0x992>
 801eee6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eee8:	033b      	lsls	r3, r7, #12
 801eeea:	0b1b      	lsrs	r3, r3, #12
 801eeec:	2a00      	cmp	r2, #0
 801eeee:	d039      	beq.n	801ef64 <_strtod_l+0x924>
 801eef0:	4a1a      	ldr	r2, [pc, #104]	@ (801ef5c <_strtod_l+0x91c>)
 801eef2:	4293      	cmp	r3, r2
 801eef4:	d138      	bne.n	801ef68 <_strtod_l+0x928>
 801eef6:	2101      	movs	r1, #1
 801eef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eefa:	4249      	negs	r1, r1
 801eefc:	0032      	movs	r2, r6
 801eefe:	0008      	movs	r0, r1
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d00b      	beq.n	801ef1c <_strtod_l+0x8dc>
 801ef04:	24d4      	movs	r4, #212	@ 0xd4
 801ef06:	4b13      	ldr	r3, [pc, #76]	@ (801ef54 <_strtod_l+0x914>)
 801ef08:	0008      	movs	r0, r1
 801ef0a:	403b      	ands	r3, r7
 801ef0c:	04e4      	lsls	r4, r4, #19
 801ef0e:	42a3      	cmp	r3, r4
 801ef10:	d804      	bhi.n	801ef1c <_strtod_l+0x8dc>
 801ef12:	306c      	adds	r0, #108	@ 0x6c
 801ef14:	0d1b      	lsrs	r3, r3, #20
 801ef16:	1ac3      	subs	r3, r0, r3
 801ef18:	4099      	lsls	r1, r3
 801ef1a:	0008      	movs	r0, r1
 801ef1c:	4282      	cmp	r2, r0
 801ef1e:	d123      	bne.n	801ef68 <_strtod_l+0x928>
 801ef20:	4b0f      	ldr	r3, [pc, #60]	@ (801ef60 <_strtod_l+0x920>)
 801ef22:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ef24:	4299      	cmp	r1, r3
 801ef26:	d102      	bne.n	801ef2e <_strtod_l+0x8ee>
 801ef28:	3201      	adds	r2, #1
 801ef2a:	d100      	bne.n	801ef2e <_strtod_l+0x8ee>
 801ef2c:	e5c2      	b.n	801eab4 <_strtod_l+0x474>
 801ef2e:	4b09      	ldr	r3, [pc, #36]	@ (801ef54 <_strtod_l+0x914>)
 801ef30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ef32:	2600      	movs	r6, #0
 801ef34:	401a      	ands	r2, r3
 801ef36:	0013      	movs	r3, r2
 801ef38:	2280      	movs	r2, #128	@ 0x80
 801ef3a:	0352      	lsls	r2, r2, #13
 801ef3c:	189f      	adds	r7, r3, r2
 801ef3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d1bd      	bne.n	801eec0 <_strtod_l+0x880>
 801ef44:	e5bf      	b.n	801eac6 <_strtod_l+0x486>
 801ef46:	46c0      	nop			@ (mov r8, r8)
 801ef48:	08025b00 	.word	0x08025b00
 801ef4c:	fffffc02 	.word	0xfffffc02
 801ef50:	fffffbe2 	.word	0xfffffbe2
 801ef54:	7ff00000 	.word	0x7ff00000
 801ef58:	39500000 	.word	0x39500000
 801ef5c:	000fffff 	.word	0x000fffff
 801ef60:	7fefffff 	.word	0x7fefffff
 801ef64:	4333      	orrs	r3, r6
 801ef66:	d09d      	beq.n	801eea4 <_strtod_l+0x864>
 801ef68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ef6a:	2b00      	cmp	r3, #0
 801ef6c:	d01c      	beq.n	801efa8 <_strtod_l+0x968>
 801ef6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef70:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ef72:	4213      	tst	r3, r2
 801ef74:	d0e3      	beq.n	801ef3e <_strtod_l+0x8fe>
 801ef76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef78:	0030      	movs	r0, r6
 801ef7a:	0039      	movs	r1, r7
 801ef7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d016      	beq.n	801efb0 <_strtod_l+0x970>
 801ef82:	f7ff fb45 	bl	801e610 <sulp>
 801ef86:	0002      	movs	r2, r0
 801ef88:	000b      	movs	r3, r1
 801ef8a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ef8c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ef8e:	f7e2 fbad 	bl	80016ec <__aeabi_dadd>
 801ef92:	0006      	movs	r6, r0
 801ef94:	000f      	movs	r7, r1
 801ef96:	e7d2      	b.n	801ef3e <_strtod_l+0x8fe>
 801ef98:	2601      	movs	r6, #1
 801ef9a:	4a92      	ldr	r2, [pc, #584]	@ (801f1e4 <_strtod_l+0xba4>)
 801ef9c:	4276      	negs	r6, r6
 801ef9e:	189b      	adds	r3, r3, r2
 801efa0:	4a91      	ldr	r2, [pc, #580]	@ (801f1e8 <_strtod_l+0xba8>)
 801efa2:	431a      	orrs	r2, r3
 801efa4:	0017      	movs	r7, r2
 801efa6:	e7ca      	b.n	801ef3e <_strtod_l+0x8fe>
 801efa8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801efaa:	4233      	tst	r3, r6
 801efac:	d0c7      	beq.n	801ef3e <_strtod_l+0x8fe>
 801efae:	e7e2      	b.n	801ef76 <_strtod_l+0x936>
 801efb0:	f7ff fb2e 	bl	801e610 <sulp>
 801efb4:	0002      	movs	r2, r0
 801efb6:	000b      	movs	r3, r1
 801efb8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801efba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801efbc:	f7e3 fe06 	bl	8002bcc <__aeabi_dsub>
 801efc0:	2200      	movs	r2, #0
 801efc2:	2300      	movs	r3, #0
 801efc4:	0006      	movs	r6, r0
 801efc6:	000f      	movs	r7, r1
 801efc8:	f7e1 fa72 	bl	80004b0 <__aeabi_dcmpeq>
 801efcc:	2800      	cmp	r0, #0
 801efce:	d0b6      	beq.n	801ef3e <_strtod_l+0x8fe>
 801efd0:	e60c      	b.n	801ebec <_strtod_l+0x5ac>
 801efd2:	9907      	ldr	r1, [sp, #28]
 801efd4:	9806      	ldr	r0, [sp, #24]
 801efd6:	f003 f8df 	bl	8022198 <__ratio>
 801efda:	2380      	movs	r3, #128	@ 0x80
 801efdc:	2200      	movs	r2, #0
 801efde:	05db      	lsls	r3, r3, #23
 801efe0:	0004      	movs	r4, r0
 801efe2:	000d      	movs	r5, r1
 801efe4:	f7e1 fa74 	bl	80004d0 <__aeabi_dcmple>
 801efe8:	2800      	cmp	r0, #0
 801efea:	d06c      	beq.n	801f0c6 <_strtod_l+0xa86>
 801efec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d177      	bne.n	801f0e2 <_strtod_l+0xaa2>
 801eff2:	2e00      	cmp	r6, #0
 801eff4:	d157      	bne.n	801f0a6 <_strtod_l+0xa66>
 801eff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eff8:	031b      	lsls	r3, r3, #12
 801effa:	d15a      	bne.n	801f0b2 <_strtod_l+0xa72>
 801effc:	2200      	movs	r2, #0
 801effe:	0020      	movs	r0, r4
 801f000:	0029      	movs	r1, r5
 801f002:	4b7a      	ldr	r3, [pc, #488]	@ (801f1ec <_strtod_l+0xbac>)
 801f004:	f7e1 fa5a 	bl	80004bc <__aeabi_dcmplt>
 801f008:	2800      	cmp	r0, #0
 801f00a:	d159      	bne.n	801f0c0 <_strtod_l+0xa80>
 801f00c:	0020      	movs	r0, r4
 801f00e:	0029      	movs	r1, r5
 801f010:	2200      	movs	r2, #0
 801f012:	4b77      	ldr	r3, [pc, #476]	@ (801f1f0 <_strtod_l+0xbb0>)
 801f014:	f7e3 fb12 	bl	800263c <__aeabi_dmul>
 801f018:	0004      	movs	r4, r0
 801f01a:	000d      	movs	r5, r1
 801f01c:	2380      	movs	r3, #128	@ 0x80
 801f01e:	061b      	lsls	r3, r3, #24
 801f020:	18eb      	adds	r3, r5, r3
 801f022:	940a      	str	r4, [sp, #40]	@ 0x28
 801f024:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f028:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f02a:	9214      	str	r2, [sp, #80]	@ 0x50
 801f02c:	9315      	str	r3, [sp, #84]	@ 0x54
 801f02e:	4a71      	ldr	r2, [pc, #452]	@ (801f1f4 <_strtod_l+0xbb4>)
 801f030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f032:	4013      	ands	r3, r2
 801f034:	9316      	str	r3, [sp, #88]	@ 0x58
 801f036:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f038:	4b6f      	ldr	r3, [pc, #444]	@ (801f1f8 <_strtod_l+0xbb8>)
 801f03a:	429a      	cmp	r2, r3
 801f03c:	d000      	beq.n	801f040 <_strtod_l+0xa00>
 801f03e:	e087      	b.n	801f150 <_strtod_l+0xb10>
 801f040:	4a6e      	ldr	r2, [pc, #440]	@ (801f1fc <_strtod_l+0xbbc>)
 801f042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f044:	4694      	mov	ip, r2
 801f046:	4463      	add	r3, ip
 801f048:	001f      	movs	r7, r3
 801f04a:	0030      	movs	r0, r6
 801f04c:	0019      	movs	r1, r3
 801f04e:	f002 ffd7 	bl	8022000 <__ulp>
 801f052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f056:	f7e3 faf1 	bl	800263c <__aeabi_dmul>
 801f05a:	0032      	movs	r2, r6
 801f05c:	003b      	movs	r3, r7
 801f05e:	f7e2 fb45 	bl	80016ec <__aeabi_dadd>
 801f062:	4a64      	ldr	r2, [pc, #400]	@ (801f1f4 <_strtod_l+0xbb4>)
 801f064:	4b66      	ldr	r3, [pc, #408]	@ (801f200 <_strtod_l+0xbc0>)
 801f066:	0006      	movs	r6, r0
 801f068:	400a      	ands	r2, r1
 801f06a:	429a      	cmp	r2, r3
 801f06c:	d940      	bls.n	801f0f0 <_strtod_l+0xab0>
 801f06e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f070:	4a64      	ldr	r2, [pc, #400]	@ (801f204 <_strtod_l+0xbc4>)
 801f072:	4293      	cmp	r3, r2
 801f074:	d103      	bne.n	801f07e <_strtod_l+0xa3e>
 801f076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f078:	3301      	adds	r3, #1
 801f07a:	d100      	bne.n	801f07e <_strtod_l+0xa3e>
 801f07c:	e51a      	b.n	801eab4 <_strtod_l+0x474>
 801f07e:	2601      	movs	r6, #1
 801f080:	4f60      	ldr	r7, [pc, #384]	@ (801f204 <_strtod_l+0xbc4>)
 801f082:	4276      	negs	r6, r6
 801f084:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f086:	9805      	ldr	r0, [sp, #20]
 801f088:	f002 fc6e 	bl	8021968 <_Bfree>
 801f08c:	9908      	ldr	r1, [sp, #32]
 801f08e:	9805      	ldr	r0, [sp, #20]
 801f090:	f002 fc6a 	bl	8021968 <_Bfree>
 801f094:	9907      	ldr	r1, [sp, #28]
 801f096:	9805      	ldr	r0, [sp, #20]
 801f098:	f002 fc66 	bl	8021968 <_Bfree>
 801f09c:	9906      	ldr	r1, [sp, #24]
 801f09e:	9805      	ldr	r0, [sp, #20]
 801f0a0:	f002 fc62 	bl	8021968 <_Bfree>
 801f0a4:	e617      	b.n	801ecd6 <_strtod_l+0x696>
 801f0a6:	2e01      	cmp	r6, #1
 801f0a8:	d103      	bne.n	801f0b2 <_strtod_l+0xa72>
 801f0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d100      	bne.n	801f0b2 <_strtod_l+0xa72>
 801f0b0:	e59c      	b.n	801ebec <_strtod_l+0x5ac>
 801f0b2:	2300      	movs	r3, #0
 801f0b4:	4c54      	ldr	r4, [pc, #336]	@ (801f208 <_strtod_l+0xbc8>)
 801f0b6:	4d4d      	ldr	r5, [pc, #308]	@ (801f1ec <_strtod_l+0xbac>)
 801f0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f0ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f0bc:	2400      	movs	r4, #0
 801f0be:	e7b2      	b.n	801f026 <_strtod_l+0x9e6>
 801f0c0:	2400      	movs	r4, #0
 801f0c2:	4d4b      	ldr	r5, [pc, #300]	@ (801f1f0 <_strtod_l+0xbb0>)
 801f0c4:	e7aa      	b.n	801f01c <_strtod_l+0x9dc>
 801f0c6:	0020      	movs	r0, r4
 801f0c8:	0029      	movs	r1, r5
 801f0ca:	4b49      	ldr	r3, [pc, #292]	@ (801f1f0 <_strtod_l+0xbb0>)
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	f7e3 fab5 	bl	800263c <__aeabi_dmul>
 801f0d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0d4:	0004      	movs	r4, r0
 801f0d6:	000d      	movs	r5, r1
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d09f      	beq.n	801f01c <_strtod_l+0x9dc>
 801f0dc:	940a      	str	r4, [sp, #40]	@ 0x28
 801f0de:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f0e0:	e7a1      	b.n	801f026 <_strtod_l+0x9e6>
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	4c41      	ldr	r4, [pc, #260]	@ (801f1ec <_strtod_l+0xbac>)
 801f0e6:	0025      	movs	r5, r4
 801f0e8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f0ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f0ec:	001c      	movs	r4, r3
 801f0ee:	e79a      	b.n	801f026 <_strtod_l+0x9e6>
 801f0f0:	23d4      	movs	r3, #212	@ 0xd4
 801f0f2:	049b      	lsls	r3, r3, #18
 801f0f4:	18cf      	adds	r7, r1, r3
 801f0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0f8:	9710      	str	r7, [sp, #64]	@ 0x40
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d1c2      	bne.n	801f084 <_strtod_l+0xa44>
 801f0fe:	4b3d      	ldr	r3, [pc, #244]	@ (801f1f4 <_strtod_l+0xbb4>)
 801f100:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f102:	403b      	ands	r3, r7
 801f104:	429a      	cmp	r2, r3
 801f106:	d1bd      	bne.n	801f084 <_strtod_l+0xa44>
 801f108:	0020      	movs	r0, r4
 801f10a:	0029      	movs	r1, r5
 801f10c:	f7e1 fabc 	bl	8000688 <__aeabi_d2lz>
 801f110:	f7e1 faf4 	bl	80006fc <__aeabi_l2d>
 801f114:	0002      	movs	r2, r0
 801f116:	000b      	movs	r3, r1
 801f118:	0020      	movs	r0, r4
 801f11a:	0029      	movs	r1, r5
 801f11c:	f7e3 fd56 	bl	8002bcc <__aeabi_dsub>
 801f120:	033c      	lsls	r4, r7, #12
 801f122:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f124:	0b24      	lsrs	r4, r4, #12
 801f126:	4334      	orrs	r4, r6
 801f128:	900e      	str	r0, [sp, #56]	@ 0x38
 801f12a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f12c:	4a37      	ldr	r2, [pc, #220]	@ (801f20c <_strtod_l+0xbcc>)
 801f12e:	431c      	orrs	r4, r3
 801f130:	d052      	beq.n	801f1d8 <_strtod_l+0xb98>
 801f132:	4b37      	ldr	r3, [pc, #220]	@ (801f210 <_strtod_l+0xbd0>)
 801f134:	f7e1 f9c2 	bl	80004bc <__aeabi_dcmplt>
 801f138:	2800      	cmp	r0, #0
 801f13a:	d000      	beq.n	801f13e <_strtod_l+0xafe>
 801f13c:	e4c3      	b.n	801eac6 <_strtod_l+0x486>
 801f13e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f140:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f142:	4a34      	ldr	r2, [pc, #208]	@ (801f214 <_strtod_l+0xbd4>)
 801f144:	4b2a      	ldr	r3, [pc, #168]	@ (801f1f0 <_strtod_l+0xbb0>)
 801f146:	f7e1 f9cd 	bl	80004e4 <__aeabi_dcmpgt>
 801f14a:	2800      	cmp	r0, #0
 801f14c:	d09a      	beq.n	801f084 <_strtod_l+0xa44>
 801f14e:	e4ba      	b.n	801eac6 <_strtod_l+0x486>
 801f150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f152:	2b00      	cmp	r3, #0
 801f154:	d02a      	beq.n	801f1ac <_strtod_l+0xb6c>
 801f156:	23d4      	movs	r3, #212	@ 0xd4
 801f158:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f15a:	04db      	lsls	r3, r3, #19
 801f15c:	429a      	cmp	r2, r3
 801f15e:	d825      	bhi.n	801f1ac <_strtod_l+0xb6c>
 801f160:	0020      	movs	r0, r4
 801f162:	0029      	movs	r1, r5
 801f164:	4a2c      	ldr	r2, [pc, #176]	@ (801f218 <_strtod_l+0xbd8>)
 801f166:	4b2d      	ldr	r3, [pc, #180]	@ (801f21c <_strtod_l+0xbdc>)
 801f168:	f7e1 f9b2 	bl	80004d0 <__aeabi_dcmple>
 801f16c:	2800      	cmp	r0, #0
 801f16e:	d016      	beq.n	801f19e <_strtod_l+0xb5e>
 801f170:	0020      	movs	r0, r4
 801f172:	0029      	movs	r1, r5
 801f174:	f7e1 fa6a 	bl	800064c <__aeabi_d2uiz>
 801f178:	2800      	cmp	r0, #0
 801f17a:	d100      	bne.n	801f17e <_strtod_l+0xb3e>
 801f17c:	3001      	adds	r0, #1
 801f17e:	f7e4 f94d 	bl	800341c <__aeabi_ui2d>
 801f182:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f184:	0004      	movs	r4, r0
 801f186:	000d      	movs	r5, r1
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d122      	bne.n	801f1d2 <_strtod_l+0xb92>
 801f18c:	2380      	movs	r3, #128	@ 0x80
 801f18e:	061b      	lsls	r3, r3, #24
 801f190:	18cb      	adds	r3, r1, r3
 801f192:	9018      	str	r0, [sp, #96]	@ 0x60
 801f194:	9319      	str	r3, [sp, #100]	@ 0x64
 801f196:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f19a:	9214      	str	r2, [sp, #80]	@ 0x50
 801f19c:	9315      	str	r3, [sp, #84]	@ 0x54
 801f19e:	22d6      	movs	r2, #214	@ 0xd6
 801f1a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f1a2:	04d2      	lsls	r2, r2, #19
 801f1a4:	189b      	adds	r3, r3, r2
 801f1a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1a8:	1a9b      	subs	r3, r3, r2
 801f1aa:	9315      	str	r3, [sp, #84]	@ 0x54
 801f1ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f1ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f1b0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f1b2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f1b4:	f002 ff24 	bl	8022000 <__ulp>
 801f1b8:	0002      	movs	r2, r0
 801f1ba:	000b      	movs	r3, r1
 801f1bc:	0030      	movs	r0, r6
 801f1be:	0039      	movs	r1, r7
 801f1c0:	f7e3 fa3c 	bl	800263c <__aeabi_dmul>
 801f1c4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f1c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f1c8:	f7e2 fa90 	bl	80016ec <__aeabi_dadd>
 801f1cc:	0006      	movs	r6, r0
 801f1ce:	000f      	movs	r7, r1
 801f1d0:	e791      	b.n	801f0f6 <_strtod_l+0xab6>
 801f1d2:	9418      	str	r4, [sp, #96]	@ 0x60
 801f1d4:	9519      	str	r5, [sp, #100]	@ 0x64
 801f1d6:	e7de      	b.n	801f196 <_strtod_l+0xb56>
 801f1d8:	4b11      	ldr	r3, [pc, #68]	@ (801f220 <_strtod_l+0xbe0>)
 801f1da:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f1dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f1de:	f7e1 f96d 	bl	80004bc <__aeabi_dcmplt>
 801f1e2:	e7b2      	b.n	801f14a <_strtod_l+0xb0a>
 801f1e4:	fff00000 	.word	0xfff00000
 801f1e8:	000fffff 	.word	0x000fffff
 801f1ec:	3ff00000 	.word	0x3ff00000
 801f1f0:	3fe00000 	.word	0x3fe00000
 801f1f4:	7ff00000 	.word	0x7ff00000
 801f1f8:	7fe00000 	.word	0x7fe00000
 801f1fc:	fcb00000 	.word	0xfcb00000
 801f200:	7c9fffff 	.word	0x7c9fffff
 801f204:	7fefffff 	.word	0x7fefffff
 801f208:	bff00000 	.word	0xbff00000
 801f20c:	94a03595 	.word	0x94a03595
 801f210:	3fdfffff 	.word	0x3fdfffff
 801f214:	35afe535 	.word	0x35afe535
 801f218:	ffc00000 	.word	0xffc00000
 801f21c:	41dfffff 	.word	0x41dfffff
 801f220:	3fcfffff 	.word	0x3fcfffff

0801f224 <strtod>:
 801f224:	b510      	push	{r4, lr}
 801f226:	4c04      	ldr	r4, [pc, #16]	@ (801f238 <strtod+0x14>)
 801f228:	000a      	movs	r2, r1
 801f22a:	0001      	movs	r1, r0
 801f22c:	4b03      	ldr	r3, [pc, #12]	@ (801f23c <strtod+0x18>)
 801f22e:	6820      	ldr	r0, [r4, #0]
 801f230:	f7ff fa06 	bl	801e640 <_strtod_l>
 801f234:	bd10      	pop	{r4, pc}
 801f236:	46c0      	nop			@ (mov r8, r8)
 801f238:	200003c8 	.word	0x200003c8
 801f23c:	2000025c 	.word	0x2000025c

0801f240 <_strtol_l.constprop.0>:
 801f240:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f242:	b085      	sub	sp, #20
 801f244:	0017      	movs	r7, r2
 801f246:	001e      	movs	r6, r3
 801f248:	9003      	str	r0, [sp, #12]
 801f24a:	9101      	str	r1, [sp, #4]
 801f24c:	2b24      	cmp	r3, #36	@ 0x24
 801f24e:	d844      	bhi.n	801f2da <_strtol_l.constprop.0+0x9a>
 801f250:	000c      	movs	r4, r1
 801f252:	2b01      	cmp	r3, #1
 801f254:	d041      	beq.n	801f2da <_strtol_l.constprop.0+0x9a>
 801f256:	4b3d      	ldr	r3, [pc, #244]	@ (801f34c <_strtol_l.constprop.0+0x10c>)
 801f258:	2208      	movs	r2, #8
 801f25a:	469c      	mov	ip, r3
 801f25c:	0023      	movs	r3, r4
 801f25e:	4661      	mov	r1, ip
 801f260:	781d      	ldrb	r5, [r3, #0]
 801f262:	3401      	adds	r4, #1
 801f264:	5d48      	ldrb	r0, [r1, r5]
 801f266:	0001      	movs	r1, r0
 801f268:	4011      	ands	r1, r2
 801f26a:	4210      	tst	r0, r2
 801f26c:	d1f6      	bne.n	801f25c <_strtol_l.constprop.0+0x1c>
 801f26e:	2d2d      	cmp	r5, #45	@ 0x2d
 801f270:	d13a      	bne.n	801f2e8 <_strtol_l.constprop.0+0xa8>
 801f272:	7825      	ldrb	r5, [r4, #0]
 801f274:	1c9c      	adds	r4, r3, #2
 801f276:	2301      	movs	r3, #1
 801f278:	9300      	str	r3, [sp, #0]
 801f27a:	2210      	movs	r2, #16
 801f27c:	0033      	movs	r3, r6
 801f27e:	4393      	bics	r3, r2
 801f280:	d109      	bne.n	801f296 <_strtol_l.constprop.0+0x56>
 801f282:	2d30      	cmp	r5, #48	@ 0x30
 801f284:	d136      	bne.n	801f2f4 <_strtol_l.constprop.0+0xb4>
 801f286:	2120      	movs	r1, #32
 801f288:	7823      	ldrb	r3, [r4, #0]
 801f28a:	438b      	bics	r3, r1
 801f28c:	2b58      	cmp	r3, #88	@ 0x58
 801f28e:	d131      	bne.n	801f2f4 <_strtol_l.constprop.0+0xb4>
 801f290:	0016      	movs	r6, r2
 801f292:	7865      	ldrb	r5, [r4, #1]
 801f294:	3402      	adds	r4, #2
 801f296:	4a2e      	ldr	r2, [pc, #184]	@ (801f350 <_strtol_l.constprop.0+0x110>)
 801f298:	9b00      	ldr	r3, [sp, #0]
 801f29a:	4694      	mov	ip, r2
 801f29c:	4463      	add	r3, ip
 801f29e:	0031      	movs	r1, r6
 801f2a0:	0018      	movs	r0, r3
 801f2a2:	9302      	str	r3, [sp, #8]
 801f2a4:	f7e1 f804 	bl	80002b0 <__aeabi_uidivmod>
 801f2a8:	2200      	movs	r2, #0
 801f2aa:	4684      	mov	ip, r0
 801f2ac:	0010      	movs	r0, r2
 801f2ae:	002b      	movs	r3, r5
 801f2b0:	3b30      	subs	r3, #48	@ 0x30
 801f2b2:	2b09      	cmp	r3, #9
 801f2b4:	d825      	bhi.n	801f302 <_strtol_l.constprop.0+0xc2>
 801f2b6:	001d      	movs	r5, r3
 801f2b8:	42ae      	cmp	r6, r5
 801f2ba:	dd31      	ble.n	801f320 <_strtol_l.constprop.0+0xe0>
 801f2bc:	1c53      	adds	r3, r2, #1
 801f2be:	d009      	beq.n	801f2d4 <_strtol_l.constprop.0+0x94>
 801f2c0:	2201      	movs	r2, #1
 801f2c2:	4252      	negs	r2, r2
 801f2c4:	4584      	cmp	ip, r0
 801f2c6:	d305      	bcc.n	801f2d4 <_strtol_l.constprop.0+0x94>
 801f2c8:	d101      	bne.n	801f2ce <_strtol_l.constprop.0+0x8e>
 801f2ca:	42a9      	cmp	r1, r5
 801f2cc:	db25      	blt.n	801f31a <_strtol_l.constprop.0+0xda>
 801f2ce:	2201      	movs	r2, #1
 801f2d0:	4370      	muls	r0, r6
 801f2d2:	1828      	adds	r0, r5, r0
 801f2d4:	7825      	ldrb	r5, [r4, #0]
 801f2d6:	3401      	adds	r4, #1
 801f2d8:	e7e9      	b.n	801f2ae <_strtol_l.constprop.0+0x6e>
 801f2da:	f000 ffc5 	bl	8020268 <__errno>
 801f2de:	2316      	movs	r3, #22
 801f2e0:	6003      	str	r3, [r0, #0]
 801f2e2:	2000      	movs	r0, #0
 801f2e4:	b005      	add	sp, #20
 801f2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2e8:	9100      	str	r1, [sp, #0]
 801f2ea:	2d2b      	cmp	r5, #43	@ 0x2b
 801f2ec:	d1c5      	bne.n	801f27a <_strtol_l.constprop.0+0x3a>
 801f2ee:	7825      	ldrb	r5, [r4, #0]
 801f2f0:	1c9c      	adds	r4, r3, #2
 801f2f2:	e7c2      	b.n	801f27a <_strtol_l.constprop.0+0x3a>
 801f2f4:	2e00      	cmp	r6, #0
 801f2f6:	d1ce      	bne.n	801f296 <_strtol_l.constprop.0+0x56>
 801f2f8:	3608      	adds	r6, #8
 801f2fa:	2d30      	cmp	r5, #48	@ 0x30
 801f2fc:	d0cb      	beq.n	801f296 <_strtol_l.constprop.0+0x56>
 801f2fe:	3602      	adds	r6, #2
 801f300:	e7c9      	b.n	801f296 <_strtol_l.constprop.0+0x56>
 801f302:	002b      	movs	r3, r5
 801f304:	3b41      	subs	r3, #65	@ 0x41
 801f306:	2b19      	cmp	r3, #25
 801f308:	d801      	bhi.n	801f30e <_strtol_l.constprop.0+0xce>
 801f30a:	3d37      	subs	r5, #55	@ 0x37
 801f30c:	e7d4      	b.n	801f2b8 <_strtol_l.constprop.0+0x78>
 801f30e:	002b      	movs	r3, r5
 801f310:	3b61      	subs	r3, #97	@ 0x61
 801f312:	2b19      	cmp	r3, #25
 801f314:	d804      	bhi.n	801f320 <_strtol_l.constprop.0+0xe0>
 801f316:	3d57      	subs	r5, #87	@ 0x57
 801f318:	e7ce      	b.n	801f2b8 <_strtol_l.constprop.0+0x78>
 801f31a:	2201      	movs	r2, #1
 801f31c:	4252      	negs	r2, r2
 801f31e:	e7d9      	b.n	801f2d4 <_strtol_l.constprop.0+0x94>
 801f320:	1c53      	adds	r3, r2, #1
 801f322:	d108      	bne.n	801f336 <_strtol_l.constprop.0+0xf6>
 801f324:	2322      	movs	r3, #34	@ 0x22
 801f326:	9a03      	ldr	r2, [sp, #12]
 801f328:	9802      	ldr	r0, [sp, #8]
 801f32a:	6013      	str	r3, [r2, #0]
 801f32c:	2f00      	cmp	r7, #0
 801f32e:	d0d9      	beq.n	801f2e4 <_strtol_l.constprop.0+0xa4>
 801f330:	1e63      	subs	r3, r4, #1
 801f332:	9301      	str	r3, [sp, #4]
 801f334:	e007      	b.n	801f346 <_strtol_l.constprop.0+0x106>
 801f336:	9b00      	ldr	r3, [sp, #0]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d000      	beq.n	801f33e <_strtol_l.constprop.0+0xfe>
 801f33c:	4240      	negs	r0, r0
 801f33e:	2f00      	cmp	r7, #0
 801f340:	d0d0      	beq.n	801f2e4 <_strtol_l.constprop.0+0xa4>
 801f342:	2a00      	cmp	r2, #0
 801f344:	d1f4      	bne.n	801f330 <_strtol_l.constprop.0+0xf0>
 801f346:	9b01      	ldr	r3, [sp, #4]
 801f348:	603b      	str	r3, [r7, #0]
 801f34a:	e7cb      	b.n	801f2e4 <_strtol_l.constprop.0+0xa4>
 801f34c:	08025b29 	.word	0x08025b29
 801f350:	7fffffff 	.word	0x7fffffff

0801f354 <strtol>:
 801f354:	b510      	push	{r4, lr}
 801f356:	4c04      	ldr	r4, [pc, #16]	@ (801f368 <strtol+0x14>)
 801f358:	0013      	movs	r3, r2
 801f35a:	000a      	movs	r2, r1
 801f35c:	0001      	movs	r1, r0
 801f35e:	6820      	ldr	r0, [r4, #0]
 801f360:	f7ff ff6e 	bl	801f240 <_strtol_l.constprop.0>
 801f364:	bd10      	pop	{r4, pc}
 801f366:	46c0      	nop			@ (mov r8, r8)
 801f368:	200003c8 	.word	0x200003c8

0801f36c <__cvt>:
 801f36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f36e:	001f      	movs	r7, r3
 801f370:	2300      	movs	r3, #0
 801f372:	0016      	movs	r6, r2
 801f374:	b08b      	sub	sp, #44	@ 0x2c
 801f376:	429f      	cmp	r7, r3
 801f378:	da04      	bge.n	801f384 <__cvt+0x18>
 801f37a:	2180      	movs	r1, #128	@ 0x80
 801f37c:	0609      	lsls	r1, r1, #24
 801f37e:	187b      	adds	r3, r7, r1
 801f380:	001f      	movs	r7, r3
 801f382:	232d      	movs	r3, #45	@ 0x2d
 801f384:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f386:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f388:	7013      	strb	r3, [r2, #0]
 801f38a:	2320      	movs	r3, #32
 801f38c:	2203      	movs	r2, #3
 801f38e:	439d      	bics	r5, r3
 801f390:	2d46      	cmp	r5, #70	@ 0x46
 801f392:	d007      	beq.n	801f3a4 <__cvt+0x38>
 801f394:	002b      	movs	r3, r5
 801f396:	3b45      	subs	r3, #69	@ 0x45
 801f398:	4259      	negs	r1, r3
 801f39a:	414b      	adcs	r3, r1
 801f39c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f39e:	3a01      	subs	r2, #1
 801f3a0:	18cb      	adds	r3, r1, r3
 801f3a2:	9310      	str	r3, [sp, #64]	@ 0x40
 801f3a4:	ab09      	add	r3, sp, #36	@ 0x24
 801f3a6:	9304      	str	r3, [sp, #16]
 801f3a8:	ab08      	add	r3, sp, #32
 801f3aa:	9303      	str	r3, [sp, #12]
 801f3ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f3ae:	9200      	str	r2, [sp, #0]
 801f3b0:	9302      	str	r3, [sp, #8]
 801f3b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f3b4:	0032      	movs	r2, r6
 801f3b6:	9301      	str	r3, [sp, #4]
 801f3b8:	003b      	movs	r3, r7
 801f3ba:	f001 f82b 	bl	8020414 <_dtoa_r>
 801f3be:	0004      	movs	r4, r0
 801f3c0:	2d47      	cmp	r5, #71	@ 0x47
 801f3c2:	d11b      	bne.n	801f3fc <__cvt+0x90>
 801f3c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f3c6:	07db      	lsls	r3, r3, #31
 801f3c8:	d511      	bpl.n	801f3ee <__cvt+0x82>
 801f3ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f3cc:	18c3      	adds	r3, r0, r3
 801f3ce:	9307      	str	r3, [sp, #28]
 801f3d0:	2200      	movs	r2, #0
 801f3d2:	2300      	movs	r3, #0
 801f3d4:	0030      	movs	r0, r6
 801f3d6:	0039      	movs	r1, r7
 801f3d8:	f7e1 f86a 	bl	80004b0 <__aeabi_dcmpeq>
 801f3dc:	2800      	cmp	r0, #0
 801f3de:	d001      	beq.n	801f3e4 <__cvt+0x78>
 801f3e0:	9b07      	ldr	r3, [sp, #28]
 801f3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3e4:	2230      	movs	r2, #48	@ 0x30
 801f3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3e8:	9907      	ldr	r1, [sp, #28]
 801f3ea:	428b      	cmp	r3, r1
 801f3ec:	d320      	bcc.n	801f430 <__cvt+0xc4>
 801f3ee:	0020      	movs	r0, r4
 801f3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f3f4:	1b1b      	subs	r3, r3, r4
 801f3f6:	6013      	str	r3, [r2, #0]
 801f3f8:	b00b      	add	sp, #44	@ 0x2c
 801f3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f3fe:	18c3      	adds	r3, r0, r3
 801f400:	9307      	str	r3, [sp, #28]
 801f402:	2d46      	cmp	r5, #70	@ 0x46
 801f404:	d1e4      	bne.n	801f3d0 <__cvt+0x64>
 801f406:	7803      	ldrb	r3, [r0, #0]
 801f408:	2b30      	cmp	r3, #48	@ 0x30
 801f40a:	d10c      	bne.n	801f426 <__cvt+0xba>
 801f40c:	2200      	movs	r2, #0
 801f40e:	2300      	movs	r3, #0
 801f410:	0030      	movs	r0, r6
 801f412:	0039      	movs	r1, r7
 801f414:	f7e1 f84c 	bl	80004b0 <__aeabi_dcmpeq>
 801f418:	2800      	cmp	r0, #0
 801f41a:	d104      	bne.n	801f426 <__cvt+0xba>
 801f41c:	2301      	movs	r3, #1
 801f41e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f420:	1a9b      	subs	r3, r3, r2
 801f422:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f424:	6013      	str	r3, [r2, #0]
 801f426:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f428:	9a07      	ldr	r2, [sp, #28]
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	18d3      	adds	r3, r2, r3
 801f42e:	e7ce      	b.n	801f3ce <__cvt+0x62>
 801f430:	1c59      	adds	r1, r3, #1
 801f432:	9109      	str	r1, [sp, #36]	@ 0x24
 801f434:	701a      	strb	r2, [r3, #0]
 801f436:	e7d6      	b.n	801f3e6 <__cvt+0x7a>

0801f438 <__exponent>:
 801f438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f43a:	232b      	movs	r3, #43	@ 0x2b
 801f43c:	0005      	movs	r5, r0
 801f43e:	000c      	movs	r4, r1
 801f440:	b085      	sub	sp, #20
 801f442:	7002      	strb	r2, [r0, #0]
 801f444:	2900      	cmp	r1, #0
 801f446:	da01      	bge.n	801f44c <__exponent+0x14>
 801f448:	424c      	negs	r4, r1
 801f44a:	3302      	adds	r3, #2
 801f44c:	706b      	strb	r3, [r5, #1]
 801f44e:	2c09      	cmp	r4, #9
 801f450:	dd2c      	ble.n	801f4ac <__exponent+0x74>
 801f452:	ab02      	add	r3, sp, #8
 801f454:	1dde      	adds	r6, r3, #7
 801f456:	0020      	movs	r0, r4
 801f458:	210a      	movs	r1, #10
 801f45a:	f7e1 f813 	bl	8000484 <__aeabi_idivmod>
 801f45e:	0037      	movs	r7, r6
 801f460:	3130      	adds	r1, #48	@ 0x30
 801f462:	3e01      	subs	r6, #1
 801f464:	0020      	movs	r0, r4
 801f466:	7031      	strb	r1, [r6, #0]
 801f468:	210a      	movs	r1, #10
 801f46a:	9401      	str	r4, [sp, #4]
 801f46c:	f7e0 ff24 	bl	80002b8 <__divsi3>
 801f470:	9b01      	ldr	r3, [sp, #4]
 801f472:	0004      	movs	r4, r0
 801f474:	2b63      	cmp	r3, #99	@ 0x63
 801f476:	dcee      	bgt.n	801f456 <__exponent+0x1e>
 801f478:	1eba      	subs	r2, r7, #2
 801f47a:	1ca8      	adds	r0, r5, #2
 801f47c:	0001      	movs	r1, r0
 801f47e:	0013      	movs	r3, r2
 801f480:	3430      	adds	r4, #48	@ 0x30
 801f482:	7014      	strb	r4, [r2, #0]
 801f484:	ac02      	add	r4, sp, #8
 801f486:	3407      	adds	r4, #7
 801f488:	429c      	cmp	r4, r3
 801f48a:	d80a      	bhi.n	801f4a2 <__exponent+0x6a>
 801f48c:	2300      	movs	r3, #0
 801f48e:	42a2      	cmp	r2, r4
 801f490:	d803      	bhi.n	801f49a <__exponent+0x62>
 801f492:	3309      	adds	r3, #9
 801f494:	aa02      	add	r2, sp, #8
 801f496:	189b      	adds	r3, r3, r2
 801f498:	1bdb      	subs	r3, r3, r7
 801f49a:	18c0      	adds	r0, r0, r3
 801f49c:	1b40      	subs	r0, r0, r5
 801f49e:	b005      	add	sp, #20
 801f4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4a2:	781c      	ldrb	r4, [r3, #0]
 801f4a4:	3301      	adds	r3, #1
 801f4a6:	700c      	strb	r4, [r1, #0]
 801f4a8:	3101      	adds	r1, #1
 801f4aa:	e7eb      	b.n	801f484 <__exponent+0x4c>
 801f4ac:	2330      	movs	r3, #48	@ 0x30
 801f4ae:	18e4      	adds	r4, r4, r3
 801f4b0:	70ab      	strb	r3, [r5, #2]
 801f4b2:	1d28      	adds	r0, r5, #4
 801f4b4:	70ec      	strb	r4, [r5, #3]
 801f4b6:	e7f1      	b.n	801f49c <__exponent+0x64>

0801f4b8 <_printf_float>:
 801f4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4ba:	b097      	sub	sp, #92	@ 0x5c
 801f4bc:	000d      	movs	r5, r1
 801f4be:	920a      	str	r2, [sp, #40]	@ 0x28
 801f4c0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f4c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4c4:	9009      	str	r0, [sp, #36]	@ 0x24
 801f4c6:	f000 fe7d 	bl	80201c4 <_localeconv_r>
 801f4ca:	6803      	ldr	r3, [r0, #0]
 801f4cc:	0018      	movs	r0, r3
 801f4ce:	930d      	str	r3, [sp, #52]	@ 0x34
 801f4d0:	f7e0 fe4c 	bl	800016c <strlen>
 801f4d4:	2300      	movs	r3, #0
 801f4d6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f4d8:	9314      	str	r3, [sp, #80]	@ 0x50
 801f4da:	7e2b      	ldrb	r3, [r5, #24]
 801f4dc:	2207      	movs	r2, #7
 801f4de:	930c      	str	r3, [sp, #48]	@ 0x30
 801f4e0:	682b      	ldr	r3, [r5, #0]
 801f4e2:	930e      	str	r3, [sp, #56]	@ 0x38
 801f4e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f4e6:	6823      	ldr	r3, [r4, #0]
 801f4e8:	05c9      	lsls	r1, r1, #23
 801f4ea:	d545      	bpl.n	801f578 <_printf_float+0xc0>
 801f4ec:	189b      	adds	r3, r3, r2
 801f4ee:	4393      	bics	r3, r2
 801f4f0:	001a      	movs	r2, r3
 801f4f2:	3208      	adds	r2, #8
 801f4f4:	6022      	str	r2, [r4, #0]
 801f4f6:	2201      	movs	r2, #1
 801f4f8:	681e      	ldr	r6, [r3, #0]
 801f4fa:	685f      	ldr	r7, [r3, #4]
 801f4fc:	007b      	lsls	r3, r7, #1
 801f4fe:	085b      	lsrs	r3, r3, #1
 801f500:	9311      	str	r3, [sp, #68]	@ 0x44
 801f502:	9610      	str	r6, [sp, #64]	@ 0x40
 801f504:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f506:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f508:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f50a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f50c:	4ba7      	ldr	r3, [pc, #668]	@ (801f7ac <_printf_float+0x2f4>)
 801f50e:	4252      	negs	r2, r2
 801f510:	f7e3 fef8 	bl	8003304 <__aeabi_dcmpun>
 801f514:	2800      	cmp	r0, #0
 801f516:	d131      	bne.n	801f57c <_printf_float+0xc4>
 801f518:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f51a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f51c:	2201      	movs	r2, #1
 801f51e:	4ba3      	ldr	r3, [pc, #652]	@ (801f7ac <_printf_float+0x2f4>)
 801f520:	4252      	negs	r2, r2
 801f522:	f7e0 ffd5 	bl	80004d0 <__aeabi_dcmple>
 801f526:	2800      	cmp	r0, #0
 801f528:	d128      	bne.n	801f57c <_printf_float+0xc4>
 801f52a:	2200      	movs	r2, #0
 801f52c:	2300      	movs	r3, #0
 801f52e:	0030      	movs	r0, r6
 801f530:	0039      	movs	r1, r7
 801f532:	f7e0 ffc3 	bl	80004bc <__aeabi_dcmplt>
 801f536:	2800      	cmp	r0, #0
 801f538:	d003      	beq.n	801f542 <_printf_float+0x8a>
 801f53a:	002b      	movs	r3, r5
 801f53c:	222d      	movs	r2, #45	@ 0x2d
 801f53e:	3343      	adds	r3, #67	@ 0x43
 801f540:	701a      	strb	r2, [r3, #0]
 801f542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f544:	4f9a      	ldr	r7, [pc, #616]	@ (801f7b0 <_printf_float+0x2f8>)
 801f546:	2b47      	cmp	r3, #71	@ 0x47
 801f548:	d900      	bls.n	801f54c <_printf_float+0x94>
 801f54a:	4f9a      	ldr	r7, [pc, #616]	@ (801f7b4 <_printf_float+0x2fc>)
 801f54c:	2303      	movs	r3, #3
 801f54e:	2400      	movs	r4, #0
 801f550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f552:	612b      	str	r3, [r5, #16]
 801f554:	3301      	adds	r3, #1
 801f556:	439a      	bics	r2, r3
 801f558:	602a      	str	r2, [r5, #0]
 801f55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f55c:	0029      	movs	r1, r5
 801f55e:	9300      	str	r3, [sp, #0]
 801f560:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f564:	aa15      	add	r2, sp, #84	@ 0x54
 801f566:	f000 f9e5 	bl	801f934 <_printf_common>
 801f56a:	3001      	adds	r0, #1
 801f56c:	d000      	beq.n	801f570 <_printf_float+0xb8>
 801f56e:	e09f      	b.n	801f6b0 <_printf_float+0x1f8>
 801f570:	2001      	movs	r0, #1
 801f572:	4240      	negs	r0, r0
 801f574:	b017      	add	sp, #92	@ 0x5c
 801f576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f578:	3307      	adds	r3, #7
 801f57a:	e7b8      	b.n	801f4ee <_printf_float+0x36>
 801f57c:	0032      	movs	r2, r6
 801f57e:	003b      	movs	r3, r7
 801f580:	0030      	movs	r0, r6
 801f582:	0039      	movs	r1, r7
 801f584:	f7e3 febe 	bl	8003304 <__aeabi_dcmpun>
 801f588:	2800      	cmp	r0, #0
 801f58a:	d00b      	beq.n	801f5a4 <_printf_float+0xec>
 801f58c:	2f00      	cmp	r7, #0
 801f58e:	da03      	bge.n	801f598 <_printf_float+0xe0>
 801f590:	002b      	movs	r3, r5
 801f592:	222d      	movs	r2, #45	@ 0x2d
 801f594:	3343      	adds	r3, #67	@ 0x43
 801f596:	701a      	strb	r2, [r3, #0]
 801f598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f59a:	4f87      	ldr	r7, [pc, #540]	@ (801f7b8 <_printf_float+0x300>)
 801f59c:	2b47      	cmp	r3, #71	@ 0x47
 801f59e:	d9d5      	bls.n	801f54c <_printf_float+0x94>
 801f5a0:	4f86      	ldr	r7, [pc, #536]	@ (801f7bc <_printf_float+0x304>)
 801f5a2:	e7d3      	b.n	801f54c <_printf_float+0x94>
 801f5a4:	2220      	movs	r2, #32
 801f5a6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f5a8:	686b      	ldr	r3, [r5, #4]
 801f5aa:	4394      	bics	r4, r2
 801f5ac:	1c5a      	adds	r2, r3, #1
 801f5ae:	d146      	bne.n	801f63e <_printf_float+0x186>
 801f5b0:	3307      	adds	r3, #7
 801f5b2:	606b      	str	r3, [r5, #4]
 801f5b4:	2380      	movs	r3, #128	@ 0x80
 801f5b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f5b8:	00db      	lsls	r3, r3, #3
 801f5ba:	4313      	orrs	r3, r2
 801f5bc:	2200      	movs	r2, #0
 801f5be:	602b      	str	r3, [r5, #0]
 801f5c0:	9206      	str	r2, [sp, #24]
 801f5c2:	aa14      	add	r2, sp, #80	@ 0x50
 801f5c4:	9205      	str	r2, [sp, #20]
 801f5c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f5c8:	a90a      	add	r1, sp, #40	@ 0x28
 801f5ca:	9204      	str	r2, [sp, #16]
 801f5cc:	aa13      	add	r2, sp, #76	@ 0x4c
 801f5ce:	9203      	str	r2, [sp, #12]
 801f5d0:	2223      	movs	r2, #35	@ 0x23
 801f5d2:	1852      	adds	r2, r2, r1
 801f5d4:	9202      	str	r2, [sp, #8]
 801f5d6:	9301      	str	r3, [sp, #4]
 801f5d8:	686b      	ldr	r3, [r5, #4]
 801f5da:	0032      	movs	r2, r6
 801f5dc:	9300      	str	r3, [sp, #0]
 801f5de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f5e0:	003b      	movs	r3, r7
 801f5e2:	f7ff fec3 	bl	801f36c <__cvt>
 801f5e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f5e8:	0007      	movs	r7, r0
 801f5ea:	2c47      	cmp	r4, #71	@ 0x47
 801f5ec:	d12d      	bne.n	801f64a <_printf_float+0x192>
 801f5ee:	1cd3      	adds	r3, r2, #3
 801f5f0:	db02      	blt.n	801f5f8 <_printf_float+0x140>
 801f5f2:	686b      	ldr	r3, [r5, #4]
 801f5f4:	429a      	cmp	r2, r3
 801f5f6:	dd48      	ble.n	801f68a <_printf_float+0x1d2>
 801f5f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f5fc:	3b02      	subs	r3, #2
 801f5fe:	b2db      	uxtb	r3, r3
 801f600:	930c      	str	r3, [sp, #48]	@ 0x30
 801f602:	0028      	movs	r0, r5
 801f604:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f606:	3901      	subs	r1, #1
 801f608:	3050      	adds	r0, #80	@ 0x50
 801f60a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f60c:	f7ff ff14 	bl	801f438 <__exponent>
 801f610:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f612:	0004      	movs	r4, r0
 801f614:	1813      	adds	r3, r2, r0
 801f616:	612b      	str	r3, [r5, #16]
 801f618:	2a01      	cmp	r2, #1
 801f61a:	dc02      	bgt.n	801f622 <_printf_float+0x16a>
 801f61c:	682a      	ldr	r2, [r5, #0]
 801f61e:	07d2      	lsls	r2, r2, #31
 801f620:	d501      	bpl.n	801f626 <_printf_float+0x16e>
 801f622:	3301      	adds	r3, #1
 801f624:	612b      	str	r3, [r5, #16]
 801f626:	2323      	movs	r3, #35	@ 0x23
 801f628:	aa0a      	add	r2, sp, #40	@ 0x28
 801f62a:	189b      	adds	r3, r3, r2
 801f62c:	781b      	ldrb	r3, [r3, #0]
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d100      	bne.n	801f634 <_printf_float+0x17c>
 801f632:	e792      	b.n	801f55a <_printf_float+0xa2>
 801f634:	002b      	movs	r3, r5
 801f636:	222d      	movs	r2, #45	@ 0x2d
 801f638:	3343      	adds	r3, #67	@ 0x43
 801f63a:	701a      	strb	r2, [r3, #0]
 801f63c:	e78d      	b.n	801f55a <_printf_float+0xa2>
 801f63e:	2c47      	cmp	r4, #71	@ 0x47
 801f640:	d1b8      	bne.n	801f5b4 <_printf_float+0xfc>
 801f642:	2b00      	cmp	r3, #0
 801f644:	d1b6      	bne.n	801f5b4 <_printf_float+0xfc>
 801f646:	3301      	adds	r3, #1
 801f648:	e7b3      	b.n	801f5b2 <_printf_float+0xfa>
 801f64a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f64c:	0011      	movs	r1, r2
 801f64e:	2b65      	cmp	r3, #101	@ 0x65
 801f650:	d9d7      	bls.n	801f602 <_printf_float+0x14a>
 801f652:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f654:	2b66      	cmp	r3, #102	@ 0x66
 801f656:	d11a      	bne.n	801f68e <_printf_float+0x1d6>
 801f658:	686b      	ldr	r3, [r5, #4]
 801f65a:	2a00      	cmp	r2, #0
 801f65c:	dd09      	ble.n	801f672 <_printf_float+0x1ba>
 801f65e:	612a      	str	r2, [r5, #16]
 801f660:	2b00      	cmp	r3, #0
 801f662:	d102      	bne.n	801f66a <_printf_float+0x1b2>
 801f664:	6829      	ldr	r1, [r5, #0]
 801f666:	07c9      	lsls	r1, r1, #31
 801f668:	d50b      	bpl.n	801f682 <_printf_float+0x1ca>
 801f66a:	3301      	adds	r3, #1
 801f66c:	189b      	adds	r3, r3, r2
 801f66e:	612b      	str	r3, [r5, #16]
 801f670:	e007      	b.n	801f682 <_printf_float+0x1ca>
 801f672:	2b00      	cmp	r3, #0
 801f674:	d103      	bne.n	801f67e <_printf_float+0x1c6>
 801f676:	2201      	movs	r2, #1
 801f678:	6829      	ldr	r1, [r5, #0]
 801f67a:	4211      	tst	r1, r2
 801f67c:	d000      	beq.n	801f680 <_printf_float+0x1c8>
 801f67e:	1c9a      	adds	r2, r3, #2
 801f680:	612a      	str	r2, [r5, #16]
 801f682:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f684:	2400      	movs	r4, #0
 801f686:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f688:	e7cd      	b.n	801f626 <_printf_float+0x16e>
 801f68a:	2367      	movs	r3, #103	@ 0x67
 801f68c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f68e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f690:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f692:	4299      	cmp	r1, r3
 801f694:	db06      	blt.n	801f6a4 <_printf_float+0x1ec>
 801f696:	682b      	ldr	r3, [r5, #0]
 801f698:	6129      	str	r1, [r5, #16]
 801f69a:	07db      	lsls	r3, r3, #31
 801f69c:	d5f1      	bpl.n	801f682 <_printf_float+0x1ca>
 801f69e:	3101      	adds	r1, #1
 801f6a0:	6129      	str	r1, [r5, #16]
 801f6a2:	e7ee      	b.n	801f682 <_printf_float+0x1ca>
 801f6a4:	2201      	movs	r2, #1
 801f6a6:	2900      	cmp	r1, #0
 801f6a8:	dce0      	bgt.n	801f66c <_printf_float+0x1b4>
 801f6aa:	1892      	adds	r2, r2, r2
 801f6ac:	1a52      	subs	r2, r2, r1
 801f6ae:	e7dd      	b.n	801f66c <_printf_float+0x1b4>
 801f6b0:	682a      	ldr	r2, [r5, #0]
 801f6b2:	0553      	lsls	r3, r2, #21
 801f6b4:	d408      	bmi.n	801f6c8 <_printf_float+0x210>
 801f6b6:	692b      	ldr	r3, [r5, #16]
 801f6b8:	003a      	movs	r2, r7
 801f6ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f6bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f6c0:	47a0      	blx	r4
 801f6c2:	3001      	adds	r0, #1
 801f6c4:	d129      	bne.n	801f71a <_printf_float+0x262>
 801f6c6:	e753      	b.n	801f570 <_printf_float+0xb8>
 801f6c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6ca:	2b65      	cmp	r3, #101	@ 0x65
 801f6cc:	d800      	bhi.n	801f6d0 <_printf_float+0x218>
 801f6ce:	e0da      	b.n	801f886 <_printf_float+0x3ce>
 801f6d0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f6d2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f6d4:	2200      	movs	r2, #0
 801f6d6:	2300      	movs	r3, #0
 801f6d8:	f7e0 feea 	bl	80004b0 <__aeabi_dcmpeq>
 801f6dc:	2800      	cmp	r0, #0
 801f6de:	d033      	beq.n	801f748 <_printf_float+0x290>
 801f6e0:	2301      	movs	r3, #1
 801f6e2:	4a37      	ldr	r2, [pc, #220]	@ (801f7c0 <_printf_float+0x308>)
 801f6e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f6e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f6ea:	47a0      	blx	r4
 801f6ec:	3001      	adds	r0, #1
 801f6ee:	d100      	bne.n	801f6f2 <_printf_float+0x23a>
 801f6f0:	e73e      	b.n	801f570 <_printf_float+0xb8>
 801f6f2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f6f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6f6:	42b3      	cmp	r3, r6
 801f6f8:	db02      	blt.n	801f700 <_printf_float+0x248>
 801f6fa:	682b      	ldr	r3, [r5, #0]
 801f6fc:	07db      	lsls	r3, r3, #31
 801f6fe:	d50c      	bpl.n	801f71a <_printf_float+0x262>
 801f700:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f706:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f708:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f70a:	47a0      	blx	r4
 801f70c:	2400      	movs	r4, #0
 801f70e:	3001      	adds	r0, #1
 801f710:	d100      	bne.n	801f714 <_printf_float+0x25c>
 801f712:	e72d      	b.n	801f570 <_printf_float+0xb8>
 801f714:	1e73      	subs	r3, r6, #1
 801f716:	42a3      	cmp	r3, r4
 801f718:	dc0a      	bgt.n	801f730 <_printf_float+0x278>
 801f71a:	682b      	ldr	r3, [r5, #0]
 801f71c:	079b      	lsls	r3, r3, #30
 801f71e:	d500      	bpl.n	801f722 <_printf_float+0x26a>
 801f720:	e105      	b.n	801f92e <_printf_float+0x476>
 801f722:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f724:	68e8      	ldr	r0, [r5, #12]
 801f726:	4298      	cmp	r0, r3
 801f728:	db00      	blt.n	801f72c <_printf_float+0x274>
 801f72a:	e723      	b.n	801f574 <_printf_float+0xbc>
 801f72c:	0018      	movs	r0, r3
 801f72e:	e721      	b.n	801f574 <_printf_float+0xbc>
 801f730:	002a      	movs	r2, r5
 801f732:	2301      	movs	r3, #1
 801f734:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f738:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f73a:	321a      	adds	r2, #26
 801f73c:	47b8      	blx	r7
 801f73e:	3001      	adds	r0, #1
 801f740:	d100      	bne.n	801f744 <_printf_float+0x28c>
 801f742:	e715      	b.n	801f570 <_printf_float+0xb8>
 801f744:	3401      	adds	r4, #1
 801f746:	e7e5      	b.n	801f714 <_printf_float+0x25c>
 801f748:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	dc3a      	bgt.n	801f7c4 <_printf_float+0x30c>
 801f74e:	2301      	movs	r3, #1
 801f750:	4a1b      	ldr	r2, [pc, #108]	@ (801f7c0 <_printf_float+0x308>)
 801f752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f754:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f756:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f758:	47a0      	blx	r4
 801f75a:	3001      	adds	r0, #1
 801f75c:	d100      	bne.n	801f760 <_printf_float+0x2a8>
 801f75e:	e707      	b.n	801f570 <_printf_float+0xb8>
 801f760:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f762:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f764:	4333      	orrs	r3, r6
 801f766:	d102      	bne.n	801f76e <_printf_float+0x2b6>
 801f768:	682b      	ldr	r3, [r5, #0]
 801f76a:	07db      	lsls	r3, r3, #31
 801f76c:	d5d5      	bpl.n	801f71a <_printf_float+0x262>
 801f76e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f774:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f776:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f778:	47a0      	blx	r4
 801f77a:	2300      	movs	r3, #0
 801f77c:	3001      	adds	r0, #1
 801f77e:	d100      	bne.n	801f782 <_printf_float+0x2ca>
 801f780:	e6f6      	b.n	801f570 <_printf_float+0xb8>
 801f782:	930c      	str	r3, [sp, #48]	@ 0x30
 801f784:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f786:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f788:	425b      	negs	r3, r3
 801f78a:	4293      	cmp	r3, r2
 801f78c:	dc01      	bgt.n	801f792 <_printf_float+0x2da>
 801f78e:	0033      	movs	r3, r6
 801f790:	e792      	b.n	801f6b8 <_printf_float+0x200>
 801f792:	002a      	movs	r2, r5
 801f794:	2301      	movs	r3, #1
 801f796:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f798:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f79a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f79c:	321a      	adds	r2, #26
 801f79e:	47a0      	blx	r4
 801f7a0:	3001      	adds	r0, #1
 801f7a2:	d100      	bne.n	801f7a6 <_printf_float+0x2ee>
 801f7a4:	e6e4      	b.n	801f570 <_printf_float+0xb8>
 801f7a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7a8:	3301      	adds	r3, #1
 801f7aa:	e7ea      	b.n	801f782 <_printf_float+0x2ca>
 801f7ac:	7fefffff 	.word	0x7fefffff
 801f7b0:	08025c29 	.word	0x08025c29
 801f7b4:	08025c2d 	.word	0x08025c2d
 801f7b8:	08025c31 	.word	0x08025c31
 801f7bc:	08025c35 	.word	0x08025c35
 801f7c0:	08025c39 	.word	0x08025c39
 801f7c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f7c6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f7c8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7ca:	429e      	cmp	r6, r3
 801f7cc:	dd00      	ble.n	801f7d0 <_printf_float+0x318>
 801f7ce:	001e      	movs	r6, r3
 801f7d0:	2e00      	cmp	r6, #0
 801f7d2:	dc31      	bgt.n	801f838 <_printf_float+0x380>
 801f7d4:	43f3      	mvns	r3, r6
 801f7d6:	2400      	movs	r4, #0
 801f7d8:	17db      	asrs	r3, r3, #31
 801f7da:	4033      	ands	r3, r6
 801f7dc:	930e      	str	r3, [sp, #56]	@ 0x38
 801f7de:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f7e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7e2:	1af3      	subs	r3, r6, r3
 801f7e4:	42a3      	cmp	r3, r4
 801f7e6:	dc30      	bgt.n	801f84a <_printf_float+0x392>
 801f7e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f7ec:	429a      	cmp	r2, r3
 801f7ee:	dc38      	bgt.n	801f862 <_printf_float+0x3aa>
 801f7f0:	682b      	ldr	r3, [r5, #0]
 801f7f2:	07db      	lsls	r3, r3, #31
 801f7f4:	d435      	bmi.n	801f862 <_printf_float+0x3aa>
 801f7f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f7f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f7fc:	1b9b      	subs	r3, r3, r6
 801f7fe:	1b14      	subs	r4, r2, r4
 801f800:	429c      	cmp	r4, r3
 801f802:	dd00      	ble.n	801f806 <_printf_float+0x34e>
 801f804:	001c      	movs	r4, r3
 801f806:	2c00      	cmp	r4, #0
 801f808:	dc34      	bgt.n	801f874 <_printf_float+0x3bc>
 801f80a:	43e3      	mvns	r3, r4
 801f80c:	2600      	movs	r6, #0
 801f80e:	17db      	asrs	r3, r3, #31
 801f810:	401c      	ands	r4, r3
 801f812:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f814:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f816:	1ad3      	subs	r3, r2, r3
 801f818:	1b1b      	subs	r3, r3, r4
 801f81a:	42b3      	cmp	r3, r6
 801f81c:	dc00      	bgt.n	801f820 <_printf_float+0x368>
 801f81e:	e77c      	b.n	801f71a <_printf_float+0x262>
 801f820:	002a      	movs	r2, r5
 801f822:	2301      	movs	r3, #1
 801f824:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f828:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f82a:	321a      	adds	r2, #26
 801f82c:	47b8      	blx	r7
 801f82e:	3001      	adds	r0, #1
 801f830:	d100      	bne.n	801f834 <_printf_float+0x37c>
 801f832:	e69d      	b.n	801f570 <_printf_float+0xb8>
 801f834:	3601      	adds	r6, #1
 801f836:	e7ec      	b.n	801f812 <_printf_float+0x35a>
 801f838:	0033      	movs	r3, r6
 801f83a:	003a      	movs	r2, r7
 801f83c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f840:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f842:	47a0      	blx	r4
 801f844:	3001      	adds	r0, #1
 801f846:	d1c5      	bne.n	801f7d4 <_printf_float+0x31c>
 801f848:	e692      	b.n	801f570 <_printf_float+0xb8>
 801f84a:	002a      	movs	r2, r5
 801f84c:	2301      	movs	r3, #1
 801f84e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f850:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f852:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f854:	321a      	adds	r2, #26
 801f856:	47b0      	blx	r6
 801f858:	3001      	adds	r0, #1
 801f85a:	d100      	bne.n	801f85e <_printf_float+0x3a6>
 801f85c:	e688      	b.n	801f570 <_printf_float+0xb8>
 801f85e:	3401      	adds	r4, #1
 801f860:	e7bd      	b.n	801f7de <_printf_float+0x326>
 801f862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f864:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f866:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f868:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f86a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f86c:	47a0      	blx	r4
 801f86e:	3001      	adds	r0, #1
 801f870:	d1c1      	bne.n	801f7f6 <_printf_float+0x33e>
 801f872:	e67d      	b.n	801f570 <_printf_float+0xb8>
 801f874:	19ba      	adds	r2, r7, r6
 801f876:	0023      	movs	r3, r4
 801f878:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f87a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f87c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f87e:	47b0      	blx	r6
 801f880:	3001      	adds	r0, #1
 801f882:	d1c2      	bne.n	801f80a <_printf_float+0x352>
 801f884:	e674      	b.n	801f570 <_printf_float+0xb8>
 801f886:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f888:	930c      	str	r3, [sp, #48]	@ 0x30
 801f88a:	2b01      	cmp	r3, #1
 801f88c:	dc02      	bgt.n	801f894 <_printf_float+0x3dc>
 801f88e:	2301      	movs	r3, #1
 801f890:	421a      	tst	r2, r3
 801f892:	d039      	beq.n	801f908 <_printf_float+0x450>
 801f894:	2301      	movs	r3, #1
 801f896:	003a      	movs	r2, r7
 801f898:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f89c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f89e:	47b0      	blx	r6
 801f8a0:	3001      	adds	r0, #1
 801f8a2:	d100      	bne.n	801f8a6 <_printf_float+0x3ee>
 801f8a4:	e664      	b.n	801f570 <_printf_float+0xb8>
 801f8a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f8aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f8b0:	47b0      	blx	r6
 801f8b2:	3001      	adds	r0, #1
 801f8b4:	d100      	bne.n	801f8b8 <_printf_float+0x400>
 801f8b6:	e65b      	b.n	801f570 <_printf_float+0xb8>
 801f8b8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f8ba:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f8bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8be:	2200      	movs	r2, #0
 801f8c0:	3b01      	subs	r3, #1
 801f8c2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8c4:	2300      	movs	r3, #0
 801f8c6:	f7e0 fdf3 	bl	80004b0 <__aeabi_dcmpeq>
 801f8ca:	2800      	cmp	r0, #0
 801f8cc:	d11a      	bne.n	801f904 <_printf_float+0x44c>
 801f8ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8d0:	1c7a      	adds	r2, r7, #1
 801f8d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f8d8:	47b0      	blx	r6
 801f8da:	3001      	adds	r0, #1
 801f8dc:	d10e      	bne.n	801f8fc <_printf_float+0x444>
 801f8de:	e647      	b.n	801f570 <_printf_float+0xb8>
 801f8e0:	002a      	movs	r2, r5
 801f8e2:	2301      	movs	r3, #1
 801f8e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f8ea:	321a      	adds	r2, #26
 801f8ec:	47b8      	blx	r7
 801f8ee:	3001      	adds	r0, #1
 801f8f0:	d100      	bne.n	801f8f4 <_printf_float+0x43c>
 801f8f2:	e63d      	b.n	801f570 <_printf_float+0xb8>
 801f8f4:	3601      	adds	r6, #1
 801f8f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8f8:	429e      	cmp	r6, r3
 801f8fa:	dbf1      	blt.n	801f8e0 <_printf_float+0x428>
 801f8fc:	002a      	movs	r2, r5
 801f8fe:	0023      	movs	r3, r4
 801f900:	3250      	adds	r2, #80	@ 0x50
 801f902:	e6da      	b.n	801f6ba <_printf_float+0x202>
 801f904:	2600      	movs	r6, #0
 801f906:	e7f6      	b.n	801f8f6 <_printf_float+0x43e>
 801f908:	003a      	movs	r2, r7
 801f90a:	e7e2      	b.n	801f8d2 <_printf_float+0x41a>
 801f90c:	002a      	movs	r2, r5
 801f90e:	2301      	movs	r3, #1
 801f910:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f914:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f916:	3219      	adds	r2, #25
 801f918:	47b0      	blx	r6
 801f91a:	3001      	adds	r0, #1
 801f91c:	d100      	bne.n	801f920 <_printf_float+0x468>
 801f91e:	e627      	b.n	801f570 <_printf_float+0xb8>
 801f920:	3401      	adds	r4, #1
 801f922:	68eb      	ldr	r3, [r5, #12]
 801f924:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f926:	1a9b      	subs	r3, r3, r2
 801f928:	42a3      	cmp	r3, r4
 801f92a:	dcef      	bgt.n	801f90c <_printf_float+0x454>
 801f92c:	e6f9      	b.n	801f722 <_printf_float+0x26a>
 801f92e:	2400      	movs	r4, #0
 801f930:	e7f7      	b.n	801f922 <_printf_float+0x46a>
 801f932:	46c0      	nop			@ (mov r8, r8)

0801f934 <_printf_common>:
 801f934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f936:	0016      	movs	r6, r2
 801f938:	9301      	str	r3, [sp, #4]
 801f93a:	688a      	ldr	r2, [r1, #8]
 801f93c:	690b      	ldr	r3, [r1, #16]
 801f93e:	000c      	movs	r4, r1
 801f940:	9000      	str	r0, [sp, #0]
 801f942:	4293      	cmp	r3, r2
 801f944:	da00      	bge.n	801f948 <_printf_common+0x14>
 801f946:	0013      	movs	r3, r2
 801f948:	0022      	movs	r2, r4
 801f94a:	6033      	str	r3, [r6, #0]
 801f94c:	3243      	adds	r2, #67	@ 0x43
 801f94e:	7812      	ldrb	r2, [r2, #0]
 801f950:	2a00      	cmp	r2, #0
 801f952:	d001      	beq.n	801f958 <_printf_common+0x24>
 801f954:	3301      	adds	r3, #1
 801f956:	6033      	str	r3, [r6, #0]
 801f958:	6823      	ldr	r3, [r4, #0]
 801f95a:	069b      	lsls	r3, r3, #26
 801f95c:	d502      	bpl.n	801f964 <_printf_common+0x30>
 801f95e:	6833      	ldr	r3, [r6, #0]
 801f960:	3302      	adds	r3, #2
 801f962:	6033      	str	r3, [r6, #0]
 801f964:	6822      	ldr	r2, [r4, #0]
 801f966:	2306      	movs	r3, #6
 801f968:	0015      	movs	r5, r2
 801f96a:	401d      	ands	r5, r3
 801f96c:	421a      	tst	r2, r3
 801f96e:	d027      	beq.n	801f9c0 <_printf_common+0x8c>
 801f970:	0023      	movs	r3, r4
 801f972:	3343      	adds	r3, #67	@ 0x43
 801f974:	781b      	ldrb	r3, [r3, #0]
 801f976:	1e5a      	subs	r2, r3, #1
 801f978:	4193      	sbcs	r3, r2
 801f97a:	6822      	ldr	r2, [r4, #0]
 801f97c:	0692      	lsls	r2, r2, #26
 801f97e:	d430      	bmi.n	801f9e2 <_printf_common+0xae>
 801f980:	0022      	movs	r2, r4
 801f982:	9901      	ldr	r1, [sp, #4]
 801f984:	9800      	ldr	r0, [sp, #0]
 801f986:	9d08      	ldr	r5, [sp, #32]
 801f988:	3243      	adds	r2, #67	@ 0x43
 801f98a:	47a8      	blx	r5
 801f98c:	3001      	adds	r0, #1
 801f98e:	d025      	beq.n	801f9dc <_printf_common+0xa8>
 801f990:	2206      	movs	r2, #6
 801f992:	6823      	ldr	r3, [r4, #0]
 801f994:	2500      	movs	r5, #0
 801f996:	4013      	ands	r3, r2
 801f998:	2b04      	cmp	r3, #4
 801f99a:	d105      	bne.n	801f9a8 <_printf_common+0x74>
 801f99c:	6833      	ldr	r3, [r6, #0]
 801f99e:	68e5      	ldr	r5, [r4, #12]
 801f9a0:	1aed      	subs	r5, r5, r3
 801f9a2:	43eb      	mvns	r3, r5
 801f9a4:	17db      	asrs	r3, r3, #31
 801f9a6:	401d      	ands	r5, r3
 801f9a8:	68a3      	ldr	r3, [r4, #8]
 801f9aa:	6922      	ldr	r2, [r4, #16]
 801f9ac:	4293      	cmp	r3, r2
 801f9ae:	dd01      	ble.n	801f9b4 <_printf_common+0x80>
 801f9b0:	1a9b      	subs	r3, r3, r2
 801f9b2:	18ed      	adds	r5, r5, r3
 801f9b4:	2600      	movs	r6, #0
 801f9b6:	42b5      	cmp	r5, r6
 801f9b8:	d120      	bne.n	801f9fc <_printf_common+0xc8>
 801f9ba:	2000      	movs	r0, #0
 801f9bc:	e010      	b.n	801f9e0 <_printf_common+0xac>
 801f9be:	3501      	adds	r5, #1
 801f9c0:	68e3      	ldr	r3, [r4, #12]
 801f9c2:	6832      	ldr	r2, [r6, #0]
 801f9c4:	1a9b      	subs	r3, r3, r2
 801f9c6:	42ab      	cmp	r3, r5
 801f9c8:	ddd2      	ble.n	801f970 <_printf_common+0x3c>
 801f9ca:	0022      	movs	r2, r4
 801f9cc:	2301      	movs	r3, #1
 801f9ce:	9901      	ldr	r1, [sp, #4]
 801f9d0:	9800      	ldr	r0, [sp, #0]
 801f9d2:	9f08      	ldr	r7, [sp, #32]
 801f9d4:	3219      	adds	r2, #25
 801f9d6:	47b8      	blx	r7
 801f9d8:	3001      	adds	r0, #1
 801f9da:	d1f0      	bne.n	801f9be <_printf_common+0x8a>
 801f9dc:	2001      	movs	r0, #1
 801f9de:	4240      	negs	r0, r0
 801f9e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f9e2:	2030      	movs	r0, #48	@ 0x30
 801f9e4:	18e1      	adds	r1, r4, r3
 801f9e6:	3143      	adds	r1, #67	@ 0x43
 801f9e8:	7008      	strb	r0, [r1, #0]
 801f9ea:	0021      	movs	r1, r4
 801f9ec:	1c5a      	adds	r2, r3, #1
 801f9ee:	3145      	adds	r1, #69	@ 0x45
 801f9f0:	7809      	ldrb	r1, [r1, #0]
 801f9f2:	18a2      	adds	r2, r4, r2
 801f9f4:	3243      	adds	r2, #67	@ 0x43
 801f9f6:	3302      	adds	r3, #2
 801f9f8:	7011      	strb	r1, [r2, #0]
 801f9fa:	e7c1      	b.n	801f980 <_printf_common+0x4c>
 801f9fc:	0022      	movs	r2, r4
 801f9fe:	2301      	movs	r3, #1
 801fa00:	9901      	ldr	r1, [sp, #4]
 801fa02:	9800      	ldr	r0, [sp, #0]
 801fa04:	9f08      	ldr	r7, [sp, #32]
 801fa06:	321a      	adds	r2, #26
 801fa08:	47b8      	blx	r7
 801fa0a:	3001      	adds	r0, #1
 801fa0c:	d0e6      	beq.n	801f9dc <_printf_common+0xa8>
 801fa0e:	3601      	adds	r6, #1
 801fa10:	e7d1      	b.n	801f9b6 <_printf_common+0x82>
	...

0801fa14 <_printf_i>:
 801fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa16:	b08b      	sub	sp, #44	@ 0x2c
 801fa18:	9206      	str	r2, [sp, #24]
 801fa1a:	000a      	movs	r2, r1
 801fa1c:	3243      	adds	r2, #67	@ 0x43
 801fa1e:	9307      	str	r3, [sp, #28]
 801fa20:	9005      	str	r0, [sp, #20]
 801fa22:	9203      	str	r2, [sp, #12]
 801fa24:	7e0a      	ldrb	r2, [r1, #24]
 801fa26:	000c      	movs	r4, r1
 801fa28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa2a:	2a78      	cmp	r2, #120	@ 0x78
 801fa2c:	d809      	bhi.n	801fa42 <_printf_i+0x2e>
 801fa2e:	2a62      	cmp	r2, #98	@ 0x62
 801fa30:	d80b      	bhi.n	801fa4a <_printf_i+0x36>
 801fa32:	2a00      	cmp	r2, #0
 801fa34:	d100      	bne.n	801fa38 <_printf_i+0x24>
 801fa36:	e0bc      	b.n	801fbb2 <_printf_i+0x19e>
 801fa38:	497b      	ldr	r1, [pc, #492]	@ (801fc28 <_printf_i+0x214>)
 801fa3a:	9104      	str	r1, [sp, #16]
 801fa3c:	2a58      	cmp	r2, #88	@ 0x58
 801fa3e:	d100      	bne.n	801fa42 <_printf_i+0x2e>
 801fa40:	e090      	b.n	801fb64 <_printf_i+0x150>
 801fa42:	0025      	movs	r5, r4
 801fa44:	3542      	adds	r5, #66	@ 0x42
 801fa46:	702a      	strb	r2, [r5, #0]
 801fa48:	e022      	b.n	801fa90 <_printf_i+0x7c>
 801fa4a:	0010      	movs	r0, r2
 801fa4c:	3863      	subs	r0, #99	@ 0x63
 801fa4e:	2815      	cmp	r0, #21
 801fa50:	d8f7      	bhi.n	801fa42 <_printf_i+0x2e>
 801fa52:	f7e0 fb9d 	bl	8000190 <__gnu_thumb1_case_shi>
 801fa56:	0016      	.short	0x0016
 801fa58:	fff6001f 	.word	0xfff6001f
 801fa5c:	fff6fff6 	.word	0xfff6fff6
 801fa60:	001ffff6 	.word	0x001ffff6
 801fa64:	fff6fff6 	.word	0xfff6fff6
 801fa68:	fff6fff6 	.word	0xfff6fff6
 801fa6c:	003600a1 	.word	0x003600a1
 801fa70:	fff60080 	.word	0xfff60080
 801fa74:	00b2fff6 	.word	0x00b2fff6
 801fa78:	0036fff6 	.word	0x0036fff6
 801fa7c:	fff6fff6 	.word	0xfff6fff6
 801fa80:	0084      	.short	0x0084
 801fa82:	0025      	movs	r5, r4
 801fa84:	681a      	ldr	r2, [r3, #0]
 801fa86:	3542      	adds	r5, #66	@ 0x42
 801fa88:	1d11      	adds	r1, r2, #4
 801fa8a:	6019      	str	r1, [r3, #0]
 801fa8c:	6813      	ldr	r3, [r2, #0]
 801fa8e:	702b      	strb	r3, [r5, #0]
 801fa90:	2301      	movs	r3, #1
 801fa92:	e0a0      	b.n	801fbd6 <_printf_i+0x1c2>
 801fa94:	6818      	ldr	r0, [r3, #0]
 801fa96:	6809      	ldr	r1, [r1, #0]
 801fa98:	1d02      	adds	r2, r0, #4
 801fa9a:	060d      	lsls	r5, r1, #24
 801fa9c:	d50b      	bpl.n	801fab6 <_printf_i+0xa2>
 801fa9e:	6806      	ldr	r6, [r0, #0]
 801faa0:	601a      	str	r2, [r3, #0]
 801faa2:	2e00      	cmp	r6, #0
 801faa4:	da03      	bge.n	801faae <_printf_i+0x9a>
 801faa6:	232d      	movs	r3, #45	@ 0x2d
 801faa8:	9a03      	ldr	r2, [sp, #12]
 801faaa:	4276      	negs	r6, r6
 801faac:	7013      	strb	r3, [r2, #0]
 801faae:	4b5e      	ldr	r3, [pc, #376]	@ (801fc28 <_printf_i+0x214>)
 801fab0:	270a      	movs	r7, #10
 801fab2:	9304      	str	r3, [sp, #16]
 801fab4:	e018      	b.n	801fae8 <_printf_i+0xd4>
 801fab6:	6806      	ldr	r6, [r0, #0]
 801fab8:	601a      	str	r2, [r3, #0]
 801faba:	0649      	lsls	r1, r1, #25
 801fabc:	d5f1      	bpl.n	801faa2 <_printf_i+0x8e>
 801fabe:	b236      	sxth	r6, r6
 801fac0:	e7ef      	b.n	801faa2 <_printf_i+0x8e>
 801fac2:	6808      	ldr	r0, [r1, #0]
 801fac4:	6819      	ldr	r1, [r3, #0]
 801fac6:	c940      	ldmia	r1!, {r6}
 801fac8:	0605      	lsls	r5, r0, #24
 801faca:	d402      	bmi.n	801fad2 <_printf_i+0xbe>
 801facc:	0640      	lsls	r0, r0, #25
 801face:	d500      	bpl.n	801fad2 <_printf_i+0xbe>
 801fad0:	b2b6      	uxth	r6, r6
 801fad2:	6019      	str	r1, [r3, #0]
 801fad4:	4b54      	ldr	r3, [pc, #336]	@ (801fc28 <_printf_i+0x214>)
 801fad6:	270a      	movs	r7, #10
 801fad8:	9304      	str	r3, [sp, #16]
 801fada:	2a6f      	cmp	r2, #111	@ 0x6f
 801fadc:	d100      	bne.n	801fae0 <_printf_i+0xcc>
 801fade:	3f02      	subs	r7, #2
 801fae0:	0023      	movs	r3, r4
 801fae2:	2200      	movs	r2, #0
 801fae4:	3343      	adds	r3, #67	@ 0x43
 801fae6:	701a      	strb	r2, [r3, #0]
 801fae8:	6863      	ldr	r3, [r4, #4]
 801faea:	60a3      	str	r3, [r4, #8]
 801faec:	2b00      	cmp	r3, #0
 801faee:	db03      	blt.n	801faf8 <_printf_i+0xe4>
 801faf0:	2104      	movs	r1, #4
 801faf2:	6822      	ldr	r2, [r4, #0]
 801faf4:	438a      	bics	r2, r1
 801faf6:	6022      	str	r2, [r4, #0]
 801faf8:	2e00      	cmp	r6, #0
 801fafa:	d102      	bne.n	801fb02 <_printf_i+0xee>
 801fafc:	9d03      	ldr	r5, [sp, #12]
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	d00c      	beq.n	801fb1c <_printf_i+0x108>
 801fb02:	9d03      	ldr	r5, [sp, #12]
 801fb04:	0030      	movs	r0, r6
 801fb06:	0039      	movs	r1, r7
 801fb08:	f7e0 fbd2 	bl	80002b0 <__aeabi_uidivmod>
 801fb0c:	9b04      	ldr	r3, [sp, #16]
 801fb0e:	3d01      	subs	r5, #1
 801fb10:	5c5b      	ldrb	r3, [r3, r1]
 801fb12:	702b      	strb	r3, [r5, #0]
 801fb14:	0033      	movs	r3, r6
 801fb16:	0006      	movs	r6, r0
 801fb18:	429f      	cmp	r7, r3
 801fb1a:	d9f3      	bls.n	801fb04 <_printf_i+0xf0>
 801fb1c:	2f08      	cmp	r7, #8
 801fb1e:	d109      	bne.n	801fb34 <_printf_i+0x120>
 801fb20:	6823      	ldr	r3, [r4, #0]
 801fb22:	07db      	lsls	r3, r3, #31
 801fb24:	d506      	bpl.n	801fb34 <_printf_i+0x120>
 801fb26:	6862      	ldr	r2, [r4, #4]
 801fb28:	6923      	ldr	r3, [r4, #16]
 801fb2a:	429a      	cmp	r2, r3
 801fb2c:	dc02      	bgt.n	801fb34 <_printf_i+0x120>
 801fb2e:	2330      	movs	r3, #48	@ 0x30
 801fb30:	3d01      	subs	r5, #1
 801fb32:	702b      	strb	r3, [r5, #0]
 801fb34:	9b03      	ldr	r3, [sp, #12]
 801fb36:	1b5b      	subs	r3, r3, r5
 801fb38:	6123      	str	r3, [r4, #16]
 801fb3a:	9b07      	ldr	r3, [sp, #28]
 801fb3c:	0021      	movs	r1, r4
 801fb3e:	9300      	str	r3, [sp, #0]
 801fb40:	9805      	ldr	r0, [sp, #20]
 801fb42:	9b06      	ldr	r3, [sp, #24]
 801fb44:	aa09      	add	r2, sp, #36	@ 0x24
 801fb46:	f7ff fef5 	bl	801f934 <_printf_common>
 801fb4a:	3001      	adds	r0, #1
 801fb4c:	d148      	bne.n	801fbe0 <_printf_i+0x1cc>
 801fb4e:	2001      	movs	r0, #1
 801fb50:	4240      	negs	r0, r0
 801fb52:	b00b      	add	sp, #44	@ 0x2c
 801fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb56:	2220      	movs	r2, #32
 801fb58:	6809      	ldr	r1, [r1, #0]
 801fb5a:	430a      	orrs	r2, r1
 801fb5c:	6022      	str	r2, [r4, #0]
 801fb5e:	2278      	movs	r2, #120	@ 0x78
 801fb60:	4932      	ldr	r1, [pc, #200]	@ (801fc2c <_printf_i+0x218>)
 801fb62:	9104      	str	r1, [sp, #16]
 801fb64:	0021      	movs	r1, r4
 801fb66:	3145      	adds	r1, #69	@ 0x45
 801fb68:	700a      	strb	r2, [r1, #0]
 801fb6a:	6819      	ldr	r1, [r3, #0]
 801fb6c:	6822      	ldr	r2, [r4, #0]
 801fb6e:	c940      	ldmia	r1!, {r6}
 801fb70:	0610      	lsls	r0, r2, #24
 801fb72:	d402      	bmi.n	801fb7a <_printf_i+0x166>
 801fb74:	0650      	lsls	r0, r2, #25
 801fb76:	d500      	bpl.n	801fb7a <_printf_i+0x166>
 801fb78:	b2b6      	uxth	r6, r6
 801fb7a:	6019      	str	r1, [r3, #0]
 801fb7c:	07d3      	lsls	r3, r2, #31
 801fb7e:	d502      	bpl.n	801fb86 <_printf_i+0x172>
 801fb80:	2320      	movs	r3, #32
 801fb82:	4313      	orrs	r3, r2
 801fb84:	6023      	str	r3, [r4, #0]
 801fb86:	2e00      	cmp	r6, #0
 801fb88:	d001      	beq.n	801fb8e <_printf_i+0x17a>
 801fb8a:	2710      	movs	r7, #16
 801fb8c:	e7a8      	b.n	801fae0 <_printf_i+0xcc>
 801fb8e:	2220      	movs	r2, #32
 801fb90:	6823      	ldr	r3, [r4, #0]
 801fb92:	4393      	bics	r3, r2
 801fb94:	6023      	str	r3, [r4, #0]
 801fb96:	e7f8      	b.n	801fb8a <_printf_i+0x176>
 801fb98:	681a      	ldr	r2, [r3, #0]
 801fb9a:	680d      	ldr	r5, [r1, #0]
 801fb9c:	1d10      	adds	r0, r2, #4
 801fb9e:	6949      	ldr	r1, [r1, #20]
 801fba0:	6018      	str	r0, [r3, #0]
 801fba2:	6813      	ldr	r3, [r2, #0]
 801fba4:	062e      	lsls	r6, r5, #24
 801fba6:	d501      	bpl.n	801fbac <_printf_i+0x198>
 801fba8:	6019      	str	r1, [r3, #0]
 801fbaa:	e002      	b.n	801fbb2 <_printf_i+0x19e>
 801fbac:	066d      	lsls	r5, r5, #25
 801fbae:	d5fb      	bpl.n	801fba8 <_printf_i+0x194>
 801fbb0:	8019      	strh	r1, [r3, #0]
 801fbb2:	2300      	movs	r3, #0
 801fbb4:	9d03      	ldr	r5, [sp, #12]
 801fbb6:	6123      	str	r3, [r4, #16]
 801fbb8:	e7bf      	b.n	801fb3a <_printf_i+0x126>
 801fbba:	681a      	ldr	r2, [r3, #0]
 801fbbc:	1d11      	adds	r1, r2, #4
 801fbbe:	6019      	str	r1, [r3, #0]
 801fbc0:	6815      	ldr	r5, [r2, #0]
 801fbc2:	2100      	movs	r1, #0
 801fbc4:	0028      	movs	r0, r5
 801fbc6:	6862      	ldr	r2, [r4, #4]
 801fbc8:	f000 fb7b 	bl	80202c2 <memchr>
 801fbcc:	2800      	cmp	r0, #0
 801fbce:	d001      	beq.n	801fbd4 <_printf_i+0x1c0>
 801fbd0:	1b40      	subs	r0, r0, r5
 801fbd2:	6060      	str	r0, [r4, #4]
 801fbd4:	6863      	ldr	r3, [r4, #4]
 801fbd6:	6123      	str	r3, [r4, #16]
 801fbd8:	2300      	movs	r3, #0
 801fbda:	9a03      	ldr	r2, [sp, #12]
 801fbdc:	7013      	strb	r3, [r2, #0]
 801fbde:	e7ac      	b.n	801fb3a <_printf_i+0x126>
 801fbe0:	002a      	movs	r2, r5
 801fbe2:	6923      	ldr	r3, [r4, #16]
 801fbe4:	9906      	ldr	r1, [sp, #24]
 801fbe6:	9805      	ldr	r0, [sp, #20]
 801fbe8:	9d07      	ldr	r5, [sp, #28]
 801fbea:	47a8      	blx	r5
 801fbec:	3001      	adds	r0, #1
 801fbee:	d0ae      	beq.n	801fb4e <_printf_i+0x13a>
 801fbf0:	6823      	ldr	r3, [r4, #0]
 801fbf2:	079b      	lsls	r3, r3, #30
 801fbf4:	d415      	bmi.n	801fc22 <_printf_i+0x20e>
 801fbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbf8:	68e0      	ldr	r0, [r4, #12]
 801fbfa:	4298      	cmp	r0, r3
 801fbfc:	daa9      	bge.n	801fb52 <_printf_i+0x13e>
 801fbfe:	0018      	movs	r0, r3
 801fc00:	e7a7      	b.n	801fb52 <_printf_i+0x13e>
 801fc02:	0022      	movs	r2, r4
 801fc04:	2301      	movs	r3, #1
 801fc06:	9906      	ldr	r1, [sp, #24]
 801fc08:	9805      	ldr	r0, [sp, #20]
 801fc0a:	9e07      	ldr	r6, [sp, #28]
 801fc0c:	3219      	adds	r2, #25
 801fc0e:	47b0      	blx	r6
 801fc10:	3001      	adds	r0, #1
 801fc12:	d09c      	beq.n	801fb4e <_printf_i+0x13a>
 801fc14:	3501      	adds	r5, #1
 801fc16:	68e3      	ldr	r3, [r4, #12]
 801fc18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc1a:	1a9b      	subs	r3, r3, r2
 801fc1c:	42ab      	cmp	r3, r5
 801fc1e:	dcf0      	bgt.n	801fc02 <_printf_i+0x1ee>
 801fc20:	e7e9      	b.n	801fbf6 <_printf_i+0x1e2>
 801fc22:	2500      	movs	r5, #0
 801fc24:	e7f7      	b.n	801fc16 <_printf_i+0x202>
 801fc26:	46c0      	nop			@ (mov r8, r8)
 801fc28:	08025c3b 	.word	0x08025c3b
 801fc2c:	08025c4c 	.word	0x08025c4c

0801fc30 <std>:
 801fc30:	2300      	movs	r3, #0
 801fc32:	b510      	push	{r4, lr}
 801fc34:	0004      	movs	r4, r0
 801fc36:	6003      	str	r3, [r0, #0]
 801fc38:	6043      	str	r3, [r0, #4]
 801fc3a:	6083      	str	r3, [r0, #8]
 801fc3c:	8181      	strh	r1, [r0, #12]
 801fc3e:	6643      	str	r3, [r0, #100]	@ 0x64
 801fc40:	81c2      	strh	r2, [r0, #14]
 801fc42:	6103      	str	r3, [r0, #16]
 801fc44:	6143      	str	r3, [r0, #20]
 801fc46:	6183      	str	r3, [r0, #24]
 801fc48:	0019      	movs	r1, r3
 801fc4a:	2208      	movs	r2, #8
 801fc4c:	305c      	adds	r0, #92	@ 0x5c
 801fc4e:	f000 fa67 	bl	8020120 <memset>
 801fc52:	4b0b      	ldr	r3, [pc, #44]	@ (801fc80 <std+0x50>)
 801fc54:	6224      	str	r4, [r4, #32]
 801fc56:	6263      	str	r3, [r4, #36]	@ 0x24
 801fc58:	4b0a      	ldr	r3, [pc, #40]	@ (801fc84 <std+0x54>)
 801fc5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fc5c:	4b0a      	ldr	r3, [pc, #40]	@ (801fc88 <std+0x58>)
 801fc5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fc60:	4b0a      	ldr	r3, [pc, #40]	@ (801fc8c <std+0x5c>)
 801fc62:	6323      	str	r3, [r4, #48]	@ 0x30
 801fc64:	4b0a      	ldr	r3, [pc, #40]	@ (801fc90 <std+0x60>)
 801fc66:	429c      	cmp	r4, r3
 801fc68:	d005      	beq.n	801fc76 <std+0x46>
 801fc6a:	4b0a      	ldr	r3, [pc, #40]	@ (801fc94 <std+0x64>)
 801fc6c:	429c      	cmp	r4, r3
 801fc6e:	d002      	beq.n	801fc76 <std+0x46>
 801fc70:	4b09      	ldr	r3, [pc, #36]	@ (801fc98 <std+0x68>)
 801fc72:	429c      	cmp	r4, r3
 801fc74:	d103      	bne.n	801fc7e <std+0x4e>
 801fc76:	0020      	movs	r0, r4
 801fc78:	3058      	adds	r0, #88	@ 0x58
 801fc7a:	f000 fb1f 	bl	80202bc <__retarget_lock_init_recursive>
 801fc7e:	bd10      	pop	{r4, pc}
 801fc80:	0801fed9 	.word	0x0801fed9
 801fc84:	0801ff01 	.word	0x0801ff01
 801fc88:	0801ff39 	.word	0x0801ff39
 801fc8c:	0801ff65 	.word	0x0801ff65
 801fc90:	20003660 	.word	0x20003660
 801fc94:	200036c8 	.word	0x200036c8
 801fc98:	20003730 	.word	0x20003730

0801fc9c <stdio_exit_handler>:
 801fc9c:	b510      	push	{r4, lr}
 801fc9e:	4a03      	ldr	r2, [pc, #12]	@ (801fcac <stdio_exit_handler+0x10>)
 801fca0:	4903      	ldr	r1, [pc, #12]	@ (801fcb0 <stdio_exit_handler+0x14>)
 801fca2:	4804      	ldr	r0, [pc, #16]	@ (801fcb4 <stdio_exit_handler+0x18>)
 801fca4:	f000 f86c 	bl	801fd80 <_fwalk_sglue>
 801fca8:	bd10      	pop	{r4, pc}
 801fcaa:	46c0      	nop			@ (mov r8, r8)
 801fcac:	20000250 	.word	0x20000250
 801fcb0:	080228e1 	.word	0x080228e1
 801fcb4:	200003cc 	.word	0x200003cc

0801fcb8 <cleanup_stdio>:
 801fcb8:	6841      	ldr	r1, [r0, #4]
 801fcba:	4b0b      	ldr	r3, [pc, #44]	@ (801fce8 <cleanup_stdio+0x30>)
 801fcbc:	b510      	push	{r4, lr}
 801fcbe:	0004      	movs	r4, r0
 801fcc0:	4299      	cmp	r1, r3
 801fcc2:	d001      	beq.n	801fcc8 <cleanup_stdio+0x10>
 801fcc4:	f002 fe0c 	bl	80228e0 <_fflush_r>
 801fcc8:	68a1      	ldr	r1, [r4, #8]
 801fcca:	4b08      	ldr	r3, [pc, #32]	@ (801fcec <cleanup_stdio+0x34>)
 801fccc:	4299      	cmp	r1, r3
 801fcce:	d002      	beq.n	801fcd6 <cleanup_stdio+0x1e>
 801fcd0:	0020      	movs	r0, r4
 801fcd2:	f002 fe05 	bl	80228e0 <_fflush_r>
 801fcd6:	68e1      	ldr	r1, [r4, #12]
 801fcd8:	4b05      	ldr	r3, [pc, #20]	@ (801fcf0 <cleanup_stdio+0x38>)
 801fcda:	4299      	cmp	r1, r3
 801fcdc:	d002      	beq.n	801fce4 <cleanup_stdio+0x2c>
 801fcde:	0020      	movs	r0, r4
 801fce0:	f002 fdfe 	bl	80228e0 <_fflush_r>
 801fce4:	bd10      	pop	{r4, pc}
 801fce6:	46c0      	nop			@ (mov r8, r8)
 801fce8:	20003660 	.word	0x20003660
 801fcec:	200036c8 	.word	0x200036c8
 801fcf0:	20003730 	.word	0x20003730

0801fcf4 <global_stdio_init.part.0>:
 801fcf4:	b510      	push	{r4, lr}
 801fcf6:	4b09      	ldr	r3, [pc, #36]	@ (801fd1c <global_stdio_init.part.0+0x28>)
 801fcf8:	4a09      	ldr	r2, [pc, #36]	@ (801fd20 <global_stdio_init.part.0+0x2c>)
 801fcfa:	2104      	movs	r1, #4
 801fcfc:	601a      	str	r2, [r3, #0]
 801fcfe:	4809      	ldr	r0, [pc, #36]	@ (801fd24 <global_stdio_init.part.0+0x30>)
 801fd00:	2200      	movs	r2, #0
 801fd02:	f7ff ff95 	bl	801fc30 <std>
 801fd06:	2201      	movs	r2, #1
 801fd08:	2109      	movs	r1, #9
 801fd0a:	4807      	ldr	r0, [pc, #28]	@ (801fd28 <global_stdio_init.part.0+0x34>)
 801fd0c:	f7ff ff90 	bl	801fc30 <std>
 801fd10:	2202      	movs	r2, #2
 801fd12:	2112      	movs	r1, #18
 801fd14:	4805      	ldr	r0, [pc, #20]	@ (801fd2c <global_stdio_init.part.0+0x38>)
 801fd16:	f7ff ff8b 	bl	801fc30 <std>
 801fd1a:	bd10      	pop	{r4, pc}
 801fd1c:	20003798 	.word	0x20003798
 801fd20:	0801fc9d 	.word	0x0801fc9d
 801fd24:	20003660 	.word	0x20003660
 801fd28:	200036c8 	.word	0x200036c8
 801fd2c:	20003730 	.word	0x20003730

0801fd30 <__sfp_lock_acquire>:
 801fd30:	b510      	push	{r4, lr}
 801fd32:	4802      	ldr	r0, [pc, #8]	@ (801fd3c <__sfp_lock_acquire+0xc>)
 801fd34:	f000 fac3 	bl	80202be <__retarget_lock_acquire_recursive>
 801fd38:	bd10      	pop	{r4, pc}
 801fd3a:	46c0      	nop			@ (mov r8, r8)
 801fd3c:	200037a1 	.word	0x200037a1

0801fd40 <__sfp_lock_release>:
 801fd40:	b510      	push	{r4, lr}
 801fd42:	4802      	ldr	r0, [pc, #8]	@ (801fd4c <__sfp_lock_release+0xc>)
 801fd44:	f000 fabc 	bl	80202c0 <__retarget_lock_release_recursive>
 801fd48:	bd10      	pop	{r4, pc}
 801fd4a:	46c0      	nop			@ (mov r8, r8)
 801fd4c:	200037a1 	.word	0x200037a1

0801fd50 <__sinit>:
 801fd50:	b510      	push	{r4, lr}
 801fd52:	0004      	movs	r4, r0
 801fd54:	f7ff ffec 	bl	801fd30 <__sfp_lock_acquire>
 801fd58:	6a23      	ldr	r3, [r4, #32]
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d002      	beq.n	801fd64 <__sinit+0x14>
 801fd5e:	f7ff ffef 	bl	801fd40 <__sfp_lock_release>
 801fd62:	bd10      	pop	{r4, pc}
 801fd64:	4b04      	ldr	r3, [pc, #16]	@ (801fd78 <__sinit+0x28>)
 801fd66:	6223      	str	r3, [r4, #32]
 801fd68:	4b04      	ldr	r3, [pc, #16]	@ (801fd7c <__sinit+0x2c>)
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	d1f6      	bne.n	801fd5e <__sinit+0xe>
 801fd70:	f7ff ffc0 	bl	801fcf4 <global_stdio_init.part.0>
 801fd74:	e7f3      	b.n	801fd5e <__sinit+0xe>
 801fd76:	46c0      	nop			@ (mov r8, r8)
 801fd78:	0801fcb9 	.word	0x0801fcb9
 801fd7c:	20003798 	.word	0x20003798

0801fd80 <_fwalk_sglue>:
 801fd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fd82:	0014      	movs	r4, r2
 801fd84:	2600      	movs	r6, #0
 801fd86:	9000      	str	r0, [sp, #0]
 801fd88:	9101      	str	r1, [sp, #4]
 801fd8a:	68a5      	ldr	r5, [r4, #8]
 801fd8c:	6867      	ldr	r7, [r4, #4]
 801fd8e:	3f01      	subs	r7, #1
 801fd90:	d504      	bpl.n	801fd9c <_fwalk_sglue+0x1c>
 801fd92:	6824      	ldr	r4, [r4, #0]
 801fd94:	2c00      	cmp	r4, #0
 801fd96:	d1f8      	bne.n	801fd8a <_fwalk_sglue+0xa>
 801fd98:	0030      	movs	r0, r6
 801fd9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fd9c:	89ab      	ldrh	r3, [r5, #12]
 801fd9e:	2b01      	cmp	r3, #1
 801fda0:	d908      	bls.n	801fdb4 <_fwalk_sglue+0x34>
 801fda2:	220e      	movs	r2, #14
 801fda4:	5eab      	ldrsh	r3, [r5, r2]
 801fda6:	3301      	adds	r3, #1
 801fda8:	d004      	beq.n	801fdb4 <_fwalk_sglue+0x34>
 801fdaa:	0029      	movs	r1, r5
 801fdac:	9800      	ldr	r0, [sp, #0]
 801fdae:	9b01      	ldr	r3, [sp, #4]
 801fdb0:	4798      	blx	r3
 801fdb2:	4306      	orrs	r6, r0
 801fdb4:	3568      	adds	r5, #104	@ 0x68
 801fdb6:	e7ea      	b.n	801fd8e <_fwalk_sglue+0xe>

0801fdb8 <iprintf>:
 801fdb8:	b40f      	push	{r0, r1, r2, r3}
 801fdba:	b507      	push	{r0, r1, r2, lr}
 801fdbc:	4905      	ldr	r1, [pc, #20]	@ (801fdd4 <iprintf+0x1c>)
 801fdbe:	ab04      	add	r3, sp, #16
 801fdc0:	6808      	ldr	r0, [r1, #0]
 801fdc2:	cb04      	ldmia	r3!, {r2}
 801fdc4:	6881      	ldr	r1, [r0, #8]
 801fdc6:	9301      	str	r3, [sp, #4]
 801fdc8:	f002 fbe8 	bl	802259c <_vfiprintf_r>
 801fdcc:	b003      	add	sp, #12
 801fdce:	bc08      	pop	{r3}
 801fdd0:	b004      	add	sp, #16
 801fdd2:	4718      	bx	r3
 801fdd4:	200003c8 	.word	0x200003c8

0801fdd8 <_puts_r>:
 801fdd8:	6a03      	ldr	r3, [r0, #32]
 801fdda:	b570      	push	{r4, r5, r6, lr}
 801fddc:	0005      	movs	r5, r0
 801fdde:	000e      	movs	r6, r1
 801fde0:	6884      	ldr	r4, [r0, #8]
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d101      	bne.n	801fdea <_puts_r+0x12>
 801fde6:	f7ff ffb3 	bl	801fd50 <__sinit>
 801fdea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fdec:	07db      	lsls	r3, r3, #31
 801fdee:	d405      	bmi.n	801fdfc <_puts_r+0x24>
 801fdf0:	89a3      	ldrh	r3, [r4, #12]
 801fdf2:	059b      	lsls	r3, r3, #22
 801fdf4:	d402      	bmi.n	801fdfc <_puts_r+0x24>
 801fdf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fdf8:	f000 fa61 	bl	80202be <__retarget_lock_acquire_recursive>
 801fdfc:	89a3      	ldrh	r3, [r4, #12]
 801fdfe:	071b      	lsls	r3, r3, #28
 801fe00:	d502      	bpl.n	801fe08 <_puts_r+0x30>
 801fe02:	6923      	ldr	r3, [r4, #16]
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d11f      	bne.n	801fe48 <_puts_r+0x70>
 801fe08:	0021      	movs	r1, r4
 801fe0a:	0028      	movs	r0, r5
 801fe0c:	f000 f92a 	bl	8020064 <__swsetup_r>
 801fe10:	2800      	cmp	r0, #0
 801fe12:	d019      	beq.n	801fe48 <_puts_r+0x70>
 801fe14:	2501      	movs	r5, #1
 801fe16:	426d      	negs	r5, r5
 801fe18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fe1a:	07db      	lsls	r3, r3, #31
 801fe1c:	d405      	bmi.n	801fe2a <_puts_r+0x52>
 801fe1e:	89a3      	ldrh	r3, [r4, #12]
 801fe20:	059b      	lsls	r3, r3, #22
 801fe22:	d402      	bmi.n	801fe2a <_puts_r+0x52>
 801fe24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fe26:	f000 fa4b 	bl	80202c0 <__retarget_lock_release_recursive>
 801fe2a:	0028      	movs	r0, r5
 801fe2c:	bd70      	pop	{r4, r5, r6, pc}
 801fe2e:	3601      	adds	r6, #1
 801fe30:	60a3      	str	r3, [r4, #8]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	da04      	bge.n	801fe40 <_puts_r+0x68>
 801fe36:	69a2      	ldr	r2, [r4, #24]
 801fe38:	429a      	cmp	r2, r3
 801fe3a:	dc16      	bgt.n	801fe6a <_puts_r+0x92>
 801fe3c:	290a      	cmp	r1, #10
 801fe3e:	d014      	beq.n	801fe6a <_puts_r+0x92>
 801fe40:	6823      	ldr	r3, [r4, #0]
 801fe42:	1c5a      	adds	r2, r3, #1
 801fe44:	6022      	str	r2, [r4, #0]
 801fe46:	7019      	strb	r1, [r3, #0]
 801fe48:	68a3      	ldr	r3, [r4, #8]
 801fe4a:	7831      	ldrb	r1, [r6, #0]
 801fe4c:	3b01      	subs	r3, #1
 801fe4e:	2900      	cmp	r1, #0
 801fe50:	d1ed      	bne.n	801fe2e <_puts_r+0x56>
 801fe52:	60a3      	str	r3, [r4, #8]
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	da0f      	bge.n	801fe78 <_puts_r+0xa0>
 801fe58:	0022      	movs	r2, r4
 801fe5a:	0028      	movs	r0, r5
 801fe5c:	310a      	adds	r1, #10
 801fe5e:	f000 f8bf 	bl	801ffe0 <__swbuf_r>
 801fe62:	3001      	adds	r0, #1
 801fe64:	d0d6      	beq.n	801fe14 <_puts_r+0x3c>
 801fe66:	250a      	movs	r5, #10
 801fe68:	e7d6      	b.n	801fe18 <_puts_r+0x40>
 801fe6a:	0022      	movs	r2, r4
 801fe6c:	0028      	movs	r0, r5
 801fe6e:	f000 f8b7 	bl	801ffe0 <__swbuf_r>
 801fe72:	3001      	adds	r0, #1
 801fe74:	d1e8      	bne.n	801fe48 <_puts_r+0x70>
 801fe76:	e7cd      	b.n	801fe14 <_puts_r+0x3c>
 801fe78:	6823      	ldr	r3, [r4, #0]
 801fe7a:	1c5a      	adds	r2, r3, #1
 801fe7c:	6022      	str	r2, [r4, #0]
 801fe7e:	220a      	movs	r2, #10
 801fe80:	701a      	strb	r2, [r3, #0]
 801fe82:	e7f0      	b.n	801fe66 <_puts_r+0x8e>

0801fe84 <puts>:
 801fe84:	b510      	push	{r4, lr}
 801fe86:	4b03      	ldr	r3, [pc, #12]	@ (801fe94 <puts+0x10>)
 801fe88:	0001      	movs	r1, r0
 801fe8a:	6818      	ldr	r0, [r3, #0]
 801fe8c:	f7ff ffa4 	bl	801fdd8 <_puts_r>
 801fe90:	bd10      	pop	{r4, pc}
 801fe92:	46c0      	nop			@ (mov r8, r8)
 801fe94:	200003c8 	.word	0x200003c8

0801fe98 <siprintf>:
 801fe98:	b40e      	push	{r1, r2, r3}
 801fe9a:	b500      	push	{lr}
 801fe9c:	490b      	ldr	r1, [pc, #44]	@ (801fecc <siprintf+0x34>)
 801fe9e:	b09c      	sub	sp, #112	@ 0x70
 801fea0:	ab1d      	add	r3, sp, #116	@ 0x74
 801fea2:	9002      	str	r0, [sp, #8]
 801fea4:	9006      	str	r0, [sp, #24]
 801fea6:	9107      	str	r1, [sp, #28]
 801fea8:	9104      	str	r1, [sp, #16]
 801feaa:	4809      	ldr	r0, [pc, #36]	@ (801fed0 <siprintf+0x38>)
 801feac:	4909      	ldr	r1, [pc, #36]	@ (801fed4 <siprintf+0x3c>)
 801feae:	cb04      	ldmia	r3!, {r2}
 801feb0:	9105      	str	r1, [sp, #20]
 801feb2:	6800      	ldr	r0, [r0, #0]
 801feb4:	a902      	add	r1, sp, #8
 801feb6:	9301      	str	r3, [sp, #4]
 801feb8:	f002 fa4a 	bl	8022350 <_svfiprintf_r>
 801febc:	2200      	movs	r2, #0
 801febe:	9b02      	ldr	r3, [sp, #8]
 801fec0:	701a      	strb	r2, [r3, #0]
 801fec2:	b01c      	add	sp, #112	@ 0x70
 801fec4:	bc08      	pop	{r3}
 801fec6:	b003      	add	sp, #12
 801fec8:	4718      	bx	r3
 801feca:	46c0      	nop			@ (mov r8, r8)
 801fecc:	7fffffff 	.word	0x7fffffff
 801fed0:	200003c8 	.word	0x200003c8
 801fed4:	ffff0208 	.word	0xffff0208

0801fed8 <__sread>:
 801fed8:	b570      	push	{r4, r5, r6, lr}
 801feda:	000c      	movs	r4, r1
 801fedc:	250e      	movs	r5, #14
 801fede:	5f49      	ldrsh	r1, [r1, r5]
 801fee0:	f000 f99a 	bl	8020218 <_read_r>
 801fee4:	2800      	cmp	r0, #0
 801fee6:	db03      	blt.n	801fef0 <__sread+0x18>
 801fee8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801feea:	181b      	adds	r3, r3, r0
 801feec:	6563      	str	r3, [r4, #84]	@ 0x54
 801feee:	bd70      	pop	{r4, r5, r6, pc}
 801fef0:	89a3      	ldrh	r3, [r4, #12]
 801fef2:	4a02      	ldr	r2, [pc, #8]	@ (801fefc <__sread+0x24>)
 801fef4:	4013      	ands	r3, r2
 801fef6:	81a3      	strh	r3, [r4, #12]
 801fef8:	e7f9      	b.n	801feee <__sread+0x16>
 801fefa:	46c0      	nop			@ (mov r8, r8)
 801fefc:	ffffefff 	.word	0xffffefff

0801ff00 <__swrite>:
 801ff00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff02:	001f      	movs	r7, r3
 801ff04:	898b      	ldrh	r3, [r1, #12]
 801ff06:	0005      	movs	r5, r0
 801ff08:	000c      	movs	r4, r1
 801ff0a:	0016      	movs	r6, r2
 801ff0c:	05db      	lsls	r3, r3, #23
 801ff0e:	d505      	bpl.n	801ff1c <__swrite+0x1c>
 801ff10:	230e      	movs	r3, #14
 801ff12:	5ec9      	ldrsh	r1, [r1, r3]
 801ff14:	2200      	movs	r2, #0
 801ff16:	2302      	movs	r3, #2
 801ff18:	f000 f96a 	bl	80201f0 <_lseek_r>
 801ff1c:	89a3      	ldrh	r3, [r4, #12]
 801ff1e:	4a05      	ldr	r2, [pc, #20]	@ (801ff34 <__swrite+0x34>)
 801ff20:	0028      	movs	r0, r5
 801ff22:	4013      	ands	r3, r2
 801ff24:	81a3      	strh	r3, [r4, #12]
 801ff26:	0032      	movs	r2, r6
 801ff28:	230e      	movs	r3, #14
 801ff2a:	5ee1      	ldrsh	r1, [r4, r3]
 801ff2c:	003b      	movs	r3, r7
 801ff2e:	f000 f987 	bl	8020240 <_write_r>
 801ff32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff34:	ffffefff 	.word	0xffffefff

0801ff38 <__sseek>:
 801ff38:	b570      	push	{r4, r5, r6, lr}
 801ff3a:	000c      	movs	r4, r1
 801ff3c:	250e      	movs	r5, #14
 801ff3e:	5f49      	ldrsh	r1, [r1, r5]
 801ff40:	f000 f956 	bl	80201f0 <_lseek_r>
 801ff44:	89a3      	ldrh	r3, [r4, #12]
 801ff46:	1c42      	adds	r2, r0, #1
 801ff48:	d103      	bne.n	801ff52 <__sseek+0x1a>
 801ff4a:	4a05      	ldr	r2, [pc, #20]	@ (801ff60 <__sseek+0x28>)
 801ff4c:	4013      	ands	r3, r2
 801ff4e:	81a3      	strh	r3, [r4, #12]
 801ff50:	bd70      	pop	{r4, r5, r6, pc}
 801ff52:	2280      	movs	r2, #128	@ 0x80
 801ff54:	0152      	lsls	r2, r2, #5
 801ff56:	4313      	orrs	r3, r2
 801ff58:	81a3      	strh	r3, [r4, #12]
 801ff5a:	6560      	str	r0, [r4, #84]	@ 0x54
 801ff5c:	e7f8      	b.n	801ff50 <__sseek+0x18>
 801ff5e:	46c0      	nop			@ (mov r8, r8)
 801ff60:	ffffefff 	.word	0xffffefff

0801ff64 <__sclose>:
 801ff64:	b510      	push	{r4, lr}
 801ff66:	230e      	movs	r3, #14
 801ff68:	5ec9      	ldrsh	r1, [r1, r3]
 801ff6a:	f000 f92f 	bl	80201cc <_close_r>
 801ff6e:	bd10      	pop	{r4, pc}

0801ff70 <_vsniprintf_r>:
 801ff70:	b530      	push	{r4, r5, lr}
 801ff72:	0014      	movs	r4, r2
 801ff74:	0005      	movs	r5, r0
 801ff76:	001a      	movs	r2, r3
 801ff78:	b09b      	sub	sp, #108	@ 0x6c
 801ff7a:	2c00      	cmp	r4, #0
 801ff7c:	da05      	bge.n	801ff8a <_vsniprintf_r+0x1a>
 801ff7e:	238b      	movs	r3, #139	@ 0x8b
 801ff80:	6003      	str	r3, [r0, #0]
 801ff82:	2001      	movs	r0, #1
 801ff84:	4240      	negs	r0, r0
 801ff86:	b01b      	add	sp, #108	@ 0x6c
 801ff88:	bd30      	pop	{r4, r5, pc}
 801ff8a:	2382      	movs	r3, #130	@ 0x82
 801ff8c:	4668      	mov	r0, sp
 801ff8e:	009b      	lsls	r3, r3, #2
 801ff90:	8183      	strh	r3, [r0, #12]
 801ff92:	2300      	movs	r3, #0
 801ff94:	9100      	str	r1, [sp, #0]
 801ff96:	9104      	str	r1, [sp, #16]
 801ff98:	429c      	cmp	r4, r3
 801ff9a:	d000      	beq.n	801ff9e <_vsniprintf_r+0x2e>
 801ff9c:	1e63      	subs	r3, r4, #1
 801ff9e:	9302      	str	r3, [sp, #8]
 801ffa0:	9305      	str	r3, [sp, #20]
 801ffa2:	2301      	movs	r3, #1
 801ffa4:	4669      	mov	r1, sp
 801ffa6:	425b      	negs	r3, r3
 801ffa8:	81cb      	strh	r3, [r1, #14]
 801ffaa:	0028      	movs	r0, r5
 801ffac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ffae:	f002 f9cf 	bl	8022350 <_svfiprintf_r>
 801ffb2:	1c43      	adds	r3, r0, #1
 801ffb4:	da01      	bge.n	801ffba <_vsniprintf_r+0x4a>
 801ffb6:	238b      	movs	r3, #139	@ 0x8b
 801ffb8:	602b      	str	r3, [r5, #0]
 801ffba:	2c00      	cmp	r4, #0
 801ffbc:	d0e3      	beq.n	801ff86 <_vsniprintf_r+0x16>
 801ffbe:	2200      	movs	r2, #0
 801ffc0:	9b00      	ldr	r3, [sp, #0]
 801ffc2:	701a      	strb	r2, [r3, #0]
 801ffc4:	e7df      	b.n	801ff86 <_vsniprintf_r+0x16>
	...

0801ffc8 <vsniprintf>:
 801ffc8:	b513      	push	{r0, r1, r4, lr}
 801ffca:	4c04      	ldr	r4, [pc, #16]	@ (801ffdc <vsniprintf+0x14>)
 801ffcc:	9300      	str	r3, [sp, #0]
 801ffce:	0013      	movs	r3, r2
 801ffd0:	000a      	movs	r2, r1
 801ffd2:	0001      	movs	r1, r0
 801ffd4:	6820      	ldr	r0, [r4, #0]
 801ffd6:	f7ff ffcb 	bl	801ff70 <_vsniprintf_r>
 801ffda:	bd16      	pop	{r1, r2, r4, pc}
 801ffdc:	200003c8 	.word	0x200003c8

0801ffe0 <__swbuf_r>:
 801ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffe2:	0006      	movs	r6, r0
 801ffe4:	000d      	movs	r5, r1
 801ffe6:	0014      	movs	r4, r2
 801ffe8:	2800      	cmp	r0, #0
 801ffea:	d004      	beq.n	801fff6 <__swbuf_r+0x16>
 801ffec:	6a03      	ldr	r3, [r0, #32]
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d101      	bne.n	801fff6 <__swbuf_r+0x16>
 801fff2:	f7ff fead 	bl	801fd50 <__sinit>
 801fff6:	69a3      	ldr	r3, [r4, #24]
 801fff8:	60a3      	str	r3, [r4, #8]
 801fffa:	89a3      	ldrh	r3, [r4, #12]
 801fffc:	071b      	lsls	r3, r3, #28
 801fffe:	d502      	bpl.n	8020006 <__swbuf_r+0x26>
 8020000:	6923      	ldr	r3, [r4, #16]
 8020002:	2b00      	cmp	r3, #0
 8020004:	d109      	bne.n	802001a <__swbuf_r+0x3a>
 8020006:	0021      	movs	r1, r4
 8020008:	0030      	movs	r0, r6
 802000a:	f000 f82b 	bl	8020064 <__swsetup_r>
 802000e:	2800      	cmp	r0, #0
 8020010:	d003      	beq.n	802001a <__swbuf_r+0x3a>
 8020012:	2501      	movs	r5, #1
 8020014:	426d      	negs	r5, r5
 8020016:	0028      	movs	r0, r5
 8020018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802001a:	6923      	ldr	r3, [r4, #16]
 802001c:	6820      	ldr	r0, [r4, #0]
 802001e:	b2ef      	uxtb	r7, r5
 8020020:	1ac0      	subs	r0, r0, r3
 8020022:	6963      	ldr	r3, [r4, #20]
 8020024:	b2ed      	uxtb	r5, r5
 8020026:	4283      	cmp	r3, r0
 8020028:	dc05      	bgt.n	8020036 <__swbuf_r+0x56>
 802002a:	0021      	movs	r1, r4
 802002c:	0030      	movs	r0, r6
 802002e:	f002 fc57 	bl	80228e0 <_fflush_r>
 8020032:	2800      	cmp	r0, #0
 8020034:	d1ed      	bne.n	8020012 <__swbuf_r+0x32>
 8020036:	68a3      	ldr	r3, [r4, #8]
 8020038:	3001      	adds	r0, #1
 802003a:	3b01      	subs	r3, #1
 802003c:	60a3      	str	r3, [r4, #8]
 802003e:	6823      	ldr	r3, [r4, #0]
 8020040:	1c5a      	adds	r2, r3, #1
 8020042:	6022      	str	r2, [r4, #0]
 8020044:	701f      	strb	r7, [r3, #0]
 8020046:	6963      	ldr	r3, [r4, #20]
 8020048:	4283      	cmp	r3, r0
 802004a:	d004      	beq.n	8020056 <__swbuf_r+0x76>
 802004c:	89a3      	ldrh	r3, [r4, #12]
 802004e:	07db      	lsls	r3, r3, #31
 8020050:	d5e1      	bpl.n	8020016 <__swbuf_r+0x36>
 8020052:	2d0a      	cmp	r5, #10
 8020054:	d1df      	bne.n	8020016 <__swbuf_r+0x36>
 8020056:	0021      	movs	r1, r4
 8020058:	0030      	movs	r0, r6
 802005a:	f002 fc41 	bl	80228e0 <_fflush_r>
 802005e:	2800      	cmp	r0, #0
 8020060:	d0d9      	beq.n	8020016 <__swbuf_r+0x36>
 8020062:	e7d6      	b.n	8020012 <__swbuf_r+0x32>

08020064 <__swsetup_r>:
 8020064:	4b2d      	ldr	r3, [pc, #180]	@ (802011c <__swsetup_r+0xb8>)
 8020066:	b570      	push	{r4, r5, r6, lr}
 8020068:	0005      	movs	r5, r0
 802006a:	6818      	ldr	r0, [r3, #0]
 802006c:	000c      	movs	r4, r1
 802006e:	2800      	cmp	r0, #0
 8020070:	d004      	beq.n	802007c <__swsetup_r+0x18>
 8020072:	6a03      	ldr	r3, [r0, #32]
 8020074:	2b00      	cmp	r3, #0
 8020076:	d101      	bne.n	802007c <__swsetup_r+0x18>
 8020078:	f7ff fe6a 	bl	801fd50 <__sinit>
 802007c:	230c      	movs	r3, #12
 802007e:	5ee2      	ldrsh	r2, [r4, r3]
 8020080:	0713      	lsls	r3, r2, #28
 8020082:	d423      	bmi.n	80200cc <__swsetup_r+0x68>
 8020084:	06d3      	lsls	r3, r2, #27
 8020086:	d407      	bmi.n	8020098 <__swsetup_r+0x34>
 8020088:	2309      	movs	r3, #9
 802008a:	602b      	str	r3, [r5, #0]
 802008c:	2340      	movs	r3, #64	@ 0x40
 802008e:	2001      	movs	r0, #1
 8020090:	4313      	orrs	r3, r2
 8020092:	81a3      	strh	r3, [r4, #12]
 8020094:	4240      	negs	r0, r0
 8020096:	e03a      	b.n	802010e <__swsetup_r+0xaa>
 8020098:	0752      	lsls	r2, r2, #29
 802009a:	d513      	bpl.n	80200c4 <__swsetup_r+0x60>
 802009c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802009e:	2900      	cmp	r1, #0
 80200a0:	d008      	beq.n	80200b4 <__swsetup_r+0x50>
 80200a2:	0023      	movs	r3, r4
 80200a4:	3344      	adds	r3, #68	@ 0x44
 80200a6:	4299      	cmp	r1, r3
 80200a8:	d002      	beq.n	80200b0 <__swsetup_r+0x4c>
 80200aa:	0028      	movs	r0, r5
 80200ac:	f000 ffa6 	bl	8020ffc <_free_r>
 80200b0:	2300      	movs	r3, #0
 80200b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80200b4:	2224      	movs	r2, #36	@ 0x24
 80200b6:	89a3      	ldrh	r3, [r4, #12]
 80200b8:	4393      	bics	r3, r2
 80200ba:	81a3      	strh	r3, [r4, #12]
 80200bc:	2300      	movs	r3, #0
 80200be:	6063      	str	r3, [r4, #4]
 80200c0:	6923      	ldr	r3, [r4, #16]
 80200c2:	6023      	str	r3, [r4, #0]
 80200c4:	2308      	movs	r3, #8
 80200c6:	89a2      	ldrh	r2, [r4, #12]
 80200c8:	4313      	orrs	r3, r2
 80200ca:	81a3      	strh	r3, [r4, #12]
 80200cc:	6923      	ldr	r3, [r4, #16]
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	d10b      	bne.n	80200ea <__swsetup_r+0x86>
 80200d2:	21a0      	movs	r1, #160	@ 0xa0
 80200d4:	2280      	movs	r2, #128	@ 0x80
 80200d6:	89a3      	ldrh	r3, [r4, #12]
 80200d8:	0089      	lsls	r1, r1, #2
 80200da:	0092      	lsls	r2, r2, #2
 80200dc:	400b      	ands	r3, r1
 80200de:	4293      	cmp	r3, r2
 80200e0:	d003      	beq.n	80200ea <__swsetup_r+0x86>
 80200e2:	0021      	movs	r1, r4
 80200e4:	0028      	movs	r0, r5
 80200e6:	f002 fc51 	bl	802298c <__smakebuf_r>
 80200ea:	230c      	movs	r3, #12
 80200ec:	5ee2      	ldrsh	r2, [r4, r3]
 80200ee:	2101      	movs	r1, #1
 80200f0:	0013      	movs	r3, r2
 80200f2:	400b      	ands	r3, r1
 80200f4:	420a      	tst	r2, r1
 80200f6:	d00b      	beq.n	8020110 <__swsetup_r+0xac>
 80200f8:	2300      	movs	r3, #0
 80200fa:	60a3      	str	r3, [r4, #8]
 80200fc:	6963      	ldr	r3, [r4, #20]
 80200fe:	425b      	negs	r3, r3
 8020100:	61a3      	str	r3, [r4, #24]
 8020102:	2000      	movs	r0, #0
 8020104:	6923      	ldr	r3, [r4, #16]
 8020106:	4283      	cmp	r3, r0
 8020108:	d101      	bne.n	802010e <__swsetup_r+0xaa>
 802010a:	0613      	lsls	r3, r2, #24
 802010c:	d4be      	bmi.n	802008c <__swsetup_r+0x28>
 802010e:	bd70      	pop	{r4, r5, r6, pc}
 8020110:	0791      	lsls	r1, r2, #30
 8020112:	d400      	bmi.n	8020116 <__swsetup_r+0xb2>
 8020114:	6963      	ldr	r3, [r4, #20]
 8020116:	60a3      	str	r3, [r4, #8]
 8020118:	e7f3      	b.n	8020102 <__swsetup_r+0x9e>
 802011a:	46c0      	nop			@ (mov r8, r8)
 802011c:	200003c8 	.word	0x200003c8

08020120 <memset>:
 8020120:	0003      	movs	r3, r0
 8020122:	1882      	adds	r2, r0, r2
 8020124:	4293      	cmp	r3, r2
 8020126:	d100      	bne.n	802012a <memset+0xa>
 8020128:	4770      	bx	lr
 802012a:	7019      	strb	r1, [r3, #0]
 802012c:	3301      	adds	r3, #1
 802012e:	e7f9      	b.n	8020124 <memset+0x4>

08020130 <strchr>:
 8020130:	b2c9      	uxtb	r1, r1
 8020132:	7803      	ldrb	r3, [r0, #0]
 8020134:	2b00      	cmp	r3, #0
 8020136:	d004      	beq.n	8020142 <strchr+0x12>
 8020138:	428b      	cmp	r3, r1
 802013a:	d100      	bne.n	802013e <strchr+0xe>
 802013c:	4770      	bx	lr
 802013e:	3001      	adds	r0, #1
 8020140:	e7f7      	b.n	8020132 <strchr+0x2>
 8020142:	424b      	negs	r3, r1
 8020144:	4159      	adcs	r1, r3
 8020146:	4249      	negs	r1, r1
 8020148:	4008      	ands	r0, r1
 802014a:	e7f7      	b.n	802013c <strchr+0xc>

0802014c <strncmp>:
 802014c:	b530      	push	{r4, r5, lr}
 802014e:	0005      	movs	r5, r0
 8020150:	1e10      	subs	r0, r2, #0
 8020152:	d00b      	beq.n	802016c <strncmp+0x20>
 8020154:	2400      	movs	r4, #0
 8020156:	3a01      	subs	r2, #1
 8020158:	5d2b      	ldrb	r3, [r5, r4]
 802015a:	5d08      	ldrb	r0, [r1, r4]
 802015c:	4283      	cmp	r3, r0
 802015e:	d104      	bne.n	802016a <strncmp+0x1e>
 8020160:	42a2      	cmp	r2, r4
 8020162:	d002      	beq.n	802016a <strncmp+0x1e>
 8020164:	3401      	adds	r4, #1
 8020166:	2b00      	cmp	r3, #0
 8020168:	d1f6      	bne.n	8020158 <strncmp+0xc>
 802016a:	1a18      	subs	r0, r3, r0
 802016c:	bd30      	pop	{r4, r5, pc}

0802016e <strncpy>:
 802016e:	0003      	movs	r3, r0
 8020170:	b530      	push	{r4, r5, lr}
 8020172:	001d      	movs	r5, r3
 8020174:	2a00      	cmp	r2, #0
 8020176:	d006      	beq.n	8020186 <strncpy+0x18>
 8020178:	780c      	ldrb	r4, [r1, #0]
 802017a:	3a01      	subs	r2, #1
 802017c:	3301      	adds	r3, #1
 802017e:	702c      	strb	r4, [r5, #0]
 8020180:	3101      	adds	r1, #1
 8020182:	2c00      	cmp	r4, #0
 8020184:	d1f5      	bne.n	8020172 <strncpy+0x4>
 8020186:	2100      	movs	r1, #0
 8020188:	189a      	adds	r2, r3, r2
 802018a:	4293      	cmp	r3, r2
 802018c:	d100      	bne.n	8020190 <strncpy+0x22>
 802018e:	bd30      	pop	{r4, r5, pc}
 8020190:	7019      	strb	r1, [r3, #0]
 8020192:	3301      	adds	r3, #1
 8020194:	e7f9      	b.n	802018a <strncpy+0x1c>

08020196 <strstr>:
 8020196:	780a      	ldrb	r2, [r1, #0]
 8020198:	b530      	push	{r4, r5, lr}
 802019a:	2a00      	cmp	r2, #0
 802019c:	d10c      	bne.n	80201b8 <strstr+0x22>
 802019e:	bd30      	pop	{r4, r5, pc}
 80201a0:	429a      	cmp	r2, r3
 80201a2:	d108      	bne.n	80201b6 <strstr+0x20>
 80201a4:	2301      	movs	r3, #1
 80201a6:	5ccc      	ldrb	r4, [r1, r3]
 80201a8:	2c00      	cmp	r4, #0
 80201aa:	d0f8      	beq.n	802019e <strstr+0x8>
 80201ac:	5cc5      	ldrb	r5, [r0, r3]
 80201ae:	42a5      	cmp	r5, r4
 80201b0:	d101      	bne.n	80201b6 <strstr+0x20>
 80201b2:	3301      	adds	r3, #1
 80201b4:	e7f7      	b.n	80201a6 <strstr+0x10>
 80201b6:	3001      	adds	r0, #1
 80201b8:	7803      	ldrb	r3, [r0, #0]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d1f0      	bne.n	80201a0 <strstr+0xa>
 80201be:	0018      	movs	r0, r3
 80201c0:	e7ed      	b.n	802019e <strstr+0x8>
	...

080201c4 <_localeconv_r>:
 80201c4:	4800      	ldr	r0, [pc, #0]	@ (80201c8 <_localeconv_r+0x4>)
 80201c6:	4770      	bx	lr
 80201c8:	2000034c 	.word	0x2000034c

080201cc <_close_r>:
 80201cc:	2300      	movs	r3, #0
 80201ce:	b570      	push	{r4, r5, r6, lr}
 80201d0:	4d06      	ldr	r5, [pc, #24]	@ (80201ec <_close_r+0x20>)
 80201d2:	0004      	movs	r4, r0
 80201d4:	0008      	movs	r0, r1
 80201d6:	602b      	str	r3, [r5, #0]
 80201d8:	f7ed fca2 	bl	800db20 <_close>
 80201dc:	1c43      	adds	r3, r0, #1
 80201de:	d103      	bne.n	80201e8 <_close_r+0x1c>
 80201e0:	682b      	ldr	r3, [r5, #0]
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d000      	beq.n	80201e8 <_close_r+0x1c>
 80201e6:	6023      	str	r3, [r4, #0]
 80201e8:	bd70      	pop	{r4, r5, r6, pc}
 80201ea:	46c0      	nop			@ (mov r8, r8)
 80201ec:	2000379c 	.word	0x2000379c

080201f0 <_lseek_r>:
 80201f0:	b570      	push	{r4, r5, r6, lr}
 80201f2:	0004      	movs	r4, r0
 80201f4:	0008      	movs	r0, r1
 80201f6:	0011      	movs	r1, r2
 80201f8:	001a      	movs	r2, r3
 80201fa:	2300      	movs	r3, #0
 80201fc:	4d05      	ldr	r5, [pc, #20]	@ (8020214 <_lseek_r+0x24>)
 80201fe:	602b      	str	r3, [r5, #0]
 8020200:	f7ed fcaf 	bl	800db62 <_lseek>
 8020204:	1c43      	adds	r3, r0, #1
 8020206:	d103      	bne.n	8020210 <_lseek_r+0x20>
 8020208:	682b      	ldr	r3, [r5, #0]
 802020a:	2b00      	cmp	r3, #0
 802020c:	d000      	beq.n	8020210 <_lseek_r+0x20>
 802020e:	6023      	str	r3, [r4, #0]
 8020210:	bd70      	pop	{r4, r5, r6, pc}
 8020212:	46c0      	nop			@ (mov r8, r8)
 8020214:	2000379c 	.word	0x2000379c

08020218 <_read_r>:
 8020218:	b570      	push	{r4, r5, r6, lr}
 802021a:	0004      	movs	r4, r0
 802021c:	0008      	movs	r0, r1
 802021e:	0011      	movs	r1, r2
 8020220:	001a      	movs	r2, r3
 8020222:	2300      	movs	r3, #0
 8020224:	4d05      	ldr	r5, [pc, #20]	@ (802023c <_read_r+0x24>)
 8020226:	602b      	str	r3, [r5, #0]
 8020228:	f7ed fc5d 	bl	800dae6 <_read>
 802022c:	1c43      	adds	r3, r0, #1
 802022e:	d103      	bne.n	8020238 <_read_r+0x20>
 8020230:	682b      	ldr	r3, [r5, #0]
 8020232:	2b00      	cmp	r3, #0
 8020234:	d000      	beq.n	8020238 <_read_r+0x20>
 8020236:	6023      	str	r3, [r4, #0]
 8020238:	bd70      	pop	{r4, r5, r6, pc}
 802023a:	46c0      	nop			@ (mov r8, r8)
 802023c:	2000379c 	.word	0x2000379c

08020240 <_write_r>:
 8020240:	b570      	push	{r4, r5, r6, lr}
 8020242:	0004      	movs	r4, r0
 8020244:	0008      	movs	r0, r1
 8020246:	0011      	movs	r1, r2
 8020248:	001a      	movs	r2, r3
 802024a:	2300      	movs	r3, #0
 802024c:	4d05      	ldr	r5, [pc, #20]	@ (8020264 <_write_r+0x24>)
 802024e:	602b      	str	r3, [r5, #0]
 8020250:	f7ee f91e 	bl	800e490 <_write>
 8020254:	1c43      	adds	r3, r0, #1
 8020256:	d103      	bne.n	8020260 <_write_r+0x20>
 8020258:	682b      	ldr	r3, [r5, #0]
 802025a:	2b00      	cmp	r3, #0
 802025c:	d000      	beq.n	8020260 <_write_r+0x20>
 802025e:	6023      	str	r3, [r4, #0]
 8020260:	bd70      	pop	{r4, r5, r6, pc}
 8020262:	46c0      	nop			@ (mov r8, r8)
 8020264:	2000379c 	.word	0x2000379c

08020268 <__errno>:
 8020268:	4b01      	ldr	r3, [pc, #4]	@ (8020270 <__errno+0x8>)
 802026a:	6818      	ldr	r0, [r3, #0]
 802026c:	4770      	bx	lr
 802026e:	46c0      	nop			@ (mov r8, r8)
 8020270:	200003c8 	.word	0x200003c8

08020274 <__libc_init_array>:
 8020274:	b570      	push	{r4, r5, r6, lr}
 8020276:	2600      	movs	r6, #0
 8020278:	4c0c      	ldr	r4, [pc, #48]	@ (80202ac <__libc_init_array+0x38>)
 802027a:	4d0d      	ldr	r5, [pc, #52]	@ (80202b0 <__libc_init_array+0x3c>)
 802027c:	1b64      	subs	r4, r4, r5
 802027e:	10a4      	asrs	r4, r4, #2
 8020280:	42a6      	cmp	r6, r4
 8020282:	d109      	bne.n	8020298 <__libc_init_array+0x24>
 8020284:	2600      	movs	r6, #0
 8020286:	f002 fee9 	bl	802305c <_init>
 802028a:	4c0a      	ldr	r4, [pc, #40]	@ (80202b4 <__libc_init_array+0x40>)
 802028c:	4d0a      	ldr	r5, [pc, #40]	@ (80202b8 <__libc_init_array+0x44>)
 802028e:	1b64      	subs	r4, r4, r5
 8020290:	10a4      	asrs	r4, r4, #2
 8020292:	42a6      	cmp	r6, r4
 8020294:	d105      	bne.n	80202a2 <__libc_init_array+0x2e>
 8020296:	bd70      	pop	{r4, r5, r6, pc}
 8020298:	00b3      	lsls	r3, r6, #2
 802029a:	58eb      	ldr	r3, [r5, r3]
 802029c:	4798      	blx	r3
 802029e:	3601      	adds	r6, #1
 80202a0:	e7ee      	b.n	8020280 <__libc_init_array+0xc>
 80202a2:	00b3      	lsls	r3, r6, #2
 80202a4:	58eb      	ldr	r3, [r5, r3]
 80202a6:	4798      	blx	r3
 80202a8:	3601      	adds	r6, #1
 80202aa:	e7f2      	b.n	8020292 <__libc_init_array+0x1e>
 80202ac:	08025f18 	.word	0x08025f18
 80202b0:	08025f18 	.word	0x08025f18
 80202b4:	08025f1c 	.word	0x08025f1c
 80202b8:	08025f18 	.word	0x08025f18

080202bc <__retarget_lock_init_recursive>:
 80202bc:	4770      	bx	lr

080202be <__retarget_lock_acquire_recursive>:
 80202be:	4770      	bx	lr

080202c0 <__retarget_lock_release_recursive>:
 80202c0:	4770      	bx	lr

080202c2 <memchr>:
 80202c2:	b2c9      	uxtb	r1, r1
 80202c4:	1882      	adds	r2, r0, r2
 80202c6:	4290      	cmp	r0, r2
 80202c8:	d101      	bne.n	80202ce <memchr+0xc>
 80202ca:	2000      	movs	r0, #0
 80202cc:	4770      	bx	lr
 80202ce:	7803      	ldrb	r3, [r0, #0]
 80202d0:	428b      	cmp	r3, r1
 80202d2:	d0fb      	beq.n	80202cc <memchr+0xa>
 80202d4:	3001      	adds	r0, #1
 80202d6:	e7f6      	b.n	80202c6 <memchr+0x4>

080202d8 <memcpy>:
 80202d8:	2300      	movs	r3, #0
 80202da:	b510      	push	{r4, lr}
 80202dc:	429a      	cmp	r2, r3
 80202de:	d100      	bne.n	80202e2 <memcpy+0xa>
 80202e0:	bd10      	pop	{r4, pc}
 80202e2:	5ccc      	ldrb	r4, [r1, r3]
 80202e4:	54c4      	strb	r4, [r0, r3]
 80202e6:	3301      	adds	r3, #1
 80202e8:	e7f8      	b.n	80202dc <memcpy+0x4>
	...

080202ec <nan>:
 80202ec:	2000      	movs	r0, #0
 80202ee:	4901      	ldr	r1, [pc, #4]	@ (80202f4 <nan+0x8>)
 80202f0:	4770      	bx	lr
 80202f2:	46c0      	nop			@ (mov r8, r8)
 80202f4:	7ff80000 	.word	0x7ff80000

080202f8 <quorem>:
 80202f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202fa:	6902      	ldr	r2, [r0, #16]
 80202fc:	690f      	ldr	r7, [r1, #16]
 80202fe:	b087      	sub	sp, #28
 8020300:	0006      	movs	r6, r0
 8020302:	000b      	movs	r3, r1
 8020304:	2000      	movs	r0, #0
 8020306:	9102      	str	r1, [sp, #8]
 8020308:	42ba      	cmp	r2, r7
 802030a:	db6d      	blt.n	80203e8 <quorem+0xf0>
 802030c:	3f01      	subs	r7, #1
 802030e:	00bc      	lsls	r4, r7, #2
 8020310:	3314      	adds	r3, #20
 8020312:	9305      	str	r3, [sp, #20]
 8020314:	191b      	adds	r3, r3, r4
 8020316:	9303      	str	r3, [sp, #12]
 8020318:	0033      	movs	r3, r6
 802031a:	3314      	adds	r3, #20
 802031c:	191c      	adds	r4, r3, r4
 802031e:	9301      	str	r3, [sp, #4]
 8020320:	6823      	ldr	r3, [r4, #0]
 8020322:	9304      	str	r3, [sp, #16]
 8020324:	9b03      	ldr	r3, [sp, #12]
 8020326:	9804      	ldr	r0, [sp, #16]
 8020328:	681d      	ldr	r5, [r3, #0]
 802032a:	3501      	adds	r5, #1
 802032c:	0029      	movs	r1, r5
 802032e:	f7df ff39 	bl	80001a4 <__udivsi3>
 8020332:	9b04      	ldr	r3, [sp, #16]
 8020334:	9000      	str	r0, [sp, #0]
 8020336:	42ab      	cmp	r3, r5
 8020338:	d32b      	bcc.n	8020392 <quorem+0x9a>
 802033a:	9b05      	ldr	r3, [sp, #20]
 802033c:	9d01      	ldr	r5, [sp, #4]
 802033e:	469c      	mov	ip, r3
 8020340:	2300      	movs	r3, #0
 8020342:	9305      	str	r3, [sp, #20]
 8020344:	9304      	str	r3, [sp, #16]
 8020346:	4662      	mov	r2, ip
 8020348:	ca08      	ldmia	r2!, {r3}
 802034a:	6828      	ldr	r0, [r5, #0]
 802034c:	4694      	mov	ip, r2
 802034e:	9a00      	ldr	r2, [sp, #0]
 8020350:	b299      	uxth	r1, r3
 8020352:	4351      	muls	r1, r2
 8020354:	9a05      	ldr	r2, [sp, #20]
 8020356:	0c1b      	lsrs	r3, r3, #16
 8020358:	1889      	adds	r1, r1, r2
 802035a:	9a00      	ldr	r2, [sp, #0]
 802035c:	4353      	muls	r3, r2
 802035e:	0c0a      	lsrs	r2, r1, #16
 8020360:	189b      	adds	r3, r3, r2
 8020362:	0c1a      	lsrs	r2, r3, #16
 8020364:	b289      	uxth	r1, r1
 8020366:	9205      	str	r2, [sp, #20]
 8020368:	b282      	uxth	r2, r0
 802036a:	1a52      	subs	r2, r2, r1
 802036c:	9904      	ldr	r1, [sp, #16]
 802036e:	0c00      	lsrs	r0, r0, #16
 8020370:	1852      	adds	r2, r2, r1
 8020372:	b29b      	uxth	r3, r3
 8020374:	1411      	asrs	r1, r2, #16
 8020376:	1ac3      	subs	r3, r0, r3
 8020378:	185b      	adds	r3, r3, r1
 802037a:	1419      	asrs	r1, r3, #16
 802037c:	b292      	uxth	r2, r2
 802037e:	041b      	lsls	r3, r3, #16
 8020380:	431a      	orrs	r2, r3
 8020382:	9b03      	ldr	r3, [sp, #12]
 8020384:	9104      	str	r1, [sp, #16]
 8020386:	c504      	stmia	r5!, {r2}
 8020388:	4563      	cmp	r3, ip
 802038a:	d2dc      	bcs.n	8020346 <quorem+0x4e>
 802038c:	6823      	ldr	r3, [r4, #0]
 802038e:	2b00      	cmp	r3, #0
 8020390:	d030      	beq.n	80203f4 <quorem+0xfc>
 8020392:	0030      	movs	r0, r6
 8020394:	9902      	ldr	r1, [sp, #8]
 8020396:	f001 fd7d 	bl	8021e94 <__mcmp>
 802039a:	2800      	cmp	r0, #0
 802039c:	db23      	blt.n	80203e6 <quorem+0xee>
 802039e:	0034      	movs	r4, r6
 80203a0:	2500      	movs	r5, #0
 80203a2:	9902      	ldr	r1, [sp, #8]
 80203a4:	3414      	adds	r4, #20
 80203a6:	3114      	adds	r1, #20
 80203a8:	6823      	ldr	r3, [r4, #0]
 80203aa:	c901      	ldmia	r1!, {r0}
 80203ac:	9302      	str	r3, [sp, #8]
 80203ae:	466b      	mov	r3, sp
 80203b0:	891b      	ldrh	r3, [r3, #8]
 80203b2:	b282      	uxth	r2, r0
 80203b4:	1a9a      	subs	r2, r3, r2
 80203b6:	9b02      	ldr	r3, [sp, #8]
 80203b8:	1952      	adds	r2, r2, r5
 80203ba:	0c00      	lsrs	r0, r0, #16
 80203bc:	0c1b      	lsrs	r3, r3, #16
 80203be:	1a1b      	subs	r3, r3, r0
 80203c0:	1410      	asrs	r0, r2, #16
 80203c2:	181b      	adds	r3, r3, r0
 80203c4:	141d      	asrs	r5, r3, #16
 80203c6:	b292      	uxth	r2, r2
 80203c8:	041b      	lsls	r3, r3, #16
 80203ca:	431a      	orrs	r2, r3
 80203cc:	9b03      	ldr	r3, [sp, #12]
 80203ce:	c404      	stmia	r4!, {r2}
 80203d0:	428b      	cmp	r3, r1
 80203d2:	d2e9      	bcs.n	80203a8 <quorem+0xb0>
 80203d4:	9a01      	ldr	r2, [sp, #4]
 80203d6:	00bb      	lsls	r3, r7, #2
 80203d8:	18d3      	adds	r3, r2, r3
 80203da:	681a      	ldr	r2, [r3, #0]
 80203dc:	2a00      	cmp	r2, #0
 80203de:	d013      	beq.n	8020408 <quorem+0x110>
 80203e0:	9b00      	ldr	r3, [sp, #0]
 80203e2:	3301      	adds	r3, #1
 80203e4:	9300      	str	r3, [sp, #0]
 80203e6:	9800      	ldr	r0, [sp, #0]
 80203e8:	b007      	add	sp, #28
 80203ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80203ec:	6823      	ldr	r3, [r4, #0]
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d104      	bne.n	80203fc <quorem+0x104>
 80203f2:	3f01      	subs	r7, #1
 80203f4:	9b01      	ldr	r3, [sp, #4]
 80203f6:	3c04      	subs	r4, #4
 80203f8:	42a3      	cmp	r3, r4
 80203fa:	d3f7      	bcc.n	80203ec <quorem+0xf4>
 80203fc:	6137      	str	r7, [r6, #16]
 80203fe:	e7c8      	b.n	8020392 <quorem+0x9a>
 8020400:	681a      	ldr	r2, [r3, #0]
 8020402:	2a00      	cmp	r2, #0
 8020404:	d104      	bne.n	8020410 <quorem+0x118>
 8020406:	3f01      	subs	r7, #1
 8020408:	9a01      	ldr	r2, [sp, #4]
 802040a:	3b04      	subs	r3, #4
 802040c:	429a      	cmp	r2, r3
 802040e:	d3f7      	bcc.n	8020400 <quorem+0x108>
 8020410:	6137      	str	r7, [r6, #16]
 8020412:	e7e5      	b.n	80203e0 <quorem+0xe8>

08020414 <_dtoa_r>:
 8020414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020416:	0014      	movs	r4, r2
 8020418:	001d      	movs	r5, r3
 802041a:	69c6      	ldr	r6, [r0, #28]
 802041c:	b09d      	sub	sp, #116	@ 0x74
 802041e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020420:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020422:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020424:	9003      	str	r0, [sp, #12]
 8020426:	2e00      	cmp	r6, #0
 8020428:	d10f      	bne.n	802044a <_dtoa_r+0x36>
 802042a:	2010      	movs	r0, #16
 802042c:	f001 f98a 	bl	8021744 <malloc>
 8020430:	9b03      	ldr	r3, [sp, #12]
 8020432:	1e02      	subs	r2, r0, #0
 8020434:	61d8      	str	r0, [r3, #28]
 8020436:	d104      	bne.n	8020442 <_dtoa_r+0x2e>
 8020438:	21ef      	movs	r1, #239	@ 0xef
 802043a:	4bc7      	ldr	r3, [pc, #796]	@ (8020758 <_dtoa_r+0x344>)
 802043c:	48c7      	ldr	r0, [pc, #796]	@ (802075c <_dtoa_r+0x348>)
 802043e:	f002 fb2f 	bl	8022aa0 <__assert_func>
 8020442:	6046      	str	r6, [r0, #4]
 8020444:	6086      	str	r6, [r0, #8]
 8020446:	6006      	str	r6, [r0, #0]
 8020448:	60c6      	str	r6, [r0, #12]
 802044a:	9b03      	ldr	r3, [sp, #12]
 802044c:	69db      	ldr	r3, [r3, #28]
 802044e:	6819      	ldr	r1, [r3, #0]
 8020450:	2900      	cmp	r1, #0
 8020452:	d00b      	beq.n	802046c <_dtoa_r+0x58>
 8020454:	685a      	ldr	r2, [r3, #4]
 8020456:	2301      	movs	r3, #1
 8020458:	4093      	lsls	r3, r2
 802045a:	604a      	str	r2, [r1, #4]
 802045c:	608b      	str	r3, [r1, #8]
 802045e:	9803      	ldr	r0, [sp, #12]
 8020460:	f001 fa82 	bl	8021968 <_Bfree>
 8020464:	2200      	movs	r2, #0
 8020466:	9b03      	ldr	r3, [sp, #12]
 8020468:	69db      	ldr	r3, [r3, #28]
 802046a:	601a      	str	r2, [r3, #0]
 802046c:	2d00      	cmp	r5, #0
 802046e:	da1e      	bge.n	80204ae <_dtoa_r+0x9a>
 8020470:	2301      	movs	r3, #1
 8020472:	603b      	str	r3, [r7, #0]
 8020474:	006b      	lsls	r3, r5, #1
 8020476:	085b      	lsrs	r3, r3, #1
 8020478:	930b      	str	r3, [sp, #44]	@ 0x2c
 802047a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802047c:	4bb8      	ldr	r3, [pc, #736]	@ (8020760 <_dtoa_r+0x34c>)
 802047e:	4ab8      	ldr	r2, [pc, #736]	@ (8020760 <_dtoa_r+0x34c>)
 8020480:	403b      	ands	r3, r7
 8020482:	4293      	cmp	r3, r2
 8020484:	d116      	bne.n	80204b4 <_dtoa_r+0xa0>
 8020486:	4bb7      	ldr	r3, [pc, #732]	@ (8020764 <_dtoa_r+0x350>)
 8020488:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802048a:	6013      	str	r3, [r2, #0]
 802048c:	033b      	lsls	r3, r7, #12
 802048e:	0b1b      	lsrs	r3, r3, #12
 8020490:	4323      	orrs	r3, r4
 8020492:	d101      	bne.n	8020498 <_dtoa_r+0x84>
 8020494:	f000 fd83 	bl	8020f9e <_dtoa_r+0xb8a>
 8020498:	4bb3      	ldr	r3, [pc, #716]	@ (8020768 <_dtoa_r+0x354>)
 802049a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802049c:	9308      	str	r3, [sp, #32]
 802049e:	2a00      	cmp	r2, #0
 80204a0:	d002      	beq.n	80204a8 <_dtoa_r+0x94>
 80204a2:	4bb2      	ldr	r3, [pc, #712]	@ (802076c <_dtoa_r+0x358>)
 80204a4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80204a6:	6013      	str	r3, [r2, #0]
 80204a8:	9808      	ldr	r0, [sp, #32]
 80204aa:	b01d      	add	sp, #116	@ 0x74
 80204ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204ae:	2300      	movs	r3, #0
 80204b0:	603b      	str	r3, [r7, #0]
 80204b2:	e7e2      	b.n	802047a <_dtoa_r+0x66>
 80204b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80204b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80204b8:	9212      	str	r2, [sp, #72]	@ 0x48
 80204ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80204bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80204be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80204c0:	2200      	movs	r2, #0
 80204c2:	2300      	movs	r3, #0
 80204c4:	f7df fff4 	bl	80004b0 <__aeabi_dcmpeq>
 80204c8:	1e06      	subs	r6, r0, #0
 80204ca:	d00b      	beq.n	80204e4 <_dtoa_r+0xd0>
 80204cc:	2301      	movs	r3, #1
 80204ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80204d0:	6013      	str	r3, [r2, #0]
 80204d2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d002      	beq.n	80204de <_dtoa_r+0xca>
 80204d8:	4ba5      	ldr	r3, [pc, #660]	@ (8020770 <_dtoa_r+0x35c>)
 80204da:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80204dc:	6013      	str	r3, [r2, #0]
 80204de:	4ba5      	ldr	r3, [pc, #660]	@ (8020774 <_dtoa_r+0x360>)
 80204e0:	9308      	str	r3, [sp, #32]
 80204e2:	e7e1      	b.n	80204a8 <_dtoa_r+0x94>
 80204e4:	ab1a      	add	r3, sp, #104	@ 0x68
 80204e6:	9301      	str	r3, [sp, #4]
 80204e8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80204ea:	9300      	str	r3, [sp, #0]
 80204ec:	9803      	ldr	r0, [sp, #12]
 80204ee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80204f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80204f2:	f001 fdf1 	bl	80220d8 <__d2b>
 80204f6:	007a      	lsls	r2, r7, #1
 80204f8:	9005      	str	r0, [sp, #20]
 80204fa:	0d52      	lsrs	r2, r2, #21
 80204fc:	d100      	bne.n	8020500 <_dtoa_r+0xec>
 80204fe:	e07b      	b.n	80205f8 <_dtoa_r+0x1e4>
 8020500:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020502:	9618      	str	r6, [sp, #96]	@ 0x60
 8020504:	0319      	lsls	r1, r3, #12
 8020506:	4b9c      	ldr	r3, [pc, #624]	@ (8020778 <_dtoa_r+0x364>)
 8020508:	0b09      	lsrs	r1, r1, #12
 802050a:	430b      	orrs	r3, r1
 802050c:	499b      	ldr	r1, [pc, #620]	@ (802077c <_dtoa_r+0x368>)
 802050e:	1857      	adds	r7, r2, r1
 8020510:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020512:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020514:	0019      	movs	r1, r3
 8020516:	2200      	movs	r2, #0
 8020518:	4b99      	ldr	r3, [pc, #612]	@ (8020780 <_dtoa_r+0x36c>)
 802051a:	f7e2 fb57 	bl	8002bcc <__aeabi_dsub>
 802051e:	4a99      	ldr	r2, [pc, #612]	@ (8020784 <_dtoa_r+0x370>)
 8020520:	4b99      	ldr	r3, [pc, #612]	@ (8020788 <_dtoa_r+0x374>)
 8020522:	f7e2 f88b 	bl	800263c <__aeabi_dmul>
 8020526:	4a99      	ldr	r2, [pc, #612]	@ (802078c <_dtoa_r+0x378>)
 8020528:	4b99      	ldr	r3, [pc, #612]	@ (8020790 <_dtoa_r+0x37c>)
 802052a:	f7e1 f8df 	bl	80016ec <__aeabi_dadd>
 802052e:	0004      	movs	r4, r0
 8020530:	0038      	movs	r0, r7
 8020532:	000d      	movs	r5, r1
 8020534:	f7e2 ff44 	bl	80033c0 <__aeabi_i2d>
 8020538:	4a96      	ldr	r2, [pc, #600]	@ (8020794 <_dtoa_r+0x380>)
 802053a:	4b97      	ldr	r3, [pc, #604]	@ (8020798 <_dtoa_r+0x384>)
 802053c:	f7e2 f87e 	bl	800263c <__aeabi_dmul>
 8020540:	0002      	movs	r2, r0
 8020542:	000b      	movs	r3, r1
 8020544:	0020      	movs	r0, r4
 8020546:	0029      	movs	r1, r5
 8020548:	f7e1 f8d0 	bl	80016ec <__aeabi_dadd>
 802054c:	0004      	movs	r4, r0
 802054e:	000d      	movs	r5, r1
 8020550:	f7e2 fefa 	bl	8003348 <__aeabi_d2iz>
 8020554:	2200      	movs	r2, #0
 8020556:	9004      	str	r0, [sp, #16]
 8020558:	2300      	movs	r3, #0
 802055a:	0020      	movs	r0, r4
 802055c:	0029      	movs	r1, r5
 802055e:	f7df ffad 	bl	80004bc <__aeabi_dcmplt>
 8020562:	2800      	cmp	r0, #0
 8020564:	d00b      	beq.n	802057e <_dtoa_r+0x16a>
 8020566:	9804      	ldr	r0, [sp, #16]
 8020568:	f7e2 ff2a 	bl	80033c0 <__aeabi_i2d>
 802056c:	002b      	movs	r3, r5
 802056e:	0022      	movs	r2, r4
 8020570:	f7df ff9e 	bl	80004b0 <__aeabi_dcmpeq>
 8020574:	4243      	negs	r3, r0
 8020576:	4158      	adcs	r0, r3
 8020578:	9b04      	ldr	r3, [sp, #16]
 802057a:	1a1b      	subs	r3, r3, r0
 802057c:	9304      	str	r3, [sp, #16]
 802057e:	2301      	movs	r3, #1
 8020580:	9315      	str	r3, [sp, #84]	@ 0x54
 8020582:	9b04      	ldr	r3, [sp, #16]
 8020584:	2b16      	cmp	r3, #22
 8020586:	d810      	bhi.n	80205aa <_dtoa_r+0x196>
 8020588:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802058a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802058c:	9a04      	ldr	r2, [sp, #16]
 802058e:	4b83      	ldr	r3, [pc, #524]	@ (802079c <_dtoa_r+0x388>)
 8020590:	00d2      	lsls	r2, r2, #3
 8020592:	189b      	adds	r3, r3, r2
 8020594:	681a      	ldr	r2, [r3, #0]
 8020596:	685b      	ldr	r3, [r3, #4]
 8020598:	f7df ff90 	bl	80004bc <__aeabi_dcmplt>
 802059c:	2800      	cmp	r0, #0
 802059e:	d047      	beq.n	8020630 <_dtoa_r+0x21c>
 80205a0:	9b04      	ldr	r3, [sp, #16]
 80205a2:	3b01      	subs	r3, #1
 80205a4:	9304      	str	r3, [sp, #16]
 80205a6:	2300      	movs	r3, #0
 80205a8:	9315      	str	r3, [sp, #84]	@ 0x54
 80205aa:	2200      	movs	r2, #0
 80205ac:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80205ae:	9206      	str	r2, [sp, #24]
 80205b0:	1bdb      	subs	r3, r3, r7
 80205b2:	1e5a      	subs	r2, r3, #1
 80205b4:	d53e      	bpl.n	8020634 <_dtoa_r+0x220>
 80205b6:	2201      	movs	r2, #1
 80205b8:	1ad3      	subs	r3, r2, r3
 80205ba:	9306      	str	r3, [sp, #24]
 80205bc:	2300      	movs	r3, #0
 80205be:	930d      	str	r3, [sp, #52]	@ 0x34
 80205c0:	9b04      	ldr	r3, [sp, #16]
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	db38      	blt.n	8020638 <_dtoa_r+0x224>
 80205c6:	9a04      	ldr	r2, [sp, #16]
 80205c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80205ca:	4694      	mov	ip, r2
 80205cc:	4463      	add	r3, ip
 80205ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80205d0:	2300      	movs	r3, #0
 80205d2:	9214      	str	r2, [sp, #80]	@ 0x50
 80205d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80205d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80205d8:	2401      	movs	r4, #1
 80205da:	2b09      	cmp	r3, #9
 80205dc:	d867      	bhi.n	80206ae <_dtoa_r+0x29a>
 80205de:	2b05      	cmp	r3, #5
 80205e0:	dd02      	ble.n	80205e8 <_dtoa_r+0x1d4>
 80205e2:	2400      	movs	r4, #0
 80205e4:	3b04      	subs	r3, #4
 80205e6:	9322      	str	r3, [sp, #136]	@ 0x88
 80205e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80205ea:	1e98      	subs	r0, r3, #2
 80205ec:	2803      	cmp	r0, #3
 80205ee:	d867      	bhi.n	80206c0 <_dtoa_r+0x2ac>
 80205f0:	f7df fdc4 	bl	800017c <__gnu_thumb1_case_uqi>
 80205f4:	5b383a2b 	.word	0x5b383a2b
 80205f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80205fa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80205fc:	18f6      	adds	r6, r6, r3
 80205fe:	4b68      	ldr	r3, [pc, #416]	@ (80207a0 <_dtoa_r+0x38c>)
 8020600:	18f2      	adds	r2, r6, r3
 8020602:	2a20      	cmp	r2, #32
 8020604:	dd0f      	ble.n	8020626 <_dtoa_r+0x212>
 8020606:	2340      	movs	r3, #64	@ 0x40
 8020608:	1a9b      	subs	r3, r3, r2
 802060a:	409f      	lsls	r7, r3
 802060c:	4b65      	ldr	r3, [pc, #404]	@ (80207a4 <_dtoa_r+0x390>)
 802060e:	0038      	movs	r0, r7
 8020610:	18f3      	adds	r3, r6, r3
 8020612:	40dc      	lsrs	r4, r3
 8020614:	4320      	orrs	r0, r4
 8020616:	f7e2 ff01 	bl	800341c <__aeabi_ui2d>
 802061a:	2201      	movs	r2, #1
 802061c:	4b62      	ldr	r3, [pc, #392]	@ (80207a8 <_dtoa_r+0x394>)
 802061e:	1e77      	subs	r7, r6, #1
 8020620:	18cb      	adds	r3, r1, r3
 8020622:	9218      	str	r2, [sp, #96]	@ 0x60
 8020624:	e776      	b.n	8020514 <_dtoa_r+0x100>
 8020626:	2320      	movs	r3, #32
 8020628:	0020      	movs	r0, r4
 802062a:	1a9b      	subs	r3, r3, r2
 802062c:	4098      	lsls	r0, r3
 802062e:	e7f2      	b.n	8020616 <_dtoa_r+0x202>
 8020630:	9015      	str	r0, [sp, #84]	@ 0x54
 8020632:	e7ba      	b.n	80205aa <_dtoa_r+0x196>
 8020634:	920d      	str	r2, [sp, #52]	@ 0x34
 8020636:	e7c3      	b.n	80205c0 <_dtoa_r+0x1ac>
 8020638:	9b06      	ldr	r3, [sp, #24]
 802063a:	9a04      	ldr	r2, [sp, #16]
 802063c:	1a9b      	subs	r3, r3, r2
 802063e:	9306      	str	r3, [sp, #24]
 8020640:	4253      	negs	r3, r2
 8020642:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020644:	2300      	movs	r3, #0
 8020646:	9314      	str	r3, [sp, #80]	@ 0x50
 8020648:	e7c5      	b.n	80205d6 <_dtoa_r+0x1c2>
 802064a:	2300      	movs	r3, #0
 802064c:	9310      	str	r3, [sp, #64]	@ 0x40
 802064e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020650:	930e      	str	r3, [sp, #56]	@ 0x38
 8020652:	9309      	str	r3, [sp, #36]	@ 0x24
 8020654:	2b00      	cmp	r3, #0
 8020656:	dc13      	bgt.n	8020680 <_dtoa_r+0x26c>
 8020658:	2301      	movs	r3, #1
 802065a:	001a      	movs	r2, r3
 802065c:	930e      	str	r3, [sp, #56]	@ 0x38
 802065e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020660:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020662:	e00d      	b.n	8020680 <_dtoa_r+0x26c>
 8020664:	2301      	movs	r3, #1
 8020666:	e7f1      	b.n	802064c <_dtoa_r+0x238>
 8020668:	2300      	movs	r3, #0
 802066a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802066c:	9310      	str	r3, [sp, #64]	@ 0x40
 802066e:	4694      	mov	ip, r2
 8020670:	9b04      	ldr	r3, [sp, #16]
 8020672:	4463      	add	r3, ip
 8020674:	930e      	str	r3, [sp, #56]	@ 0x38
 8020676:	3301      	adds	r3, #1
 8020678:	9309      	str	r3, [sp, #36]	@ 0x24
 802067a:	2b00      	cmp	r3, #0
 802067c:	dc00      	bgt.n	8020680 <_dtoa_r+0x26c>
 802067e:	2301      	movs	r3, #1
 8020680:	9a03      	ldr	r2, [sp, #12]
 8020682:	2100      	movs	r1, #0
 8020684:	69d0      	ldr	r0, [r2, #28]
 8020686:	2204      	movs	r2, #4
 8020688:	0015      	movs	r5, r2
 802068a:	3514      	adds	r5, #20
 802068c:	429d      	cmp	r5, r3
 802068e:	d91b      	bls.n	80206c8 <_dtoa_r+0x2b4>
 8020690:	6041      	str	r1, [r0, #4]
 8020692:	9803      	ldr	r0, [sp, #12]
 8020694:	f001 f924 	bl	80218e0 <_Balloc>
 8020698:	9008      	str	r0, [sp, #32]
 802069a:	2800      	cmp	r0, #0
 802069c:	d117      	bne.n	80206ce <_dtoa_r+0x2ba>
 802069e:	21b0      	movs	r1, #176	@ 0xb0
 80206a0:	4b42      	ldr	r3, [pc, #264]	@ (80207ac <_dtoa_r+0x398>)
 80206a2:	482e      	ldr	r0, [pc, #184]	@ (802075c <_dtoa_r+0x348>)
 80206a4:	9a08      	ldr	r2, [sp, #32]
 80206a6:	31ff      	adds	r1, #255	@ 0xff
 80206a8:	e6c9      	b.n	802043e <_dtoa_r+0x2a>
 80206aa:	2301      	movs	r3, #1
 80206ac:	e7dd      	b.n	802066a <_dtoa_r+0x256>
 80206ae:	2300      	movs	r3, #0
 80206b0:	9410      	str	r4, [sp, #64]	@ 0x40
 80206b2:	9322      	str	r3, [sp, #136]	@ 0x88
 80206b4:	3b01      	subs	r3, #1
 80206b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80206b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80206ba:	2200      	movs	r2, #0
 80206bc:	3313      	adds	r3, #19
 80206be:	e7cf      	b.n	8020660 <_dtoa_r+0x24c>
 80206c0:	2301      	movs	r3, #1
 80206c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80206c4:	3b02      	subs	r3, #2
 80206c6:	e7f6      	b.n	80206b6 <_dtoa_r+0x2a2>
 80206c8:	3101      	adds	r1, #1
 80206ca:	0052      	lsls	r2, r2, #1
 80206cc:	e7dc      	b.n	8020688 <_dtoa_r+0x274>
 80206ce:	9b03      	ldr	r3, [sp, #12]
 80206d0:	9a08      	ldr	r2, [sp, #32]
 80206d2:	69db      	ldr	r3, [r3, #28]
 80206d4:	601a      	str	r2, [r3, #0]
 80206d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206d8:	2b0e      	cmp	r3, #14
 80206da:	d900      	bls.n	80206de <_dtoa_r+0x2ca>
 80206dc:	e0d9      	b.n	8020892 <_dtoa_r+0x47e>
 80206de:	2c00      	cmp	r4, #0
 80206e0:	d100      	bne.n	80206e4 <_dtoa_r+0x2d0>
 80206e2:	e0d6      	b.n	8020892 <_dtoa_r+0x47e>
 80206e4:	9b04      	ldr	r3, [sp, #16]
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	dd64      	ble.n	80207b4 <_dtoa_r+0x3a0>
 80206ea:	210f      	movs	r1, #15
 80206ec:	9a04      	ldr	r2, [sp, #16]
 80206ee:	4b2b      	ldr	r3, [pc, #172]	@ (802079c <_dtoa_r+0x388>)
 80206f0:	400a      	ands	r2, r1
 80206f2:	00d2      	lsls	r2, r2, #3
 80206f4:	189b      	adds	r3, r3, r2
 80206f6:	681e      	ldr	r6, [r3, #0]
 80206f8:	685f      	ldr	r7, [r3, #4]
 80206fa:	9b04      	ldr	r3, [sp, #16]
 80206fc:	2402      	movs	r4, #2
 80206fe:	111d      	asrs	r5, r3, #4
 8020700:	05db      	lsls	r3, r3, #23
 8020702:	d50a      	bpl.n	802071a <_dtoa_r+0x306>
 8020704:	4b2a      	ldr	r3, [pc, #168]	@ (80207b0 <_dtoa_r+0x39c>)
 8020706:	400d      	ands	r5, r1
 8020708:	6a1a      	ldr	r2, [r3, #32]
 802070a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802070c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802070e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020710:	f7e1 fb50 	bl	8001db4 <__aeabi_ddiv>
 8020714:	900a      	str	r0, [sp, #40]	@ 0x28
 8020716:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020718:	3401      	adds	r4, #1
 802071a:	4b25      	ldr	r3, [pc, #148]	@ (80207b0 <_dtoa_r+0x39c>)
 802071c:	930c      	str	r3, [sp, #48]	@ 0x30
 802071e:	2d00      	cmp	r5, #0
 8020720:	d108      	bne.n	8020734 <_dtoa_r+0x320>
 8020722:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020726:	0032      	movs	r2, r6
 8020728:	003b      	movs	r3, r7
 802072a:	f7e1 fb43 	bl	8001db4 <__aeabi_ddiv>
 802072e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020730:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020732:	e05a      	b.n	80207ea <_dtoa_r+0x3d6>
 8020734:	2301      	movs	r3, #1
 8020736:	421d      	tst	r5, r3
 8020738:	d009      	beq.n	802074e <_dtoa_r+0x33a>
 802073a:	18e4      	adds	r4, r4, r3
 802073c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802073e:	0030      	movs	r0, r6
 8020740:	681a      	ldr	r2, [r3, #0]
 8020742:	685b      	ldr	r3, [r3, #4]
 8020744:	0039      	movs	r1, r7
 8020746:	f7e1 ff79 	bl	800263c <__aeabi_dmul>
 802074a:	0006      	movs	r6, r0
 802074c:	000f      	movs	r7, r1
 802074e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020750:	106d      	asrs	r5, r5, #1
 8020752:	3308      	adds	r3, #8
 8020754:	e7e2      	b.n	802071c <_dtoa_r+0x308>
 8020756:	46c0      	nop			@ (mov r8, r8)
 8020758:	08025c72 	.word	0x08025c72
 802075c:	08025c89 	.word	0x08025c89
 8020760:	7ff00000 	.word	0x7ff00000
 8020764:	0000270f 	.word	0x0000270f
 8020768:	08025c6e 	.word	0x08025c6e
 802076c:	08025c71 	.word	0x08025c71
 8020770:	08025c3a 	.word	0x08025c3a
 8020774:	08025c39 	.word	0x08025c39
 8020778:	3ff00000 	.word	0x3ff00000
 802077c:	fffffc01 	.word	0xfffffc01
 8020780:	3ff80000 	.word	0x3ff80000
 8020784:	636f4361 	.word	0x636f4361
 8020788:	3fd287a7 	.word	0x3fd287a7
 802078c:	8b60c8b3 	.word	0x8b60c8b3
 8020790:	3fc68a28 	.word	0x3fc68a28
 8020794:	509f79fb 	.word	0x509f79fb
 8020798:	3fd34413 	.word	0x3fd34413
 802079c:	08025de0 	.word	0x08025de0
 80207a0:	00000432 	.word	0x00000432
 80207a4:	00000412 	.word	0x00000412
 80207a8:	fe100000 	.word	0xfe100000
 80207ac:	08025ce1 	.word	0x08025ce1
 80207b0:	08025db8 	.word	0x08025db8
 80207b4:	9b04      	ldr	r3, [sp, #16]
 80207b6:	2402      	movs	r4, #2
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	d016      	beq.n	80207ea <_dtoa_r+0x3d6>
 80207bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80207c0:	220f      	movs	r2, #15
 80207c2:	425d      	negs	r5, r3
 80207c4:	402a      	ands	r2, r5
 80207c6:	4bd7      	ldr	r3, [pc, #860]	@ (8020b24 <_dtoa_r+0x710>)
 80207c8:	00d2      	lsls	r2, r2, #3
 80207ca:	189b      	adds	r3, r3, r2
 80207cc:	681a      	ldr	r2, [r3, #0]
 80207ce:	685b      	ldr	r3, [r3, #4]
 80207d0:	f7e1 ff34 	bl	800263c <__aeabi_dmul>
 80207d4:	2701      	movs	r7, #1
 80207d6:	2300      	movs	r3, #0
 80207d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80207da:	910b      	str	r1, [sp, #44]	@ 0x2c
 80207dc:	4ed2      	ldr	r6, [pc, #840]	@ (8020b28 <_dtoa_r+0x714>)
 80207de:	112d      	asrs	r5, r5, #4
 80207e0:	2d00      	cmp	r5, #0
 80207e2:	d000      	beq.n	80207e6 <_dtoa_r+0x3d2>
 80207e4:	e0ba      	b.n	802095c <_dtoa_r+0x548>
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d1a1      	bne.n	802072e <_dtoa_r+0x31a>
 80207ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80207ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80207ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d100      	bne.n	80207f6 <_dtoa_r+0x3e2>
 80207f4:	e0bd      	b.n	8020972 <_dtoa_r+0x55e>
 80207f6:	2200      	movs	r2, #0
 80207f8:	0030      	movs	r0, r6
 80207fa:	0039      	movs	r1, r7
 80207fc:	4bcb      	ldr	r3, [pc, #812]	@ (8020b2c <_dtoa_r+0x718>)
 80207fe:	f7df fe5d 	bl	80004bc <__aeabi_dcmplt>
 8020802:	2800      	cmp	r0, #0
 8020804:	d100      	bne.n	8020808 <_dtoa_r+0x3f4>
 8020806:	e0b4      	b.n	8020972 <_dtoa_r+0x55e>
 8020808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802080a:	2b00      	cmp	r3, #0
 802080c:	d100      	bne.n	8020810 <_dtoa_r+0x3fc>
 802080e:	e0b0      	b.n	8020972 <_dtoa_r+0x55e>
 8020810:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020812:	2b00      	cmp	r3, #0
 8020814:	dd39      	ble.n	802088a <_dtoa_r+0x476>
 8020816:	9b04      	ldr	r3, [sp, #16]
 8020818:	2200      	movs	r2, #0
 802081a:	3b01      	subs	r3, #1
 802081c:	930c      	str	r3, [sp, #48]	@ 0x30
 802081e:	0030      	movs	r0, r6
 8020820:	4bc3      	ldr	r3, [pc, #780]	@ (8020b30 <_dtoa_r+0x71c>)
 8020822:	0039      	movs	r1, r7
 8020824:	f7e1 ff0a 	bl	800263c <__aeabi_dmul>
 8020828:	900a      	str	r0, [sp, #40]	@ 0x28
 802082a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802082c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802082e:	3401      	adds	r4, #1
 8020830:	0020      	movs	r0, r4
 8020832:	9311      	str	r3, [sp, #68]	@ 0x44
 8020834:	f7e2 fdc4 	bl	80033c0 <__aeabi_i2d>
 8020838:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802083a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802083c:	f7e1 fefe 	bl	800263c <__aeabi_dmul>
 8020840:	4bbc      	ldr	r3, [pc, #752]	@ (8020b34 <_dtoa_r+0x720>)
 8020842:	2200      	movs	r2, #0
 8020844:	f7e0 ff52 	bl	80016ec <__aeabi_dadd>
 8020848:	4bbb      	ldr	r3, [pc, #748]	@ (8020b38 <_dtoa_r+0x724>)
 802084a:	0006      	movs	r6, r0
 802084c:	18cf      	adds	r7, r1, r3
 802084e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020850:	2b00      	cmp	r3, #0
 8020852:	d000      	beq.n	8020856 <_dtoa_r+0x442>
 8020854:	e091      	b.n	802097a <_dtoa_r+0x566>
 8020856:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020858:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802085a:	2200      	movs	r2, #0
 802085c:	4bb7      	ldr	r3, [pc, #732]	@ (8020b3c <_dtoa_r+0x728>)
 802085e:	f7e2 f9b5 	bl	8002bcc <__aeabi_dsub>
 8020862:	0032      	movs	r2, r6
 8020864:	003b      	movs	r3, r7
 8020866:	0004      	movs	r4, r0
 8020868:	000d      	movs	r5, r1
 802086a:	f7df fe3b 	bl	80004e4 <__aeabi_dcmpgt>
 802086e:	2800      	cmp	r0, #0
 8020870:	d000      	beq.n	8020874 <_dtoa_r+0x460>
 8020872:	e29d      	b.n	8020db0 <_dtoa_r+0x99c>
 8020874:	2180      	movs	r1, #128	@ 0x80
 8020876:	0609      	lsls	r1, r1, #24
 8020878:	187b      	adds	r3, r7, r1
 802087a:	0032      	movs	r2, r6
 802087c:	0020      	movs	r0, r4
 802087e:	0029      	movs	r1, r5
 8020880:	f7df fe1c 	bl	80004bc <__aeabi_dcmplt>
 8020884:	2800      	cmp	r0, #0
 8020886:	d000      	beq.n	802088a <_dtoa_r+0x476>
 8020888:	e130      	b.n	8020aec <_dtoa_r+0x6d8>
 802088a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802088c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802088e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020890:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020892:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020894:	2b00      	cmp	r3, #0
 8020896:	da00      	bge.n	802089a <_dtoa_r+0x486>
 8020898:	e177      	b.n	8020b8a <_dtoa_r+0x776>
 802089a:	9a04      	ldr	r2, [sp, #16]
 802089c:	2a0e      	cmp	r2, #14
 802089e:	dd00      	ble.n	80208a2 <_dtoa_r+0x48e>
 80208a0:	e173      	b.n	8020b8a <_dtoa_r+0x776>
 80208a2:	4ba0      	ldr	r3, [pc, #640]	@ (8020b24 <_dtoa_r+0x710>)
 80208a4:	00d2      	lsls	r2, r2, #3
 80208a6:	189b      	adds	r3, r3, r2
 80208a8:	685c      	ldr	r4, [r3, #4]
 80208aa:	681b      	ldr	r3, [r3, #0]
 80208ac:	9306      	str	r3, [sp, #24]
 80208ae:	9407      	str	r4, [sp, #28]
 80208b0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	da03      	bge.n	80208be <_dtoa_r+0x4aa>
 80208b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	dc00      	bgt.n	80208be <_dtoa_r+0x4aa>
 80208bc:	e106      	b.n	8020acc <_dtoa_r+0x6b8>
 80208be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80208c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80208c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208c4:	9d08      	ldr	r5, [sp, #32]
 80208c6:	3b01      	subs	r3, #1
 80208c8:	195b      	adds	r3, r3, r5
 80208ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80208cc:	9a06      	ldr	r2, [sp, #24]
 80208ce:	9b07      	ldr	r3, [sp, #28]
 80208d0:	0030      	movs	r0, r6
 80208d2:	0039      	movs	r1, r7
 80208d4:	f7e1 fa6e 	bl	8001db4 <__aeabi_ddiv>
 80208d8:	f7e2 fd36 	bl	8003348 <__aeabi_d2iz>
 80208dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80208de:	f7e2 fd6f 	bl	80033c0 <__aeabi_i2d>
 80208e2:	9a06      	ldr	r2, [sp, #24]
 80208e4:	9b07      	ldr	r3, [sp, #28]
 80208e6:	f7e1 fea9 	bl	800263c <__aeabi_dmul>
 80208ea:	0002      	movs	r2, r0
 80208ec:	000b      	movs	r3, r1
 80208ee:	0030      	movs	r0, r6
 80208f0:	0039      	movs	r1, r7
 80208f2:	f7e2 f96b 	bl	8002bcc <__aeabi_dsub>
 80208f6:	002b      	movs	r3, r5
 80208f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80208fa:	3501      	adds	r5, #1
 80208fc:	3230      	adds	r2, #48	@ 0x30
 80208fe:	701a      	strb	r2, [r3, #0]
 8020900:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020902:	002c      	movs	r4, r5
 8020904:	429a      	cmp	r2, r3
 8020906:	d000      	beq.n	802090a <_dtoa_r+0x4f6>
 8020908:	e131      	b.n	8020b6e <_dtoa_r+0x75a>
 802090a:	0002      	movs	r2, r0
 802090c:	000b      	movs	r3, r1
 802090e:	f7e0 feed 	bl	80016ec <__aeabi_dadd>
 8020912:	9a06      	ldr	r2, [sp, #24]
 8020914:	9b07      	ldr	r3, [sp, #28]
 8020916:	0006      	movs	r6, r0
 8020918:	000f      	movs	r7, r1
 802091a:	f7df fde3 	bl	80004e4 <__aeabi_dcmpgt>
 802091e:	2800      	cmp	r0, #0
 8020920:	d000      	beq.n	8020924 <_dtoa_r+0x510>
 8020922:	e10f      	b.n	8020b44 <_dtoa_r+0x730>
 8020924:	9a06      	ldr	r2, [sp, #24]
 8020926:	9b07      	ldr	r3, [sp, #28]
 8020928:	0030      	movs	r0, r6
 802092a:	0039      	movs	r1, r7
 802092c:	f7df fdc0 	bl	80004b0 <__aeabi_dcmpeq>
 8020930:	2800      	cmp	r0, #0
 8020932:	d003      	beq.n	802093c <_dtoa_r+0x528>
 8020934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020936:	07dd      	lsls	r5, r3, #31
 8020938:	d500      	bpl.n	802093c <_dtoa_r+0x528>
 802093a:	e103      	b.n	8020b44 <_dtoa_r+0x730>
 802093c:	9905      	ldr	r1, [sp, #20]
 802093e:	9803      	ldr	r0, [sp, #12]
 8020940:	f001 f812 	bl	8021968 <_Bfree>
 8020944:	2300      	movs	r3, #0
 8020946:	7023      	strb	r3, [r4, #0]
 8020948:	9b04      	ldr	r3, [sp, #16]
 802094a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802094c:	3301      	adds	r3, #1
 802094e:	6013      	str	r3, [r2, #0]
 8020950:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020952:	2b00      	cmp	r3, #0
 8020954:	d100      	bne.n	8020958 <_dtoa_r+0x544>
 8020956:	e5a7      	b.n	80204a8 <_dtoa_r+0x94>
 8020958:	601c      	str	r4, [r3, #0]
 802095a:	e5a5      	b.n	80204a8 <_dtoa_r+0x94>
 802095c:	423d      	tst	r5, r7
 802095e:	d005      	beq.n	802096c <_dtoa_r+0x558>
 8020960:	6832      	ldr	r2, [r6, #0]
 8020962:	6873      	ldr	r3, [r6, #4]
 8020964:	f7e1 fe6a 	bl	800263c <__aeabi_dmul>
 8020968:	003b      	movs	r3, r7
 802096a:	3401      	adds	r4, #1
 802096c:	106d      	asrs	r5, r5, #1
 802096e:	3608      	adds	r6, #8
 8020970:	e736      	b.n	80207e0 <_dtoa_r+0x3cc>
 8020972:	9b04      	ldr	r3, [sp, #16]
 8020974:	930c      	str	r3, [sp, #48]	@ 0x30
 8020976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020978:	e75a      	b.n	8020830 <_dtoa_r+0x41c>
 802097a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802097c:	4b69      	ldr	r3, [pc, #420]	@ (8020b24 <_dtoa_r+0x710>)
 802097e:	3a01      	subs	r2, #1
 8020980:	00d2      	lsls	r2, r2, #3
 8020982:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020984:	189b      	adds	r3, r3, r2
 8020986:	681a      	ldr	r2, [r3, #0]
 8020988:	685b      	ldr	r3, [r3, #4]
 802098a:	2900      	cmp	r1, #0
 802098c:	d04c      	beq.n	8020a28 <_dtoa_r+0x614>
 802098e:	2000      	movs	r0, #0
 8020990:	496b      	ldr	r1, [pc, #428]	@ (8020b40 <_dtoa_r+0x72c>)
 8020992:	f7e1 fa0f 	bl	8001db4 <__aeabi_ddiv>
 8020996:	0032      	movs	r2, r6
 8020998:	003b      	movs	r3, r7
 802099a:	f7e2 f917 	bl	8002bcc <__aeabi_dsub>
 802099e:	9a08      	ldr	r2, [sp, #32]
 80209a0:	0006      	movs	r6, r0
 80209a2:	4694      	mov	ip, r2
 80209a4:	000f      	movs	r7, r1
 80209a6:	9b08      	ldr	r3, [sp, #32]
 80209a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80209aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80209ac:	4463      	add	r3, ip
 80209ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80209b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209b4:	f7e2 fcc8 	bl	8003348 <__aeabi_d2iz>
 80209b8:	0005      	movs	r5, r0
 80209ba:	f7e2 fd01 	bl	80033c0 <__aeabi_i2d>
 80209be:	0002      	movs	r2, r0
 80209c0:	000b      	movs	r3, r1
 80209c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209c6:	f7e2 f901 	bl	8002bcc <__aeabi_dsub>
 80209ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80209cc:	3530      	adds	r5, #48	@ 0x30
 80209ce:	1c5c      	adds	r4, r3, #1
 80209d0:	701d      	strb	r5, [r3, #0]
 80209d2:	0032      	movs	r2, r6
 80209d4:	003b      	movs	r3, r7
 80209d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80209d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80209da:	f7df fd6f 	bl	80004bc <__aeabi_dcmplt>
 80209de:	2800      	cmp	r0, #0
 80209e0:	d16a      	bne.n	8020ab8 <_dtoa_r+0x6a4>
 80209e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80209e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80209e6:	2000      	movs	r0, #0
 80209e8:	4950      	ldr	r1, [pc, #320]	@ (8020b2c <_dtoa_r+0x718>)
 80209ea:	f7e2 f8ef 	bl	8002bcc <__aeabi_dsub>
 80209ee:	0032      	movs	r2, r6
 80209f0:	003b      	movs	r3, r7
 80209f2:	f7df fd63 	bl	80004bc <__aeabi_dcmplt>
 80209f6:	2800      	cmp	r0, #0
 80209f8:	d000      	beq.n	80209fc <_dtoa_r+0x5e8>
 80209fa:	e0a5      	b.n	8020b48 <_dtoa_r+0x734>
 80209fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80209fe:	42a3      	cmp	r3, r4
 8020a00:	d100      	bne.n	8020a04 <_dtoa_r+0x5f0>
 8020a02:	e742      	b.n	802088a <_dtoa_r+0x476>
 8020a04:	2200      	movs	r2, #0
 8020a06:	0030      	movs	r0, r6
 8020a08:	0039      	movs	r1, r7
 8020a0a:	4b49      	ldr	r3, [pc, #292]	@ (8020b30 <_dtoa_r+0x71c>)
 8020a0c:	f7e1 fe16 	bl	800263c <__aeabi_dmul>
 8020a10:	2200      	movs	r2, #0
 8020a12:	0006      	movs	r6, r0
 8020a14:	000f      	movs	r7, r1
 8020a16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a1a:	4b45      	ldr	r3, [pc, #276]	@ (8020b30 <_dtoa_r+0x71c>)
 8020a1c:	f7e1 fe0e 	bl	800263c <__aeabi_dmul>
 8020a20:	9416      	str	r4, [sp, #88]	@ 0x58
 8020a22:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a26:	e7c3      	b.n	80209b0 <_dtoa_r+0x59c>
 8020a28:	0030      	movs	r0, r6
 8020a2a:	0039      	movs	r1, r7
 8020a2c:	f7e1 fe06 	bl	800263c <__aeabi_dmul>
 8020a30:	9d08      	ldr	r5, [sp, #32]
 8020a32:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020a34:	002b      	movs	r3, r5
 8020a36:	4694      	mov	ip, r2
 8020a38:	9016      	str	r0, [sp, #88]	@ 0x58
 8020a3a:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020a3c:	4463      	add	r3, ip
 8020a3e:	9319      	str	r3, [sp, #100]	@ 0x64
 8020a40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a44:	f7e2 fc80 	bl	8003348 <__aeabi_d2iz>
 8020a48:	0004      	movs	r4, r0
 8020a4a:	f7e2 fcb9 	bl	80033c0 <__aeabi_i2d>
 8020a4e:	000b      	movs	r3, r1
 8020a50:	0002      	movs	r2, r0
 8020a52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a56:	f7e2 f8b9 	bl	8002bcc <__aeabi_dsub>
 8020a5a:	3430      	adds	r4, #48	@ 0x30
 8020a5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a5e:	702c      	strb	r4, [r5, #0]
 8020a60:	3501      	adds	r5, #1
 8020a62:	0006      	movs	r6, r0
 8020a64:	000f      	movs	r7, r1
 8020a66:	42ab      	cmp	r3, r5
 8020a68:	d129      	bne.n	8020abe <_dtoa_r+0x6aa>
 8020a6a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020a6c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020a6e:	9b08      	ldr	r3, [sp, #32]
 8020a70:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020a72:	469c      	mov	ip, r3
 8020a74:	2200      	movs	r2, #0
 8020a76:	4b32      	ldr	r3, [pc, #200]	@ (8020b40 <_dtoa_r+0x72c>)
 8020a78:	4464      	add	r4, ip
 8020a7a:	f7e0 fe37 	bl	80016ec <__aeabi_dadd>
 8020a7e:	0002      	movs	r2, r0
 8020a80:	000b      	movs	r3, r1
 8020a82:	0030      	movs	r0, r6
 8020a84:	0039      	movs	r1, r7
 8020a86:	f7df fd2d 	bl	80004e4 <__aeabi_dcmpgt>
 8020a8a:	2800      	cmp	r0, #0
 8020a8c:	d15c      	bne.n	8020b48 <_dtoa_r+0x734>
 8020a8e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020a90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020a92:	2000      	movs	r0, #0
 8020a94:	492a      	ldr	r1, [pc, #168]	@ (8020b40 <_dtoa_r+0x72c>)
 8020a96:	f7e2 f899 	bl	8002bcc <__aeabi_dsub>
 8020a9a:	0002      	movs	r2, r0
 8020a9c:	000b      	movs	r3, r1
 8020a9e:	0030      	movs	r0, r6
 8020aa0:	0039      	movs	r1, r7
 8020aa2:	f7df fd0b 	bl	80004bc <__aeabi_dcmplt>
 8020aa6:	2800      	cmp	r0, #0
 8020aa8:	d100      	bne.n	8020aac <_dtoa_r+0x698>
 8020aaa:	e6ee      	b.n	802088a <_dtoa_r+0x476>
 8020aac:	0023      	movs	r3, r4
 8020aae:	3c01      	subs	r4, #1
 8020ab0:	7822      	ldrb	r2, [r4, #0]
 8020ab2:	2a30      	cmp	r2, #48	@ 0x30
 8020ab4:	d0fa      	beq.n	8020aac <_dtoa_r+0x698>
 8020ab6:	001c      	movs	r4, r3
 8020ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020aba:	9304      	str	r3, [sp, #16]
 8020abc:	e73e      	b.n	802093c <_dtoa_r+0x528>
 8020abe:	2200      	movs	r2, #0
 8020ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8020b30 <_dtoa_r+0x71c>)
 8020ac2:	f7e1 fdbb 	bl	800263c <__aeabi_dmul>
 8020ac6:	900a      	str	r0, [sp, #40]	@ 0x28
 8020ac8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020aca:	e7b9      	b.n	8020a40 <_dtoa_r+0x62c>
 8020acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d10c      	bne.n	8020aec <_dtoa_r+0x6d8>
 8020ad2:	9806      	ldr	r0, [sp, #24]
 8020ad4:	9907      	ldr	r1, [sp, #28]
 8020ad6:	2200      	movs	r2, #0
 8020ad8:	4b18      	ldr	r3, [pc, #96]	@ (8020b3c <_dtoa_r+0x728>)
 8020ada:	f7e1 fdaf 	bl	800263c <__aeabi_dmul>
 8020ade:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020ae0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ae2:	f7df fd09 	bl	80004f8 <__aeabi_dcmpge>
 8020ae6:	2800      	cmp	r0, #0
 8020ae8:	d100      	bne.n	8020aec <_dtoa_r+0x6d8>
 8020aea:	e164      	b.n	8020db6 <_dtoa_r+0x9a2>
 8020aec:	2600      	movs	r6, #0
 8020aee:	0037      	movs	r7, r6
 8020af0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020af2:	9c08      	ldr	r4, [sp, #32]
 8020af4:	43db      	mvns	r3, r3
 8020af6:	930c      	str	r3, [sp, #48]	@ 0x30
 8020af8:	2300      	movs	r3, #0
 8020afa:	9304      	str	r3, [sp, #16]
 8020afc:	0031      	movs	r1, r6
 8020afe:	9803      	ldr	r0, [sp, #12]
 8020b00:	f000 ff32 	bl	8021968 <_Bfree>
 8020b04:	2f00      	cmp	r7, #0
 8020b06:	d0d7      	beq.n	8020ab8 <_dtoa_r+0x6a4>
 8020b08:	9b04      	ldr	r3, [sp, #16]
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d005      	beq.n	8020b1a <_dtoa_r+0x706>
 8020b0e:	42bb      	cmp	r3, r7
 8020b10:	d003      	beq.n	8020b1a <_dtoa_r+0x706>
 8020b12:	0019      	movs	r1, r3
 8020b14:	9803      	ldr	r0, [sp, #12]
 8020b16:	f000 ff27 	bl	8021968 <_Bfree>
 8020b1a:	0039      	movs	r1, r7
 8020b1c:	9803      	ldr	r0, [sp, #12]
 8020b1e:	f000 ff23 	bl	8021968 <_Bfree>
 8020b22:	e7c9      	b.n	8020ab8 <_dtoa_r+0x6a4>
 8020b24:	08025de0 	.word	0x08025de0
 8020b28:	08025db8 	.word	0x08025db8
 8020b2c:	3ff00000 	.word	0x3ff00000
 8020b30:	40240000 	.word	0x40240000
 8020b34:	401c0000 	.word	0x401c0000
 8020b38:	fcc00000 	.word	0xfcc00000
 8020b3c:	40140000 	.word	0x40140000
 8020b40:	3fe00000 	.word	0x3fe00000
 8020b44:	9b04      	ldr	r3, [sp, #16]
 8020b46:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b48:	0023      	movs	r3, r4
 8020b4a:	001c      	movs	r4, r3
 8020b4c:	3b01      	subs	r3, #1
 8020b4e:	781a      	ldrb	r2, [r3, #0]
 8020b50:	2a39      	cmp	r2, #57	@ 0x39
 8020b52:	d108      	bne.n	8020b66 <_dtoa_r+0x752>
 8020b54:	9a08      	ldr	r2, [sp, #32]
 8020b56:	429a      	cmp	r2, r3
 8020b58:	d1f7      	bne.n	8020b4a <_dtoa_r+0x736>
 8020b5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020b5c:	9908      	ldr	r1, [sp, #32]
 8020b5e:	3201      	adds	r2, #1
 8020b60:	920c      	str	r2, [sp, #48]	@ 0x30
 8020b62:	2230      	movs	r2, #48	@ 0x30
 8020b64:	700a      	strb	r2, [r1, #0]
 8020b66:	781a      	ldrb	r2, [r3, #0]
 8020b68:	3201      	adds	r2, #1
 8020b6a:	701a      	strb	r2, [r3, #0]
 8020b6c:	e7a4      	b.n	8020ab8 <_dtoa_r+0x6a4>
 8020b6e:	2200      	movs	r2, #0
 8020b70:	4bc6      	ldr	r3, [pc, #792]	@ (8020e8c <_dtoa_r+0xa78>)
 8020b72:	f7e1 fd63 	bl	800263c <__aeabi_dmul>
 8020b76:	2200      	movs	r2, #0
 8020b78:	2300      	movs	r3, #0
 8020b7a:	0006      	movs	r6, r0
 8020b7c:	000f      	movs	r7, r1
 8020b7e:	f7df fc97 	bl	80004b0 <__aeabi_dcmpeq>
 8020b82:	2800      	cmp	r0, #0
 8020b84:	d100      	bne.n	8020b88 <_dtoa_r+0x774>
 8020b86:	e6a1      	b.n	80208cc <_dtoa_r+0x4b8>
 8020b88:	e6d8      	b.n	802093c <_dtoa_r+0x528>
 8020b8a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020b8c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020b8e:	9c06      	ldr	r4, [sp, #24]
 8020b90:	2f00      	cmp	r7, #0
 8020b92:	d014      	beq.n	8020bbe <_dtoa_r+0x7aa>
 8020b94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020b96:	2a01      	cmp	r2, #1
 8020b98:	dd00      	ble.n	8020b9c <_dtoa_r+0x788>
 8020b9a:	e0c8      	b.n	8020d2e <_dtoa_r+0x91a>
 8020b9c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020b9e:	2a00      	cmp	r2, #0
 8020ba0:	d100      	bne.n	8020ba4 <_dtoa_r+0x790>
 8020ba2:	e0be      	b.n	8020d22 <_dtoa_r+0x90e>
 8020ba4:	4aba      	ldr	r2, [pc, #744]	@ (8020e90 <_dtoa_r+0xa7c>)
 8020ba6:	189b      	adds	r3, r3, r2
 8020ba8:	9a06      	ldr	r2, [sp, #24]
 8020baa:	2101      	movs	r1, #1
 8020bac:	18d2      	adds	r2, r2, r3
 8020bae:	9206      	str	r2, [sp, #24]
 8020bb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020bb2:	9803      	ldr	r0, [sp, #12]
 8020bb4:	18d3      	adds	r3, r2, r3
 8020bb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8020bb8:	f000 ffda 	bl	8021b70 <__i2b>
 8020bbc:	0007      	movs	r7, r0
 8020bbe:	2c00      	cmp	r4, #0
 8020bc0:	d00e      	beq.n	8020be0 <_dtoa_r+0x7cc>
 8020bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	dd0b      	ble.n	8020be0 <_dtoa_r+0x7cc>
 8020bc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020bca:	0023      	movs	r3, r4
 8020bcc:	4294      	cmp	r4, r2
 8020bce:	dd00      	ble.n	8020bd2 <_dtoa_r+0x7be>
 8020bd0:	0013      	movs	r3, r2
 8020bd2:	9a06      	ldr	r2, [sp, #24]
 8020bd4:	1ae4      	subs	r4, r4, r3
 8020bd6:	1ad2      	subs	r2, r2, r3
 8020bd8:	9206      	str	r2, [sp, #24]
 8020bda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020bdc:	1ad3      	subs	r3, r2, r3
 8020bde:	930d      	str	r3, [sp, #52]	@ 0x34
 8020be0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	d01f      	beq.n	8020c26 <_dtoa_r+0x812>
 8020be6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	d100      	bne.n	8020bee <_dtoa_r+0x7da>
 8020bec:	e0b5      	b.n	8020d5a <_dtoa_r+0x946>
 8020bee:	2d00      	cmp	r5, #0
 8020bf0:	d010      	beq.n	8020c14 <_dtoa_r+0x800>
 8020bf2:	0039      	movs	r1, r7
 8020bf4:	002a      	movs	r2, r5
 8020bf6:	9803      	ldr	r0, [sp, #12]
 8020bf8:	f001 f884 	bl	8021d04 <__pow5mult>
 8020bfc:	9a05      	ldr	r2, [sp, #20]
 8020bfe:	0001      	movs	r1, r0
 8020c00:	0007      	movs	r7, r0
 8020c02:	9803      	ldr	r0, [sp, #12]
 8020c04:	f000 ffcc 	bl	8021ba0 <__multiply>
 8020c08:	0006      	movs	r6, r0
 8020c0a:	9905      	ldr	r1, [sp, #20]
 8020c0c:	9803      	ldr	r0, [sp, #12]
 8020c0e:	f000 feab 	bl	8021968 <_Bfree>
 8020c12:	9605      	str	r6, [sp, #20]
 8020c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c16:	1b5a      	subs	r2, r3, r5
 8020c18:	42ab      	cmp	r3, r5
 8020c1a:	d004      	beq.n	8020c26 <_dtoa_r+0x812>
 8020c1c:	9905      	ldr	r1, [sp, #20]
 8020c1e:	9803      	ldr	r0, [sp, #12]
 8020c20:	f001 f870 	bl	8021d04 <__pow5mult>
 8020c24:	9005      	str	r0, [sp, #20]
 8020c26:	2101      	movs	r1, #1
 8020c28:	9803      	ldr	r0, [sp, #12]
 8020c2a:	f000 ffa1 	bl	8021b70 <__i2b>
 8020c2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020c30:	0006      	movs	r6, r0
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d100      	bne.n	8020c38 <_dtoa_r+0x824>
 8020c36:	e1bc      	b.n	8020fb2 <_dtoa_r+0xb9e>
 8020c38:	001a      	movs	r2, r3
 8020c3a:	0001      	movs	r1, r0
 8020c3c:	9803      	ldr	r0, [sp, #12]
 8020c3e:	f001 f861 	bl	8021d04 <__pow5mult>
 8020c42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020c44:	0006      	movs	r6, r0
 8020c46:	2500      	movs	r5, #0
 8020c48:	2b01      	cmp	r3, #1
 8020c4a:	dc16      	bgt.n	8020c7a <_dtoa_r+0x866>
 8020c4c:	2500      	movs	r5, #0
 8020c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c50:	42ab      	cmp	r3, r5
 8020c52:	d10e      	bne.n	8020c72 <_dtoa_r+0x85e>
 8020c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020c56:	031b      	lsls	r3, r3, #12
 8020c58:	42ab      	cmp	r3, r5
 8020c5a:	d10a      	bne.n	8020c72 <_dtoa_r+0x85e>
 8020c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8020e94 <_dtoa_r+0xa80>)
 8020c5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020c60:	4213      	tst	r3, r2
 8020c62:	d006      	beq.n	8020c72 <_dtoa_r+0x85e>
 8020c64:	9b06      	ldr	r3, [sp, #24]
 8020c66:	3501      	adds	r5, #1
 8020c68:	3301      	adds	r3, #1
 8020c6a:	9306      	str	r3, [sp, #24]
 8020c6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c6e:	3301      	adds	r3, #1
 8020c70:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020c74:	2001      	movs	r0, #1
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d008      	beq.n	8020c8c <_dtoa_r+0x878>
 8020c7a:	6933      	ldr	r3, [r6, #16]
 8020c7c:	3303      	adds	r3, #3
 8020c7e:	009b      	lsls	r3, r3, #2
 8020c80:	18f3      	adds	r3, r6, r3
 8020c82:	6858      	ldr	r0, [r3, #4]
 8020c84:	f000 ff24 	bl	8021ad0 <__hi0bits>
 8020c88:	2320      	movs	r3, #32
 8020c8a:	1a18      	subs	r0, r3, r0
 8020c8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c8e:	1818      	adds	r0, r3, r0
 8020c90:	0002      	movs	r2, r0
 8020c92:	231f      	movs	r3, #31
 8020c94:	401a      	ands	r2, r3
 8020c96:	4218      	tst	r0, r3
 8020c98:	d065      	beq.n	8020d66 <_dtoa_r+0x952>
 8020c9a:	3301      	adds	r3, #1
 8020c9c:	1a9b      	subs	r3, r3, r2
 8020c9e:	2b04      	cmp	r3, #4
 8020ca0:	dd5d      	ble.n	8020d5e <_dtoa_r+0x94a>
 8020ca2:	231c      	movs	r3, #28
 8020ca4:	1a9b      	subs	r3, r3, r2
 8020ca6:	9a06      	ldr	r2, [sp, #24]
 8020ca8:	18e4      	adds	r4, r4, r3
 8020caa:	18d2      	adds	r2, r2, r3
 8020cac:	9206      	str	r2, [sp, #24]
 8020cae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020cb0:	18d3      	adds	r3, r2, r3
 8020cb2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020cb4:	9b06      	ldr	r3, [sp, #24]
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	dd05      	ble.n	8020cc6 <_dtoa_r+0x8b2>
 8020cba:	001a      	movs	r2, r3
 8020cbc:	9905      	ldr	r1, [sp, #20]
 8020cbe:	9803      	ldr	r0, [sp, #12]
 8020cc0:	f001 f87c 	bl	8021dbc <__lshift>
 8020cc4:	9005      	str	r0, [sp, #20]
 8020cc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020cc8:	2b00      	cmp	r3, #0
 8020cca:	dd05      	ble.n	8020cd8 <_dtoa_r+0x8c4>
 8020ccc:	0031      	movs	r1, r6
 8020cce:	001a      	movs	r2, r3
 8020cd0:	9803      	ldr	r0, [sp, #12]
 8020cd2:	f001 f873 	bl	8021dbc <__lshift>
 8020cd6:	0006      	movs	r6, r0
 8020cd8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d045      	beq.n	8020d6a <_dtoa_r+0x956>
 8020cde:	0031      	movs	r1, r6
 8020ce0:	9805      	ldr	r0, [sp, #20]
 8020ce2:	f001 f8d7 	bl	8021e94 <__mcmp>
 8020ce6:	2800      	cmp	r0, #0
 8020ce8:	da3f      	bge.n	8020d6a <_dtoa_r+0x956>
 8020cea:	9b04      	ldr	r3, [sp, #16]
 8020cec:	220a      	movs	r2, #10
 8020cee:	3b01      	subs	r3, #1
 8020cf0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020cf2:	9905      	ldr	r1, [sp, #20]
 8020cf4:	2300      	movs	r3, #0
 8020cf6:	9803      	ldr	r0, [sp, #12]
 8020cf8:	f000 fe5a 	bl	80219b0 <__multadd>
 8020cfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020cfe:	9005      	str	r0, [sp, #20]
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	d100      	bne.n	8020d06 <_dtoa_r+0x8f2>
 8020d04:	e15c      	b.n	8020fc0 <_dtoa_r+0xbac>
 8020d06:	2300      	movs	r3, #0
 8020d08:	0039      	movs	r1, r7
 8020d0a:	220a      	movs	r2, #10
 8020d0c:	9803      	ldr	r0, [sp, #12]
 8020d0e:	f000 fe4f 	bl	80219b0 <__multadd>
 8020d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d14:	0007      	movs	r7, r0
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	dc55      	bgt.n	8020dc6 <_dtoa_r+0x9b2>
 8020d1a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020d1c:	2b02      	cmp	r3, #2
 8020d1e:	dc2d      	bgt.n	8020d7c <_dtoa_r+0x968>
 8020d20:	e051      	b.n	8020dc6 <_dtoa_r+0x9b2>
 8020d22:	2336      	movs	r3, #54	@ 0x36
 8020d24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020d26:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020d28:	9c06      	ldr	r4, [sp, #24]
 8020d2a:	1a9b      	subs	r3, r3, r2
 8020d2c:	e73c      	b.n	8020ba8 <_dtoa_r+0x794>
 8020d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d30:	1e5d      	subs	r5, r3, #1
 8020d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020d34:	42ab      	cmp	r3, r5
 8020d36:	db08      	blt.n	8020d4a <_dtoa_r+0x936>
 8020d38:	1b5d      	subs	r5, r3, r5
 8020d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d3c:	9c06      	ldr	r4, [sp, #24]
 8020d3e:	2b00      	cmp	r3, #0
 8020d40:	db00      	blt.n	8020d44 <_dtoa_r+0x930>
 8020d42:	e731      	b.n	8020ba8 <_dtoa_r+0x794>
 8020d44:	1ae4      	subs	r4, r4, r3
 8020d46:	2300      	movs	r3, #0
 8020d48:	e72e      	b.n	8020ba8 <_dtoa_r+0x794>
 8020d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020d4c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020d4e:	1aeb      	subs	r3, r5, r3
 8020d50:	18d3      	adds	r3, r2, r3
 8020d52:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020d54:	9314      	str	r3, [sp, #80]	@ 0x50
 8020d56:	2500      	movs	r5, #0
 8020d58:	e7ef      	b.n	8020d3a <_dtoa_r+0x926>
 8020d5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020d5c:	e75e      	b.n	8020c1c <_dtoa_r+0x808>
 8020d5e:	2b04      	cmp	r3, #4
 8020d60:	d0a8      	beq.n	8020cb4 <_dtoa_r+0x8a0>
 8020d62:	331c      	adds	r3, #28
 8020d64:	e79f      	b.n	8020ca6 <_dtoa_r+0x892>
 8020d66:	0013      	movs	r3, r2
 8020d68:	e7fb      	b.n	8020d62 <_dtoa_r+0x94e>
 8020d6a:	9b04      	ldr	r3, [sp, #16]
 8020d6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d70:	930e      	str	r3, [sp, #56]	@ 0x38
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	dc23      	bgt.n	8020dbe <_dtoa_r+0x9aa>
 8020d76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020d78:	2b02      	cmp	r3, #2
 8020d7a:	dd20      	ble.n	8020dbe <_dtoa_r+0x9aa>
 8020d7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d000      	beq.n	8020d84 <_dtoa_r+0x970>
 8020d82:	e6b5      	b.n	8020af0 <_dtoa_r+0x6dc>
 8020d84:	0031      	movs	r1, r6
 8020d86:	2205      	movs	r2, #5
 8020d88:	9803      	ldr	r0, [sp, #12]
 8020d8a:	f000 fe11 	bl	80219b0 <__multadd>
 8020d8e:	0006      	movs	r6, r0
 8020d90:	0001      	movs	r1, r0
 8020d92:	9805      	ldr	r0, [sp, #20]
 8020d94:	f001 f87e 	bl	8021e94 <__mcmp>
 8020d98:	2800      	cmp	r0, #0
 8020d9a:	dc00      	bgt.n	8020d9e <_dtoa_r+0x98a>
 8020d9c:	e6a8      	b.n	8020af0 <_dtoa_r+0x6dc>
 8020d9e:	9b08      	ldr	r3, [sp, #32]
 8020da0:	9a08      	ldr	r2, [sp, #32]
 8020da2:	1c5c      	adds	r4, r3, #1
 8020da4:	2331      	movs	r3, #49	@ 0x31
 8020da6:	7013      	strb	r3, [r2, #0]
 8020da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020daa:	3301      	adds	r3, #1
 8020dac:	930c      	str	r3, [sp, #48]	@ 0x30
 8020dae:	e6a3      	b.n	8020af8 <_dtoa_r+0x6e4>
 8020db0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020db2:	0037      	movs	r7, r6
 8020db4:	e7f3      	b.n	8020d9e <_dtoa_r+0x98a>
 8020db6:	9b04      	ldr	r3, [sp, #16]
 8020db8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020dba:	930c      	str	r3, [sp, #48]	@ 0x30
 8020dbc:	e7f9      	b.n	8020db2 <_dtoa_r+0x99e>
 8020dbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d100      	bne.n	8020dc6 <_dtoa_r+0x9b2>
 8020dc4:	e100      	b.n	8020fc8 <_dtoa_r+0xbb4>
 8020dc6:	2c00      	cmp	r4, #0
 8020dc8:	dd05      	ble.n	8020dd6 <_dtoa_r+0x9c2>
 8020dca:	0039      	movs	r1, r7
 8020dcc:	0022      	movs	r2, r4
 8020dce:	9803      	ldr	r0, [sp, #12]
 8020dd0:	f000 fff4 	bl	8021dbc <__lshift>
 8020dd4:	0007      	movs	r7, r0
 8020dd6:	0038      	movs	r0, r7
 8020dd8:	2d00      	cmp	r5, #0
 8020dda:	d018      	beq.n	8020e0e <_dtoa_r+0x9fa>
 8020ddc:	6879      	ldr	r1, [r7, #4]
 8020dde:	9803      	ldr	r0, [sp, #12]
 8020de0:	f000 fd7e 	bl	80218e0 <_Balloc>
 8020de4:	1e04      	subs	r4, r0, #0
 8020de6:	d105      	bne.n	8020df4 <_dtoa_r+0x9e0>
 8020de8:	0022      	movs	r2, r4
 8020dea:	4b2b      	ldr	r3, [pc, #172]	@ (8020e98 <_dtoa_r+0xa84>)
 8020dec:	482b      	ldr	r0, [pc, #172]	@ (8020e9c <_dtoa_r+0xa88>)
 8020dee:	492c      	ldr	r1, [pc, #176]	@ (8020ea0 <_dtoa_r+0xa8c>)
 8020df0:	f7ff fb25 	bl	802043e <_dtoa_r+0x2a>
 8020df4:	0039      	movs	r1, r7
 8020df6:	693a      	ldr	r2, [r7, #16]
 8020df8:	310c      	adds	r1, #12
 8020dfa:	3202      	adds	r2, #2
 8020dfc:	0092      	lsls	r2, r2, #2
 8020dfe:	300c      	adds	r0, #12
 8020e00:	f7ff fa6a 	bl	80202d8 <memcpy>
 8020e04:	2201      	movs	r2, #1
 8020e06:	0021      	movs	r1, r4
 8020e08:	9803      	ldr	r0, [sp, #12]
 8020e0a:	f000 ffd7 	bl	8021dbc <__lshift>
 8020e0e:	9b08      	ldr	r3, [sp, #32]
 8020e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e12:	9306      	str	r3, [sp, #24]
 8020e14:	3b01      	subs	r3, #1
 8020e16:	189b      	adds	r3, r3, r2
 8020e18:	2201      	movs	r2, #1
 8020e1a:	9704      	str	r7, [sp, #16]
 8020e1c:	0007      	movs	r7, r0
 8020e1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020e22:	4013      	ands	r3, r2
 8020e24:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e26:	0031      	movs	r1, r6
 8020e28:	9805      	ldr	r0, [sp, #20]
 8020e2a:	f7ff fa65 	bl	80202f8 <quorem>
 8020e2e:	9904      	ldr	r1, [sp, #16]
 8020e30:	0005      	movs	r5, r0
 8020e32:	900a      	str	r0, [sp, #40]	@ 0x28
 8020e34:	9805      	ldr	r0, [sp, #20]
 8020e36:	f001 f82d 	bl	8021e94 <__mcmp>
 8020e3a:	003a      	movs	r2, r7
 8020e3c:	900d      	str	r0, [sp, #52]	@ 0x34
 8020e3e:	0031      	movs	r1, r6
 8020e40:	9803      	ldr	r0, [sp, #12]
 8020e42:	f001 f843 	bl	8021ecc <__mdiff>
 8020e46:	2201      	movs	r2, #1
 8020e48:	68c3      	ldr	r3, [r0, #12]
 8020e4a:	0004      	movs	r4, r0
 8020e4c:	3530      	adds	r5, #48	@ 0x30
 8020e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d104      	bne.n	8020e5e <_dtoa_r+0xa4a>
 8020e54:	0001      	movs	r1, r0
 8020e56:	9805      	ldr	r0, [sp, #20]
 8020e58:	f001 f81c 	bl	8021e94 <__mcmp>
 8020e5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8020e5e:	0021      	movs	r1, r4
 8020e60:	9803      	ldr	r0, [sp, #12]
 8020e62:	f000 fd81 	bl	8021968 <_Bfree>
 8020e66:	9b06      	ldr	r3, [sp, #24]
 8020e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e6a:	1c5c      	adds	r4, r3, #1
 8020e6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e6e:	4313      	orrs	r3, r2
 8020e70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e72:	4313      	orrs	r3, r2
 8020e74:	d116      	bne.n	8020ea4 <_dtoa_r+0xa90>
 8020e76:	2d39      	cmp	r5, #57	@ 0x39
 8020e78:	d02f      	beq.n	8020eda <_dtoa_r+0xac6>
 8020e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	dd01      	ble.n	8020e84 <_dtoa_r+0xa70>
 8020e80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020e82:	3531      	adds	r5, #49	@ 0x31
 8020e84:	9b06      	ldr	r3, [sp, #24]
 8020e86:	701d      	strb	r5, [r3, #0]
 8020e88:	e638      	b.n	8020afc <_dtoa_r+0x6e8>
 8020e8a:	46c0      	nop			@ (mov r8, r8)
 8020e8c:	40240000 	.word	0x40240000
 8020e90:	00000433 	.word	0x00000433
 8020e94:	7ff00000 	.word	0x7ff00000
 8020e98:	08025ce1 	.word	0x08025ce1
 8020e9c:	08025c89 	.word	0x08025c89
 8020ea0:	000002ef 	.word	0x000002ef
 8020ea4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	db04      	blt.n	8020eb4 <_dtoa_r+0xaa0>
 8020eaa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020eac:	4313      	orrs	r3, r2
 8020eae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020eb0:	4313      	orrs	r3, r2
 8020eb2:	d11e      	bne.n	8020ef2 <_dtoa_r+0xade>
 8020eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	dde4      	ble.n	8020e84 <_dtoa_r+0xa70>
 8020eba:	9905      	ldr	r1, [sp, #20]
 8020ebc:	2201      	movs	r2, #1
 8020ebe:	9803      	ldr	r0, [sp, #12]
 8020ec0:	f000 ff7c 	bl	8021dbc <__lshift>
 8020ec4:	0031      	movs	r1, r6
 8020ec6:	9005      	str	r0, [sp, #20]
 8020ec8:	f000 ffe4 	bl	8021e94 <__mcmp>
 8020ecc:	2800      	cmp	r0, #0
 8020ece:	dc02      	bgt.n	8020ed6 <_dtoa_r+0xac2>
 8020ed0:	d1d8      	bne.n	8020e84 <_dtoa_r+0xa70>
 8020ed2:	07eb      	lsls	r3, r5, #31
 8020ed4:	d5d6      	bpl.n	8020e84 <_dtoa_r+0xa70>
 8020ed6:	2d39      	cmp	r5, #57	@ 0x39
 8020ed8:	d1d2      	bne.n	8020e80 <_dtoa_r+0xa6c>
 8020eda:	2339      	movs	r3, #57	@ 0x39
 8020edc:	9a06      	ldr	r2, [sp, #24]
 8020ede:	7013      	strb	r3, [r2, #0]
 8020ee0:	0023      	movs	r3, r4
 8020ee2:	001c      	movs	r4, r3
 8020ee4:	3b01      	subs	r3, #1
 8020ee6:	781a      	ldrb	r2, [r3, #0]
 8020ee8:	2a39      	cmp	r2, #57	@ 0x39
 8020eea:	d04f      	beq.n	8020f8c <_dtoa_r+0xb78>
 8020eec:	3201      	adds	r2, #1
 8020eee:	701a      	strb	r2, [r3, #0]
 8020ef0:	e604      	b.n	8020afc <_dtoa_r+0x6e8>
 8020ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	dd03      	ble.n	8020f00 <_dtoa_r+0xaec>
 8020ef8:	2d39      	cmp	r5, #57	@ 0x39
 8020efa:	d0ee      	beq.n	8020eda <_dtoa_r+0xac6>
 8020efc:	3501      	adds	r5, #1
 8020efe:	e7c1      	b.n	8020e84 <_dtoa_r+0xa70>
 8020f00:	9b06      	ldr	r3, [sp, #24]
 8020f02:	9a06      	ldr	r2, [sp, #24]
 8020f04:	701d      	strb	r5, [r3, #0]
 8020f06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f08:	4293      	cmp	r3, r2
 8020f0a:	d02a      	beq.n	8020f62 <_dtoa_r+0xb4e>
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	220a      	movs	r2, #10
 8020f10:	9905      	ldr	r1, [sp, #20]
 8020f12:	9803      	ldr	r0, [sp, #12]
 8020f14:	f000 fd4c 	bl	80219b0 <__multadd>
 8020f18:	9b04      	ldr	r3, [sp, #16]
 8020f1a:	9005      	str	r0, [sp, #20]
 8020f1c:	42bb      	cmp	r3, r7
 8020f1e:	d109      	bne.n	8020f34 <_dtoa_r+0xb20>
 8020f20:	2300      	movs	r3, #0
 8020f22:	220a      	movs	r2, #10
 8020f24:	9904      	ldr	r1, [sp, #16]
 8020f26:	9803      	ldr	r0, [sp, #12]
 8020f28:	f000 fd42 	bl	80219b0 <__multadd>
 8020f2c:	9004      	str	r0, [sp, #16]
 8020f2e:	0007      	movs	r7, r0
 8020f30:	9406      	str	r4, [sp, #24]
 8020f32:	e778      	b.n	8020e26 <_dtoa_r+0xa12>
 8020f34:	9904      	ldr	r1, [sp, #16]
 8020f36:	2300      	movs	r3, #0
 8020f38:	220a      	movs	r2, #10
 8020f3a:	9803      	ldr	r0, [sp, #12]
 8020f3c:	f000 fd38 	bl	80219b0 <__multadd>
 8020f40:	2300      	movs	r3, #0
 8020f42:	9004      	str	r0, [sp, #16]
 8020f44:	220a      	movs	r2, #10
 8020f46:	0039      	movs	r1, r7
 8020f48:	9803      	ldr	r0, [sp, #12]
 8020f4a:	f000 fd31 	bl	80219b0 <__multadd>
 8020f4e:	e7ee      	b.n	8020f2e <_dtoa_r+0xb1a>
 8020f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f52:	2401      	movs	r4, #1
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	dd00      	ble.n	8020f5a <_dtoa_r+0xb46>
 8020f58:	001c      	movs	r4, r3
 8020f5a:	9b08      	ldr	r3, [sp, #32]
 8020f5c:	191c      	adds	r4, r3, r4
 8020f5e:	2300      	movs	r3, #0
 8020f60:	9304      	str	r3, [sp, #16]
 8020f62:	9905      	ldr	r1, [sp, #20]
 8020f64:	2201      	movs	r2, #1
 8020f66:	9803      	ldr	r0, [sp, #12]
 8020f68:	f000 ff28 	bl	8021dbc <__lshift>
 8020f6c:	0031      	movs	r1, r6
 8020f6e:	9005      	str	r0, [sp, #20]
 8020f70:	f000 ff90 	bl	8021e94 <__mcmp>
 8020f74:	2800      	cmp	r0, #0
 8020f76:	dcb3      	bgt.n	8020ee0 <_dtoa_r+0xacc>
 8020f78:	d101      	bne.n	8020f7e <_dtoa_r+0xb6a>
 8020f7a:	07ed      	lsls	r5, r5, #31
 8020f7c:	d4b0      	bmi.n	8020ee0 <_dtoa_r+0xacc>
 8020f7e:	0023      	movs	r3, r4
 8020f80:	001c      	movs	r4, r3
 8020f82:	3b01      	subs	r3, #1
 8020f84:	781a      	ldrb	r2, [r3, #0]
 8020f86:	2a30      	cmp	r2, #48	@ 0x30
 8020f88:	d0fa      	beq.n	8020f80 <_dtoa_r+0xb6c>
 8020f8a:	e5b7      	b.n	8020afc <_dtoa_r+0x6e8>
 8020f8c:	9a08      	ldr	r2, [sp, #32]
 8020f8e:	429a      	cmp	r2, r3
 8020f90:	d1a7      	bne.n	8020ee2 <_dtoa_r+0xace>
 8020f92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f94:	3301      	adds	r3, #1
 8020f96:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f98:	2331      	movs	r3, #49	@ 0x31
 8020f9a:	7013      	strb	r3, [r2, #0]
 8020f9c:	e5ae      	b.n	8020afc <_dtoa_r+0x6e8>
 8020f9e:	4b15      	ldr	r3, [pc, #84]	@ (8020ff4 <_dtoa_r+0xbe0>)
 8020fa0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020fa2:	9308      	str	r3, [sp, #32]
 8020fa4:	4b14      	ldr	r3, [pc, #80]	@ (8020ff8 <_dtoa_r+0xbe4>)
 8020fa6:	2a00      	cmp	r2, #0
 8020fa8:	d001      	beq.n	8020fae <_dtoa_r+0xb9a>
 8020faa:	f7ff fa7b 	bl	80204a4 <_dtoa_r+0x90>
 8020fae:	f7ff fa7b 	bl	80204a8 <_dtoa_r+0x94>
 8020fb2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020fb4:	2b01      	cmp	r3, #1
 8020fb6:	dc00      	bgt.n	8020fba <_dtoa_r+0xba6>
 8020fb8:	e648      	b.n	8020c4c <_dtoa_r+0x838>
 8020fba:	2001      	movs	r0, #1
 8020fbc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020fbe:	e665      	b.n	8020c8c <_dtoa_r+0x878>
 8020fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fc2:	2b00      	cmp	r3, #0
 8020fc4:	dc00      	bgt.n	8020fc8 <_dtoa_r+0xbb4>
 8020fc6:	e6d6      	b.n	8020d76 <_dtoa_r+0x962>
 8020fc8:	2400      	movs	r4, #0
 8020fca:	0031      	movs	r1, r6
 8020fcc:	9805      	ldr	r0, [sp, #20]
 8020fce:	f7ff f993 	bl	80202f8 <quorem>
 8020fd2:	9b08      	ldr	r3, [sp, #32]
 8020fd4:	3030      	adds	r0, #48	@ 0x30
 8020fd6:	5518      	strb	r0, [r3, r4]
 8020fd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fda:	3401      	adds	r4, #1
 8020fdc:	0005      	movs	r5, r0
 8020fde:	429c      	cmp	r4, r3
 8020fe0:	dab6      	bge.n	8020f50 <_dtoa_r+0xb3c>
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	220a      	movs	r2, #10
 8020fe6:	9905      	ldr	r1, [sp, #20]
 8020fe8:	9803      	ldr	r0, [sp, #12]
 8020fea:	f000 fce1 	bl	80219b0 <__multadd>
 8020fee:	9005      	str	r0, [sp, #20]
 8020ff0:	e7eb      	b.n	8020fca <_dtoa_r+0xbb6>
 8020ff2:	46c0      	nop			@ (mov r8, r8)
 8020ff4:	08025c65 	.word	0x08025c65
 8020ff8:	08025c6d 	.word	0x08025c6d

08020ffc <_free_r>:
 8020ffc:	b570      	push	{r4, r5, r6, lr}
 8020ffe:	0005      	movs	r5, r0
 8021000:	1e0c      	subs	r4, r1, #0
 8021002:	d010      	beq.n	8021026 <_free_r+0x2a>
 8021004:	3c04      	subs	r4, #4
 8021006:	6823      	ldr	r3, [r4, #0]
 8021008:	2b00      	cmp	r3, #0
 802100a:	da00      	bge.n	802100e <_free_r+0x12>
 802100c:	18e4      	adds	r4, r4, r3
 802100e:	0028      	movs	r0, r5
 8021010:	f000 fc56 	bl	80218c0 <__malloc_lock>
 8021014:	4a1d      	ldr	r2, [pc, #116]	@ (802108c <_free_r+0x90>)
 8021016:	6813      	ldr	r3, [r2, #0]
 8021018:	2b00      	cmp	r3, #0
 802101a:	d105      	bne.n	8021028 <_free_r+0x2c>
 802101c:	6063      	str	r3, [r4, #4]
 802101e:	6014      	str	r4, [r2, #0]
 8021020:	0028      	movs	r0, r5
 8021022:	f000 fc55 	bl	80218d0 <__malloc_unlock>
 8021026:	bd70      	pop	{r4, r5, r6, pc}
 8021028:	42a3      	cmp	r3, r4
 802102a:	d908      	bls.n	802103e <_free_r+0x42>
 802102c:	6820      	ldr	r0, [r4, #0]
 802102e:	1821      	adds	r1, r4, r0
 8021030:	428b      	cmp	r3, r1
 8021032:	d1f3      	bne.n	802101c <_free_r+0x20>
 8021034:	6819      	ldr	r1, [r3, #0]
 8021036:	685b      	ldr	r3, [r3, #4]
 8021038:	1809      	adds	r1, r1, r0
 802103a:	6021      	str	r1, [r4, #0]
 802103c:	e7ee      	b.n	802101c <_free_r+0x20>
 802103e:	001a      	movs	r2, r3
 8021040:	685b      	ldr	r3, [r3, #4]
 8021042:	2b00      	cmp	r3, #0
 8021044:	d001      	beq.n	802104a <_free_r+0x4e>
 8021046:	42a3      	cmp	r3, r4
 8021048:	d9f9      	bls.n	802103e <_free_r+0x42>
 802104a:	6811      	ldr	r1, [r2, #0]
 802104c:	1850      	adds	r0, r2, r1
 802104e:	42a0      	cmp	r0, r4
 8021050:	d10b      	bne.n	802106a <_free_r+0x6e>
 8021052:	6820      	ldr	r0, [r4, #0]
 8021054:	1809      	adds	r1, r1, r0
 8021056:	1850      	adds	r0, r2, r1
 8021058:	6011      	str	r1, [r2, #0]
 802105a:	4283      	cmp	r3, r0
 802105c:	d1e0      	bne.n	8021020 <_free_r+0x24>
 802105e:	6818      	ldr	r0, [r3, #0]
 8021060:	685b      	ldr	r3, [r3, #4]
 8021062:	1841      	adds	r1, r0, r1
 8021064:	6011      	str	r1, [r2, #0]
 8021066:	6053      	str	r3, [r2, #4]
 8021068:	e7da      	b.n	8021020 <_free_r+0x24>
 802106a:	42a0      	cmp	r0, r4
 802106c:	d902      	bls.n	8021074 <_free_r+0x78>
 802106e:	230c      	movs	r3, #12
 8021070:	602b      	str	r3, [r5, #0]
 8021072:	e7d5      	b.n	8021020 <_free_r+0x24>
 8021074:	6820      	ldr	r0, [r4, #0]
 8021076:	1821      	adds	r1, r4, r0
 8021078:	428b      	cmp	r3, r1
 802107a:	d103      	bne.n	8021084 <_free_r+0x88>
 802107c:	6819      	ldr	r1, [r3, #0]
 802107e:	685b      	ldr	r3, [r3, #4]
 8021080:	1809      	adds	r1, r1, r0
 8021082:	6021      	str	r1, [r4, #0]
 8021084:	6063      	str	r3, [r4, #4]
 8021086:	6054      	str	r4, [r2, #4]
 8021088:	e7ca      	b.n	8021020 <_free_r+0x24>
 802108a:	46c0      	nop			@ (mov r8, r8)
 802108c:	200037a8 	.word	0x200037a8

08021090 <rshift>:
 8021090:	0002      	movs	r2, r0
 8021092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021094:	6904      	ldr	r4, [r0, #16]
 8021096:	b085      	sub	sp, #20
 8021098:	3214      	adds	r2, #20
 802109a:	114b      	asrs	r3, r1, #5
 802109c:	0016      	movs	r6, r2
 802109e:	9302      	str	r3, [sp, #8]
 80210a0:	429c      	cmp	r4, r3
 80210a2:	dd31      	ble.n	8021108 <rshift+0x78>
 80210a4:	261f      	movs	r6, #31
 80210a6:	000f      	movs	r7, r1
 80210a8:	009b      	lsls	r3, r3, #2
 80210aa:	00a5      	lsls	r5, r4, #2
 80210ac:	18d3      	adds	r3, r2, r3
 80210ae:	4037      	ands	r7, r6
 80210b0:	1955      	adds	r5, r2, r5
 80210b2:	9300      	str	r3, [sp, #0]
 80210b4:	9701      	str	r7, [sp, #4]
 80210b6:	4231      	tst	r1, r6
 80210b8:	d10d      	bne.n	80210d6 <rshift+0x46>
 80210ba:	0016      	movs	r6, r2
 80210bc:	0019      	movs	r1, r3
 80210be:	428d      	cmp	r5, r1
 80210c0:	d836      	bhi.n	8021130 <rshift+0xa0>
 80210c2:	9b00      	ldr	r3, [sp, #0]
 80210c4:	2600      	movs	r6, #0
 80210c6:	3b03      	subs	r3, #3
 80210c8:	429d      	cmp	r5, r3
 80210ca:	d302      	bcc.n	80210d2 <rshift+0x42>
 80210cc:	9b02      	ldr	r3, [sp, #8]
 80210ce:	1ae4      	subs	r4, r4, r3
 80210d0:	00a6      	lsls	r6, r4, #2
 80210d2:	1996      	adds	r6, r2, r6
 80210d4:	e018      	b.n	8021108 <rshift+0x78>
 80210d6:	2120      	movs	r1, #32
 80210d8:	9e01      	ldr	r6, [sp, #4]
 80210da:	9f01      	ldr	r7, [sp, #4]
 80210dc:	1b89      	subs	r1, r1, r6
 80210de:	9e00      	ldr	r6, [sp, #0]
 80210e0:	9103      	str	r1, [sp, #12]
 80210e2:	ce02      	ldmia	r6!, {r1}
 80210e4:	4694      	mov	ip, r2
 80210e6:	40f9      	lsrs	r1, r7
 80210e8:	42b5      	cmp	r5, r6
 80210ea:	d816      	bhi.n	802111a <rshift+0x8a>
 80210ec:	9b00      	ldr	r3, [sp, #0]
 80210ee:	2600      	movs	r6, #0
 80210f0:	3301      	adds	r3, #1
 80210f2:	429d      	cmp	r5, r3
 80210f4:	d303      	bcc.n	80210fe <rshift+0x6e>
 80210f6:	9b02      	ldr	r3, [sp, #8]
 80210f8:	1ae4      	subs	r4, r4, r3
 80210fa:	00a6      	lsls	r6, r4, #2
 80210fc:	3e04      	subs	r6, #4
 80210fe:	1996      	adds	r6, r2, r6
 8021100:	6031      	str	r1, [r6, #0]
 8021102:	2900      	cmp	r1, #0
 8021104:	d000      	beq.n	8021108 <rshift+0x78>
 8021106:	3604      	adds	r6, #4
 8021108:	1ab1      	subs	r1, r6, r2
 802110a:	1089      	asrs	r1, r1, #2
 802110c:	6101      	str	r1, [r0, #16]
 802110e:	4296      	cmp	r6, r2
 8021110:	d101      	bne.n	8021116 <rshift+0x86>
 8021112:	2300      	movs	r3, #0
 8021114:	6143      	str	r3, [r0, #20]
 8021116:	b005      	add	sp, #20
 8021118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802111a:	6837      	ldr	r7, [r6, #0]
 802111c:	9b03      	ldr	r3, [sp, #12]
 802111e:	409f      	lsls	r7, r3
 8021120:	430f      	orrs	r7, r1
 8021122:	4661      	mov	r1, ip
 8021124:	c180      	stmia	r1!, {r7}
 8021126:	468c      	mov	ip, r1
 8021128:	9b01      	ldr	r3, [sp, #4]
 802112a:	ce02      	ldmia	r6!, {r1}
 802112c:	40d9      	lsrs	r1, r3
 802112e:	e7db      	b.n	80210e8 <rshift+0x58>
 8021130:	c980      	ldmia	r1!, {r7}
 8021132:	c680      	stmia	r6!, {r7}
 8021134:	e7c3      	b.n	80210be <rshift+0x2e>

08021136 <__hexdig_fun>:
 8021136:	0002      	movs	r2, r0
 8021138:	3a30      	subs	r2, #48	@ 0x30
 802113a:	0003      	movs	r3, r0
 802113c:	2a09      	cmp	r2, #9
 802113e:	d802      	bhi.n	8021146 <__hexdig_fun+0x10>
 8021140:	3b20      	subs	r3, #32
 8021142:	b2d8      	uxtb	r0, r3
 8021144:	4770      	bx	lr
 8021146:	0002      	movs	r2, r0
 8021148:	3a61      	subs	r2, #97	@ 0x61
 802114a:	2a05      	cmp	r2, #5
 802114c:	d801      	bhi.n	8021152 <__hexdig_fun+0x1c>
 802114e:	3b47      	subs	r3, #71	@ 0x47
 8021150:	e7f7      	b.n	8021142 <__hexdig_fun+0xc>
 8021152:	001a      	movs	r2, r3
 8021154:	3a41      	subs	r2, #65	@ 0x41
 8021156:	2000      	movs	r0, #0
 8021158:	2a05      	cmp	r2, #5
 802115a:	d8f3      	bhi.n	8021144 <__hexdig_fun+0xe>
 802115c:	3b27      	subs	r3, #39	@ 0x27
 802115e:	e7f0      	b.n	8021142 <__hexdig_fun+0xc>

08021160 <__gethex>:
 8021160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021162:	b089      	sub	sp, #36	@ 0x24
 8021164:	9307      	str	r3, [sp, #28]
 8021166:	680b      	ldr	r3, [r1, #0]
 8021168:	9201      	str	r2, [sp, #4]
 802116a:	9003      	str	r0, [sp, #12]
 802116c:	9106      	str	r1, [sp, #24]
 802116e:	1c9a      	adds	r2, r3, #2
 8021170:	0011      	movs	r1, r2
 8021172:	3201      	adds	r2, #1
 8021174:	1e50      	subs	r0, r2, #1
 8021176:	7800      	ldrb	r0, [r0, #0]
 8021178:	2830      	cmp	r0, #48	@ 0x30
 802117a:	d0f9      	beq.n	8021170 <__gethex+0x10>
 802117c:	1acb      	subs	r3, r1, r3
 802117e:	3b02      	subs	r3, #2
 8021180:	9305      	str	r3, [sp, #20]
 8021182:	9100      	str	r1, [sp, #0]
 8021184:	f7ff ffd7 	bl	8021136 <__hexdig_fun>
 8021188:	2300      	movs	r3, #0
 802118a:	001d      	movs	r5, r3
 802118c:	9302      	str	r3, [sp, #8]
 802118e:	4298      	cmp	r0, r3
 8021190:	d11e      	bne.n	80211d0 <__gethex+0x70>
 8021192:	2201      	movs	r2, #1
 8021194:	49a6      	ldr	r1, [pc, #664]	@ (8021430 <__gethex+0x2d0>)
 8021196:	9800      	ldr	r0, [sp, #0]
 8021198:	f7fe ffd8 	bl	802014c <strncmp>
 802119c:	0007      	movs	r7, r0
 802119e:	42a8      	cmp	r0, r5
 80211a0:	d000      	beq.n	80211a4 <__gethex+0x44>
 80211a2:	e06a      	b.n	802127a <__gethex+0x11a>
 80211a4:	9b00      	ldr	r3, [sp, #0]
 80211a6:	7858      	ldrb	r0, [r3, #1]
 80211a8:	1c5c      	adds	r4, r3, #1
 80211aa:	f7ff ffc4 	bl	8021136 <__hexdig_fun>
 80211ae:	2301      	movs	r3, #1
 80211b0:	9302      	str	r3, [sp, #8]
 80211b2:	42a8      	cmp	r0, r5
 80211b4:	d02f      	beq.n	8021216 <__gethex+0xb6>
 80211b6:	9400      	str	r4, [sp, #0]
 80211b8:	9b00      	ldr	r3, [sp, #0]
 80211ba:	7818      	ldrb	r0, [r3, #0]
 80211bc:	2830      	cmp	r0, #48	@ 0x30
 80211be:	d009      	beq.n	80211d4 <__gethex+0x74>
 80211c0:	f7ff ffb9 	bl	8021136 <__hexdig_fun>
 80211c4:	4242      	negs	r2, r0
 80211c6:	4142      	adcs	r2, r0
 80211c8:	2301      	movs	r3, #1
 80211ca:	0025      	movs	r5, r4
 80211cc:	9202      	str	r2, [sp, #8]
 80211ce:	9305      	str	r3, [sp, #20]
 80211d0:	9c00      	ldr	r4, [sp, #0]
 80211d2:	e004      	b.n	80211de <__gethex+0x7e>
 80211d4:	9b00      	ldr	r3, [sp, #0]
 80211d6:	3301      	adds	r3, #1
 80211d8:	9300      	str	r3, [sp, #0]
 80211da:	e7ed      	b.n	80211b8 <__gethex+0x58>
 80211dc:	3401      	adds	r4, #1
 80211de:	7820      	ldrb	r0, [r4, #0]
 80211e0:	f7ff ffa9 	bl	8021136 <__hexdig_fun>
 80211e4:	1e07      	subs	r7, r0, #0
 80211e6:	d1f9      	bne.n	80211dc <__gethex+0x7c>
 80211e8:	2201      	movs	r2, #1
 80211ea:	0020      	movs	r0, r4
 80211ec:	4990      	ldr	r1, [pc, #576]	@ (8021430 <__gethex+0x2d0>)
 80211ee:	f7fe ffad 	bl	802014c <strncmp>
 80211f2:	2800      	cmp	r0, #0
 80211f4:	d10d      	bne.n	8021212 <__gethex+0xb2>
 80211f6:	2d00      	cmp	r5, #0
 80211f8:	d106      	bne.n	8021208 <__gethex+0xa8>
 80211fa:	3401      	adds	r4, #1
 80211fc:	0025      	movs	r5, r4
 80211fe:	7820      	ldrb	r0, [r4, #0]
 8021200:	f7ff ff99 	bl	8021136 <__hexdig_fun>
 8021204:	2800      	cmp	r0, #0
 8021206:	d102      	bne.n	802120e <__gethex+0xae>
 8021208:	1b2d      	subs	r5, r5, r4
 802120a:	00af      	lsls	r7, r5, #2
 802120c:	e003      	b.n	8021216 <__gethex+0xb6>
 802120e:	3401      	adds	r4, #1
 8021210:	e7f5      	b.n	80211fe <__gethex+0x9e>
 8021212:	2d00      	cmp	r5, #0
 8021214:	d1f8      	bne.n	8021208 <__gethex+0xa8>
 8021216:	2220      	movs	r2, #32
 8021218:	7823      	ldrb	r3, [r4, #0]
 802121a:	0026      	movs	r6, r4
 802121c:	4393      	bics	r3, r2
 802121e:	2b50      	cmp	r3, #80	@ 0x50
 8021220:	d11d      	bne.n	802125e <__gethex+0xfe>
 8021222:	7863      	ldrb	r3, [r4, #1]
 8021224:	2b2b      	cmp	r3, #43	@ 0x2b
 8021226:	d02d      	beq.n	8021284 <__gethex+0x124>
 8021228:	2b2d      	cmp	r3, #45	@ 0x2d
 802122a:	d02f      	beq.n	802128c <__gethex+0x12c>
 802122c:	2300      	movs	r3, #0
 802122e:	1c66      	adds	r6, r4, #1
 8021230:	9304      	str	r3, [sp, #16]
 8021232:	7830      	ldrb	r0, [r6, #0]
 8021234:	f7ff ff7f 	bl	8021136 <__hexdig_fun>
 8021238:	1e43      	subs	r3, r0, #1
 802123a:	b2db      	uxtb	r3, r3
 802123c:	0005      	movs	r5, r0
 802123e:	2b18      	cmp	r3, #24
 8021240:	d82a      	bhi.n	8021298 <__gethex+0x138>
 8021242:	7870      	ldrb	r0, [r6, #1]
 8021244:	f7ff ff77 	bl	8021136 <__hexdig_fun>
 8021248:	1e43      	subs	r3, r0, #1
 802124a:	b2db      	uxtb	r3, r3
 802124c:	3601      	adds	r6, #1
 802124e:	3d10      	subs	r5, #16
 8021250:	2b18      	cmp	r3, #24
 8021252:	d91d      	bls.n	8021290 <__gethex+0x130>
 8021254:	9b04      	ldr	r3, [sp, #16]
 8021256:	2b00      	cmp	r3, #0
 8021258:	d000      	beq.n	802125c <__gethex+0xfc>
 802125a:	426d      	negs	r5, r5
 802125c:	197f      	adds	r7, r7, r5
 802125e:	9b06      	ldr	r3, [sp, #24]
 8021260:	601e      	str	r6, [r3, #0]
 8021262:	9b02      	ldr	r3, [sp, #8]
 8021264:	2b00      	cmp	r3, #0
 8021266:	d019      	beq.n	802129c <__gethex+0x13c>
 8021268:	9b05      	ldr	r3, [sp, #20]
 802126a:	2606      	movs	r6, #6
 802126c:	425a      	negs	r2, r3
 802126e:	4153      	adcs	r3, r2
 8021270:	425b      	negs	r3, r3
 8021272:	401e      	ands	r6, r3
 8021274:	0030      	movs	r0, r6
 8021276:	b009      	add	sp, #36	@ 0x24
 8021278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802127a:	2301      	movs	r3, #1
 802127c:	2700      	movs	r7, #0
 802127e:	9c00      	ldr	r4, [sp, #0]
 8021280:	9302      	str	r3, [sp, #8]
 8021282:	e7c8      	b.n	8021216 <__gethex+0xb6>
 8021284:	2300      	movs	r3, #0
 8021286:	9304      	str	r3, [sp, #16]
 8021288:	1ca6      	adds	r6, r4, #2
 802128a:	e7d2      	b.n	8021232 <__gethex+0xd2>
 802128c:	2301      	movs	r3, #1
 802128e:	e7fa      	b.n	8021286 <__gethex+0x126>
 8021290:	230a      	movs	r3, #10
 8021292:	435d      	muls	r5, r3
 8021294:	182d      	adds	r5, r5, r0
 8021296:	e7d4      	b.n	8021242 <__gethex+0xe2>
 8021298:	0026      	movs	r6, r4
 802129a:	e7e0      	b.n	802125e <__gethex+0xfe>
 802129c:	9b00      	ldr	r3, [sp, #0]
 802129e:	9902      	ldr	r1, [sp, #8]
 80212a0:	1ae3      	subs	r3, r4, r3
 80212a2:	3b01      	subs	r3, #1
 80212a4:	2b07      	cmp	r3, #7
 80212a6:	dc0a      	bgt.n	80212be <__gethex+0x15e>
 80212a8:	9803      	ldr	r0, [sp, #12]
 80212aa:	f000 fb19 	bl	80218e0 <_Balloc>
 80212ae:	1e05      	subs	r5, r0, #0
 80212b0:	d108      	bne.n	80212c4 <__gethex+0x164>
 80212b2:	002a      	movs	r2, r5
 80212b4:	21e4      	movs	r1, #228	@ 0xe4
 80212b6:	4b5f      	ldr	r3, [pc, #380]	@ (8021434 <__gethex+0x2d4>)
 80212b8:	485f      	ldr	r0, [pc, #380]	@ (8021438 <__gethex+0x2d8>)
 80212ba:	f001 fbf1 	bl	8022aa0 <__assert_func>
 80212be:	3101      	adds	r1, #1
 80212c0:	105b      	asrs	r3, r3, #1
 80212c2:	e7ef      	b.n	80212a4 <__gethex+0x144>
 80212c4:	0003      	movs	r3, r0
 80212c6:	3314      	adds	r3, #20
 80212c8:	9302      	str	r3, [sp, #8]
 80212ca:	9305      	str	r3, [sp, #20]
 80212cc:	2300      	movs	r3, #0
 80212ce:	001e      	movs	r6, r3
 80212d0:	9304      	str	r3, [sp, #16]
 80212d2:	9b00      	ldr	r3, [sp, #0]
 80212d4:	42a3      	cmp	r3, r4
 80212d6:	d338      	bcc.n	802134a <__gethex+0x1ea>
 80212d8:	9c05      	ldr	r4, [sp, #20]
 80212da:	9b02      	ldr	r3, [sp, #8]
 80212dc:	c440      	stmia	r4!, {r6}
 80212de:	1ae4      	subs	r4, r4, r3
 80212e0:	10a4      	asrs	r4, r4, #2
 80212e2:	0030      	movs	r0, r6
 80212e4:	612c      	str	r4, [r5, #16]
 80212e6:	f000 fbf3 	bl	8021ad0 <__hi0bits>
 80212ea:	9b01      	ldr	r3, [sp, #4]
 80212ec:	0164      	lsls	r4, r4, #5
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	1a26      	subs	r6, r4, r0
 80212f2:	9300      	str	r3, [sp, #0]
 80212f4:	429e      	cmp	r6, r3
 80212f6:	dd52      	ble.n	802139e <__gethex+0x23e>
 80212f8:	1af6      	subs	r6, r6, r3
 80212fa:	0031      	movs	r1, r6
 80212fc:	0028      	movs	r0, r5
 80212fe:	f000 ff96 	bl	802222e <__any_on>
 8021302:	1e04      	subs	r4, r0, #0
 8021304:	d00f      	beq.n	8021326 <__gethex+0x1c6>
 8021306:	2401      	movs	r4, #1
 8021308:	231f      	movs	r3, #31
 802130a:	0020      	movs	r0, r4
 802130c:	1e72      	subs	r2, r6, #1
 802130e:	4013      	ands	r3, r2
 8021310:	4098      	lsls	r0, r3
 8021312:	0003      	movs	r3, r0
 8021314:	1151      	asrs	r1, r2, #5
 8021316:	9802      	ldr	r0, [sp, #8]
 8021318:	0089      	lsls	r1, r1, #2
 802131a:	5809      	ldr	r1, [r1, r0]
 802131c:	4219      	tst	r1, r3
 802131e:	d002      	beq.n	8021326 <__gethex+0x1c6>
 8021320:	42a2      	cmp	r2, r4
 8021322:	dc34      	bgt.n	802138e <__gethex+0x22e>
 8021324:	2402      	movs	r4, #2
 8021326:	0031      	movs	r1, r6
 8021328:	0028      	movs	r0, r5
 802132a:	f7ff feb1 	bl	8021090 <rshift>
 802132e:	19bf      	adds	r7, r7, r6
 8021330:	9b01      	ldr	r3, [sp, #4]
 8021332:	689b      	ldr	r3, [r3, #8]
 8021334:	42bb      	cmp	r3, r7
 8021336:	da42      	bge.n	80213be <__gethex+0x25e>
 8021338:	0029      	movs	r1, r5
 802133a:	9803      	ldr	r0, [sp, #12]
 802133c:	f000 fb14 	bl	8021968 <_Bfree>
 8021340:	2300      	movs	r3, #0
 8021342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021344:	26a3      	movs	r6, #163	@ 0xa3
 8021346:	6013      	str	r3, [r2, #0]
 8021348:	e794      	b.n	8021274 <__gethex+0x114>
 802134a:	3c01      	subs	r4, #1
 802134c:	7823      	ldrb	r3, [r4, #0]
 802134e:	2b2e      	cmp	r3, #46	@ 0x2e
 8021350:	d012      	beq.n	8021378 <__gethex+0x218>
 8021352:	9b04      	ldr	r3, [sp, #16]
 8021354:	2b20      	cmp	r3, #32
 8021356:	d104      	bne.n	8021362 <__gethex+0x202>
 8021358:	9b05      	ldr	r3, [sp, #20]
 802135a:	c340      	stmia	r3!, {r6}
 802135c:	2600      	movs	r6, #0
 802135e:	9305      	str	r3, [sp, #20]
 8021360:	9604      	str	r6, [sp, #16]
 8021362:	7820      	ldrb	r0, [r4, #0]
 8021364:	f7ff fee7 	bl	8021136 <__hexdig_fun>
 8021368:	230f      	movs	r3, #15
 802136a:	4018      	ands	r0, r3
 802136c:	9b04      	ldr	r3, [sp, #16]
 802136e:	4098      	lsls	r0, r3
 8021370:	3304      	adds	r3, #4
 8021372:	4306      	orrs	r6, r0
 8021374:	9304      	str	r3, [sp, #16]
 8021376:	e7ac      	b.n	80212d2 <__gethex+0x172>
 8021378:	9b00      	ldr	r3, [sp, #0]
 802137a:	42a3      	cmp	r3, r4
 802137c:	d8e9      	bhi.n	8021352 <__gethex+0x1f2>
 802137e:	2201      	movs	r2, #1
 8021380:	0020      	movs	r0, r4
 8021382:	492b      	ldr	r1, [pc, #172]	@ (8021430 <__gethex+0x2d0>)
 8021384:	f7fe fee2 	bl	802014c <strncmp>
 8021388:	2800      	cmp	r0, #0
 802138a:	d1e2      	bne.n	8021352 <__gethex+0x1f2>
 802138c:	e7a1      	b.n	80212d2 <__gethex+0x172>
 802138e:	0028      	movs	r0, r5
 8021390:	1eb1      	subs	r1, r6, #2
 8021392:	f000 ff4c 	bl	802222e <__any_on>
 8021396:	2800      	cmp	r0, #0
 8021398:	d0c4      	beq.n	8021324 <__gethex+0x1c4>
 802139a:	2403      	movs	r4, #3
 802139c:	e7c3      	b.n	8021326 <__gethex+0x1c6>
 802139e:	9b00      	ldr	r3, [sp, #0]
 80213a0:	2400      	movs	r4, #0
 80213a2:	429e      	cmp	r6, r3
 80213a4:	dac4      	bge.n	8021330 <__gethex+0x1d0>
 80213a6:	1b9e      	subs	r6, r3, r6
 80213a8:	0029      	movs	r1, r5
 80213aa:	0032      	movs	r2, r6
 80213ac:	9803      	ldr	r0, [sp, #12]
 80213ae:	f000 fd05 	bl	8021dbc <__lshift>
 80213b2:	0003      	movs	r3, r0
 80213b4:	3314      	adds	r3, #20
 80213b6:	0005      	movs	r5, r0
 80213b8:	1bbf      	subs	r7, r7, r6
 80213ba:	9302      	str	r3, [sp, #8]
 80213bc:	e7b8      	b.n	8021330 <__gethex+0x1d0>
 80213be:	9b01      	ldr	r3, [sp, #4]
 80213c0:	685e      	ldr	r6, [r3, #4]
 80213c2:	42be      	cmp	r6, r7
 80213c4:	dd6f      	ble.n	80214a6 <__gethex+0x346>
 80213c6:	9b00      	ldr	r3, [sp, #0]
 80213c8:	1bf6      	subs	r6, r6, r7
 80213ca:	42b3      	cmp	r3, r6
 80213cc:	dc36      	bgt.n	802143c <__gethex+0x2dc>
 80213ce:	9b01      	ldr	r3, [sp, #4]
 80213d0:	68db      	ldr	r3, [r3, #12]
 80213d2:	2b02      	cmp	r3, #2
 80213d4:	d024      	beq.n	8021420 <__gethex+0x2c0>
 80213d6:	2b03      	cmp	r3, #3
 80213d8:	d026      	beq.n	8021428 <__gethex+0x2c8>
 80213da:	2b01      	cmp	r3, #1
 80213dc:	d117      	bne.n	802140e <__gethex+0x2ae>
 80213de:	9b00      	ldr	r3, [sp, #0]
 80213e0:	42b3      	cmp	r3, r6
 80213e2:	d114      	bne.n	802140e <__gethex+0x2ae>
 80213e4:	2b01      	cmp	r3, #1
 80213e6:	d10b      	bne.n	8021400 <__gethex+0x2a0>
 80213e8:	9b01      	ldr	r3, [sp, #4]
 80213ea:	9a07      	ldr	r2, [sp, #28]
 80213ec:	685b      	ldr	r3, [r3, #4]
 80213ee:	2662      	movs	r6, #98	@ 0x62
 80213f0:	6013      	str	r3, [r2, #0]
 80213f2:	2301      	movs	r3, #1
 80213f4:	9a02      	ldr	r2, [sp, #8]
 80213f6:	612b      	str	r3, [r5, #16]
 80213f8:	6013      	str	r3, [r2, #0]
 80213fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80213fc:	601d      	str	r5, [r3, #0]
 80213fe:	e739      	b.n	8021274 <__gethex+0x114>
 8021400:	9900      	ldr	r1, [sp, #0]
 8021402:	0028      	movs	r0, r5
 8021404:	3901      	subs	r1, #1
 8021406:	f000 ff12 	bl	802222e <__any_on>
 802140a:	2800      	cmp	r0, #0
 802140c:	d1ec      	bne.n	80213e8 <__gethex+0x288>
 802140e:	0029      	movs	r1, r5
 8021410:	9803      	ldr	r0, [sp, #12]
 8021412:	f000 faa9 	bl	8021968 <_Bfree>
 8021416:	2300      	movs	r3, #0
 8021418:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802141a:	2650      	movs	r6, #80	@ 0x50
 802141c:	6013      	str	r3, [r2, #0]
 802141e:	e729      	b.n	8021274 <__gethex+0x114>
 8021420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021422:	2b00      	cmp	r3, #0
 8021424:	d1f3      	bne.n	802140e <__gethex+0x2ae>
 8021426:	e7df      	b.n	80213e8 <__gethex+0x288>
 8021428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802142a:	2b00      	cmp	r3, #0
 802142c:	d1dc      	bne.n	80213e8 <__gethex+0x288>
 802142e:	e7ee      	b.n	802140e <__gethex+0x2ae>
 8021430:	08025ad0 	.word	0x08025ad0
 8021434:	08025ce1 	.word	0x08025ce1
 8021438:	08025cf2 	.word	0x08025cf2
 802143c:	1e77      	subs	r7, r6, #1
 802143e:	2c00      	cmp	r4, #0
 8021440:	d12f      	bne.n	80214a2 <__gethex+0x342>
 8021442:	2f00      	cmp	r7, #0
 8021444:	d004      	beq.n	8021450 <__gethex+0x2f0>
 8021446:	0039      	movs	r1, r7
 8021448:	0028      	movs	r0, r5
 802144a:	f000 fef0 	bl	802222e <__any_on>
 802144e:	0004      	movs	r4, r0
 8021450:	231f      	movs	r3, #31
 8021452:	117a      	asrs	r2, r7, #5
 8021454:	401f      	ands	r7, r3
 8021456:	3b1e      	subs	r3, #30
 8021458:	40bb      	lsls	r3, r7
 802145a:	9902      	ldr	r1, [sp, #8]
 802145c:	0092      	lsls	r2, r2, #2
 802145e:	5852      	ldr	r2, [r2, r1]
 8021460:	421a      	tst	r2, r3
 8021462:	d001      	beq.n	8021468 <__gethex+0x308>
 8021464:	2302      	movs	r3, #2
 8021466:	431c      	orrs	r4, r3
 8021468:	9b00      	ldr	r3, [sp, #0]
 802146a:	0031      	movs	r1, r6
 802146c:	1b9b      	subs	r3, r3, r6
 802146e:	2602      	movs	r6, #2
 8021470:	0028      	movs	r0, r5
 8021472:	9300      	str	r3, [sp, #0]
 8021474:	f7ff fe0c 	bl	8021090 <rshift>
 8021478:	9b01      	ldr	r3, [sp, #4]
 802147a:	685f      	ldr	r7, [r3, #4]
 802147c:	2c00      	cmp	r4, #0
 802147e:	d03f      	beq.n	8021500 <__gethex+0x3a0>
 8021480:	9b01      	ldr	r3, [sp, #4]
 8021482:	68db      	ldr	r3, [r3, #12]
 8021484:	2b02      	cmp	r3, #2
 8021486:	d010      	beq.n	80214aa <__gethex+0x34a>
 8021488:	2b03      	cmp	r3, #3
 802148a:	d012      	beq.n	80214b2 <__gethex+0x352>
 802148c:	2b01      	cmp	r3, #1
 802148e:	d106      	bne.n	802149e <__gethex+0x33e>
 8021490:	07a2      	lsls	r2, r4, #30
 8021492:	d504      	bpl.n	802149e <__gethex+0x33e>
 8021494:	9a02      	ldr	r2, [sp, #8]
 8021496:	6812      	ldr	r2, [r2, #0]
 8021498:	4314      	orrs	r4, r2
 802149a:	421c      	tst	r4, r3
 802149c:	d10c      	bne.n	80214b8 <__gethex+0x358>
 802149e:	2310      	movs	r3, #16
 80214a0:	e02d      	b.n	80214fe <__gethex+0x39e>
 80214a2:	2401      	movs	r4, #1
 80214a4:	e7d4      	b.n	8021450 <__gethex+0x2f0>
 80214a6:	2601      	movs	r6, #1
 80214a8:	e7e8      	b.n	802147c <__gethex+0x31c>
 80214aa:	2301      	movs	r3, #1
 80214ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80214ae:	1a9b      	subs	r3, r3, r2
 80214b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80214b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	d0f2      	beq.n	802149e <__gethex+0x33e>
 80214b8:	692b      	ldr	r3, [r5, #16]
 80214ba:	2000      	movs	r0, #0
 80214bc:	9302      	str	r3, [sp, #8]
 80214be:	009b      	lsls	r3, r3, #2
 80214c0:	9304      	str	r3, [sp, #16]
 80214c2:	002b      	movs	r3, r5
 80214c4:	9a04      	ldr	r2, [sp, #16]
 80214c6:	3314      	adds	r3, #20
 80214c8:	1899      	adds	r1, r3, r2
 80214ca:	681a      	ldr	r2, [r3, #0]
 80214cc:	1c54      	adds	r4, r2, #1
 80214ce:	d01c      	beq.n	802150a <__gethex+0x3aa>
 80214d0:	3201      	adds	r2, #1
 80214d2:	601a      	str	r2, [r3, #0]
 80214d4:	002b      	movs	r3, r5
 80214d6:	3314      	adds	r3, #20
 80214d8:	2e02      	cmp	r6, #2
 80214da:	d13f      	bne.n	802155c <__gethex+0x3fc>
 80214dc:	9a01      	ldr	r2, [sp, #4]
 80214de:	9900      	ldr	r1, [sp, #0]
 80214e0:	6812      	ldr	r2, [r2, #0]
 80214e2:	3a01      	subs	r2, #1
 80214e4:	428a      	cmp	r2, r1
 80214e6:	d109      	bne.n	80214fc <__gethex+0x39c>
 80214e8:	000a      	movs	r2, r1
 80214ea:	201f      	movs	r0, #31
 80214ec:	4010      	ands	r0, r2
 80214ee:	2201      	movs	r2, #1
 80214f0:	4082      	lsls	r2, r0
 80214f2:	1149      	asrs	r1, r1, #5
 80214f4:	0089      	lsls	r1, r1, #2
 80214f6:	58cb      	ldr	r3, [r1, r3]
 80214f8:	4213      	tst	r3, r2
 80214fa:	d13d      	bne.n	8021578 <__gethex+0x418>
 80214fc:	2320      	movs	r3, #32
 80214fe:	431e      	orrs	r6, r3
 8021500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021502:	601d      	str	r5, [r3, #0]
 8021504:	9b07      	ldr	r3, [sp, #28]
 8021506:	601f      	str	r7, [r3, #0]
 8021508:	e6b4      	b.n	8021274 <__gethex+0x114>
 802150a:	c301      	stmia	r3!, {r0}
 802150c:	4299      	cmp	r1, r3
 802150e:	d8dc      	bhi.n	80214ca <__gethex+0x36a>
 8021510:	68ab      	ldr	r3, [r5, #8]
 8021512:	9a02      	ldr	r2, [sp, #8]
 8021514:	429a      	cmp	r2, r3
 8021516:	db18      	blt.n	802154a <__gethex+0x3ea>
 8021518:	6869      	ldr	r1, [r5, #4]
 802151a:	9803      	ldr	r0, [sp, #12]
 802151c:	3101      	adds	r1, #1
 802151e:	f000 f9df 	bl	80218e0 <_Balloc>
 8021522:	1e04      	subs	r4, r0, #0
 8021524:	d104      	bne.n	8021530 <__gethex+0x3d0>
 8021526:	0022      	movs	r2, r4
 8021528:	2184      	movs	r1, #132	@ 0x84
 802152a:	4b1d      	ldr	r3, [pc, #116]	@ (80215a0 <__gethex+0x440>)
 802152c:	481d      	ldr	r0, [pc, #116]	@ (80215a4 <__gethex+0x444>)
 802152e:	e6c4      	b.n	80212ba <__gethex+0x15a>
 8021530:	0029      	movs	r1, r5
 8021532:	692a      	ldr	r2, [r5, #16]
 8021534:	310c      	adds	r1, #12
 8021536:	3202      	adds	r2, #2
 8021538:	0092      	lsls	r2, r2, #2
 802153a:	300c      	adds	r0, #12
 802153c:	f7fe fecc 	bl	80202d8 <memcpy>
 8021540:	0029      	movs	r1, r5
 8021542:	9803      	ldr	r0, [sp, #12]
 8021544:	f000 fa10 	bl	8021968 <_Bfree>
 8021548:	0025      	movs	r5, r4
 802154a:	692b      	ldr	r3, [r5, #16]
 802154c:	1c5a      	adds	r2, r3, #1
 802154e:	612a      	str	r2, [r5, #16]
 8021550:	2201      	movs	r2, #1
 8021552:	3304      	adds	r3, #4
 8021554:	009b      	lsls	r3, r3, #2
 8021556:	18eb      	adds	r3, r5, r3
 8021558:	605a      	str	r2, [r3, #4]
 802155a:	e7bb      	b.n	80214d4 <__gethex+0x374>
 802155c:	692a      	ldr	r2, [r5, #16]
 802155e:	9902      	ldr	r1, [sp, #8]
 8021560:	428a      	cmp	r2, r1
 8021562:	dd0b      	ble.n	802157c <__gethex+0x41c>
 8021564:	2101      	movs	r1, #1
 8021566:	0028      	movs	r0, r5
 8021568:	f7ff fd92 	bl	8021090 <rshift>
 802156c:	9b01      	ldr	r3, [sp, #4]
 802156e:	3701      	adds	r7, #1
 8021570:	689b      	ldr	r3, [r3, #8]
 8021572:	42bb      	cmp	r3, r7
 8021574:	da00      	bge.n	8021578 <__gethex+0x418>
 8021576:	e6df      	b.n	8021338 <__gethex+0x1d8>
 8021578:	2601      	movs	r6, #1
 802157a:	e7bf      	b.n	80214fc <__gethex+0x39c>
 802157c:	221f      	movs	r2, #31
 802157e:	9c00      	ldr	r4, [sp, #0]
 8021580:	9900      	ldr	r1, [sp, #0]
 8021582:	4014      	ands	r4, r2
 8021584:	4211      	tst	r1, r2
 8021586:	d0f7      	beq.n	8021578 <__gethex+0x418>
 8021588:	9a04      	ldr	r2, [sp, #16]
 802158a:	189b      	adds	r3, r3, r2
 802158c:	3b04      	subs	r3, #4
 802158e:	6818      	ldr	r0, [r3, #0]
 8021590:	f000 fa9e 	bl	8021ad0 <__hi0bits>
 8021594:	2320      	movs	r3, #32
 8021596:	1b1b      	subs	r3, r3, r4
 8021598:	4298      	cmp	r0, r3
 802159a:	dbe3      	blt.n	8021564 <__gethex+0x404>
 802159c:	e7ec      	b.n	8021578 <__gethex+0x418>
 802159e:	46c0      	nop			@ (mov r8, r8)
 80215a0:	08025ce1 	.word	0x08025ce1
 80215a4:	08025cf2 	.word	0x08025cf2

080215a8 <L_shift>:
 80215a8:	2308      	movs	r3, #8
 80215aa:	b570      	push	{r4, r5, r6, lr}
 80215ac:	2520      	movs	r5, #32
 80215ae:	1a9a      	subs	r2, r3, r2
 80215b0:	0092      	lsls	r2, r2, #2
 80215b2:	1aad      	subs	r5, r5, r2
 80215b4:	6843      	ldr	r3, [r0, #4]
 80215b6:	6804      	ldr	r4, [r0, #0]
 80215b8:	001e      	movs	r6, r3
 80215ba:	40ae      	lsls	r6, r5
 80215bc:	40d3      	lsrs	r3, r2
 80215be:	4334      	orrs	r4, r6
 80215c0:	6004      	str	r4, [r0, #0]
 80215c2:	6043      	str	r3, [r0, #4]
 80215c4:	3004      	adds	r0, #4
 80215c6:	4288      	cmp	r0, r1
 80215c8:	d3f4      	bcc.n	80215b4 <L_shift+0xc>
 80215ca:	bd70      	pop	{r4, r5, r6, pc}

080215cc <__match>:
 80215cc:	b530      	push	{r4, r5, lr}
 80215ce:	6803      	ldr	r3, [r0, #0]
 80215d0:	780c      	ldrb	r4, [r1, #0]
 80215d2:	3301      	adds	r3, #1
 80215d4:	2c00      	cmp	r4, #0
 80215d6:	d102      	bne.n	80215de <__match+0x12>
 80215d8:	6003      	str	r3, [r0, #0]
 80215da:	2001      	movs	r0, #1
 80215dc:	bd30      	pop	{r4, r5, pc}
 80215de:	781a      	ldrb	r2, [r3, #0]
 80215e0:	0015      	movs	r5, r2
 80215e2:	3d41      	subs	r5, #65	@ 0x41
 80215e4:	2d19      	cmp	r5, #25
 80215e6:	d800      	bhi.n	80215ea <__match+0x1e>
 80215e8:	3220      	adds	r2, #32
 80215ea:	3101      	adds	r1, #1
 80215ec:	42a2      	cmp	r2, r4
 80215ee:	d0ef      	beq.n	80215d0 <__match+0x4>
 80215f0:	2000      	movs	r0, #0
 80215f2:	e7f3      	b.n	80215dc <__match+0x10>

080215f4 <__hexnan>:
 80215f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215f6:	680b      	ldr	r3, [r1, #0]
 80215f8:	b08b      	sub	sp, #44	@ 0x2c
 80215fa:	9201      	str	r2, [sp, #4]
 80215fc:	9901      	ldr	r1, [sp, #4]
 80215fe:	115a      	asrs	r2, r3, #5
 8021600:	0092      	lsls	r2, r2, #2
 8021602:	188a      	adds	r2, r1, r2
 8021604:	9202      	str	r2, [sp, #8]
 8021606:	0019      	movs	r1, r3
 8021608:	221f      	movs	r2, #31
 802160a:	4011      	ands	r1, r2
 802160c:	9008      	str	r0, [sp, #32]
 802160e:	9106      	str	r1, [sp, #24]
 8021610:	4213      	tst	r3, r2
 8021612:	d002      	beq.n	802161a <__hexnan+0x26>
 8021614:	9b02      	ldr	r3, [sp, #8]
 8021616:	3304      	adds	r3, #4
 8021618:	9302      	str	r3, [sp, #8]
 802161a:	9b02      	ldr	r3, [sp, #8]
 802161c:	2500      	movs	r5, #0
 802161e:	1f1f      	subs	r7, r3, #4
 8021620:	003e      	movs	r6, r7
 8021622:	003c      	movs	r4, r7
 8021624:	9b08      	ldr	r3, [sp, #32]
 8021626:	603d      	str	r5, [r7, #0]
 8021628:	681b      	ldr	r3, [r3, #0]
 802162a:	9507      	str	r5, [sp, #28]
 802162c:	9305      	str	r3, [sp, #20]
 802162e:	9503      	str	r5, [sp, #12]
 8021630:	9b05      	ldr	r3, [sp, #20]
 8021632:	3301      	adds	r3, #1
 8021634:	9309      	str	r3, [sp, #36]	@ 0x24
 8021636:	9b05      	ldr	r3, [sp, #20]
 8021638:	785b      	ldrb	r3, [r3, #1]
 802163a:	9304      	str	r3, [sp, #16]
 802163c:	2b00      	cmp	r3, #0
 802163e:	d028      	beq.n	8021692 <__hexnan+0x9e>
 8021640:	9804      	ldr	r0, [sp, #16]
 8021642:	f7ff fd78 	bl	8021136 <__hexdig_fun>
 8021646:	2800      	cmp	r0, #0
 8021648:	d155      	bne.n	80216f6 <__hexnan+0x102>
 802164a:	9b04      	ldr	r3, [sp, #16]
 802164c:	2b20      	cmp	r3, #32
 802164e:	d819      	bhi.n	8021684 <__hexnan+0x90>
 8021650:	9b03      	ldr	r3, [sp, #12]
 8021652:	9a07      	ldr	r2, [sp, #28]
 8021654:	4293      	cmp	r3, r2
 8021656:	dd12      	ble.n	802167e <__hexnan+0x8a>
 8021658:	42b4      	cmp	r4, r6
 802165a:	d206      	bcs.n	802166a <__hexnan+0x76>
 802165c:	2d07      	cmp	r5, #7
 802165e:	dc04      	bgt.n	802166a <__hexnan+0x76>
 8021660:	002a      	movs	r2, r5
 8021662:	0031      	movs	r1, r6
 8021664:	0020      	movs	r0, r4
 8021666:	f7ff ff9f 	bl	80215a8 <L_shift>
 802166a:	9b01      	ldr	r3, [sp, #4]
 802166c:	2508      	movs	r5, #8
 802166e:	429c      	cmp	r4, r3
 8021670:	d905      	bls.n	802167e <__hexnan+0x8a>
 8021672:	1f26      	subs	r6, r4, #4
 8021674:	2500      	movs	r5, #0
 8021676:	0034      	movs	r4, r6
 8021678:	9b03      	ldr	r3, [sp, #12]
 802167a:	6035      	str	r5, [r6, #0]
 802167c:	9307      	str	r3, [sp, #28]
 802167e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021680:	9305      	str	r3, [sp, #20]
 8021682:	e7d5      	b.n	8021630 <__hexnan+0x3c>
 8021684:	9b04      	ldr	r3, [sp, #16]
 8021686:	2b29      	cmp	r3, #41	@ 0x29
 8021688:	d15a      	bne.n	8021740 <__hexnan+0x14c>
 802168a:	9b05      	ldr	r3, [sp, #20]
 802168c:	9a08      	ldr	r2, [sp, #32]
 802168e:	3302      	adds	r3, #2
 8021690:	6013      	str	r3, [r2, #0]
 8021692:	9b03      	ldr	r3, [sp, #12]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d053      	beq.n	8021740 <__hexnan+0x14c>
 8021698:	42b4      	cmp	r4, r6
 802169a:	d206      	bcs.n	80216aa <__hexnan+0xb6>
 802169c:	2d07      	cmp	r5, #7
 802169e:	dc04      	bgt.n	80216aa <__hexnan+0xb6>
 80216a0:	002a      	movs	r2, r5
 80216a2:	0031      	movs	r1, r6
 80216a4:	0020      	movs	r0, r4
 80216a6:	f7ff ff7f 	bl	80215a8 <L_shift>
 80216aa:	9b01      	ldr	r3, [sp, #4]
 80216ac:	429c      	cmp	r4, r3
 80216ae:	d936      	bls.n	802171e <__hexnan+0x12a>
 80216b0:	001a      	movs	r2, r3
 80216b2:	0023      	movs	r3, r4
 80216b4:	cb02      	ldmia	r3!, {r1}
 80216b6:	c202      	stmia	r2!, {r1}
 80216b8:	429f      	cmp	r7, r3
 80216ba:	d2fb      	bcs.n	80216b4 <__hexnan+0xc0>
 80216bc:	9b02      	ldr	r3, [sp, #8]
 80216be:	1c61      	adds	r1, r4, #1
 80216c0:	1eda      	subs	r2, r3, #3
 80216c2:	2304      	movs	r3, #4
 80216c4:	4291      	cmp	r1, r2
 80216c6:	d805      	bhi.n	80216d4 <__hexnan+0xe0>
 80216c8:	9b02      	ldr	r3, [sp, #8]
 80216ca:	3b04      	subs	r3, #4
 80216cc:	1b1b      	subs	r3, r3, r4
 80216ce:	089b      	lsrs	r3, r3, #2
 80216d0:	3301      	adds	r3, #1
 80216d2:	009b      	lsls	r3, r3, #2
 80216d4:	9a01      	ldr	r2, [sp, #4]
 80216d6:	18d3      	adds	r3, r2, r3
 80216d8:	2200      	movs	r2, #0
 80216da:	c304      	stmia	r3!, {r2}
 80216dc:	429f      	cmp	r7, r3
 80216de:	d2fc      	bcs.n	80216da <__hexnan+0xe6>
 80216e0:	683b      	ldr	r3, [r7, #0]
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d104      	bne.n	80216f0 <__hexnan+0xfc>
 80216e6:	9b01      	ldr	r3, [sp, #4]
 80216e8:	429f      	cmp	r7, r3
 80216ea:	d127      	bne.n	802173c <__hexnan+0x148>
 80216ec:	2301      	movs	r3, #1
 80216ee:	603b      	str	r3, [r7, #0]
 80216f0:	2005      	movs	r0, #5
 80216f2:	b00b      	add	sp, #44	@ 0x2c
 80216f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216f6:	9b03      	ldr	r3, [sp, #12]
 80216f8:	3501      	adds	r5, #1
 80216fa:	3301      	adds	r3, #1
 80216fc:	9303      	str	r3, [sp, #12]
 80216fe:	2d08      	cmp	r5, #8
 8021700:	dd06      	ble.n	8021710 <__hexnan+0x11c>
 8021702:	9b01      	ldr	r3, [sp, #4]
 8021704:	429c      	cmp	r4, r3
 8021706:	d9ba      	bls.n	802167e <__hexnan+0x8a>
 8021708:	2300      	movs	r3, #0
 802170a:	2501      	movs	r5, #1
 802170c:	3c04      	subs	r4, #4
 802170e:	6023      	str	r3, [r4, #0]
 8021710:	220f      	movs	r2, #15
 8021712:	6823      	ldr	r3, [r4, #0]
 8021714:	4010      	ands	r0, r2
 8021716:	011b      	lsls	r3, r3, #4
 8021718:	4303      	orrs	r3, r0
 802171a:	6023      	str	r3, [r4, #0]
 802171c:	e7af      	b.n	802167e <__hexnan+0x8a>
 802171e:	9b06      	ldr	r3, [sp, #24]
 8021720:	2b00      	cmp	r3, #0
 8021722:	d0dd      	beq.n	80216e0 <__hexnan+0xec>
 8021724:	2320      	movs	r3, #32
 8021726:	9a06      	ldr	r2, [sp, #24]
 8021728:	9902      	ldr	r1, [sp, #8]
 802172a:	1a9b      	subs	r3, r3, r2
 802172c:	2201      	movs	r2, #1
 802172e:	4252      	negs	r2, r2
 8021730:	40da      	lsrs	r2, r3
 8021732:	3904      	subs	r1, #4
 8021734:	680b      	ldr	r3, [r1, #0]
 8021736:	4013      	ands	r3, r2
 8021738:	600b      	str	r3, [r1, #0]
 802173a:	e7d1      	b.n	80216e0 <__hexnan+0xec>
 802173c:	3f04      	subs	r7, #4
 802173e:	e7cf      	b.n	80216e0 <__hexnan+0xec>
 8021740:	2004      	movs	r0, #4
 8021742:	e7d6      	b.n	80216f2 <__hexnan+0xfe>

08021744 <malloc>:
 8021744:	b510      	push	{r4, lr}
 8021746:	4b03      	ldr	r3, [pc, #12]	@ (8021754 <malloc+0x10>)
 8021748:	0001      	movs	r1, r0
 802174a:	6818      	ldr	r0, [r3, #0]
 802174c:	f000 f826 	bl	802179c <_malloc_r>
 8021750:	bd10      	pop	{r4, pc}
 8021752:	46c0      	nop			@ (mov r8, r8)
 8021754:	200003c8 	.word	0x200003c8

08021758 <sbrk_aligned>:
 8021758:	b570      	push	{r4, r5, r6, lr}
 802175a:	4e0f      	ldr	r6, [pc, #60]	@ (8021798 <sbrk_aligned+0x40>)
 802175c:	000d      	movs	r5, r1
 802175e:	6831      	ldr	r1, [r6, #0]
 8021760:	0004      	movs	r4, r0
 8021762:	2900      	cmp	r1, #0
 8021764:	d102      	bne.n	802176c <sbrk_aligned+0x14>
 8021766:	f001 f989 	bl	8022a7c <_sbrk_r>
 802176a:	6030      	str	r0, [r6, #0]
 802176c:	0029      	movs	r1, r5
 802176e:	0020      	movs	r0, r4
 8021770:	f001 f984 	bl	8022a7c <_sbrk_r>
 8021774:	1c43      	adds	r3, r0, #1
 8021776:	d103      	bne.n	8021780 <sbrk_aligned+0x28>
 8021778:	2501      	movs	r5, #1
 802177a:	426d      	negs	r5, r5
 802177c:	0028      	movs	r0, r5
 802177e:	bd70      	pop	{r4, r5, r6, pc}
 8021780:	2303      	movs	r3, #3
 8021782:	1cc5      	adds	r5, r0, #3
 8021784:	439d      	bics	r5, r3
 8021786:	42a8      	cmp	r0, r5
 8021788:	d0f8      	beq.n	802177c <sbrk_aligned+0x24>
 802178a:	1a29      	subs	r1, r5, r0
 802178c:	0020      	movs	r0, r4
 802178e:	f001 f975 	bl	8022a7c <_sbrk_r>
 8021792:	3001      	adds	r0, #1
 8021794:	d1f2      	bne.n	802177c <sbrk_aligned+0x24>
 8021796:	e7ef      	b.n	8021778 <sbrk_aligned+0x20>
 8021798:	200037a4 	.word	0x200037a4

0802179c <_malloc_r>:
 802179c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802179e:	2203      	movs	r2, #3
 80217a0:	1ccb      	adds	r3, r1, #3
 80217a2:	4393      	bics	r3, r2
 80217a4:	3308      	adds	r3, #8
 80217a6:	0005      	movs	r5, r0
 80217a8:	001f      	movs	r7, r3
 80217aa:	2b0c      	cmp	r3, #12
 80217ac:	d234      	bcs.n	8021818 <_malloc_r+0x7c>
 80217ae:	270c      	movs	r7, #12
 80217b0:	42b9      	cmp	r1, r7
 80217b2:	d833      	bhi.n	802181c <_malloc_r+0x80>
 80217b4:	0028      	movs	r0, r5
 80217b6:	f000 f883 	bl	80218c0 <__malloc_lock>
 80217ba:	4e37      	ldr	r6, [pc, #220]	@ (8021898 <_malloc_r+0xfc>)
 80217bc:	6833      	ldr	r3, [r6, #0]
 80217be:	001c      	movs	r4, r3
 80217c0:	2c00      	cmp	r4, #0
 80217c2:	d12f      	bne.n	8021824 <_malloc_r+0x88>
 80217c4:	0039      	movs	r1, r7
 80217c6:	0028      	movs	r0, r5
 80217c8:	f7ff ffc6 	bl	8021758 <sbrk_aligned>
 80217cc:	0004      	movs	r4, r0
 80217ce:	1c43      	adds	r3, r0, #1
 80217d0:	d15f      	bne.n	8021892 <_malloc_r+0xf6>
 80217d2:	6834      	ldr	r4, [r6, #0]
 80217d4:	9400      	str	r4, [sp, #0]
 80217d6:	9b00      	ldr	r3, [sp, #0]
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d14a      	bne.n	8021872 <_malloc_r+0xd6>
 80217dc:	2c00      	cmp	r4, #0
 80217de:	d052      	beq.n	8021886 <_malloc_r+0xea>
 80217e0:	6823      	ldr	r3, [r4, #0]
 80217e2:	0028      	movs	r0, r5
 80217e4:	18e3      	adds	r3, r4, r3
 80217e6:	9900      	ldr	r1, [sp, #0]
 80217e8:	9301      	str	r3, [sp, #4]
 80217ea:	f001 f947 	bl	8022a7c <_sbrk_r>
 80217ee:	9b01      	ldr	r3, [sp, #4]
 80217f0:	4283      	cmp	r3, r0
 80217f2:	d148      	bne.n	8021886 <_malloc_r+0xea>
 80217f4:	6823      	ldr	r3, [r4, #0]
 80217f6:	0028      	movs	r0, r5
 80217f8:	1aff      	subs	r7, r7, r3
 80217fa:	0039      	movs	r1, r7
 80217fc:	f7ff ffac 	bl	8021758 <sbrk_aligned>
 8021800:	3001      	adds	r0, #1
 8021802:	d040      	beq.n	8021886 <_malloc_r+0xea>
 8021804:	6823      	ldr	r3, [r4, #0]
 8021806:	19db      	adds	r3, r3, r7
 8021808:	6023      	str	r3, [r4, #0]
 802180a:	6833      	ldr	r3, [r6, #0]
 802180c:	685a      	ldr	r2, [r3, #4]
 802180e:	2a00      	cmp	r2, #0
 8021810:	d133      	bne.n	802187a <_malloc_r+0xde>
 8021812:	9b00      	ldr	r3, [sp, #0]
 8021814:	6033      	str	r3, [r6, #0]
 8021816:	e019      	b.n	802184c <_malloc_r+0xb0>
 8021818:	2b00      	cmp	r3, #0
 802181a:	dac9      	bge.n	80217b0 <_malloc_r+0x14>
 802181c:	230c      	movs	r3, #12
 802181e:	602b      	str	r3, [r5, #0]
 8021820:	2000      	movs	r0, #0
 8021822:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021824:	6821      	ldr	r1, [r4, #0]
 8021826:	1bc9      	subs	r1, r1, r7
 8021828:	d420      	bmi.n	802186c <_malloc_r+0xd0>
 802182a:	290b      	cmp	r1, #11
 802182c:	d90a      	bls.n	8021844 <_malloc_r+0xa8>
 802182e:	19e2      	adds	r2, r4, r7
 8021830:	6027      	str	r7, [r4, #0]
 8021832:	42a3      	cmp	r3, r4
 8021834:	d104      	bne.n	8021840 <_malloc_r+0xa4>
 8021836:	6032      	str	r2, [r6, #0]
 8021838:	6863      	ldr	r3, [r4, #4]
 802183a:	6011      	str	r1, [r2, #0]
 802183c:	6053      	str	r3, [r2, #4]
 802183e:	e005      	b.n	802184c <_malloc_r+0xb0>
 8021840:	605a      	str	r2, [r3, #4]
 8021842:	e7f9      	b.n	8021838 <_malloc_r+0x9c>
 8021844:	6862      	ldr	r2, [r4, #4]
 8021846:	42a3      	cmp	r3, r4
 8021848:	d10e      	bne.n	8021868 <_malloc_r+0xcc>
 802184a:	6032      	str	r2, [r6, #0]
 802184c:	0028      	movs	r0, r5
 802184e:	f000 f83f 	bl	80218d0 <__malloc_unlock>
 8021852:	0020      	movs	r0, r4
 8021854:	2207      	movs	r2, #7
 8021856:	300b      	adds	r0, #11
 8021858:	1d23      	adds	r3, r4, #4
 802185a:	4390      	bics	r0, r2
 802185c:	1ac2      	subs	r2, r0, r3
 802185e:	4298      	cmp	r0, r3
 8021860:	d0df      	beq.n	8021822 <_malloc_r+0x86>
 8021862:	1a1b      	subs	r3, r3, r0
 8021864:	50a3      	str	r3, [r4, r2]
 8021866:	e7dc      	b.n	8021822 <_malloc_r+0x86>
 8021868:	605a      	str	r2, [r3, #4]
 802186a:	e7ef      	b.n	802184c <_malloc_r+0xb0>
 802186c:	0023      	movs	r3, r4
 802186e:	6864      	ldr	r4, [r4, #4]
 8021870:	e7a6      	b.n	80217c0 <_malloc_r+0x24>
 8021872:	9c00      	ldr	r4, [sp, #0]
 8021874:	6863      	ldr	r3, [r4, #4]
 8021876:	9300      	str	r3, [sp, #0]
 8021878:	e7ad      	b.n	80217d6 <_malloc_r+0x3a>
 802187a:	001a      	movs	r2, r3
 802187c:	685b      	ldr	r3, [r3, #4]
 802187e:	42a3      	cmp	r3, r4
 8021880:	d1fb      	bne.n	802187a <_malloc_r+0xde>
 8021882:	2300      	movs	r3, #0
 8021884:	e7da      	b.n	802183c <_malloc_r+0xa0>
 8021886:	230c      	movs	r3, #12
 8021888:	0028      	movs	r0, r5
 802188a:	602b      	str	r3, [r5, #0]
 802188c:	f000 f820 	bl	80218d0 <__malloc_unlock>
 8021890:	e7c6      	b.n	8021820 <_malloc_r+0x84>
 8021892:	6007      	str	r7, [r0, #0]
 8021894:	e7da      	b.n	802184c <_malloc_r+0xb0>
 8021896:	46c0      	nop			@ (mov r8, r8)
 8021898:	200037a8 	.word	0x200037a8

0802189c <__ascii_mbtowc>:
 802189c:	b082      	sub	sp, #8
 802189e:	2900      	cmp	r1, #0
 80218a0:	d100      	bne.n	80218a4 <__ascii_mbtowc+0x8>
 80218a2:	a901      	add	r1, sp, #4
 80218a4:	1e10      	subs	r0, r2, #0
 80218a6:	d006      	beq.n	80218b6 <__ascii_mbtowc+0x1a>
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d006      	beq.n	80218ba <__ascii_mbtowc+0x1e>
 80218ac:	7813      	ldrb	r3, [r2, #0]
 80218ae:	600b      	str	r3, [r1, #0]
 80218b0:	7810      	ldrb	r0, [r2, #0]
 80218b2:	1e43      	subs	r3, r0, #1
 80218b4:	4198      	sbcs	r0, r3
 80218b6:	b002      	add	sp, #8
 80218b8:	4770      	bx	lr
 80218ba:	2002      	movs	r0, #2
 80218bc:	4240      	negs	r0, r0
 80218be:	e7fa      	b.n	80218b6 <__ascii_mbtowc+0x1a>

080218c0 <__malloc_lock>:
 80218c0:	b510      	push	{r4, lr}
 80218c2:	4802      	ldr	r0, [pc, #8]	@ (80218cc <__malloc_lock+0xc>)
 80218c4:	f7fe fcfb 	bl	80202be <__retarget_lock_acquire_recursive>
 80218c8:	bd10      	pop	{r4, pc}
 80218ca:	46c0      	nop			@ (mov r8, r8)
 80218cc:	200037a0 	.word	0x200037a0

080218d0 <__malloc_unlock>:
 80218d0:	b510      	push	{r4, lr}
 80218d2:	4802      	ldr	r0, [pc, #8]	@ (80218dc <__malloc_unlock+0xc>)
 80218d4:	f7fe fcf4 	bl	80202c0 <__retarget_lock_release_recursive>
 80218d8:	bd10      	pop	{r4, pc}
 80218da:	46c0      	nop			@ (mov r8, r8)
 80218dc:	200037a0 	.word	0x200037a0

080218e0 <_Balloc>:
 80218e0:	b570      	push	{r4, r5, r6, lr}
 80218e2:	69c5      	ldr	r5, [r0, #28]
 80218e4:	0006      	movs	r6, r0
 80218e6:	000c      	movs	r4, r1
 80218e8:	2d00      	cmp	r5, #0
 80218ea:	d10e      	bne.n	802190a <_Balloc+0x2a>
 80218ec:	2010      	movs	r0, #16
 80218ee:	f7ff ff29 	bl	8021744 <malloc>
 80218f2:	1e02      	subs	r2, r0, #0
 80218f4:	61f0      	str	r0, [r6, #28]
 80218f6:	d104      	bne.n	8021902 <_Balloc+0x22>
 80218f8:	216b      	movs	r1, #107	@ 0x6b
 80218fa:	4b19      	ldr	r3, [pc, #100]	@ (8021960 <_Balloc+0x80>)
 80218fc:	4819      	ldr	r0, [pc, #100]	@ (8021964 <_Balloc+0x84>)
 80218fe:	f001 f8cf 	bl	8022aa0 <__assert_func>
 8021902:	6045      	str	r5, [r0, #4]
 8021904:	6085      	str	r5, [r0, #8]
 8021906:	6005      	str	r5, [r0, #0]
 8021908:	60c5      	str	r5, [r0, #12]
 802190a:	69f5      	ldr	r5, [r6, #28]
 802190c:	68eb      	ldr	r3, [r5, #12]
 802190e:	2b00      	cmp	r3, #0
 8021910:	d013      	beq.n	802193a <_Balloc+0x5a>
 8021912:	69f3      	ldr	r3, [r6, #28]
 8021914:	00a2      	lsls	r2, r4, #2
 8021916:	68db      	ldr	r3, [r3, #12]
 8021918:	189b      	adds	r3, r3, r2
 802191a:	6818      	ldr	r0, [r3, #0]
 802191c:	2800      	cmp	r0, #0
 802191e:	d118      	bne.n	8021952 <_Balloc+0x72>
 8021920:	2101      	movs	r1, #1
 8021922:	000d      	movs	r5, r1
 8021924:	40a5      	lsls	r5, r4
 8021926:	1d6a      	adds	r2, r5, #5
 8021928:	0030      	movs	r0, r6
 802192a:	0092      	lsls	r2, r2, #2
 802192c:	f001 f8d6 	bl	8022adc <_calloc_r>
 8021930:	2800      	cmp	r0, #0
 8021932:	d00c      	beq.n	802194e <_Balloc+0x6e>
 8021934:	6044      	str	r4, [r0, #4]
 8021936:	6085      	str	r5, [r0, #8]
 8021938:	e00d      	b.n	8021956 <_Balloc+0x76>
 802193a:	2221      	movs	r2, #33	@ 0x21
 802193c:	2104      	movs	r1, #4
 802193e:	0030      	movs	r0, r6
 8021940:	f001 f8cc 	bl	8022adc <_calloc_r>
 8021944:	69f3      	ldr	r3, [r6, #28]
 8021946:	60e8      	str	r0, [r5, #12]
 8021948:	68db      	ldr	r3, [r3, #12]
 802194a:	2b00      	cmp	r3, #0
 802194c:	d1e1      	bne.n	8021912 <_Balloc+0x32>
 802194e:	2000      	movs	r0, #0
 8021950:	bd70      	pop	{r4, r5, r6, pc}
 8021952:	6802      	ldr	r2, [r0, #0]
 8021954:	601a      	str	r2, [r3, #0]
 8021956:	2300      	movs	r3, #0
 8021958:	6103      	str	r3, [r0, #16]
 802195a:	60c3      	str	r3, [r0, #12]
 802195c:	e7f8      	b.n	8021950 <_Balloc+0x70>
 802195e:	46c0      	nop			@ (mov r8, r8)
 8021960:	08025c72 	.word	0x08025c72
 8021964:	08025d52 	.word	0x08025d52

08021968 <_Bfree>:
 8021968:	b570      	push	{r4, r5, r6, lr}
 802196a:	69c6      	ldr	r6, [r0, #28]
 802196c:	0005      	movs	r5, r0
 802196e:	000c      	movs	r4, r1
 8021970:	2e00      	cmp	r6, #0
 8021972:	d10e      	bne.n	8021992 <_Bfree+0x2a>
 8021974:	2010      	movs	r0, #16
 8021976:	f7ff fee5 	bl	8021744 <malloc>
 802197a:	1e02      	subs	r2, r0, #0
 802197c:	61e8      	str	r0, [r5, #28]
 802197e:	d104      	bne.n	802198a <_Bfree+0x22>
 8021980:	218f      	movs	r1, #143	@ 0x8f
 8021982:	4b09      	ldr	r3, [pc, #36]	@ (80219a8 <_Bfree+0x40>)
 8021984:	4809      	ldr	r0, [pc, #36]	@ (80219ac <_Bfree+0x44>)
 8021986:	f001 f88b 	bl	8022aa0 <__assert_func>
 802198a:	6046      	str	r6, [r0, #4]
 802198c:	6086      	str	r6, [r0, #8]
 802198e:	6006      	str	r6, [r0, #0]
 8021990:	60c6      	str	r6, [r0, #12]
 8021992:	2c00      	cmp	r4, #0
 8021994:	d007      	beq.n	80219a6 <_Bfree+0x3e>
 8021996:	69eb      	ldr	r3, [r5, #28]
 8021998:	6862      	ldr	r2, [r4, #4]
 802199a:	68db      	ldr	r3, [r3, #12]
 802199c:	0092      	lsls	r2, r2, #2
 802199e:	189b      	adds	r3, r3, r2
 80219a0:	681a      	ldr	r2, [r3, #0]
 80219a2:	6022      	str	r2, [r4, #0]
 80219a4:	601c      	str	r4, [r3, #0]
 80219a6:	bd70      	pop	{r4, r5, r6, pc}
 80219a8:	08025c72 	.word	0x08025c72
 80219ac:	08025d52 	.word	0x08025d52

080219b0 <__multadd>:
 80219b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219b2:	000f      	movs	r7, r1
 80219b4:	9001      	str	r0, [sp, #4]
 80219b6:	000c      	movs	r4, r1
 80219b8:	001e      	movs	r6, r3
 80219ba:	2000      	movs	r0, #0
 80219bc:	690d      	ldr	r5, [r1, #16]
 80219be:	3714      	adds	r7, #20
 80219c0:	683b      	ldr	r3, [r7, #0]
 80219c2:	3001      	adds	r0, #1
 80219c4:	b299      	uxth	r1, r3
 80219c6:	4351      	muls	r1, r2
 80219c8:	0c1b      	lsrs	r3, r3, #16
 80219ca:	4353      	muls	r3, r2
 80219cc:	1989      	adds	r1, r1, r6
 80219ce:	0c0e      	lsrs	r6, r1, #16
 80219d0:	199b      	adds	r3, r3, r6
 80219d2:	0c1e      	lsrs	r6, r3, #16
 80219d4:	b289      	uxth	r1, r1
 80219d6:	041b      	lsls	r3, r3, #16
 80219d8:	185b      	adds	r3, r3, r1
 80219da:	c708      	stmia	r7!, {r3}
 80219dc:	4285      	cmp	r5, r0
 80219de:	dcef      	bgt.n	80219c0 <__multadd+0x10>
 80219e0:	2e00      	cmp	r6, #0
 80219e2:	d022      	beq.n	8021a2a <__multadd+0x7a>
 80219e4:	68a3      	ldr	r3, [r4, #8]
 80219e6:	42ab      	cmp	r3, r5
 80219e8:	dc19      	bgt.n	8021a1e <__multadd+0x6e>
 80219ea:	6861      	ldr	r1, [r4, #4]
 80219ec:	9801      	ldr	r0, [sp, #4]
 80219ee:	3101      	adds	r1, #1
 80219f0:	f7ff ff76 	bl	80218e0 <_Balloc>
 80219f4:	1e07      	subs	r7, r0, #0
 80219f6:	d105      	bne.n	8021a04 <__multadd+0x54>
 80219f8:	003a      	movs	r2, r7
 80219fa:	21ba      	movs	r1, #186	@ 0xba
 80219fc:	4b0c      	ldr	r3, [pc, #48]	@ (8021a30 <__multadd+0x80>)
 80219fe:	480d      	ldr	r0, [pc, #52]	@ (8021a34 <__multadd+0x84>)
 8021a00:	f001 f84e 	bl	8022aa0 <__assert_func>
 8021a04:	0021      	movs	r1, r4
 8021a06:	6922      	ldr	r2, [r4, #16]
 8021a08:	310c      	adds	r1, #12
 8021a0a:	3202      	adds	r2, #2
 8021a0c:	0092      	lsls	r2, r2, #2
 8021a0e:	300c      	adds	r0, #12
 8021a10:	f7fe fc62 	bl	80202d8 <memcpy>
 8021a14:	0021      	movs	r1, r4
 8021a16:	9801      	ldr	r0, [sp, #4]
 8021a18:	f7ff ffa6 	bl	8021968 <_Bfree>
 8021a1c:	003c      	movs	r4, r7
 8021a1e:	1d2b      	adds	r3, r5, #4
 8021a20:	009b      	lsls	r3, r3, #2
 8021a22:	18e3      	adds	r3, r4, r3
 8021a24:	3501      	adds	r5, #1
 8021a26:	605e      	str	r6, [r3, #4]
 8021a28:	6125      	str	r5, [r4, #16]
 8021a2a:	0020      	movs	r0, r4
 8021a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021a2e:	46c0      	nop			@ (mov r8, r8)
 8021a30:	08025ce1 	.word	0x08025ce1
 8021a34:	08025d52 	.word	0x08025d52

08021a38 <__s2b>:
 8021a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a3a:	0007      	movs	r7, r0
 8021a3c:	0018      	movs	r0, r3
 8021a3e:	000c      	movs	r4, r1
 8021a40:	3008      	adds	r0, #8
 8021a42:	2109      	movs	r1, #9
 8021a44:	9301      	str	r3, [sp, #4]
 8021a46:	0015      	movs	r5, r2
 8021a48:	f7de fc36 	bl	80002b8 <__divsi3>
 8021a4c:	2301      	movs	r3, #1
 8021a4e:	2100      	movs	r1, #0
 8021a50:	4283      	cmp	r3, r0
 8021a52:	db0a      	blt.n	8021a6a <__s2b+0x32>
 8021a54:	0038      	movs	r0, r7
 8021a56:	f7ff ff43 	bl	80218e0 <_Balloc>
 8021a5a:	1e01      	subs	r1, r0, #0
 8021a5c:	d108      	bne.n	8021a70 <__s2b+0x38>
 8021a5e:	000a      	movs	r2, r1
 8021a60:	4b19      	ldr	r3, [pc, #100]	@ (8021ac8 <__s2b+0x90>)
 8021a62:	481a      	ldr	r0, [pc, #104]	@ (8021acc <__s2b+0x94>)
 8021a64:	31d3      	adds	r1, #211	@ 0xd3
 8021a66:	f001 f81b 	bl	8022aa0 <__assert_func>
 8021a6a:	005b      	lsls	r3, r3, #1
 8021a6c:	3101      	adds	r1, #1
 8021a6e:	e7ef      	b.n	8021a50 <__s2b+0x18>
 8021a70:	9b08      	ldr	r3, [sp, #32]
 8021a72:	6143      	str	r3, [r0, #20]
 8021a74:	2301      	movs	r3, #1
 8021a76:	6103      	str	r3, [r0, #16]
 8021a78:	2d09      	cmp	r5, #9
 8021a7a:	dd18      	ble.n	8021aae <__s2b+0x76>
 8021a7c:	0023      	movs	r3, r4
 8021a7e:	3309      	adds	r3, #9
 8021a80:	001e      	movs	r6, r3
 8021a82:	9300      	str	r3, [sp, #0]
 8021a84:	1964      	adds	r4, r4, r5
 8021a86:	7833      	ldrb	r3, [r6, #0]
 8021a88:	220a      	movs	r2, #10
 8021a8a:	0038      	movs	r0, r7
 8021a8c:	3b30      	subs	r3, #48	@ 0x30
 8021a8e:	f7ff ff8f 	bl	80219b0 <__multadd>
 8021a92:	3601      	adds	r6, #1
 8021a94:	0001      	movs	r1, r0
 8021a96:	42a6      	cmp	r6, r4
 8021a98:	d1f5      	bne.n	8021a86 <__s2b+0x4e>
 8021a9a:	002c      	movs	r4, r5
 8021a9c:	9b00      	ldr	r3, [sp, #0]
 8021a9e:	3c08      	subs	r4, #8
 8021aa0:	191c      	adds	r4, r3, r4
 8021aa2:	002e      	movs	r6, r5
 8021aa4:	9b01      	ldr	r3, [sp, #4]
 8021aa6:	429e      	cmp	r6, r3
 8021aa8:	db04      	blt.n	8021ab4 <__s2b+0x7c>
 8021aaa:	0008      	movs	r0, r1
 8021aac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021aae:	2509      	movs	r5, #9
 8021ab0:	340a      	adds	r4, #10
 8021ab2:	e7f6      	b.n	8021aa2 <__s2b+0x6a>
 8021ab4:	1b63      	subs	r3, r4, r5
 8021ab6:	5d9b      	ldrb	r3, [r3, r6]
 8021ab8:	220a      	movs	r2, #10
 8021aba:	0038      	movs	r0, r7
 8021abc:	3b30      	subs	r3, #48	@ 0x30
 8021abe:	f7ff ff77 	bl	80219b0 <__multadd>
 8021ac2:	3601      	adds	r6, #1
 8021ac4:	0001      	movs	r1, r0
 8021ac6:	e7ed      	b.n	8021aa4 <__s2b+0x6c>
 8021ac8:	08025ce1 	.word	0x08025ce1
 8021acc:	08025d52 	.word	0x08025d52

08021ad0 <__hi0bits>:
 8021ad0:	2280      	movs	r2, #128	@ 0x80
 8021ad2:	0003      	movs	r3, r0
 8021ad4:	0252      	lsls	r2, r2, #9
 8021ad6:	2000      	movs	r0, #0
 8021ad8:	4293      	cmp	r3, r2
 8021ada:	d201      	bcs.n	8021ae0 <__hi0bits+0x10>
 8021adc:	041b      	lsls	r3, r3, #16
 8021ade:	3010      	adds	r0, #16
 8021ae0:	2280      	movs	r2, #128	@ 0x80
 8021ae2:	0452      	lsls	r2, r2, #17
 8021ae4:	4293      	cmp	r3, r2
 8021ae6:	d201      	bcs.n	8021aec <__hi0bits+0x1c>
 8021ae8:	3008      	adds	r0, #8
 8021aea:	021b      	lsls	r3, r3, #8
 8021aec:	2280      	movs	r2, #128	@ 0x80
 8021aee:	0552      	lsls	r2, r2, #21
 8021af0:	4293      	cmp	r3, r2
 8021af2:	d201      	bcs.n	8021af8 <__hi0bits+0x28>
 8021af4:	3004      	adds	r0, #4
 8021af6:	011b      	lsls	r3, r3, #4
 8021af8:	2280      	movs	r2, #128	@ 0x80
 8021afa:	05d2      	lsls	r2, r2, #23
 8021afc:	4293      	cmp	r3, r2
 8021afe:	d201      	bcs.n	8021b04 <__hi0bits+0x34>
 8021b00:	3002      	adds	r0, #2
 8021b02:	009b      	lsls	r3, r3, #2
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	db03      	blt.n	8021b10 <__hi0bits+0x40>
 8021b08:	3001      	adds	r0, #1
 8021b0a:	4213      	tst	r3, r2
 8021b0c:	d100      	bne.n	8021b10 <__hi0bits+0x40>
 8021b0e:	2020      	movs	r0, #32
 8021b10:	4770      	bx	lr

08021b12 <__lo0bits>:
 8021b12:	6803      	ldr	r3, [r0, #0]
 8021b14:	0001      	movs	r1, r0
 8021b16:	2207      	movs	r2, #7
 8021b18:	0018      	movs	r0, r3
 8021b1a:	4010      	ands	r0, r2
 8021b1c:	4213      	tst	r3, r2
 8021b1e:	d00d      	beq.n	8021b3c <__lo0bits+0x2a>
 8021b20:	3a06      	subs	r2, #6
 8021b22:	2000      	movs	r0, #0
 8021b24:	4213      	tst	r3, r2
 8021b26:	d105      	bne.n	8021b34 <__lo0bits+0x22>
 8021b28:	3002      	adds	r0, #2
 8021b2a:	4203      	tst	r3, r0
 8021b2c:	d003      	beq.n	8021b36 <__lo0bits+0x24>
 8021b2e:	40d3      	lsrs	r3, r2
 8021b30:	0010      	movs	r0, r2
 8021b32:	600b      	str	r3, [r1, #0]
 8021b34:	4770      	bx	lr
 8021b36:	089b      	lsrs	r3, r3, #2
 8021b38:	600b      	str	r3, [r1, #0]
 8021b3a:	e7fb      	b.n	8021b34 <__lo0bits+0x22>
 8021b3c:	b29a      	uxth	r2, r3
 8021b3e:	2a00      	cmp	r2, #0
 8021b40:	d101      	bne.n	8021b46 <__lo0bits+0x34>
 8021b42:	2010      	movs	r0, #16
 8021b44:	0c1b      	lsrs	r3, r3, #16
 8021b46:	b2da      	uxtb	r2, r3
 8021b48:	2a00      	cmp	r2, #0
 8021b4a:	d101      	bne.n	8021b50 <__lo0bits+0x3e>
 8021b4c:	3008      	adds	r0, #8
 8021b4e:	0a1b      	lsrs	r3, r3, #8
 8021b50:	071a      	lsls	r2, r3, #28
 8021b52:	d101      	bne.n	8021b58 <__lo0bits+0x46>
 8021b54:	3004      	adds	r0, #4
 8021b56:	091b      	lsrs	r3, r3, #4
 8021b58:	079a      	lsls	r2, r3, #30
 8021b5a:	d101      	bne.n	8021b60 <__lo0bits+0x4e>
 8021b5c:	3002      	adds	r0, #2
 8021b5e:	089b      	lsrs	r3, r3, #2
 8021b60:	07da      	lsls	r2, r3, #31
 8021b62:	d4e9      	bmi.n	8021b38 <__lo0bits+0x26>
 8021b64:	3001      	adds	r0, #1
 8021b66:	085b      	lsrs	r3, r3, #1
 8021b68:	d1e6      	bne.n	8021b38 <__lo0bits+0x26>
 8021b6a:	2020      	movs	r0, #32
 8021b6c:	e7e2      	b.n	8021b34 <__lo0bits+0x22>
	...

08021b70 <__i2b>:
 8021b70:	b510      	push	{r4, lr}
 8021b72:	000c      	movs	r4, r1
 8021b74:	2101      	movs	r1, #1
 8021b76:	f7ff feb3 	bl	80218e0 <_Balloc>
 8021b7a:	2800      	cmp	r0, #0
 8021b7c:	d107      	bne.n	8021b8e <__i2b+0x1e>
 8021b7e:	2146      	movs	r1, #70	@ 0x46
 8021b80:	4c05      	ldr	r4, [pc, #20]	@ (8021b98 <__i2b+0x28>)
 8021b82:	0002      	movs	r2, r0
 8021b84:	4b05      	ldr	r3, [pc, #20]	@ (8021b9c <__i2b+0x2c>)
 8021b86:	0020      	movs	r0, r4
 8021b88:	31ff      	adds	r1, #255	@ 0xff
 8021b8a:	f000 ff89 	bl	8022aa0 <__assert_func>
 8021b8e:	2301      	movs	r3, #1
 8021b90:	6144      	str	r4, [r0, #20]
 8021b92:	6103      	str	r3, [r0, #16]
 8021b94:	bd10      	pop	{r4, pc}
 8021b96:	46c0      	nop			@ (mov r8, r8)
 8021b98:	08025d52 	.word	0x08025d52
 8021b9c:	08025ce1 	.word	0x08025ce1

08021ba0 <__multiply>:
 8021ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ba2:	0014      	movs	r4, r2
 8021ba4:	690a      	ldr	r2, [r1, #16]
 8021ba6:	6923      	ldr	r3, [r4, #16]
 8021ba8:	000d      	movs	r5, r1
 8021baa:	b08b      	sub	sp, #44	@ 0x2c
 8021bac:	429a      	cmp	r2, r3
 8021bae:	db02      	blt.n	8021bb6 <__multiply+0x16>
 8021bb0:	0023      	movs	r3, r4
 8021bb2:	000c      	movs	r4, r1
 8021bb4:	001d      	movs	r5, r3
 8021bb6:	6927      	ldr	r7, [r4, #16]
 8021bb8:	692e      	ldr	r6, [r5, #16]
 8021bba:	6861      	ldr	r1, [r4, #4]
 8021bbc:	19bb      	adds	r3, r7, r6
 8021bbe:	9303      	str	r3, [sp, #12]
 8021bc0:	68a3      	ldr	r3, [r4, #8]
 8021bc2:	19ba      	adds	r2, r7, r6
 8021bc4:	4293      	cmp	r3, r2
 8021bc6:	da00      	bge.n	8021bca <__multiply+0x2a>
 8021bc8:	3101      	adds	r1, #1
 8021bca:	f7ff fe89 	bl	80218e0 <_Balloc>
 8021bce:	9002      	str	r0, [sp, #8]
 8021bd0:	2800      	cmp	r0, #0
 8021bd2:	d106      	bne.n	8021be2 <__multiply+0x42>
 8021bd4:	21b1      	movs	r1, #177	@ 0xb1
 8021bd6:	4b49      	ldr	r3, [pc, #292]	@ (8021cfc <__multiply+0x15c>)
 8021bd8:	4849      	ldr	r0, [pc, #292]	@ (8021d00 <__multiply+0x160>)
 8021bda:	9a02      	ldr	r2, [sp, #8]
 8021bdc:	0049      	lsls	r1, r1, #1
 8021bde:	f000 ff5f 	bl	8022aa0 <__assert_func>
 8021be2:	9b02      	ldr	r3, [sp, #8]
 8021be4:	2200      	movs	r2, #0
 8021be6:	3314      	adds	r3, #20
 8021be8:	469c      	mov	ip, r3
 8021bea:	19bb      	adds	r3, r7, r6
 8021bec:	009b      	lsls	r3, r3, #2
 8021bee:	4463      	add	r3, ip
 8021bf0:	9304      	str	r3, [sp, #16]
 8021bf2:	4663      	mov	r3, ip
 8021bf4:	9904      	ldr	r1, [sp, #16]
 8021bf6:	428b      	cmp	r3, r1
 8021bf8:	d32a      	bcc.n	8021c50 <__multiply+0xb0>
 8021bfa:	0023      	movs	r3, r4
 8021bfc:	00bf      	lsls	r7, r7, #2
 8021bfe:	3314      	adds	r3, #20
 8021c00:	3514      	adds	r5, #20
 8021c02:	9308      	str	r3, [sp, #32]
 8021c04:	00b6      	lsls	r6, r6, #2
 8021c06:	19db      	adds	r3, r3, r7
 8021c08:	9305      	str	r3, [sp, #20]
 8021c0a:	19ab      	adds	r3, r5, r6
 8021c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c0e:	2304      	movs	r3, #4
 8021c10:	9306      	str	r3, [sp, #24]
 8021c12:	0023      	movs	r3, r4
 8021c14:	9a05      	ldr	r2, [sp, #20]
 8021c16:	3315      	adds	r3, #21
 8021c18:	9501      	str	r5, [sp, #4]
 8021c1a:	429a      	cmp	r2, r3
 8021c1c:	d305      	bcc.n	8021c2a <__multiply+0x8a>
 8021c1e:	1b13      	subs	r3, r2, r4
 8021c20:	3b15      	subs	r3, #21
 8021c22:	089b      	lsrs	r3, r3, #2
 8021c24:	3301      	adds	r3, #1
 8021c26:	009b      	lsls	r3, r3, #2
 8021c28:	9306      	str	r3, [sp, #24]
 8021c2a:	9b01      	ldr	r3, [sp, #4]
 8021c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c2e:	4293      	cmp	r3, r2
 8021c30:	d310      	bcc.n	8021c54 <__multiply+0xb4>
 8021c32:	9b03      	ldr	r3, [sp, #12]
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	dd05      	ble.n	8021c44 <__multiply+0xa4>
 8021c38:	9b04      	ldr	r3, [sp, #16]
 8021c3a:	3b04      	subs	r3, #4
 8021c3c:	9304      	str	r3, [sp, #16]
 8021c3e:	681b      	ldr	r3, [r3, #0]
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	d056      	beq.n	8021cf2 <__multiply+0x152>
 8021c44:	9b02      	ldr	r3, [sp, #8]
 8021c46:	9a03      	ldr	r2, [sp, #12]
 8021c48:	0018      	movs	r0, r3
 8021c4a:	611a      	str	r2, [r3, #16]
 8021c4c:	b00b      	add	sp, #44	@ 0x2c
 8021c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c50:	c304      	stmia	r3!, {r2}
 8021c52:	e7cf      	b.n	8021bf4 <__multiply+0x54>
 8021c54:	9b01      	ldr	r3, [sp, #4]
 8021c56:	6818      	ldr	r0, [r3, #0]
 8021c58:	b280      	uxth	r0, r0
 8021c5a:	2800      	cmp	r0, #0
 8021c5c:	d01e      	beq.n	8021c9c <__multiply+0xfc>
 8021c5e:	4667      	mov	r7, ip
 8021c60:	2500      	movs	r5, #0
 8021c62:	9e08      	ldr	r6, [sp, #32]
 8021c64:	ce02      	ldmia	r6!, {r1}
 8021c66:	683b      	ldr	r3, [r7, #0]
 8021c68:	9307      	str	r3, [sp, #28]
 8021c6a:	b28b      	uxth	r3, r1
 8021c6c:	4343      	muls	r3, r0
 8021c6e:	001a      	movs	r2, r3
 8021c70:	466b      	mov	r3, sp
 8021c72:	0c09      	lsrs	r1, r1, #16
 8021c74:	8b9b      	ldrh	r3, [r3, #28]
 8021c76:	4341      	muls	r1, r0
 8021c78:	18d3      	adds	r3, r2, r3
 8021c7a:	9a07      	ldr	r2, [sp, #28]
 8021c7c:	195b      	adds	r3, r3, r5
 8021c7e:	0c12      	lsrs	r2, r2, #16
 8021c80:	1889      	adds	r1, r1, r2
 8021c82:	0c1a      	lsrs	r2, r3, #16
 8021c84:	188a      	adds	r2, r1, r2
 8021c86:	b29b      	uxth	r3, r3
 8021c88:	0c15      	lsrs	r5, r2, #16
 8021c8a:	0412      	lsls	r2, r2, #16
 8021c8c:	431a      	orrs	r2, r3
 8021c8e:	9b05      	ldr	r3, [sp, #20]
 8021c90:	c704      	stmia	r7!, {r2}
 8021c92:	42b3      	cmp	r3, r6
 8021c94:	d8e6      	bhi.n	8021c64 <__multiply+0xc4>
 8021c96:	4663      	mov	r3, ip
 8021c98:	9a06      	ldr	r2, [sp, #24]
 8021c9a:	509d      	str	r5, [r3, r2]
 8021c9c:	9b01      	ldr	r3, [sp, #4]
 8021c9e:	6818      	ldr	r0, [r3, #0]
 8021ca0:	0c00      	lsrs	r0, r0, #16
 8021ca2:	d020      	beq.n	8021ce6 <__multiply+0x146>
 8021ca4:	4663      	mov	r3, ip
 8021ca6:	0025      	movs	r5, r4
 8021ca8:	4661      	mov	r1, ip
 8021caa:	2700      	movs	r7, #0
 8021cac:	681b      	ldr	r3, [r3, #0]
 8021cae:	3514      	adds	r5, #20
 8021cb0:	682a      	ldr	r2, [r5, #0]
 8021cb2:	680e      	ldr	r6, [r1, #0]
 8021cb4:	b292      	uxth	r2, r2
 8021cb6:	4342      	muls	r2, r0
 8021cb8:	0c36      	lsrs	r6, r6, #16
 8021cba:	1992      	adds	r2, r2, r6
 8021cbc:	19d2      	adds	r2, r2, r7
 8021cbe:	0416      	lsls	r6, r2, #16
 8021cc0:	b29b      	uxth	r3, r3
 8021cc2:	431e      	orrs	r6, r3
 8021cc4:	600e      	str	r6, [r1, #0]
 8021cc6:	cd40      	ldmia	r5!, {r6}
 8021cc8:	684b      	ldr	r3, [r1, #4]
 8021cca:	0c36      	lsrs	r6, r6, #16
 8021ccc:	4346      	muls	r6, r0
 8021cce:	b29b      	uxth	r3, r3
 8021cd0:	0c12      	lsrs	r2, r2, #16
 8021cd2:	18f3      	adds	r3, r6, r3
 8021cd4:	189b      	adds	r3, r3, r2
 8021cd6:	9a05      	ldr	r2, [sp, #20]
 8021cd8:	0c1f      	lsrs	r7, r3, #16
 8021cda:	3104      	adds	r1, #4
 8021cdc:	42aa      	cmp	r2, r5
 8021cde:	d8e7      	bhi.n	8021cb0 <__multiply+0x110>
 8021ce0:	4662      	mov	r2, ip
 8021ce2:	9906      	ldr	r1, [sp, #24]
 8021ce4:	5053      	str	r3, [r2, r1]
 8021ce6:	9b01      	ldr	r3, [sp, #4]
 8021ce8:	3304      	adds	r3, #4
 8021cea:	9301      	str	r3, [sp, #4]
 8021cec:	2304      	movs	r3, #4
 8021cee:	449c      	add	ip, r3
 8021cf0:	e79b      	b.n	8021c2a <__multiply+0x8a>
 8021cf2:	9b03      	ldr	r3, [sp, #12]
 8021cf4:	3b01      	subs	r3, #1
 8021cf6:	9303      	str	r3, [sp, #12]
 8021cf8:	e79b      	b.n	8021c32 <__multiply+0x92>
 8021cfa:	46c0      	nop			@ (mov r8, r8)
 8021cfc:	08025ce1 	.word	0x08025ce1
 8021d00:	08025d52 	.word	0x08025d52

08021d04 <__pow5mult>:
 8021d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021d06:	2303      	movs	r3, #3
 8021d08:	0015      	movs	r5, r2
 8021d0a:	0007      	movs	r7, r0
 8021d0c:	000e      	movs	r6, r1
 8021d0e:	401a      	ands	r2, r3
 8021d10:	421d      	tst	r5, r3
 8021d12:	d008      	beq.n	8021d26 <__pow5mult+0x22>
 8021d14:	4925      	ldr	r1, [pc, #148]	@ (8021dac <__pow5mult+0xa8>)
 8021d16:	3a01      	subs	r2, #1
 8021d18:	0092      	lsls	r2, r2, #2
 8021d1a:	5852      	ldr	r2, [r2, r1]
 8021d1c:	2300      	movs	r3, #0
 8021d1e:	0031      	movs	r1, r6
 8021d20:	f7ff fe46 	bl	80219b0 <__multadd>
 8021d24:	0006      	movs	r6, r0
 8021d26:	10ad      	asrs	r5, r5, #2
 8021d28:	d03d      	beq.n	8021da6 <__pow5mult+0xa2>
 8021d2a:	69fc      	ldr	r4, [r7, #28]
 8021d2c:	2c00      	cmp	r4, #0
 8021d2e:	d10f      	bne.n	8021d50 <__pow5mult+0x4c>
 8021d30:	2010      	movs	r0, #16
 8021d32:	f7ff fd07 	bl	8021744 <malloc>
 8021d36:	1e02      	subs	r2, r0, #0
 8021d38:	61f8      	str	r0, [r7, #28]
 8021d3a:	d105      	bne.n	8021d48 <__pow5mult+0x44>
 8021d3c:	21b4      	movs	r1, #180	@ 0xb4
 8021d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8021db0 <__pow5mult+0xac>)
 8021d40:	481c      	ldr	r0, [pc, #112]	@ (8021db4 <__pow5mult+0xb0>)
 8021d42:	31ff      	adds	r1, #255	@ 0xff
 8021d44:	f000 feac 	bl	8022aa0 <__assert_func>
 8021d48:	6044      	str	r4, [r0, #4]
 8021d4a:	6084      	str	r4, [r0, #8]
 8021d4c:	6004      	str	r4, [r0, #0]
 8021d4e:	60c4      	str	r4, [r0, #12]
 8021d50:	69fb      	ldr	r3, [r7, #28]
 8021d52:	689c      	ldr	r4, [r3, #8]
 8021d54:	9301      	str	r3, [sp, #4]
 8021d56:	2c00      	cmp	r4, #0
 8021d58:	d108      	bne.n	8021d6c <__pow5mult+0x68>
 8021d5a:	0038      	movs	r0, r7
 8021d5c:	4916      	ldr	r1, [pc, #88]	@ (8021db8 <__pow5mult+0xb4>)
 8021d5e:	f7ff ff07 	bl	8021b70 <__i2b>
 8021d62:	9b01      	ldr	r3, [sp, #4]
 8021d64:	0004      	movs	r4, r0
 8021d66:	6098      	str	r0, [r3, #8]
 8021d68:	2300      	movs	r3, #0
 8021d6a:	6003      	str	r3, [r0, #0]
 8021d6c:	2301      	movs	r3, #1
 8021d6e:	421d      	tst	r5, r3
 8021d70:	d00a      	beq.n	8021d88 <__pow5mult+0x84>
 8021d72:	0031      	movs	r1, r6
 8021d74:	0022      	movs	r2, r4
 8021d76:	0038      	movs	r0, r7
 8021d78:	f7ff ff12 	bl	8021ba0 <__multiply>
 8021d7c:	0031      	movs	r1, r6
 8021d7e:	9001      	str	r0, [sp, #4]
 8021d80:	0038      	movs	r0, r7
 8021d82:	f7ff fdf1 	bl	8021968 <_Bfree>
 8021d86:	9e01      	ldr	r6, [sp, #4]
 8021d88:	106d      	asrs	r5, r5, #1
 8021d8a:	d00c      	beq.n	8021da6 <__pow5mult+0xa2>
 8021d8c:	6820      	ldr	r0, [r4, #0]
 8021d8e:	2800      	cmp	r0, #0
 8021d90:	d107      	bne.n	8021da2 <__pow5mult+0x9e>
 8021d92:	0022      	movs	r2, r4
 8021d94:	0021      	movs	r1, r4
 8021d96:	0038      	movs	r0, r7
 8021d98:	f7ff ff02 	bl	8021ba0 <__multiply>
 8021d9c:	2300      	movs	r3, #0
 8021d9e:	6020      	str	r0, [r4, #0]
 8021da0:	6003      	str	r3, [r0, #0]
 8021da2:	0004      	movs	r4, r0
 8021da4:	e7e2      	b.n	8021d6c <__pow5mult+0x68>
 8021da6:	0030      	movs	r0, r6
 8021da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021daa:	46c0      	nop			@ (mov r8, r8)
 8021dac:	08025dac 	.word	0x08025dac
 8021db0:	08025c72 	.word	0x08025c72
 8021db4:	08025d52 	.word	0x08025d52
 8021db8:	00000271 	.word	0x00000271

08021dbc <__lshift>:
 8021dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021dbe:	000c      	movs	r4, r1
 8021dc0:	0016      	movs	r6, r2
 8021dc2:	6923      	ldr	r3, [r4, #16]
 8021dc4:	1157      	asrs	r7, r2, #5
 8021dc6:	b085      	sub	sp, #20
 8021dc8:	18fb      	adds	r3, r7, r3
 8021dca:	9301      	str	r3, [sp, #4]
 8021dcc:	3301      	adds	r3, #1
 8021dce:	9300      	str	r3, [sp, #0]
 8021dd0:	6849      	ldr	r1, [r1, #4]
 8021dd2:	68a3      	ldr	r3, [r4, #8]
 8021dd4:	9002      	str	r0, [sp, #8]
 8021dd6:	9a00      	ldr	r2, [sp, #0]
 8021dd8:	4293      	cmp	r3, r2
 8021dda:	db10      	blt.n	8021dfe <__lshift+0x42>
 8021ddc:	9802      	ldr	r0, [sp, #8]
 8021dde:	f7ff fd7f 	bl	80218e0 <_Balloc>
 8021de2:	2300      	movs	r3, #0
 8021de4:	0001      	movs	r1, r0
 8021de6:	0005      	movs	r5, r0
 8021de8:	001a      	movs	r2, r3
 8021dea:	3114      	adds	r1, #20
 8021dec:	4298      	cmp	r0, r3
 8021dee:	d10c      	bne.n	8021e0a <__lshift+0x4e>
 8021df0:	21ef      	movs	r1, #239	@ 0xef
 8021df2:	002a      	movs	r2, r5
 8021df4:	4b25      	ldr	r3, [pc, #148]	@ (8021e8c <__lshift+0xd0>)
 8021df6:	4826      	ldr	r0, [pc, #152]	@ (8021e90 <__lshift+0xd4>)
 8021df8:	0049      	lsls	r1, r1, #1
 8021dfa:	f000 fe51 	bl	8022aa0 <__assert_func>
 8021dfe:	3101      	adds	r1, #1
 8021e00:	005b      	lsls	r3, r3, #1
 8021e02:	e7e8      	b.n	8021dd6 <__lshift+0x1a>
 8021e04:	0098      	lsls	r0, r3, #2
 8021e06:	500a      	str	r2, [r1, r0]
 8021e08:	3301      	adds	r3, #1
 8021e0a:	42bb      	cmp	r3, r7
 8021e0c:	dbfa      	blt.n	8021e04 <__lshift+0x48>
 8021e0e:	43fb      	mvns	r3, r7
 8021e10:	17db      	asrs	r3, r3, #31
 8021e12:	401f      	ands	r7, r3
 8021e14:	00bf      	lsls	r7, r7, #2
 8021e16:	0023      	movs	r3, r4
 8021e18:	201f      	movs	r0, #31
 8021e1a:	19c9      	adds	r1, r1, r7
 8021e1c:	0037      	movs	r7, r6
 8021e1e:	6922      	ldr	r2, [r4, #16]
 8021e20:	3314      	adds	r3, #20
 8021e22:	0092      	lsls	r2, r2, #2
 8021e24:	189a      	adds	r2, r3, r2
 8021e26:	4007      	ands	r7, r0
 8021e28:	4206      	tst	r6, r0
 8021e2a:	d029      	beq.n	8021e80 <__lshift+0xc4>
 8021e2c:	3001      	adds	r0, #1
 8021e2e:	1bc0      	subs	r0, r0, r7
 8021e30:	9003      	str	r0, [sp, #12]
 8021e32:	468c      	mov	ip, r1
 8021e34:	2000      	movs	r0, #0
 8021e36:	681e      	ldr	r6, [r3, #0]
 8021e38:	40be      	lsls	r6, r7
 8021e3a:	4306      	orrs	r6, r0
 8021e3c:	4660      	mov	r0, ip
 8021e3e:	c040      	stmia	r0!, {r6}
 8021e40:	4684      	mov	ip, r0
 8021e42:	9e03      	ldr	r6, [sp, #12]
 8021e44:	cb01      	ldmia	r3!, {r0}
 8021e46:	40f0      	lsrs	r0, r6
 8021e48:	429a      	cmp	r2, r3
 8021e4a:	d8f4      	bhi.n	8021e36 <__lshift+0x7a>
 8021e4c:	0026      	movs	r6, r4
 8021e4e:	3615      	adds	r6, #21
 8021e50:	2304      	movs	r3, #4
 8021e52:	42b2      	cmp	r2, r6
 8021e54:	d304      	bcc.n	8021e60 <__lshift+0xa4>
 8021e56:	1b13      	subs	r3, r2, r4
 8021e58:	3b15      	subs	r3, #21
 8021e5a:	089b      	lsrs	r3, r3, #2
 8021e5c:	3301      	adds	r3, #1
 8021e5e:	009b      	lsls	r3, r3, #2
 8021e60:	50c8      	str	r0, [r1, r3]
 8021e62:	2800      	cmp	r0, #0
 8021e64:	d002      	beq.n	8021e6c <__lshift+0xb0>
 8021e66:	9b01      	ldr	r3, [sp, #4]
 8021e68:	3302      	adds	r3, #2
 8021e6a:	9300      	str	r3, [sp, #0]
 8021e6c:	9b00      	ldr	r3, [sp, #0]
 8021e6e:	9802      	ldr	r0, [sp, #8]
 8021e70:	3b01      	subs	r3, #1
 8021e72:	0021      	movs	r1, r4
 8021e74:	612b      	str	r3, [r5, #16]
 8021e76:	f7ff fd77 	bl	8021968 <_Bfree>
 8021e7a:	0028      	movs	r0, r5
 8021e7c:	b005      	add	sp, #20
 8021e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e80:	cb01      	ldmia	r3!, {r0}
 8021e82:	c101      	stmia	r1!, {r0}
 8021e84:	429a      	cmp	r2, r3
 8021e86:	d8fb      	bhi.n	8021e80 <__lshift+0xc4>
 8021e88:	e7f0      	b.n	8021e6c <__lshift+0xb0>
 8021e8a:	46c0      	nop			@ (mov r8, r8)
 8021e8c:	08025ce1 	.word	0x08025ce1
 8021e90:	08025d52 	.word	0x08025d52

08021e94 <__mcmp>:
 8021e94:	b530      	push	{r4, r5, lr}
 8021e96:	690b      	ldr	r3, [r1, #16]
 8021e98:	6904      	ldr	r4, [r0, #16]
 8021e9a:	0002      	movs	r2, r0
 8021e9c:	1ae0      	subs	r0, r4, r3
 8021e9e:	429c      	cmp	r4, r3
 8021ea0:	d10f      	bne.n	8021ec2 <__mcmp+0x2e>
 8021ea2:	3214      	adds	r2, #20
 8021ea4:	009b      	lsls	r3, r3, #2
 8021ea6:	3114      	adds	r1, #20
 8021ea8:	0014      	movs	r4, r2
 8021eaa:	18c9      	adds	r1, r1, r3
 8021eac:	18d2      	adds	r2, r2, r3
 8021eae:	3a04      	subs	r2, #4
 8021eb0:	3904      	subs	r1, #4
 8021eb2:	6815      	ldr	r5, [r2, #0]
 8021eb4:	680b      	ldr	r3, [r1, #0]
 8021eb6:	429d      	cmp	r5, r3
 8021eb8:	d004      	beq.n	8021ec4 <__mcmp+0x30>
 8021eba:	2001      	movs	r0, #1
 8021ebc:	429d      	cmp	r5, r3
 8021ebe:	d200      	bcs.n	8021ec2 <__mcmp+0x2e>
 8021ec0:	3802      	subs	r0, #2
 8021ec2:	bd30      	pop	{r4, r5, pc}
 8021ec4:	4294      	cmp	r4, r2
 8021ec6:	d3f2      	bcc.n	8021eae <__mcmp+0x1a>
 8021ec8:	e7fb      	b.n	8021ec2 <__mcmp+0x2e>
	...

08021ecc <__mdiff>:
 8021ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ece:	000c      	movs	r4, r1
 8021ed0:	b087      	sub	sp, #28
 8021ed2:	9000      	str	r0, [sp, #0]
 8021ed4:	0011      	movs	r1, r2
 8021ed6:	0020      	movs	r0, r4
 8021ed8:	0017      	movs	r7, r2
 8021eda:	f7ff ffdb 	bl	8021e94 <__mcmp>
 8021ede:	1e05      	subs	r5, r0, #0
 8021ee0:	d110      	bne.n	8021f04 <__mdiff+0x38>
 8021ee2:	0001      	movs	r1, r0
 8021ee4:	9800      	ldr	r0, [sp, #0]
 8021ee6:	f7ff fcfb 	bl	80218e0 <_Balloc>
 8021eea:	1e02      	subs	r2, r0, #0
 8021eec:	d104      	bne.n	8021ef8 <__mdiff+0x2c>
 8021eee:	4b40      	ldr	r3, [pc, #256]	@ (8021ff0 <__mdiff+0x124>)
 8021ef0:	4840      	ldr	r0, [pc, #256]	@ (8021ff4 <__mdiff+0x128>)
 8021ef2:	4941      	ldr	r1, [pc, #260]	@ (8021ff8 <__mdiff+0x12c>)
 8021ef4:	f000 fdd4 	bl	8022aa0 <__assert_func>
 8021ef8:	2301      	movs	r3, #1
 8021efa:	6145      	str	r5, [r0, #20]
 8021efc:	6103      	str	r3, [r0, #16]
 8021efe:	0010      	movs	r0, r2
 8021f00:	b007      	add	sp, #28
 8021f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f04:	2600      	movs	r6, #0
 8021f06:	42b0      	cmp	r0, r6
 8021f08:	da03      	bge.n	8021f12 <__mdiff+0x46>
 8021f0a:	0023      	movs	r3, r4
 8021f0c:	003c      	movs	r4, r7
 8021f0e:	001f      	movs	r7, r3
 8021f10:	3601      	adds	r6, #1
 8021f12:	6861      	ldr	r1, [r4, #4]
 8021f14:	9800      	ldr	r0, [sp, #0]
 8021f16:	f7ff fce3 	bl	80218e0 <_Balloc>
 8021f1a:	1e02      	subs	r2, r0, #0
 8021f1c:	d103      	bne.n	8021f26 <__mdiff+0x5a>
 8021f1e:	4b34      	ldr	r3, [pc, #208]	@ (8021ff0 <__mdiff+0x124>)
 8021f20:	4834      	ldr	r0, [pc, #208]	@ (8021ff4 <__mdiff+0x128>)
 8021f22:	4936      	ldr	r1, [pc, #216]	@ (8021ffc <__mdiff+0x130>)
 8021f24:	e7e6      	b.n	8021ef4 <__mdiff+0x28>
 8021f26:	6923      	ldr	r3, [r4, #16]
 8021f28:	3414      	adds	r4, #20
 8021f2a:	9300      	str	r3, [sp, #0]
 8021f2c:	009b      	lsls	r3, r3, #2
 8021f2e:	18e3      	adds	r3, r4, r3
 8021f30:	0021      	movs	r1, r4
 8021f32:	9401      	str	r4, [sp, #4]
 8021f34:	003c      	movs	r4, r7
 8021f36:	9302      	str	r3, [sp, #8]
 8021f38:	693b      	ldr	r3, [r7, #16]
 8021f3a:	3414      	adds	r4, #20
 8021f3c:	009b      	lsls	r3, r3, #2
 8021f3e:	18e3      	adds	r3, r4, r3
 8021f40:	9303      	str	r3, [sp, #12]
 8021f42:	0003      	movs	r3, r0
 8021f44:	60c6      	str	r6, [r0, #12]
 8021f46:	468c      	mov	ip, r1
 8021f48:	2000      	movs	r0, #0
 8021f4a:	3314      	adds	r3, #20
 8021f4c:	9304      	str	r3, [sp, #16]
 8021f4e:	9305      	str	r3, [sp, #20]
 8021f50:	4663      	mov	r3, ip
 8021f52:	cb20      	ldmia	r3!, {r5}
 8021f54:	b2a9      	uxth	r1, r5
 8021f56:	000e      	movs	r6, r1
 8021f58:	469c      	mov	ip, r3
 8021f5a:	cc08      	ldmia	r4!, {r3}
 8021f5c:	0c2d      	lsrs	r5, r5, #16
 8021f5e:	b299      	uxth	r1, r3
 8021f60:	1a71      	subs	r1, r6, r1
 8021f62:	1809      	adds	r1, r1, r0
 8021f64:	0c1b      	lsrs	r3, r3, #16
 8021f66:	1408      	asrs	r0, r1, #16
 8021f68:	1aeb      	subs	r3, r5, r3
 8021f6a:	181b      	adds	r3, r3, r0
 8021f6c:	1418      	asrs	r0, r3, #16
 8021f6e:	b289      	uxth	r1, r1
 8021f70:	041b      	lsls	r3, r3, #16
 8021f72:	4319      	orrs	r1, r3
 8021f74:	9b05      	ldr	r3, [sp, #20]
 8021f76:	c302      	stmia	r3!, {r1}
 8021f78:	9305      	str	r3, [sp, #20]
 8021f7a:	9b03      	ldr	r3, [sp, #12]
 8021f7c:	42a3      	cmp	r3, r4
 8021f7e:	d8e7      	bhi.n	8021f50 <__mdiff+0x84>
 8021f80:	0039      	movs	r1, r7
 8021f82:	9c03      	ldr	r4, [sp, #12]
 8021f84:	3115      	adds	r1, #21
 8021f86:	2304      	movs	r3, #4
 8021f88:	428c      	cmp	r4, r1
 8021f8a:	d304      	bcc.n	8021f96 <__mdiff+0xca>
 8021f8c:	1be3      	subs	r3, r4, r7
 8021f8e:	3b15      	subs	r3, #21
 8021f90:	089b      	lsrs	r3, r3, #2
 8021f92:	3301      	adds	r3, #1
 8021f94:	009b      	lsls	r3, r3, #2
 8021f96:	9901      	ldr	r1, [sp, #4]
 8021f98:	18cd      	adds	r5, r1, r3
 8021f9a:	9904      	ldr	r1, [sp, #16]
 8021f9c:	002e      	movs	r6, r5
 8021f9e:	18cb      	adds	r3, r1, r3
 8021fa0:	001f      	movs	r7, r3
 8021fa2:	9902      	ldr	r1, [sp, #8]
 8021fa4:	428e      	cmp	r6, r1
 8021fa6:	d311      	bcc.n	8021fcc <__mdiff+0x100>
 8021fa8:	9c02      	ldr	r4, [sp, #8]
 8021faa:	1ee9      	subs	r1, r5, #3
 8021fac:	2000      	movs	r0, #0
 8021fae:	428c      	cmp	r4, r1
 8021fb0:	d304      	bcc.n	8021fbc <__mdiff+0xf0>
 8021fb2:	0021      	movs	r1, r4
 8021fb4:	3103      	adds	r1, #3
 8021fb6:	1b49      	subs	r1, r1, r5
 8021fb8:	0889      	lsrs	r1, r1, #2
 8021fba:	0088      	lsls	r0, r1, #2
 8021fbc:	181b      	adds	r3, r3, r0
 8021fbe:	3b04      	subs	r3, #4
 8021fc0:	6819      	ldr	r1, [r3, #0]
 8021fc2:	2900      	cmp	r1, #0
 8021fc4:	d010      	beq.n	8021fe8 <__mdiff+0x11c>
 8021fc6:	9b00      	ldr	r3, [sp, #0]
 8021fc8:	6113      	str	r3, [r2, #16]
 8021fca:	e798      	b.n	8021efe <__mdiff+0x32>
 8021fcc:	4684      	mov	ip, r0
 8021fce:	ce02      	ldmia	r6!, {r1}
 8021fd0:	b288      	uxth	r0, r1
 8021fd2:	4460      	add	r0, ip
 8021fd4:	1400      	asrs	r0, r0, #16
 8021fd6:	0c0c      	lsrs	r4, r1, #16
 8021fd8:	1904      	adds	r4, r0, r4
 8021fda:	4461      	add	r1, ip
 8021fdc:	1420      	asrs	r0, r4, #16
 8021fde:	b289      	uxth	r1, r1
 8021fe0:	0424      	lsls	r4, r4, #16
 8021fe2:	4321      	orrs	r1, r4
 8021fe4:	c702      	stmia	r7!, {r1}
 8021fe6:	e7dc      	b.n	8021fa2 <__mdiff+0xd6>
 8021fe8:	9900      	ldr	r1, [sp, #0]
 8021fea:	3901      	subs	r1, #1
 8021fec:	9100      	str	r1, [sp, #0]
 8021fee:	e7e6      	b.n	8021fbe <__mdiff+0xf2>
 8021ff0:	08025ce1 	.word	0x08025ce1
 8021ff4:	08025d52 	.word	0x08025d52
 8021ff8:	00000237 	.word	0x00000237
 8021ffc:	00000245 	.word	0x00000245

08022000 <__ulp>:
 8022000:	b510      	push	{r4, lr}
 8022002:	2400      	movs	r4, #0
 8022004:	4b0c      	ldr	r3, [pc, #48]	@ (8022038 <__ulp+0x38>)
 8022006:	4a0d      	ldr	r2, [pc, #52]	@ (802203c <__ulp+0x3c>)
 8022008:	400b      	ands	r3, r1
 802200a:	189b      	adds	r3, r3, r2
 802200c:	42a3      	cmp	r3, r4
 802200e:	dc06      	bgt.n	802201e <__ulp+0x1e>
 8022010:	425b      	negs	r3, r3
 8022012:	151a      	asrs	r2, r3, #20
 8022014:	2a13      	cmp	r2, #19
 8022016:	dc05      	bgt.n	8022024 <__ulp+0x24>
 8022018:	2380      	movs	r3, #128	@ 0x80
 802201a:	031b      	lsls	r3, r3, #12
 802201c:	4113      	asrs	r3, r2
 802201e:	0019      	movs	r1, r3
 8022020:	0020      	movs	r0, r4
 8022022:	bd10      	pop	{r4, pc}
 8022024:	3a14      	subs	r2, #20
 8022026:	2401      	movs	r4, #1
 8022028:	2a1e      	cmp	r2, #30
 802202a:	dc02      	bgt.n	8022032 <__ulp+0x32>
 802202c:	2480      	movs	r4, #128	@ 0x80
 802202e:	0624      	lsls	r4, r4, #24
 8022030:	40d4      	lsrs	r4, r2
 8022032:	2300      	movs	r3, #0
 8022034:	e7f3      	b.n	802201e <__ulp+0x1e>
 8022036:	46c0      	nop			@ (mov r8, r8)
 8022038:	7ff00000 	.word	0x7ff00000
 802203c:	fcc00000 	.word	0xfcc00000

08022040 <__b2d>:
 8022040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022042:	0006      	movs	r6, r0
 8022044:	6903      	ldr	r3, [r0, #16]
 8022046:	3614      	adds	r6, #20
 8022048:	009b      	lsls	r3, r3, #2
 802204a:	18f3      	adds	r3, r6, r3
 802204c:	1f1d      	subs	r5, r3, #4
 802204e:	682c      	ldr	r4, [r5, #0]
 8022050:	000f      	movs	r7, r1
 8022052:	0020      	movs	r0, r4
 8022054:	9301      	str	r3, [sp, #4]
 8022056:	f7ff fd3b 	bl	8021ad0 <__hi0bits>
 802205a:	2220      	movs	r2, #32
 802205c:	1a12      	subs	r2, r2, r0
 802205e:	603a      	str	r2, [r7, #0]
 8022060:	0003      	movs	r3, r0
 8022062:	4a1c      	ldr	r2, [pc, #112]	@ (80220d4 <__b2d+0x94>)
 8022064:	280a      	cmp	r0, #10
 8022066:	dc15      	bgt.n	8022094 <__b2d+0x54>
 8022068:	210b      	movs	r1, #11
 802206a:	0027      	movs	r7, r4
 802206c:	1a09      	subs	r1, r1, r0
 802206e:	40cf      	lsrs	r7, r1
 8022070:	433a      	orrs	r2, r7
 8022072:	468c      	mov	ip, r1
 8022074:	0011      	movs	r1, r2
 8022076:	2200      	movs	r2, #0
 8022078:	42ae      	cmp	r6, r5
 802207a:	d202      	bcs.n	8022082 <__b2d+0x42>
 802207c:	9a01      	ldr	r2, [sp, #4]
 802207e:	3a08      	subs	r2, #8
 8022080:	6812      	ldr	r2, [r2, #0]
 8022082:	3315      	adds	r3, #21
 8022084:	409c      	lsls	r4, r3
 8022086:	4663      	mov	r3, ip
 8022088:	0027      	movs	r7, r4
 802208a:	40da      	lsrs	r2, r3
 802208c:	4317      	orrs	r7, r2
 802208e:	0038      	movs	r0, r7
 8022090:	b003      	add	sp, #12
 8022092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022094:	2700      	movs	r7, #0
 8022096:	42ae      	cmp	r6, r5
 8022098:	d202      	bcs.n	80220a0 <__b2d+0x60>
 802209a:	9d01      	ldr	r5, [sp, #4]
 802209c:	3d08      	subs	r5, #8
 802209e:	682f      	ldr	r7, [r5, #0]
 80220a0:	210b      	movs	r1, #11
 80220a2:	4249      	negs	r1, r1
 80220a4:	468c      	mov	ip, r1
 80220a6:	449c      	add	ip, r3
 80220a8:	2b0b      	cmp	r3, #11
 80220aa:	d010      	beq.n	80220ce <__b2d+0x8e>
 80220ac:	4661      	mov	r1, ip
 80220ae:	2320      	movs	r3, #32
 80220b0:	408c      	lsls	r4, r1
 80220b2:	1a5b      	subs	r3, r3, r1
 80220b4:	0039      	movs	r1, r7
 80220b6:	40d9      	lsrs	r1, r3
 80220b8:	430c      	orrs	r4, r1
 80220ba:	4322      	orrs	r2, r4
 80220bc:	0011      	movs	r1, r2
 80220be:	2200      	movs	r2, #0
 80220c0:	42b5      	cmp	r5, r6
 80220c2:	d901      	bls.n	80220c8 <__b2d+0x88>
 80220c4:	3d04      	subs	r5, #4
 80220c6:	682a      	ldr	r2, [r5, #0]
 80220c8:	4664      	mov	r4, ip
 80220ca:	40a7      	lsls	r7, r4
 80220cc:	e7dd      	b.n	802208a <__b2d+0x4a>
 80220ce:	4322      	orrs	r2, r4
 80220d0:	0011      	movs	r1, r2
 80220d2:	e7dc      	b.n	802208e <__b2d+0x4e>
 80220d4:	3ff00000 	.word	0x3ff00000

080220d8 <__d2b>:
 80220d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80220da:	2101      	movs	r1, #1
 80220dc:	0016      	movs	r6, r2
 80220de:	001f      	movs	r7, r3
 80220e0:	f7ff fbfe 	bl	80218e0 <_Balloc>
 80220e4:	1e04      	subs	r4, r0, #0
 80220e6:	d105      	bne.n	80220f4 <__d2b+0x1c>
 80220e8:	0022      	movs	r2, r4
 80220ea:	4b25      	ldr	r3, [pc, #148]	@ (8022180 <__d2b+0xa8>)
 80220ec:	4825      	ldr	r0, [pc, #148]	@ (8022184 <__d2b+0xac>)
 80220ee:	4926      	ldr	r1, [pc, #152]	@ (8022188 <__d2b+0xb0>)
 80220f0:	f000 fcd6 	bl	8022aa0 <__assert_func>
 80220f4:	033b      	lsls	r3, r7, #12
 80220f6:	007d      	lsls	r5, r7, #1
 80220f8:	0b1b      	lsrs	r3, r3, #12
 80220fa:	0d6d      	lsrs	r5, r5, #21
 80220fc:	d002      	beq.n	8022104 <__d2b+0x2c>
 80220fe:	2280      	movs	r2, #128	@ 0x80
 8022100:	0352      	lsls	r2, r2, #13
 8022102:	4313      	orrs	r3, r2
 8022104:	9301      	str	r3, [sp, #4]
 8022106:	2e00      	cmp	r6, #0
 8022108:	d025      	beq.n	8022156 <__d2b+0x7e>
 802210a:	4668      	mov	r0, sp
 802210c:	9600      	str	r6, [sp, #0]
 802210e:	f7ff fd00 	bl	8021b12 <__lo0bits>
 8022112:	9b01      	ldr	r3, [sp, #4]
 8022114:	9900      	ldr	r1, [sp, #0]
 8022116:	2800      	cmp	r0, #0
 8022118:	d01b      	beq.n	8022152 <__d2b+0x7a>
 802211a:	2220      	movs	r2, #32
 802211c:	001e      	movs	r6, r3
 802211e:	1a12      	subs	r2, r2, r0
 8022120:	4096      	lsls	r6, r2
 8022122:	0032      	movs	r2, r6
 8022124:	40c3      	lsrs	r3, r0
 8022126:	430a      	orrs	r2, r1
 8022128:	6162      	str	r2, [r4, #20]
 802212a:	9301      	str	r3, [sp, #4]
 802212c:	9e01      	ldr	r6, [sp, #4]
 802212e:	61a6      	str	r6, [r4, #24]
 8022130:	1e73      	subs	r3, r6, #1
 8022132:	419e      	sbcs	r6, r3
 8022134:	3601      	adds	r6, #1
 8022136:	6126      	str	r6, [r4, #16]
 8022138:	2d00      	cmp	r5, #0
 802213a:	d014      	beq.n	8022166 <__d2b+0x8e>
 802213c:	2635      	movs	r6, #53	@ 0x35
 802213e:	4b13      	ldr	r3, [pc, #76]	@ (802218c <__d2b+0xb4>)
 8022140:	18ed      	adds	r5, r5, r3
 8022142:	9b08      	ldr	r3, [sp, #32]
 8022144:	182d      	adds	r5, r5, r0
 8022146:	601d      	str	r5, [r3, #0]
 8022148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802214a:	1a36      	subs	r6, r6, r0
 802214c:	601e      	str	r6, [r3, #0]
 802214e:	0020      	movs	r0, r4
 8022150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022152:	6161      	str	r1, [r4, #20]
 8022154:	e7ea      	b.n	802212c <__d2b+0x54>
 8022156:	a801      	add	r0, sp, #4
 8022158:	f7ff fcdb 	bl	8021b12 <__lo0bits>
 802215c:	9b01      	ldr	r3, [sp, #4]
 802215e:	2601      	movs	r6, #1
 8022160:	6163      	str	r3, [r4, #20]
 8022162:	3020      	adds	r0, #32
 8022164:	e7e7      	b.n	8022136 <__d2b+0x5e>
 8022166:	4b0a      	ldr	r3, [pc, #40]	@ (8022190 <__d2b+0xb8>)
 8022168:	18c0      	adds	r0, r0, r3
 802216a:	9b08      	ldr	r3, [sp, #32]
 802216c:	6018      	str	r0, [r3, #0]
 802216e:	4b09      	ldr	r3, [pc, #36]	@ (8022194 <__d2b+0xbc>)
 8022170:	18f3      	adds	r3, r6, r3
 8022172:	009b      	lsls	r3, r3, #2
 8022174:	18e3      	adds	r3, r4, r3
 8022176:	6958      	ldr	r0, [r3, #20]
 8022178:	f7ff fcaa 	bl	8021ad0 <__hi0bits>
 802217c:	0176      	lsls	r6, r6, #5
 802217e:	e7e3      	b.n	8022148 <__d2b+0x70>
 8022180:	08025ce1 	.word	0x08025ce1
 8022184:	08025d52 	.word	0x08025d52
 8022188:	0000030f 	.word	0x0000030f
 802218c:	fffffbcd 	.word	0xfffffbcd
 8022190:	fffffbce 	.word	0xfffffbce
 8022194:	3fffffff 	.word	0x3fffffff

08022198 <__ratio>:
 8022198:	b5f0      	push	{r4, r5, r6, r7, lr}
 802219a:	b087      	sub	sp, #28
 802219c:	000f      	movs	r7, r1
 802219e:	a904      	add	r1, sp, #16
 80221a0:	0006      	movs	r6, r0
 80221a2:	f7ff ff4d 	bl	8022040 <__b2d>
 80221a6:	9000      	str	r0, [sp, #0]
 80221a8:	9101      	str	r1, [sp, #4]
 80221aa:	9b00      	ldr	r3, [sp, #0]
 80221ac:	9c01      	ldr	r4, [sp, #4]
 80221ae:	0038      	movs	r0, r7
 80221b0:	a905      	add	r1, sp, #20
 80221b2:	9302      	str	r3, [sp, #8]
 80221b4:	9403      	str	r4, [sp, #12]
 80221b6:	f7ff ff43 	bl	8022040 <__b2d>
 80221ba:	000d      	movs	r5, r1
 80221bc:	0002      	movs	r2, r0
 80221be:	000b      	movs	r3, r1
 80221c0:	6930      	ldr	r0, [r6, #16]
 80221c2:	6939      	ldr	r1, [r7, #16]
 80221c4:	9e04      	ldr	r6, [sp, #16]
 80221c6:	1a40      	subs	r0, r0, r1
 80221c8:	9905      	ldr	r1, [sp, #20]
 80221ca:	0140      	lsls	r0, r0, #5
 80221cc:	1a71      	subs	r1, r6, r1
 80221ce:	1841      	adds	r1, r0, r1
 80221d0:	0508      	lsls	r0, r1, #20
 80221d2:	2900      	cmp	r1, #0
 80221d4:	dd08      	ble.n	80221e8 <__ratio+0x50>
 80221d6:	9901      	ldr	r1, [sp, #4]
 80221d8:	1841      	adds	r1, r0, r1
 80221da:	9103      	str	r1, [sp, #12]
 80221dc:	9802      	ldr	r0, [sp, #8]
 80221de:	9903      	ldr	r1, [sp, #12]
 80221e0:	f7df fde8 	bl	8001db4 <__aeabi_ddiv>
 80221e4:	b007      	add	sp, #28
 80221e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80221e8:	1a2b      	subs	r3, r5, r0
 80221ea:	e7f7      	b.n	80221dc <__ratio+0x44>

080221ec <__copybits>:
 80221ec:	b570      	push	{r4, r5, r6, lr}
 80221ee:	0014      	movs	r4, r2
 80221f0:	0005      	movs	r5, r0
 80221f2:	3901      	subs	r1, #1
 80221f4:	6913      	ldr	r3, [r2, #16]
 80221f6:	1149      	asrs	r1, r1, #5
 80221f8:	3101      	adds	r1, #1
 80221fa:	0089      	lsls	r1, r1, #2
 80221fc:	3414      	adds	r4, #20
 80221fe:	009b      	lsls	r3, r3, #2
 8022200:	1841      	adds	r1, r0, r1
 8022202:	18e3      	adds	r3, r4, r3
 8022204:	42a3      	cmp	r3, r4
 8022206:	d80d      	bhi.n	8022224 <__copybits+0x38>
 8022208:	0014      	movs	r4, r2
 802220a:	3411      	adds	r4, #17
 802220c:	2500      	movs	r5, #0
 802220e:	429c      	cmp	r4, r3
 8022210:	d803      	bhi.n	802221a <__copybits+0x2e>
 8022212:	1a9b      	subs	r3, r3, r2
 8022214:	3b11      	subs	r3, #17
 8022216:	089b      	lsrs	r3, r3, #2
 8022218:	009d      	lsls	r5, r3, #2
 802221a:	2300      	movs	r3, #0
 802221c:	1940      	adds	r0, r0, r5
 802221e:	4281      	cmp	r1, r0
 8022220:	d803      	bhi.n	802222a <__copybits+0x3e>
 8022222:	bd70      	pop	{r4, r5, r6, pc}
 8022224:	cc40      	ldmia	r4!, {r6}
 8022226:	c540      	stmia	r5!, {r6}
 8022228:	e7ec      	b.n	8022204 <__copybits+0x18>
 802222a:	c008      	stmia	r0!, {r3}
 802222c:	e7f7      	b.n	802221e <__copybits+0x32>

0802222e <__any_on>:
 802222e:	0002      	movs	r2, r0
 8022230:	6900      	ldr	r0, [r0, #16]
 8022232:	b510      	push	{r4, lr}
 8022234:	3214      	adds	r2, #20
 8022236:	114b      	asrs	r3, r1, #5
 8022238:	4298      	cmp	r0, r3
 802223a:	db13      	blt.n	8022264 <__any_on+0x36>
 802223c:	dd0c      	ble.n	8022258 <__any_on+0x2a>
 802223e:	241f      	movs	r4, #31
 8022240:	0008      	movs	r0, r1
 8022242:	4020      	ands	r0, r4
 8022244:	4221      	tst	r1, r4
 8022246:	d007      	beq.n	8022258 <__any_on+0x2a>
 8022248:	0099      	lsls	r1, r3, #2
 802224a:	588c      	ldr	r4, [r1, r2]
 802224c:	0021      	movs	r1, r4
 802224e:	40c1      	lsrs	r1, r0
 8022250:	4081      	lsls	r1, r0
 8022252:	2001      	movs	r0, #1
 8022254:	428c      	cmp	r4, r1
 8022256:	d104      	bne.n	8022262 <__any_on+0x34>
 8022258:	009b      	lsls	r3, r3, #2
 802225a:	18d3      	adds	r3, r2, r3
 802225c:	4293      	cmp	r3, r2
 802225e:	d803      	bhi.n	8022268 <__any_on+0x3a>
 8022260:	2000      	movs	r0, #0
 8022262:	bd10      	pop	{r4, pc}
 8022264:	0003      	movs	r3, r0
 8022266:	e7f7      	b.n	8022258 <__any_on+0x2a>
 8022268:	3b04      	subs	r3, #4
 802226a:	6819      	ldr	r1, [r3, #0]
 802226c:	2900      	cmp	r1, #0
 802226e:	d0f5      	beq.n	802225c <__any_on+0x2e>
 8022270:	2001      	movs	r0, #1
 8022272:	e7f6      	b.n	8022262 <__any_on+0x34>

08022274 <__ascii_wctomb>:
 8022274:	0003      	movs	r3, r0
 8022276:	1e08      	subs	r0, r1, #0
 8022278:	d005      	beq.n	8022286 <__ascii_wctomb+0x12>
 802227a:	2aff      	cmp	r2, #255	@ 0xff
 802227c:	d904      	bls.n	8022288 <__ascii_wctomb+0x14>
 802227e:	228a      	movs	r2, #138	@ 0x8a
 8022280:	2001      	movs	r0, #1
 8022282:	601a      	str	r2, [r3, #0]
 8022284:	4240      	negs	r0, r0
 8022286:	4770      	bx	lr
 8022288:	2001      	movs	r0, #1
 802228a:	700a      	strb	r2, [r1, #0]
 802228c:	e7fb      	b.n	8022286 <__ascii_wctomb+0x12>
	...

08022290 <__ssputs_r>:
 8022290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022292:	688e      	ldr	r6, [r1, #8]
 8022294:	b085      	sub	sp, #20
 8022296:	001f      	movs	r7, r3
 8022298:	000c      	movs	r4, r1
 802229a:	680b      	ldr	r3, [r1, #0]
 802229c:	9002      	str	r0, [sp, #8]
 802229e:	9203      	str	r2, [sp, #12]
 80222a0:	42be      	cmp	r6, r7
 80222a2:	d830      	bhi.n	8022306 <__ssputs_r+0x76>
 80222a4:	210c      	movs	r1, #12
 80222a6:	5e62      	ldrsh	r2, [r4, r1]
 80222a8:	2190      	movs	r1, #144	@ 0x90
 80222aa:	00c9      	lsls	r1, r1, #3
 80222ac:	420a      	tst	r2, r1
 80222ae:	d028      	beq.n	8022302 <__ssputs_r+0x72>
 80222b0:	2003      	movs	r0, #3
 80222b2:	6921      	ldr	r1, [r4, #16]
 80222b4:	1a5b      	subs	r3, r3, r1
 80222b6:	9301      	str	r3, [sp, #4]
 80222b8:	6963      	ldr	r3, [r4, #20]
 80222ba:	4343      	muls	r3, r0
 80222bc:	9801      	ldr	r0, [sp, #4]
 80222be:	0fdd      	lsrs	r5, r3, #31
 80222c0:	18ed      	adds	r5, r5, r3
 80222c2:	1c7b      	adds	r3, r7, #1
 80222c4:	181b      	adds	r3, r3, r0
 80222c6:	106d      	asrs	r5, r5, #1
 80222c8:	42ab      	cmp	r3, r5
 80222ca:	d900      	bls.n	80222ce <__ssputs_r+0x3e>
 80222cc:	001d      	movs	r5, r3
 80222ce:	0552      	lsls	r2, r2, #21
 80222d0:	d528      	bpl.n	8022324 <__ssputs_r+0x94>
 80222d2:	0029      	movs	r1, r5
 80222d4:	9802      	ldr	r0, [sp, #8]
 80222d6:	f7ff fa61 	bl	802179c <_malloc_r>
 80222da:	1e06      	subs	r6, r0, #0
 80222dc:	d02c      	beq.n	8022338 <__ssputs_r+0xa8>
 80222de:	9a01      	ldr	r2, [sp, #4]
 80222e0:	6921      	ldr	r1, [r4, #16]
 80222e2:	f7fd fff9 	bl	80202d8 <memcpy>
 80222e6:	89a2      	ldrh	r2, [r4, #12]
 80222e8:	4b18      	ldr	r3, [pc, #96]	@ (802234c <__ssputs_r+0xbc>)
 80222ea:	401a      	ands	r2, r3
 80222ec:	2380      	movs	r3, #128	@ 0x80
 80222ee:	4313      	orrs	r3, r2
 80222f0:	81a3      	strh	r3, [r4, #12]
 80222f2:	9b01      	ldr	r3, [sp, #4]
 80222f4:	6126      	str	r6, [r4, #16]
 80222f6:	18f6      	adds	r6, r6, r3
 80222f8:	6026      	str	r6, [r4, #0]
 80222fa:	003e      	movs	r6, r7
 80222fc:	6165      	str	r5, [r4, #20]
 80222fe:	1aed      	subs	r5, r5, r3
 8022300:	60a5      	str	r5, [r4, #8]
 8022302:	42be      	cmp	r6, r7
 8022304:	d900      	bls.n	8022308 <__ssputs_r+0x78>
 8022306:	003e      	movs	r6, r7
 8022308:	0032      	movs	r2, r6
 802230a:	9903      	ldr	r1, [sp, #12]
 802230c:	6820      	ldr	r0, [r4, #0]
 802230e:	f000 fb7e 	bl	8022a0e <memmove>
 8022312:	2000      	movs	r0, #0
 8022314:	68a3      	ldr	r3, [r4, #8]
 8022316:	1b9b      	subs	r3, r3, r6
 8022318:	60a3      	str	r3, [r4, #8]
 802231a:	6823      	ldr	r3, [r4, #0]
 802231c:	199b      	adds	r3, r3, r6
 802231e:	6023      	str	r3, [r4, #0]
 8022320:	b005      	add	sp, #20
 8022322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022324:	002a      	movs	r2, r5
 8022326:	9802      	ldr	r0, [sp, #8]
 8022328:	f000 fc05 	bl	8022b36 <_realloc_r>
 802232c:	1e06      	subs	r6, r0, #0
 802232e:	d1e0      	bne.n	80222f2 <__ssputs_r+0x62>
 8022330:	6921      	ldr	r1, [r4, #16]
 8022332:	9802      	ldr	r0, [sp, #8]
 8022334:	f7fe fe62 	bl	8020ffc <_free_r>
 8022338:	230c      	movs	r3, #12
 802233a:	2001      	movs	r0, #1
 802233c:	9a02      	ldr	r2, [sp, #8]
 802233e:	4240      	negs	r0, r0
 8022340:	6013      	str	r3, [r2, #0]
 8022342:	89a2      	ldrh	r2, [r4, #12]
 8022344:	3334      	adds	r3, #52	@ 0x34
 8022346:	4313      	orrs	r3, r2
 8022348:	81a3      	strh	r3, [r4, #12]
 802234a:	e7e9      	b.n	8022320 <__ssputs_r+0x90>
 802234c:	fffffb7f 	.word	0xfffffb7f

08022350 <_svfiprintf_r>:
 8022350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022352:	b0a1      	sub	sp, #132	@ 0x84
 8022354:	9003      	str	r0, [sp, #12]
 8022356:	001d      	movs	r5, r3
 8022358:	898b      	ldrh	r3, [r1, #12]
 802235a:	000f      	movs	r7, r1
 802235c:	0016      	movs	r6, r2
 802235e:	061b      	lsls	r3, r3, #24
 8022360:	d511      	bpl.n	8022386 <_svfiprintf_r+0x36>
 8022362:	690b      	ldr	r3, [r1, #16]
 8022364:	2b00      	cmp	r3, #0
 8022366:	d10e      	bne.n	8022386 <_svfiprintf_r+0x36>
 8022368:	2140      	movs	r1, #64	@ 0x40
 802236a:	f7ff fa17 	bl	802179c <_malloc_r>
 802236e:	6038      	str	r0, [r7, #0]
 8022370:	6138      	str	r0, [r7, #16]
 8022372:	2800      	cmp	r0, #0
 8022374:	d105      	bne.n	8022382 <_svfiprintf_r+0x32>
 8022376:	230c      	movs	r3, #12
 8022378:	9a03      	ldr	r2, [sp, #12]
 802237a:	6013      	str	r3, [r2, #0]
 802237c:	2001      	movs	r0, #1
 802237e:	4240      	negs	r0, r0
 8022380:	e0cf      	b.n	8022522 <_svfiprintf_r+0x1d2>
 8022382:	2340      	movs	r3, #64	@ 0x40
 8022384:	617b      	str	r3, [r7, #20]
 8022386:	2300      	movs	r3, #0
 8022388:	ac08      	add	r4, sp, #32
 802238a:	6163      	str	r3, [r4, #20]
 802238c:	3320      	adds	r3, #32
 802238e:	7663      	strb	r3, [r4, #25]
 8022390:	3310      	adds	r3, #16
 8022392:	76a3      	strb	r3, [r4, #26]
 8022394:	9507      	str	r5, [sp, #28]
 8022396:	0035      	movs	r5, r6
 8022398:	782b      	ldrb	r3, [r5, #0]
 802239a:	2b00      	cmp	r3, #0
 802239c:	d001      	beq.n	80223a2 <_svfiprintf_r+0x52>
 802239e:	2b25      	cmp	r3, #37	@ 0x25
 80223a0:	d148      	bne.n	8022434 <_svfiprintf_r+0xe4>
 80223a2:	1bab      	subs	r3, r5, r6
 80223a4:	9305      	str	r3, [sp, #20]
 80223a6:	42b5      	cmp	r5, r6
 80223a8:	d00b      	beq.n	80223c2 <_svfiprintf_r+0x72>
 80223aa:	0032      	movs	r2, r6
 80223ac:	0039      	movs	r1, r7
 80223ae:	9803      	ldr	r0, [sp, #12]
 80223b0:	f7ff ff6e 	bl	8022290 <__ssputs_r>
 80223b4:	3001      	adds	r0, #1
 80223b6:	d100      	bne.n	80223ba <_svfiprintf_r+0x6a>
 80223b8:	e0ae      	b.n	8022518 <_svfiprintf_r+0x1c8>
 80223ba:	6963      	ldr	r3, [r4, #20]
 80223bc:	9a05      	ldr	r2, [sp, #20]
 80223be:	189b      	adds	r3, r3, r2
 80223c0:	6163      	str	r3, [r4, #20]
 80223c2:	782b      	ldrb	r3, [r5, #0]
 80223c4:	2b00      	cmp	r3, #0
 80223c6:	d100      	bne.n	80223ca <_svfiprintf_r+0x7a>
 80223c8:	e0a6      	b.n	8022518 <_svfiprintf_r+0x1c8>
 80223ca:	2201      	movs	r2, #1
 80223cc:	2300      	movs	r3, #0
 80223ce:	4252      	negs	r2, r2
 80223d0:	6062      	str	r2, [r4, #4]
 80223d2:	a904      	add	r1, sp, #16
 80223d4:	3254      	adds	r2, #84	@ 0x54
 80223d6:	1852      	adds	r2, r2, r1
 80223d8:	1c6e      	adds	r6, r5, #1
 80223da:	6023      	str	r3, [r4, #0]
 80223dc:	60e3      	str	r3, [r4, #12]
 80223de:	60a3      	str	r3, [r4, #8]
 80223e0:	7013      	strb	r3, [r2, #0]
 80223e2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80223e4:	4b54      	ldr	r3, [pc, #336]	@ (8022538 <_svfiprintf_r+0x1e8>)
 80223e6:	2205      	movs	r2, #5
 80223e8:	0018      	movs	r0, r3
 80223ea:	7831      	ldrb	r1, [r6, #0]
 80223ec:	9305      	str	r3, [sp, #20]
 80223ee:	f7fd ff68 	bl	80202c2 <memchr>
 80223f2:	1c75      	adds	r5, r6, #1
 80223f4:	2800      	cmp	r0, #0
 80223f6:	d11f      	bne.n	8022438 <_svfiprintf_r+0xe8>
 80223f8:	6822      	ldr	r2, [r4, #0]
 80223fa:	06d3      	lsls	r3, r2, #27
 80223fc:	d504      	bpl.n	8022408 <_svfiprintf_r+0xb8>
 80223fe:	2353      	movs	r3, #83	@ 0x53
 8022400:	a904      	add	r1, sp, #16
 8022402:	185b      	adds	r3, r3, r1
 8022404:	2120      	movs	r1, #32
 8022406:	7019      	strb	r1, [r3, #0]
 8022408:	0713      	lsls	r3, r2, #28
 802240a:	d504      	bpl.n	8022416 <_svfiprintf_r+0xc6>
 802240c:	2353      	movs	r3, #83	@ 0x53
 802240e:	a904      	add	r1, sp, #16
 8022410:	185b      	adds	r3, r3, r1
 8022412:	212b      	movs	r1, #43	@ 0x2b
 8022414:	7019      	strb	r1, [r3, #0]
 8022416:	7833      	ldrb	r3, [r6, #0]
 8022418:	2b2a      	cmp	r3, #42	@ 0x2a
 802241a:	d016      	beq.n	802244a <_svfiprintf_r+0xfa>
 802241c:	0035      	movs	r5, r6
 802241e:	2100      	movs	r1, #0
 8022420:	200a      	movs	r0, #10
 8022422:	68e3      	ldr	r3, [r4, #12]
 8022424:	782a      	ldrb	r2, [r5, #0]
 8022426:	1c6e      	adds	r6, r5, #1
 8022428:	3a30      	subs	r2, #48	@ 0x30
 802242a:	2a09      	cmp	r2, #9
 802242c:	d950      	bls.n	80224d0 <_svfiprintf_r+0x180>
 802242e:	2900      	cmp	r1, #0
 8022430:	d111      	bne.n	8022456 <_svfiprintf_r+0x106>
 8022432:	e017      	b.n	8022464 <_svfiprintf_r+0x114>
 8022434:	3501      	adds	r5, #1
 8022436:	e7af      	b.n	8022398 <_svfiprintf_r+0x48>
 8022438:	9b05      	ldr	r3, [sp, #20]
 802243a:	6822      	ldr	r2, [r4, #0]
 802243c:	1ac0      	subs	r0, r0, r3
 802243e:	2301      	movs	r3, #1
 8022440:	4083      	lsls	r3, r0
 8022442:	4313      	orrs	r3, r2
 8022444:	002e      	movs	r6, r5
 8022446:	6023      	str	r3, [r4, #0]
 8022448:	e7cc      	b.n	80223e4 <_svfiprintf_r+0x94>
 802244a:	9b07      	ldr	r3, [sp, #28]
 802244c:	1d19      	adds	r1, r3, #4
 802244e:	681b      	ldr	r3, [r3, #0]
 8022450:	9107      	str	r1, [sp, #28]
 8022452:	2b00      	cmp	r3, #0
 8022454:	db01      	blt.n	802245a <_svfiprintf_r+0x10a>
 8022456:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022458:	e004      	b.n	8022464 <_svfiprintf_r+0x114>
 802245a:	425b      	negs	r3, r3
 802245c:	60e3      	str	r3, [r4, #12]
 802245e:	2302      	movs	r3, #2
 8022460:	4313      	orrs	r3, r2
 8022462:	6023      	str	r3, [r4, #0]
 8022464:	782b      	ldrb	r3, [r5, #0]
 8022466:	2b2e      	cmp	r3, #46	@ 0x2e
 8022468:	d10c      	bne.n	8022484 <_svfiprintf_r+0x134>
 802246a:	786b      	ldrb	r3, [r5, #1]
 802246c:	2b2a      	cmp	r3, #42	@ 0x2a
 802246e:	d134      	bne.n	80224da <_svfiprintf_r+0x18a>
 8022470:	9b07      	ldr	r3, [sp, #28]
 8022472:	3502      	adds	r5, #2
 8022474:	1d1a      	adds	r2, r3, #4
 8022476:	681b      	ldr	r3, [r3, #0]
 8022478:	9207      	str	r2, [sp, #28]
 802247a:	2b00      	cmp	r3, #0
 802247c:	da01      	bge.n	8022482 <_svfiprintf_r+0x132>
 802247e:	2301      	movs	r3, #1
 8022480:	425b      	negs	r3, r3
 8022482:	9309      	str	r3, [sp, #36]	@ 0x24
 8022484:	4e2d      	ldr	r6, [pc, #180]	@ (802253c <_svfiprintf_r+0x1ec>)
 8022486:	2203      	movs	r2, #3
 8022488:	0030      	movs	r0, r6
 802248a:	7829      	ldrb	r1, [r5, #0]
 802248c:	f7fd ff19 	bl	80202c2 <memchr>
 8022490:	2800      	cmp	r0, #0
 8022492:	d006      	beq.n	80224a2 <_svfiprintf_r+0x152>
 8022494:	2340      	movs	r3, #64	@ 0x40
 8022496:	1b80      	subs	r0, r0, r6
 8022498:	4083      	lsls	r3, r0
 802249a:	6822      	ldr	r2, [r4, #0]
 802249c:	3501      	adds	r5, #1
 802249e:	4313      	orrs	r3, r2
 80224a0:	6023      	str	r3, [r4, #0]
 80224a2:	7829      	ldrb	r1, [r5, #0]
 80224a4:	2206      	movs	r2, #6
 80224a6:	4826      	ldr	r0, [pc, #152]	@ (8022540 <_svfiprintf_r+0x1f0>)
 80224a8:	1c6e      	adds	r6, r5, #1
 80224aa:	7621      	strb	r1, [r4, #24]
 80224ac:	f7fd ff09 	bl	80202c2 <memchr>
 80224b0:	2800      	cmp	r0, #0
 80224b2:	d038      	beq.n	8022526 <_svfiprintf_r+0x1d6>
 80224b4:	4b23      	ldr	r3, [pc, #140]	@ (8022544 <_svfiprintf_r+0x1f4>)
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d122      	bne.n	8022500 <_svfiprintf_r+0x1b0>
 80224ba:	2207      	movs	r2, #7
 80224bc:	9b07      	ldr	r3, [sp, #28]
 80224be:	3307      	adds	r3, #7
 80224c0:	4393      	bics	r3, r2
 80224c2:	3308      	adds	r3, #8
 80224c4:	9307      	str	r3, [sp, #28]
 80224c6:	6963      	ldr	r3, [r4, #20]
 80224c8:	9a04      	ldr	r2, [sp, #16]
 80224ca:	189b      	adds	r3, r3, r2
 80224cc:	6163      	str	r3, [r4, #20]
 80224ce:	e762      	b.n	8022396 <_svfiprintf_r+0x46>
 80224d0:	4343      	muls	r3, r0
 80224d2:	0035      	movs	r5, r6
 80224d4:	2101      	movs	r1, #1
 80224d6:	189b      	adds	r3, r3, r2
 80224d8:	e7a4      	b.n	8022424 <_svfiprintf_r+0xd4>
 80224da:	2300      	movs	r3, #0
 80224dc:	200a      	movs	r0, #10
 80224de:	0019      	movs	r1, r3
 80224e0:	3501      	adds	r5, #1
 80224e2:	6063      	str	r3, [r4, #4]
 80224e4:	782a      	ldrb	r2, [r5, #0]
 80224e6:	1c6e      	adds	r6, r5, #1
 80224e8:	3a30      	subs	r2, #48	@ 0x30
 80224ea:	2a09      	cmp	r2, #9
 80224ec:	d903      	bls.n	80224f6 <_svfiprintf_r+0x1a6>
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	d0c8      	beq.n	8022484 <_svfiprintf_r+0x134>
 80224f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80224f4:	e7c6      	b.n	8022484 <_svfiprintf_r+0x134>
 80224f6:	4341      	muls	r1, r0
 80224f8:	0035      	movs	r5, r6
 80224fa:	2301      	movs	r3, #1
 80224fc:	1889      	adds	r1, r1, r2
 80224fe:	e7f1      	b.n	80224e4 <_svfiprintf_r+0x194>
 8022500:	aa07      	add	r2, sp, #28
 8022502:	9200      	str	r2, [sp, #0]
 8022504:	0021      	movs	r1, r4
 8022506:	003a      	movs	r2, r7
 8022508:	4b0f      	ldr	r3, [pc, #60]	@ (8022548 <_svfiprintf_r+0x1f8>)
 802250a:	9803      	ldr	r0, [sp, #12]
 802250c:	f7fc ffd4 	bl	801f4b8 <_printf_float>
 8022510:	9004      	str	r0, [sp, #16]
 8022512:	9b04      	ldr	r3, [sp, #16]
 8022514:	3301      	adds	r3, #1
 8022516:	d1d6      	bne.n	80224c6 <_svfiprintf_r+0x176>
 8022518:	89bb      	ldrh	r3, [r7, #12]
 802251a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802251c:	065b      	lsls	r3, r3, #25
 802251e:	d500      	bpl.n	8022522 <_svfiprintf_r+0x1d2>
 8022520:	e72c      	b.n	802237c <_svfiprintf_r+0x2c>
 8022522:	b021      	add	sp, #132	@ 0x84
 8022524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022526:	aa07      	add	r2, sp, #28
 8022528:	9200      	str	r2, [sp, #0]
 802252a:	0021      	movs	r1, r4
 802252c:	003a      	movs	r2, r7
 802252e:	4b06      	ldr	r3, [pc, #24]	@ (8022548 <_svfiprintf_r+0x1f8>)
 8022530:	9803      	ldr	r0, [sp, #12]
 8022532:	f7fd fa6f 	bl	801fa14 <_printf_i>
 8022536:	e7eb      	b.n	8022510 <_svfiprintf_r+0x1c0>
 8022538:	08025ea8 	.word	0x08025ea8
 802253c:	08025eae 	.word	0x08025eae
 8022540:	08025eb2 	.word	0x08025eb2
 8022544:	0801f4b9 	.word	0x0801f4b9
 8022548:	08022291 	.word	0x08022291

0802254c <__sfputc_r>:
 802254c:	6893      	ldr	r3, [r2, #8]
 802254e:	b510      	push	{r4, lr}
 8022550:	3b01      	subs	r3, #1
 8022552:	6093      	str	r3, [r2, #8]
 8022554:	2b00      	cmp	r3, #0
 8022556:	da04      	bge.n	8022562 <__sfputc_r+0x16>
 8022558:	6994      	ldr	r4, [r2, #24]
 802255a:	42a3      	cmp	r3, r4
 802255c:	db07      	blt.n	802256e <__sfputc_r+0x22>
 802255e:	290a      	cmp	r1, #10
 8022560:	d005      	beq.n	802256e <__sfputc_r+0x22>
 8022562:	6813      	ldr	r3, [r2, #0]
 8022564:	1c58      	adds	r0, r3, #1
 8022566:	6010      	str	r0, [r2, #0]
 8022568:	7019      	strb	r1, [r3, #0]
 802256a:	0008      	movs	r0, r1
 802256c:	bd10      	pop	{r4, pc}
 802256e:	f7fd fd37 	bl	801ffe0 <__swbuf_r>
 8022572:	0001      	movs	r1, r0
 8022574:	e7f9      	b.n	802256a <__sfputc_r+0x1e>

08022576 <__sfputs_r>:
 8022576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022578:	0006      	movs	r6, r0
 802257a:	000f      	movs	r7, r1
 802257c:	0014      	movs	r4, r2
 802257e:	18d5      	adds	r5, r2, r3
 8022580:	42ac      	cmp	r4, r5
 8022582:	d101      	bne.n	8022588 <__sfputs_r+0x12>
 8022584:	2000      	movs	r0, #0
 8022586:	e007      	b.n	8022598 <__sfputs_r+0x22>
 8022588:	7821      	ldrb	r1, [r4, #0]
 802258a:	003a      	movs	r2, r7
 802258c:	0030      	movs	r0, r6
 802258e:	f7ff ffdd 	bl	802254c <__sfputc_r>
 8022592:	3401      	adds	r4, #1
 8022594:	1c43      	adds	r3, r0, #1
 8022596:	d1f3      	bne.n	8022580 <__sfputs_r+0xa>
 8022598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802259c <_vfiprintf_r>:
 802259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802259e:	b0a1      	sub	sp, #132	@ 0x84
 80225a0:	000f      	movs	r7, r1
 80225a2:	0015      	movs	r5, r2
 80225a4:	001e      	movs	r6, r3
 80225a6:	9003      	str	r0, [sp, #12]
 80225a8:	2800      	cmp	r0, #0
 80225aa:	d004      	beq.n	80225b6 <_vfiprintf_r+0x1a>
 80225ac:	6a03      	ldr	r3, [r0, #32]
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d101      	bne.n	80225b6 <_vfiprintf_r+0x1a>
 80225b2:	f7fd fbcd 	bl	801fd50 <__sinit>
 80225b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80225b8:	07db      	lsls	r3, r3, #31
 80225ba:	d405      	bmi.n	80225c8 <_vfiprintf_r+0x2c>
 80225bc:	89bb      	ldrh	r3, [r7, #12]
 80225be:	059b      	lsls	r3, r3, #22
 80225c0:	d402      	bmi.n	80225c8 <_vfiprintf_r+0x2c>
 80225c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80225c4:	f7fd fe7b 	bl	80202be <__retarget_lock_acquire_recursive>
 80225c8:	89bb      	ldrh	r3, [r7, #12]
 80225ca:	071b      	lsls	r3, r3, #28
 80225cc:	d502      	bpl.n	80225d4 <_vfiprintf_r+0x38>
 80225ce:	693b      	ldr	r3, [r7, #16]
 80225d0:	2b00      	cmp	r3, #0
 80225d2:	d113      	bne.n	80225fc <_vfiprintf_r+0x60>
 80225d4:	0039      	movs	r1, r7
 80225d6:	9803      	ldr	r0, [sp, #12]
 80225d8:	f7fd fd44 	bl	8020064 <__swsetup_r>
 80225dc:	2800      	cmp	r0, #0
 80225de:	d00d      	beq.n	80225fc <_vfiprintf_r+0x60>
 80225e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80225e2:	07db      	lsls	r3, r3, #31
 80225e4:	d503      	bpl.n	80225ee <_vfiprintf_r+0x52>
 80225e6:	2001      	movs	r0, #1
 80225e8:	4240      	negs	r0, r0
 80225ea:	b021      	add	sp, #132	@ 0x84
 80225ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225ee:	89bb      	ldrh	r3, [r7, #12]
 80225f0:	059b      	lsls	r3, r3, #22
 80225f2:	d4f8      	bmi.n	80225e6 <_vfiprintf_r+0x4a>
 80225f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80225f6:	f7fd fe63 	bl	80202c0 <__retarget_lock_release_recursive>
 80225fa:	e7f4      	b.n	80225e6 <_vfiprintf_r+0x4a>
 80225fc:	2300      	movs	r3, #0
 80225fe:	ac08      	add	r4, sp, #32
 8022600:	6163      	str	r3, [r4, #20]
 8022602:	3320      	adds	r3, #32
 8022604:	7663      	strb	r3, [r4, #25]
 8022606:	3310      	adds	r3, #16
 8022608:	76a3      	strb	r3, [r4, #26]
 802260a:	9607      	str	r6, [sp, #28]
 802260c:	002e      	movs	r6, r5
 802260e:	7833      	ldrb	r3, [r6, #0]
 8022610:	2b00      	cmp	r3, #0
 8022612:	d001      	beq.n	8022618 <_vfiprintf_r+0x7c>
 8022614:	2b25      	cmp	r3, #37	@ 0x25
 8022616:	d148      	bne.n	80226aa <_vfiprintf_r+0x10e>
 8022618:	1b73      	subs	r3, r6, r5
 802261a:	9305      	str	r3, [sp, #20]
 802261c:	42ae      	cmp	r6, r5
 802261e:	d00b      	beq.n	8022638 <_vfiprintf_r+0x9c>
 8022620:	002a      	movs	r2, r5
 8022622:	0039      	movs	r1, r7
 8022624:	9803      	ldr	r0, [sp, #12]
 8022626:	f7ff ffa6 	bl	8022576 <__sfputs_r>
 802262a:	3001      	adds	r0, #1
 802262c:	d100      	bne.n	8022630 <_vfiprintf_r+0x94>
 802262e:	e0ae      	b.n	802278e <_vfiprintf_r+0x1f2>
 8022630:	6963      	ldr	r3, [r4, #20]
 8022632:	9a05      	ldr	r2, [sp, #20]
 8022634:	189b      	adds	r3, r3, r2
 8022636:	6163      	str	r3, [r4, #20]
 8022638:	7833      	ldrb	r3, [r6, #0]
 802263a:	2b00      	cmp	r3, #0
 802263c:	d100      	bne.n	8022640 <_vfiprintf_r+0xa4>
 802263e:	e0a6      	b.n	802278e <_vfiprintf_r+0x1f2>
 8022640:	2201      	movs	r2, #1
 8022642:	2300      	movs	r3, #0
 8022644:	4252      	negs	r2, r2
 8022646:	6062      	str	r2, [r4, #4]
 8022648:	a904      	add	r1, sp, #16
 802264a:	3254      	adds	r2, #84	@ 0x54
 802264c:	1852      	adds	r2, r2, r1
 802264e:	1c75      	adds	r5, r6, #1
 8022650:	6023      	str	r3, [r4, #0]
 8022652:	60e3      	str	r3, [r4, #12]
 8022654:	60a3      	str	r3, [r4, #8]
 8022656:	7013      	strb	r3, [r2, #0]
 8022658:	65a3      	str	r3, [r4, #88]	@ 0x58
 802265a:	4b59      	ldr	r3, [pc, #356]	@ (80227c0 <_vfiprintf_r+0x224>)
 802265c:	2205      	movs	r2, #5
 802265e:	0018      	movs	r0, r3
 8022660:	7829      	ldrb	r1, [r5, #0]
 8022662:	9305      	str	r3, [sp, #20]
 8022664:	f7fd fe2d 	bl	80202c2 <memchr>
 8022668:	1c6e      	adds	r6, r5, #1
 802266a:	2800      	cmp	r0, #0
 802266c:	d11f      	bne.n	80226ae <_vfiprintf_r+0x112>
 802266e:	6822      	ldr	r2, [r4, #0]
 8022670:	06d3      	lsls	r3, r2, #27
 8022672:	d504      	bpl.n	802267e <_vfiprintf_r+0xe2>
 8022674:	2353      	movs	r3, #83	@ 0x53
 8022676:	a904      	add	r1, sp, #16
 8022678:	185b      	adds	r3, r3, r1
 802267a:	2120      	movs	r1, #32
 802267c:	7019      	strb	r1, [r3, #0]
 802267e:	0713      	lsls	r3, r2, #28
 8022680:	d504      	bpl.n	802268c <_vfiprintf_r+0xf0>
 8022682:	2353      	movs	r3, #83	@ 0x53
 8022684:	a904      	add	r1, sp, #16
 8022686:	185b      	adds	r3, r3, r1
 8022688:	212b      	movs	r1, #43	@ 0x2b
 802268a:	7019      	strb	r1, [r3, #0]
 802268c:	782b      	ldrb	r3, [r5, #0]
 802268e:	2b2a      	cmp	r3, #42	@ 0x2a
 8022690:	d016      	beq.n	80226c0 <_vfiprintf_r+0x124>
 8022692:	002e      	movs	r6, r5
 8022694:	2100      	movs	r1, #0
 8022696:	200a      	movs	r0, #10
 8022698:	68e3      	ldr	r3, [r4, #12]
 802269a:	7832      	ldrb	r2, [r6, #0]
 802269c:	1c75      	adds	r5, r6, #1
 802269e:	3a30      	subs	r2, #48	@ 0x30
 80226a0:	2a09      	cmp	r2, #9
 80226a2:	d950      	bls.n	8022746 <_vfiprintf_r+0x1aa>
 80226a4:	2900      	cmp	r1, #0
 80226a6:	d111      	bne.n	80226cc <_vfiprintf_r+0x130>
 80226a8:	e017      	b.n	80226da <_vfiprintf_r+0x13e>
 80226aa:	3601      	adds	r6, #1
 80226ac:	e7af      	b.n	802260e <_vfiprintf_r+0x72>
 80226ae:	9b05      	ldr	r3, [sp, #20]
 80226b0:	6822      	ldr	r2, [r4, #0]
 80226b2:	1ac0      	subs	r0, r0, r3
 80226b4:	2301      	movs	r3, #1
 80226b6:	4083      	lsls	r3, r0
 80226b8:	4313      	orrs	r3, r2
 80226ba:	0035      	movs	r5, r6
 80226bc:	6023      	str	r3, [r4, #0]
 80226be:	e7cc      	b.n	802265a <_vfiprintf_r+0xbe>
 80226c0:	9b07      	ldr	r3, [sp, #28]
 80226c2:	1d19      	adds	r1, r3, #4
 80226c4:	681b      	ldr	r3, [r3, #0]
 80226c6:	9107      	str	r1, [sp, #28]
 80226c8:	2b00      	cmp	r3, #0
 80226ca:	db01      	blt.n	80226d0 <_vfiprintf_r+0x134>
 80226cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80226ce:	e004      	b.n	80226da <_vfiprintf_r+0x13e>
 80226d0:	425b      	negs	r3, r3
 80226d2:	60e3      	str	r3, [r4, #12]
 80226d4:	2302      	movs	r3, #2
 80226d6:	4313      	orrs	r3, r2
 80226d8:	6023      	str	r3, [r4, #0]
 80226da:	7833      	ldrb	r3, [r6, #0]
 80226dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80226de:	d10c      	bne.n	80226fa <_vfiprintf_r+0x15e>
 80226e0:	7873      	ldrb	r3, [r6, #1]
 80226e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80226e4:	d134      	bne.n	8022750 <_vfiprintf_r+0x1b4>
 80226e6:	9b07      	ldr	r3, [sp, #28]
 80226e8:	3602      	adds	r6, #2
 80226ea:	1d1a      	adds	r2, r3, #4
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	9207      	str	r2, [sp, #28]
 80226f0:	2b00      	cmp	r3, #0
 80226f2:	da01      	bge.n	80226f8 <_vfiprintf_r+0x15c>
 80226f4:	2301      	movs	r3, #1
 80226f6:	425b      	negs	r3, r3
 80226f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80226fa:	4d32      	ldr	r5, [pc, #200]	@ (80227c4 <_vfiprintf_r+0x228>)
 80226fc:	2203      	movs	r2, #3
 80226fe:	0028      	movs	r0, r5
 8022700:	7831      	ldrb	r1, [r6, #0]
 8022702:	f7fd fdde 	bl	80202c2 <memchr>
 8022706:	2800      	cmp	r0, #0
 8022708:	d006      	beq.n	8022718 <_vfiprintf_r+0x17c>
 802270a:	2340      	movs	r3, #64	@ 0x40
 802270c:	1b40      	subs	r0, r0, r5
 802270e:	4083      	lsls	r3, r0
 8022710:	6822      	ldr	r2, [r4, #0]
 8022712:	3601      	adds	r6, #1
 8022714:	4313      	orrs	r3, r2
 8022716:	6023      	str	r3, [r4, #0]
 8022718:	7831      	ldrb	r1, [r6, #0]
 802271a:	2206      	movs	r2, #6
 802271c:	482a      	ldr	r0, [pc, #168]	@ (80227c8 <_vfiprintf_r+0x22c>)
 802271e:	1c75      	adds	r5, r6, #1
 8022720:	7621      	strb	r1, [r4, #24]
 8022722:	f7fd fdce 	bl	80202c2 <memchr>
 8022726:	2800      	cmp	r0, #0
 8022728:	d040      	beq.n	80227ac <_vfiprintf_r+0x210>
 802272a:	4b28      	ldr	r3, [pc, #160]	@ (80227cc <_vfiprintf_r+0x230>)
 802272c:	2b00      	cmp	r3, #0
 802272e:	d122      	bne.n	8022776 <_vfiprintf_r+0x1da>
 8022730:	2207      	movs	r2, #7
 8022732:	9b07      	ldr	r3, [sp, #28]
 8022734:	3307      	adds	r3, #7
 8022736:	4393      	bics	r3, r2
 8022738:	3308      	adds	r3, #8
 802273a:	9307      	str	r3, [sp, #28]
 802273c:	6963      	ldr	r3, [r4, #20]
 802273e:	9a04      	ldr	r2, [sp, #16]
 8022740:	189b      	adds	r3, r3, r2
 8022742:	6163      	str	r3, [r4, #20]
 8022744:	e762      	b.n	802260c <_vfiprintf_r+0x70>
 8022746:	4343      	muls	r3, r0
 8022748:	002e      	movs	r6, r5
 802274a:	2101      	movs	r1, #1
 802274c:	189b      	adds	r3, r3, r2
 802274e:	e7a4      	b.n	802269a <_vfiprintf_r+0xfe>
 8022750:	2300      	movs	r3, #0
 8022752:	200a      	movs	r0, #10
 8022754:	0019      	movs	r1, r3
 8022756:	3601      	adds	r6, #1
 8022758:	6063      	str	r3, [r4, #4]
 802275a:	7832      	ldrb	r2, [r6, #0]
 802275c:	1c75      	adds	r5, r6, #1
 802275e:	3a30      	subs	r2, #48	@ 0x30
 8022760:	2a09      	cmp	r2, #9
 8022762:	d903      	bls.n	802276c <_vfiprintf_r+0x1d0>
 8022764:	2b00      	cmp	r3, #0
 8022766:	d0c8      	beq.n	80226fa <_vfiprintf_r+0x15e>
 8022768:	9109      	str	r1, [sp, #36]	@ 0x24
 802276a:	e7c6      	b.n	80226fa <_vfiprintf_r+0x15e>
 802276c:	4341      	muls	r1, r0
 802276e:	002e      	movs	r6, r5
 8022770:	2301      	movs	r3, #1
 8022772:	1889      	adds	r1, r1, r2
 8022774:	e7f1      	b.n	802275a <_vfiprintf_r+0x1be>
 8022776:	aa07      	add	r2, sp, #28
 8022778:	9200      	str	r2, [sp, #0]
 802277a:	0021      	movs	r1, r4
 802277c:	003a      	movs	r2, r7
 802277e:	4b14      	ldr	r3, [pc, #80]	@ (80227d0 <_vfiprintf_r+0x234>)
 8022780:	9803      	ldr	r0, [sp, #12]
 8022782:	f7fc fe99 	bl	801f4b8 <_printf_float>
 8022786:	9004      	str	r0, [sp, #16]
 8022788:	9b04      	ldr	r3, [sp, #16]
 802278a:	3301      	adds	r3, #1
 802278c:	d1d6      	bne.n	802273c <_vfiprintf_r+0x1a0>
 802278e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022790:	07db      	lsls	r3, r3, #31
 8022792:	d405      	bmi.n	80227a0 <_vfiprintf_r+0x204>
 8022794:	89bb      	ldrh	r3, [r7, #12]
 8022796:	059b      	lsls	r3, r3, #22
 8022798:	d402      	bmi.n	80227a0 <_vfiprintf_r+0x204>
 802279a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802279c:	f7fd fd90 	bl	80202c0 <__retarget_lock_release_recursive>
 80227a0:	89bb      	ldrh	r3, [r7, #12]
 80227a2:	065b      	lsls	r3, r3, #25
 80227a4:	d500      	bpl.n	80227a8 <_vfiprintf_r+0x20c>
 80227a6:	e71e      	b.n	80225e6 <_vfiprintf_r+0x4a>
 80227a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80227aa:	e71e      	b.n	80225ea <_vfiprintf_r+0x4e>
 80227ac:	aa07      	add	r2, sp, #28
 80227ae:	9200      	str	r2, [sp, #0]
 80227b0:	0021      	movs	r1, r4
 80227b2:	003a      	movs	r2, r7
 80227b4:	4b06      	ldr	r3, [pc, #24]	@ (80227d0 <_vfiprintf_r+0x234>)
 80227b6:	9803      	ldr	r0, [sp, #12]
 80227b8:	f7fd f92c 	bl	801fa14 <_printf_i>
 80227bc:	e7e3      	b.n	8022786 <_vfiprintf_r+0x1ea>
 80227be:	46c0      	nop			@ (mov r8, r8)
 80227c0:	08025ea8 	.word	0x08025ea8
 80227c4:	08025eae 	.word	0x08025eae
 80227c8:	08025eb2 	.word	0x08025eb2
 80227cc:	0801f4b9 	.word	0x0801f4b9
 80227d0:	08022577 	.word	0x08022577

080227d4 <__sflush_r>:
 80227d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80227d6:	220c      	movs	r2, #12
 80227d8:	5e8b      	ldrsh	r3, [r1, r2]
 80227da:	0005      	movs	r5, r0
 80227dc:	000c      	movs	r4, r1
 80227de:	071a      	lsls	r2, r3, #28
 80227e0:	d456      	bmi.n	8022890 <__sflush_r+0xbc>
 80227e2:	684a      	ldr	r2, [r1, #4]
 80227e4:	2a00      	cmp	r2, #0
 80227e6:	dc02      	bgt.n	80227ee <__sflush_r+0x1a>
 80227e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80227ea:	2a00      	cmp	r2, #0
 80227ec:	dd4e      	ble.n	802288c <__sflush_r+0xb8>
 80227ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80227f0:	2f00      	cmp	r7, #0
 80227f2:	d04b      	beq.n	802288c <__sflush_r+0xb8>
 80227f4:	2200      	movs	r2, #0
 80227f6:	2080      	movs	r0, #128	@ 0x80
 80227f8:	682e      	ldr	r6, [r5, #0]
 80227fa:	602a      	str	r2, [r5, #0]
 80227fc:	001a      	movs	r2, r3
 80227fe:	0140      	lsls	r0, r0, #5
 8022800:	6a21      	ldr	r1, [r4, #32]
 8022802:	4002      	ands	r2, r0
 8022804:	4203      	tst	r3, r0
 8022806:	d033      	beq.n	8022870 <__sflush_r+0x9c>
 8022808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802280a:	89a3      	ldrh	r3, [r4, #12]
 802280c:	075b      	lsls	r3, r3, #29
 802280e:	d506      	bpl.n	802281e <__sflush_r+0x4a>
 8022810:	6863      	ldr	r3, [r4, #4]
 8022812:	1ad2      	subs	r2, r2, r3
 8022814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022816:	2b00      	cmp	r3, #0
 8022818:	d001      	beq.n	802281e <__sflush_r+0x4a>
 802281a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802281c:	1ad2      	subs	r2, r2, r3
 802281e:	2300      	movs	r3, #0
 8022820:	0028      	movs	r0, r5
 8022822:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022824:	6a21      	ldr	r1, [r4, #32]
 8022826:	47b8      	blx	r7
 8022828:	89a2      	ldrh	r2, [r4, #12]
 802282a:	1c43      	adds	r3, r0, #1
 802282c:	d106      	bne.n	802283c <__sflush_r+0x68>
 802282e:	6829      	ldr	r1, [r5, #0]
 8022830:	291d      	cmp	r1, #29
 8022832:	d846      	bhi.n	80228c2 <__sflush_r+0xee>
 8022834:	4b29      	ldr	r3, [pc, #164]	@ (80228dc <__sflush_r+0x108>)
 8022836:	410b      	asrs	r3, r1
 8022838:	07db      	lsls	r3, r3, #31
 802283a:	d442      	bmi.n	80228c2 <__sflush_r+0xee>
 802283c:	2300      	movs	r3, #0
 802283e:	6063      	str	r3, [r4, #4]
 8022840:	6923      	ldr	r3, [r4, #16]
 8022842:	6023      	str	r3, [r4, #0]
 8022844:	04d2      	lsls	r2, r2, #19
 8022846:	d505      	bpl.n	8022854 <__sflush_r+0x80>
 8022848:	1c43      	adds	r3, r0, #1
 802284a:	d102      	bne.n	8022852 <__sflush_r+0x7e>
 802284c:	682b      	ldr	r3, [r5, #0]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d100      	bne.n	8022854 <__sflush_r+0x80>
 8022852:	6560      	str	r0, [r4, #84]	@ 0x54
 8022854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022856:	602e      	str	r6, [r5, #0]
 8022858:	2900      	cmp	r1, #0
 802285a:	d017      	beq.n	802288c <__sflush_r+0xb8>
 802285c:	0023      	movs	r3, r4
 802285e:	3344      	adds	r3, #68	@ 0x44
 8022860:	4299      	cmp	r1, r3
 8022862:	d002      	beq.n	802286a <__sflush_r+0x96>
 8022864:	0028      	movs	r0, r5
 8022866:	f7fe fbc9 	bl	8020ffc <_free_r>
 802286a:	2300      	movs	r3, #0
 802286c:	6363      	str	r3, [r4, #52]	@ 0x34
 802286e:	e00d      	b.n	802288c <__sflush_r+0xb8>
 8022870:	2301      	movs	r3, #1
 8022872:	0028      	movs	r0, r5
 8022874:	47b8      	blx	r7
 8022876:	0002      	movs	r2, r0
 8022878:	1c43      	adds	r3, r0, #1
 802287a:	d1c6      	bne.n	802280a <__sflush_r+0x36>
 802287c:	682b      	ldr	r3, [r5, #0]
 802287e:	2b00      	cmp	r3, #0
 8022880:	d0c3      	beq.n	802280a <__sflush_r+0x36>
 8022882:	2b1d      	cmp	r3, #29
 8022884:	d001      	beq.n	802288a <__sflush_r+0xb6>
 8022886:	2b16      	cmp	r3, #22
 8022888:	d11a      	bne.n	80228c0 <__sflush_r+0xec>
 802288a:	602e      	str	r6, [r5, #0]
 802288c:	2000      	movs	r0, #0
 802288e:	e01e      	b.n	80228ce <__sflush_r+0xfa>
 8022890:	690e      	ldr	r6, [r1, #16]
 8022892:	2e00      	cmp	r6, #0
 8022894:	d0fa      	beq.n	802288c <__sflush_r+0xb8>
 8022896:	680f      	ldr	r7, [r1, #0]
 8022898:	600e      	str	r6, [r1, #0]
 802289a:	1bba      	subs	r2, r7, r6
 802289c:	9201      	str	r2, [sp, #4]
 802289e:	2200      	movs	r2, #0
 80228a0:	079b      	lsls	r3, r3, #30
 80228a2:	d100      	bne.n	80228a6 <__sflush_r+0xd2>
 80228a4:	694a      	ldr	r2, [r1, #20]
 80228a6:	60a2      	str	r2, [r4, #8]
 80228a8:	9b01      	ldr	r3, [sp, #4]
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	ddee      	ble.n	802288c <__sflush_r+0xb8>
 80228ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80228b0:	0032      	movs	r2, r6
 80228b2:	001f      	movs	r7, r3
 80228b4:	0028      	movs	r0, r5
 80228b6:	9b01      	ldr	r3, [sp, #4]
 80228b8:	6a21      	ldr	r1, [r4, #32]
 80228ba:	47b8      	blx	r7
 80228bc:	2800      	cmp	r0, #0
 80228be:	dc07      	bgt.n	80228d0 <__sflush_r+0xfc>
 80228c0:	89a2      	ldrh	r2, [r4, #12]
 80228c2:	2340      	movs	r3, #64	@ 0x40
 80228c4:	2001      	movs	r0, #1
 80228c6:	4313      	orrs	r3, r2
 80228c8:	b21b      	sxth	r3, r3
 80228ca:	81a3      	strh	r3, [r4, #12]
 80228cc:	4240      	negs	r0, r0
 80228ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80228d0:	9b01      	ldr	r3, [sp, #4]
 80228d2:	1836      	adds	r6, r6, r0
 80228d4:	1a1b      	subs	r3, r3, r0
 80228d6:	9301      	str	r3, [sp, #4]
 80228d8:	e7e6      	b.n	80228a8 <__sflush_r+0xd4>
 80228da:	46c0      	nop			@ (mov r8, r8)
 80228dc:	dfbffffe 	.word	0xdfbffffe

080228e0 <_fflush_r>:
 80228e0:	690b      	ldr	r3, [r1, #16]
 80228e2:	b570      	push	{r4, r5, r6, lr}
 80228e4:	0005      	movs	r5, r0
 80228e6:	000c      	movs	r4, r1
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d102      	bne.n	80228f2 <_fflush_r+0x12>
 80228ec:	2500      	movs	r5, #0
 80228ee:	0028      	movs	r0, r5
 80228f0:	bd70      	pop	{r4, r5, r6, pc}
 80228f2:	2800      	cmp	r0, #0
 80228f4:	d004      	beq.n	8022900 <_fflush_r+0x20>
 80228f6:	6a03      	ldr	r3, [r0, #32]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d101      	bne.n	8022900 <_fflush_r+0x20>
 80228fc:	f7fd fa28 	bl	801fd50 <__sinit>
 8022900:	220c      	movs	r2, #12
 8022902:	5ea3      	ldrsh	r3, [r4, r2]
 8022904:	2b00      	cmp	r3, #0
 8022906:	d0f1      	beq.n	80228ec <_fflush_r+0xc>
 8022908:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802290a:	07d2      	lsls	r2, r2, #31
 802290c:	d404      	bmi.n	8022918 <_fflush_r+0x38>
 802290e:	059b      	lsls	r3, r3, #22
 8022910:	d402      	bmi.n	8022918 <_fflush_r+0x38>
 8022912:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022914:	f7fd fcd3 	bl	80202be <__retarget_lock_acquire_recursive>
 8022918:	0028      	movs	r0, r5
 802291a:	0021      	movs	r1, r4
 802291c:	f7ff ff5a 	bl	80227d4 <__sflush_r>
 8022920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022922:	0005      	movs	r5, r0
 8022924:	07db      	lsls	r3, r3, #31
 8022926:	d4e2      	bmi.n	80228ee <_fflush_r+0xe>
 8022928:	89a3      	ldrh	r3, [r4, #12]
 802292a:	059b      	lsls	r3, r3, #22
 802292c:	d4df      	bmi.n	80228ee <_fflush_r+0xe>
 802292e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022930:	f7fd fcc6 	bl	80202c0 <__retarget_lock_release_recursive>
 8022934:	e7db      	b.n	80228ee <_fflush_r+0xe>
	...

08022938 <__swhatbuf_r>:
 8022938:	b570      	push	{r4, r5, r6, lr}
 802293a:	000e      	movs	r6, r1
 802293c:	001d      	movs	r5, r3
 802293e:	230e      	movs	r3, #14
 8022940:	5ec9      	ldrsh	r1, [r1, r3]
 8022942:	0014      	movs	r4, r2
 8022944:	b096      	sub	sp, #88	@ 0x58
 8022946:	2900      	cmp	r1, #0
 8022948:	da0c      	bge.n	8022964 <__swhatbuf_r+0x2c>
 802294a:	89b2      	ldrh	r2, [r6, #12]
 802294c:	2380      	movs	r3, #128	@ 0x80
 802294e:	0011      	movs	r1, r2
 8022950:	4019      	ands	r1, r3
 8022952:	421a      	tst	r2, r3
 8022954:	d114      	bne.n	8022980 <__swhatbuf_r+0x48>
 8022956:	2380      	movs	r3, #128	@ 0x80
 8022958:	00db      	lsls	r3, r3, #3
 802295a:	2000      	movs	r0, #0
 802295c:	6029      	str	r1, [r5, #0]
 802295e:	6023      	str	r3, [r4, #0]
 8022960:	b016      	add	sp, #88	@ 0x58
 8022962:	bd70      	pop	{r4, r5, r6, pc}
 8022964:	466a      	mov	r2, sp
 8022966:	f000 f865 	bl	8022a34 <_fstat_r>
 802296a:	2800      	cmp	r0, #0
 802296c:	dbed      	blt.n	802294a <__swhatbuf_r+0x12>
 802296e:	23f0      	movs	r3, #240	@ 0xf0
 8022970:	9901      	ldr	r1, [sp, #4]
 8022972:	021b      	lsls	r3, r3, #8
 8022974:	4019      	ands	r1, r3
 8022976:	4b04      	ldr	r3, [pc, #16]	@ (8022988 <__swhatbuf_r+0x50>)
 8022978:	18c9      	adds	r1, r1, r3
 802297a:	424b      	negs	r3, r1
 802297c:	4159      	adcs	r1, r3
 802297e:	e7ea      	b.n	8022956 <__swhatbuf_r+0x1e>
 8022980:	2100      	movs	r1, #0
 8022982:	2340      	movs	r3, #64	@ 0x40
 8022984:	e7e9      	b.n	802295a <__swhatbuf_r+0x22>
 8022986:	46c0      	nop			@ (mov r8, r8)
 8022988:	ffffe000 	.word	0xffffe000

0802298c <__smakebuf_r>:
 802298c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802298e:	2602      	movs	r6, #2
 8022990:	898b      	ldrh	r3, [r1, #12]
 8022992:	0005      	movs	r5, r0
 8022994:	000c      	movs	r4, r1
 8022996:	b085      	sub	sp, #20
 8022998:	4233      	tst	r3, r6
 802299a:	d007      	beq.n	80229ac <__smakebuf_r+0x20>
 802299c:	0023      	movs	r3, r4
 802299e:	3347      	adds	r3, #71	@ 0x47
 80229a0:	6023      	str	r3, [r4, #0]
 80229a2:	6123      	str	r3, [r4, #16]
 80229a4:	2301      	movs	r3, #1
 80229a6:	6163      	str	r3, [r4, #20]
 80229a8:	b005      	add	sp, #20
 80229aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80229ac:	ab03      	add	r3, sp, #12
 80229ae:	aa02      	add	r2, sp, #8
 80229b0:	f7ff ffc2 	bl	8022938 <__swhatbuf_r>
 80229b4:	9f02      	ldr	r7, [sp, #8]
 80229b6:	9001      	str	r0, [sp, #4]
 80229b8:	0039      	movs	r1, r7
 80229ba:	0028      	movs	r0, r5
 80229bc:	f7fe feee 	bl	802179c <_malloc_r>
 80229c0:	2800      	cmp	r0, #0
 80229c2:	d108      	bne.n	80229d6 <__smakebuf_r+0x4a>
 80229c4:	220c      	movs	r2, #12
 80229c6:	5ea3      	ldrsh	r3, [r4, r2]
 80229c8:	059a      	lsls	r2, r3, #22
 80229ca:	d4ed      	bmi.n	80229a8 <__smakebuf_r+0x1c>
 80229cc:	2203      	movs	r2, #3
 80229ce:	4393      	bics	r3, r2
 80229d0:	431e      	orrs	r6, r3
 80229d2:	81a6      	strh	r6, [r4, #12]
 80229d4:	e7e2      	b.n	802299c <__smakebuf_r+0x10>
 80229d6:	2380      	movs	r3, #128	@ 0x80
 80229d8:	89a2      	ldrh	r2, [r4, #12]
 80229da:	6020      	str	r0, [r4, #0]
 80229dc:	4313      	orrs	r3, r2
 80229de:	81a3      	strh	r3, [r4, #12]
 80229e0:	9b03      	ldr	r3, [sp, #12]
 80229e2:	6120      	str	r0, [r4, #16]
 80229e4:	6167      	str	r7, [r4, #20]
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	d00c      	beq.n	8022a04 <__smakebuf_r+0x78>
 80229ea:	0028      	movs	r0, r5
 80229ec:	230e      	movs	r3, #14
 80229ee:	5ee1      	ldrsh	r1, [r4, r3]
 80229f0:	f000 f832 	bl	8022a58 <_isatty_r>
 80229f4:	2800      	cmp	r0, #0
 80229f6:	d005      	beq.n	8022a04 <__smakebuf_r+0x78>
 80229f8:	2303      	movs	r3, #3
 80229fa:	89a2      	ldrh	r2, [r4, #12]
 80229fc:	439a      	bics	r2, r3
 80229fe:	3b02      	subs	r3, #2
 8022a00:	4313      	orrs	r3, r2
 8022a02:	81a3      	strh	r3, [r4, #12]
 8022a04:	89a3      	ldrh	r3, [r4, #12]
 8022a06:	9a01      	ldr	r2, [sp, #4]
 8022a08:	4313      	orrs	r3, r2
 8022a0a:	81a3      	strh	r3, [r4, #12]
 8022a0c:	e7cc      	b.n	80229a8 <__smakebuf_r+0x1c>

08022a0e <memmove>:
 8022a0e:	b510      	push	{r4, lr}
 8022a10:	4288      	cmp	r0, r1
 8022a12:	d806      	bhi.n	8022a22 <memmove+0x14>
 8022a14:	2300      	movs	r3, #0
 8022a16:	429a      	cmp	r2, r3
 8022a18:	d008      	beq.n	8022a2c <memmove+0x1e>
 8022a1a:	5ccc      	ldrb	r4, [r1, r3]
 8022a1c:	54c4      	strb	r4, [r0, r3]
 8022a1e:	3301      	adds	r3, #1
 8022a20:	e7f9      	b.n	8022a16 <memmove+0x8>
 8022a22:	188b      	adds	r3, r1, r2
 8022a24:	4298      	cmp	r0, r3
 8022a26:	d2f5      	bcs.n	8022a14 <memmove+0x6>
 8022a28:	3a01      	subs	r2, #1
 8022a2a:	d200      	bcs.n	8022a2e <memmove+0x20>
 8022a2c:	bd10      	pop	{r4, pc}
 8022a2e:	5c8b      	ldrb	r3, [r1, r2]
 8022a30:	5483      	strb	r3, [r0, r2]
 8022a32:	e7f9      	b.n	8022a28 <memmove+0x1a>

08022a34 <_fstat_r>:
 8022a34:	2300      	movs	r3, #0
 8022a36:	b570      	push	{r4, r5, r6, lr}
 8022a38:	4d06      	ldr	r5, [pc, #24]	@ (8022a54 <_fstat_r+0x20>)
 8022a3a:	0004      	movs	r4, r0
 8022a3c:	0008      	movs	r0, r1
 8022a3e:	0011      	movs	r1, r2
 8022a40:	602b      	str	r3, [r5, #0]
 8022a42:	f7eb f877 	bl	800db34 <_fstat>
 8022a46:	1c43      	adds	r3, r0, #1
 8022a48:	d103      	bne.n	8022a52 <_fstat_r+0x1e>
 8022a4a:	682b      	ldr	r3, [r5, #0]
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	d000      	beq.n	8022a52 <_fstat_r+0x1e>
 8022a50:	6023      	str	r3, [r4, #0]
 8022a52:	bd70      	pop	{r4, r5, r6, pc}
 8022a54:	2000379c 	.word	0x2000379c

08022a58 <_isatty_r>:
 8022a58:	2300      	movs	r3, #0
 8022a5a:	b570      	push	{r4, r5, r6, lr}
 8022a5c:	4d06      	ldr	r5, [pc, #24]	@ (8022a78 <_isatty_r+0x20>)
 8022a5e:	0004      	movs	r4, r0
 8022a60:	0008      	movs	r0, r1
 8022a62:	602b      	str	r3, [r5, #0]
 8022a64:	f7eb f874 	bl	800db50 <_isatty>
 8022a68:	1c43      	adds	r3, r0, #1
 8022a6a:	d103      	bne.n	8022a74 <_isatty_r+0x1c>
 8022a6c:	682b      	ldr	r3, [r5, #0]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d000      	beq.n	8022a74 <_isatty_r+0x1c>
 8022a72:	6023      	str	r3, [r4, #0]
 8022a74:	bd70      	pop	{r4, r5, r6, pc}
 8022a76:	46c0      	nop			@ (mov r8, r8)
 8022a78:	2000379c 	.word	0x2000379c

08022a7c <_sbrk_r>:
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	b570      	push	{r4, r5, r6, lr}
 8022a80:	4d06      	ldr	r5, [pc, #24]	@ (8022a9c <_sbrk_r+0x20>)
 8022a82:	0004      	movs	r4, r0
 8022a84:	0008      	movs	r0, r1
 8022a86:	602b      	str	r3, [r5, #0]
 8022a88:	f7eb f876 	bl	800db78 <_sbrk>
 8022a8c:	1c43      	adds	r3, r0, #1
 8022a8e:	d103      	bne.n	8022a98 <_sbrk_r+0x1c>
 8022a90:	682b      	ldr	r3, [r5, #0]
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d000      	beq.n	8022a98 <_sbrk_r+0x1c>
 8022a96:	6023      	str	r3, [r4, #0]
 8022a98:	bd70      	pop	{r4, r5, r6, pc}
 8022a9a:	46c0      	nop			@ (mov r8, r8)
 8022a9c:	2000379c 	.word	0x2000379c

08022aa0 <__assert_func>:
 8022aa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022aa2:	0014      	movs	r4, r2
 8022aa4:	001a      	movs	r2, r3
 8022aa6:	4b09      	ldr	r3, [pc, #36]	@ (8022acc <__assert_func+0x2c>)
 8022aa8:	0005      	movs	r5, r0
 8022aaa:	681b      	ldr	r3, [r3, #0]
 8022aac:	000e      	movs	r6, r1
 8022aae:	68d8      	ldr	r0, [r3, #12]
 8022ab0:	4b07      	ldr	r3, [pc, #28]	@ (8022ad0 <__assert_func+0x30>)
 8022ab2:	2c00      	cmp	r4, #0
 8022ab4:	d101      	bne.n	8022aba <__assert_func+0x1a>
 8022ab6:	4b07      	ldr	r3, [pc, #28]	@ (8022ad4 <__assert_func+0x34>)
 8022ab8:	001c      	movs	r4, r3
 8022aba:	4907      	ldr	r1, [pc, #28]	@ (8022ad8 <__assert_func+0x38>)
 8022abc:	9301      	str	r3, [sp, #4]
 8022abe:	9402      	str	r4, [sp, #8]
 8022ac0:	002b      	movs	r3, r5
 8022ac2:	9600      	str	r6, [sp, #0]
 8022ac4:	f000 f866 	bl	8022b94 <fiprintf>
 8022ac8:	f000 f874 	bl	8022bb4 <abort>
 8022acc:	200003c8 	.word	0x200003c8
 8022ad0:	08025eb9 	.word	0x08025eb9
 8022ad4:	08025ef4 	.word	0x08025ef4
 8022ad8:	08025ec6 	.word	0x08025ec6

08022adc <_calloc_r>:
 8022adc:	b570      	push	{r4, r5, r6, lr}
 8022ade:	0c0b      	lsrs	r3, r1, #16
 8022ae0:	0c15      	lsrs	r5, r2, #16
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d11e      	bne.n	8022b24 <_calloc_r+0x48>
 8022ae6:	2d00      	cmp	r5, #0
 8022ae8:	d10c      	bne.n	8022b04 <_calloc_r+0x28>
 8022aea:	b289      	uxth	r1, r1
 8022aec:	b294      	uxth	r4, r2
 8022aee:	434c      	muls	r4, r1
 8022af0:	0021      	movs	r1, r4
 8022af2:	f7fe fe53 	bl	802179c <_malloc_r>
 8022af6:	1e05      	subs	r5, r0, #0
 8022af8:	d01a      	beq.n	8022b30 <_calloc_r+0x54>
 8022afa:	0022      	movs	r2, r4
 8022afc:	2100      	movs	r1, #0
 8022afe:	f7fd fb0f 	bl	8020120 <memset>
 8022b02:	e016      	b.n	8022b32 <_calloc_r+0x56>
 8022b04:	1c2b      	adds	r3, r5, #0
 8022b06:	1c0c      	adds	r4, r1, #0
 8022b08:	b289      	uxth	r1, r1
 8022b0a:	b292      	uxth	r2, r2
 8022b0c:	434a      	muls	r2, r1
 8022b0e:	b29b      	uxth	r3, r3
 8022b10:	b2a1      	uxth	r1, r4
 8022b12:	4359      	muls	r1, r3
 8022b14:	0c14      	lsrs	r4, r2, #16
 8022b16:	190c      	adds	r4, r1, r4
 8022b18:	0c23      	lsrs	r3, r4, #16
 8022b1a:	d107      	bne.n	8022b2c <_calloc_r+0x50>
 8022b1c:	0424      	lsls	r4, r4, #16
 8022b1e:	b292      	uxth	r2, r2
 8022b20:	4314      	orrs	r4, r2
 8022b22:	e7e5      	b.n	8022af0 <_calloc_r+0x14>
 8022b24:	2d00      	cmp	r5, #0
 8022b26:	d101      	bne.n	8022b2c <_calloc_r+0x50>
 8022b28:	1c14      	adds	r4, r2, #0
 8022b2a:	e7ed      	b.n	8022b08 <_calloc_r+0x2c>
 8022b2c:	230c      	movs	r3, #12
 8022b2e:	6003      	str	r3, [r0, #0]
 8022b30:	2500      	movs	r5, #0
 8022b32:	0028      	movs	r0, r5
 8022b34:	bd70      	pop	{r4, r5, r6, pc}

08022b36 <_realloc_r>:
 8022b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022b38:	0006      	movs	r6, r0
 8022b3a:	000c      	movs	r4, r1
 8022b3c:	0015      	movs	r5, r2
 8022b3e:	2900      	cmp	r1, #0
 8022b40:	d105      	bne.n	8022b4e <_realloc_r+0x18>
 8022b42:	0011      	movs	r1, r2
 8022b44:	f7fe fe2a 	bl	802179c <_malloc_r>
 8022b48:	0004      	movs	r4, r0
 8022b4a:	0020      	movs	r0, r4
 8022b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022b4e:	2a00      	cmp	r2, #0
 8022b50:	d103      	bne.n	8022b5a <_realloc_r+0x24>
 8022b52:	f7fe fa53 	bl	8020ffc <_free_r>
 8022b56:	2400      	movs	r4, #0
 8022b58:	e7f7      	b.n	8022b4a <_realloc_r+0x14>
 8022b5a:	f000 f832 	bl	8022bc2 <_malloc_usable_size_r>
 8022b5e:	0007      	movs	r7, r0
 8022b60:	4285      	cmp	r5, r0
 8022b62:	d802      	bhi.n	8022b6a <_realloc_r+0x34>
 8022b64:	0843      	lsrs	r3, r0, #1
 8022b66:	42ab      	cmp	r3, r5
 8022b68:	d3ef      	bcc.n	8022b4a <_realloc_r+0x14>
 8022b6a:	0029      	movs	r1, r5
 8022b6c:	0030      	movs	r0, r6
 8022b6e:	f7fe fe15 	bl	802179c <_malloc_r>
 8022b72:	9001      	str	r0, [sp, #4]
 8022b74:	2800      	cmp	r0, #0
 8022b76:	d0ee      	beq.n	8022b56 <_realloc_r+0x20>
 8022b78:	002a      	movs	r2, r5
 8022b7a:	42bd      	cmp	r5, r7
 8022b7c:	d900      	bls.n	8022b80 <_realloc_r+0x4a>
 8022b7e:	003a      	movs	r2, r7
 8022b80:	0021      	movs	r1, r4
 8022b82:	9801      	ldr	r0, [sp, #4]
 8022b84:	f7fd fba8 	bl	80202d8 <memcpy>
 8022b88:	0021      	movs	r1, r4
 8022b8a:	0030      	movs	r0, r6
 8022b8c:	f7fe fa36 	bl	8020ffc <_free_r>
 8022b90:	9c01      	ldr	r4, [sp, #4]
 8022b92:	e7da      	b.n	8022b4a <_realloc_r+0x14>

08022b94 <fiprintf>:
 8022b94:	b40e      	push	{r1, r2, r3}
 8022b96:	b517      	push	{r0, r1, r2, r4, lr}
 8022b98:	4c05      	ldr	r4, [pc, #20]	@ (8022bb0 <fiprintf+0x1c>)
 8022b9a:	ab05      	add	r3, sp, #20
 8022b9c:	cb04      	ldmia	r3!, {r2}
 8022b9e:	0001      	movs	r1, r0
 8022ba0:	6820      	ldr	r0, [r4, #0]
 8022ba2:	9301      	str	r3, [sp, #4]
 8022ba4:	f7ff fcfa 	bl	802259c <_vfiprintf_r>
 8022ba8:	bc1e      	pop	{r1, r2, r3, r4}
 8022baa:	bc08      	pop	{r3}
 8022bac:	b003      	add	sp, #12
 8022bae:	4718      	bx	r3
 8022bb0:	200003c8 	.word	0x200003c8

08022bb4 <abort>:
 8022bb4:	2006      	movs	r0, #6
 8022bb6:	b510      	push	{r4, lr}
 8022bb8:	f000 f834 	bl	8022c24 <raise>
 8022bbc:	2001      	movs	r0, #1
 8022bbe:	f7ea ff85 	bl	800dacc <_exit>

08022bc2 <_malloc_usable_size_r>:
 8022bc2:	1f0b      	subs	r3, r1, #4
 8022bc4:	681b      	ldr	r3, [r3, #0]
 8022bc6:	1f18      	subs	r0, r3, #4
 8022bc8:	2b00      	cmp	r3, #0
 8022bca:	da01      	bge.n	8022bd0 <_malloc_usable_size_r+0xe>
 8022bcc:	580b      	ldr	r3, [r1, r0]
 8022bce:	18c0      	adds	r0, r0, r3
 8022bd0:	4770      	bx	lr

08022bd2 <_raise_r>:
 8022bd2:	b570      	push	{r4, r5, r6, lr}
 8022bd4:	0004      	movs	r4, r0
 8022bd6:	000d      	movs	r5, r1
 8022bd8:	291f      	cmp	r1, #31
 8022bda:	d904      	bls.n	8022be6 <_raise_r+0x14>
 8022bdc:	2316      	movs	r3, #22
 8022bde:	6003      	str	r3, [r0, #0]
 8022be0:	2001      	movs	r0, #1
 8022be2:	4240      	negs	r0, r0
 8022be4:	bd70      	pop	{r4, r5, r6, pc}
 8022be6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d004      	beq.n	8022bf6 <_raise_r+0x24>
 8022bec:	008a      	lsls	r2, r1, #2
 8022bee:	189b      	adds	r3, r3, r2
 8022bf0:	681a      	ldr	r2, [r3, #0]
 8022bf2:	2a00      	cmp	r2, #0
 8022bf4:	d108      	bne.n	8022c08 <_raise_r+0x36>
 8022bf6:	0020      	movs	r0, r4
 8022bf8:	f000 f830 	bl	8022c5c <_getpid_r>
 8022bfc:	002a      	movs	r2, r5
 8022bfe:	0001      	movs	r1, r0
 8022c00:	0020      	movs	r0, r4
 8022c02:	f000 f819 	bl	8022c38 <_kill_r>
 8022c06:	e7ed      	b.n	8022be4 <_raise_r+0x12>
 8022c08:	2a01      	cmp	r2, #1
 8022c0a:	d009      	beq.n	8022c20 <_raise_r+0x4e>
 8022c0c:	1c51      	adds	r1, r2, #1
 8022c0e:	d103      	bne.n	8022c18 <_raise_r+0x46>
 8022c10:	2316      	movs	r3, #22
 8022c12:	6003      	str	r3, [r0, #0]
 8022c14:	2001      	movs	r0, #1
 8022c16:	e7e5      	b.n	8022be4 <_raise_r+0x12>
 8022c18:	2100      	movs	r1, #0
 8022c1a:	0028      	movs	r0, r5
 8022c1c:	6019      	str	r1, [r3, #0]
 8022c1e:	4790      	blx	r2
 8022c20:	2000      	movs	r0, #0
 8022c22:	e7df      	b.n	8022be4 <_raise_r+0x12>

08022c24 <raise>:
 8022c24:	b510      	push	{r4, lr}
 8022c26:	4b03      	ldr	r3, [pc, #12]	@ (8022c34 <raise+0x10>)
 8022c28:	0001      	movs	r1, r0
 8022c2a:	6818      	ldr	r0, [r3, #0]
 8022c2c:	f7ff ffd1 	bl	8022bd2 <_raise_r>
 8022c30:	bd10      	pop	{r4, pc}
 8022c32:	46c0      	nop			@ (mov r8, r8)
 8022c34:	200003c8 	.word	0x200003c8

08022c38 <_kill_r>:
 8022c38:	2300      	movs	r3, #0
 8022c3a:	b570      	push	{r4, r5, r6, lr}
 8022c3c:	4d06      	ldr	r5, [pc, #24]	@ (8022c58 <_kill_r+0x20>)
 8022c3e:	0004      	movs	r4, r0
 8022c40:	0008      	movs	r0, r1
 8022c42:	0011      	movs	r1, r2
 8022c44:	602b      	str	r3, [r5, #0]
 8022c46:	f7ea ff31 	bl	800daac <_kill>
 8022c4a:	1c43      	adds	r3, r0, #1
 8022c4c:	d103      	bne.n	8022c56 <_kill_r+0x1e>
 8022c4e:	682b      	ldr	r3, [r5, #0]
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	d000      	beq.n	8022c56 <_kill_r+0x1e>
 8022c54:	6023      	str	r3, [r4, #0]
 8022c56:	bd70      	pop	{r4, r5, r6, pc}
 8022c58:	2000379c 	.word	0x2000379c

08022c5c <_getpid_r>:
 8022c5c:	b510      	push	{r4, lr}
 8022c5e:	f7ea ff1f 	bl	800daa0 <_getpid>
 8022c62:	bd10      	pop	{r4, pc}

08022c64 <expf>:
 8022c64:	b570      	push	{r4, r5, r6, lr}
 8022c66:	1c04      	adds	r4, r0, #0
 8022c68:	f000 f8e6 	bl	8022e38 <__ieee754_expf>
 8022c6c:	1c05      	adds	r5, r0, #0
 8022c6e:	1c20      	adds	r0, r4, #0
 8022c70:	f000 f83c 	bl	8022cec <finitef>
 8022c74:	2800      	cmp	r0, #0
 8022c76:	d00b      	beq.n	8022c90 <expf+0x2c>
 8022c78:	490c      	ldr	r1, [pc, #48]	@ (8022cac <expf+0x48>)
 8022c7a:	1c20      	adds	r0, r4, #0
 8022c7c:	f7dd fc6c 	bl	8000558 <__aeabi_fcmpgt>
 8022c80:	2800      	cmp	r0, #0
 8022c82:	d007      	beq.n	8022c94 <expf+0x30>
 8022c84:	f7fd faf0 	bl	8020268 <__errno>
 8022c88:	25ff      	movs	r5, #255	@ 0xff
 8022c8a:	2322      	movs	r3, #34	@ 0x22
 8022c8c:	05ed      	lsls	r5, r5, #23
 8022c8e:	6003      	str	r3, [r0, #0]
 8022c90:	1c28      	adds	r0, r5, #0
 8022c92:	bd70      	pop	{r4, r5, r6, pc}
 8022c94:	4906      	ldr	r1, [pc, #24]	@ (8022cb0 <expf+0x4c>)
 8022c96:	1c20      	adds	r0, r4, #0
 8022c98:	f7dd fc4a 	bl	8000530 <__aeabi_fcmplt>
 8022c9c:	2800      	cmp	r0, #0
 8022c9e:	d0f7      	beq.n	8022c90 <expf+0x2c>
 8022ca0:	f7fd fae2 	bl	8020268 <__errno>
 8022ca4:	2322      	movs	r3, #34	@ 0x22
 8022ca6:	2500      	movs	r5, #0
 8022ca8:	6003      	str	r3, [r0, #0]
 8022caa:	e7f1      	b.n	8022c90 <expf+0x2c>
 8022cac:	42b17217 	.word	0x42b17217
 8022cb0:	c2cff1b5 	.word	0xc2cff1b5

08022cb4 <sqrtf>:
 8022cb4:	b570      	push	{r4, r5, r6, lr}
 8022cb6:	1c05      	adds	r5, r0, #0
 8022cb8:	f000 f822 	bl	8022d00 <__ieee754_sqrtf>
 8022cbc:	1c29      	adds	r1, r5, #0
 8022cbe:	1c04      	adds	r4, r0, #0
 8022cc0:	1c28      	adds	r0, r5, #0
 8022cc2:	f7de fc4f 	bl	8001564 <__aeabi_fcmpun>
 8022cc6:	2800      	cmp	r0, #0
 8022cc8:	d10e      	bne.n	8022ce8 <sqrtf+0x34>
 8022cca:	2100      	movs	r1, #0
 8022ccc:	1c28      	adds	r0, r5, #0
 8022cce:	f7dd fc2f 	bl	8000530 <__aeabi_fcmplt>
 8022cd2:	2800      	cmp	r0, #0
 8022cd4:	d008      	beq.n	8022ce8 <sqrtf+0x34>
 8022cd6:	f7fd fac7 	bl	8020268 <__errno>
 8022cda:	2321      	movs	r3, #33	@ 0x21
 8022cdc:	2100      	movs	r1, #0
 8022cde:	6003      	str	r3, [r0, #0]
 8022ce0:	1c08      	adds	r0, r1, #0
 8022ce2:	f7dd ff77 	bl	8000bd4 <__aeabi_fdiv>
 8022ce6:	1c04      	adds	r4, r0, #0
 8022ce8:	1c20      	adds	r0, r4, #0
 8022cea:	bd70      	pop	{r4, r5, r6, pc}

08022cec <finitef>:
 8022cec:	22ff      	movs	r2, #255	@ 0xff
 8022cee:	0043      	lsls	r3, r0, #1
 8022cf0:	085b      	lsrs	r3, r3, #1
 8022cf2:	2001      	movs	r0, #1
 8022cf4:	05d2      	lsls	r2, r2, #23
 8022cf6:	4293      	cmp	r3, r2
 8022cf8:	db00      	blt.n	8022cfc <finitef+0x10>
 8022cfa:	2000      	movs	r0, #0
 8022cfc:	4770      	bx	lr
	...

08022d00 <__ieee754_sqrtf>:
 8022d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d02:	0003      	movs	r3, r0
 8022d04:	0042      	lsls	r2, r0, #1
 8022d06:	1c04      	adds	r4, r0, #0
 8022d08:	20ff      	movs	r0, #255	@ 0xff
 8022d0a:	0852      	lsrs	r2, r2, #1
 8022d0c:	05c0      	lsls	r0, r0, #23
 8022d0e:	4282      	cmp	r2, r0
 8022d10:	d30a      	bcc.n	8022d28 <__ieee754_sqrtf+0x28>
 8022d12:	1c21      	adds	r1, r4, #0
 8022d14:	1c20      	adds	r0, r4, #0
 8022d16:	f7de f943 	bl	8000fa0 <__aeabi_fmul>
 8022d1a:	1c01      	adds	r1, r0, #0
 8022d1c:	1c20      	adds	r0, r4, #0
 8022d1e:	f7dd fdcf 	bl	80008c0 <__aeabi_fadd>
 8022d22:	1c04      	adds	r4, r0, #0
 8022d24:	1c20      	adds	r0, r4, #0
 8022d26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022d28:	2a00      	cmp	r2, #0
 8022d2a:	d0fb      	beq.n	8022d24 <__ieee754_sqrtf+0x24>
 8022d2c:	2c00      	cmp	r4, #0
 8022d2e:	da07      	bge.n	8022d40 <__ieee754_sqrtf+0x40>
 8022d30:	1c21      	adds	r1, r4, #0
 8022d32:	1c20      	adds	r0, r4, #0
 8022d34:	f7de fa72 	bl	800121c <__aeabi_fsub>
 8022d38:	1c01      	adds	r1, r0, #0
 8022d3a:	f7dd ff4b 	bl	8000bd4 <__aeabi_fdiv>
 8022d3e:	e7f0      	b.n	8022d22 <__ieee754_sqrtf+0x22>
 8022d40:	0022      	movs	r2, r4
 8022d42:	15e1      	asrs	r1, r4, #23
 8022d44:	4002      	ands	r2, r0
 8022d46:	4204      	tst	r4, r0
 8022d48:	d046      	beq.n	8022dd8 <__ieee754_sqrtf+0xd8>
 8022d4a:	2280      	movs	r2, #128	@ 0x80
 8022d4c:	000f      	movs	r7, r1
 8022d4e:	025b      	lsls	r3, r3, #9
 8022d50:	0a5b      	lsrs	r3, r3, #9
 8022d52:	0412      	lsls	r2, r2, #16
 8022d54:	3f7f      	subs	r7, #127	@ 0x7f
 8022d56:	4313      	orrs	r3, r2
 8022d58:	07c9      	lsls	r1, r1, #31
 8022d5a:	d400      	bmi.n	8022d5e <__ieee754_sqrtf+0x5e>
 8022d5c:	005b      	lsls	r3, r3, #1
 8022d5e:	2400      	movs	r4, #0
 8022d60:	2180      	movs	r1, #128	@ 0x80
 8022d62:	2019      	movs	r0, #25
 8022d64:	0026      	movs	r6, r4
 8022d66:	107f      	asrs	r7, r7, #1
 8022d68:	005b      	lsls	r3, r3, #1
 8022d6a:	0449      	lsls	r1, r1, #17
 8022d6c:	1875      	adds	r5, r6, r1
 8022d6e:	001a      	movs	r2, r3
 8022d70:	429d      	cmp	r5, r3
 8022d72:	dc02      	bgt.n	8022d7a <__ieee754_sqrtf+0x7a>
 8022d74:	186e      	adds	r6, r5, r1
 8022d76:	1b5a      	subs	r2, r3, r5
 8022d78:	1864      	adds	r4, r4, r1
 8022d7a:	3801      	subs	r0, #1
 8022d7c:	0053      	lsls	r3, r2, #1
 8022d7e:	0849      	lsrs	r1, r1, #1
 8022d80:	2800      	cmp	r0, #0
 8022d82:	d1f3      	bne.n	8022d6c <__ieee754_sqrtf+0x6c>
 8022d84:	2a00      	cmp	r2, #0
 8022d86:	d019      	beq.n	8022dbc <__ieee754_sqrtf+0xbc>
 8022d88:	4d17      	ldr	r5, [pc, #92]	@ (8022de8 <__ieee754_sqrtf+0xe8>)
 8022d8a:	4e18      	ldr	r6, [pc, #96]	@ (8022dec <__ieee754_sqrtf+0xec>)
 8022d8c:	6828      	ldr	r0, [r5, #0]
 8022d8e:	6831      	ldr	r1, [r6, #0]
 8022d90:	682b      	ldr	r3, [r5, #0]
 8022d92:	9301      	str	r3, [sp, #4]
 8022d94:	f7de fa42 	bl	800121c <__aeabi_fsub>
 8022d98:	1c01      	adds	r1, r0, #0
 8022d9a:	9801      	ldr	r0, [sp, #4]
 8022d9c:	f7dd fbd2 	bl	8000544 <__aeabi_fcmple>
 8022da0:	2800      	cmp	r0, #0
 8022da2:	d00b      	beq.n	8022dbc <__ieee754_sqrtf+0xbc>
 8022da4:	6828      	ldr	r0, [r5, #0]
 8022da6:	6831      	ldr	r1, [r6, #0]
 8022da8:	f7dd fd8a 	bl	80008c0 <__aeabi_fadd>
 8022dac:	682d      	ldr	r5, [r5, #0]
 8022dae:	1c01      	adds	r1, r0, #0
 8022db0:	1c28      	adds	r0, r5, #0
 8022db2:	f7dd fbbd 	bl	8000530 <__aeabi_fcmplt>
 8022db6:	2800      	cmp	r0, #0
 8022db8:	d011      	beq.n	8022dde <__ieee754_sqrtf+0xde>
 8022dba:	3402      	adds	r4, #2
 8022dbc:	23fc      	movs	r3, #252	@ 0xfc
 8022dbe:	1064      	asrs	r4, r4, #1
 8022dc0:	059b      	lsls	r3, r3, #22
 8022dc2:	18e3      	adds	r3, r4, r3
 8022dc4:	05fc      	lsls	r4, r7, #23
 8022dc6:	18e4      	adds	r4, r4, r3
 8022dc8:	e7ac      	b.n	8022d24 <__ieee754_sqrtf+0x24>
 8022dca:	005b      	lsls	r3, r3, #1
 8022dcc:	3201      	adds	r2, #1
 8022dce:	4203      	tst	r3, r0
 8022dd0:	d0fb      	beq.n	8022dca <__ieee754_sqrtf+0xca>
 8022dd2:	3a01      	subs	r2, #1
 8022dd4:	1a89      	subs	r1, r1, r2
 8022dd6:	e7b8      	b.n	8022d4a <__ieee754_sqrtf+0x4a>
 8022dd8:	2080      	movs	r0, #128	@ 0x80
 8022dda:	0400      	lsls	r0, r0, #16
 8022ddc:	e7f7      	b.n	8022dce <__ieee754_sqrtf+0xce>
 8022dde:	2301      	movs	r3, #1
 8022de0:	3401      	adds	r4, #1
 8022de2:	439c      	bics	r4, r3
 8022de4:	e7ea      	b.n	8022dbc <__ieee754_sqrtf+0xbc>
 8022de6:	46c0      	nop			@ (mov r8, r8)
 8022de8:	2000041c 	.word	0x2000041c
 8022dec:	20000418 	.word	0x20000418

08022df0 <roundf>:
 8022df0:	0dc3      	lsrs	r3, r0, #23
 8022df2:	b2db      	uxtb	r3, r3
 8022df4:	3b7f      	subs	r3, #127	@ 0x7f
 8022df6:	0002      	movs	r2, r0
 8022df8:	b510      	push	{r4, lr}
 8022dfa:	2b16      	cmp	r3, #22
 8022dfc:	dc13      	bgt.n	8022e26 <roundf+0x36>
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	da07      	bge.n	8022e12 <roundf+0x22>
 8022e02:	0fc2      	lsrs	r2, r0, #31
 8022e04:	07d0      	lsls	r0, r2, #31
 8022e06:	3301      	adds	r3, #1
 8022e08:	d102      	bne.n	8022e10 <roundf+0x20>
 8022e0a:	23fe      	movs	r3, #254	@ 0xfe
 8022e0c:	059b      	lsls	r3, r3, #22
 8022e0e:	4318      	orrs	r0, r3
 8022e10:	bd10      	pop	{r4, pc}
 8022e12:	4908      	ldr	r1, [pc, #32]	@ (8022e34 <roundf+0x44>)
 8022e14:	4119      	asrs	r1, r3
 8022e16:	4208      	tst	r0, r1
 8022e18:	d0fa      	beq.n	8022e10 <roundf+0x20>
 8022e1a:	2080      	movs	r0, #128	@ 0x80
 8022e1c:	03c0      	lsls	r0, r0, #15
 8022e1e:	4118      	asrs	r0, r3
 8022e20:	1880      	adds	r0, r0, r2
 8022e22:	4388      	bics	r0, r1
 8022e24:	e7f4      	b.n	8022e10 <roundf+0x20>
 8022e26:	2b80      	cmp	r3, #128	@ 0x80
 8022e28:	d1f2      	bne.n	8022e10 <roundf+0x20>
 8022e2a:	1c01      	adds	r1, r0, #0
 8022e2c:	f7dd fd48 	bl	80008c0 <__aeabi_fadd>
 8022e30:	e7ee      	b.n	8022e10 <roundf+0x20>
 8022e32:	46c0      	nop			@ (mov r8, r8)
 8022e34:	007fffff 	.word	0x007fffff

08022e38 <__ieee754_expf>:
 8022e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022e3a:	21ff      	movs	r1, #255	@ 0xff
 8022e3c:	0043      	lsls	r3, r0, #1
 8022e3e:	1c04      	adds	r4, r0, #0
 8022e40:	085b      	lsrs	r3, r3, #1
 8022e42:	05c9      	lsls	r1, r1, #23
 8022e44:	428b      	cmp	r3, r1
 8022e46:	d904      	bls.n	8022e52 <__ieee754_expf+0x1a>
 8022e48:	1c01      	adds	r1, r0, #0
 8022e4a:	1c20      	adds	r0, r4, #0
 8022e4c:	f7dd fd38 	bl	80008c0 <__aeabi_fadd>
 8022e50:	e00d      	b.n	8022e6e <__ieee754_expf+0x36>
 8022e52:	0fc6      	lsrs	r6, r0, #31
 8022e54:	428b      	cmp	r3, r1
 8022e56:	d104      	bne.n	8022e62 <__ieee754_expf+0x2a>
 8022e58:	2e00      	cmp	r6, #0
 8022e5a:	d000      	beq.n	8022e5e <__ieee754_expf+0x26>
 8022e5c:	e0ba      	b.n	8022fd4 <__ieee754_expf+0x19c>
 8022e5e:	1c20      	adds	r0, r4, #0
 8022e60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022e62:	495d      	ldr	r1, [pc, #372]	@ (8022fd8 <__ieee754_expf+0x1a0>)
 8022e64:	4288      	cmp	r0, r1
 8022e66:	dd04      	ble.n	8022e72 <__ieee754_expf+0x3a>
 8022e68:	2000      	movs	r0, #0
 8022e6a:	f000 f8f1 	bl	8023050 <__math_oflowf>
 8022e6e:	1c04      	adds	r4, r0, #0
 8022e70:	e7f5      	b.n	8022e5e <__ieee754_expf+0x26>
 8022e72:	2800      	cmp	r0, #0
 8022e74:	da06      	bge.n	8022e84 <__ieee754_expf+0x4c>
 8022e76:	4a59      	ldr	r2, [pc, #356]	@ (8022fdc <__ieee754_expf+0x1a4>)
 8022e78:	4293      	cmp	r3, r2
 8022e7a:	d903      	bls.n	8022e84 <__ieee754_expf+0x4c>
 8022e7c:	2000      	movs	r0, #0
 8022e7e:	f000 f8e1 	bl	8023044 <__math_uflowf>
 8022e82:	e7f4      	b.n	8022e6e <__ieee754_expf+0x36>
 8022e84:	4a56      	ldr	r2, [pc, #344]	@ (8022fe0 <__ieee754_expf+0x1a8>)
 8022e86:	4293      	cmp	r3, r2
 8022e88:	d96e      	bls.n	8022f68 <__ieee754_expf+0x130>
 8022e8a:	4a56      	ldr	r2, [pc, #344]	@ (8022fe4 <__ieee754_expf+0x1ac>)
 8022e8c:	00b5      	lsls	r5, r6, #2
 8022e8e:	4293      	cmp	r3, r2
 8022e90:	d84e      	bhi.n	8022f30 <__ieee754_expf+0xf8>
 8022e92:	4b55      	ldr	r3, [pc, #340]	@ (8022fe8 <__ieee754_expf+0x1b0>)
 8022e94:	1c20      	adds	r0, r4, #0
 8022e96:	5959      	ldr	r1, [r3, r5]
 8022e98:	f7de f9c0 	bl	800121c <__aeabi_fsub>
 8022e9c:	4b53      	ldr	r3, [pc, #332]	@ (8022fec <__ieee754_expf+0x1b4>)
 8022e9e:	1c07      	adds	r7, r0, #0
 8022ea0:	595b      	ldr	r3, [r3, r5]
 8022ea2:	2501      	movs	r5, #1
 8022ea4:	1bad      	subs	r5, r5, r6
 8022ea6:	9300      	str	r3, [sp, #0]
 8022ea8:	1bad      	subs	r5, r5, r6
 8022eaa:	9900      	ldr	r1, [sp, #0]
 8022eac:	1c38      	adds	r0, r7, #0
 8022eae:	f7de f9b5 	bl	800121c <__aeabi_fsub>
 8022eb2:	1c04      	adds	r4, r0, #0
 8022eb4:	1c21      	adds	r1, r4, #0
 8022eb6:	1c20      	adds	r0, r4, #0
 8022eb8:	f7de f872 	bl	8000fa0 <__aeabi_fmul>
 8022ebc:	494c      	ldr	r1, [pc, #304]	@ (8022ff0 <__ieee754_expf+0x1b8>)
 8022ebe:	1c06      	adds	r6, r0, #0
 8022ec0:	f7de f86e 	bl	8000fa0 <__aeabi_fmul>
 8022ec4:	494b      	ldr	r1, [pc, #300]	@ (8022ff4 <__ieee754_expf+0x1bc>)
 8022ec6:	f7de f9a9 	bl	800121c <__aeabi_fsub>
 8022eca:	1c31      	adds	r1, r6, #0
 8022ecc:	f7de f868 	bl	8000fa0 <__aeabi_fmul>
 8022ed0:	4949      	ldr	r1, [pc, #292]	@ (8022ff8 <__ieee754_expf+0x1c0>)
 8022ed2:	f7dd fcf5 	bl	80008c0 <__aeabi_fadd>
 8022ed6:	1c31      	adds	r1, r6, #0
 8022ed8:	f7de f862 	bl	8000fa0 <__aeabi_fmul>
 8022edc:	4947      	ldr	r1, [pc, #284]	@ (8022ffc <__ieee754_expf+0x1c4>)
 8022ede:	f7de f99d 	bl	800121c <__aeabi_fsub>
 8022ee2:	1c31      	adds	r1, r6, #0
 8022ee4:	f7de f85c 	bl	8000fa0 <__aeabi_fmul>
 8022ee8:	4945      	ldr	r1, [pc, #276]	@ (8023000 <__ieee754_expf+0x1c8>)
 8022eea:	f7dd fce9 	bl	80008c0 <__aeabi_fadd>
 8022eee:	1c31      	adds	r1, r6, #0
 8022ef0:	f7de f856 	bl	8000fa0 <__aeabi_fmul>
 8022ef4:	1c01      	adds	r1, r0, #0
 8022ef6:	1c20      	adds	r0, r4, #0
 8022ef8:	f7de f990 	bl	800121c <__aeabi_fsub>
 8022efc:	1c01      	adds	r1, r0, #0
 8022efe:	1c06      	adds	r6, r0, #0
 8022f00:	1c20      	adds	r0, r4, #0
 8022f02:	f7de f84d 	bl	8000fa0 <__aeabi_fmul>
 8022f06:	9001      	str	r0, [sp, #4]
 8022f08:	2d00      	cmp	r5, #0
 8022f0a:	d140      	bne.n	8022f8e <__ieee754_expf+0x156>
 8022f0c:	2180      	movs	r1, #128	@ 0x80
 8022f0e:	1c30      	adds	r0, r6, #0
 8022f10:	05c9      	lsls	r1, r1, #23
 8022f12:	f7de f983 	bl	800121c <__aeabi_fsub>
 8022f16:	1c01      	adds	r1, r0, #0
 8022f18:	9801      	ldr	r0, [sp, #4]
 8022f1a:	f7dd fe5b 	bl	8000bd4 <__aeabi_fdiv>
 8022f1e:	1c21      	adds	r1, r4, #0
 8022f20:	f7de f97c 	bl	800121c <__aeabi_fsub>
 8022f24:	1c01      	adds	r1, r0, #0
 8022f26:	20fe      	movs	r0, #254	@ 0xfe
 8022f28:	0580      	lsls	r0, r0, #22
 8022f2a:	f7de f977 	bl	800121c <__aeabi_fsub>
 8022f2e:	e79e      	b.n	8022e6e <__ieee754_expf+0x36>
 8022f30:	4934      	ldr	r1, [pc, #208]	@ (8023004 <__ieee754_expf+0x1cc>)
 8022f32:	1c20      	adds	r0, r4, #0
 8022f34:	f7de f834 	bl	8000fa0 <__aeabi_fmul>
 8022f38:	4b33      	ldr	r3, [pc, #204]	@ (8023008 <__ieee754_expf+0x1d0>)
 8022f3a:	5959      	ldr	r1, [r3, r5]
 8022f3c:	f7dd fcc0 	bl	80008c0 <__aeabi_fadd>
 8022f40:	f7de fb26 	bl	8001590 <__aeabi_f2iz>
 8022f44:	0005      	movs	r5, r0
 8022f46:	f7de fb43 	bl	80015d0 <__aeabi_i2f>
 8022f4a:	4930      	ldr	r1, [pc, #192]	@ (802300c <__ieee754_expf+0x1d4>)
 8022f4c:	1c06      	adds	r6, r0, #0
 8022f4e:	f7de f827 	bl	8000fa0 <__aeabi_fmul>
 8022f52:	1c01      	adds	r1, r0, #0
 8022f54:	1c20      	adds	r0, r4, #0
 8022f56:	f7de f961 	bl	800121c <__aeabi_fsub>
 8022f5a:	492d      	ldr	r1, [pc, #180]	@ (8023010 <__ieee754_expf+0x1d8>)
 8022f5c:	1c07      	adds	r7, r0, #0
 8022f5e:	1c30      	adds	r0, r6, #0
 8022f60:	f7de f81e 	bl	8000fa0 <__aeabi_fmul>
 8022f64:	9000      	str	r0, [sp, #0]
 8022f66:	e7a0      	b.n	8022eaa <__ieee754_expf+0x72>
 8022f68:	22d0      	movs	r2, #208	@ 0xd0
 8022f6a:	0592      	lsls	r2, r2, #22
 8022f6c:	4293      	cmp	r3, r2
 8022f6e:	d20c      	bcs.n	8022f8a <__ieee754_expf+0x152>
 8022f70:	4928      	ldr	r1, [pc, #160]	@ (8023014 <__ieee754_expf+0x1dc>)
 8022f72:	1c20      	adds	r0, r4, #0
 8022f74:	f7dd fca4 	bl	80008c0 <__aeabi_fadd>
 8022f78:	21fe      	movs	r1, #254	@ 0xfe
 8022f7a:	0589      	lsls	r1, r1, #22
 8022f7c:	f7dd faec 	bl	8000558 <__aeabi_fcmpgt>
 8022f80:	1e05      	subs	r5, r0, #0
 8022f82:	d097      	beq.n	8022eb4 <__ieee754_expf+0x7c>
 8022f84:	21fe      	movs	r1, #254	@ 0xfe
 8022f86:	0589      	lsls	r1, r1, #22
 8022f88:	e75f      	b.n	8022e4a <__ieee754_expf+0x12>
 8022f8a:	2500      	movs	r5, #0
 8022f8c:	e792      	b.n	8022eb4 <__ieee754_expf+0x7c>
 8022f8e:	2080      	movs	r0, #128	@ 0x80
 8022f90:	1c31      	adds	r1, r6, #0
 8022f92:	05c0      	lsls	r0, r0, #23
 8022f94:	f7de f942 	bl	800121c <__aeabi_fsub>
 8022f98:	1c01      	adds	r1, r0, #0
 8022f9a:	9801      	ldr	r0, [sp, #4]
 8022f9c:	f7dd fe1a 	bl	8000bd4 <__aeabi_fdiv>
 8022fa0:	1c01      	adds	r1, r0, #0
 8022fa2:	9800      	ldr	r0, [sp, #0]
 8022fa4:	f7de f93a 	bl	800121c <__aeabi_fsub>
 8022fa8:	1c39      	adds	r1, r7, #0
 8022faa:	f7de f937 	bl	800121c <__aeabi_fsub>
 8022fae:	1c01      	adds	r1, r0, #0
 8022fb0:	20fe      	movs	r0, #254	@ 0xfe
 8022fb2:	0580      	lsls	r0, r0, #22
 8022fb4:	f7de f932 	bl	800121c <__aeabi_fsub>
 8022fb8:	002b      	movs	r3, r5
 8022fba:	337d      	adds	r3, #125	@ 0x7d
 8022fbc:	db02      	blt.n	8022fc4 <__ieee754_expf+0x18c>
 8022fbe:	05ec      	lsls	r4, r5, #23
 8022fc0:	1824      	adds	r4, r4, r0
 8022fc2:	e74c      	b.n	8022e5e <__ieee754_expf+0x26>
 8022fc4:	21d8      	movs	r1, #216	@ 0xd8
 8022fc6:	3564      	adds	r5, #100	@ 0x64
 8022fc8:	05ed      	lsls	r5, r5, #23
 8022fca:	1828      	adds	r0, r5, r0
 8022fcc:	0509      	lsls	r1, r1, #20
 8022fce:	f7dd ffe7 	bl	8000fa0 <__aeabi_fmul>
 8022fd2:	e74c      	b.n	8022e6e <__ieee754_expf+0x36>
 8022fd4:	2400      	movs	r4, #0
 8022fd6:	e742      	b.n	8022e5e <__ieee754_expf+0x26>
 8022fd8:	42b17217 	.word	0x42b17217
 8022fdc:	42cff1b5 	.word	0x42cff1b5
 8022fe0:	3eb17218 	.word	0x3eb17218
 8022fe4:	3f851591 	.word	0x3f851591
 8022fe8:	08025f00 	.word	0x08025f00
 8022fec:	08025ef8 	.word	0x08025ef8
 8022ff0:	3331bb4c 	.word	0x3331bb4c
 8022ff4:	35ddea0e 	.word	0x35ddea0e
 8022ff8:	388ab355 	.word	0x388ab355
 8022ffc:	3b360b61 	.word	0x3b360b61
 8023000:	3e2aaaab 	.word	0x3e2aaaab
 8023004:	3fb8aa3b 	.word	0x3fb8aa3b
 8023008:	08025f08 	.word	0x08025f08
 802300c:	3f317180 	.word	0x3f317180
 8023010:	3717f7d1 	.word	0x3717f7d1
 8023014:	7149f2ca 	.word	0x7149f2ca

08023018 <with_errnof>:
 8023018:	b570      	push	{r4, r5, r6, lr}
 802301a:	000d      	movs	r5, r1
 802301c:	1c04      	adds	r4, r0, #0
 802301e:	f7fd f923 	bl	8020268 <__errno>
 8023022:	6005      	str	r5, [r0, #0]
 8023024:	1c20      	adds	r0, r4, #0
 8023026:	bd70      	pop	{r4, r5, r6, pc}

08023028 <xflowf>:
 8023028:	b510      	push	{r4, lr}
 802302a:	1c0b      	adds	r3, r1, #0
 802302c:	2800      	cmp	r0, #0
 802302e:	d002      	beq.n	8023036 <xflowf+0xe>
 8023030:	2380      	movs	r3, #128	@ 0x80
 8023032:	061b      	lsls	r3, r3, #24
 8023034:	18cb      	adds	r3, r1, r3
 8023036:	1c18      	adds	r0, r3, #0
 8023038:	f7dd ffb2 	bl	8000fa0 <__aeabi_fmul>
 802303c:	2122      	movs	r1, #34	@ 0x22
 802303e:	f7ff ffeb 	bl	8023018 <with_errnof>
 8023042:	bd10      	pop	{r4, pc}

08023044 <__math_uflowf>:
 8023044:	2180      	movs	r1, #128	@ 0x80
 8023046:	b510      	push	{r4, lr}
 8023048:	0549      	lsls	r1, r1, #21
 802304a:	f7ff ffed 	bl	8023028 <xflowf>
 802304e:	bd10      	pop	{r4, pc}

08023050 <__math_oflowf>:
 8023050:	21e0      	movs	r1, #224	@ 0xe0
 8023052:	b510      	push	{r4, lr}
 8023054:	05c9      	lsls	r1, r1, #23
 8023056:	f7ff ffe7 	bl	8023028 <xflowf>
 802305a:	bd10      	pop	{r4, pc}

0802305c <_init>:
 802305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802305e:	46c0      	nop			@ (mov r8, r8)
 8023060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023062:	bc08      	pop	{r3}
 8023064:	469e      	mov	lr, r3
 8023066:	4770      	bx	lr

08023068 <_fini>:
 8023068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802306a:	46c0      	nop			@ (mov r8, r8)
 802306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802306e:	bc08      	pop	{r3}
 8023070:	469e      	mov	lr, r3
 8023072:	4770      	bx	lr
